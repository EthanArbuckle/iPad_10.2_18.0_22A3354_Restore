uint64_t closure #1 in AccessibilityDefaultActionRepresentableStyle.body(content:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt32 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _UNKNOWN **v72;
  char v73;

  v58 = a3;
  v59 = a4;
  v57 = type metadata accessor for AccessibilityDefaultActionRepresentableStyle(0, a3, a4, a4);
  v6 = *(_QWORD *)(v57 - 8);
  v56 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v57, v7);
  v9 = (char *)&v53 - v8;
  v10 = *(_QWORD *)a1;
  v11 = *(void **)(a1 + 8);
  v12 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
LABEL_4:

    v17 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v17, (uint64_t)&v69);
    swift_bridgeObjectRelease();
    if (v69)
    {
      if (*(_QWORD *)(v69 + 16))
      {
        v18 = *(_QWORD *)(v69 + 40);
        v19 = *(unsigned __int8 *)(v69 + 48);
        v20 = *(_QWORD *)(v69 + 56);
        v63 = *(_QWORD *)(v69 + 32);
        v64 = v18;
        v14 = v19;
        outlined copy of Text.Storage(v63, v18, v19);
        v15 = v20;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
    }
    v63 = 0;
    v64 = 0;
    v14 = 0;
    v15 = 0;
LABEL_9:
    v21 = swift_bridgeObjectRetain();
    v22 = specialized AccessibilityProperties.subscript.getter(v21);
    swift_bridgeObjectRelease_n();
    if (*(_QWORD *)(v22 + 16))
    {
      v13 = *(_QWORD *)(v22 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = 0;
    }
    goto LABEL_12;
  }
  v13 = 0;
  v63 = 0;
  v64 = 0;
  v14 = 0;
  v15 = 0;
  if (v12 == 1)
  {
    v16 = specialized Sequence.compactMap<A>(_:)(v10);
    static AccessibilityAttachment.combine(_:)(v16, &v69);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v10, v11, 1);
    v11 = (void *)v70;
    goto LABEL_4;
  }
LABEL_12:
  v24 = a2[2];
  v23 = a2[3];
  v25 = a2[4];
  v26 = (void *)a2[5];
  v28 = a2[6];
  v27 = a2[7];
  v61 = v27;
  v62 = v25;
  v60 = v28;
  if (v26)
  {
    LOBYTE(v69) = v25 & 1;
    v29 = v27;
    v30 = v23;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    v32 = v31;
    v33 = swift_allocObject();
    v34 = v69;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_QWORD *)(v33 + 48) = v24;
    *(_QWORD *)(v33 + 56) = v30;
    *(_BYTE *)(v33 + 64) = v34;
    *(_QWORD *)(v33 + 72) = v26;
    *(_QWORD *)(v33 + 80) = v28;
    *(_QWORD *)(v33 + 88) = v29;
    *(_QWORD *)(v33 + 96) = 0;
    *(_QWORD *)(v33 + 104) = 0;
    *(_QWORD *)(v33 + 112) = 0;
    v35 = v63;
    *(_QWORD *)(v33 + 120) = 2;
    *(_QWORD *)(v33 + 128) = v35;
    *(_QWORD *)(v33 + 136) = v64;
    *(_QWORD *)(v33 + 144) = v14;
    *(_QWORD *)(v33 + 152) = v15;
    *(_QWORD *)(v33 + 160) = v13;
    v36 = 1;
    *(_BYTE *)(v33 + 168) = 1;
    v37 = v24;
  }
  else
  {
    v54 = v24;
    v38 = *(void (**)(char *, _QWORD *, uint64_t))(v6 + 16);
    v55 = v15;
    v39 = v57;
    v53 = v23;
    v38(v9, a2, v57);
    v40 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v41 = swift_allocObject();
    v42 = v59;
    *(_QWORD *)(v41 + 16) = v58;
    *(_QWORD *)(v41 + 24) = v42;
    v43 = v39;
    v44 = v64;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v41 + v40, v9, v43);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = partial apply for closure #1 in closure #1 in AccessibilityDefaultActionRepresentableStyle.body(content:);
    *(_QWORD *)(v45 + 24) = v41;
    v46 = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
    v32 = v47;
    v33 = swift_allocObject();
    v36 = 0;
    *(_QWORD *)(v33 + 64) = 0;
    *(_QWORD *)(v33 + 72) = 2;
    *(_QWORD *)(v33 + 112) = v13;
    *(_QWORD *)(v33 + 120) = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    v35 = v63;
    *(_QWORD *)(v33 + 80) = v63;
    *(_QWORD *)(v33 + 88) = v44;
    v15 = v55;
    *(_QWORD *)(v33 + 96) = v14;
    *(_QWORD *)(v33 + 104) = v15;
    *(_QWORD *)(v33 + 128) = v45;
    *(_DWORD *)(v33 + 136) = v46;
    v37 = v54;
    v30 = v53;
  }
  v69 = v33;
  v70 = v65;
  v71 = v32;
  v72 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v73 = v36;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_187BF9830;
  outlined init with copy of AnyAccessibilityAction((uint64_t)&v69, v48 + 32);
  v49 = v64;
  outlined copy of Text?(v35, v64, v14, v15);
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v37, v30, v62, v26);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v68 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>();
  v66 = v50;
  v67 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, MEMORY[0x1E0CE6310]);
  *(_QWORD *)&v65 = v48;
  specialized Dictionary.subscript.setter((uint64_t)&v65, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
  AccessibilityAttachment.init(properties:)();
  swift_release();
  outlined consume of Text?(v35, v49, v14, v15);
  result = outlined destroy of AnyAccessibilityAction((uint64_t)&v69);
  v52 = *((_QWORD *)&v65 + 1);
  *(_QWORD *)a1 = v65;
  *(_QWORD *)(a1 + 8) = v52;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t AccessibilityNavigationLinkButtonModifier.init(trigger:label:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void AccessibilityNavigationLinkButtonModifier.body(content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[32];

  v10[2] = a1;
  v10[5] = a2;
  v2 = type metadata accessor for ModifiedContent();
  v10[4] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v10[1] = (char *)v10 - v4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
  v6 = v5;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityDefaultActionRepresentableStyle);
  v7 = type metadata accessor for ModifiedContent();
  v10[0] = v7;
  v8 = type metadata accessor for ModifiedContent();
  v9 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  v10[27] = v6;
  v10[28] = v7;
  v10[29] = v8;
  v10[30] = v9;
  type metadata accessor for StaticIf();
}

void sub_18730C394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_QWORD *)(v15 - 312) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v20 = *v13;
  v21 = v13[1];
  v22 = *(_QWORD *)(v12 + 24);
  View.accessibilityCombinedElement(options:ignoredTraits:)(12, v14, v22, v10);
  *(_QWORD *)(v15 - 224) = v14;
  *(_QWORD *)(v15 - 216) = v22;
  *(_QWORD *)(v15 - 208) = v20;
  *(_QWORD *)(v15 - 200) = v21;
  *(_QWORD *)(v15 - 272) = v14;
  *(_QWORD *)(v15 - 264) = v22;
  *(_QWORD *)(v15 - 256) = v20;
  *(_QWORD *)(v15 - 248) = v21;
  *(_QWORD *)(v15 - 136) = v22;
  *(_QWORD *)(v15 - 128) = &protocol witness table for AccessibilityAttachmentModifier;
  v23 = MEMORY[0x1E0CE2E70];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v15 - 136);
  v25 = lazy protocol witness table accessor for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>();
  *(_QWORD *)(v15 - 152) = v24;
  *(_QWORD *)(v15 - 144) = v25;
  v26 = *(_QWORD *)(v15 - 336);
  v27 = MEMORY[0x18D75FFDC](v23, v26, v15 - 152);
  v28 = lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction();
  *(_QWORD *)(v15 - 168) = v24;
  *(_QWORD *)(v15 - 160) = v28;
  MEMORY[0x18D75FFDC](v23, v9, v15 - 168);
  View.staticIf<A, B, C>(context:trueModifier:falseModifier:)((uint64_t)partial apply for closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:), v15 - 240, v26, (uint64_t)v17, v9, v24, MEMORY[0x1E0CE6830], v27);
}

uint64_t sub_18730C4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 304) + 8))(v0, v1);
  *(_QWORD *)(v7 - 184) = v6;
  *(_QWORD *)(v7 - 176) = v2;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v7 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v5, v3, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 312) + 8);
  v9(v5, v3);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, *(_QWORD *)(v7 - 296));
  return v9(v4, v3);
}

uint64_t closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v26 = a4;
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityDefaultActionRepresentableStyle);
  v9 = v8;
  v10 = type metadata accessor for ModifiedContent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v25 - v17;
  v29[0] = a1;
  v29[1] = a2;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v28[0] = a3;
  v28[1] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_retain();
  v19 = MEMORY[0x1E0CE2E70];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v28);
  MEMORY[0x18D75B4AC](v29, v7, v9, v20);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(0, 0, 0, 0);
  v21 = lazy protocol witness table accessor for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>();
  v27[0] = v20;
  v27[1] = v21;
  v22 = MEMORY[0x18D75FFDC](v19, v10, v27);
  static ViewBuilder.buildExpression<A>(_:)(v14, v10, v22);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v14, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v10, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v18, v10);
}

uint64_t closure #2 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v24 = a4;
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v23 - v15;
  v27[0] = a1;
  v27[1] = a2;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v26[0] = a3;
  v26[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v26);
  MEMORY[0x18D75B4AC](v27, v7, &type metadata for AccessibilityDefaultAction, v18);
  v19 = lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction();
  v25[0] = v18;
  v25[1] = v19;
  v20 = MEMORY[0x18D75FFDC](v17, v8, v25);
  static ViewBuilder.buildExpression<A>(_:)(v12, v8, v20);
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v8);
}

uint64_t AccessibilityPlaybackButtonModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[2];
  _OWORD v44[3];

  v42 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v37 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v37 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v37 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v40 = (uint64_t)&v37 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v41 = (char *)&v37 - v26;
  v39 = *(_QWORD *)(a1 + 24);
  v38 = a1;
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v3, v39, (uint64_t)v8);
  *(_QWORD *)&v44[0] = 1;
  ModifiedContent<>.accessibilityAddTraits(_:)(v44, v4, (uint64_t)v12);
  v27 = *(void (**)(_QWORD, _QWORD))(v5 + 8);
  v27(v8, v4);
  *(_QWORD *)&v44[0] = 1024;
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v44, v4, (uint64_t)v16);
  v27(v12, v4);
  v28 = specialized AccessibilityPlaybackButtonModifier.resolvedLabel.getter();
  v30 = v29;
  LOBYTE(v5) = v31 & 1;
  ModifiedContent<>.accessibilityLabel(_:)(v28, v29, v31 & 1, v32, v4, (uint64_t)v20);
  outlined consume of Text.Storage(v28, v30, v5);
  swift_bridgeObjectRelease();
  v27(v16, v4);
  AccessibilityPlaybackButtonModifier.resolvedValue.getter(v38, v44);
  v33 = v40;
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v44, v4, v40);
  outlined destroy of AccessibilityValueStorage((uint64_t)v44);
  v27(v20, v4);
  v43[0] = v39;
  v43[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v43);
  v35 = (uint64_t)v41;
  static ViewBuilder.buildExpression<A>(_:)(v33, v4, v34);
  v27(v33, v4);
  static ViewBuilder.buildBlock<A>(_:)(v35, v4, v42);
  return ((uint64_t (*)(uint64_t, uint64_t))v27)(v35, v4);
}

double AccessibilityPlaybackButtonModifier.resolvedValue.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  char v23[8];
  uint64_t v24;
  char v25;
  _OWORD v26[2];
  __int128 v27;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v23[-v7 - 8];
  type metadata accessor for ClosedRange<Date>();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
  outlined init with copy of ClosedRange<Date>?(v2 + *(int *)(v16 + 40), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v8, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    LOBYTE(v26[0]) = 0;
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    AccessibilityValueStorage.init<A>(_:description:)();
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v18 = v2 + *(int *)(v16 + 36);
    v19 = *(unsigned __int8 *)(v18 + 16);
    if (v19 == 4)
    {
      v23[0] = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      AccessibilityValueStorage.init<A>(_:description:)();
    }
    else if (v19 == 5)
    {
      specialized AccessibilityPlaybackButtonModifier.percentageValue(interval:)((unint64_t)v14, (uint64_t)v26);
    }
    else
    {
      v20 = *(_QWORD *)(v2 + *(int *)(v16 + 36) + 8);
      v23[0] = *(_QWORD *)v18;
      v24 = v20;
      v25 = v19;
      AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)(v23, (uint64_t)v14, (uint64_t)v26);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v21 = v26[1];
    *a2 = v26[0];
    a2[1] = v21;
    result = *(double *)&v27;
    a2[2] = v27;
  }
  return result;
}

uint64_t AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)(_QWORD);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD v37[3];
  _BYTE v38[8];
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v4 = v3;
  v37[1] = a3;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 1);
  v18 = a1[16];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, (uint64_t)v15, v19);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 2, v7);
  if (v20)
  {
    if (v20 == 1)
    {
      LOBYTE(v44) = v16;
      v45 = v17;
      v46 = v18;
      type metadata accessor for ClosedRange<Date>();
      v44 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(a2, a2 + *(int *)(v21 + 36));
      v45 = v22;
      lazy protocol witness table accessor for type String and conformance String();
      v23 = Text.init<A>(_:)();
    }
    else
    {
      type metadata accessor for ClosedRange<Date>();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2 + *(int *)(v33 + 36), v7);
      LOBYTE(v44) = v16;
      v45 = v17;
      v46 = v18;
      v23 = Text.init(_:style:)();
    }
    v28 = v23;
    v30 = v24;
    v32 = v25;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v15, v7);
    LOBYTE(v44) = v16;
    v45 = v17;
    v46 = v18;
    type metadata accessor for ClosedRange<Date>();
    v44 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)((uint64_t)v11, a2 + *(int *)(v26 + 36));
    v45 = v27;
    lazy protocol witness table accessor for type String and conformance String();
    v28 = Text.init<A>(_:)();
    v30 = v29;
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  v34 = v32 & 1;
  LOBYTE(v44) = v16;
  v45 = v17;
  v46 = v18;
  outlined copy of Text.Storage(v28, v30, v32 & 1);
  swift_bridgeObjectRetain();
  static Text.DateStyle.timer.getter();
  v38[0] = v41;
  v39 = v42;
  v40 = v43;
  if ((MEMORY[0x18D75B020](&v44, v38) & 1) != 0)
  {
    type metadata accessor for AccessibilityTextModifier();
    v35 = swift_allocObject();
    *(_WORD *)(v35 + 16) = 1800;
    *(_BYTE *)(v35 + 18) = 1;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    Text.modified(with:)();
    outlined consume of Text.Storage(v28, v30, v34);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v28, v30, v34);
    swift_release();
  }
  else
  {
    outlined consume of Text.Storage(v28, v30, v32 & 1);
  }
  swift_bridgeObjectRelease();
  return AccessibilityValueStorage.init(description:)();
}

uint64_t AccessibilityLinkModifier.init(_:isArchive:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  outlined init with take of TableCellFormula(a1, a5, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
  result = type metadata accessor for AccessibilityLinkModifier.Configuration(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AccessibilityLinkModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v53[3];
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t v74;

  v61 = a1;
  v65 = a4;
  v5 = *(_QWORD *)(a2 + 16);
  v64 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for AccessibilityLinkModifier.Configuration(0, v5, v64, a3);
  v54 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v55 = (char *)v53 - v8;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for LinkDestination.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v53 - v11;
  v13 = type metadata accessor for ModifiedContent();
  v57 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v56 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v59 = (uint64_t)v53 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v58 = (char *)v53 - v21;
  v22 = type metadata accessor for ModifiedContent();
  v53[1] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v22);
  v66 = v23;
  v24 = type metadata accessor for ModifiedContent();
  v53[0] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  MEMORY[0x1E0C80A78](v26, v27);
  MEMORY[0x1E0C80A78](v28, v29);
  MEMORY[0x1E0C80A78](v30, v31);
  v53[2] = (char *)v53 - v32;
  v60 = type metadata accessor for _ConditionalContent();
  v63 = *(_QWORD *)(v60 - 8);
  v33 = MEMORY[0x1E0C80A78](v60, v4);
  v62 = (char *)v53 - v34;
  if (*(_BYTE *)(v4 + *(int *)(v6 + 36)) == 1)
    View.accessibilityIgnoreViewResponders()();
  v35 = (uint64_t)v55;
  (*(void (**)(char *, double))(v54 + 16))(v55, v33);
  v36 = type metadata accessor for LinkDestination();
  v37 = MEMORY[0x1E0CE2E18];
  v38 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v35 + *(int *)(v36 + 24), (uint64_t)v12, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, (uint64_t (*)(_QWORD))v37);
  v39 = type metadata accessor for LinkDestination.Configuration();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v12, 0, 1, v39);
  v40 = v56;
  v41 = v64;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57A0], (uint64_t)v12, 1, v5, MEMORY[0x1E0CE57A0], v64);
  outlined destroy of TaskPriority?((uint64_t)v12, &lazy cache variable for type metadata for LinkDestination.Configuration?, v38);
  v74 = 8;
  v42 = v59;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v74, v13, v59);
  v43 = *(void (**)(char *, uint64_t))(v57 + 8);
  v43(v40, v13);
  v73[0] = v41;
  v73[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v44 = MEMORY[0x1E0CE2E70];
  v45 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v73);
  v46 = (uint64_t)v58;
  static ViewBuilder.buildExpression<A>(_:)(v42, v13, v45);
  v43((char *)v42, v13);
  static ViewBuilder.buildBlock<A>(_:)(v46, v13, v42);
  v72[0] = v41;
  v72[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v71[0] = MEMORY[0x18D75FFDC](v44, v66, v72);
  v71[1] = &protocol witness table for AccessibilityAttachmentModifier;
  MEMORY[0x18D75FFDC](v44, v24, v71);
  v47 = (uint64_t)v62;
  static ViewBuilder.buildEither<A, B>(second:)(v42, v24, v13);
  v43((char *)v42, v13);
  v43((char *)v46, v13);
  v70[0] = v41;
  v70[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v48 = MEMORY[0x1E0CE2E70];
  v69[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v66, v70);
  v69[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v49 = MEMORY[0x18D75FFDC](v48, v24, v69);
  v68[0] = v41;
  v68[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v50 = MEMORY[0x18D75FFDC](v48, v13, v68);
  v67[0] = v49;
  v67[1] = v50;
  v51 = v60;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v60, v67);
  static ViewBuilder.buildBlock<A>(_:)(v47, v51, v65);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v47, v51);
}

void AccessibilityToggleModifier.body(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[62];

  v16[0] = a1;
  v16[11] = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for ModifiedContent();
  v16[2] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v16[4] = (char *)v16 - v13;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
  v16[8] = v14;
  v15 = *(_QWORD *)(a2 + 24);
  v16[48] = v4;
  v16[49] = &type metadata for ToggleStyleConfiguration.Label;
  v16[1] = v4;
  v16[50] = v15;
  v16[51] = &protocol witness table for ToggleStyleConfiguration.Label;
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

void sub_18730D984(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[5] = a1;
  v5 = type metadata accessor for ModifiedContent();
  v1[6] = v5;
  v6 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  v1[9] = v6;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 184) = v5;
  *(_QWORD *)(v4 - 176) = v2;
  *(_QWORD *)(v4 - 168) = v6;
  type metadata accessor for StaticIf();
}

void sub_18730D9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v9 + 80) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 24) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v9 + 56) = (char *)&a9 - v21;
  v22 = v10[3];
  *(_OWORD *)(v9 + 320) = v10[2];
  *(_OWORD *)(v9 + 336) = v22;
  v23 = v10[5];
  *(_OWORD *)(v9 + 352) = v10[4];
  *(_OWORD *)(v9 + 368) = v23;
  v24 = v10[1];
  *(_OWORD *)(v9 + 288) = *v10;
  *(_OWORD *)(v9 + 304) = v24;
  View.accessibilityCombinedElement(options:ignoredTraits:)(12, v16, v11, v14);
  v25 = *(_OWORD *)(v9 + 320);
  v26 = *(_OWORD *)(v9 + 336);
  *(_OWORD *)(v17 - 160) = v25;
  *(_OWORD *)(v17 - 144) = v26;
  v27 = *(_OWORD *)(v9 + 352);
  v28 = *(_OWORD *)(v9 + 368);
  *(_OWORD *)(v17 - 128) = v27;
  *(_OWORD *)(v17 - 112) = v28;
  v29 = *(_OWORD *)(v9 + 288);
  v30 = *(_OWORD *)(v9 + 304);
  *(_OWORD *)(v17 - 192) = v29;
  *(_OWORD *)(v17 - 176) = v30;
  *(_OWORD *)(v9 + 224) = v25;
  *(_OWORD *)(v9 + 240) = v26;
  *(_OWORD *)(v9 + 256) = v27;
  *(_OWORD *)(v9 + 272) = v28;
  *(_OWORD *)(v9 + 192) = v29;
  *(_OWORD *)(v9 + 208) = v30;
  *(_QWORD *)(v9 + 192) = ToggleStyleConfiguration.accessibilityActions.getter();
  v31 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  v32 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v9 + 192, 1, v12, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v31, v32, v13);
  swift_bridgeObjectRelease();
  v33 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 + 16) + 8);
  v33(v14, v12);
  *(_QWORD *)(v9 + 192) = 1;
  ModifiedContent<>.accessibilityAddTraits(_:)((_QWORD *)(v9 + 192), v12, v15);
  v33(v13, v12);
  *(_OWORD *)(v9 + 192) = *(_OWORD *)(v17 - 168);
  *(_BYTE *)(v9 + 208) = *(_BYTE *)(v17 - 152);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  if (*(_BYTE *)(v9 + 191))
    v34 = 2 * (*(_BYTE *)(v9 + 191) != 1);
  else
    v34 = 1;
  *(_BYTE *)(v9 + 192) = v34;
  v35 = lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  ModifiedContent<>.accessibilityValue<A>(_:description:)(v9 + 192, 0, 0, 0, 0, v12, MEMORY[0x1E0CE5C00], v35, *(_QWORD *)(v9 + 32));
  v33(v15, v12);
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v9 + 120) = v11;
  *(_QWORD *)(v9 + 128) = v9 + 288;
  *(_QWORD *)(v9 + 168) = v11;
  *(_QWORD *)(v9 + 176) = &protocol witness table for AccessibilityAttachmentModifier;
  v36 = MEMORY[0x1E0CE2E70];
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v9 + 168);
  v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityToggleModifier<A>.RepresentationModifier<A1>, *(_QWORD *)(v9 + 40));
  *(_QWORD *)(v9 + 152) = v37;
  *(_QWORD *)(v9 + 160) = v38;
  v39 = v36;
  v40 = *(_QWORD *)(v9 + 48);
  v41 = MEMORY[0x18D75FFDC](v39, v40, v9 + 152);
  View.staticIf<A, B>(_:trueModifier:)((uint64_t)partial apply for closure #1 in AccessibilityToggleModifier.body(content:), v9 + 96, v40, *(_QWORD *)(v9 + 24), v41);
}

uint64_t sub_18730DC4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v6(v7, v2);
  v0[17] = v3;
  v0[18] = v1;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v0 + 17);
  v9 = v0[7];
  static ViewBuilder.buildExpression<A>(_:)(v5, v4, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v0[10] + 8);
  v10(v5, v4);
  static ViewBuilder.buildBlock<A>(_:)(v9, v4, v0[11]);
  return v10(v9, v4);
}

uint64_t ToggleStyleConfiguration.accessibilityActions.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24[3];
  __int128 v25;
  char v26;
  uint64_t v27;
  __int128 v28;

  v1 = v0[3];
  v20 = v0[2];
  v21 = v1;
  v2 = v0[5];
  v22 = v0[4];
  v23 = v2;
  v3 = v0[1];
  v18 = *v0;
  v19 = v3;
  outlined init with take of ToggleStyleConfiguration.Effect(&v21, v24);
  outlined init with take of ToggleStyleConfiguration.Effect(v24, &v25);
  v4 = v27;
  if (v27)
  {
    v5 = v25;
    v6 = v26;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    *(_QWORD *)(v7 + 56) = v8;
    *(_QWORD *)(v7 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v9 = swift_allocObject();
    *(_QWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = v5;
    *(_BYTE *)(v9 + 64) = v6;
    *(_QWORD *)(v9 + 72) = v4;
    *(_OWORD *)(v9 + 80) = v28;
    *(_QWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 104) = 0;
    *(_QWORD *)(v9 + 112) = 0;
    *(_QWORD *)(v9 + 120) = 2;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 153) = 0u;
    *(_BYTE *)(v7 + 72) = 1;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
    v10 = (_OWORD *)swift_allocObject();
    v11 = v21;
    v10[3] = v20;
    v10[4] = v11;
    v12 = v23;
    v10[5] = v22;
    v10[6] = v12;
    v13 = v19;
    v10[1] = v18;
    v10[2] = v13;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = partial apply for closure #1 in ToggleStyleConfiguration.accessibilityActions.getter;
    *(_QWORD *)(v14 + 24) = v10;
    LODWORD(v10) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
    *(_QWORD *)(v7 + 56) = v15;
    *(_QWORD *)(v7 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v16 = swift_allocObject();
    *(_QWORD *)(v7 + 32) = v16;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 72) = 2;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_QWORD *)(v16 + 112) = 0;
    *(_QWORD *)(v16 + 120) = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
    *(_QWORD *)(v16 + 128) = v14;
    *(_DWORD *)(v16 + 136) = (_DWORD)v10;
    *(_BYTE *)(v7 + 72) = 0;
    outlined retain of ToggleStyleConfiguration(&v18);
  }
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v24);
  return v7;
}

void closure #1 in AccessibilityToggleModifier.body(content:)()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

void sub_18730DFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;

  *(_QWORD *)(v9 + 16) = a1;
  v14 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 + 32) = v14;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v9 + 8) = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v9 + 24) = (char *)&a9 - v19;
  v20 = v10[3];
  *(_OWORD *)(v9 + 224) = v10[2];
  *(_OWORD *)(v9 + 240) = v20;
  v21 = v10[5];
  *(_OWORD *)(v9 + 256) = v10[4];
  *(_OWORD *)(v9 + 272) = v21;
  v22 = v10[1];
  *(_OWORD *)(v9 + 192) = *v10;
  *(_OWORD *)(v9 + 208) = v22;
  outlined init with take of ToggleStyleConfiguration.Effect((__int128 *)(v11 + 48), (_OWORD *)(v13 - 240));
  v23 = outlined init with take of ToggleStyleConfiguration.Effect((__int128 *)(v13 - 240), (_OWORD *)(v13 - 144));
  v25.i64[0] = 0;
  v26 = *(_QWORD *)(v13 - 120);
  v27 = *(unsigned __int8 *)(v13 - 128);
  if (!v26)
    v27 = 0;
  *(_QWORD *)(v13 - 176) = v27;
  *(_QWORD *)(v13 - 168) = v26;
  v24.i64[0] = v26;
  v28 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v24, v25)).i64[0], 0);
  v29 = vandq_s8(*(int8x16_t *)(v13 - 112), v28);
  *(int8x16_t *)(v13 - 192) = vandq_s8(*(int8x16_t *)(v13 - 144), v28);
  *(int8x16_t *)(v13 - 160) = v29;
  AccessibilityToggleModifier.RepresentationModifier.init(label:intent:)((uint64_t)v23, v12, v9 + 144);
}

uint64_t sub_18730E0A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v4 = v0[18];
  v5 = v0[19];
  *v0 = v4;
  v6 = v0[20];
  v7 = (void *)v0[21];
  v9 = v0[22];
  v8 = v0[23];
  v0[12] = v4;
  v0[13] = v5;
  v0[14] = v6;
  v0[15] = (uint64_t)v7;
  v0[16] = v9;
  v0[17] = v8;
  outlined retain of ToggleStyleConfiguration.Effect(v3 - 240);
  v0[10] = v1;
  v0[11] = (uint64_t)&protocol witness table for AccessibilityAttachmentModifier;
  v10 = v2;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v0 + 10);
  v13 = v0[1];
  v12 = v0[2];
  MEMORY[0x18D75B4AC](v0 + 12, v10, v12, v11);
  outlined consume of ToggleStyleConfiguration.Effect(*v0, v5, v6, v7);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityToggleModifier<A>.RepresentationModifier<A1>, v12);
  v0[8] = v11;
  v0[9] = v14;
  v15 = v0[4];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v0 + 8);
  v17 = v0[3];
  static ViewBuilder.buildExpression<A>(_:)(v13, v15, v16);
  v18 = *(void (**)(uint64_t, uint64_t))(v0[6] + 8);
  v18(v13, v15);
  static ViewBuilder.buildBlock<A>(_:)(v17, v15, v0[7]);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v17, v15);
}

void AccessibilityToggleModifier.RepresentationModifier.init(label:intent:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

uint64_t sub_18730E228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with take of AppIntentAction?(v1, v2 + *(int *)(a1 + 52));
}

uint64_t AccessibilityToggleModifier.RepresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];

  v62 = a3;
  v59 = *(a2 - 1);
  v61 = *(_QWORD *)(v59 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v57 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v55 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v7, v5);
  v56 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityToggleModifier<A>.RepresentationModifier<A1>, v8);
  v58 = type metadata accessor for _ViewModifier_Content();
  v47 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v14 = type metadata accessor for ModifiedContent();
  v53 = a2[5];
  v72[0] = v53;
  v72[1] = &protocol witness table for DetachedGeometryModifier;
  v15 = MEMORY[0x1E0CE2E70];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v72);
  v17 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v71[0] = v16;
  v71[1] = v17;
  v70[0] = MEMORY[0x18D75FFDC](v15, v11, v71);
  v70[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v69[0] = MEMORY[0x18D75FFDC](v15, v12, v70);
  v69[1] = &protocol witness table for _HiddenModifier;
  v18 = MEMORY[0x18D75FFDC](v15, v13, v69);
  v19 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  v68[0] = v18;
  v68[1] = v19;
  MEMORY[0x18D75FFDC](v15, v14, v68);
  v48 = type metadata accessor for _BackgroundModifier();
  v50 = type metadata accessor for ModifiedContent();
  v51 = type metadata accessor for ModifiedContent();
  v52 = type metadata accessor for ModifiedContent();
  v20 = type metadata accessor for ModifiedContent();
  v54 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v46 = (uint64_t)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v49 = (char *)&v46 - v26;
  v27 = v55;
  v28 = (uint64_t)v56;
  v29 = v60;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v55 + 16))(v56, v60, v6, v25);
  v30 = v59;
  v31 = v57;
  (*(void (**)(char *, uint64_t, _QWORD *))(v59 + 16))(v57, v29, a2);
  v32 = v30;
  v33 = (*(unsigned __int8 *)(v30 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v34 = (char *)swift_allocObject();
  *((_QWORD *)v34 + 2) = a2[2];
  *((_QWORD *)v34 + 3) = v6;
  v35 = v53;
  *((_QWORD *)v34 + 4) = a2[4];
  *((_QWORD *)v34 + 5) = v35;
  (*(void (**)(char *, char *, _QWORD *))(v32 + 32))(&v34[v33], v31, a2);
  v36 = v58;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v58);
  v38 = v46;
  View.accessibilityAttachment<A>(content:_:)(v28, (uint64_t)partial apply for closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:), (uint64_t)v34, v36, v6, v37, v35, v46);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v6);
  v67[0] = v37;
  v67[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v39 = MEMORY[0x1E0CE2E70];
  v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v47, v67);
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v48);
  v66[0] = v40;
  v66[1] = v41;
  v65[0] = MEMORY[0x18D75FFDC](v39, v50, v66);
  v65[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v64[0] = MEMORY[0x18D75FFDC](v39, v51, v65);
  v64[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v63[0] = MEMORY[0x18D75FFDC](v39, v52, v64);
  v63[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v42 = MEMORY[0x18D75FFDC](v39, v20, v63);
  v43 = (uint64_t)v49;
  static ViewBuilder.buildExpression<A>(_:)(v38, v20, v42);
  v44 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v44(v38, v20);
  static ViewBuilder.buildBlock<A>(_:)(v43, v20, v62);
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v43, v20);
}

void closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:)()
{
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

uint64_t sub_18730E7DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[6];
  uint64_t v45[5];
  char v46;

  v4 = (uint64_t *)(v2 + *(int *)(result + 52));
  v5 = (void *)v4[3];
  if (v5)
  {
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[5];
    v39 = v4[4];
    v41 = v1;
    v9 = v4[2];
    v10 = *(_QWORD *)v1;
    v11 = *(void **)(v1 + 8);
    v42 = v7;
    v43 = *v4;
    if (*(_BYTE *)(v1 + 16))
    {
      if (*(_BYTE *)(v1 + 16) != 1)
      {
        v20 = v4[2];
        outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v9 & 1);
        v21 = v5;
        swift_retain();
        v22 = v20;
        v37 = 0;
        v23 = v5;
        v24 = 0;
        v17 = 0;
        v25 = v7;
        v19 = 0;
        v18 = 0;
        v26 = v39;
LABEL_16:
        v29 = v22 & 1;
        *(_BYTE *)(v3 - 104) = v22 & 1;
        v40 = v22 & 1;
        type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
        v45[3] = v30;
        v45[4] = (uint64_t)&protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
        v31 = swift_allocObject();
        v45[0] = v31;
        v32 = *(_BYTE *)(v3 - 104);
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_QWORD *)(v31 + 48) = v6;
        *(_QWORD *)(v31 + 56) = v25;
        *(_BYTE *)(v31 + 64) = v32;
        *(_QWORD *)(v31 + 72) = v23;
        *(_QWORD *)(v31 + 80) = v26;
        *(_QWORD *)(v31 + 88) = v8;
        *(_QWORD *)(v31 + 96) = 0;
        *(_QWORD *)(v31 + 104) = 0;
        *(_QWORD *)(v31 + 112) = 0;
        *(_QWORD *)(v31 + 120) = 2;
        *(_QWORD *)(v31 + 128) = v24;
        *(_QWORD *)(v31 + 136) = v17;
        *(_QWORD *)(v31 + 144) = v19;
        *(_QWORD *)(v31 + 152) = v18;
        *(_QWORD *)(v31 + 160) = v37;
        *(_BYTE *)(v31 + 168) = 1;
        v46 = 1;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
        outlined init with copy of AnyAccessibilityAction((uint64_t)v45, v33 + 32);
        outlined copy of Environment<AppIntentExecutor?>.Content(v6, v25, v29);
        v34 = v23;
        swift_retain();
        outlined copy of Text?(v24, v17, v19, v18);
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        swift_retain();
        v44[5] = Dictionary.init(minimumCapacity:)();
        type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>();
        v44[3] = v35;
        v44[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, MEMORY[0x1E0CE6310]);
        v44[0] = v33;
        specialized Dictionary.subscript.setter((uint64_t)v44, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
        AccessibilityAttachment.init(properties:)();
        swift_release();
        outlined consume of Text?(v24, v17, v19, v18);
        outlined consume of Environment<AppIntentExecutor?>.Content(v43, v42, v40);
        swift_release();

        result = outlined destroy of AnyAccessibilityAction((uint64_t)v45);
        v36 = v44[1];
        *(_QWORD *)v41 = v44[0];
        *(_QWORD *)(v41 + 8) = v36;
        *(_BYTE *)(v41 + 16) = 0;
        return result;
      }
      v38 = v4[2];
      outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v9 & 1);
      v12 = v5;
      swift_retain();
      v13 = specialized Sequence.compactMap<A>(_:)(v10);
      static AccessibilityAttachment.combine(_:)(v13, v45);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v10, v11, 1);
      v11 = (void *)v45[1];
    }
    else
    {
      v38 = v4[2];
      outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v9 & 1);
      v14 = v5;
      swift_retain();
    }

    v15 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v15, (uint64_t)v45);
    swift_bridgeObjectRelease();
    if (v45[0])
    {
      if (*(_QWORD *)(v45[0] + 16))
      {
        v16 = *(_QWORD *)(v45[0] + 32);
        v17 = *(_QWORD *)(v45[0] + 40);
        v18 = *(_QWORD *)(v45[0] + 56);
        v19 = *(unsigned __int8 *)(v45[0] + 48);
        outlined copy of Text.Storage(v16, v17, *(_BYTE *)(v45[0] + 48));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_12:
        v27 = swift_bridgeObjectRetain();
        v28 = specialized AccessibilityProperties.subscript.getter(v27);
        swift_bridgeObjectRelease_n();
        if (*(_QWORD *)(v28 + 16))
        {
          v37 = *(_QWORD *)(v28 + 32);
          swift_retain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v37 = 0;
        }
        v23 = v5;
        v24 = v16;
        v25 = v42;
        v22 = v38;
        v26 = v39;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    v16 = 0;
    v17 = 0;
    v19 = 0;
    v18 = 0;
    goto LABEL_12;
  }
  return result;
}

_QWORD *closure #1 in ToggleStyleConfiguration.accessibilityActions.getter@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = v4;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v7, v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  result = outlined release of ToggleStyleConfiguration(a1);
  *a2 = 2;
  return result;
}

void AccessibilityAdjustableModifier.Configuration.init(value:continuous:onIncrement:onDecrement:onSet:onEditingChanged:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

int *sub_18730ED28(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(v5 + result[17]) = v4;
  v6 = (_QWORD *)(v5 + result[18]);
  *v6 = v3;
  v6[1] = v2;
  v7 = (_QWORD *)(v5 + result[19]);
  *v7 = v1;
  v7[1] = v11;
  v8 = (_QWORD *)(v5 + result[20]);
  *v8 = v13;
  v8[1] = v14;
  v9 = (_QWORD *)(v5 + result[21]);
  *v9 = v10;
  v9[1] = v12;
  return result;
}

void AccessibilityAdjustableModifier.body(content:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[26];

  v14[6] = a1;
  v14[3] = a3;
  v4 = a2[3];
  v5 = type metadata accessor for Optional();
  v14[4] = *(_QWORD *)(v5 - 8);
  v14[5] = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v14[2] = (char *)v14 - v7;
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = a2[2];
  v11 = a2[5];
  v14[0] = a2[4];
  v13 = a2[6];
  v12 = a2[7];
  v14[19] = v10;
  v14[20] = v4;
  v14[1] = v4;
  v14[21] = v14[0];
  v14[22] = v11;
  v14[23] = v13;
  v14[24] = v12;
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

uint64_t sub_18730EE68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)(v9 - 136) = *(_BYTE *)(*(_QWORD *)(v9 - 232) + *(int *)(a1 + 68));
  (*(void (**)(uint64_t))(v3 + 16))(v2);
  v10 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v7;
  *((_QWORD *)v11 + 3) = v1;
  v12 = *(_QWORD *)(v9 - 288);
  *((_QWORD *)v11 + 4) = v12;
  *((_QWORD *)v11 + 5) = v4;
  *((_QWORD *)v11 + 6) = v8;
  *((_QWORD *)v11 + 7) = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v11[v10], v2, v6);
  v13 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  v14 = v12;
  v15 = *(_QWORD *)(v9 - 264);
  View.accessibilityAction<A>(_:label:image:_:)(v9 - 136, 0, 0, 0, 0, 0, (uint64_t)partial apply for closure #1 in AccessibilityAdjustableModifier.body(content:), (uint64_t)v11, v15, v7, (uint64_t)&type metadata for AccessibilityAdjustableAction, v12, v13);
  swift_release();
  v17 = *(_QWORD *)(v9 - 256);
  v16 = *(_QWORD *)(v9 - 248);
  v18 = *(_QWORD *)(v9 - 272);
  v19 = *(_QWORD *)(v9 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v19, v16);
  v20 = *(_QWORD *)(v9 - 280);
  *(_QWORD *)(v9 - 208) = v7;
  *(_QWORD *)(v9 - 200) = v20;
  *(_QWORD *)(v9 - 192) = v14;
  *(_QWORD *)(v9 - 184) = v4;
  *(_QWORD *)(v9 - 176) = v8;
  *(_QWORD *)(v9 - 168) = v5;
  *(_QWORD *)(v9 - 160) = v15;
  *(_QWORD *)(v9 - 152) = v19;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in AccessibilityAdjustableModifier.body(content:), v9 - 224, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, v21, v9 - 136);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
}

void closure #1 in AccessibilityAdjustableModifier.body(content:)()
{
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

void sub_18730F034(int *a1)
{
  uint64_t v1;
  _BYTE *v2;
  char v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v5 = (*(uint64_t (**)(uint64_t))(v1 + a1[21]))(1);
  if ((v3 & 1) != 0)
    v6 = a1[19];
  else
    v6 = a1[18];
  v7 = *(void (**)(uint64_t))(v1 + v6);
  if (v7)
    v7(v5);
  *v2 = 2;
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

uint64_t sub_18730F098(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + *(int *)(a1 + 84)))(0);
}

void closure #2 in AccessibilityAdjustableModifier.body(content:)()
{
  type metadata accessor for AccessibilityAdjustableModifier();
}

uint64_t sub_18730F130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v38[80];

  v6 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 184) = v6;
  *(_QWORD *)(v5 - 176) = a1;
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v5 - 72) = &v38[-v7];
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v38[-v10];
  v12 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v38[-v18];
  *(_QWORD *)(v5 - 240) = &v38[-v18];
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v5 - 216) = &v38[-v23];
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v24 + 16);
  v26 = v24;
  *(_QWORD *)(v5 - 232) = v24;
  v25(v15, v2, v12, v22);
  v27 = *(_QWORD *)(v3 - 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v27 + 16))(v11, *(_QWORD *)(v5 - 224), v3);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v11, 0, 1, v3);
  v28 = *(_QWORD *)(v5 - 208);
  AccessibilityValueStorage.init<A>(_:description:)();
  ModifiedContent<>.accessibilityValue(_:)(v5 - 136, v12, (uint64_t)v19);
  outlined destroy of AccessibilityValueStorage(v5 - 136);
  v29 = *(void (**)(_BYTE *, uint64_t))(v26 + 8);
  v29(v15, v12);
  v31 = *(_QWORD *)(v5 - 184);
  v30 = *(_QWORD *)(v5 - 176);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v31 + 16))(*(_QWORD *)(v5 - 72), *(_QWORD *)(v5 - 160), v30);
  v32 = (*(unsigned __int8 *)(v31 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = *(_QWORD *)(v5 - 200);
  *((_QWORD *)v33 + 3) = v3;
  v34 = *(_QWORD *)(v5 - 248);
  *((_QWORD *)v33 + 4) = *(_QWORD *)(v5 - 152);
  *((_QWORD *)v33 + 5) = v34;
  *((_QWORD *)v33 + 6) = v28;
  *((_QWORD *)v33 + 7) = v4;
  (*(void (**)(char *, _QWORD, uint64_t))(v31 + 32))(&v33[v32], *(_QWORD *)(v5 - 72), v30);
  v35 = *(_QWORD *)(v5 - 216);
  v36 = *(_BYTE **)(v5 - 240);
  ModifiedContent<>.accessibilitySetValueAction(_:)((uint64_t)partial apply for closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:), (uint64_t)v33, v12, v35);
  swift_release();
  v29(v36, v12);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 232) + 40))(*(_QWORD *)(v5 - 192), v35, v12);
}

void closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)()
{
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

void sub_18730F3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(v9 + *(int *)(a1 + 84)))(1);
  (*(void (**)(uint64_t *))(v9 + *(int *)(a1 + 80)))(&a9);
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

uint64_t sub_18730F444(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + *(int *)(a1 + 84)))(0);
}

_QWORD *closure #2 in AccessibilitySliderModifier.init(_:value:)(_QWORD *a1)
{
  uint64_t v3;

  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

_QWORD *closure #3 in AccessibilitySliderModifier.init(_:value:)(_QWORD *a1)
{
  uint64_t v3;

  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

void closure #4 in AccessibilitySliderModifier.init(_:value:)(double *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  id v18;
  double v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  void *v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  double v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  double v43;
  void *v44;
  void *v45;
  void *v46;

  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(double *)&a2 != 0.0)
  {
    v42 = a6;
    v43 = *(double *)&a2;
    v17 = *a1;
    v44 = a3;
    v45 = a4;
    v46 = a5;
    v18 = a5;
    v19 = COERCE_DOUBLE(a2);
    v20 = a3;
    v21 = a4;
    v22 = (void *)AccessibilityBoundedNumber.minValue.getter();
    if (!v22)
      goto LABEL_6;
    v23 = v22;
    objc_msgSend(v22, sel_doubleValue);
    v25 = v24;

    v43 = v19;
    v44 = a3;
    v45 = a4;
    v46 = a5;
    v26 = (void *)AccessibilityBoundedNumber.maxValue.getter();
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v26, sel_doubleValue);
      v29 = v28;

      v43 = v19;
      v44 = a3;
      v45 = a4;
      v46 = a5;
      v30 = (void *)AccessibilityBoundedNumber.step.getter();
      v43 = v17;
      if (v30)
      {
        v31 = v30;
        v32 = (void *)AccessibilityNumber.value.getter();
        objc_msgSend(v32, sel_doubleValue);
        v34 = v33;

        objc_msgSend(v31, sel_doubleValue);
        v36 = v35;
        (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E0DED4F0], v12);
        v43 = v34;
        specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v16, v36);
        v37 = v43;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

      }
      else
      {
        v38 = (void *)AccessibilityNumber.value.getter();
        objc_msgSend(v38, sel_doubleValue);
        v37 = v39;

      }
      v40 = v42;
      v43 = (v37 - v25) / (v29 - v25);
      outlined retain of SliderStyleConfiguration(v42);
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      outlined consume of AccessibilitySliderValue?(a2, a3, a4, a5);
      outlined release of SliderStyleConfiguration(v40);
    }
    else
    {
LABEL_6:
      outlined consume of AccessibilitySliderValue?(a2, a3, a4, a5);
    }
  }
}

void AccessibilityStepperModifier.init(_:value:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[112];
  _QWORD v19[16];

  v2 = a1[1];
  v17 = *a1;
  v3 = a1[3];
  v4 = a1[4];
  v15 = a1[5];
  v16 = a1[2];
  v5 = a1[6];
  v6 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if (*a2)
    v10 = a2[1];
  else
    v10 = 0;
  if (*a2)
    v11 = a2[2];
  else
    v11 = 0;
  if (*a2)
    v12 = a2[3];
  else
    v12 = 0;
  v19[0] = *a2;
  v19[1] = v10;
  v13 = v6;
  v19[2] = v11;
  v19[3] = v12;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v13;
  v14[3] = v7;
  v14[4] = v9;
  v14[5] = v8;
  v14[6] = v17;
  v14[7] = v2;
  v14[8] = v16;
  v14[9] = v3;
  v14[10] = v4;
  v14[11] = v15;
  v14[12] = v5;
  lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  AccessibilityAdjustableModifier.Configuration.init(value:continuous:onIncrement:onDecrement:onSet:onEditingChanged:)((uint64_t)v19, (uint64_t)v18);
}

void sub_18730F9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 208) = v22;
  *(_QWORD *)(v23 - 200) = MEMORY[0x1E0CE5DD0];
  *(_QWORD *)(v23 - 192) = v21;
  *(_QWORD *)(v23 - 184) = a19;
  *(_QWORD *)(v23 - 176) = a20;
  *(_QWORD *)(v23 - 168) = v20;
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

uint64_t sub_18730FA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v4 - 208, &v17, a1);
  v5 = *(_BYTE *)(v4 - 176);
  v6 = *(_OWORD *)(v1 + 184);
  v7 = *(_OWORD *)(v1 + 200);
  v8 = *(_OWORD *)(v4 - 192);
  v9 = *(_OWORD *)(v1 + 152);
  v10 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)v2 = *(_OWORD *)(v4 - 208);
  *(_OWORD *)(v2 + 16) = v8;
  *(_BYTE *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 40) = v9;
  *(_OWORD *)(v2 + 56) = v10;
  *(_OWORD *)(v2 + 72) = v6;
  *(_OWORD *)(v2 + 88) = v7;
  outlined copy of AccessibilitySliderValue?(v12, v15, v14, v13);
  outlined copy of AppIntentExecutor?(v16);
  outlined copy of AppIntentExecutor?(v3);
  return swift_retain();
}

void closure #2 in AccessibilityStepperModifier.init(_:value:)(uint64_t *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;

  if (!a2)
    return;
  v29 = *a1;
  v11 = a5;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = (void *)AccessibilityNumber.value.getter();
  objc_msgSend(v15, sel_doubleValue, v29);
  v17 = v16;

  v18 = (void *)AccessibilityBoundedNumber.value.getter();
  objc_msgSend(v18, sel_doubleValue, v12, a3, a4, a5);
  v20 = v19;

  v21 = v17 - v20;
  v22 = (void *)AccessibilityBoundedNumber.step.getter();
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v22, sel_doubleValue, v12, a3, a4, a5);
    v25 = v24;

  }
  else
  {
    v25 = 1.0;
  }
  v26 = fabs(round(v21 / v25));
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    return;
  }
  if ((uint64_t)v26 >= 1)
  {
    v27 = (uint64_t)v26 + 1;
    while (v21 <= 0.0)
    {
      v28 = *(void (**)(void))(a6 + 24);
      if (v28)
        goto LABEL_12;
LABEL_13:
      if (--v27 <= 1)
        goto LABEL_17;
    }
    v28 = *(void (**)(void))(a6 + 8);
    if (!v28)
      goto LABEL_13;
LABEL_12:
    v28();
    goto LABEL_13;
  }
LABEL_17:
  outlined consume of AccessibilitySliderValue?(a2, a3, a4, a5);
}

void AccessibilityStepperModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  type metadata accessor for AccessibilityAdjustableModifier();
}

uint64_t sub_18730FD68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAdjustableModifier<A, B>, a1);
  *(_QWORD *)(v8 - 272) = v6;
  *(_QWORD *)(v8 - 264) = &protocol witness table for AccessibilityAttachmentModifier;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v8 - 272);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v3, a1, v10);
  static ViewBuilder.buildExpression<A>(_:)(v5, v2, v11);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v5, v2);
  static ViewBuilder.buildBlock<A>(_:)(v4, v2, v1);
  return v12(v4, v2);
}

uint64_t AccessibilityDisclosureModifier.init(_:)()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  swift_release();
  swift_release();
  return v1;
}

uint64_t AccessibilityDisclosureModifier.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  _QWORD v22[2];
  char v23;

  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v22[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v22[-1] - v15;
  v23 = a1;
  v17 = lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  View.accessibilityValue<A>(_:description:)((uint64_t)&v23, 0, 0, 0, 0, a2, MEMORY[0x1E0CE62E8], a3, (uint64_t)v12, v17);
  v22[0] = a3;
  v22[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v22);
  static ViewBuilder.buildExpression<A>(_:)(v12, v8, v18);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, a4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v8);
}

uint64_t AccessibilityDisclosureModifier.List.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;

  v33 = a3;
  v32 = a2;
  v34 = a6;
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v31 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v31 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v31 - v24;
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, a4, a5, (uint64_t)v13);
  *(_QWORD *)&v36 = 3;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v36, v9, (uint64_t)v17);
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v13, v9);
  v36 = 0u;
  v37 = 0u;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a4;
  *(_QWORD *)(v27 + 24) = a5;
  v28 = v32;
  *(_QWORD *)(v27 + 32) = a1;
  *(_QWORD *)(v27 + 40) = v28;
  *(_BYTE *)(v27 + 48) = v33;
  swift_retain();
  swift_retain();
  ModifiedContent<>.accessibilityAction(kind:_:)((uint64_t *)&v36, (uint64_t)partial apply for closure #1 in AccessibilityDisclosureModifier.List.body(content:), v27, v9);
  swift_release();
  outlined consume of AccessibilityActionKind.ActionKind(v36, *((uint64_t *)&v36 + 1), v37, *((unint64_t *)&v37 + 1));
  v26(v17, v9);
  v35[0] = a5;
  v35[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v35);
  static ViewBuilder.buildExpression<A>(_:)(v21, v9, v29);
  v26(v21, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v25, v9, v34);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v9);
}

uint64_t closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  result = swift_release();
  *a1 = 3;
  return result;
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityDisclosureModifier<A>.List@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return AccessibilityDisclosureModifier.List.body(content:)(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityDisclosureModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v2;

  return AccessibilityDisclosureModifier.body(content:)(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void AccessibilityGaugeModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_187310440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  *(_QWORD *)(v8 - 112) = v7;
  *(_QWORD *)(v8 - 104) = &protocol witness table for IgnoreViewRespondersModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v8 - 112);
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v5, v11, v4);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v6, v5);
  *(_QWORD *)(v8 - 120) = v9;
  *(_QWORD *)(v8 - 136) = 0;
  *(_BYTE *)(v8 - 128) = 0;
  *(_QWORD *)(v8 - 152) = 0x3FF0000000000000;
  *(_BYTE *)(v8 - 144) = 0;
  ModifiedContent<>.accessibilityValue<A>(_:from:to:description:)(v8 - 120, v8 - 136, v8 - 152, 0, 0, 0, 0, v1, v3, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB0B0]);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 184) + 8);
  v12(v4, v1);
  *(_QWORD *)(v8 - 168) = v11;
  *(_QWORD *)(v8 - 160) = &protocol witness table for AccessibilityAttachmentModifier;
  v13 = MEMORY[0x18D75FFDC](v10, v1, v8 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v3, v1, v13);
  v12(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v8 - 176));
  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v2, v1);
}

void protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityGaugeModifier<A>()
{
  AccessibilityGaugeModifier.body(content:)();
}

uint64_t AccessibilityGroupBoxLabelModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];

  v31 = a1;
  v32 = a4;
  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v29 - v13;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  v15 = type metadata accessor for ModifiedContent();
  v30 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v29 - v21;
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, a2, a3, (uint64_t)v10);
  v35[0] = 2;
  ModifiedContent<>.accessibilityAddTraits(_:)(v35, v6, (uint64_t)v14);
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  v35[0] = 0x786F4270756F7267;
  v35[1] = 0xE800000000000000;
  v34[0] = a3;
  v34[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v24 = MEMORY[0x1E0CE2E70];
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v34);
  View.accessibilityLabeledPair<A>(role:id:in:)(0, (uint64_t)v35, v31, v6, MEMORY[0x1E0DEA968], v25);
  v23(v14, v6);
  v33[0] = v25;
  v33[1] = &protocol witness table for RelationshipModifier<A>;
  v26 = MEMORY[0x18D75FFDC](v24, v15, v33);
  static ViewBuilder.buildExpression<A>(_:)(v18, v15, v26);
  v27 = *(void (**)(char *, uint64_t))(v30 + 8);
  v27(v18, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v22, v15, v32);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v15);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityGroupBoxLabelModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return AccessibilityGroupBoxLabelModifier.body(content:)(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t AccessibilityGroupBoxContentModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v21 = a4;
  v7 = MEMORY[0x1E0DEA968];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v20 - v15;
  v23[0] = 0x786F4270756F7267;
  v23[1] = 0xE800000000000000;
  View.accessibilityLabeledPair<A>(role:id:in:)(1, (uint64_t)v23, a1, a2, v7, a3);
  v22[0] = a3;
  v22[1] = &protocol witness table for RelationshipModifier<A>;
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v22);
  static ViewBuilder.buildExpression<A>(_:)(v12, v8, v17);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, v21);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, v8);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityGroupBoxContentModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return AccessibilityGroupBoxContentModifier.body(content:)(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void AccessibilityTraitsModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier(255, v3, *(_QWORD *)(a2 + 24), v6);
  v7 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v9, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  View.accessibilityCaptureViewResponders()();
}

void sub_187310AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 96) = &protocol witness table for CaptureViewRespondersModifier;
  *(_QWORD *)(v5 - 88) = v0;
  v6 = MEMORY[0x1E0CE2E70];
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v5 - 104);
  MEMORY[0x18D75B4AC](v5 - 88, v1, *(_QWORD *)(v5 - 184), v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8))(v3, v1);
  *(_QWORD *)(v5 - 120) = v7;
  *(_QWORD *)(v5 - 112) = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  MEMORY[0x18D75FFDC](v6, v2, v5 - 120);
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_187310B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 168) + 8))(v6, v3);
  *(_QWORD *)(v7 - 136) = v2;
  *(_QWORD *)(v7 - 128) = &protocol witness table for IgnoreViewRespondersModifier;
  v8 = MEMORY[0x18D75FFDC](v0, v1, v7 - 136);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 152) + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v7 - 144));
  return v9(v4, v1);
}

uint64_t AccessibilityTraitsModifier.ChildModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v7[0] = Dictionary.init(minimumCapacity:)();
  }
  else
  {
    v4 = *v3;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v8 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>(0);
    v7[3] = v5;
    v7[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, MEMORY[0x1E0CE6310]);
    v7[0] = v4;
    v7[1] = 0;
    specialized Dictionary.subscript.setter((uint64_t)v7, MEMORY[0x1E0CE58B8]);
    v7[0] = v8;
  }
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityTraitsModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTraitsModifier<A>.ChildModifier, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

void AccessibilityLabelModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for AccessibilityLabelModifier.ChildModifier(255, a2, a3, v7);
  v8 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  View.accessibilityCaptureViewResponders()();
}

void sub_187310EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AccessibilityLabelModifier.ChildModifier.init()((uint64_t *)(v4 - 88));
  v5 = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = &protocol witness table for CaptureViewRespondersModifier;
  *(_QWORD *)(v4 - 96) = v5;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v4 - 112);
  MEMORY[0x18D75B4AC](v4 - 96, v0, *(_QWORD *)(v4 - 184), v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v2, v0);
  *(_QWORD *)(v4 - 128) = v6;
  *(_QWORD *)(v4 - 120) = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v4 - 128);
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_187310F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 176) + 8))(v6, v3);
  *(_QWORD *)(v7 - 144) = v0;
  *(_QWORD *)(v7 - 136) = &protocol witness table for IgnoreViewRespondersModifier;
  v8 = MEMORY[0x18D75FFDC](v2, v1, v7 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v7 - 152));
  return v9(v4, v1);
}

uint64_t AccessibilityLabelModifier.ChildModifier.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AccessibilityNullableOptionSet<>.init(adding:)();
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v5 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>(0);
  v4[3] = v2;
  v4[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, MEMORY[0x1E0CE6310]);
  v4[0] = v6;
  v4[1] = v7;
  result = specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E0CE58B8]);
  *a1 = v5;
  return result;
}

uint64_t AccessibilityLabelModifier.ChildModifier.updatedAttachment(for:nodes:atIndex:)()
{
  return static AccessibilityAttachment.properties(_:)();
}

uint64_t instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AccessibilityLabelModifier<A>.ChildModifier, (uint64_t)&protocol conformance descriptor for AccessibilityLabelModifier<A>.ChildModifier);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityLabelModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabelModifier<A>.ChildModifier, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityLabelModifier<A>(uint64_t a1, uint64_t a2)
{
  AccessibilityLabelModifier.body(content:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityTraitsModifier<A>.ChildModifier()
{
  return &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AccessibilityTraitsModifier<A>.ChildModifier, (uint64_t)&protocol conformance descriptor for AccessibilityTraitsModifier<A>.ChildModifier);
}

uint64_t instantiation function for generic protocol witness table for AccessibilityLabelModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](a4);
  result = MEMORY[0x18D75FFDC](a5, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityDefaultAction()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityDefaultActionRepresentableStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AccessibilityBadgedViewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t result;
  uint64_t v13[4];

  result = View.accessibility()(a5, a6);
  if (a3 >> 1 != 0xFFFFFFFF)
  {
    v13[0] = a1;
    v13[1] = a2;
    v13[2] = a3;
    v13[3] = a4;
    return closure #1 in AccessibilityBadgedViewModifier.body(content:)(v13, a7);
  }
  return result;
}

uint64_t closure #1 in AccessibilityBadgedViewModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a2;
  v3 = type metadata accessor for ModifiedContent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - v10;
  v12 = *a1;
  v13 = a1[2];
  if (v13 < 0)
  {
    v15 = a1[1];
    a1 = (uint64_t *)(a1[2] & 1);
    outlined copy of Text.Storage(v12, v15, v13 & 1);
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = *a1;
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v15 = v14;
    LOBYTE(a1) = 0;
  }
  v16 = v7;
  v17 = v7;
  v18 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v17, v21, v3);
  ModifiedContent<>.accessibilityValue(_:)(v12, v15, (char)a1, v3, (uint64_t)v11);
  outlined consume of Text.Storage(v12, v15, (char)a1);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v16, v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v18, v11, v3);
}

uint64_t AccessibilityBadgedViewModifier.Badge.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  _QWORD v27[2];
  unsigned __int8 v28;

  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27[-1] - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v27[-1] - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v27[-1] - v21;
  View.accessibilityHidden(_:)(1, a1, a2);
  v28 = 19;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v28, v6, (uint64_t)v14);
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  v28 = 2;
  ModifiedContent<>.accessibilityIdentifier(_:placement:)(0x6567646162, 0xE500000000000000, (char *)&v28, v6, (uint64_t)v18);
  v23(v14, v6);
  v27[0] = a2;
  v27[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v27);
  static ViewBuilder.buildExpression<A>(_:)(v18, v6, v24);
  v23(v18, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v22, v6, a3);
  return ((uint64_t (*)(char *, uint64_t))v23)(v22, v6);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityBadgedViewModifier<A>.Badge@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return AccessibilityBadgedViewModifier.Badge.body(content:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityBadgedViewModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return AccessibilityBadgedViewModifier.body(content:)(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t AccessibilityListCoreCellModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[9];

  v26 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for ModifiedContent();
  v24 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v24 - v7;
  v9 = type metadata accessor for ModifiedContent();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v24 - v15;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)(v2 + 8), (uint64_t)v29);
  v17 = *(_QWORD *)(a1 + 24);
  MEMORY[0x18D75B4AC](v29, v4, &type metadata for AccessibilityScrollableContextModifier, v17);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v29);
  v18 = 4;
  if (!*v2)
    v18 = 0;
  v29[0] = v18;
  v28[0] = v17;
  v28[1] = &protocol witness table for AccessibilityScrollableContextModifier;
  v19 = MEMORY[0x1E0CE2E70];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v28);
  View.accessibilityAddTraits(_:)(v29, v5, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  v27[0] = v20;
  v27[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v21 = MEMORY[0x18D75FFDC](v19, v9, v27);
  static ViewBuilder.buildExpression<A>(_:)(v12, v9, v21);
  v22 = *(void (**)(char *, uint64_t))(v25 + 8);
  v22(v12, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v9, v26);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v9);
}

uint64_t AccessibilitySidebarListModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  _QWORD v19[3];

  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v19[-1] - v13;
  if (one-time initialization token for sidebar != -1)
    swift_once();
  View.accessibilityLabel(_:)(static Text.Accessibility.sidebar, unk_1EDEFFCC0, byte_1EDEFFCC8, qword_1EDEFFCD0, a1, a2);
  v19[0] = a2;
  v19[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v19);
  static ViewBuilder.buildExpression<A>(_:)(v10, v6, v15);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, v6, a3);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v6);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilitySidebarListModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return AccessibilitySidebarListModifier.body(content:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t AccessibilityTableCellModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v3 = v2;
  v24 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v23 - v17;
  v19 = *(_QWORD *)(a1 + 24);
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v5, v19, (uint64_t)v10);
  ModifiedContent<>.accessibilityTableContext(_:)(v3, v6, (uint64_t)v14);
  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v10, v6);
  v25[0] = v19;
  v25[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v25);
  static ViewBuilder.buildExpression<A>(_:)(v14, v6, v21);
  v20(v14, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v6, v24);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v6);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityBadgedViewProvidesOwnValue()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AccessibilityBadgedViewProvidesOwnValue()
{
  lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue();
  return PropertyList.subscript.setter();
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityBadgedViewNeedsValue()
{
  char v1;

  lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue();
  PropertyList.subscript.getter();
  return (v1 & 1) == 0;
}

uint64_t sub_187311EB8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

    swift_release();
  }
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in ToggleStyleConfiguration.accessibilityActions.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ToggleStyleConfiguration.accessibilityActions.getter((_QWORD *)(v1 + 16), a1);
}

uint64_t sub_187311F20()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAppIntentHandler, &type metadata for AccessibilityAppIntentHandler);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAppIntentHandler, &type metadata for AccessibilityAppIntentHandler);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAppIntentHandler, &type metadata for AccessibilityAppIntentHandler);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler);
  }
  return result;
}

uint64_t sub_187311FEC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));

  swift_release();
  if (*(_QWORD *)(v0 + 120) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 152))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for AccessibilityToggleModifier.RepresentationModifier()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.ActionsKey, &type metadata for AccessibilityProperties.ActionsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AnyAccessibilityAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AnyAccessibilityAction] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE80E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyAccessibilityAction] and conformance [A]);
  }
  return result;
}

void partial apply for closure #1 in AccessibilityToggleModifier.body(content:)()
{
  closure #1 in AccessibilityToggleModifier.body(content:)();
}

uint64_t outlined init with take of AppIntentAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AppIntentAction?, (uint64_t)&type metadata for AppIntentAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1873121A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:)(v1[4], v1[5], v1[3], a1);
}

uint64_t partial apply for closure #2 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in AccessibilityNavigationLinkButtonModifier.body(content:)(v1[4], v1[5], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityDefaultActionRepresentableStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDefaultActionRepresentableStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction;
  if (!lazy protocol witness table cache variable for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDefaultAction, &type metadata for AccessibilityDefaultAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction);
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityDefaultActionRepresentableStyle.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessibilityDefaultActionRepresentableStyle(0, v6, v7, a4)- 8)+ 80);
  return closure #1 in AccessibilityDefaultActionRepresentableStyle.body(content:)(a1, (_QWORD *)(v4 + ((v8 + 32) & ~v8)), v6, v7);
}

uint64_t objectdestroy_19Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for AccessibilityDefaultActionRepresentableStyle(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  if (*(_QWORD *)(v8 + 40))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_BYTE *)(v8 + 32));

    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 40), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AccessibilityDefaultActionRepresentableStyle.body(content:)@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessibilityDefaultActionRepresentableStyle(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1)- 8)+ 80);
  result = (*(uint64_t (**)(void))(v2 + ((v4 + 32) & ~v4)))();
  *a2 = 2;
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>);
  }
}

uint64_t sub_187312454()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 56))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

    swift_release();
  }
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5DE0], MEMORY[0x1E0CE5DD0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5DD8], MEMORY[0x1E0CE5DD0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5DC0], MEMORY[0x1E0CE5DD0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

void type metadata accessor for AccessibilityAdjustableModifier()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationButtonInput, &type metadata for NavigationButtonInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationButtonInput, &type metadata for NavigationButtonInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationButtonInput, &type metadata for NavigationButtonInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationButtonInput, &type metadata for NavigationButtonInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationButtonInput, &type metadata for NavigationButtonInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<NavigationButtonInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput, (uint64_t)&type metadata for NavigationButtonInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6010], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<NavigationButtonInput> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
}

uint64_t sub_18731263C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {

  }
  swift_release();
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  if (*(_QWORD *)(v0 + 72))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in AccessibilityStepperModifier.init(_:value:)(uint64_t *a1)
{
  void **v1;

  closure #2 in AccessibilityStepperModifier.init(_:value:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)(v1 + 6));
}

void type metadata accessor for AccessibilityAdjustableModifier.Configuration()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DetachedGeometryModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _HiddenModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier);
    v3[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DetachedGeometryModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for LabelStyleConfiguration.Title;
    v2[1] = &protocol witness table for DetachedGeometryModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityShowsLabelIcon, &type metadata for AccessibilityShowsLabelIcon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityShowsLabelIcon, &type metadata for AccessibilityShowsLabelIcon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityShowsLabelIcon, &type metadata for AccessibilityShowsLabelIcon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityShowsLabelIcon, &type metadata for AccessibilityShowsLabelIcon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityShowsLabelIcon, &type metadata for AccessibilityShowsLabelIcon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

void partial apply for closure #1 in AccessibilityAdjustableModifier.body(content:)()
{
  type metadata accessor for AccessibilityAdjustableModifier();
}

void sub_187312A98()
{
  closure #1 in AccessibilityAdjustableModifier.body(content:)();
}

void partial apply for closure #2 in AccessibilityAdjustableModifier.body(content:)()
{
  closure #2 in AccessibilityAdjustableModifier.body(content:)();
}

void objectdestroy_43Tm()
{
  type metadata accessor for AccessibilityAdjustableModifier();
}

void sub_187312B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
  v4 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

uint64_t sub_187312BC8(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + *(int *)(a1 + 72)))
    swift_release();
  if (*(_QWORD *)(v1 + *(int *)(a1 + 76)))
    swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)()
{
  type metadata accessor for AccessibilityAdjustableModifier();
}

void sub_187312C9C()
{
  closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)();
}

_QWORD *outlined retain of SliderStyleConfiguration(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[9];
  v3 = (void *)a1[10];
  v4 = (void *)a1[11];
  v5 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v2, v3, v4, v5);
  return a1;
}

_QWORD *outlined release of SliderStyleConfiguration(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[9];
  v3 = (void *)a1[10];
  v4 = (void *)a1[11];
  v5 = (void *)a1[12];
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v2, v3, v4, v5);
  return a1;
}

uint64_t type metadata accessor for AccessibilityGroupBoxLabelModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityGroupBoxLabelModifier);
}

uint64_t type metadata accessor for AccessibilityGroupBoxContentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityGroupBoxContentModifier);
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDisclosureModifier);
}

uint64_t type metadata completion function for AccessibilityAdjustableModifier.Configuration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeWithCopy for AccessibilityAdjustableModifier.Configuration(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = (unint64_t)&a2[v10];
  *((_BYTE *)a1 + v10) = a2[v10];
  v12 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v13 = (_OWORD *)(v12 + 8);
  v14 = v11 & 0xFFFFFFFFFFFFFFF8;
  v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    *v13 = *(_OWORD *)v15;
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v15;
    *(_QWORD *)(v12 + 16) = v16;
    swift_retain();
  }
  v17 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = v19;
    swift_retain();
  }
  v20 = (_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for AccessibilityAdjustableModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = (unint64_t)&a1[v11];
  v13 = (unint64_t)&a2[v11];
  *(_BYTE *)v12 = *(_BYTE *)v13;
  v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  v15 = (unint64_t *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  v18 = (unint64_t *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  v17 = *v18;
  if (*v15 < 0xFFFFFFFF)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v20 = v18[1];
      *v15 = v17;
      *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16) = v20;
      swift_retain();
      goto LABEL_20;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v19 = v18[1];
      *v15 = v17;
      *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16) = v19;
      swift_retain();
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v15 = *(_OWORD *)v18;
LABEL_20:
  v21 = (_QWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = (unint64_t *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v22;
  if (*v21 < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      v25 = v22[1];
      *v21 = v23;
      v21[1] = v25;
      swift_retain();
      goto LABEL_27;
    }
LABEL_26:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    goto LABEL_27;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  v24 = v22[1];
  *v21 = v23;
  v21[1] = v24;
  swift_retain();
  swift_release();
LABEL_27:
  v26 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  v29 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for AccessibilityAdjustableModifier.Configuration(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = (unint64_t)&a2[v10];
  *((_BYTE *)a1 + v10) = a2[v10];
  v12 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v13 = (_OWORD *)(v12 + 8);
  v14 = v11 & 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(v11 + 8);
  v15 = (char *)(v11 + 8);
  v16 = v17;
  if (v17 < 0xFFFFFFFF)
  {
    *v13 = *(_OWORD *)v15;
  }
  else
  {
    v18 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v12 + 16) = v18;
  }
  v19 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v21 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = v21;
  }
  v22 = (_OWORD *)((v19 + 23) & 0xFFFFFFFFFFFFF8);
  v23 = (_OWORD *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  *(_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

char *assignWithTake for AccessibilityAdjustableModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  _OWORD *v27;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = (unint64_t)&a1[v11];
  v13 = (unint64_t)&a2[v11];
  *(_BYTE *)v12 = *(_BYTE *)v13;
  v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  v15 = (unint64_t *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  v18 = (unint64_t *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  v17 = *v18;
  if (*v15 < 0xFFFFFFFF)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v20 = v18[1];
      *v15 = v17;
      v15[1] = v20;
      goto LABEL_20;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v19 = v18[1];
      *v15 = v17;
      v15[1] = v19;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v15 = *(_OWORD *)v18;
LABEL_20:
  v21 = (_QWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = (unint64_t *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v22;
  if (*v21 < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      v25 = v22[1];
      *v21 = v23;
      v21[1] = v25;
      goto LABEL_27;
    }
LABEL_26:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    goto LABEL_27;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  v24 = v22[1];
  *v21 = v23;
  v21[1] = v24;
  swift_release();
LABEL_27:
  v26 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  swift_release();
  *(_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityAdjustableModifier.Configuration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if ((((((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFF)
  {
    v14 = *(_QWORD *)((((((v8 + a1) & 0xFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
  else
  {
    v13 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for AccessibilityAdjustableModifier.Configuration(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, (((((((v11 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_187313804@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t result;

  v12[v13] = 0;
  if (a1)
  {
    if (v10 < 0x7FFFFFFF)
    {
      v15 = (_QWORD *)((((((unint64_t)&v12[a2] & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
      if ((a1 & 0x80000000) != 0)
      {
        *v15 = a1 ^ 0x80000000;
        v15[1] = 0;
      }
      else
      {
        *v15 = a1 - 1;
      }
    }
    else if (v10 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v11 + 56))(v12, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v14 = a2;
      else
        v14 = 4;
      bzero(v12, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_18731390C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18731391C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_187313924()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t destroy for AccessibilityTableCellModifier(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40))
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for AccessibilityTableCellModifier(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityTableCellModifier(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (!*((_BYTE *)a2 + 40))
      goto LABEL_8;
    goto LABEL_5;
  }
  if (*((unsigned __int8 *)a2 + 40) != 255)
  {
    if ((__int128 *)a1 == a2)
      return a1;
    outlined destroy of AccessibilityTableContext(a1);
    if (!*((_BYTE *)a2 + 40))
    {
LABEL_8:
      v8 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
      return a1;
    }
LABEL_5:
    v6 = *a2;
    v7 = a2[1];
    *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v7;
    return a1;
  }
  outlined destroy of AccessibilityTableContext(a1);
  v4 = *(__int128 *)((char *)a2 + 25);
  v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = v4;
  return a1;
}

uint64_t assignWithTake for AccessibilityTableCellModifier(uint64_t a1, uint64_t a2)
{
  __int128 v5;

  if (*(unsigned __int8 *)(a1 + 40) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    outlined destroy of AccessibilityTableContext(a1);
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTableCellModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityTableCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTableCellModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTableCellModifier);
}

uint64_t initializeWithCopy for AccessibilityListCoreCellModifier(uint64_t a1, char *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;

  v5 = *a2;
  v4 = a2 + 8;
  *(_BYTE *)a1 = v5;
  v6 = a1 + 8;
  v7 = a2[78];
  if (v7 == 2)
  {
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v6, (uint64_t)v4);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  }
  else if (v7 == 1)
  {
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v6, (uint64_t)v4);
    *(_BYTE *)(a1 + 48) = a2[48];
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 38);
  }
  *(_BYTE *)(a1 + 78) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityListCoreCellModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = a1 + 8;
  if (a1 != a2)
  {
    v5 = a2 + 8;
    outlined destroy of AccessibilityScrollableContext(a1 + 8);
    v6 = *(unsigned __int8 *)(a2 + 78);
    if (v6 == 2)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v3, v5);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    }
    else if (v6 == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v3, v5);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v9 = *(_DWORD *)(a2 + 72);
      *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = v9;
    }
    *(_BYTE *)(a1 + 78) = v6;
    swift_retain();
  }
  return a1;
}

__n128 __swift_memcpy79_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityListCoreCellModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 71) = *(_QWORD *)(a2 + 71);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityListCoreCellModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[79])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityListCoreCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 78) = 0;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 79) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 79) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityToggleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityToggleModifier);
}

uint64_t type metadata completion function for AccessibilityToggleModifier.RepresentationModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityToggleModifier.RepresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
    {
      v18 = *(_OWORD *)v11;
      v19 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v19;
      *(_OWORD *)v10 = v18;
      return v4;
    }
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v13, v14);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v14;
    v15 = *(void **)(v11 + 24);
    *(_QWORD *)(v10 + 24) = v15;
    v16 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v10 + 40) = v16;
    v17 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    v15 = *(_OWORD *)v8;
    v16 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v16;
    *(_OWORD *)v7 = v15;
  }
  else
  {
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_BYTE *)(v8 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v10, v11);
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = v10;
    *(_BYTE *)(v7 + 16) = v11;
    v12 = *(void **)(v8 + 24);
    *(_QWORD *)(v7 + 24) = v12;
    v13 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v7 + 40) = v13;
    v14 = v12;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v20 = *(_QWORD *)v8;
      v21 = *(_QWORD *)(v8 + 8);
      v22 = *(_BYTE *)(v8 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v21, v22);
      *(_QWORD *)v7 = v20;
      *(_QWORD *)(v7 + 8) = v21;
      *(_BYTE *)(v7 + 16) = v22;
      v23 = *(void **)(v8 + 24);
      *(_QWORD *)(v7 + 24) = v23;
      v24 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v7 + 40) = v24;
      v25 = v23;
      swift_retain();
      return a1;
    }
LABEL_7:
    v26 = *(_OWORD *)v8;
    v27 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v27;
    *(_OWORD *)v7 = v26;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));

    swift_release();
    goto LABEL_7;
  }
  v10 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_BYTE *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v11, v12);
  v13 = *(_QWORD *)v7;
  v14 = *(_QWORD *)(v7 + 8);
  v15 = *(_BYTE *)(v7 + 16);
  *(_QWORD *)v7 = v10;
  *(_QWORD *)(v7 + 8) = v11;
  *(_BYTE *)(v7 + 16) = v12;
  outlined consume of Environment<AppIntentExecutor?>.Content(v13, v14, v15);
  v16 = *(void **)(v8 + 24);
  v17 = *(void **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v16;
  v18 = v16;

  v19 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  *v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  return a1;
}

uint64_t assignWithTake for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));

    swift_release();
LABEL_5:
    v14 = *(_OWORD *)v8;
    v15 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v15;
    *(_OWORD *)v7 = v14;
    return a1;
  }
  v9 = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)v7;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_BYTE *)(v7 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v9;
  outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
  v13 = *(void **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);

  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187314450 + 4 * byte_187C231C1[v10]))();
  }
}

void storeEnumTagSinglePayload for AccessibilityToggleModifier.RepresentationModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1873145D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18731465CLL);
}

void sub_1873145D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1873145E0);
  JUMPOUT(0x18731465CLL);
}

void sub_187314628()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18731465CLL);
}

void sub_187314630()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18731465CLL);
}

uint64_t sub_187314638(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x187314644);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = a2;
LABEL_6:
    JUMPOUT(0x18731465CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

ValueMetadata *type metadata accessor for AccessibilityBadgedViewNeedsValue()
{
  return &type metadata for AccessibilityBadgedViewNeedsValue;
}

void type metadata completion function for AccessibilityAdjustableModifier()
{
  type metadata accessor for AccessibilityAdjustableModifier.Configuration();
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityAdjustableModifier.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0
    || (((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
    {
      memcpy(v4, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    v11 = (unint64_t)a2 + v8;
    *((_BYTE *)v4 + v8) = *((_BYTE *)a2 + v8);
    v12 = ((unint64_t)v4 + v8) & 0xFFFFFFFFFFFFFFF8;
    v13 = (_OWORD *)(v12 + 8);
    v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    v11 &= 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)(v11 + 8);
    v15 = (char *)(v11 + 8);
    v16 = v17;
    if (v17 < 0xFFFFFFFF)
    {
      *v13 = *(_OWORD *)v15;
    }
    else
    {
      v18 = *((_QWORD *)v15 + 1);
      *(_QWORD *)v13 = v16;
      *(_QWORD *)(v12 + 16) = v18;
      swift_retain();
    }
    v19 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v20 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_QWORD *)(v19 + 8) = v21;
      swift_retain();
    }
    v22 = (_QWORD *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_QWORD *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityAdjustableModifier.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  v5 = *(_QWORD *)(v4 + 64) + a1;
  if (!*(_DWORD *)(v4 + 84))
    ++v5;
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    swift_release();
  if (*(_QWORD *)((v6 + 31) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    swift_release();
  swift_release();
  return swift_release();
}

uint64_t getEnumTagSinglePayload for AccessibilityAdjustableModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if ((((((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFF)
  {
    v14 = *(_QWORD *)((((((v8 + a1) & 0xFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    return (v14 + 1);
  }
  else
  {
    v13 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for AccessibilityAdjustableModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, (((((((v11 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_187314BD4@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t result;

  v12[v13] = 0;
  if (a1)
  {
    if (v10 < 0x7FFFFFFF)
    {
      v15 = (_QWORD *)((((((unint64_t)&v12[a2] & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
      if ((a1 & 0x80000000) != 0)
      {
        *v15 = a1 ^ 0x80000000;
        v15[1] = 0;
      }
      else
      {
        *v15 = a1 - 1;
      }
    }
    else if (v10 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v11 + 56))(v12, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v14 = a2;
      else
        v14 = 4;
      bzero(v12, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_187314CDC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_187314CEC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_187314CF4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for AccessibilityNavigationLinkButtonModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityNavigationLinkButtonModifier.Configuration);
}

uint64_t sub_187314D0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];

  v4 = a1[1];
  v5 = type metadata accessor for AccessibilityDefaultActionRepresentableStyle(255, *a1, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDefaultActionRepresentableStyle<A>, v5);
  v6 = type metadata accessor for _ViewModifier_Content();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v12 = type metadata accessor for ModifiedContent();
  v29[0] = v4;
  v29[1] = &protocol witness table for DetachedGeometryModifier;
  v13 = MEMORY[0x1E0CE2E70];
  v28[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v29);
  v28[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v27[0] = MEMORY[0x18D75FFDC](v13, v9, v28);
  v27[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v26[0] = MEMORY[0x18D75FFDC](v13, v10, v27);
  v26[1] = &protocol witness table for _HiddenModifier;
  v25[0] = MEMORY[0x18D75FFDC](v13, v11, v26);
  v25[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](v13, v12, v25);
  v14 = type metadata accessor for _BackgroundModifier();
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  v17 = type metadata accessor for ModifiedContent();
  v18 = type metadata accessor for ModifiedContent();
  v24[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  v24[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v23[0] = MEMORY[0x18D75FFDC](v13, v7, v24);
  v23[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v14);
  v22[0] = MEMORY[0x18D75FFDC](v13, v15, v23);
  v22[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v21[0] = MEMORY[0x18D75FFDC](v13, v16, v22);
  v21[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v20[0] = MEMORY[0x18D75FFDC](v13, v17, v21);
  v20[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v13, v18, v20);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityDefaultAction> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityDefaultAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction, (uint64_t)&type metadata for AccessibilityDefaultAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityDefaultAction>, AccessibilityAttachmentModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityDefaultAction> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityDefaultAction> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityDefaultAction> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityDefaultAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction, (uint64_t)&type metadata for AccessibilityDefaultAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityDefaultAction> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityToggleModifier<A>.RepresentationModifier<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_187315164()
{
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

uint64_t sub_1873151A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = (v3 + 48) & ~v3;
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v1 + v4);
  v5 = v1 + v4 + *(int *)(a1 + 52);
  if (*(_QWORD *)(v5 + 24))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));

    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:)()
{
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

void sub_187315264()
{
  closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:)();
}

uint64_t sub_1873152E8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in AccessibilityDisclosureModifier.List.body(content:)(a1);
}

ValueMetadata *type metadata accessor for AccessibilityBadgedViewProvidesOwnValue()
{
  return &type metadata for AccessibilityBadgedViewProvidesOwnValue;
}

uint64_t type metadata accessor for AccessibilityGaugeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityGaugeModifier);
}

uint64_t type metadata accessor for AccessibilitySidebarListModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilitySidebarListModifier);
}

uint64_t storeEnumTagSinglePayload for AccessibilityDisclosureModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187315398 + 4 * byte_187C231E8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1873153CC + 4 * byte_187C231E3[v4]))();
}

uint64_t sub_1873153CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873153D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1873153DCLL);
  return result;
}

uint64_t sub_1873153E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1873153F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1873153F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1873153FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDisclosureModifier.Configuration);
}

void sub_187315414()
{
  type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
}

uint64_t sub_18731545C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[20];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityToggleModifier<A>.RepresentationModifier<A1>, a1);
  v3 = type metadata accessor for _ViewModifier_Content();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v9 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = &protocol witness table for DetachedGeometryModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v25[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v2 - 128);
  v25[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v24[0] = MEMORY[0x18D75FFDC](v10, v6, v25);
  v24[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v23[0] = MEMORY[0x18D75FFDC](v10, v7, v24);
  v23[1] = &protocol witness table for _HiddenModifier;
  v22[0] = MEMORY[0x18D75FFDC](v10, v8, v23);
  v22[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](v10, v9, v22);
  v11 = type metadata accessor for _BackgroundModifier();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for ModifiedContent();
  v21[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3);
  v21[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v20[0] = MEMORY[0x18D75FFDC](v10, v4, v21);
  v20[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v11);
  v19[0] = MEMORY[0x18D75FFDC](v10, v12, v20);
  v19[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v18[0] = MEMORY[0x18D75FFDC](v10, v13, v19);
  v18[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v17[0] = MEMORY[0x18D75FFDC](v10, v14, v18);
  v17[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v10, v15, v17);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AccessibilityBadgedViewProvidesOwnValue()
{
  return &protocol witness table for AccessibilityBadgedViewProvidesOwnValue;
}

void type metadata completion function for AccessibilityPlaybackButtonModifier.Configuration()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for PlaybackButton.State(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityPlaybackButtonModifier.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      v9 = type metadata accessor for PlaybackButton.State(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    v11 = *(int *)(a3 + 36);
    v12 = *(int *)(a3 + 40);
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v13[16] = v14[16];
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    type metadata accessor for ClosedRange<Date>();
    v18 = v17;
    v19 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v21(v15, v16, v7);
      v21(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for AccessibilityPlaybackButtonModifier.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 40);
  type metadata accessor for ClosedRange<Date>();
  v8 = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v10(v6, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v6 + *(int *)(v8 + 36), v4);
  }
  return result;
}

char *initializeWithCopy for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  v13 = &a1[v10];
  v14 = &a2[v10];
  type metadata accessor for ClosedRange<Date>();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v19(v13, v14, v6);
    v19(&v13[*(int *)(v16 + 36)], &v14[*(int *)(v16 + 36)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  return a1;
}

char *assignWithCopy for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 36);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_OWORD *)v14;
  v13[16] = v14[16];
  *(_OWORD *)v13 = v15;
  v16 = *(int *)(a3 + 40);
  v17 = &a1[v16];
  v18 = &a2[v16];
  type metadata accessor for ClosedRange<Date>();
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v17, 1, v19);
  v24 = v22(v18, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v27(v17, v18, v6);
      v27(&v17[*(int *)(v20 + 36)], &v18[*(int *)(v20 + 36)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
      return a1;
    }
    v25 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v24)
    {
      v28 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
      v28(v17, v18, v6);
      v28(&v17[*(int *)(v20 + 36)], &v18[*(int *)(v20 + 36)], v6);
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v25 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, v25);
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  return a1;
}

char *initializeWithTake for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  v13 = &a1[v10];
  v14 = &a2[v10];
  type metadata accessor for ClosedRange<Date>();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v19(v13, v14, v6);
    v19(&v13[*(int *)(v16 + 36)], &v14[*(int *)(v16 + 36)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  return a1;
}

char *assignWithTake for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 36);
  v13 = *(int *)(a3 + 40);
  v14 = &a1[v12];
  v15 = &a2[v12];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[16] = v15[16];
  v16 = &a1[v13];
  v17 = &a2[v13];
  type metadata accessor for ClosedRange<Date>();
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v16, 1, v18);
  v23 = v21(v17, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v26(v16, v17, v6);
      v26(&v16[*(int *)(v19 + 36)], &v17[*(int *)(v19 + 36)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
      return a1;
    }
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v23)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
      v27(v16, v17, v6);
      v27(&v16[*(int *)(v19 + 36)], &v17[*(int *)(v19 + 36)], v6);
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, v24);
  memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187316280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for PlaybackButton.State(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 16) <= 5u)
      v9 = 5;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 16);
    v10 = v9 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 16) >= 3u)
      return v10;
    else
      return 0;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187316354(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = type metadata accessor for PlaybackButton.State(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 36) + 16) = a2 + 5;
      return result;
    }
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t type metadata completion function for AccessibilityPlaybackButtonModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AccessibilityLinkModifier(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t type metadata completion function for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityPlaybackButtonModifier(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);

  v6 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_DWORD *)(*(_QWORD *)(v6 - 8) + 80);
  if ((v7 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else
  {
    v8 = v6;
    v9 = type metadata accessor for Date();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 2, v9))
    {
      v11 = type metadata accessor for PlaybackButton.State(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 2, v9);
    }
    v13 = *(int *)(v8 + 36);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v16 = *(int *)(v8 + 40);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    type metadata accessor for ClosedRange<Date>();
    v20 = v19;
    v21 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v19))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v23(v17, v18, v9);
      v23(&v17[*(int *)(v20 + 36)], &v18[*(int *)(v20 + 36)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for AccessibilityPlaybackButtonModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1
     + *(int *)(type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v6)+ 40);
  type metadata accessor for ClosedRange<Date>();
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v11(v7, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v7 + *(int *)(v9 + 36), v4);
  }
  return result;
}

char *initializeWithCopy for AccessibilityPlaybackButtonModifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  v10 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v9);
  v11 = *(int *)(v10 + 36);
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v13[16];
  v14 = *(int *)(v10 + 40);
  v15 = &a1[v14];
  v16 = &a2[v14];
  type metadata accessor for ClosedRange<Date>();
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v21(v15, v16, v6);
    v21(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  }
  return a1;
}

char *assignWithCopy for AccessibilityPlaybackButtonModifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v12 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v13 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v11);
  v14 = *(int *)(v13 + 36);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = v16[16];
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[16] = v17;
  v18 = *(int *)(v13 + 40);
  v19 = &a1[v18];
  v20 = &a2[v18];
  type metadata accessor for ClosedRange<Date>();
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v19, 1, v21);
  v26 = v24(v20, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v29(v19, v20, v6);
      v29(&v19[*(int *)(v22 + 36)], &v20[*(int *)(v22 + 36)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      return a1;
    }
    v27 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v26)
    {
      v30 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
      v30(v19, v20, v6);
      v30(&v19[*(int *)(v22 + 36)], &v20[*(int *)(v22 + 36)], v6);
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v27 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, v27);
  memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  return a1;
}

char *initializeWithTake for AccessibilityPlaybackButtonModifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  v10 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v9);
  v11 = *(int *)(v10 + 36);
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v13[16];
  v14 = *(int *)(v10 + 40);
  v15 = &a1[v14];
  v16 = &a2[v14];
  type metadata accessor for ClosedRange<Date>();
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v21(v15, v16, v6);
    v21(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  }
  return a1;
}

char *assignWithTake for AccessibilityPlaybackButtonModifier(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  void (*v29)(char *, char *, uint64_t);

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v12 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v13 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v11);
  v14 = *(int *)(v13 + 36);
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  v17 = *(int *)(v13 + 40);
  v18 = &a1[v17];
  v19 = &a2[v17];
  type metadata accessor for ClosedRange<Date>();
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v18, 1, v20);
  v25 = v23(v19, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v28 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v28(v18, v19, v6);
      v28(&v18[*(int *)(v21 + 36)], &v19[*(int *)(v21 + 36)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      return a1;
    }
    v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v25)
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
      v29(v18, v19, v6);
      v29(&v18[*(int *)(v21 + 36)], &v19[*(int *)(v21 + 36)], v6);
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, v26);
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPlaybackButtonModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187316EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;

  v6 = a4(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlaybackButtonModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187316F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for AccessibilityPlaybackButtonModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityPlaybackButtonModifier);
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier.List(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDisclosureModifier.List);
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier.List.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDisclosureModifier.List.Configuration);
}

uint64_t type metadata accessor for AccessibilityGaugeModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityGaugeModifier.Configuration);
}

uint64_t outlined init with copy of ClosedRange<Date>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AccessibilityBadgedViewModifier.Badge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityBadgedViewModifier.Badge);
}

uint64_t getEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 16) >= 3u)
    v5 = v4;
  else
    v5 = 0;
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    v1 = 3;
  else
    v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = v1 - 3;
  if (*(unsigned __int8 *)(a1 + 16) >= 3u)
    return v2;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityPlaybackButtonModifier.ValueStyle);
}

uint64_t type metadata accessor for AccessibilityBadgedViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityBadgedViewModifier);
}

uint64_t *destroy for AccessibilityBadgedViewModifier(uint64_t *result)
{
  unint64_t v1;

  v1 = result[2];
  if (v1 >> 1 != 0xFFFFFFFF)
    return (uint64_t *)outlined consume of BadgeLabel(*result, result[1], v1);
  return result;
}

uint64_t initializeWithCopy for AccessibilityBadgedViewModifier(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[2];
  if (v3 >> 1 == 0xFFFFFFFF)
  {
    v4 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    outlined copy of BadgeLabel(*a2, v6, v3);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t *assignWithCopy for AccessibilityBadgedViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2[2];
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t)a1[2] >> 1 == 0xFFFFFFFF)
  {
    if (v5 == 0x1FFFFFFFELL)
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[3];
      outlined copy of BadgeLabel(*a2, v9, v4);
      *a1 = v8;
      a1[1] = v9;
      a1[2] = v4;
      a1[3] = v10;
    }
  }
  else if (v5 == 0x1FFFFFFFELL)
  {
    outlined destroy of BadgeLabel(a1);
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    v13 = a2[3];
    outlined copy of BadgeLabel(*a2, v12, v4);
    v14 = *a1;
    v15 = a1[1];
    v16 = a1[2];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v4;
    a1[3] = v13;
    outlined consume of BadgeLabel(v14, v15, v16);
  }
  return a1;
}

uint64_t *assignWithTake for AccessibilityBadgedViewModifier(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5 >> 1 != 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *a1;
      v9 = a1[1];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
      a1[3] = v7;
      outlined consume of BadgeLabel(v8, v9, v4);
      return a1;
    }
    outlined destroy of BadgeLabel(a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityBadgedViewModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityBadgedViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * ~a2;
      *(_QWORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityBadgedViewModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityBadgedViewModifier.Configuration);
}

uint64_t View.onHover(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for _HoverRegionModifier);
}

uint64_t HoverResponder.updatePhase(_:)(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v10;
  uint64_t v11;

  v5 = result;
  v7 = *(_QWORD *)(v3 + 208);
  v6 = *(_QWORD *)(v3 + 216);
  v8 = *(_BYTE *)(v3 + 224);
  if ((v8 & 1) != 0)
  {
    if (((a3 ^ *(unsigned __int8 *)(v3 + 448)) & 1) == 0)
      return result;
LABEL_12:
    *(double *)(v3 + 432) = *(double *)&result;
    *(double *)(v3 + 440) = *(double *)&a2;
    v10 = a3 & 1;
    *(_BYTE *)(v3 + 448) = a3 & 1;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v7;
    *(_QWORD *)(v11 + 24) = v6;
    *(_BYTE *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v5;
    *(double *)(v11 + 48) = *(double *)&a2;
    *(_BYTE *)(v11 + 56) = v10;
    outlined copy of HoverCallback();
    outlined copy of HoverCallback();
    static Update.enqueueAction(_:)();
    swift_release();
    *(double *)&result = COERCE_DOUBLE(outlined consume of HoverCallback());
    return result;
  }
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v3 + 448) & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    if ((*(_BYTE *)(v3 + 448) & 1) != 0)
      goto LABEL_12;
    if (*(double *)(v3 + 432) != *(double *)&result || *(double *)(v3 + 440) != *(double *)&a2)
      goto LABEL_12;
  }
  return result;
}

uint64_t HoverResponder.__allocating_init(inputs:)()
{
  swift_allocObject();
  return HoverResponder.init(inputs:)();
}

uint64_t _HoverRegionModifier.callback.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t implicit closure #1 in static _HoverRegionModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior();
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for static Rule.initialValue.getter in conformance _HoverRegionModifier.Callback(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -1;
}

uint64_t protocol witness for Rule.value.getter in conformance _HoverRegionModifier.Callback@<X0>(uint64_t a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 1;
  return swift_retain();
}

uint64_t closure #1 in _HoverRegionModifier.HoverBehavior.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = type metadata accessor for PlatformItemList.Item();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - v13;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v20 - v13);
  swift_bridgeObjectRelease();
  v15 = *((_QWORD *)v14 + 63);
  v16 = *((_QWORD *)v14 + 64);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v15, v16);
  *((_QWORD *)v14 + 63) = a2;
  *((_QWORD *)v14 + 64) = a3;
  outlined init with copy of PlatformItemList.Item((uint64_t)v14, (uint64_t)v10);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v10, v18 + v17);
  *a1 = v18;
  return outlined destroy of PlatformItemList.Item((uint64_t)v14);
}

uint64_t protocol witness for Rule.value.getter in conformance _HoverRegionModifier.HoverBehavior@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in _HoverRegionModifier.HoverBehavior.value.getter;
  *(_QWORD *)(v6 + 24) = v5;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))v6;
  return swift_retain();
}

void protocol witness for ViewModifier.body(content:) in conformance _HoverRegionModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t closure #1 in static HoverResponderChild.willRemove(attribute:)(uint64_t result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 448) & 1) == 0)
  {
    v1 = *(_BYTE *)(result + 224);
    v3 = *(_QWORD *)(result + 208);
    v2 = *(_QWORD *)(result + 216);
    *(_QWORD *)(result + 432) = 0;
    *(_QWORD *)(result + 440) = 0;
    *(_BYTE *)(result + 448) = 1;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = v2;
    *(_BYTE *)(v4 + 32) = v1;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 56) = 1;
    outlined copy of HoverCallback();
    outlined copy of HoverCallback();
    static Update.enqueueAction(_:)();
    swift_release();
    return outlined consume of HoverCallback();
  }
  return result;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance HoverResponderChild()
{
  AGGraphGetAttributeInfo();
  swift_retain_n();
  static Update.enqueueAction(_:)();
  return swift_release_n();
}

uint64_t closure #1 in HoverResponder.updatePhase(_:)(void (*a1)(BOOL), uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;

  v7 = a6 & 1;
  if ((a3 & 1) != 0)
  {
    swift_retain();
    a1((_DWORD)v7 == 0);
  }
  else
  {
    swift_retain();
    ((void (*)(uint64_t, uint64_t, uint64_t))a1)(a4, a5, v7);
  }
  return outlined consume of HoverCallback();
}

void HoverResponder.containsGlobalPoints(_:cacheKey:options:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, unint64_t, uint64_t *);
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(v4 + 449) == 1)
  {
    v6 = a3;
    v8 = HIDWORD(a3) & 1;
    v13 = *a4;
    swift_beginAccess();
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
    LOBYTE(v14) = v8;
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)();
    swift_endAccess();
    v9 = v14;
    v14 = v13;
    type metadata accessor for DefaultLayoutViewResponder();
    v10 = (void (*)(_QWORD *, uint64_t, unint64_t, uint64_t *))method lookup function for ViewResponder();
    LOBYTE(v12[0]) = v8;
    v10(v12, a2, v6 | ((unint64_t)v8 << 32), &v14);
    v11 = v12[0] | v9;
  }
  else
  {
    v11 = 0;
  }
  *a1 = v11;
}

uint64_t HoverResponder.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of HoverCallback();
  swift_release();
  outlined destroy of CoordinateSpace(v0 + 288);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t HoverResponder.__deallocating_deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  outlined consume of HoverCallback();
  swift_release();
  outlined destroy of CoordinateSpace(v0 + 288);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

void vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:) dispatching to HoverResponder.__allocating_init(inputs:viewSubgraph:)()
{
  specialized vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:) dispatching to HoverResponder.__allocating_init(inputs:viewSubgraph:)();
}

uint64_t sub_187317BC8()
{
  return swift_retain();
}

uint64_t partial apply for implicit closure #1 in static _HoverRegionModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static _HoverRegionModifier._makeView(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in _HoverRegionModifier()
{
  return &protocol witness table for _HoverRegionModifier;
}

uint64_t type metadata completion function for HoverResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for HoverResponder()
{
  return type metadata accessor for HoverResponder();
}

uint64_t sub_187317C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _HoverRegionModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t assignWithCopy for HoverResponderChild(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of HoverResponderChild.CoordinateSpaceStorage(a1 + 8);
    if ((*(_BYTE *)(a2 + 49) & 1) != 0)
    {
      v6 = *v4;
      v7 = v4[1];
      *(_OWORD *)(a1 + 34) = *(__int128 *)((char *)v4 + 26);
      *v5 = v6;
      *(_OWORD *)(a1 + 24) = v7;
    }
    else if (*(_BYTE *)(a2 + 48))
    {
      v8 = *v4;
      v9 = v4[1];
      *(_OWORD *)(a1 + 33) = *(__int128 *)((char *)v4 + 25);
      *v5 = v8;
      *(_OWORD *)(a1 + 24) = v9;
      *(_BYTE *)(a1 + 49) = 0;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1 + 8, v4);
      *(_WORD *)(a1 + 48) = 0;
    }
  }
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t outlined destroy of HoverResponderChild.CoordinateSpaceStorage(uint64_t a1)
{
  destroy for HoverResponderChild.CoordinateSpaceStorage(a1);
  return a1;
}

__n128 __swift_memcpy76_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for HoverResponderChild(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of HoverResponderChild.CoordinateSpaceStorage(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  }
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverResponderChild(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 76))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverResponderChild(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 76) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverResponderChild()
{
  return &type metadata for HoverResponderChild;
}

uint64_t destroy for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 2)
  {
    if (*(_DWORD *)a1 == -1)
      return a1;
  }
  else if (v1 == 1)
  {
    return a1;
  }
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (!v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t assignWithCopy for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2)
        v5 = *(_DWORD *)a1 + 2;
      if (!v5)
        __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v7 = 1;
    }
    else
    {
      v8 = *((unsigned __int8 *)a2 + 40);
      if (v8 >= 2)
        v8 = *(_DWORD *)a2 + 2;
      if (v8 == 1)
      {
        v7 = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 40) = 1;
      }
      else if (v8)
      {
        v7 = 0;
        v10 = *a2;
        v11 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v10;
        *(_OWORD *)(a1 + 16) = v11;
      }
      else
      {
        v9 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
        v7 = 0;
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
    *(_BYTE *)(a1 + 41) = v7;
  }
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 != 1)
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2)
        v5 = *(_DWORD *)a1 + 2;
      if (!v5)
        __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      LOBYTE(v7) = 1;
    }
    else
    {
      v7 = *(unsigned __int8 *)(a2 + 40);
      if (v7 >= 2)
        v7 = *(_DWORD *)a2 + 2;
      if (v7 == 1)
      {
        LOBYTE(v7) = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 40) = 1;
      }
      else if (v7)
      {
        LOBYTE(v7) = 0;
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
    *(_BYTE *)(a1 + 41) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HoverResponderChild.CoordinateSpaceStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for HoverResponderChild.CoordinateSpaceStorage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 41) = a2;
  return result;
}

void *type metadata accessor for HoverResponderChild.CoordinateSpaceStorage()
{
  return &unk_1E1ACE300;
}

ValueMetadata *type metadata accessor for _HoverRegionModifier.Callback()
{
  return &type metadata for _HoverRegionModifier.Callback;
}

void type metadata accessor for ContentResponderHelper<TrivialContentResponder>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>)
  {
    v0 = type metadata accessor for ContentResponderHelper();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>);
  }
}

uint64_t partial apply for closure #1 in static HoverResponderChild.willRemove(attribute:)()
{
  uint64_t v0;

  return closure #1 in static HoverResponderChild.willRemove(attribute:)(v0);
}

unint64_t lazy protocol witness table accessor for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior;
  if (!lazy protocol witness table cache variable for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _HoverRegionModifier.HoverBehavior, &type metadata for _HoverRegionModifier.HoverBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior);
  }
  return result;
}

uint64_t partial apply for closure #1 in _HoverRegionModifier.HoverBehavior.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in _HoverRegionModifier.HoverBehavior.value.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_187318348()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for _HoverRegionModifier.HoverBehavior()
{
  return &type metadata for _HoverRegionModifier.HoverBehavior;
}

uint64_t AccessibilityCustomPropertyModifier.init(result:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t View.accessibilityRoleDescription(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v7, 1, a5, MEMORY[0x1E0CE57B0], a6);
}

uint64_t View.accessibilityRoleDescription(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD v15[4];

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  v15[0] = v8;
  v15[1] = v9;
  v15[2] = v11 & 1;
  v15[3] = v13;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v15, 1, a5, MEMORY[0x1E0CE57B0], a6);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v7, 1, a5, MEMORY[0x1E0CE57B0], a6);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v16[4];

  v8 = a2;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = Text.init(_:tableName:bundle:comment:)();
    v8 = v10;
    v12 = v11;
    v14 = v13 & 1;
  }
  else
  {
    v9 = 0;
    v14 = 0;
    v12 = 0;
  }
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = v14;
  v16[3] = v12;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v16, 1, a5, MEMORY[0x1E0CE57B0], a6);
  return outlined consume of Text?(v9, v8, v14, v12);
}

uint64_t View.accessibilityRoleDescription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12 & 1;
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v12 & 1;
  v16[3] = v14;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v16, 1, a2, MEMORY[0x1E0CE57B0], a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityRoleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v7, 1, a5, a6);
}

uint64_t View.accessibilityRoleDescription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:), (uint64_t)v13, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], v7, (uint64_t)&v14);
  v8 = v14;
  v9 = v15;
  v10 = v16;
  v11 = v17;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = v16;
  v18[3] = v17;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v18, 1, a2, MEMORY[0x1E0CE57B0], a4);
  return outlined consume of Text?(v8, v9, v10, v11);
}

uint64_t ModifiedContent<>.accessibilityRoleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v7, 1, a5, a6);
}

uint64_t static AccessibilityScenePropertiesModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_DWORD *)(a2 + 56);
  v30 = *(_QWORD *)a2;
  v31 = v12;
  v32 = v13;
  v33 = *(_OWORD *)(a2 + 24);
  v34 = v14;
  v35 = v15;
  v36 = v16;
  a3(&v28);
  v30 = v15;
  v31 = v16;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v30) = v11;
    type metadata accessor for AccessibilityScenePropertiesModifier(255, a4, a5, a6);
    type metadata accessor for _GraphValue();
    v18 = _GraphValue.value.getter();
    v30 = v28;
    v31 = v29;
    v19 = PreferencesOutputs.subscript.getter();
    v21 = *MEMORY[0x1E0CFED28];
    if ((v19 & 0x100000000) == 0)
      v21 = v19;
    v30 = __PAIR64__(v21, v18);
    MEMORY[0x1E0C80A78](v19, v20);
    v26 = type metadata accessor for AccessibilityScenePropertiesModifier.TransformProperties(0, a4, a5, a6);
    v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScenePropertiesModifier<A>.TransformProperties, v26);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v25, v26, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
    LOBYTE(v30) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v24 = v29;
  *(_QWORD *)a7 = v28;
  *(_DWORD *)(a7 + 8) = v24;
  return result;
}

uint64_t AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(uint64_t a1)
{
  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return 0;
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

char *AccessibilityScenePropertiesModifier.TransformProperties.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = type metadata accessor for AccessibilityScenePropertiesModifier(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - v11;
  v13 = AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(a1);
  if (!v13)
    return (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)v13;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, Value, v8);
  v16 = v12[*(int *)(v8 + 44)];
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v16 == 1)
  {
    v17 = *((_QWORD *)v14 + 2);
    if (v17)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_12;
      while (1)
      {
        v18 = 0;
        v19 = (uint64_t)(v14 + 32);
        while (v18 < *((_QWORD *)v14 + 2))
        {
          ++v18;
          closure #1 in AccessibilityScenePropertiesModifier.TransformProperties.value.getter(v19, a1, a2, a3, a4);
          v19 += 272;
          if (v17 == v18)
            return v14;
        }
        __break(1u);
LABEL_12:
        v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      }
    }
  }
  return v14;
}

uint64_t closure #1 in AccessibilityScenePropertiesModifier.TransformProperties.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t Value;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25[1] = a2;
  v26 = a5;
  v6 = type metadata accessor for AccessibilityScenePropertiesModifier(0, a3, a4, a5);
  v25[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v25 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v25 - v17;
  v27 = a1;
  if (*(_QWORD *)(a1 + 184))
  {
    v19 = *(_QWORD *)(a1 + 184);
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v19 = Dictionary.init(minimumCapacity:)();
  }
  v29 = v19;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v25[0] + 16))(v9, Value, v6);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v9, AssociatedTypeWitness);
  v28 = v19;
  swift_bridgeObjectRetain();
  AccessibilityProperties.subscript.getter();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, AssociatedTypeWitness);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, AssociatedTypeWitness);
  AccessibilityProperties.subscript.setter();
  v21(v18, AssociatedTypeWitness);
  v22 = v29;
  v23 = v27;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 184) = v22;
  return result;
}

char *protocol witness for Rule.value.getter in conformance AccessibilityScenePropertiesModifier<A>.TransformProperties@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  char *result;

  result = AccessibilityScenePropertiesModifier.TransformProperties.value.getter(*v2, a1[2], a1[3], a1[4]);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance AccessibilityScenePropertiesModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  return static AccessibilityScenePropertiesModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a5);
}

uint64_t static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    _ViewInputs.withoutGeometryDependencies.getter();
    type metadata accessor for PlaceholderContentView();
    _ViewInputs.pushModifierBody<A>(_:body:)();
    PreferenceKeys.remove<A>(_:)();
    type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>();
    lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
    type metadata accessor for AccessibilityCustomPropertyModifier();
  }
  return a3();
}

void closure #1 in static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for AccessibilityCustomPropertyModifier();
}

uint64_t sub_1873193FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void AccessibilityCustomPropertyModifier.PropertyChild.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ZStack();
  MEMORY[0x1E0C80A78](v0, v1);
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v0);
  View.accessibilityRepresentationStyle()();
}

uint64_t sub_18731952C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t closure #1 in AccessibilityCustomPropertyModifier.PropertyChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v18 - v13;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, Value, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a3);
}

uint64_t AccessibilityCustomPropertyModifier.Attachment.attachment.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  void *v4;
  uint64_t v5;
  char v6;

  if (*MEMORY[0x1E0CFED28] == (_DWORD)result)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = -1;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_QWORD *)Value;
    v4 = *(void **)(Value + 8);
    *(_QWORD *)a2 = *(_QWORD *)Value;
    *(_QWORD *)(a2 + 8) = v4;
    v6 = *(_BYTE *)(Value + 16);
    *(_BYTE *)(a2 + 16) = v6;
    return outlined copy of AccessibilityAttachment.Tree(v5, v4, v6);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.PropertyChild@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ZStack();
  v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void protocol witness for Rule.value.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.PropertyChild()
{
  AccessibilityCustomPropertyModifier.PropertyChild.value.getter();
}

uint64_t AccessibilityCustomPropertyModifier.Attachment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  AccessibilityCustomPropertyModifier.Attachment.attachment.getter(a1, (uint64_t)&v17);
  if (v19 == 255)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v6 = Dictionary.init(minimumCapacity:)();
  }
  else
  {
    v8 = v17;
    v7 = v18;
    if (v19)
    {
      if (v19 != 1)
      {
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        v6 = Dictionary.init(minimumCapacity:)();
        v17 = v6;
        goto LABEL_9;
      }
      v9 = specialized Sequence.compactMap<A>(_:)(v17);
      static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v9, 0, &v16);
      swift_bridgeObjectRelease();
      v17 = v16;
      AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      AccessibilityProperties.init<A>(_:_:)();
      v10 = v8;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(v17, v18, 0);
      AccessibilityAttachment.mergedProperties.getter(&v16);
      v17 = v16;
      AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      AccessibilityProperties.init<A>(_:_:)();
      outlined consume of AccessibilityAttachment.Tree?(v8, v7, 0);
      v10 = v8;
      v11 = v7;
      v12 = 0;
    }
    outlined consume of AccessibilityAttachment.Tree?(v10, v11, v12);
    v6 = v17;
  }
LABEL_9:
  v16 = v6;
  AccessibilityAttachment.init(properties:)();
  v13 = v17;
  v14 = v18;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 24) = v14;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.Attachment@<X0>(uint64_t *a1@<X8>)
{
  unsigned int *v1;

  return AccessibilityCustomPropertyModifier.Attachment.value.getter(*v1, a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityCustomPropertyModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityCustomPropertyModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCustomPropertyModifier<A, B, C>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t View.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibility(label:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD))View.accessibilityLabel(_:));
}

uint64_t View.accessibility(hint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibility(label:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD))View.accessibilityHint(_:));
}

uint64_t View.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD))
{
  return a7(a1, a2, a3 & 1);
}

uint64_t View.accessibility(selectionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.accessibility()(a2, a3);
}

uint64_t ModifiedContent<>.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return ModifiedContent<>.accessibility(label:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))ModifiedContent<>.accessibilityLabel(_:));
}

uint64_t ModifiedContent<>.accessibility(hint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return ModifiedContent<>.accessibility(label:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))ModifiedContent<>.accessibilityHint(_:));
}

uint64_t ModifiedContent<>.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, _QWORD))
{
  return a6(a1, a2, a3 & 1);
}

uint64_t ModifiedContent<>.accessibility(selectionIdentifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ModifiedContent<>.accessibility()(a1, a2);
}

uint64_t View.accessibility(roleDescription:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v7, 1, a5, MEMORY[0x1E0CE57B0], a6);
}

uint64_t ModifiedContent<>.accessibility(roleDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE57B0], (uint64_t)v7, 1, a5, a6);
}

uint64_t type metadata completion function for AccessibilityScenePropertiesModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityScenePropertiesModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AccessibilityScenePropertiesModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityScenePropertiesModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (a2 <= v6)
    goto LABEL_23;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v11))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
  }
  else
  {
    if (v11 <= 0xFF)
    {
      if (v11 < 2)
        goto LABEL_23;
LABEL_7:
      v10 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_23;
LABEL_14:
      v12 = (v10 - 1) << v9;
      if (v8 > 3)
        v12 = 0;
      if ((_DWORD)v7 != -1)
      {
        if (v8 <= 3)
          v13 = v7 + 1;
        else
          v13 = 4;
        __asm { BR              X12 }
      }
      v16 = v6 + v12;
      return (v16 + 1);
    }
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
  }
LABEL_23:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  v16 = (v15 + 2147483646) & 0x7FFFFFFF;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for AccessibilityScenePropertiesModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu)
    v7 = 254;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityScenePropertiesModifier);
}

uint64_t type metadata completion function for AccessibilityCustomPropertyModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomPropertyModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18731A34C + 4 * byte_187C2420E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityCustomPropertyModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for AccessibilityCustomPropertyModifier()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityCustomPropertyModifier<A, B, C>()
{
  return &protocol witness table for AccessibilityCustomPropertyModifier<A, B, C>;
}

void type metadata accessor for _AnyPreferenceKey<AccessibilityAttachment.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  }
}

void type metadata accessor for AccessibilityCustomPropertyModifier.PropertyChild()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for AccessibilityCustomPropertyModifier.Attachment()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for AccessibilityScenePropertiesModifier.TransformProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityScenePropertiesModifier.TransformProperties);
}

void base witness table accessor for _AttributeBody in AccessibilityScenePropertiesModifier<A>.TransformProperties()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityCustomPropertyModifier<A, B, C>.Attachment()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityCustomPropertyModifier<A, B, C>.PropertyChild()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in AccessibilityCustomPropertyModifier.PropertyChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AccessibilityCustomPropertyModifier.PropertyChild.value.getter(*(unsigned int *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48), a1);
}

void outlined consume of AccessibilityAttachment.Tree?(uint64_t a1, void *a2, char a3)
{
  if (a3 != -1)
    outlined consume of AccessibilityAttachment.Tree(a1, a2, a3);
}

void List<>.init(content:)()
{
  type metadata accessor for List();
}

uint64_t sub_18731A684(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + *(int *)(a1 + 56)) = 0;
  v3 = v2 + *(int *)(a1 + 60);
  *(_QWORD *)v3 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  return v1();
}

void List<>.init(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a1, a2, a3);
  v5 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
  type metadata accessor for List();
}

uint64_t sub_18731A754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + *(int *)(a1 + 56)) = 0;
  v4 = v3 + *(int *)(a1 + 60);
  *(_QWORD *)v4 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v3, v1, v5);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v2);
  v8 = type metadata accessor for _ListStyleConfiguration(0, v2, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1, v8);
}

void List.init(selection:content:)(uint64_t a1@<X3>, uint64_t a2@<X5>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a1);
  v5 = type metadata accessor for Binding();
  v6 = type metadata accessor for Optional();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5, v8);
  type metadata accessor for List();
}

uint64_t sub_18731A8B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v7 + *(int *)(a1 + 56)) = 0;
  v11 = v7 + *(int *)(a1 + 60);
  *(_QWORD *)v11 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 16) = 0;
  *(_QWORD *)(v10 - 112) = v8;
  *(_QWORD *)(v10 - 104) = v3;
  *(_QWORD *)(v10 - 96) = *(_QWORD *)(v10 - 184);
  *(_QWORD *)(v10 - 160) = v9;
  *(_QWORD *)(v10 - 152) = v4;
  *(_QWORD *)(v10 - 144) = v1;
  *(_QWORD *)(v10 - 136) = v6;
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in List.init(selection:content:), v10 - 176, MEMORY[0x1E0DEDCE8], v2, v12, v5);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 - 216) + 40))(v7, v5, *(_QWORD *)(v10 - 208));
  (*(void (**)(uint64_t))(v10 - 192))(v13);
  return outlined consume of Binding<Set<A>>?<A, B>(v8, v3, *(_QWORD *)(v10 - 184), (void (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

void List.init(selection:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t refreshed;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    refreshed = type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
    v2[0] = &protocol witness table for ResetScrollEnvironmentModifier;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, refreshed, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void closure #1 in List.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t refreshed;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[3];

  v33 = a4;
  v35 = a1;
  v36 = a6;
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
  v9 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v31 = (char *)v25 - v11;
  refreshed = type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
  v12 = type metadata accessor for ModifiedContent();
  v32 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v27 = (char *)v25 - v14;
  v15 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v42[0] = a5;
  v42[1] = v15;
  v16 = MEMORY[0x1E0CE2E70];
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v42);
  v25[1] = v17;
  v18 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v41[0] = v17;
  v41[1] = v18;
  v26 = MEMORY[0x18D75FFDC](v16, v12, v41);
  v37 = v12;
  v38 = v26;
  v19 = MEMORY[0x18D75FF88](0, &v37, MEMORY[0x1E0CE6EC0], 0);
  v28 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v21 = type metadata accessor for ModifiedContent();
  v29 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v37 = a2;
  v38 = a3;
  v39 = v33;
  v40 = a5;
  type metadata accessor for List();
}

void sub_18731ADB8()
{
  View.refreshScope<A>(if:)();
}

uint64_t sub_18731ADF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  *(_BYTE *)(v8 - 152) = 2;
  v9 = *(_QWORD *)(v8 - 248);
  MEMORY[0x18D75B4AC](v8 - 152, v3, *(_QWORD *)(v8 - 224), *(_QWORD *)(v8 - 264));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 192) + 8))(v6, v3);
  v10 = *(_QWORD *)(v8 - 256);
  View.resetScrollInputs()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 208) + 8))(v9, v0);
  *(_QWORD *)(v8 - 152) = v0;
  *(_QWORD *)(v8 - 144) = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.resetContentMargin(placements:)((uint64_t)&outlined read-only object #0 of List.placementsToReset.getter, v5, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 240) + 8))(v1, v5);
  *(_QWORD *)(v8 - 168) = OpaqueTypeConformance2;
  *(_QWORD *)(v8 - 160) = &protocol witness table for ResetContentMarginModifier;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v8 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v4, v2, v12);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 232) + 8);
  v13(v4, v2);
  static ViewBuilder.buildBlock<A>(_:)(v7, v2, *(_QWORD *)(v8 - 176));
  return v13(v7, v2);
}

void partial apply for closure #1 in List.body.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;

  closure #1 in List.body.getter(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t outlined consume of Binding<Set<A>>?<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    a4(a3);
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelectionContainerModifier and conformance SelectionContainerModifier;
  if (!lazy protocol witness table cache variable for type SelectionContainerModifier and conformance SelectionContainerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionContainerModifier, &type metadata for SelectionContainerModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectionContainerModifier and conformance SelectionContainerModifier);
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance Fix_53164375()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void List.init<A, B>(_:selection:rowContent:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void List.init<A, B>(_:children:selection:rowContent:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for DisclosureGroup();
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  type metadata accessor for Binding();
  swift_getAssociatedTypeWitness();
  type metadata accessor for DisclosureGroup();
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18731B120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 144) = v4;
  *(_QWORD *)(v5 - 136) = v2;
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 120) = v3;
  *(_QWORD *)(v5 - 112) = a1;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731B15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v14);
  *(_QWORD *)(v16 - 168) = v15;
  *(_QWORD *)(v16 - 160) = v15;
  *(_QWORD *)(v16 - 152) = v18;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v16 - 168);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), a13, a12, a14);
}

uint64_t sub_18731B1B4()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1@<X8>)
{
  partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)((uint64_t)&unk_1E1B2CD10, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), a1);
}

{
  partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)((uint64_t)&unk_1E1B2CC98, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), a1);
}

{
  partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)((uint64_t)&unk_1E1B2CB30, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), a1);
}

{
  partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)((uint64_t)&unk_1E1B2CAE0, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), a1);
}

void List.init<A, B, C>(_:id:selection:rowContent:)()
{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void List.init<A, B, C>(_:id:children:selection:rowContent:)()
{
  type metadata accessor for DisclosureGroup();
}

{
  swift_release();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
}

{
  swift_release();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18731B300(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = a1;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v3;
  type metadata accessor for OutlineGroup();
}

void sub_18731B320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v33);
  a31 = v34;
  a32 = v36;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a30);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), v32, a10, a12);
}

uint64_t sub_18731B378()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1@<X8>)
{
  partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1E1B2CCE8, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

{
  partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1E1B2CC70, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

{
  partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1E1B2CB08, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

{
  partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1E1B2CAB8, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

void List.init<A>(_:selection:rowContent:)(uint64_t a1@<X7>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = MEMORY[0x1E0DEB418];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  v9[1] = v7;
  v9[2] = v6;
  v10 = type metadata accessor for HStack();
  v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v12 = MEMORY[0x1E0DEB428];
  v8 = type metadata accessor for ForEach();
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v10);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v8, v9);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A>(_:selection:rowContent:), a1, a4, a2);
}

uint64_t sub_18731B520()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in List.init<A>(_:selection:rowContent:)(a1);
}

{
  return partial apply for closure #1 in List.init<A>(_:selection:rowContent:)(a1);
}

{
  uint64_t *v1;

  return closure #1 in List.init<A>(_:selection:rowContent:)(v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], a1);
}

void List.init<A>(_:selection:rowContent:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  ValueMetadata *v47;
  uint64_t v48;
  _UNKNOWN **v49;

  v27 = a8;
  v31 = a5;
  v26 = a4;
  v33 = a3;
  v30 = a1;
  v35 = a9;
  v25[0] = a10;
  v25[1] = *a2;
  v29 = a2;
  v28 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  v32 = v19;
  v34 = v20;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  (*(void (**)(char *, uint64_t, double))(v24 + 16))((char *)v25 - v23, a3, v22);
  v36 = a6;
  v37 = a7;
  v38 = a8;
  v39 = v25[0];
  v40 = a11;
  v41 = a12;
  v42 = a1;
  v43 = a2;
  v44 = v26;
  v45 = a5;
  swift_getAssociatedTypeWitness();
  v46 = a7;
  v47 = &type metadata for OutlineSubgroupChildren;
  v48 = a11;
  v49 = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731B710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 144) = v2;
  *(_QWORD *)(v5 - 136) = v1;
  *(_QWORD *)(v5 - 128) = v4;
  *(_QWORD *)(v5 - 120) = v4;
  *(_QWORD *)(v5 - 112) = a1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731B74C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v1);
  *(_QWORD *)(v4 - 168) = v2;
  *(_QWORD *)(v4 - 160) = v2;
  *(_QWORD *)(v4 - 152) = v6;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v4 - 168);
  List.init(selection:content:)(v3, (uint64_t)partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), v4 - 272, *(_QWORD *)(v4 - 336), a1, *(_QWORD *)(v4 - 344), v7, *(_QWORD *)(v4 - 280));
}

uint64_t sub_18731B7B0()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 288) + 8))(*(_QWORD *)(v1 - 296), *(_QWORD *)(v1 - 304));
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 320), v0);
}

void closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  _QWORD v15[26];

  v15[2] = a8;
  v15[10] = a5;
  v15[11] = a7;
  v15[8] = a4;
  v15[9] = a2;
  v15[14] = a9;
  v15[12] = a3;
  v15[13] = a13;
  v15[6] = a1;
  v15[7] = a12;
  MEMORY[0x1E0C80A78](a1, a2);
  v15[1] = (char *)v15 - v14;
  v15[3] = swift_getAssociatedTypeWitness();
  v15[18] = a6;
  v15[19] = &type metadata for OutlineSubgroupChildren;
  v15[20] = a10;
  v15[21] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731B910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v4 - 256) = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v4 - 144) = v1;
  *(_QWORD *)(v4 - 136) = v3;
  *(_QWORD *)(v4 - 128) = v2;
  *(_QWORD *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = a1;
  *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 272);
  *(_QWORD *)(v4 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731B958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v9 - 248) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v5 + 16))(v8, *(_QWORD *)(v9 - 240), v2, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = *(_QWORD *)(v9 - 208);
  v13[3] = v2;
  v14 = *(_QWORD *)(v9 - 200);
  v13[4] = v4;
  v13[5] = v14;
  v13[6] = v6;
  v13[7] = v3;
  v15 = *(_QWORD *)(v9 - 192);
  v13[8] = v7;
  v13[9] = v15;
  v13[10] = *(_QWORD *)(v9 - 224);
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:children:content:)();
}

uint64_t sub_18731BA3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v4 - 256));
  *(_QWORD *)(v4 - 168) = v0;
  *(_QWORD *)(v4 - 160) = v0;
  *(_QWORD *)(v4 - 152) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v3, v4 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 248) + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v1, v3, *(_QWORD *)(v4 - 176));
  return v7(v1, v3);
}

void partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  closure #1 in List.init<A, B>(_:children:selection:rowContent:)(v3[8], v3[9], v3[10], v3[11], v3[2], v3[3], v3[4], v3[5], a3, v3[6], v3[7], a1, a2);
}

{
  uint64_t v3;

  closure #1 in List.init<A, B>(_:children:selection:rowContent:)(*(_QWORD *)(v3 + 72), *(_QWORD **)(v3 + 80), *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a3, *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), a1, a2);
}

void List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  ValueMetadata *v52;
  uint64_t v53;
  _UNKNOWN **v54;

  v31 = a5;
  v37 = a4;
  v35 = a1;
  v39 = a9;
  v28 = a12;
  v27 = a11;
  v32 = a10;
  v30 = *a2;
  v34 = a2;
  v29 = *a3;
  v33 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v36 = v20;
  v38 = v21;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  (*(void (**)(char *, uint64_t, double))(v25 + 16))((char *)&v26 - v24, a4, v23);
  v40 = a7;
  v41 = a8;
  v42 = a10;
  v43 = v27;
  v44 = v28;
  v45 = a13;
  v46 = a1;
  v47 = a2;
  v48 = a3;
  v49 = v31;
  v50 = a6;
  v51 = a8;
  v52 = &type metadata for OutlineSubgroupChildren;
  v53 = a13;
  v54 = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731BCD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 144) = v2;
  *(_QWORD *)(v6 - 136) = v1;
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v5;
  *(_QWORD *)(v6 - 112) = a1;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v4;
  type metadata accessor for OutlineGroup();
}

void sub_18731BCF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v2);
  *(_QWORD *)(v4 - 168) = v3;
  *(_QWORD *)(v4 - 160) = v3;
  *(_QWORD *)(v4 - 152) = v6;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v4 - 168);
  List.init(selection:content:)(v1, (uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), v4 - 272, *(_QWORD *)(v4 - 328), a1, *(_QWORD *)(v4 - 336), v7, *(_QWORD *)(v4 - 280));
}

uint64_t sub_18731BD54()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 288) + 8))(*(_QWORD *)(v1 - 296), *(_QWORD *)(v1 - 304));
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 312), v0);
}

void closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[26];

  v16[11] = a7;
  v16[12] = a4;
  v16[9] = a6;
  v16[10] = a3;
  v16[6] = a2;
  v16[7] = a5;
  v16[3] = a1;
  v16[14] = a8;
  v16[13] = a13;
  v16[4] = a12;
  v16[2] = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v16[1] = (char *)v16 - v13;
  v16[18] = v14;
  v16[19] = &type metadata for OutlineSubgroupChildren;
  v16[20] = v15;
  v16[21] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731BE98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = v1;
  *(_QWORD *)(v6 - 120) = v1;
  *(_QWORD *)(v6 - 288) = v1;
  *(_QWORD *)(v6 - 112) = a1;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v4;
  type metadata accessor for OutlineGroup();
}

void sub_18731BEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v9 - 224) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v3 + 16))(v8, *(_QWORD *)(v9 - 264), v7, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = *(_QWORD *)(v9 - 216);
  v13[3] = v7;
  v13[4] = v5;
  v13[5] = v2;
  v13[6] = *(_QWORD *)(v9 - 200);
  v13[7] = v4;
  v14 = *(_QWORD *)(v9 - 272);
  v13[8] = v6;
  v13[9] = v14;
  v15 = *(_QWORD *)(v9 - 232);
  v13[10] = *(_QWORD *)(v9 - 192);
  v13[11] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:id:children:content:)();
}

uint64_t sub_18731BFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v4 - 248));
  *(_QWORD *)(v4 - 168) = v1;
  *(_QWORD *)(v4 - 160) = v1;
  *(_QWORD *)(v4 - 152) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v3, v4 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 224) + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v0, v3, *(_QWORD *)(v4 - 176));
  return v7(v0, v3);
}

void partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(v3[8], v3[9], v3[10], v3[11], v3[12], v3[2], v3[4], a3, v3[5], v3[6], v3[7], a1, a2);
}

{
  uint64_t v3;

  closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(*(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(_QWORD **)(v3 + 88), *(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a3, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), a1, a2);
}

uint64_t closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(double);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  v17(v14);
  static ViewBuilder.buildExpression<A>(_:)(v11, a3, a7);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, a3);
}

void List.init<A, B>(_:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  _QWORD *KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v22 = a7;
  v23 = a1;
  v28 = a5;
  v29 = a6;
  v26 = a3;
  v27 = a4;
  v24 = a9;
  v25 = a2;
  v16 = *(_QWORD *)(a8 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v30 = a7;
  v31 = a8;
  v32 = a10;
  v33 = a11;
  v34 = a12;
  v35 = a13;
  v36 = a14;
  KeyPath = (_QWORD *)swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:selection:rowContent:)(KeyPath, v22, v24, a8, a10, a11, a12, AssociatedConformanceWitness);
}

uint64_t sub_18731C2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 200), v0);
}

uint64_t sub_18731C300()
{
  return 56;
}

__n128 sub_18731C30C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void List.init<A, B, C>(_:id:selection:rowContent:)(_QWORD *a1@<X1>, uint64_t a2@<X7>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a1 + 8);
  v12[1] = a4;
  v12[2] = v9;
  v13 = type metadata accessor for HStack();
  v14 = a7;
  v15 = a8;
  v10 = type metadata accessor for ForEach();
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v13);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v10, v12);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), a2, a6, a3);
}

uint64_t sub_18731C414()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)&unk_1E1B2CC48, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), a1);
}

{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)&unk_1E1B2CC20, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), a1);
}

void List.init<A, B>(_:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  _QWORD *KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v38 = a7;
  v39 = a1;
  v41 = a3;
  v42 = a4;
  v43 = a2;
  v40 = a9;
  v35 = a12;
  v36 = a8;
  v32 = a11;
  v33 = a10;
  v37 = a5;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v16 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v16 - 8);
  v17 = v34;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v30 - v19;
  v21 = *(_QWORD *)(a6 - 8);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v26, a1, a6, v24);
  v44 = a5;
  v45 = a6;
  v46 = a7;
  v27 = v36;
  v28 = v33;
  v47 = v36;
  v48 = v33;
  v49 = a11;
  v50 = v35;
  KeyPath = (_QWORD *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v43, v16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)v26, KeyPath, (uint64_t)v20, v41, v42, v37, a6, v38, v40, v27, v28, AssociatedConformanceWitness, v32);
}

uint64_t sub_18731C640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 224) + 8))(*(_QWORD *)(v3 - 152), v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v3 - 184), v0);
}

void List.init<A, B, C>(_:id:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[7];

  v36 = a8;
  v34 = a7;
  v38 = a4;
  v41 = a3;
  v40 = a1;
  v42 = a9;
  v33 = a12;
  v32 = a11;
  v37 = a10;
  v35 = *a2;
  v39 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v31 - v22, a3, v18, v21);
  v24 = v34;
  v44 = a6;
  v45 = v34;
  v46 = v36;
  v47 = a10;
  v25 = v32;
  v26 = v33;
  v48 = v32;
  v49 = v33;
  v50 = a13;
  v51 = a1;
  v52 = a2;
  v53 = v38;
  v54 = a5;
  v27 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v35 + 8);
  v28 = type metadata accessor for HStack();
  v55[1] = v24;
  v55[2] = v27;
  v55[3] = v28;
  v55[4] = v25;
  v55[5] = v26;
  v29 = type metadata accessor for ForEach();
  v55[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v28);
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v29, v55);
  List.init(selection:content:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), (uint64_t)v43, v39, v29, v37, v30, v42);
}

uint64_t sub_18731C860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v3 - 256), v2);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v3 - 264), v0);
}

uint64_t closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[7];

  v47 = a8;
  v48 = a4;
  v43 = a2;
  v44 = a5;
  v46 = a3;
  v50 = a9;
  v49 = a14;
  v41 = a1;
  v42 = a13;
  v39 = a7;
  v40 = a12;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v17;
  v19 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v18 + 8);
  v20 = type metadata accessor for HStack();
  v51[1] = a6;
  v51[2] = v19;
  v51[3] = v20;
  v51[4] = a10;
  v51[5] = a11;
  v21 = type metadata accessor for ForEach();
  v45 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v38 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v41, a6, v27);
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = v44;
  v30[3] = a6;
  v31 = v39;
  v30[4] = v19;
  v30[5] = v31;
  v32 = v48;
  v30[6] = v47;
  v30[7] = a10;
  v33 = v40;
  v30[8] = a11;
  v30[9] = v33;
  v30[10] = v46;
  v30[11] = v32;
  swift_retain();
  swift_retain();
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v20);
  ForEach<>.init(_:id:content:)();
  v51[0] = v37;
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v21, v51);
  static ViewBuilder.buildExpression<A>(_:)(v24, v21, v34);
  v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v24, v21);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v29, v21, v50);
  return ((uint64_t (*)(char *, uint64_t))v35)(v29, v21);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(v3[9], v3[10], v3[11], v3[12], v3[2], v3[3], v3[4], v3[5], a3, v3[6], v3[7], v3[8], a1, a2);
}

uint64_t closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v32 = a8;
  v33 = a3;
  v29 = a6;
  v30 = a2;
  v31 = a1;
  v35 = a9;
  v34 = a13;
  v16 = type metadata accessor for HStack();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v28 - v23;
  v36 = a4;
  v37 = a5;
  v38 = v29;
  v39 = a7;
  v40 = v32;
  v41 = a10;
  v42 = a11;
  v43 = a12;
  v44 = v30;
  v45 = v33;
  v46 = v31;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v16);
  static ViewBuilder.buildExpression<A>(_:)(v20, v16, v25);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v20, v16);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v16, v35);
  return ((uint64_t (*)(char *, uint64_t))v26)(v24, v16);
}

void List.init<A>(_:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[7];

  v30 = a8;
  v31 = a4;
  v32 = a3;
  v33 = a9;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v30 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v30 - v20, a3, v16, v19);
  v35 = a6;
  v36 = a7;
  v22 = v30;
  v37 = v30;
  v38 = a10;
  v39 = a1;
  v40 = a2;
  v41 = v31;
  v42 = a5;
  v23 = MEMORY[0x1E0DEB418];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  v25 = v24;
  v26 = type metadata accessor for HStack();
  v27 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v43[1] = v25;
  v43[2] = v23;
  v43[3] = v26;
  v43[4] = v27;
  v43[5] = MEMORY[0x1E0DEB428];
  v28 = type metadata accessor for ForEach();
  v43[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v26);
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v28, v43);
  List.init(selection:content:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in List.init<A>(_:selection:rowContent:), (uint64_t)v34, a6, v28, v22, v29, v33);
}

uint64_t sub_18731CE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 240), v1);
  return swift_release();
}

uint64_t closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a1;
  v13[7] = a2;
  v14 = type metadata accessor for HStack();
  swift_retain();
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v14);
  ForEach<>.init(_:content:)();
  v23 = v28;
  v24 = v29;
  v25 = v30;
  v26 = v31;
  v27 = v32;
  v16 = MEMORY[0x1E0DEB418];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  *(_QWORD *)&v33 = v17;
  *((_QWORD *)&v33 + 1) = v16;
  v34 = v14;
  v35 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v36 = MEMORY[0x1E0DEB428];
  v18 = type metadata accessor for ForEach();
  v22 = v15;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v18, &v22);
  static ViewBuilder.buildExpression<A>(_:)(&v23, v18, v19);
  swift_release();
  swift_release();
  swift_release();
  v28 = v33;
  v29 = v34;
  v30 = v35;
  v31 = v36;
  v32 = v37;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v28, v18, a7);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v28 = a6;
  v29 = a8;
  v30 = a9;
  v15 = type metadata accessor for HStack();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v27 - v22;
  v31 = a4;
  v32 = a5;
  v33 = v28;
  v34 = a7;
  v35 = a2;
  v36 = a3;
  v37 = a1;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v15);
  static ViewBuilder.buildExpression<A>(_:)(v19, v15, v24);
  v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25(v19, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v23, v15, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, v15);
}

uint64_t closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(uint64_t, double);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - v14;
  v17(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, a3);
}

void List<>.init<A, B>(_:children:rowContent:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for DisclosureGroup();
}

{
  type metadata accessor for Binding();
  swift_getAssociatedTypeWitness();
  type metadata accessor for DisclosureGroup();
}

void sub_18731D380()
{
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

void sub_18731D3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v20);
  a14 = v19;
  a15 = v22;
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a13);
  a16 = MEMORY[0x1E0DEDCE8];
  a17 = a1;
  a18 = MEMORY[0x1E0DEDCF8];
  a19 = v23;
  type metadata accessor for List();
}

void sub_18731D414(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + a1[14]) = 0;
  v16 = v15 + a1[15];
  *(_QWORD *)v16 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  closure #1 in List<>.init<A, B>(_:children:rowContent:)(a10, v12, a11, a12, v14, v13, v15 + a1[13]);
}

uint64_t sub_18731D470()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[22];

  v11[8] = a2;
  v11[9] = a4;
  v11[6] = a1;
  v11[7] = a3;
  v11[10] = a7;
  MEMORY[0x1E0C80A78](a1, a2);
  v11[1] = (char *)v11 - v9;
  v11[2] = v10;
  v11[3] = swift_getAssociatedTypeWitness();
  v11[14] = a5;
  v11[15] = &type metadata for OutlineSubgroupChildren;
  v11[16] = a6;
  v11[17] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731D58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v5 - 224) = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 136) = v3;
  *(_QWORD *)(v5 - 128) = v2;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 112) = a1;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731D5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)(v8 - 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v6 + 16))(v5, *(_QWORD *)(v8 - 208), v2, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v2;
  v12[3] = v4;
  v12[4] = v7;
  v12[5] = v3;
  v13 = *(_QWORD *)(v8 - 200);
  v12[6] = *(_QWORD *)(v8 - 240);
  v12[7] = v13;
  v12[8] = *(_QWORD *)(v8 - 184);
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:children:content:)();
}

uint64_t sub_18731D6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v4 - 224));
  *(_QWORD *)(v4 - 168) = v0;
  *(_QWORD *)(v4 - 160) = v0;
  *(_QWORD *)(v4 - 152) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v3, v4 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 216) + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v1, v3, *(_QWORD *)(v4 - 176));
  return v7(v1, v3);
}

void List<>.init<A, B, C>(_:id:children:rowContent:)()
{
  type metadata accessor for DisclosureGroup();
}

{
  type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
}

void sub_18731D7D8()
{
  type metadata accessor for OutlineGroup();
}

void sub_18731D7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v20);
  a14 = v19;
  a15 = v22;
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a13);
  a16 = MEMORY[0x1E0DEDCE8];
  a17 = a1;
  a18 = MEMORY[0x1E0DEDCF8];
  a19 = v23;
  type metadata accessor for List();
}

#error "18731D8A8: call analysis failed (funcsize=23)"

uint64_t sub_18731D8AC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[22];

  v10[8] = a5;
  v10[9] = a4;
  v10[7] = a3;
  v10[5] = a2;
  v10[10] = a6;
  v10[2] = a7;
  v10[3] = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v10[1] = (char *)v10 - v7;
  v10[14] = v8;
  v10[15] = &type metadata for OutlineSubgroupChildren;
  v10[16] = v9;
  v10[17] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731D9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 224) = a1;
  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 256) = v2;
  *(_QWORD *)(v6 - 112) = a1;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 96) = v1;
  type metadata accessor for OutlineGroup();
}

void sub_18731D9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v9 - 208) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v3 + 16))(v2, *(_QWORD *)(v9 - 232), v8, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v6;
  v13[4] = v5;
  v13[5] = v7;
  v14 = *(_QWORD *)(v9 - 240);
  v13[6] = v4;
  v13[7] = v14;
  v15 = *(_QWORD *)(v9 - 192);
  v13[8] = *(_QWORD *)(v9 - 184);
  v13[9] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:id:children:content:)();
}

uint64_t sub_18731DABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v4 - 224));
  *(_QWORD *)(v4 - 168) = v0;
  *(_QWORD *)(v4 - 160) = v0;
  *(_QWORD *)(v4 - 152) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v1, v4 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 208) + 8);
  v7(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, *(_QWORD *)(v4 - 176));
  return v7(v3, v1);
}

void List<>.init<A, B>(_:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  _QWORD *KeyPath;
  uint64_t AssociatedConformanceWitness;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v21 = a2;
  v22 = a3;
  v20[0] = a1;
  v20[1] = a9;
  v14 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x1E0C80A78](a1, a1);
  v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v17, v15);
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  KeyPath = (_QWORD *)swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List<>.init<A, B, C>(_:id:rowContent:)((uint64_t)v17, KeyPath, v21, v22, a4, a5, a6, AssociatedConformanceWitness);
}

uint64_t sub_18731DC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 160), v0);
}

uint64_t key path getter for Identifiable.id : <A, B><A1, B1>A1.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_18731DD28()
{
  return 40;
}

__n128 sub_18731DD34(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void List<>.init<A, B, C>(_:id:rowContent:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  v14 = a5;
  v15 = v10;
  v16 = type metadata accessor for HStack();
  v17 = a7;
  v18 = a8;
  v11 = type metadata accessor for ForEach();
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v16);
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v11, &v13);
  v14 = MEMORY[0x1E0DEDCE8];
  v15 = v11;
  v16 = MEMORY[0x1E0DEDCF8];
  v17 = v12;
  type metadata accessor for List();
}

uint64_t sub_18731DE20(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + a1[14]) = 0;
  v9 = v8 + a1[15];
  *(_QWORD *)v9 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  closure #1 in List<>.init<A, B, C>(_:id:rowContent:)(v11, v4, v12, v2, v1, v6, v5, v3, v8 + a1[13], v7);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v11, v1);
}

uint64_t closure #1 in List<>.init<A, B, C>(_:id:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[6];

  v40 = a3;
  v41 = a4;
  v38 = a1;
  v39 = a2;
  v43 = a9;
  v36 = a6;
  v37 = a10;
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[1] = v15;
  v17 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v16 + 8);
  v18 = type metadata accessor for HStack();
  v44[1] = a5;
  v44[2] = v17;
  v44[3] = v18;
  v44[4] = a7;
  v44[5] = a8;
  v35[0] = a8;
  v19 = type metadata accessor for ForEach();
  v42 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)v35 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v38, a5, v25);
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = a5;
  v28[3] = v17;
  v28[4] = v36;
  v28[5] = a7;
  v29 = v37;
  v28[6] = a8;
  v28[7] = v29;
  v30 = v41;
  v28[8] = v40;
  v28[9] = v30;
  swift_retain();
  swift_retain();
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v18);
  ForEach<>.init(_:id:content:)();
  v44[0] = v34;
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v19, v44);
  static ViewBuilder.buildExpression<A>(_:)(v22, v19, v31);
  v32 = *(void (**)(char *, uint64_t))(v42 + 8);
  v32(v22, v19);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v27, v19, v43);
  return ((uint64_t (*)(char *, uint64_t))v32)(v27, v19);
}

uint64_t closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v28 = a3;
  v29 = a8;
  v27 = a7;
  v30 = a9;
  v15 = type metadata accessor for HStack();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v27 - v22;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v34 = v27;
  v35 = v29;
  v36 = a10;
  v37 = a2;
  v38 = v28;
  v39 = a1;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v15);
  static ViewBuilder.buildExpression<A>(_:)(v19, v15, v24);
  v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25(v19, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v23, v15, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, v15);
}

void List<>.init<A>(_:rowContent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v0 = MEMORY[0x1E0DEB418];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  v5 = v1;
  v6 = v0;
  v7 = type metadata accessor for HStack();
  v8 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v9 = MEMORY[0x1E0DEB428];
  v2 = type metadata accessor for ForEach();
  v4 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v7);
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &v4);
  v5 = MEMORY[0x1E0DEDCE8];
  v6 = v2;
  v7 = MEMORY[0x1E0DEDCF8];
  v8 = v3;
  type metadata accessor for List();
}

__n128 sub_18731E344(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  *(_QWORD *)(v6 + a1[14]) = 0;
  v7 = v6 + a1[15];
  *(_QWORD *)v7 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  closure #1 in List<>.init<A>(_:rowContent:)(v5, v2, v4, v3, v6 + a1[13]);
  swift_release();
  result = 0u;
  *(_OWORD *)v1 = 0u;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_OWORD *)(v1 + 32) = v9;
  *(_OWORD *)(v1 + 48) = v10;
  *(_OWORD *)(v1 + 64) = v11;
  *(_OWORD *)(v1 + 80) = v12;
  *(_OWORD *)(v1 + 96) = v13;
  *(_BYTE *)(v1 + 112) = v14;
  return result;
}

uint64_t closure #1 in List<>.init<A>(_:rowContent:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  v11 = type metadata accessor for HStack();
  swift_retain();
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v11);
  ForEach<>.init(_:content:)();
  v19 = v24;
  v20 = v25;
  v21 = v26;
  v22 = v27;
  v23 = v28;
  v13 = MEMORY[0x1E0DEB418];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  *(_QWORD *)&v29 = v14;
  *((_QWORD *)&v29 + 1) = v13;
  v30 = v11;
  v31 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v32 = MEMORY[0x1E0DEB428];
  v15 = type metadata accessor for ForEach();
  v18 = v12;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v15, &v18);
  static ViewBuilder.buildExpression<A>(_:)(&v19, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  v24 = v29;
  v25 = v30;
  v26 = v31;
  v27 = v32;
  v28 = v33;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v24, v15, a5);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in List<>.init<A>(_:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = type metadata accessor for HStack();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = &v24[-v19];
  v25 = a4;
  v26 = a5;
  v27 = a2;
  v28 = a3;
  v29 = a1;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v21);
  v22 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v22(v16, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v12, a6);
  return ((uint64_t (*)(_BYTE *, uint64_t))v22)(v20, v12);
}

uint64_t closure #1 in closure #1 in closure #1 in List<>.init<A>(_:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(uint64_t, double);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v20 - v14;
  v17(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, a3);
}

void sub_18731E8D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v1;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v5, v6 - 104);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 160) = v5;
  *(_QWORD *)(v6 - 152) = v3;
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731E934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v37 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v34);
  a33 = v35;
  a34 = v37;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a32);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), a13, a12, a14);
}

uint64_t sub_18731E98C()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void sub_18731EB1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v2;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v3, v7 - 104);
  *(_QWORD *)(v7 - 160) = v3;
  *(_QWORD *)(v7 - 152) = v6;
  *(_QWORD *)(v7 - 144) = v1;
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 128) = a1;
  *(_QWORD *)(v7 - 120) = v9;
  *(_QWORD *)(v7 - 112) = v4;
  type metadata accessor for OutlineGroup();
}

void sub_18731EB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v14);
  *(_QWORD *)(v16 - 184) = v15;
  *(_QWORD *)(v16 - 176) = v15;
  *(_QWORD *)(v16 - 168) = v18;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v16 - 184);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a12, a11, a14);
}

uint64_t sub_18731EBAC()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t v52;
  _UNKNOWN **v53;

  v31 = a8;
  v34 = a5;
  v28 = a4;
  v36 = a3;
  v29 = a1;
  v38 = a9;
  v26 = a11;
  v27 = *a2;
  v33 = a2;
  v32 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  v35 = v19;
  v37 = v20;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v30 = (char *)&v25 - v23;
  (*(void (**)(double))(v24 + 16))(v22);
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a10;
  v43 = v26;
  v44 = a12;
  v45 = a13;
  v46 = a1;
  v47 = a2;
  v48 = v28;
  v49 = a5;
  type metadata accessor for Binding();
  swift_getAssociatedTypeWitness();
  v50 = a7;
  v51 = &type metadata for OutlineSubgroupChildren;
  v52 = a12;
  v53 = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731EE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v3;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v2, v6 - 104);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 160) = v2;
  *(_QWORD *)(v6 - 152) = v1;
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = v4;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731EE5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v1);
  *(_QWORD *)(v3 - 184) = v2;
  *(_QWORD *)(v3 - 176) = v2;
  *(_QWORD *)(v3 - 168) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v3 - 184);
  List.init(selection:content:)(*(_QWORD *)(v3 - 360), (uint64_t)partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), v3 - 288, *(_QWORD *)(v3 - 344), a1, *(_QWORD *)(v3 - 352), v6, *(_QWORD *)(v3 - 296));
}

uint64_t sub_18731EEC4()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 304) + 8))(*(_QWORD *)(v1 - 312), *(_QWORD *)(v1 - 320));
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 368), v0);
}

void closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[32];

  v18[3] = a8;
  v18[12] = a4;
  v18[13] = a7;
  v18[15] = a5;
  v18[16] = a3;
  v18[14] = a2;
  v18[10] = a1;
  v18[18] = a9;
  v18[17] = a14;
  v18[7] = a11;
  v18[11] = a13;
  v18[9] = *(_QWORD *)(*(_QWORD *)(*a2 + *MEMORY[0x1E0DEC880] + 8) + 16);
  v15 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v15, v16);
  v18[6] = (char *)v18 - v17;
  v18[4] = swift_getAssociatedTypeWitness();
  v18[22] = a6;
  v18[23] = &type metadata for OutlineSubgroupChildren;
  v18[24] = a11;
  v18[25] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731F04C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v6 - 296) = a1;
  *(_QWORD *)(v6 - 104) = v5;
  *(_QWORD *)(v6 - 96) = v3;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v1, v6 - 104);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 160) = v1;
  *(_QWORD *)(v6 - 152) = v4;
  *(_QWORD *)(v6 - 144) = v2;
  *(_QWORD *)(v6 - 136) = v2;
  *(_QWORD *)(v6 - 328) = v2;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731F0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v14 - 272) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v14 - 320) = (char *)&a9 - v18;
  (*(void (**)(_QWORD, _QWORD, uint64_t, double))(v12 + 16))(*(_QWORD *)(v14 - 288), *(_QWORD *)(v14 - 256), v9, v17);
  v19 = (_QWORD *)swift_allocObject();
  v20 = *(_QWORD *)(v14 - 264);
  v19[2] = *(_QWORD *)(v14 - 216);
  v19[3] = v20;
  v22 = *(_QWORD *)(v14 - 240);
  v21 = *(_QWORD *)(v14 - 232);
  v19[4] = v10;
  v19[5] = v21;
  v19[6] = *(_QWORD *)(v14 - 312);
  v19[7] = v11;
  v19[8] = *(_QWORD *)(v14 - 280);
  v19[9] = v13;
  v19[10] = *(_QWORD *)(v14 - 208);
  v19[11] = v22;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:children:content:)();
}

uint64_t sub_18731F1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v3 - 296));
  *(_QWORD *)(v3 - 184) = v1;
  *(_QWORD *)(v3 - 176) = v1;
  *(_QWORD *)(v3 - 168) = v4;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v0, v3 - 184);
  v6 = *(_QWORD *)(v3 - 320);
  static ViewBuilder.buildExpression<A>(_:)(v2, v0, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 8);
  v7(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v6, v0, *(_QWORD *)(v3 - 192));
  return v7(v6, v0);
}

void List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  ValueMetadata *v53;
  uint64_t v54;
  _UNKNOWN **v55;

  v29 = a5;
  v37 = a4;
  v32 = a1;
  v39 = a9;
  v27 = a13;
  v26 = a12;
  v33 = a10;
  v30 = *a2;
  v35 = a2;
  v28 = *a3;
  v34 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v36 = v20;
  v38 = v21;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v31 = (char *)&v26 - v24;
  (*(void (**)(double))(v25 + 16))(v23);
  v40 = a7;
  v41 = a8;
  v42 = a10;
  v43 = a11;
  v44 = v26;
  v45 = v27;
  v46 = a14;
  v47 = a1;
  v48 = a2;
  v49 = a3;
  v50 = v29;
  v51 = a6;
  type metadata accessor for Binding();
  v52 = a8;
  v53 = &type metadata for OutlineSubgroupChildren;
  v54 = a14;
  v55 = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731F45C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = v4;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v1, v7 - 104);
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 152) = v2;
  *(_QWORD *)(v7 - 144) = v6;
  *(_QWORD *)(v7 - 136) = v6;
  *(_QWORD *)(v7 - 128) = a1;
  *(_QWORD *)(v7 - 120) = v9;
  *(_QWORD *)(v7 - 112) = v5;
  type metadata accessor for OutlineGroup();
}

void sub_18731F494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v1);
  *(_QWORD *)(v3 - 184) = v2;
  *(_QWORD *)(v3 - 176) = v2;
  *(_QWORD *)(v3 - 168) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v3 - 184);
  List.init(selection:content:)(*(_QWORD *)(v3 - 376), (uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), v3 - 304, *(_QWORD *)(v3 - 352), a1, *(_QWORD *)(v3 - 360), v6, *(_QWORD *)(v3 - 312));
}

uint64_t sub_18731F4FC()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 320) + 8))(*(_QWORD *)(v1 - 328), *(_QWORD *)(v1 - 336));
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 368), v0);
}

void closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[32];

  v19[14] = a8;
  v19[15] = a4;
  v19[12] = a6;
  v19[13] = a3;
  v19[16] = a5;
  v19[11] = a2;
  v19[8] = a1;
  v19[18] = a9;
  v19[17] = a15;
  v19[10] = a14;
  v19[4] = a11;
  v19[5] = a10;
  v19[7] = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + *a3 + 8) + 16);
  v16 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v16, v17);
  v19[3] = (char *)v19 - v18;
  v19[22] = a7;
  v19[23] = &type metadata for OutlineSubgroupChildren;
  v19[24] = a13;
  v19[25] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731F678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(v7 - 288) = a1;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v3;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v2, v7 - 104);
  *(_QWORD *)(v7 - 160) = v2;
  *(_QWORD *)(v7 - 152) = v4;
  *(_QWORD *)(v7 - 144) = v1;
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 320) = v1;
  *(_QWORD *)(v7 - 128) = a1;
  *(_QWORD *)(v7 - 120) = v9;
  *(_QWORD *)(v7 - 112) = v6;
  *(_QWORD *)(v7 - 328) = v6;
  type metadata accessor for OutlineGroup();
}

void sub_18731F6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v9 - 264) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v5 + 16))(v7, *(_QWORD *)(v9 - 272), v4, v12);
  v13 = (_QWORD *)swift_allocObject();
  v14 = *(_QWORD *)(v9 - 280);
  v13[2] = *(_QWORD *)(v9 - 240);
  v13[3] = v14;
  v13[4] = v6;
  v13[5] = v2;
  v15 = *(_QWORD *)(v9 - 296);
  v13[6] = *(_QWORD *)(v9 - 224);
  v13[7] = v15;
  v13[8] = *(_QWORD *)(v9 - 304);
  v13[9] = v8;
  v16 = *(_QWORD *)(v9 - 216);
  v17 = *(_QWORD *)(v9 - 208);
  v13[10] = v3;
  v13[11] = v16;
  v13[12] = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:id:children:content:)();
}

uint64_t sub_18731F7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v4 - 288));
  *(_QWORD *)(v4 - 184) = v1;
  *(_QWORD *)(v4 - 176) = v1;
  *(_QWORD *)(v4 - 168) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v2, v4 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v0, v2, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 264) + 8);
  v7(v0, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, *(_QWORD *)(v4 - 192));
  return v7(v3, v2);
}

uint64_t closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(double);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - v16;
  v18(v15);
  static ViewBuilder.buildExpression<A>(_:)(v12, a3, a8);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, a3);
}

void sub_18731FA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v0;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v2, v3 - 104);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

void sub_18731FACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v23);
  a17 = v22;
  a18 = v25;
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a16);
  a19 = MEMORY[0x1E0DEDCE8];
  a20 = a1;
  a21 = MEMORY[0x1E0DEDCF8];
  a22 = v26;
  type metadata accessor for List();
}

void sub_18731FB20(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + a1[14]) = 0;
  v18 = v17 + a1[15];
  *(_QWORD *)v18 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 0;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  closure #1 in List<>.init<A, B>(_:children:rowContent:)(a13, a12, a14, a15, v16, a10, v15, v17 + a1[13]);
}

uint64_t sub_18731FB7C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[28];

  v13[7] = a7;
  v13[3] = a6;
  v13[11] = a4;
  v13[12] = a2;
  v13[13] = a3;
  v13[14] = a8;
  v13[9] = a1;
  v13[10] = *(_QWORD *)(*(_QWORD *)(*a2 + *MEMORY[0x1E0DEC880] + 8) + 16);
  v10 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v10, v11);
  v13[6] = (char *)v13 - v12;
  v13[4] = swift_getAssociatedTypeWitness();
  v13[18] = a5;
  v13[19] = &type metadata for OutlineSubgroupChildren;
  v13[20] = a7;
  v13[21] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_18731FCBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v6 - 264) = a1;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v5;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v1, v6 - 104);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v6 - 160) = v1;
  *(_QWORD *)(v6 - 152) = v4;
  *(_QWORD *)(v6 - 144) = v2;
  *(_QWORD *)(v6 - 136) = v2;
  *(_QWORD *)(v6 - 296) = v2;
  *(_QWORD *)(v6 - 128) = a1;
  *(_QWORD *)(v6 - 120) = v8;
  *(_QWORD *)(v6 - 112) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

void sub_18731FD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  *(_QWORD *)(v14 - 240) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v14 - 288) = (char *)&a9 - v18;
  (*(void (**)(_QWORD, _QWORD, uint64_t, double))(v11 + 16))(*(_QWORD *)(v14 - 256), *(_QWORD *)(v14 - 232), v9, v17);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = *(_QWORD *)(v14 - 224);
  v19[3] = v10;
  v19[4] = *(_QWORD *)(v14 - 280);
  v19[5] = v12;
  v19[6] = *(_QWORD *)(v14 - 248);
  v19[7] = v13;
  v20 = *(_QWORD *)(v14 - 216);
  v19[8] = *(_QWORD *)(v14 - 200);
  v19[9] = v20;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:children:content:)();
}

uint64_t sub_18731FE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v3 - 264));
  *(_QWORD *)(v3 - 184) = v0;
  *(_QWORD *)(v3 - 176) = v0;
  *(_QWORD *)(v3 - 168) = v4;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v2, v3 - 184);
  v6 = *(_QWORD *)(v3 - 288);
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 240) + 8);
  v7(v1, v2);
  static ViewBuilder.buildBlock<A>(_:)(v6, v2, *(_QWORD *)(v3 - 192));
  return v7(v6, v2);
}

void sub_18731FF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = v0;
  *(_QWORD *)(v3 - 96) = v1;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v2, v3 - 104);
  type metadata accessor for OutlineGroup();
}

void sub_18731FFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, v23);
  a17 = v22;
  a18 = v25;
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a16);
  a19 = MEMORY[0x1E0DEDCE8];
  a20 = a1;
  a21 = MEMORY[0x1E0DEDCF8];
  a22 = v26;
  type metadata accessor for List();
}

#error "18732005C: call analysis failed (funcsize=23)"

uint64_t sub_187320060()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[28];

  v14[4] = a7;
  v14[12] = a4;
  v14[13] = a5;
  v14[10] = a2;
  v14[11] = a3;
  v14[7] = a1;
  v14[14] = a8;
  v14[5] = a10;
  v14[8] = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + *a3 + 8) + 16);
  v11 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v11, v12);
  v14[3] = (char *)v14 - v13;
  v14[18] = a6;
  v14[19] = &type metadata for OutlineSubgroupChildren;
  v14[20] = a10;
  v14[21] = &protocol witness table for OutlineSubgroupChildren;
  type metadata accessor for DisclosureGroup();
}

void sub_187320194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)(v7 - 256) = a1;
  *(_QWORD *)(v7 - 104) = v2;
  *(_QWORD *)(v7 - 96) = v6;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75B8], v3, v7 - 104);
  *(_QWORD *)(v7 - 160) = v3;
  *(_QWORD *)(v7 - 152) = v4;
  *(_QWORD *)(v7 - 144) = v1;
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 288) = v1;
  *(_QWORD *)(v7 - 128) = a1;
  *(_QWORD *)(v7 - 120) = v9;
  *(_QWORD *)(v7 - 112) = v5;
  *(_QWORD *)(v7 - 296) = v5;
  type metadata accessor for OutlineGroup();
}

void sub_1873201E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v9 - 232) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v6 + 16))(v8, *(_QWORD *)(v9 - 248), v4, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = *(_QWORD *)(v9 - 240);
  v13[3] = v5;
  v13[4] = v3;
  v13[5] = v2;
  v13[6] = *(_QWORD *)(v9 - 272);
  v13[7] = v7;
  v14 = *(_QWORD *)(v9 - 208);
  v15 = *(_QWORD *)(v9 - 200);
  v13[8] = *(_QWORD *)(v9 - 264);
  v13[9] = v14;
  v13[10] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:id:children:content:)();
}

uint64_t sub_1873202EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroup<A, B>, *(_QWORD *)(v4 - 256));
  *(_QWORD *)(v4 - 184) = v1;
  *(_QWORD *)(v4 - 176) = v1;
  *(_QWORD *)(v4 - 168) = v5;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, v0, v4 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v2, v0, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 232) + 8);
  v7(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v3, v0, *(_QWORD *)(v4 - 192));
  return v7(v3, v0);
}

_QWORD *initializeBufferWithCopyOfBuffer for List(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *__dsta;
  int v46;
  _QWORD *__srca;
  uint64_t v49;
  uint64_t v50;

  v3 = __src;
  v4 = __dst;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80);
  v10 = v9 & 0xF8 | 7;
  v11 = ((v9 & 0xF8) + 23) & ~v10;
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = v8 + 1;
  if (v12 <= v8)
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = v12;
  if (v13 <= 8)
    v14 = 8;
  else
    v14 = v13;
  v15 = (v11 | 1) + v14;
  v16 = *(_QWORD *)(v5 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = *(_QWORD *)(v16 + 64) + 7;
  v19 = (*(_DWORD *)(v16 + 80) | v9) & 0x100000;
  if ((v17 | v10) != 7
    || v19 != 0
    || ((((v18 + ((v15 + v17) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v22 = *__src;
    *v4 = *__src;
    v4 = (_QWORD *)(v22 + (((v17 | v10) + 16) & ~(v17 | v10)));
    swift_retain();
  }
  else
  {
    v49 = v11 | 1;
    v50 = v5;
    v23 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = *v23;
    if ((unint64_t)*v23 < 0xFFFFFFFF)
    {
      memcpy(__dst, __src, v15);
      v29 = v49;
      v28 = v50;
      v30 = ~v17;
    }
    else
    {
      v46 = *(_DWORD *)(v7 + 84);
      *__dst = *__src;
      v25 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
      *v25 = v24;
      v44 = v6;
      __dsta = (_QWORD *)(((unint64_t)v25 + v10 + 8) & ~v10);
      __srca = (_QWORD *)(((unint64_t)v23 + v10 + 8) & ~v10);
      v26 = *((unsigned __int8 *)__srca + v14);
      swift_retain();
      swift_retain();
      if (v26 >= 3)
      {
        if (v14 <= 3)
          v27 = v14;
        else
          v27 = 4;
        __asm { BR              X11 }
      }
      if (v26 == 2)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(__dsta, __srca, v44);
        *((_BYTE *)__dsta + v14) = 2;
        v3 = __src;
      }
      else if (v26 == 1)
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(__srca, 1, v44))
        {
          v31 = __dsta;
          memcpy(__dsta, __srca, v12);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(__dsta, __srca, v44);
          v32 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56);
          v31 = __dsta;
          v32(__dsta, 0, 1, v44);
        }
        v3 = __src;
        *((_BYTE *)v31 + v14) = 1;
      }
      else
      {
        v3 = __src;
        *__dsta = *__srca;
        *((_BYTE *)__dsta + v14) = 0;
        swift_bridgeObjectRetain();
      }
      v29 = v49;
      v28 = v50;
      v30 = ~v17;
      v33 = 8;
      if (v8 > 8)
        v33 = v8;
      if (v8 + 1 <= v8)
        v34 = v8;
      else
        v34 = v8 + 1;
      if (v34 <= 8)
        v34 = 8;
      if (v46)
        v14 = v33;
      else
        v14 = v34;
    }
    v35 = ((unint64_t)v4 + v17 + v29 + v14) & v30;
    v36 = ((unint64_t)v3 + v17 + v29 + v14) & v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))(v35, v36, v28);
    v37 = (_QWORD *)((v18 + v35) & 0xFFFFFFFFFFFFF8);
    v38 = (v18 + v36) & 0xFFFFFFFFFFFFF8;
    v39 = *(_QWORD *)v38;
    v38 += 15;
    *v37 = v39;
    v40 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v41 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
    v42 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 8);
    LOBYTE(v35) = *(_BYTE *)((v38 & 0xFFFFFFFFFFFFFFF8) + 16);
    outlined copy of HoverCallback();
    *(_QWORD *)v40 = v41;
    *(_QWORD *)(v40 + 8) = v42;
    *(_BYTE *)(v40 + 16) = v35;
  }
  return v4;
}

_QWORD *initializeWithTake for List(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char v35;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_DWORD *)(v7 + 80) & 0xF8;
  v11 = v10 | 7;
  v12 = (v10 + 23) & ~(v10 | 7);
  v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if ((unint64_t)*v13 < 0xFFFFFFFF)
  {
    if (v9)
      v23 = *(_QWORD *)(v7 + 64);
    else
      v23 = v8 + 1;
    if (v23 > v8)
      v8 = v23;
    if (v8 <= 8)
      v20 = 8;
    else
      v20 = v8;
    memcpy(__dst, __src, v20 + v12 + 1);
  }
  else
  {
    *__dst = *__src;
    v15 = v9 == 0;
    v16 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = v14;
    v17 = (_QWORD *)(((unint64_t)v16 + v11 + 8) & ~v11);
    v18 = (_QWORD *)(((unint64_t)v13 + v11 + 8) & ~v11);
    if (v15)
      v19 = v8 + 1;
    else
      v19 = v8;
    if (v19 > v8)
      v8 = v19;
    if (v8 <= 8)
      v20 = 8;
    else
      v20 = v8;
    v21 = *((unsigned __int8 *)v18 + v20);
    if (v21 >= 3)
    {
      if (v20 <= 3)
        v22 = v20;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
      v24 = 2;
LABEL_32:
      *((_BYTE *)v17 + v20) = v24;
      goto LABEL_33;
    }
    if (v21 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
      {
        memcpy(v17, v18, v19);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v17, v18, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
      }
      v24 = 1;
      goto LABEL_32;
    }
    *v17 = *v18;
    *((_BYTE *)v17 + v20) = 0;
  }
LABEL_33:
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v20 + v12 + v26 + 1;
  v28 = ((unint64_t)__dst + v27) & ~v26;
  v29 = ((unint64_t)__src + v27) & ~v26;
  (*(void (**)(unint64_t, unint64_t))(v25 + 32))(v28, v29);
  v30 = *(_QWORD *)(v25 + 64) + 7;
  v31 = (_QWORD *)((v30 + v28) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v30 + v29) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_BYTE *)(v34 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = v35;
  return __dst;
}

_QWORD *assignWithTake for List(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v48;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v48 = (v9 + 23) & v11;
  v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *__dst = *__src;
      *v12 = *v13;
      v23 = v10 + 8;
      v16 = (_QWORD *)(((unint64_t)v12 + v10 + 8) & v11);
      v17 = (_QWORD *)(((unint64_t)v13 + v23) & v11);
      if (v8)
        v18 = v7;
      else
        v18 = v7 + 1;
      if (v18 <= v7)
        v24 = v7;
      else
        v24 = v18;
      if (v24 <= 8)
        v20 = 8;
      else
        v20 = v24;
      v25 = *((unsigned __int8 *)v17 + v20);
      if (v25 >= 3)
      {
        if (v20 <= 3)
          v26 = v20;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
LABEL_70:
      if (v25 == 2)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v16, v17, v5);
        v35 = 2;
      }
      else
      {
        if (v25 != 1)
        {
          *v16 = *v17;
          *((_BYTE *)v16 + v20) = 0;
LABEL_79:
          v32 = v48;
          v33 = a3;
          goto LABEL_80;
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
        {
          memcpy(v16, v17, v18);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v16, v17, v5);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
        }
        v35 = 1;
      }
      *((_BYTE *)v16 + v20) = v35;
      goto LABEL_79;
    }
    if (v8)
      v31 = *(_QWORD *)(v6 + 64);
    else
      v31 = v7 + 1;
    if (v31 <= v7)
      v31 = *(_QWORD *)(v6 + 64);
    if (v31 <= 8)
      v20 = 8;
    else
      v20 = v31;
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *__dst = *__src;
      swift_release();
      *v12 = *v13;
      swift_release();
      v15 = v10 + 8;
      v16 = (_QWORD *)(((unint64_t)v12 + v10 + 8) & v11);
      v17 = (_QWORD *)(((unint64_t)v13 + v15) & v11);
      if (v8)
        v18 = v7;
      else
        v18 = v7 + 1;
      if (v18 <= v7)
        v19 = v7;
      else
        v19 = v18;
      if (v19 <= 8)
        v20 = 8;
      else
        v20 = v19;
      if (v16 == v17)
        goto LABEL_79;
      v21 = *((unsigned __int8 *)v16 + v20);
      if (v21 >= 3)
      {
        if (v20 <= 3)
          v22 = v20;
        else
          v22 = 4;
        __asm { BR              X12 }
      }
      if (v21 != 2)
      {
        if (v21 != 1)
        {
          swift_bridgeObjectRelease();
LABEL_65:
          v25 = *((unsigned __int8 *)v17 + v20);
          if (v25 >= 3)
          {
            if (v20 <= 3)
              v34 = v20;
            else
              v34 = 4;
            __asm { BR              X12 }
          }
          goto LABEL_70;
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5))
          goto LABEL_65;
      }
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v16, v5);
      goto LABEL_65;
    }
    swift_release();
    swift_release();
    v27 = ((unint64_t)v12 + v10 + 8) & v11;
    if (v8)
      v28 = v7;
    else
      v28 = v7 + 1;
    if (v28 <= v7)
      v28 = v7;
    if (v28 <= 8)
      v20 = 8;
    else
      v20 = v28;
    v29 = *(unsigned __int8 *)(v27 + v20);
    if (v29 >= 3)
    {
      if (v20 <= 3)
        v30 = v20;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 2)
      goto LABEL_57;
    if (v29 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v27, 1, v5))
LABEL_57:
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v27, v5);
  }
LABEL_59:
  v32 = v48;
  memcpy(__dst, __src, v20 + v48 + 1);
  v33 = a3;
LABEL_80:
  v36 = *(_QWORD *)(*(_QWORD *)(v33 + 24) - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v20 + v32 + v37 + 1;
  v39 = ((unint64_t)__dst + v38) & ~v37;
  v40 = ((unint64_t)__src + v38) & ~v37;
  (*(void (**)(unint64_t, unint64_t))(v36 + 40))(v39, v40);
  v41 = *(_QWORD *)(v36 + 64) + 7;
  v42 = v41 + v39;
  v43 = (_QWORD *)((v41 + v40) & 0xFFFFFFFFFFFFFFF8);
  v42 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v42 = *v43;
  v44 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_BYTE *)(v45 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_BYTE *)(v44 + 16) = v46;
  outlined consume of HoverCallback();
  return __dst;
}

uint64_t getEnumTagSinglePayload for List(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (*(_DWORD *)(v4 + 84))
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = v5 + 1;
  if (v9 <= v5)
    v9 = *(_QWORD *)(v4 + 64);
  if (v9 <= 8)
    v9 = 8;
  if (!a2)
    return 0;
  v10 = *(_DWORD *)(v4 + 80) & 0xF8;
  v11 = (unsigned __int16)(v10 + 23) & (unsigned __int16)~v10 & 0x1F8;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = v9 + v11 + v12 + 1;
  if (v8 >= a2)
  {
    if (v7 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(uint64_t))(v6 + 48))((v13 + a1) & ~v12);
    }
    else
    {
      v20 = *(_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFF8);
      if (v20 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      if ((v20 + 1) >= 2)
        return v20;
      else
        return 0;
    }
  }
  else
  {
    v14 = ((((*(_QWORD *)(v6 + 64) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
    v15 = (a2 - v8 + 255) >> (8 * v14);
    if (v14 < 4)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187320F24 + 4 * byte_187C24594[v18]))();
  }
}

void storeEnumTagSinglePayload for List(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFEu)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_DWORD *)(v5 + 84) == 0;
  v10 = (unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8;
  if (v9)
    v11 = v6 + 1;
  else
    v11 = v6;
  if (v11 > v6)
    v6 = v11;
  if (v6 <= 8)
    v6 = 8;
  v12 = ((((*(_QWORD *)(v7 + 64)
          + ((v6 + v10 + 1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  if (v8 >= a3)
  {
    v15 = 0u;
    if (v8 >= a2)
      goto LABEL_24;
  }
  else
  {
    if (v12 <= 3)
      v13 = ((a3 - v8 + 255) >> (8 * v12)) + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (v8 >= a2)
LABEL_24:
      __asm { BR              X14 }
  }
  if (v12 >= 4)
    v16 = ~v8 + a2;
  else
    v16 = (~(_BYTE)v8 + a2);
  bzero(a1, v12);
  if ((_DWORD)v12 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_187321140()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187321148(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187321150);
}

void sub_187321198()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1873211A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1873211A8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (a2)
  {
    if (a3 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(uint64_t))(v5 + 56))((v6 + v7) & v4);
    }
    else
    {
      if (a2 > 0x7FFFFFFE)
        JUMPOUT(0x1873211B4);
      *(_QWORD *)((v7 + 15) & 0xFFFFFFFFFFFFF8) = a2;
    }
  }
  return result;
}

void sub_18732120C()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_187321214()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_187321224()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_187321248(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t refreshed;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[3];

  v4 = a1[3];
  type metadata accessor for ResolvedList(255, *a1, a1[2], a4);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>, (uint64_t)&type metadata for AutomaticTextFieldLabelDisplayMode, (uint64_t)&protocol witness table for AutomaticTextFieldLabelDisplayMode, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextFieldLabelDisplayModeModifier);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v25[0] = &protocol witness table for ResolvedList<A>;
  v25[1] = &protocol witness table for TextFieldLabelDisplayModeModifier<A>;
  v7 = MEMORY[0x1E0CE2E70];
  v24[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v25);
  v24[1] = &protocol witness table for Fix_53164375;
  v17 = (ValueMetadata *)v6;
  v18 = MEMORY[0x18D75FFDC](v7, v6, v24);
  MEMORY[0x18D75FF88](255, &v17, MEMORY[0x1E0CE6F48], 0);
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
  v9 = type metadata accessor for ModifiedContent();
  refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v23[0] = v4;
  v23[1] = refreshed;
  v11 = MEMORY[0x18D75FFDC](v7, v8, v23);
  v12 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v22[0] = v11;
  v22[1] = v12;
  v13 = MEMORY[0x18D75FFDC](v7, v9, v22);
  v17 = (ValueMetadata *)v9;
  v18 = v13;
  MEMORY[0x18D75FF88](255, &v17, MEMORY[0x1E0CE6EC0], 0);
  v14 = type metadata accessor for ModifiedContent();
  v15 = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  v17 = (ValueMetadata *)v9;
  v18 = v13;
  v21[0] = swift_getOpaqueTypeConformance2();
  v21[1] = &protocol witness table for ResetContentMarginModifier;
  v16 = MEMORY[0x18D75FFDC](v7, v14, v21);
  v17 = &type metadata for ListStyleContent;
  v18 = v14;
  v19 = v15;
  v20 = v16;
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187321480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for NavigableListModifier(255, v2, v3, v5);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesContextMenuInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction, (uint64_t)&type metadata for ProvidesContextMenuInteraction);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesEditMenuInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction, (uint64_t)&type metadata for ProvidesEditMenuInteraction);
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for _ConditionalContent();
  v25 = v1;
  v26 = v16;
  v24[0] = swift_getOpaqueTypeConformance2();
  v24[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v23[0] = MEMORY[0x18D75FFDC](v0, v4, v24);
  v23[1] = &protocol witness table for NavigableListModifier<A>;
  v22[0] = MEMORY[0x18D75FFDC](v0, v6, v23);
  v22[1] = &protocol witness table for LazyContainerModifier;
  v21[0] = MEMORY[0x18D75FFDC](v0, v7, v22);
  v21[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v20[0] = MEMORY[0x18D75FFDC](v0, v8, v21);
  v20[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v13 = MEMORY[0x18D75FFDC](v0, v9, v20);
  v19[0] = v13;
  v19[1] = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  v14 = MEMORY[0x18D75FFDC](v0, v10, v19);
  v18[0] = v13;
  v18[1] = MEMORY[0x1E0CE1E88];
  v17[0] = v14;
  v17[1] = MEMORY[0x18D75FFDC](v0, v11, v18);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v12, v17);
}

_UNKNOWN **base witness table accessor for ViewModifier in Fix_53164375()
{
  return &protocol witness table for Fix_53164375;
}

uint64_t sub_18732169C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init<A>(_:sortUsing:content:)(a1, v2[9], v2[4], a2, v2[7], v2[8]);
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TableColumn<>.init<A>(_:content:));
}

uint64_t sub_187321700()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187321728()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TableColumn<>.init<A>(_:sortUsing:content:));
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(a1, v2[11], v2[5], a2, v2[7], v2[8], v2[9], v2[10]);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[10], v2[11], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9]);
}

uint64_t sub_1873217D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A>(_:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List<>.init<A>(_:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_187321814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in View.staticIf<A, B>(_:trueModifier:)(v1[8], v1[9], v1[4], a1, v1[7]);
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TableColumn<>.init(_:sortUsing:content:));
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1873218B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init(_:content:)(a1, v2[7], v2[3], v2[5], a2);
}

uint64_t sub_1873218F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:), a2);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), a2);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(a1, v3[10], v3[11], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7], v3[8], v3[9], a2);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(v1[10], v1[11], v1[5], a1, v1[7], v1[8], v1[9]);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:));
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init(_:sortUsing:content:)(a1, v2[9], v2[4], a2, v2[7]);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(a1, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a2, a3);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(v1[6], v1[7], v1[3], v1[5], a1);
}

unint64_t lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost;
  if (!lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost)
  {
    v1 = type metadata accessor for NavigationStateHost();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStateHost, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost);
  }
  return result;
}

uint64_t sub_187321AB0()
{
  return swift_deallocObject();
}

uint64_t View.listRowSeparatorTint(_:edges:)(uint64_t a1, char a2)
{
  return View.listRowSeparatorTint(_:edges:)(a1, a2);
}

{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = a2;
  swift_retain();
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t sub_187321AE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.listRowSeparatorTint(_:edges:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.listRowSeparatorTint(_:edges:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t View.listSectionSeparator(_:edges:)(char a1, char a2)
{
  return View.listRowSeparator(_:edges:)(a1, a2);
}

uint64_t sub_187321B48()
{
  return swift_deallocObject();
}

uint64_t View.listSectionSeparatorTint(_:edges:)(uint64_t a1, char a2)
{
  return View.listRowSeparatorTint(_:edges:)(a1, a2);
}

uint64_t closure #1 in View.listRowSeparatorTint(_:edges:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = result;
  if ((a3 & 1) != 0)
  {
    swift_retain();
    result = swift_release();
    *(_QWORD *)(v4 + 8) = a2;
  }
  if ((a3 & 2) != 0)
  {
    swift_retain();
    result = swift_release();
    *(_QWORD *)(v4 + 24) = a2;
  }
  return result;
}

uint64_t static HorizontalAlignment.listRowSeparatorLeading.getter()
{
  return static HorizontalAlignment.listRowSeparatorLeading.getter(&one-time initialization token for listRowSeparatorLeading, (uint64_t)&static HorizontalAlignment.listRowSeparatorLeading);
}

uint64_t static HorizontalAlignment.listRowSeparatorTrailing.getter()
{
  return static HorizontalAlignment.listRowSeparatorLeading.getter(&one-time initialization token for listRowSeparatorTrailing, (uint64_t)&static HorizontalAlignment.listRowSeparatorTrailing);
}

uint64_t static HorizontalAlignment.listRowSeparatorLeading.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

uint64_t sub_187321CF4()
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyx_AA26ListSeparatorConfigurationV03RowG0VQo_HOTm();
}

uint64_t sub_187321D08()
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyx_AA26ListSeparatorConfigurationV03RowG0VQo_HOTm();
}

uint64_t get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyx_AA26ListSeparatorConfigurationV03RowG0VQo_HOTm()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListSeparatorConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListSeparatorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration.SectionKey()
{
  return &type metadata for ListSeparatorConfiguration.SectionKey;
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingListSeparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingListSeparator(a1, a2, a3, MEMORY[0x1E0CE47C8]);
}

void protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance HorizontalAlignment.LeadingListSeparator(double a1, uint64_t a2, uint64_t a3)
{
  double v3;

  v3 = *(double *)a3;
  if (*(_BYTE *)(a3 + 8))
    v3 = INFINITY;
  if (v3 <= a1)
    a1 = v3;
  *(double *)a3 = a1;
  *(_BYTE *)(a3 + 8) = 0;
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.TrailingListSeparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingListSeparator(a1, a2, a3, MEMORY[0x1E0CE47E0]);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingListSeparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;

  v4 = a4();
  return MEMORY[0x18D757CA8](v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListSeparatorConfiguration.Appearance(uint64_t a1, uint64_t a2)
{
  return specialized static ListSeparatorConfiguration.Appearance.== infix(_:_:)(*(_BYTE *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  return specialized static ListSeparatorConfiguration.== infix(_:_:)(*(_BYTE *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ListSeparatorConfiguration.SectionKey(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t specialized static ListSeparatorConfiguration.Appearance.== infix(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  char v4;

  if (a1 != a3)
    return 0;
  if (a2)
  {
    if (a4)
    {
      if (a2 == a4)
        return 1;
      swift_retain();
      swift_retain();
      v4 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      if ((v4 & 1) != 0)
        return 1;
    }
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

uint64_t specialized static ListSeparatorConfiguration.== infix(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  char v12;
  char v14;

  if (a1 != a5)
    return 0;
  if (a2)
  {
    if (!a6)
      return 0;
    if (a2 != a6)
    {
      swift_retain();
      swift_retain();
      v12 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      if ((v12 & 1) == 0)
        return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a3 == a7)
  {
    if (a4)
    {
      if (a8)
      {
        if (a4 == a8)
          return 1;
        swift_retain();
        swift_retain();
        v14 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        swift_release();
        if ((v14 & 1) != 0)
          return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
  }
  return 0;
}

void *type metadata accessor for HorizontalAlignment.LeadingListSeparator()
{
  return &unk_1E1ACE2A8;
}

void *type metadata accessor for HorizontalAlignment.TrailingListSeparator()
{
  return &unk_1E1ACE2E0;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration.Appearance()
{
  return &type metadata for ListSeparatorConfiguration.Appearance;
}

_UNKNOWN **base witness table accessor for AlignmentID in HorizontalAlignment.TrailingListSeparator()
{
  return &protocol witness table for HorizontalAlignment.TrailingListSeparator;
}

_UNKNOWN **base witness table accessor for AlignmentID in HorizontalAlignment.LeadingListSeparator()
{
  return &protocol witness table for HorizontalAlignment.LeadingListSeparator;
}

uint64_t type metadata completion function for EditMenuBridge()
{
  return swift_initClassMetadata2();
}

uint64_t EditMenuBridge.update(environent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 8);
  v4 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 16);
  v5 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 24);
  v6 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 32);
  v7 = *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  v9 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  type metadata accessor for EnvironmentPropertyKey<ActiveEditMenuKey>();
  outlined copy of ActiveEditMenu?(v9, v3, v4, v5, v6, v7);
  outlined copy of ActiveEditMenu?(v9, v3, v4, v5, v6, v7);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of ActiveEditMenu?(v9, v3, v4, v5, v6, v7);
}

Swift::Void __swiftcall EditMenuBridge.transformDidChange()()
{
  uint64_t v0;
  void *v1;

  if (*(_QWORD *)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40) != 1)
  {
    v1 = *(void **)(v0 + direct field offset for EditMenuBridge.interaction);
    if (v1)
      objc_msgSend(v1, sel_updateVisibleMenuPositionAnimated_, 1);
  }
}

void EditMenuBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  int v8;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  char v20;
  _QWORD v21[6];
  int v22;
  _OWORD v23[3];
  _BYTE v24[48];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v3 = *a1;
  v4 = v1 + direct field offset for EditMenuBridge.host;
  v5 = MEMORY[0x18D760234](v1 + direct field offset for EditMenuBridge.host);
  if (!v5)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = (void *)v5;
  ObjectType = swift_getObjectType();

  if (((*(uint64_t (**)(void))(ObjectType + 1784))() & 1) != 0)
  {
    *(_QWORD *)&v28[0] = v3;
    PreferenceList.subscript.getter();
    if (v22 != -1)
    {
      v8 = *(_DWORD *)(v2 + direct field offset for EditMenuBridge.editMenuPresentationSeed);
      if (v8 != -1 && v22 == v8)
        goto LABEL_21;
    }
    outlined init with take of Image.Resolved?((uint64_t)v21, (uint64_t)v24, &lazy cache variable for type metadata for EditMenuPresentation?, (uint64_t)&type metadata for EditMenuPresentation);
    outlined init with take of Image.Resolved?((uint64_t)v24, (uint64_t)&v25, &lazy cache variable for type metadata for EditMenuPresentation?, (uint64_t)&type metadata for EditMenuPresentation);
    if (*((_QWORD *)&v26 + 1))
    {
      v28[1] = v26;
      v29 = v27;
      v28[0] = v25;
      v23[0] = v25;
      v23[1] = v26;
      v23[2] = v27;
      v30 = v26;
      v19 = v26;
      v20 = v27;
      outlined release of PreferenceList.Value<EditMenuPresentation?>(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of EditMenuPresentation?);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v31);
      if (v31 == 1)
      {
        EditMenuBridge.presentMenu(_:)((unsigned int *)v23);
        outlined init with take of EditMenuPresentation.Kind((_QWORD *)v28 + 1, &v31);
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v31);
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
        swift_release();
        *(_QWORD *)&v19 = *((_QWORD *)&v29 + 1);
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v19);
LABEL_20:
        *(_DWORD *)(v2 + direct field offset for EditMenuBridge.editMenuPresentationSeed) = v22;
LABEL_21:
        outlined release of PreferenceList.Value<EditMenuPresentation?>(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of EditMenuPresentation?);
        return;
      }
      outlined init with take of EditMenuPresentation.Kind((_QWORD *)v28 + 1, &v31);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v31);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
      swift_release();
      *(_QWORD *)&v19 = *((_QWORD *)&v29 + 1);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v19);
    }
    v13 = *(void **)(v2 + direct field offset for EditMenuBridge.interaction);
    if (!v13)
      goto LABEL_20;
    objc_msgSend(v13, sel_dismissMenu);
    v14 = direct field offset for EditMenuBridge.interaction;
    v15 = *(_QWORD *)(v2 + direct field offset for EditMenuBridge.interaction);
    if (!v15)
      goto LABEL_20;
    v16 = (void *)MEMORY[0x18D760234](v4);
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v16, sel_removeInteraction_, v15);

      v18 = *(void **)(v2 + v14);
      *(_QWORD *)(v2 + v14) = 0;

      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    return;
  }
  *(_QWORD *)&v28[0] = v3;
  PreferenceList.subscript.getter();
  v10 = (void *)MEMORY[0x18D760234](v2 + direct field offset for EditMenuBridge.listCell);
  if (v10)
  {
    v11 = v10;
    if (LOBYTE(v21[0]))
    {
      v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37A0]), sel_initWithDelegate_, v10);
      objc_msgSend(v11, sel_addInteraction_, v12);

    }
    else
    {

    }
  }
}

void EditMenuBridge.presentedMenu.didset(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  _BYTE v22[40];
  uint64_t v23;

  v19 = *v1;
  v18 = *MEMORY[0x1E0DEEDD8];
  outlined init with take of Image.Resolved?((uint64_t)a1, (uint64_t)v21, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  v20 = v21[0];
  v16 = v21[2];
  v17 = v21[1];
  v14 = v21[4];
  v15 = v21[3];
  v13 = (void *)v21[5];
  v3 = *(uint64_t *)((char *)v1 + direct field offset for EditMenuBridge.presentedMenu);
  v12 = *(uint64_t *)((char *)v1 + direct field offset for EditMenuBridge.presentedMenu + 8);
  v4 = *(uint64_t *)((char *)v1 + direct field offset for EditMenuBridge.presentedMenu + 16);
  v5 = *(uint64_t *)((char *)v1 + direct field offset for EditMenuBridge.presentedMenu + 24);
  v6 = *(uint64_t *)((char *)v1 + direct field offset for EditMenuBridge.presentedMenu + 32);
  v7 = *(void **)((char *)v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  outlined init with take of Image.Resolved?((uint64_t)a1, (uint64_t)v22, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  if (v23 == 1)
  {
    if (v7 == (void *)1)
      return;
  }
  else if (v7 != (void *)1)
  {
    if ((_DWORD)v20 == (_DWORD)v3)
      return;
    goto LABEL_6;
  }
  outlined retain of ActiveEditMenu?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ActiveEditMenu?);
  outlined copy of ActiveEditMenu?(v3, v12, v4, v5, v6, v7);
  outlined consume of ActiveEditMenu?(v20, v17, v16, v15, v14, v13);
  outlined consume of ActiveEditMenu?(v3, v12, v4, v5, v6, v7);
LABEL_6:
  v8 = MEMORY[0x18D760234]((char *)v1 + direct field offset for EditMenuBridge.host);
  if (v8)
  {
    v10 = (void *)v8;
    v11 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v18 & v19) + 0x50), *(_QWORD *)((v18 & v19) + 0x58), v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v11);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  else
  {
    __break(1u);
  }
}

_QWORD *EditMenuBridge.presentedMenu.setter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[7];

  v3 = (uint64_t *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  outlined init with take of Image.Resolved?(v1 + direct field offset for EditMenuBridge.presentedMenu, (uint64_t)v11, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v9 = v3[4];
  v8 = (void *)v3[5];
  outlined init with take of Image.Resolved?((uint64_t)a1, (uint64_t)v3, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  outlined retain of ActiveEditMenu?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ActiveEditMenu?);
  outlined retain of ActiveEditMenu?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ActiveEditMenu?);
  outlined consume of ActiveEditMenu?(v4, v5, v6, v7, v9, v8);
  EditMenuBridge.presentedMenu.didset(v11);
  outlined retain of ActiveEditMenu?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ActiveEditMenu?);
  return outlined retain of ActiveEditMenu?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ActiveEditMenu?);
}

void EditMenuBridge.presentMenu(_:)(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  CGPoint origin;
  CGSize size;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  double v33;
  CGFloat Height;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  CGRect v41;
  char v42;
  uint64_t v43;
  CGRect v44;
  uint64_t v45;
  uint64_t v46;
  CGRect v47;
  CGRect v48;

  v3 = *a1;
  v40 = *(_OWORD *)(a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((_BYTE *)a1 + 32);
  v6 = *((_QWORD *)a1 + 5);
  v7 = direct field offset for EditMenuBridge.interaction;
  v8 = *(void **)(v1 + direct field offset for EditMenuBridge.interaction);
  if (v8)
  {
    v9 = *(id *)(v1 + direct field offset for EditMenuBridge.interaction);
  }
  else
  {
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37A0]), sel_initWithDelegate_, v1);
    v11 = MEMORY[0x18D760234](v1 + direct field offset for EditMenuBridge.host);
    if (!v11)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
    v12 = (void *)v11;
    v9 = v10;
    objc_msgSend(v12, sel_addInteraction_, v9);

    v13 = *(void **)(v1 + v7);
    *(_QWORD *)(v1 + v7) = v9;

    v8 = 0;
  }
  v14 = v8;
  AGGraphClearUpdate();
  closure #1 in EditMenuBridge.presentMenu(_:)(v1);
  AGGraphSetUpdate();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  Anchor.convert(to:)();
  swift_release();
  if ((v42 & 1) != 0)
  {
LABEL_6:

    return;
  }
  v38 = v4;
  v39 = v3;
  origin = v41.origin;
  size = v41.size;
  v17 = *((_QWORD *)a1 + 1);
  v18 = specialized EditMenuBridge.attributedString(from:in:)(v17);
  v19 = (void *)v18;
  v20 = (uint64_t *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  v21 = *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v21 != (void *)1)
  {
    v29 = v20[6];
    v30 = *v20;
    outlined copy of ActiveEditMenu?(*v20, v20[1], v20[2], v20[3], v20[4], *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40));
    swift_retain();
    v31 = v19;

    v32 = v31;
    v43 = v30;
    v44 = v41;
    v45 = (uint64_t)v19;
    v46 = v29;
    EditMenuBridge.presentedMenu.setter(&v43);
    objc_msgSend(v9, sel_reloadVisibleMenu);
    swift_release();

    return;
  }
  v43 = *a1;
  v44 = v41;
  v45 = v18;
  v46 = v17;
  swift_retain();
  v22 = v19;
  EditMenuBridge.presentedMenu.setter(&v43);
  if (v17)
  {
    v23 = v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation;
    v24 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation);
    v25 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 8);
    v26 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 16);
    v27 = *(_QWORD *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24);
    *(_QWORD *)v23 = v39;
    *(_OWORD *)(v23 + 8) = v40;
    *(_QWORD *)(v23 + 24) = v38;
    *(_QWORD *)(v23 + 32) = v5 & 1;
    *(_QWORD *)(v23 + 40) = v6;
    outlined consume of EditMenuPresentation?(v24, v25, v26, v27);
    if (v20[5] != 1)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      v41.origin.x = *((CGFloat *)a1 + 2);
      swift_retain();
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v41);
      lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
      swift_retain();
      swift_retain();
      AnyHashable.init<A>(_:)();
      v47.origin = origin;
      v47.size = size;
      CGRectGetWidth(v47);
      v48.origin = origin;
      v48.size = size;
      CGRectGetHeight(v48);
      v28 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      objc_msgSend(v9, sel_presentEditMenuWithConfiguration_, v28);

      return;
    }
    goto LABEL_18;
  }
  v33 = CGRectGetWidth(v41) * 0.5 + v41.origin.x;
  Height = CGRectGetHeight(v41);
  v35 = EditMenuBridge.editMenuResponder(at:)(v33, Height * 0.5 + v41.origin.y);
  if (v35)
  {
    v36 = EditMenuBridge.configurationFromResponder(_:)((uint64_t)v35);
    if (!v36)
    {
      swift_release();

      goto LABEL_6;
    }
    v37 = (void *)v36;
    objc_msgSend(v9, sel_presentEditMenuWithConfiguration_, v36);

    swift_release();
  }
  else
  {

  }
}

uint64_t EditMenuBridge.outermostResponder()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  result = MEMORY[0x18D760234]((char *)v0 + direct field offset for EditMenuBridge.host);
  if (result)
  {
    v5 = (void *)result;
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    v7 = ViewRendererHost.responderNode.getter();

    if (v7)
    {
      MEMORY[0x1E0C80A78](v8, v9);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in EditMenuBridge.outermostResponder()@<X0>(uint64_t *a1@<X1>, char *a2@<X8>)
{
  uint64_t result;
  char v5;

  type metadata accessor for EditMenuResponder();
  result = swift_dynamicCastClass();
  if (result)
  {
    *a1 = result;
    swift_retain();
    result = swift_release();
    v5 = 2;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t EditMenuBridge.configurationFromResponder(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40) == 1)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    type metadata accessor for UIKitEditMenuConfiguration();
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    AnyHashable.init<A>(_:)();
    v3 = UIEditMenuConfiguration.init(identifier:sourcePoint:)();
    *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder) = v2;
    swift_release();
    swift_retain();
    return v3;
  }
  return result;
}

void *EditMenuBridge.editMenuResponder(at:)(double a1, double a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *result;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *v2;
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = (char *)v2 + direct field offset for EditMenuBridge.host;
  result = (void *)MEMORY[0x18D760234]((char *)v2 + direct field offset for EditMenuBridge.host);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = result;
  objc_msgSend(result, sel_convertPoint_toView_, 0, a1, a2);

  result = (void *)MEMORY[0x18D760234](v7);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v6 & v5) + 0x50), *(_QWORD *)((v6 & v5) + 0x58), v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v12);
  v13 = ViewRendererHost.responderNode.getter();

  result = 0;
  if (v13)
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      v14 = ViewResponder.hitTest(globalPoint:radius:options:)();
      swift_release();
      result = 0;
      if (v14)
      {
        type metadata accessor for EditMenuResponder();
        ResponderNode.firstAncestor<A>(ofType:)();
        swift_release();
        return 0;
      }
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in EditMenuBridge.presentMenu(_:)(uint64_t a1)
{
  uint64_t result;
  void *v2;

  result = MEMORY[0x18D760234](a1 + direct field offset for EditMenuBridge.host);
  if (result)
  {
    v2 = (void *)result;
    swift_retain();

    ViewGraph.transform.getter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall EditMenuBridge.hostRemovedFromWindow()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  _QWORD v7[6];

  v1 = (void *)objc_opt_self();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in EditMenuBridge.hostRemovedFromWindow();
  *(_QWORD *)(v3 + 24) = v2;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_22;
  v4 = _Block_copy(v7);
  v5 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_performWithoutAnimation_, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t @objc EditMenuBridge.editMenuInteraction(_:targetRectFor:)()
{
  return specialized EditMenuBridge.editMenuInteraction(_:targetRectFor:)();
}

void closure #1 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  Class isa;

  v3 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v4 + 32) = a2;
  specialized Array._endMutation()();
  type metadata accessor for NSItemProviderWriting();
  v5 = a2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setObjects_, isa);

}

void EditMenuBridge.share()()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  double v16;
  Class v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (uint64_t *)(v0 + direct field offset for EditMenuBridge.presentedMenu);
  v2 = *(void **)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v2 != (void *)1 && v2 != 0)
  {
    v4 = *v1;
    v23 = v1[1];
    v5 = v1[2];
    v6 = v1[3];
    v7 = v1[4];
    v8 = v1[6];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v9 + 56) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    *(_QWORD *)(v9 + 32) = v2;
    v10 = objc_allocWithZone(MEMORY[0x1E0CEA2D8]);
    v21 = v2;
    v22 = v8;
    outlined copy of ActiveEditMenu?(v4, v23, v5, v6, v7, v2);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v10, sel_initWithActivityItems_applicationActivities_, isa, 0, v21, v4, v22);

    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UIActivityType>, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
    v14 = (void *)*MEMORY[0x1E0CEB240];
    *(_QWORD *)(v13 + 32) = *MEMORY[0x1E0CEB240];
    type metadata accessor for UIActivityType(0);
    v15 = v14;
    v16 = *(double *)&v7;
    v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setExcludedActivityTypes_, v17);

    v18 = objc_msgSend(v12, sel_popoverPresentationController);
    if (v18)
    {
      v19 = v18;
      v20 = (void *)MEMORY[0x18D760234](v0 + direct field offset for EditMenuBridge.host);
      objc_msgSend(v19, sel_setSourceView_, v20);

      objc_msgSend(v19, sel_setSourceRect_, *(double *)&v23, *(double *)&v5, *(double *)&v6, v16);
    }
    if (MEMORY[0x18D760234](v0 + direct field offset for EditMenuBridge.host))
      _UIHostingView.viewController.getter();
    __break(1u);
  }
}

void closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (v7)
  {
    v8 = (void *)v7;
    a5();

  }
}

void EditMenuBridge.lookup()()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;

  v1 = (uint64_t *)(v0 + direct field offset for EditMenuBridge.presentedMenu);
  v2 = *(void **)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v2 != (void *)1 && v2 != 0)
  {
    v4 = *v1;
    v5 = v1[1];
    v6 = v1[2];
    v7 = v1[3];
    v8 = v1[4];
    v9 = v1[6];
    v10 = v2;
    outlined copy of ActiveEditMenu?(v4, v5, v6, v7, v8, v2);
    v11 = objc_msgSend(v10, sel_string, v10, v4, v9);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    v15 = objc_allocWithZone(MEMORY[0x1E0DC3BA0]);
    v16 = (void *)MEMORY[0x18D75CC88](v12, v14);
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v15, sel_initWithTerm_, v16);

    v18 = objc_msgSend(v17, sel_popoverPresentationController);
    if (v18)
    {
      v19 = v18;
      v20 = (void *)MEMORY[0x18D760234](v0 + direct field offset for EditMenuBridge.host);
      objc_msgSend(v19, sel_setSourceView_, v20);

      objc_msgSend(v19, sel_setSourceRect_, *(double *)&v5, *(double *)&v6, *(double *)&v7, *(double *)&v8);
    }
    if (MEMORY[0x18D760234](v0 + direct field offset for EditMenuBridge.host))
      _UIHostingView.viewController.getter();
    __break(1u);
  }
}

id @objc EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = (void *)specialized EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(v7);

  return v9;
}

uint64_t closure #1 in EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(uint64_t result)
{
  if (*(_QWORD *)(result + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void @objc EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  @objc EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(a1, a2, a3, a4, a5, (void (*)(id))specialized EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:));
}

uint64_t closure #1 in EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation;
  if (*(_QWORD *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    v2 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v2 = 0;
  }
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  return outlined consume of EditMenuPresentation?(v3, v4, v5, v2);
}

void @objc EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  @objc EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(a1, a2, a3, a4, a5, (void (*)(id))specialized EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:));
}

void @objc EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id))
{
  id v9;
  id v10;
  id v11;

  v9 = a3;
  v10 = a4;
  swift_unknownObjectRetain();
  v11 = a1;
  a6(v10);

  swift_unknownObjectRelease();
}

id EditMenuBridge.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for EditMenuBridge.interaction] = 0;
  *(_DWORD *)&v0[direct field offset for EditMenuBridge.editMenuPresentationSeed] = 0;
  v2 = &v0[direct field offset for EditMenuBridge.lastEditMenuPresentation];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v3 = &v0[direct field offset for EditMenuBridge.presentedMenu];
  *((_QWORD *)v3 + 4) = 0;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *(_OWORD *)(v3 + 40) = xmmword_187BFE310;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id @objc EditMenuBridge.init()()
{
  return EditMenuBridge.init()();
}

uint64_t @objc EditMenuBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  outlined consume of EditMenuPresentation?(*(_QWORD *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 8), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 16), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24));
  return outlined consume of ActiveEditMenu?(*(_QWORD *)(a1 + direct field offset for EditMenuBridge.presentedMenu), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 8), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 16), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 24), *(_QWORD *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 32), *(void **)(a1 + direct field offset for EditMenuBridge.presentedMenu + 40));
}

uint64_t type metadata accessor for EditMenuBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditMenuBridge);
}

uint64_t type metadata accessor for UIKitEditMenuConfiguration()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in EditMenuBridge.outermostResponder()@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in EditMenuBridge.outermostResponder()(*(uint64_t **)(v1 + 16), a1);
}

uint64_t specialized EditMenuBridge.addPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized EditMenuBridge.attributedString(from:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  void *v9;
  void *v10;
  uint64_t v11;
  _OWORD v12[2];

  v3 = type metadata accessor for ResolvableStringResolutionContext();
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  result = MEMORY[0x18D760234](v1 + direct field offset for EditMenuBridge.host, v5);
  if (result)
  {
    v9 = (void *)result;
    swift_retain();
    swift_retain();

    GraphHost.environment.getter();
    swift_release();
    v12[0] = v12[1];
    ResolvableStringResolutionContext.init(environment:maximumWidth:)();
    v10 = (void *)ResolvedStyledText.resolvedContent(in:)();
    outlined destroy of ResolvableStringResolutionContext((uint64_t)v7);
    if (v10)
    {
      dispatch thunk of ResolvedStyledText.drawingScale(size:)();
      v11 = NSAttributedString.scaled(by:)();

      swift_release();
      return v11;
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t specialized EditMenuBridge.editMenuInteraction(_:targetRectFor:)()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40) == 1)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UIMenu *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  Swift::OpaquePointer v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  UIMenuElementSize preferredElementSize;
  UIImage_optional v59;

  v2 = 0;
  v3 = (uint64_t *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  v4 = *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v4 != (void *)1)
  {
    v6 = *v3;
    v54 = v3[1];
    v7 = v3[2];
    v8 = v3[3];
    v9 = v3[4];
    v10 = v3[6];
    preferredElementSize = MEMORY[0x1E0DEE9D8];
    type metadata accessor for UIKitEditMenuConfiguration();
    v11 = swift_dynamicCastClass();
    if (v11)
    {
      if (*(_QWORD *)(v11 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
      {
        v12 = a1;
        swift_retain();
        v13 = v6;
        v14 = v54;
        v15 = v9;
        outlined copy of ActiveEditMenu?(v6, v54, v7, v8, v9, v4);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        static Update.ensure<A>(_:)();
        if (v55)
          v16 = v55;
        else
          v16 = MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v16 + 16))
        {
          v52 = v9;
          v53 = v8;
          v57[0] = MEMORY[0x1E0DEE9D8];
          v17 = (UIMenu *)MEMORY[0x1E0DEE9D8];
          specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v18 = type metadata accessor for MenuVisitor.MenuStackGroup();
          v19 = *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80);
          v20 = (v19 + 32) & ~v19;
          v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_187BF9830;
          v22 = v21 + v20;
          if (one-time initialization token for empty != -1)
            swift_once();
          v23 = __swift_project_value_buffer(v18, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
          outlined init with copy of MenuVisitor.MenuStackGroup(v23, v22);
          MenuVisitor.visit(_:uniqueNames:)(v16, v57);
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          preferredElementSize = (UIMenuElementSize)v17;
          v45 = v7;
          v14 = v54;
          v15 = v52;
          v8 = v53;
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease();
          preferredElementSize = MEMORY[0x1E0DEE9D8];
          v45 = v7;
        }
        goto LABEL_24;
      }
      swift_retain();
      v26 = v4;
      preferredElementSize = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      if (v10)
      {
        v24 = v1;
        if (v4)
        {
          swift_retain();
          v25 = v4;
          v50 = v25;
        }
        else
        {
          v28 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
          swift_retain();
          v50 = objc_msgSend(v28, sel_init);
          v25 = 0;
        }
        v29 = v25;
        v30 = static Text.System.uiCopy.getter();
        v32 = v31;
        v34 = v33;
        v51 = v24 + direct field offset for EditMenuBridge.host;
        v35 = MEMORY[0x18D760234]();
        if (v35)
        {
          v36 = (void *)v35;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
          swift_retain();

          GraphHost.environment.getter();
          swift_release();
          v57[0] = v55;
          v57[1] = v56;
          Text.resolveString(in:with:idiom:)();
          outlined consume of Text.Storage(v30, v32, v34 & 1);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          *(_QWORD *)(swift_allocObject() + 16) = v50;
          v50;
          v37 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
          MEMORY[0x18D75CF58](v37, v38, v39, v40, v41, v42, v43, v44, 0);
          if (*(_QWORD *)((preferredElementSize & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((preferredElementSize & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (MEMORY[0x18D760234](v51))
            _UIHostingView.viewController.getter();
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        JUMPOUT(0x187324948);
      }
      v27 = v4;
    }
    v13 = v6;
    v15 = v9;
    v45 = v7;
    v14 = v54;
LABEL_24:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v46._countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    v59.value.super.isa = 0;
    v59.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)((UIMenu *)preferredElementSize, v46, (Swift::String_optional)0, v59, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v49);
    v2 = v47;
    outlined consume of ActiveEditMenu?(v13, v14, v45, v8, v15, v4);
  }
  return v2;
}

uint64_t specialized EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;

  type metadata accessor for UIKitEditMenuConfiguration();
  result = swift_dynamicCastClass();
  if (result)
  {
    if (!*(_QWORD *)(result + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
      return result;
    v4 = swift_allocObject();
    swift_weakInit();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    *(_BYTE *)(v5 + 24) = 1;
    v6 = a1;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();

    swift_release();
  }
  else
  {
    *(_QWORD *)(swift_allocObject() + 16) = v1;
    v7 = v1;
    static Update.enqueueAction(_:)();
  }
  return swift_release();
}

_QWORD *specialized EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  _OWORD v9[2];
  uint64_t v10;
  __int128 v11;

  type metadata accessor for UIKitEditMenuConfiguration();
  v3 = swift_dynamicCastClass();
  if (!v3)
  {
    *(_QWORD *)(swift_allocObject() + 16) = v1;
    v7 = v1;
    static Update.enqueueAction(_:)();
    goto LABEL_5;
  }
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
  {
    v4 = swift_allocObject();
    swift_weakInit();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    *(_BYTE *)(v5 + 24) = 0;
    v6 = a1;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();

    swift_release();
LABEL_5:
    swift_release();
  }
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v11 = xmmword_187BFE310;
  return EditMenuBridge.presentedMenu.setter(v9);
}

uint64_t sub_187324B98()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)()
{
  uint64_t v0;

  return closure #1 in EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_187324BC4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditMenuResponder.setPresentationState(to:)()
{
  return closure #1 in EditMenuResponder.setPresentationState(to:)();
}

id outlined copy of ActiveEditMenu?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id result;

  if (a6 != (void *)1)
  {
    swift_retain();
    return a6;
  }
  return result;
}

uint64_t outlined consume of ActiveEditMenu?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t result;

  if (a6 != (void *)1)
  {

    return swift_release();
  }
  return result;
}

_QWORD *outlined retain of ActiveEditMenu?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t outlined consume of EditMenuPresentation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)()
{
  uint64_t v0;

  return closure #1 in EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_187324CE8()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_187324D14()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187324D38()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t *v1;

  closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[4], v1[2], v1[3], EditMenuBridge.share());
}

void partial apply for closure #3 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t *v1;

  closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[4], v1[2], v1[3], EditMenuBridge.lookup());
}

uint64_t outlined init with copy of MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSItemProviderWriting()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSItemProviderWriting;
  if (!lazy cache variable for type metadata for NSItemProviderWriting)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSItemProviderWriting);
  }
  return result;
}

id partial apply for closure #1 in EditMenuBridge.hostRemovedFromWindow()()
{
  uint64_t v0;
  id result;

  result = *(id *)(*(_QWORD *)(v0 + 16) + direct field offset for EditMenuBridge.interaction);
  if (result)
    return objc_msgSend(result, sel_dismissMenu);
  return result;
}

uint64_t sub_187324E60()
{
  return swift_deallocObject();
}

void type metadata accessor for EnvironmentPropertyKey<ActiveEditMenuKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveEditMenuKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveEditMenuKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ActiveEditMenuKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

_QWORD *outlined release of PreferenceList.Value<EditMenuPresentation?>(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t outlined copy of EditMenuPresentation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

_QWORD *outlined init with take of EditMenuPresentation.Kind(_QWORD *a1, _QWORD *a2)
{
  __swift_memcpy8_8(a2, a1);
  return a2;
}

uint64_t outlined destroy of ResolvableStringResolutionContext(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.onPreferenceChange<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v10 = type metadata accessor for _PreferenceActionModifier(0, a5, a7, a8);
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a4, v10, a6);
  return swift_release();
}

uint64_t key path getter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a3 + a2;
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  *a4 = thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> ()partial apply;
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  swift_retain();
  result = swift_release();
  *a2 = thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> ()partial apply;
  a2[1] = v9;
  return result;
}

uint64_t _PreferenceActionModifier.action.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _PreferenceActionModifier.action.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_PreferenceActionModifier.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t implicit closure #1 in PreferenceBinder.updateValue()()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x8000000187BDC840;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in _PreferenceActionModifier<A>()
{
  return &protocol witness table for _PreferenceActionModifier<A>;
}

uint64_t sub_1873252BC()
{
  return 24;
}

__n128 sub_1873252C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1873252DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[2];
  type metadata accessor for _PreferenceActionModifier(255, a1[1], a1[3], a1[4]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _PreferenceActionModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for PreferenceBinder(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  void *v23;
  const void *v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 32) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v16 = *v17;
    v18 = (_QWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (uint64_t *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = *v19;
    *(_QWORD *)((char *)v18 + 5) = *(uint64_t *)((char *)v19 + 5);
    *v18 = v20;
    v21 = (_DWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFFCLL);
    v22 = (_DWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = (void *)(((unint64_t)v21 + v7 + 4) & ~v7);
    v24 = (const void *)(((unint64_t)v22 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v24, 1, AssociatedTypeWitness))
    {
      memcpy(v23, v24, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v23, v24, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v23, 0, 1, v13);
    }
  }
  return a1;
}

_DWORD *assignWithCopy for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(v8 + 12);
  v9 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)(((unint64_t)v9 + v13 + 4) & ~v13);
  v15 = (void *)(((unint64_t)v10 + v13 + 4) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v17 = v16(v14, 1, AssociatedTypeWitness);
  v18 = v16(v15, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v19);
  return a1;
}

_DWORD *initializeWithTake for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  size_t v17;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_QWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (uint64_t *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = *v8;
  *(_QWORD *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *v7 = v9;
  v10 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (void *)(((unint64_t)v10 + v14 + 4) & ~v14);
  v16 = (const void *)(((unint64_t)v11 + v14 + 4) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v13 + 84))
      v17 = *(_QWORD *)(v13 + 64);
    else
      v17 = *(_QWORD *)(v13 + 64) + 1;
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithTake for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(v8 + 12);
  v9 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)(((unint64_t)v9 + v13 + 4) & ~v13);
  v15 = (void *)(((unint64_t)v10 + v13 + 4) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v17 = v16(v14, 1, AssociatedTypeWitness);
  v18 = v16(v15, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v14, v15, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v12 + 84))
    v19 = *(_QWORD *)(v12 + 64);
  else
    v19 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreferenceBinder(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v19;
  int v20;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (a2 > v7)
  {
    v10 = v8 + ((v9 + 32) & ~v9);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_13;
    v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v13 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v13 >= 2)
    {
LABEL_13:
      v12 = *(unsigned __int8 *)(a1 + v10);
      if (!*(_BYTE *)(a1 + v10))
        goto LABEL_29;
LABEL_20:
      v14 = (v12 - 1) << v11;
      if (v10 > 3)
        v14 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v15 = v10;
        else
          v15 = 4;
        __asm { BR              X12 }
      }
      v20 = v7 + v14;
      return (v20 + 1);
    }
  }
LABEL_29:
  v16 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v6 <= 0xFE)
  {
    v17 = *(unsigned __int8 *)(v16 + 12);
    if (v17 < 2)
      return 0;
    v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v16 + v9 + 20) & ~v9);
  if (v19 >= 2)
    return v19 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for PreferenceBinder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = ((v11 + 32) & ~(_DWORD)v11) + v12;
  if (a3 > v10)
  {
    if (v13 > 3)
    {
      v6 = 1u;
      if (v10 >= a2)
LABEL_25:
        __asm { BR              X14 }
LABEL_18:
      v15 = ~v10 + a2;
      if (v13 < 4)
      {
        if (v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, ((v11 + 32) & ~v11) + v12);
          if (v13 == 3)
          {
            *(_WORD *)a1 = v16;
            a1[2] = BYTE2(v16);
          }
          else if (v13 == 2)
          {
            *(_WORD *)a1 = v16;
          }
          else
          {
            *a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, ((v11 + 32) & ~v11) + v12);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v10 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v10 >= a2)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v10 >= a2)
    goto LABEL_25;
  goto LABEL_18;
}

void sub_187325D50()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_187325D58()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_187325D78()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_187325D88()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_187325D90()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t partial apply for implicit closure #1 in PreferenceBinder.updateValue()()
{
  return implicit closure #1 in PreferenceBinder.updateValue()();
}

uint64_t sub_187325DA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187325DCC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t specialized PreferenceBinder.modifier.getter(uint64_t *a1)
{
  type metadata accessor for _PreferenceActionModifier(0, a1[2], a1[3], a1[4]);
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t static ToolbarContent.makeViewList<A>(placement:content:inputs:)()
{
  uint64_t v0;
  _BYTE v2[72];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  if ((~v3 & 0xC) != 0)
    v3 |= 0xCuLL;
  type metadata accessor for SubscriptionLifetime<ObservableObjectPublisher>(0, &lazy cache variable for type metadata for SubscriptionLifetime<ObservableObjectPublisher>, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x1E0CE4E50]);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  SubscriptionLifetime.init()();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for SubscriptionLifetime<ObservableObjectPublisher>(0, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x1E0CE6620]);
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  AGCreateWeakAttribute();
  AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _GraphInputs.environment.setter();
  static View.makeDebuggableViewList(view:inputs:)();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v0 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

id ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)@<X0>(int a1@<W0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v7;
  int OffsetAttribute2;
  int v9;
  id result;
  id v11;
  unsigned int v12;
  uint64_t v15;

  v15 = *(_QWORD *)(a3 + 64);
  v7 = *(_DWORD *)(a3 + 72);
  closure #1 in ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)(1, a4, a5, a3);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v9 = _GraphInputs.phase.getter();
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v11 = result;
    v12 = *MEMORY[0x1E0CFED28];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = (id)swift_release();
    *(_DWORD *)a6 = a1;
    *(_DWORD *)(a6 + 4) = OffsetAttribute2;
    *(_DWORD *)(a6 + 8) = a2;
    *(_DWORD *)(a6 + 12) = v7;
    *(_DWORD *)(a6 + 16) = v9;
    *(_BYTE *)(a6 + 20) = 1;
    *(int32x4_t *)(a6 + 24) = vdupq_n_s32(v12);
    *(_DWORD *)(a6 + 40) = v12;
    *(_DWORD *)(a6 + 44) = v12;
    *(_DWORD *)(a6 + 48) = v12;
    *(_QWORD *)(a6 + 56) = v11;
    *(_QWORD *)(a6 + 64) = v15;
    *(_QWORD *)(a6 + 72) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 64) + 1;
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t ToolbarItem<>.init(placement:content:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int *v9;
  __int128 v10;

  v9 = (int *)type metadata accessor for ToolbarItem(0, MEMORY[0x1E0DEE9C0] + 8, a3, a4);
  *((_BYTE *)a5 + v9[15]) = 2;
  v10 = a1[1];
  *a5 = *a1;
  a5[1] = v10;
  *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)a1 + 25);
  *((_BYTE *)a5 + v9[13]) = 1;
  *((_BYTE *)a5 + v9[14]) = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))((char *)a5 + v9[12], a2, a3);
}

uint64_t static ToolbarItem._makeToolbar(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t View;
  int v13;
  int v15;
  int OffsetAttribute2;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v26 = *((_DWORD *)a2 + 6);
  v27 = *((_DWORD *)a2 + 2);
  v25 = *((_DWORD *)a2 + 7);
  v18 = *((_DWORD *)a2 + 9);
  v19 = *((_DWORD *)a2 + 8);
  v10 = a2[6];
  v21 = a2[5];
  v22 = a2[2];
  v17 = *((_DWORD *)a2 + 14);
  v24 = a2[8];
  v23 = *((_DWORD *)a2 + 18);
  v11 = *a1;
  LODWORD(v33) = *a1;
  type metadata accessor for ToolbarItem(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64))
    closure #1 in static ToolbarItem._makeToolbar(content:inputs:)(1, a3, a4, a5);
  AGGraphCreateOffsetAttribute2();
  View = type metadata accessor for ToolbarItem.MakeView(0, a3, a4, a5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItem<A, B>.MakeView, View);
  _GraphValue.init<A>(_:)();
  _GraphValue.value.getter();
  closure #2 in static ToolbarItem._makeToolbar(content:inputs:)(1, a3, a4, a5);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  DWORD2(v33) = v27;
  *(_QWORD *)&v34 = v22;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v25, v26);
  *(_QWORD *)&v35 = __PAIR64__(v18, v19);
  *((_QWORD *)&v35 + 1) = v21;
  *(_QWORD *)&v36 = v10;
  DWORD2(v36) = v17;
  *(_QWORD *)&v37 = v24;
  DWORD2(v37) = v23;
  v15 = static ToolbarContent.makeViewList<A>(placement:content:inputs:)();
  *(_QWORD *)&v33 = __PAIR64__(HIDWORD(v9), v11);
  v13 = _GraphValue.value.getter();
  *(_QWORD *)&v28 = v9;
  DWORD2(v28) = v27;
  *(_QWORD *)&v29 = v22;
  *((_QWORD *)&v29 + 1) = __PAIR64__(v25, v26);
  *(_QWORD *)&v30 = __PAIR64__(v18, v19);
  *((_QWORD *)&v30 + 1) = v21;
  *(_QWORD *)&v31 = v10;
  DWORD2(v31) = v17;
  *(_QWORD *)&v32 = v24;
  DWORD2(v32) = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(OffsetAttribute2, v13, v15, (uint64_t *)&v28, a3, a4, a5, (uint64_t)&v33);
  v30 = v35;
  v31 = v36;
  v32 = v37;
  v28 = v33;
  v29 = v34;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type ToolbarMakeEntries and conformance ToolbarMakeEntries();
  Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v28 = v9;
  DWORD2(v28) = v27;
  *(_QWORD *)&v29 = v22;
  *((_QWORD *)&v29 + 1) = __PAIR64__(v25, v26);
  *(_QWORD *)&v30 = __PAIR64__(v18, v19);
  *((_QWORD *)&v30 + 1) = v21;
  *(_QWORD *)&v31 = v10;
  DWORD2(v31) = v17;
  *(_QWORD *)&v32 = v24;
  DWORD2(v32) = v23;
  static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)((uint64_t)&v28, a6);
  return outlined release of ToolbarMakeEntries((uint64_t)&v33);
}

uint64_t closure #1 in static ToolbarItem._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for ToolbarItem(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 48);
  v11[2] = v6;
  v11[3] = a3;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a3, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t type metadata accessor for ToolbarItem.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarItem.MakeView);
}

uint64_t closure #2 in static ToolbarItem._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for ToolbarItem(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 44);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_7, (uint64_t)v10, (uint64_t)&type metadata for ToolbarItemPlacement, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int OffsetAttribute2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  id v39;
  id v40;
  uint64_t result;
  char v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  char v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  v61 = a1;
  v62 = a3;
  v81 = *MEMORY[0x1E0C80C00];
  v13 = *a4;
  v14 = *((_DWORD *)a4 + 2);
  v15 = a4[2];
  v17 = *((_DWORD *)a4 + 6);
  v16 = *((_DWORD *)a4 + 7);
  v70 = *((_DWORD *)a4 + 8);
  v18 = *((_DWORD *)a4 + 9);
  v68 = v16;
  v69 = v18;
  v64 = a4[5];
  v58 = a4[6];
  v60 = a4[8];
  v59 = *((_DWORD *)a4 + 18);
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64))
    closure #1 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1, a5, a6, a7);
  v63 = a2;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  closure #2 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1, a5, a6, a7);
  v57 = AGGraphCreateOffsetAttribute2();
  v67 = v13;
  HIDWORD(v73) = HIDWORD(v13);
  v74 = v14;
  v20 = v15;
  v75 = v15;
  v76 = v17;
  v77 = v68;
  v78 = v70;
  v79 = v69;
  v21 = v64;
  v80 = v64;
  v22 = _GraphInputs.phase.getter();
  v56 = v22;
  v66 = v14;
  v71 = 0;
  LODWORD(v73) = OffsetAttribute2;
  MEMORY[0x1E0C80A78](v22, v23);
  v65 = v17;
  v49 = type metadata accessor for ToString(0, a5, v24, v25);
  v50 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToString<A>, v49);
  type metadata accessor for Attribute<String?>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v73, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v48, v49, MEMORY[0x1E0DEDCE8], v26, MEMORY[0x1E0DEDD18], v27);
  v55 = v72;
  closure #3 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1, a5, a6, a7);
  v54 = AGGraphCreateOffsetAttribute2();
  closure #4 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(1, a5, a6, a7);
  v63 = AGGraphCreateOffsetAttribute2();
  v73 = v67;
  v29 = v65;
  v28 = v66;
  v74 = v66;
  v75 = v20;
  v30 = v68;
  v31 = v69;
  v76 = v65;
  v77 = v68;
  v32 = v70;
  v78 = v70;
  v79 = v69;
  v80 = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v53 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v73 = v67;
  v74 = v28;
  v75 = v20;
  v33 = v20;
  v34 = v67;
  v76 = v29;
  v77 = v30;
  v78 = v32;
  v79 = v31;
  v80 = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v52 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v73 = v34;
  v35 = v66;
  v74 = v66;
  v75 = v33;
  v76 = v29;
  v77 = v30;
  v36 = v69;
  v37 = v70;
  v78 = v70;
  v79 = v69;
  v80 = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v51 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v73 = v34;
  v74 = v35;
  v75 = v33;
  v76 = v65;
  v77 = v30;
  v78 = v37;
  v79 = v36;
  v80 = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v39 = (id)AGSubgraphGetCurrent();
  if (!v39)
    __break(1u);
  v40 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v42 = v71;
  v43 = v57;
  *(_DWORD *)a8 = v61;
  *(_DWORD *)(a8 + 4) = v43;
  v44 = v59;
  *(_DWORD *)(a8 + 8) = v62;
  *(_DWORD *)(a8 + 12) = v44;
  *(_DWORD *)(a8 + 16) = v56;
  *(_BYTE *)(a8 + 20) = v42;
  v45 = v54;
  *(_DWORD *)(a8 + 24) = v55;
  *(_DWORD *)(a8 + 28) = v45;
  v46 = v52;
  *(_DWORD *)(a8 + 32) = v53;
  *(_DWORD *)(a8 + 36) = v46;
  *(_DWORD *)(a8 + 40) = v51;
  *(_DWORD *)(a8 + 44) = v38;
  *(_DWORD *)(a8 + 48) = v63;
  v47 = v60;
  *(_QWORD *)(a8 + 56) = v40;
  *(_QWORD *)(a8 + 64) = v47;
  *(_QWORD *)(a8 + 72) = 0;
  return result;
}

uint64_t ToolbarItem.MakeView.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, Value, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarItem<A, B>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarItem.MakeView.value.getter(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarItem<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static ToolbarItem._makeToolbar(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t implicit closure #1 in static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PreferenceTransform and conformance PreferenceTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ToolbarItem(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for ToolbarItem(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 56);
  v11[2] = v5;
  v7 = MEMORY[0x1E0DEAFA0];
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #3 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for ToolbarItem(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 52);
  v11[2] = v5;
  v7 = MEMORY[0x1E0DEAFA0];
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v11, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #4 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for ToolbarItem(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 60);
  v12[2] = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_10, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t key path getter for EnvironmentValues.toolbarCustomizationBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path getter for EnvironmentValues.toolbarCustomizationOptions : EnvironmentValues@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t closure #1 in ToolbarMakeEntries.init<A>(placement:toolbarItemGroup:viewList:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for ToolbarItemGroup(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v11[2] = v5;
  v7 = MEMORY[0x1E0DEAFA0];
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

Swift::Void __swiftcall ToolbarMakeEntries.updateValue()()
{
  int *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  int v16;
  uint64_t Value;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  int v30;
  int v31;
  int v32;
  char v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t i;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[7];
  _QWORD v82[6];
  _BYTE v83[56];
  unint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v1 = v0;
  v97 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for ToolbarStorage.Item(0);
  v75 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v6);
  v68 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v70 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolbarViewListVisitor();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v0[1];
  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0)
  {
    v84 = MEMORY[0x1E0DEE9D8];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    AGGraphSetOutputValue();
  }
  else
  {
    v65 = v14;
    v16 = v1[2];
    type metadata accessor for ViewList();
    v77 = v16;
    Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)&v84);
    v18 = (char *)*((id *)v1 + 7);
    default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
    v74 = v18;
    _VariadicView_Children.init(_:contentSubgraph:transform:)();
    v76 = *((_QWORD *)v1 + 8);
    v19 = *v1;
    v20 = AGGraphGetValue();
    outlined init with copy of ToolbarItemPlacement(v20, (uint64_t)v81);
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v81, (uint64_t)v82);
    v22 = v1[12];
    v23 = *MEMORY[0x1E0CFED28];
    if (v22 == *MEMORY[0x1E0CFED28])
    {
      v24 = 2;
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v24 = *(unsigned __int8 *)AGGraphGetValue();
    }
    LODWORD(v72) = v24;
    v25 = v1[8];
    v69 = v8;
    v26 = v25;
    v66 = v5;
    if (v25 == v23)
    {
      LODWORD(v71) = 0;
    }
    else
    {
      v27 = (unsigned __int8 *)AGGraphGetValue();
      v25 = v26;
      LODWORD(v71) = *v27;
    }
    v28 = v19;
    v29 = *((_BYTE *)v1 + 20);
    v30 = v1[9];
    v31 = v1[10];
    v32 = v1[11];
    v84 = __PAIR64__(v15, v28);
    v85 = v77;
    *(_QWORD *)&v21 = *(_QWORD *)(v1 + 3);
    v73 = v21;
    v86 = v21;
    v87 = v29;
    *(_QWORD *)&v21 = *((_QWORD *)v1 + 3);
    v67 = v21;
    v88 = v21;
    v89 = v25;
    v90 = v30;
    v91 = v31;
    v92 = v32;
    v93 = v22;
    v94 = v74;
    v95 = v76;
    v96 = *((_QWORD *)v1 + 9);
    LODWORD(v74) = ToolbarMakeEntries.resolvedDefaultVisibility.getter();
    v77 = v23;
    if (v31 == v23)
      v33 = 0;
    else
      v33 = *(_BYTE *)AGGraphGetValue();
    v34 = (int *)v11;
    if (v32 == v23)
    {
      v35 = (uint64_t)v65;
      v36 = 0;
    }
    else
    {
      v37 = (uint64_t *)AGGraphGetValue();
      v38 = *v37;
      if ((_DWORD)v67 == v23)
        v36 = 0;
      else
        v36 = *v37;
      if (v26 == v23 || (_DWORD)v67 == v23)
      {
        v35 = (uint64_t)v65;
      }
      else
      {
        v35 = (uint64_t)v65;
        if (*(_BYTE *)AGGraphGetValue())
          v36 = 0;
        else
          v36 = v38;
      }
    }
    type metadata accessor for PreferenceBridge();
    AGGraphGetValue();
    swift_weakInit();
    swift_weakAssign();
    outlined init with take of WeakBox<PreferenceBridge>((uint64_t)&v79, (uint64_t)&v80);
    v39 = 0;
    v40 = 0;
    v41 = *((_BYTE *)v1 + 20);
    if (v1[6] != v77)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v42 = (uint64_t *)AGGraphGetValue();
      v39 = *v42;
      v40 = v42[1];
      swift_bridgeObjectRetain();
    }
    v43 = v35 + v34[15];
    v44 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    *(_QWORD *)v35 = v76;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v82, v35 + 8);
    *(_BYTE *)(v35 + 49) = v72;
    *(_BYTE *)(v35 + 50) = (_BYTE)v71;
    *(_BYTE *)(v35 + 51) = (_BYTE)v74;
    *(_BYTE *)(v35 + 52) = v33;
    *(_QWORD *)(v35 + 56) = v36;
    outlined init with take of WeakBox<PreferenceBridge>((uint64_t)&v80, v35 + 64);
    *(_BYTE *)(v35 + 72) = v41;
    *(_QWORD *)(v35 + 80) = 0;
    *(_QWORD *)(v35 + 88) = 0;
    v45 = (_QWORD *)(v35 + v34[16]);
    *v45 = v39;
    v45[1] = v40;
    *(_BYTE *)(v35 + v34[17]) = 0;
    v46 = v34[18];
    *(_QWORD *)(v35 + v46) = MEMORY[0x1E0DEE9D8];
    outlined init with copy of _VariadicView_Children((uint64_t)v83, (uint64_t)v81);
    v82[0] = 0;
    lazy protocol witness table accessor for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)v81);
    ToolbarViewListVisitor.finalizeGroup()();
    v47 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v47 != v1[19] || (LODWORD(v76) = v1[18], !(_DWORD)v76))
    {
      v48 = static ViewIdentity.nextSeed;
      if ((static ViewIdentity.nextSeed + 1) > 1)
        v49 = static ViewIdentity.nextSeed + 1;
      else
        v49 = 1;
      static ViewIdentity.nextSeed = v49;
      LODWORD(v76) = v48;
      v1[18] = v48;
      v1[19] = v47;
    }
    v50 = *(_QWORD *)(v35 + v46);
    v51 = (uint64_t)v70;
    v71 = *(char **)(v50 + 16);
    *(_QWORD *)&v73 = v50;
    if (v71)
    {
      *(_QWORD *)&v67 = v68 + 152;
      swift_bridgeObjectRetain();
      v52 = 0;
      v53 = (uint64_t)v66;
      while (1)
      {
        v74 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          *(_QWORD *)&v73 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v73);
        v56 = v73;
        if ((unint64_t)v74 >= *(_QWORD *)(v73 + 16))
          goto LABEL_52;
        v57 = v74;
        v58 = type metadata accessor for ToolbarStorage.Entry(0);
        v72 = v56
            + ((*(unsigned __int8 *)(*(_QWORD *)(v58 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v58 - 8) + 80))
            + *(_QWORD *)(*(_QWORD *)(v58 - 8) + 72) * (_QWORD)v57;
        outlined init with copy of ToolbarStorage.Entry.Kind(v72, v51);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload != 1)
        {
          if (EnumCaseMultiPayload)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v51, type metadata accessor for ToolbarStorage.Entry.Kind);
          }
          else
          {
            v54 = v68;
            outlined init with take of TableCellFormula(v51, v68, type metadata accessor for ToolbarStorage.Item);
            LODWORD(v81[0]) = v76;
            lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
            _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
            _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
            v51 = (uint64_t)v70;
            v55 = v72;
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v72, type metadata accessor for ToolbarStorage.Entry.Kind);
            outlined init with take of TableCellFormula(v54, v55, type metadata accessor for ToolbarStorage.Item);
            swift_storeEnumTagMultiPayload();
          }
          goto LABEL_34;
        }
        outlined init with take of TableCellFormula(v51, v53, type metadata accessor for ToolbarStorage.GroupItem);
        v60 = *(_QWORD **)(v53 + 72);
        v61 = v53;
        v62 = v60[2];
        if (!v62)
          goto LABEL_48;
        for (i = 0; i != v62; ++i)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v60 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v60);
          if (i >= v60[2])
          {
            __break(1u);
LABEL_52:
            __break(1u);
          }
          LODWORD(v81[0]) = v76;
          lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
          _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
          _ViewList_ID.bind<A>(explicitID:owner:reuseID:)();
        }
        v61 = (uint64_t)v66;
        *((_QWORD *)v66 + 9) = v60;
LABEL_48:
        v64 = v72;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v72, type metadata accessor for ToolbarStorage.Entry.Kind);
        outlined init with take of TableCellFormula(v61, v64, type metadata accessor for ToolbarStorage.GroupItem);
        swift_storeEnumTagMultiPayload();
        v53 = v61;
        v51 = (uint64_t)v70;
LABEL_34:
        v52 = v74 + 1;
        if (v74 + 1 == v71)
          goto LABEL_50;
      }
    }
    swift_bridgeObjectRetain();
LABEL_50:
    v81[0] = v73;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarViewListVisitor);
    outlined destroy of _VariadicView_Children((uint64_t)v83);
  }
}

uint64_t ToolbarMakeEntries.resolvedDefaultVisibility.getter()
{
  _DWORD *v0;
  int v1;
  unsigned __int8 *Value;
  uint64_t v3;

  v1 = *MEMORY[0x1E0CFED28];
  if (v0[9] == *MEMORY[0x1E0CFED28])
    return 1;
  Value = (unsigned __int8 *)AGGraphGetValue();
  if (v0[6] == v1)
    return 1;
  v3 = *Value;
  if (v0[8] != v1)
  {
    if (*(_BYTE *)AGGraphGetValue())
      return 1;
  }
  if (v0[7] != v1)
  {
    if (*(_BYTE *)AGGraphGetValue())
      return v3;
    else
      return 2;
  }
  return v3;
}

uint64_t ToString.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Value;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, a2);
  if (swift_dynamicCast())
    return v8;
  else
    return 0;
}

double protocol witness for static Rule.initialValue.getter in conformance ToString<A>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187BF9840;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToString<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v5;

  result = ToString.value.getter(*v2, *(_QWORD *)(a1 + 16));
  *a2 = result;
  a2[1] = v5;
  return result;
}

void closure #1 in PreferenceTransform.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v2);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v2 = *(_QWORD *)AGGraphGetValue();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in PreferenceTransform.value.getter;
  *(_QWORD *)(v4 + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))v4;
  return swift_bridgeObjectRetain();
}

uint64_t ToolbarItem<>.init(placement:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  __int128 v16;
  __int128 v18;
  _OWORD v19[2];

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v19[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = outlined init with copy of ToolbarItemPlacement(v13, (uint64_t)&v18);
  a2(v14);
  outlined destroy of ToolbarItemPlacement(a1);
  v15 = (int *)type metadata accessor for ToolbarItem(0, MEMORY[0x1E0DEE9C0] + 8, a3, a4);
  *((_BYTE *)a5 + v15[15]) = 2;
  v16 = v19[0];
  *a5 = v18;
  a5[1] = v16;
  *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v19 + 9);
  *((_BYTE *)a5 + v15[13]) = 1;
  *((_BYTE *)a5 + v15[14]) = 0;
  return (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))((char *)a5 + v15[12], v12, a3);
}

uint64_t ToolbarItem<>.init(id:placement:showsByDefault:isEmpty:defaultItemKind:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, void (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(uint64_t);

  v26 = a7;
  v27 = a6;
  v24 = a4;
  v25 = a5;
  v13 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v16;
  v19 = (int *)type metadata accessor for ToolbarItem(0, MEMORY[0x1E0DEA968], a9, v18);
  v20 = v19[15];
  *a8 = a1;
  a8[1] = a2;
  v21 = outlined init with copy of ToolbarItemPlacement(a3, (uint64_t)(a8 + 2));
  *((_BYTE *)a8 + v19[13]) = v24;
  *((_BYTE *)a8 + v19[14]) = v25;
  *((_BYTE *)a8 + v20) = v17;
  v27(v21);
  outlined destroy of ToolbarItemPlacement(a3);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))((char *)a8 + v19[12], v15, a9);
}

uint64_t ToolbarItem<>.init(id:placement:showsByDefault:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  _BYTE v17[48];

  outlined init with copy of ToolbarItemPlacement(a3, (uint64_t)v17);
  ToolbarItem<>.init(id:placement:showsByDefault:isEmpty:defaultItemKind:content:)(a1, a2, (uint64_t)v17, a4, 0, a5, a6, a8, a7);
  return outlined destroy of ToolbarItemPlacement(a3);
}

uint64_t ToolbarItem<>.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in <> ToolbarItem<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 8);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 = *(_QWORD *)(v6 + 64),
         v11 = *(_QWORD *)(v7 + 64),
         v11 + ((v8 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & ~v8) + 3 <= 0x18)
      ? (v12 = v9 > 7)
      : (v12 = 1),
        v12))
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + (((v9 | 7) + 16) & ~(unint64_t)(v9 | 7)));
    swift_retain();
  }
  else
  {
    v13 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v14 = ((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_BYTE *)(v15 + 40) == 1)
    {
      v16 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 24) = v16;
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))(((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8, v15);
      *(_BYTE *)(v14 + 40) = 1;
    }
    else
    {
      v18 = *(_OWORD *)v15;
      v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v14 + 25) = *(_OWORD *)(v15 + 25);
      *(_OWORD *)v14 = v18;
      *(_OWORD *)(v14 + 16) = v19;
    }
    v20 = v15 + v8;
    v21 = (v14 + v8 + 41) & v13;
    v22 = (v20 + 41) & v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v21, v22, v5);
    v23 = (_BYTE *)(v21 + v11);
    *v23 = *(_BYTE *)(v22 + v11);
    v23[1] = *(_BYTE *)(v22 + v11 + 1);
    v23[2] = *(_BYTE *)(v22 + v11 + 2);
  }
  return v4;
}

uint64_t destroy for ToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = (a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(v5 + 40) == 1)
    __swift_destroy_boxed_opaque_existential_1(v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(v9 + 40) == 1)
  {
    v10 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v8 + 24) = v10;
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
    (**(void (***)(unint64_t, unint64_t))(v10 - 8))(v8, v9);
    *(_BYTE *)(v8 + 40) = 1;
  }
  else
  {
    v11 = *(_OWORD *)v9;
    v12 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
    *(_OWORD *)v8 = v11;
    *(_OWORD *)(v8 + 16) = v12;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v8 + v14 + 41) & ~v14;
  v16 = (v9 + v14 + 41) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64);
  v18 = (_BYTE *)(v15 + v17);
  v19 = (_BYTE *)(v16 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  v18[2] = v19[2];
  return a1;
}

uint64_t assignWithCopy for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v8 != v9)
  {
    outlined destroy of ToolbarItemPlacement.Role(v8);
    if (*(_BYTE *)(v9 + 40) == 1)
    {
      v10 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 24) = v10;
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      (**(void (***)(unint64_t, unint64_t))(v10 - 8))(v8, v9);
      *(_BYTE *)(v8 + 40) = 1;
    }
    else
    {
      v11 = *(_OWORD *)v9;
      v12 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v8 + 25) = *(_OWORD *)(v9 + 25);
      *(_OWORD *)v8 = v11;
      *(_OWORD *)(v8 + 16) = v12;
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v8 + v14 + 41) & ~v14;
  v16 = (v9 + v14 + 41) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64);
  v18 = (_BYTE *)(v15 + v17);
  v19 = (_BYTE *)(v16 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  v18[2] = v19[2];
  return a1;
}

uint64_t initializeWithTake for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_OWORD *)((char *)v9 + 25);
  v11 = v9[1];
  *v8 = *v9;
  v8[1] = v11;
  *(_OWORD *)((char *)v8 + 25) = v10;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v8 + v13 + 41) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 41) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = (_BYTE *)(v14 + v16);
  v18 = (_BYTE *)(v15 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  return a1;
}

uint64_t assignWithTake for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  if (v8 != v9)
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v8);
    v10 = *(_OWORD *)((char *)v9 + 25);
    v11 = v9[1];
    *v8 = *v9;
    v8[1] = v11;
    *(_OWORD *)((char *)v8 + 25) = v10;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v8 + v13 + 41) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 41) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = (_BYTE *)(v14 + v16);
  v18 = (_BYTE *)(v15 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItem(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v5 <= v7)
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v4 + 84);
  if (v8 <= 0xFE)
    v8 = 254;
  if (!a2)
    return 0;
  v9 = *(_QWORD *)(v4 + 64);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_26;
  v13 = v11 + ((v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & ~v10) + 3;
  v14 = 8 * v13;
  if ((_DWORD)v13 != 3
    && v11 + (((_DWORD)v10 + (((_DWORD)v9 + 7) & 0xFFFFFFF8) + 41) & ~(_DWORD)v10) < 0xFFFFFFFD)
  {
    goto LABEL_10;
  }
  v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    v15 = *(_DWORD *)(a1 + v13);
    if (v15)
      goto LABEL_17;
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2)
        goto LABEL_26;
LABEL_10:
      v15 = *(unsigned __int8 *)(a1 + v13);
      if (!*(_BYTE *)(a1 + v13))
        goto LABEL_26;
LABEL_17:
      v17 = (v15 - 1) << v14;
      if (v13 > 3)
        v17 = 0;
      if ((_DWORD)v11 + (((_DWORD)v10 + (((_DWORD)v9 + 7) & 0xFFFFFFF8) + 41) & ~(_DWORD)v10) == -3)
        return v8 + v17 + 1;
      if (v13 <= 3)
        v18 = v11 + ((v10 + ((v9 + 7) & 0xFFFFFFF8) + 41) & ~(_DWORD)v10) + 3;
      else
        v18 = 4;
      return ((uint64_t (*)(void))((char *)&loc_187328A58 + 4 * byte_187C24AA0[v18 - 1]))();
    }
    v15 = *(unsigned __int16 *)(a1 + v13);
    if (*(_WORD *)(a1 + v13))
      goto LABEL_17;
  }
LABEL_26:
  if (v5 == v8)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v20 = (((a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 41) & ~v10;
  if (v7 == v8)
    return (*(uint64_t (**)(unint64_t))(v6 + 48))(v20);
  v21 = *(unsigned __int8 *)(v20 + v11);
  if (v21 < 2)
    return 0;
  return ((v21 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for ToolbarItem(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v6 + 64)
     + ((*(unsigned __int8 *)(v6 + 80) + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 3;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(unsigned __int8 *)(v6 + 80) + ((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 41) & ~*(unsigned __int8 *)(v6 + 80)) != -3)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

void destroy for ToolbarMakeEntries(uint64_t a1)
{

}

uint64_t initializeWithCopy for ToolbarMakeEntries(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v3 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ToolbarMakeEntries(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(void **)(a2 + 56);
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return a1;
}

uint64_t assignWithTake for ToolbarMakeEntries(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarMakeEntries(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarMakeEntries(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarMakeEntries()
{
  return &type metadata for ToolbarMakeEntries;
}

void base witness table accessor for _AttributeBody in ToolbarItem<A, B>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with take of WeakBox<PreferenceBridge>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WeakBox<PreferenceBridge>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3278], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor;
  if (!lazy protocol witness table cache variable for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor)
  {
    v1 = type metadata accessor for ToolbarViewListVisitor();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarViewListVisitor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarViewListVisitor and conformance ToolbarViewListVisitor);
  }
  return result;
}

uint64_t outlined init with copy of ToolbarStorage.Entry.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToString);
}

void type metadata accessor for Attribute<String?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<String?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<String?>);
  }
}

uint64_t sub_187329108()
{
  return EnvironmentValues.toolbarCustomizationBehavior.setter();
}

uint64_t sub_18732913C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.toolbarCustomizationVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187329174()
{
  return EnvironmentValues.toolbarCustomizationVisibility.setter();
}

uint64_t sub_187329198@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.toolbarItemIsHidden.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1873291D4()
{
  return EnvironmentValues.toolbarItemIsHidden.setter();
}

uint64_t sub_1873291FC()
{
  return EnvironmentValues.toolbarCustomizationOptions.setter();
}

uint64_t partial apply for implicit closure #1 in static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)()
{
  return implicit closure #1 in static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)();
}

unint64_t lazy protocol witness table accessor for type PreferenceTransform and conformance PreferenceTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferenceTransform and conformance PreferenceTransform;
  if (!lazy protocol witness table cache variable for type PreferenceTransform and conformance PreferenceTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferenceTransform, &unk_1E1ACF7B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceTransform and conformance PreferenceTransform);
  }
  return result;
}

uint64_t sub_18732927C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PreferenceTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PreferenceTransform.value.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1873292A8()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for SubscriptionLifetime<ObservableObjectPublisher>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ObservableObjectPublisher();
    v7 = a3(a1, v6, MEMORY[0x1E0C96020]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment;
  if (!lazy protocol witness table cache variable for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarPlacementEnvironment, &type metadata for ToolbarPlacementEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment);
  }
  return result;
}

void *type metadata accessor for PreferenceTransform()
{
  return &unk_1E1ACF7B8;
}

void base witness table accessor for _AttributeBody in ToString<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

double GroupedListStyle.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

void static GroupedListStyle._sectionInset(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = 0;
}

void static GroupedListStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
  v7 = type metadata accessor for SelectionManagerBox(255, a3, a4, v6);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  type metadata accessor for InsettableGroupedListBody();
}

void sub_187329454()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 124) = v0;
  type metadata accessor for _ListValue();
}

uint64_t sub_187329480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for GroupedListStyle.Body(0, v1, v0, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedListStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>, v2);
  return static View._makeView(view:inputs:)();
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<GroupedListStyleContext>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>);
  }
}

void type metadata accessor for StyleContextWriter<GroupedListStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<GroupedListStyleContext>)
  {
    lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<GroupedListStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedListStyleContext, &type metadata for GroupedListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedListStyleContext, &type metadata for GroupedListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
    v2 = v1;
    v3[0] = &protocol witness table for ListStyleContent;
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<GroupedListStyleContext>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for GroupedListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupedListStyle.Body);
}

void static GroupedListStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
  v7 = type metadata accessor for SelectionManagerBox(255, a3, a4, v6);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v7);
  type metadata accessor for InsettableGroupedListBody();
}

void sub_1873297D4()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 108) = v0;
  type metadata accessor for _ListValue();
}

uint64_t sub_187329800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for GroupedListStyle.Body(0, v1, v0, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedListStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>, v2);
  return static View._makeViewList(view:inputs:)();
}

void GroupedListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_187329920(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void GroupedListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _ListValue();
}

void sub_187329A04(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  GroupedListStyle.Body.base.getter();
}

void sub_187329A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0, v3 + *(int *)(v2 + 52), v1);
  GroupedListStyle.Body.insetMode.getter();
}

void sub_187329A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = v2;
  *(_DWORD *)(v6 - 128) = v3;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v1);
  InsettableGroupedListBody.init(selection:insetMode:content:)(v5, v0);
}

void GroupedListStyle.Body.insetMode.getter()
{
  type metadata accessor for _ListValue();
}

void sub_187329B3C(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  GroupedListStyle.Body.base.getter();
}

uint64_t sub_187329B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v5 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(unsigned __int8 *)(v2 + 32);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  if (v8 == 1)
  {
    result = static SemanticFeature.isEnabled.getter();
    v4 = 0;
    v6 = 0;
    v7 = 0;
    v5 = ~(_DWORD)result & 1;
  }
  *(_QWORD *)v0 = v5;
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = v6;
  *(_QWORD *)(v0 + 24) = v7;
  *(_BYTE *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 33) = v8;
  return result;
}

void closure #1 in GroupedListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_187329C44(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  GroupedListStyle.Body.base.getter();
}

uint64_t sub_187329C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void protocol witness for static Rule.initialValue.getter in conformance GroupedListStyle.Body<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
  v3 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for InsettableGroupedListBody();
}

uint64_t sub_187329D10(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance GroupedListStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  GroupedListStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t storeEnumTagSinglePayload for GroupedListStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GroupedListStyle()
{
  return &type metadata for GroupedListStyle;
}

ValueMetadata *type metadata accessor for GroupedListStyleContext()
{
  return &type metadata for GroupedListStyleContext;
}

unint64_t instantiation function for generic protocol witness table for GroupedListStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in GroupedListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance GroupedListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

void partial apply for closure #1 in GroupedListStyle.Body.value.getter()
{
  closure #1 in GroupedListStyle.Body.value.getter();
}

uint64_t closure #1 in Sequence<>.sorted(with:explicitPriorityOnly:parentVisibility:)(uint64_t *a1, uint64_t *a2, char a3, char a4, unsigned __int8 a5)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  double v12;
  double v13;
  double v14;
  char v15;
  char v16;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  char v26;
  unsigned __int8 v27;
  char v28;
  __int128 v29;
  CGFloat v30;
  CGFloat v31;
  char v32;
  unsigned __int8 v33;
  _QWORD v34[5];
  _QWORD v35[5];
  _BYTE v36[40];
  _BYTE v37[40];
  _BYTE v38[40];
  _BYTE v39[40];
  CGFloat v40[4];
  char v41;
  __int128 v42;
  double v43;
  double v44;
  char v45;
  double v46[4];
  char v47;
  _BYTE v48[40];
  double v49[4];
  char v50;
  _BYTE v51[56];

  v8 = *a1;
  v9 = *a2;
  v10 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
  v12 = 0.0;
  if ((v11 & 1) != 0)
    v13 = 0.0;
  else
    v13 = v10;
  v14 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
  if ((v15 & 1) != 0)
  {
    if (v13 != 0.0)
      goto LABEL_6;
  }
  else
  {
    v12 = v14;
    if (v13 != v14)
    {
LABEL_6:
      v16 = v12 < v13;
      return v16 & 1;
    }
  }
  if ((a3 & 1) != 0)
  {
LABEL_9:
    v16 = 0;
    return v16 & 1;
  }
  AccessibilityNode.globalFrame.getter((uint64_t)v34);
  v18 = *(double *)v34;
  v19 = *(double *)&v34[1];
  v20 = *(double *)&v34[2];
  v21 = *(double *)&v34[3];
  AccessibilityNode.globalFrame.getter((uint64_t)v35);
  v22 = *(double *)v35;
  v23 = *(double *)&v35[1];
  v24 = *(double *)&v35[2];
  v25 = *(double *)&v35[3];
  outlined init with take of CGRect?((uint64_t)v34, (uint64_t)v51);
  if ((v51[32] & 1) != 0)
  {
    LOBYTE(v49[0]) = a4;
    AccessibilityNode.contentFrame(with:)(v49, (uint64_t)v36);
    outlined init with take of CGRect?((uint64_t)v36, (uint64_t)v49);
    if ((v50 & 1) != 0)
      goto LABEL_9;
    v26 = 0;
    v18 = v49[0];
    v19 = v49[1];
    v20 = v49[2];
    v21 = v49[3];
  }
  else
  {
    outlined init with take of CGRect?((uint64_t)v35, (uint64_t)v49);
    v26 = v50 ^ 1;
  }
  outlined init with take of CGRect?((uint64_t)v35, (uint64_t)v48);
  if (v48[32] == 1)
  {
    LOBYTE(v46[0]) = a4;
    AccessibilityNode.contentFrame(with:)(v46, (uint64_t)v37);
    outlined init with take of CGRect?((uint64_t)v37, (uint64_t)v46);
    if ((v47 & 1) != 0)
      goto LABEL_9;
    v22 = v46[0];
    v23 = v46[1];
    v24 = v46[2];
    v25 = v46[3];
  }
  if (a5 == 2)
  {
    v42 = *(_OWORD *)(v8 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.layoutDirection.getter();
    v27 = LOBYTE(v40[0]);
    v42 = *(_OWORD *)(v9 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.layoutDirection.getter();
    if (((v27 ^ LOBYTE(v40[0])) & 1) != 0)
      a5 = 2;
    else
      a5 = v27;
  }
  LOBYTE(v42) = a5;
  v28 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v42, v22, v23, v24, v25, v18, v19, v20, v21);
  if (v28 == 2)
  {
    if ((v26 & 1) == 0)
      goto LABEL_26;
    LOBYTE(v42) = a4;
    AccessibilityNode.contentFrame(with:)(&v42, (uint64_t)v38);
    outlined init with take of CGRect?((uint64_t)v38, (uint64_t)&v42);
    if ((v45 & 1) != 0
      || (v29 = v42,
          v30 = v43,
          v31 = v44,
          LOBYTE(v40[0]) = a4,
          AccessibilityNode.contentFrame(with:)(v40, (uint64_t)v39),
          outlined init with take of CGRect?((uint64_t)v39, (uint64_t)v40),
          (v41 & 1) != 0))
    {
LABEL_26:
      v16 = 1;
    }
    else
    {
      v33 = a5;
      v32 = CGRect.compare(to:layoutDirection:)(&v33, v40[0], v40[1], v40[2], v40[3], *(CGFloat *)&v29, *((CGFloat *)&v29 + 1), v30, v31);
      v16 = (v32 == 2) | v32;
    }
  }
  else
  {
    v16 = v28 & 1;
  }
  return v16 & 1;
}

uint64_t CGRect.compare(to:layoutDirection:)(unsigned __int8 *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  int v16;
  double MinY;
  double MidY;
  double v19;
  double v20;
  uint64_t v21;
  double MinX;
  double MaxX;
  double v24;
  double v25;
  double v26;
  double v28;
  double MaxY;
  CGFloat v31;
  double Height;
  CGFloat v33;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;

  v16 = *a1;
  MinY = CGRectGetMinY(*(CGRect *)&a2);
  v35.origin.x = a6;
  v35.origin.y = a7;
  v35.size.width = a8;
  v35.size.height = a9;
  if (MinY >= CGRectGetMidY(v35))
    goto LABEL_22;
  v36.origin.x = a6;
  v36.origin.y = a7;
  v36.size.width = a8;
  v36.size.height = a9;
  MidY = CGRectGetMidY(v36);
  v37.origin.x = a2;
  v37.origin.y = a3;
  v37.size.width = a4;
  v37.size.height = a5;
  if (MidY >= CGRectGetMaxY(v37))
  {
LABEL_22:
    v38.origin.x = a6;
    v38.origin.y = a7;
    v38.size.width = a8;
    v38.size.height = a9;
    v19 = CGRectGetMinY(v38);
    v39.origin.x = a2;
    v39.origin.y = a3;
    v39.size.width = a4;
    v39.size.height = a5;
    if (v19 >= CGRectGetMidY(v39))
      goto LABEL_15;
    v40.origin.x = a2;
    v40.origin.y = a3;
    v40.size.width = a4;
    v40.size.height = a5;
    v20 = CGRectGetMidY(v40);
    v41.origin.x = a6;
    v41.origin.y = a7;
    v41.size.width = a8;
    v41.size.height = a9;
    if (v20 >= CGRectGetMaxY(v41))
      goto LABEL_15;
  }
  if (v16 == 2)
  {
LABEL_15:
    v54.origin.x = a6;
    v54.origin.y = a7;
    v54.size.width = a8;
    v54.size.height = a9;
    v28 = CGRectGetMinY(v54);
    v55.origin.x = a2;
    v55.origin.y = a3;
    v55.size.width = a4;
    v55.size.height = a5;
    if (v28 < CGRectGetMinY(v55))
      return 1;
    v56.origin.x = a6;
    v56.origin.y = a7;
    v56.size.width = a8;
    v56.size.height = a9;
    MaxY = CGRectGetMaxY(v56);
    v57.origin.x = a2;
    v57.origin.y = a3;
    v57.size.width = a4;
    v57.size.height = a5;
    return MaxY < CGRectGetMaxY(v57);
  }
  v21 = v16 & 1;
  v42.origin.x = a6;
  v42.origin.y = a7;
  v42.size.width = a8;
  v42.size.height = a9;
  MinX = CGRectGetMinX(v42);
  v43.origin.x = a2;
  v43.origin.y = a3;
  v43.size.width = a4;
  v43.size.height = a5;
  if (CGRectGetMinX(v43) >= MinX)
    goto LABEL_8;
  v44.origin.x = a6;
  v44.origin.y = a7;
  v44.size.width = a8;
  v44.size.height = a9;
  MaxX = CGRectGetMaxX(v44);
  v45.origin.x = a2;
  v45.origin.y = a3;
  v45.size.width = a4;
  v45.size.height = a5;
  if (CGRectGetMaxX(v45) >= MaxX)
  {
LABEL_8:
    v46.origin.x = a6;
    v46.origin.y = a7;
    v46.size.width = a8;
    v46.size.height = a9;
    v24 = CGRectGetMinX(v46);
    v47.origin.x = a2;
    v47.origin.y = a3;
    v47.size.width = a4;
    v47.size.height = a5;
    if (v24 < CGRectGetMinX(v47))
    {
      v48.origin.x = a6;
      v48.origin.y = a7;
      v48.size.width = a8;
      v48.size.height = a9;
      v25 = CGRectGetMaxX(v48);
      v49.origin.x = a2;
      v49.origin.y = a3;
      v49.size.width = a4;
      v49.size.height = a5;
      if (v25 < CGRectGetMaxX(v49))
        return v21 ^ 1;
    }
    v50.origin.x = a6;
    v50.origin.y = a7;
    v50.size.width = a8;
    v50.size.height = a9;
    v33 = CGRectGetWidth(v50) * 0.5 + a6;
    v51.origin.x = a6;
    v51.origin.y = a7;
    v51.size.width = a8;
    v51.size.height = a9;
    Height = CGRectGetHeight(v51);
    v52.origin.x = a2;
    v52.origin.y = a3;
    v52.size.width = a4;
    v52.size.height = a5;
    v31 = CGRectGetWidth(v52) * 0.5 + a2;
    v53.origin.x = a2;
    v53.origin.y = a3;
    v53.size.width = a4;
    v53.size.height = a5;
    v26 = CGRectGetHeight(v53) * 0.5 + a3;
    if (v33 == v31 && Height * 0.5 + a7 == v26)
      return 2;
    goto LABEL_15;
  }
  return v21;
}

uint64_t closure #1 in Sequence<>.sortedSupplementaryItems()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  unsigned int v11;
  unsigned __int16 v12;
  char v13;
  _BYTE v14[70];
  unsigned __int8 v15;

  v2 = *a1;
  v3 = *a2;
  AccessibilityNode.attachment.getter(&v9);

  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  if (v15 == 255)
  {
LABEL_2:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v14);
    return v2 < v3;
  }
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v14, (uint64_t)&v9);
  if (v13)
    goto LABEL_4;
  swift_release();
  v5 = v11 | ((unint64_t)v12 << 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v14);
  if ((v5 & 0xFF00000000) == 0x200000000)
    return v2 < v3;
  AccessibilityNode.attachment.getter(&v9);

  v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  if (v15 == 255)
    goto LABEL_2;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v14, (uint64_t)&v9);
  if (v13)
  {
LABEL_4:
    outlined destroy of AccessibilityScrollableContext((uint64_t)&v9);
    outlined destroy of AccessibilityScrollableContext((uint64_t)v14);
    return v2 < v3;
  }
  swift_release();
  v8 = v11 | ((unint64_t)v12 << 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v14);
  if ((v8 & 0xFF00000000) == 0x200000000 || (_DWORD)v5 != (_DWORD)v8)
    return v2 < v3;
  if ((v5 & 0x100000000) != 0)
  {
    if ((v8 & 0x100000000) == 0)
      return 1;
    goto LABEL_15;
  }
  if ((v8 & 0x100000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000000000) != 0)
    {
      if ((v8 & 0x10000000000) != 0)
        return v2 < v3;
      return 0;
    }
    if ((v8 & 0x10000000000) == 0)
      return v2 < v3;
    return 1;
  }
  return 0;
}

uint64_t outlined destroy of AccessibilityScrollableContext?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for AccessibilityScrollableContext?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AccessibilityScrollableContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityScrollableContext?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?);
  }
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char **v2;
  char *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  v6 = *((_QWORD *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[120 * a1];
    v8 = *((_OWORD *)v7 + 7);
    v9 = v6 - 1;
    *(_OWORD *)(a2 + 64) = *((_OWORD *)v7 + 6);
    *(_OWORD *)(a2 + 80) = v8;
    *(_OWORD *)(a2 + 96) = *((_OWORD *)v7 + 8);
    *(_QWORD *)(a2 + 112) = *((_QWORD *)v7 + 18);
    v10 = *((_OWORD *)v7 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v7 + 2);
    *(_OWORD *)(a2 + 16) = v10;
    v11 = *((_OWORD *)v7 + 5);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v7 + 4);
    *(_OWORD *)(a2 + 48) = v11;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = (uint64_t)memmove(v7 + 32, v7 + 152, 120 * v12);
      *((_QWORD *)v5 + 2) = v9;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()();
      return v12;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5d148OIegnrzr_TR160_s7SwiftUI33_DictionaryKeyedDecodingContainer33_2462DFFC835A6F4511AFEB231EB4B8C2LLV11referencing8wrappingADyxGAA02__C7DecoderACLLC_SDyf5Gtcfcj4_yptJ19_yptXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38;
  _OWORD v39[2];
  _QWORD v40[2];
  uint64_t v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  uint64_t *v45;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v44 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  result = specialized Dictionary.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v45 = &v41;
  v35 = v3;
  v9 = *(_BYTE *)(v3 + 32);
  v31 = v3 + 88;
  v32 = v1;
  v33 = v5;
  v34 = v3 + 64;
  v10 = MEMORY[0x1E0DEA968];
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    v13 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_28;
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v16 = *v14;
    v15 = v14[1];
    v17 = (uint64_t)v45;
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v6, (uint64_t)v45);
    v40[0] = v16;
    v40[1] = v15;
    *(_QWORD *)&v38 = v16;
    *((_QWORD *)&v38 + 1) = v15;
    outlined init with copy of Any(v17, (uint64_t)v39);
    v36 = v38;
    v37[0] = v39[0];
    v37[1] = v39[1];
    swift_bridgeObjectRetain_n();
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), v10, (uint64_t (*)(_QWORD))type metadata accessor for (key: Any, value: Any));
    v18 = specialized static DictionaryDecoder.KeyDecodingStrategy._convertFromSnakeCase(_:)(v36, *((unint64_t *)&v36 + 1));
    v20 = v19;
    outlined init with copy of Any((uint64_t)v37, (uint64_t)v43);
    *(_QWORD *)&v42 = v18;
    *((_QWORD *)&v42 + 1) = v20;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)&v36, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), v10, (uint64_t (*)(_QWORD))type metadata accessor for (key: Any, value: Any));
    v2 = v44;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
      v2 = v44;
    }
    v22 = *(_QWORD *)(v2 + 16);
    v21 = *(_QWORD *)(v2 + 24);
    v3 = v35;
    if (v22 >= v21 >> 1)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1);
      v2 = v44;
    }
    *(_QWORD *)(v2 + 16) = v22 + 1;
    v23 = (_OWORD *)(v2 + 48 * v22);
    v24 = v42;
    v25 = v43[1];
    v23[3] = v43[0];
    v23[4] = v25;
    v23[2] = v24;
    v9 = *(_BYTE *)(v35 + 32);
    v11 = 1 << v9;
    if (v6 >= 1 << v9)
      goto LABEL_29;
    v8 = v34;
    v26 = *(_QWORD *)(v34 + 8 * v13);
    if ((v26 & (1 << v6)) == 0)
      goto LABEL_30;
    v5 = v33;
    if (*(_DWORD *)(v35 + 36) != v33)
      goto LABEL_31;
    v27 = v26 & (-2 << (v6 & 0x3F));
    if (v27)
    {
      v11 = __clz(__rbit64(v27)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v12 = v32;
    }
    else
    {
      v28 = v13 + 1;
      v29 = (v11 + 63) >> 6;
      v12 = v32;
      if (v13 + 1 < v29)
      {
        v30 = *(_QWORD *)(v34 + 8 * v28);
        if (!v30)
        {
          v28 = v13 + 2;
          if (v13 + 2 >= v29)
            goto LABEL_4;
          v30 = *(_QWORD *)(v34 + 8 * v28);
          if (!v30)
          {
            while (v29 - 3 != v13)
            {
              v30 = *(_QWORD *)(v31 + 8 * v13++);
              if (v30)
              {
                v28 = v13 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v11 = __clz(__rbit64(v30)) + (v28 << 6);
      }
    }
LABEL_4:
    ++v7;
    v6 = v11;
    if (v7 == v12)
      return v2;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  _QWORD *v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!(*v0 >> 62))
  {
    if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    return 0;
LABEL_3:
  result = specialized Array._customRemoveLast()();
  if (!result)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      result = v4 - 1;
      if (!__OFSUB__(v4, 1))
        return specialized Array.remove(at:)(result, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
    }
    else
    {
      v2 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = v2 - 1;
      if (!__OFSUB__(v2, 1))
        return specialized Array.remove(at:)(result, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
    }
    __break(1u);
  }
  return result;
}

uint64_t *DictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v16;
  void *v17;
  void *v18;
  void (*v19)(uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v62;
  uint64_t v64;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v3 + 80);
  v8 = *(_QWORD *)(v3 + 88);
  v9 = *(_QWORD *)(v3 + 104);
  v57 = *(_QWORD *)(v3 + 56);
  v58 = *(_QWORD *)(v3 + 96);
  v10 = *(_QWORD *)(v3 + 112);
  v62 = *(void **)(v3 + 24);
  v59 = *(_QWORD *)(v3 + 72);
  v60 = *(_QWORD *)(v3 + 120);
  v70 = *(_QWORD *)(v3 + 128);
  v11 = *(_BYTE *)(v3 + 40);
  type metadata accessor for __DictionaryEncoder();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 32) = v4;
  *(_BYTE *)(v12 + 40) = v11;
  *(_QWORD *)(v12 + 48) = v5;
  *(_QWORD *)(v12 + 56) = v57;
  *(_QWORD *)(v12 + 64) = v6;
  *(_QWORD *)(v12 + 72) = v59;
  *(_QWORD *)(v12 + 80) = v7;
  *(_QWORD *)(v12 + 88) = v8;
  *(_QWORD *)(v12 + 96) = v58;
  *(_QWORD *)(v12 + 104) = v9;
  *(_QWORD *)(v12 + 112) = v10;
  *(_QWORD *)(v12 + 120) = v60;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 24) = v62;
  *(_QWORD *)(v12 + 128) = v70;
  *(_QWORD *)(v12 + 136) = v13;
  v68 = a2;
  v69 = a3;
  v14 = __swift_allocate_boxed_opaque_existential_1(&v66);
  v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
  v15(v14, a1, a2);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v62, v4, v11);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v5);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v6, v59);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v10);
  swift_bridgeObjectRetain();
  v16 = (uint64_t *)v12;
  __DictionaryEncoder.box_(_:)(&v66);
  if (!v64)
  {
    v18 = v17;
    v19 = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
    if (!v18)
    {
      v26 = type metadata accessor for EncodingError();
      swift_allocError();
      v28 = v27;
      type metadata accessor for (Any, EncodingError.Context)();
      v28[3] = a2;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
      v19(boxed_opaque_existential_1, a1, a2);
      v66 = 0;
      v67 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      v66 = 0x6576656C2D706F54;
      v67 = 0xEA0000000000206CLL;
      v30._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0xD00000000000001BLL;
      v31._object = (void *)0x8000000187BDD240;
      v16 = &v66;
      String.append(_:)(v31);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x1E0DEC4B0], v26);
      swift_willThrow();
      swift_release();
      return v16;
    }
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v20 = swift_allocObject();
      v21 = v20;
      v22 = MEMORY[0x1E0DEA968];
      *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v20 + 56) = v22;
      v23 = 0x4C4C554E5F5FLL;
LABEL_6:
      v24 = v23 & 0xFFFFFFFFFFFFLL | 0x5F5F000000000000;
      v25 = 0xE800000000000000;
LABEL_13:
      *(_QWORD *)(v20 + 32) = v24;
      *(_QWORD *)(v20 + 40) = v25;
      *(_QWORD *)(v21 + 88) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      *(_QWORD *)(v21 + 64) = v18;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
      v16 = (uint64_t *)NSDictionary.init(dictionaryLiteral:)();
LABEL_14:
      swift_release();
      return v16;
    }
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v20 = swift_allocObject();
      v21 = v20;
      v32 = MEMORY[0x1E0DEA968];
      *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v20 + 56) = v32;
      v24 = 0x5245424D554E5F5FLL;
    }
    else
    {
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
      {
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v20 = swift_allocObject();
          v21 = v20;
          v35 = MEMORY[0x1E0DEA968];
          *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
          *(_QWORD *)(v20 + 56) = v35;
          v24 = 0x5F5F5445535F5FLL;
          v25 = 0xE700000000000000;
          goto LABEL_13;
        }
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v20 = swift_allocObject();
          v21 = v20;
          v36 = MEMORY[0x1E0DEA968];
          *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
          *(_QWORD *)(v20 + 56) = v36;
          v24 = 0x5F59415252415F5FLL;
          v25 = 0xE90000000000005FLL;
          goto LABEL_13;
        }
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v20 = swift_allocObject();
          v21 = v20;
          v37 = MEMORY[0x1E0DEA968];
          *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
          *(_QWORD *)(v20 + 56) = v37;
          v24 = 0x4F49544349445F5FLL;
          v25 = 0xEE005F5F5952414ELL;
          goto LABEL_13;
        }
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v20 = swift_allocObject();
          v21 = v20;
          v38 = MEMORY[0x1E0DEA968];
          *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
          *(_QWORD *)(v20 + 56) = v38;
          v23 = 0x455441445F5FLL;
        }
        else
        {
          objc_opt_self();
          if (!swift_dynamicCastObjCClass())
          {
            v70 = v12;
            objc_opt_self();
            if (!swift_dynamicCastObjCClass())
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v41 = swift_allocObject();
              *(_OWORD *)(v41 + 16) = xmmword_187BF9830;
              v66 = 0;
              v67 = 0xE000000000000000;
              _StringGuts.grow(_:)(71);
              v42._countAndFlagsBits = 0xD00000000000002FLL;
              v42._object = (void *)0x8000000187BDD260;
              String.append(_:)(v42);
              DefaultStringInterpolation.appendInterpolation<A>(_:)();
              v43._countAndFlagsBits = 0xD000000000000014;
              v43._object = (void *)0x8000000187BDD290;
              String.append(_:)(v43);
              v44 = objc_msgSend(v18, sel_description);
              v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v47 = v46;

              v48._countAndFlagsBits = v45;
              v48._object = v47;
              String.append(_:)(v48);
              swift_bridgeObjectRelease();
              v49 = v66;
              v50 = v67;
              *(_QWORD *)(v41 + 56) = MEMORY[0x1E0DEA968];
              *(_QWORD *)(v41 + 32) = v49;
              *(_QWORD *)(v41 + 40) = v50;
              print(_:separator:terminator:)();
              swift_bridgeObjectRelease();
              v51 = type metadata accessor for EncodingError();
              swift_allocError();
              v53 = v52;
              type metadata accessor for (Any, EncodingError.Context)();
              v53[3] = a2;
              v54 = __swift_allocate_boxed_opaque_existential_1(v53);
              v15(v54, a1, a2);
              v66 = 0;
              v67 = 0xE000000000000000;
              _StringGuts.grow(_:)(38);
              swift_bridgeObjectRelease();
              v66 = 0x6576656C2D706F54;
              v67 = 0xEA0000000000206CLL;
              v55._countAndFlagsBits = _typeName(_:qualified:)();
              String.append(_:)(v55);
              swift_bridgeObjectRelease();
              v56._countAndFlagsBits = 0xD00000000000001ALL;
              v56._object = (void *)0x8000000187BDD2B0;
              v16 = &v66;
              String.append(_:)(v56);
              DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
              (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v53, *MEMORY[0x1E0DEC4B0], v51);
              swift_willThrow();
              swift_release();

              return v16;
            }
            type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v40 = swift_allocObject();
            *(_OWORD *)(v40 + 16) = xmmword_187BF9830;
            *(_QWORD *)(v40 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v40 + 32) = 0xD000000000000011;
            *(_QWORD *)(v40 + 40) = 0x8000000187BDD2D0;
            *(_QWORD *)(v40 + 88) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            *(_QWORD *)(v40 + 64) = v18;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
            v16 = (uint64_t *)NSDictionary.init(dictionaryLiteral:)();
            goto LABEL_14;
          }
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v20 = swift_allocObject();
          v21 = v20;
          v39 = MEMORY[0x1E0DEA968];
          *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
          *(_QWORD *)(v20 + 56) = v39;
          v23 = 0x415441445F5FLL;
        }
        goto LABEL_6;
      }
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v20 = swift_allocObject();
      v21 = v20;
      v33 = MEMORY[0x1E0DEA968];
      *(_OWORD *)(v20 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v20 + 56) = v33;
      v24 = 0x474E495254535F5FLL;
    }
    v25 = 0xEA00000000005F5FLL;
    goto LABEL_13;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
  return v16;
}

void __DictionaryEncoder.box_(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t DynamicType;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *boxed_opaque_existential_1;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[5];
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DynamicType = swift_getDynamicType();
  if (DynamicType == type metadata accessor for Date()
    || DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDate))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v31);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    v14 = &lazy cache variable for type metadata for NSDate;
LABEL_13:
    type metadata accessor for NSObject(0, v14);
LABEL_14:
    swift_dynamicCast();
    return;
  }
  if (DynamicType == MEMORY[0x1E0CB0338]
    || DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSData))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v31);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    v14 = &lazy cache variable for type metadata for NSData;
    goto LABEL_13;
  }
  if (DynamicType == v4)
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v31);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    swift_dynamicCast();
    v15 = URL.absoluteString.getter();
    v17 = v16;
    v18 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
    v19 = (void *)MEMORY[0x18D75CC88](v15, v17);
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v18, sel_initWithString_, v19);

    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      return;
    }
    goto LABEL_44;
  }
  if (DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v31);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    goto LABEL_14;
  }
  type metadata accessor for NSDecimal(0);
  if (DynamicType == v10
    || DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDecimalNumber))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v31);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    v14 = &lazy cache variable for type metadata for NSDecimalNumber;
    goto LABEL_13;
  }
  outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v31);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for _DictionaryStringDictionaryEncodableMarker);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    v11 = a1[3];
    v12 = __swift_project_boxed_opaque_existential_1(a1, v11);
    v32 = v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, v12, v11);
    type metadata accessor for [String : Encodable]();
    swift_dynamicCast();
    __DictionaryEncoder.box(_:)(v30[0]);
    swift_bridgeObjectRelease();
    return;
  }
  v21 = (_QWORD *)(v1 + 16);
  swift_beginAccess();
  v22 = *(_QWORD *)(v1 + 16);
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v32 = type metadata accessor for __DictionaryEncoder();
  v33 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryEncoder and conformance __DictionaryEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryEncoder, (uint64_t)&protocol conformance descriptor for __DictionaryEncoder);
  v31[0] = v1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    if (*v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23 >= v26)
        goto LABEL_28;
    }
    else if (v23 >= *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_28:
      swift_willThrow();
      return;
    }
    swift_beginAccess();
    if (*v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28)
      {
LABEL_26:
        v24 = specialized RangeReplaceableCollection<>.popLast()();
        if (v24)
        {
          v25 = (void *)v24;
          swift_endAccess();

          goto LABEL_28;
        }
        goto LABEL_45;
      }
    }
    else if (*(_QWORD *)((*v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  if (*v21 >> 62)
  {
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23 < v27)
    {
LABEL_31:
      swift_beginAccess();
      if (*v21 >> 62)
      {
        swift_bridgeObjectRetain();
        v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v29)
        {
LABEL_33:
          if (specialized RangeReplaceableCollection<>.popLast()())
          {
            swift_endAccess();
            return;
          }
          goto LABEL_46;
        }
      }
      else if (*(_QWORD *)((*v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_33;
      }
LABEL_43:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }
  }
  else if (v23 < *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_31;
  }
}

uint64_t DictionaryEncoder.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(_QWORD *)(v0 + 48));
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DictionaryEncoder()
{
  return objc_opt_self();
}

BOOL __DictionaryEncoder.canEncodeNewValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  return v2 == *(_QWORD *)(*(_QWORD *)(v0 + 136) + 16);
}

uint64_t __DictionaryEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v6 = v3 + 2;
  if (((*(uint64_t (**)(void))(*v3 + 168))() & 1) != 0)
  {
    swift_beginAccess();
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    goto LABEL_13;
  }
  swift_beginAccess();
  v7 = *v6;
  if ((unint64_t)*v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = (char *)_CocoaArrayWrapper.endIndex.getter();
    if (v8)
    {
LABEL_7:
      v9 = v8 - 1;
      if (__OFSUB__(v8, 1))
      {
        __break(1u);
      }
      else if ((v7 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v9 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v10 = (char *)*(id *)(v7 + 8 * (_QWORD)v9 + 32);
          goto LABEL_12;
        }
        __break(1u);
LABEL_20:

        goto LABEL_21;
      }
      v10 = (char *)MEMORY[0x18D75E3BC](v9, v7);
LABEL_12:
      v8 = v10;
      swift_bridgeObjectRelease();
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
LABEL_13:
        swift_beginAccess();
        v12 = type metadata accessor for _JSONKeyedEncodingContainer(0, a2, a3, v11);
        swift_retain();
        swift_bridgeObjectRetain();
        MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v12);
        return KeyedEncodingContainer.init<A>(_:)();
      }
      goto LABEL_20;
    }
  }
  else
  {
    v8 = *(char **)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_21:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __DictionaryEncoder.unkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;

  v2 = v1;
  v4 = v1 + 2;
  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    swift_beginAccess();
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    goto LABEL_13;
  }
  swift_beginAccess();
  v6 = *v4;
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = (char *)_CocoaArrayWrapper.endIndex.getter();
    if (v7)
    {
LABEL_7:
      v8 = v7 - 1;
      if (__OFSUB__(v7, 1))
      {
        __break(1u);
      }
      else if ((v6 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v8 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v8 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v9 = (char *)*(id *)(v6 + 8 * (_QWORD)v8 + 32);
          goto LABEL_12;
        }
        __break(1u);
LABEL_20:

        goto LABEL_21;
      }
      v9 = (char *)MEMORY[0x18D75E3BC](v8, v6);
LABEL_12:
      v7 = v9;
      swift_bridgeObjectRelease();
      objc_opt_self();
      v5 = (id)swift_dynamicCastObjCClass();
      if (v5)
      {
LABEL_13:
        swift_beginAccess();
        v10 = v2[17];
        a1[3] = &unk_1E1AFBAB8;
        a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
        *a1 = v2;
        a1[1] = v5;
        a1[2] = v10;
        swift_retain();
        return swift_bridgeObjectRetain();
      }
      goto LABEL_20;
    }
  }
  else
  {
    v7 = *(char **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_21:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __DictionaryEncoder.__deallocating_deinit()
{
  return __DictionaryEncoder.__deallocating_deinit((void (*)(_QWORD, _QWORD, _QWORD))outlined consume of DictionaryEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.DataDecodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.DataDecodingStrategy);
}

uint64_t type metadata accessor for __DictionaryEncoder()
{
  return objc_opt_self();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __DictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __DictionaryEncoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __DictionaryEncoder@<X0>(_QWORD *a1@<X8>)
{
  return __DictionaryEncoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __DictionaryEncoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for __DictionaryEncoder();
  a1[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryEncoder and conformance __DictionaryEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryEncoder, (uint64_t)&protocol conformance descriptor for __DictionaryEncoder);
  *a1 = v3;
  return swift_retain();
}

unint64_t _JSONKeyedEncodingContainer._converted(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  void (*v6)(uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t result;
  uint64_t inited;

  v6 = *(void (**)(uint64_t))(a2 + 112);
  if (!v6)
    return outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)a4);
  if (v6 == (void (*)(uint64_t))1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = dispatch thunk of CodingKey.stringValue.getter();
    v9 = specialized static DictionaryEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v7, v8);
    v11 = v10;
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v12 = dispatch thunk of CodingKey.intValue.getter();
    v14 = v13;
    a4[3] = (unint64_t)&unk_1E1B0CCC8;
    a4[4] = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    result = swift_allocObject();
    *a4 = result;
    *(_QWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 24) = v11;
    *(_QWORD *)(result + 32) = v12;
    *(_BYTE *)(result + 40) = v14 & 1;
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    outlined init with copy of TableColumnList((uint64_t)a1, inited + 32);
    outlined copy of DictionaryDecoder.KeyDecodingStrategy((unint64_t)v6);
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    v6(a3);
    swift_bridgeObjectRelease();
    return outlined consume of DictionaryDecoder.KeyDecodingStrategy((unint64_t)v6);
  }
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;
  unint64_t v18[4];

  v5 = *v2;
  v4 = (void *)v2[1];
  v6 = v2[2];
  v8 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 16);
  v7 = v16;
  v17 = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(boxed_opaque_existential_1, a1, v7);
  _JSONKeyedEncodingContainer._converted(_:)(v15, v5, v6, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  v10 = dispatch thunk of CodingKey.stringValue.getter();
  v12 = v11;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E38]), sel_init);
  v15[0] = v10;
  v15[1] = v12;
  swift_bridgeObjectRetain();
  objc_msgSend(v4, sel___swift_setObject_forKeyedSubscript_, v13, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[4];

  v7 = *v3;
  v6 = (void *)v3[1];
  v8 = v3[2];
  v10 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 16);
  v9 = v18;
  v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  v12 = dispatch thunk of CodingKey.stringValue.getter();
  v14 = v13;
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

{
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[4];

  v7 = *v3;
  v6 = (void *)v3[1];
  v8 = v3[2];
  v10 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 16);
  v9 = v18;
  v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  v12 = dispatch thunk of CodingKey.stringValue.getter();
  v14 = v13;
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithChar_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[4];

  v7 = *v3;
  v6 = (void *)v3[1];
  v8 = v3[2];
  v10 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 16);
  v9 = v18;
  v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  v12 = dispatch thunk of CodingKey.stringValue.getter();
  v14 = v13;
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithShort_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19[3];
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[4];

  v9 = *v4;
  v8 = (void *)v4[1];
  v10 = v4[2];
  v12 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(a3 + 16);
  v11 = v20;
  v21 = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, a2, v11);
  _JSONKeyedEncodingContainer._converted(_:)(v19, v9, v10, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  v14 = dispatch thunk of CodingKey.stringValue.getter();
  v16 = v15;
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), *a4, a1);
  v19[0] = v14;
  v19[1] = v16;
  swift_bridgeObjectRetain();
  objc_msgSend(v8, sel___swift_setObject_forKeyedSubscript_, v17, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[4];

  v7 = *v3;
  v6 = (void *)v3[1];
  v8 = v3[2];
  v10 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 16);
  v9 = v18;
  v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  v12 = dispatch thunk of CodingKey.stringValue.getter();
  v14 = v13;
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedChar_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[4];

  v7 = *v3;
  v6 = (void *)v3[1];
  v8 = v3[2];
  v10 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 16);
  v9 = v18;
  v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  v12 = dispatch thunk of CodingKey.stringValue.getter();
  v14 = v13;
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedShort_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  unint64_t v24[4];

  v9 = *v4;
  v8 = (void *)v4[1];
  v10 = v4[2];
  v12 = *(_QWORD *)(a4 + 24);
  v22 = *(_QWORD *)(a4 + 16);
  v11 = v22;
  v23 = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(boxed_opaque_existential_1, a3, v11);
  _JSONKeyedEncodingContainer._converted(_:)(v21, v9, v10, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  v14 = dispatch thunk of CodingKey.stringValue.getter();
  v16 = v15;
  v17 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v18 = (void *)MEMORY[0x18D75CC88](a1, a2);
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_initWithString_, v18);

  v21[0] = v14;
  v21[1] = v16;
  swift_bridgeObjectRetain();
  objc_msgSend(v8, sel___swift_setObject_forKeyedSubscript_, v19, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, double);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  void (*v35)(char *, double);
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39[5];
  unint64_t v40[4];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v35 - v13;
  v38 = v3;
  v15 = *v3;
  v35 = *(void (**)(char *, double))(v7 + 16);
  v36 = v16;
  v35((char *)&v35 - v13, v12);
  v17 = (_QWORD *)(v15 + 136);
  swift_beginAccess();
  v18 = *(_QWORD **)(v15 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v15 + 136) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *v17 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
    *v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
  v22 = v35;
  ((void (*)(char *, char *, uint64_t))v35)(v9, v14, v6);
  v23 = *(_QWORD *)(a2 + 24);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, (uint64_t)v9, (uint64_t *)(v15 + 136), v6, v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  swift_endAccess();
  v24 = v38;
  v26 = (void *)v38[1];
  v25 = v38[2];
  v39[3] = v6;
  v39[4] = v23;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v22)(boxed_opaque_existential_1, v36, v6);
  _JSONKeyedEncodingContainer._converted(_:)(v39, v15, v25, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  __swift_project_boxed_opaque_existential_1(v40, v40[3]);
  v28 = dispatch thunk of CodingKey.stringValue.getter();
  v30 = v29;
  v31 = v37;
  v32 = __DictionaryEncoder.box(_:)(a3);
  if (v31)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = v32;
    v39[0] = v28;
    v39[1] = v30;
    swift_bridgeObjectRetain();
    objc_msgSend(v26, sel___swift_setObject_forKeyedSubscript_, v33, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v24);
}

id __DictionaryEncoder.box(_:)(float a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;

  if ((~LODWORD(a1) & 0x7F800000) != 0)
  {
    v9 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    *(float *)&v10 = a1;
    return objc_msgSend(v9, sel_initWithFloat_, v10);
  }
  else
  {
    v3 = v1[9];
    if (v3)
    {
      if (a1 == INFINITY)
      {
        v4 = v1[8];
        swift_bridgeObjectRetain();
        v5 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
        v6 = (void *)MEMORY[0x18D75CC88](v4, v3);
        swift_bridgeObjectRelease();
        v7 = objc_msgSend(v5, sel_initWithString_, v6);

        return v7;
      }
      else
      {
        v14 = v1[12];
        v13 = v1[13];
        v16 = v1[10];
        v15 = v1[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v17 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
        if (a1 == -INFINITY)
        {
          v18 = (void *)MEMORY[0x18D75CC88](v16, v15);
          swift_bridgeObjectRelease();
          v19 = objc_msgSend(v17, sel_initWithString_, v18);

        }
        else
        {
          v20 = (void *)MEMORY[0x18D75CC88](v14, v13);
          swift_bridgeObjectRelease();
          v19 = objc_msgSend(v17, sel_initWithString_, v20);

        }
        return v19;
      }
    }
    else
    {
      swift_beginAccess();
      type metadata accessor for EncodingError();
      swift_allocError();
      v12 = v11;
      swift_bridgeObjectRetain();
      specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)(v12, a1);
      swift_bridgeObjectRelease();
      return (id)swift_willThrow();
    }
  }
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, double);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  void (*v35)(char *, double);
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39[5];
  unint64_t v40[4];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v35 - v13;
  v38 = v3;
  v15 = *v3;
  v35 = *(void (**)(char *, double))(v7 + 16);
  v36 = v16;
  v35((char *)&v35 - v13, v12);
  v17 = (_QWORD *)(v15 + 136);
  swift_beginAccess();
  v18 = *(_QWORD **)(v15 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v15 + 136) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *v17 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
    *v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
  v22 = v35;
  ((void (*)(char *, char *, uint64_t))v35)(v9, v14, v6);
  v23 = *(_QWORD *)(a2 + 24);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, (uint64_t)v9, (uint64_t *)(v15 + 136), v6, v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  swift_endAccess();
  v24 = v38;
  v26 = (void *)v38[1];
  v25 = v38[2];
  v39[3] = v6;
  v39[4] = v23;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v22)(boxed_opaque_existential_1, v36, v6);
  _JSONKeyedEncodingContainer._converted(_:)(v39, v15, v25, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  __swift_project_boxed_opaque_existential_1(v40, v40[3]);
  v28 = dispatch thunk of CodingKey.stringValue.getter();
  v30 = v29;
  v31 = v37;
  v32 = __DictionaryEncoder.box(_:)(a3);
  if (v31)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = v32;
    v39[0] = v28;
    v39[1] = v30;
    swift_bridgeObjectRetain();
    objc_msgSend(v26, sel___swift_setObject_forKeyedSubscript_, v33, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v24);
}

uint64_t $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  swift_beginAccess();
  v2 = *(_QWORD **)(v1 + 136);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v5 = v4 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(_QWORD *)(v1 + 136) = v2;
    swift_endAccess();
    return swift_release();
  }
LABEL_7:
  __break(1u);
  return result;
}

id __DictionaryEncoder.box(_:)(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;

  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a1);
  v3 = v1[9];
  if (v3)
  {
    if (a1 == INFINITY)
    {
      v4 = v1[8];
      swift_bridgeObjectRetain();
      v5 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      v6 = (void *)MEMORY[0x18D75CC88](v4, v3);
      swift_bridgeObjectRelease();
      v7 = objc_msgSend(v5, sel_initWithString_, v6);

      return v7;
    }
    else
    {
      v12 = v1[12];
      v11 = v1[13];
      v14 = v1[10];
      v13 = v1[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      if (a1 == -INFINITY)
      {
        v16 = (void *)MEMORY[0x18D75CC88](v14, v13);
        swift_bridgeObjectRelease();
        v17 = objc_msgSend(v15, sel_initWithString_, v16);

      }
      else
      {
        v18 = (void *)MEMORY[0x18D75CC88](v12, v11);
        swift_bridgeObjectRelease();
        v17 = objc_msgSend(v15, sel_initWithString_, v18);

      }
      return v17;
    }
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for EncodingError();
    swift_allocError();
    v10 = v9;
    swift_bridgeObjectRetain();
    specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)(v10, a1);
    swift_bridgeObjectRelease();
    return (id)swift_willThrow();
  }
}

uint64_t _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, double);
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t *, void *, uint64_t);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  id v37;
  void *v38;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];
  uint64_t v47;
  uint64_t v48;
  unint64_t v49[4];
  uint64_t *v50;

  v44 = a4;
  v45 = a5;
  v42 = a1;
  v40 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v40 - v13;
  v15 = *v5;
  v16 = *(void (**)(char *, double))(v7 + 16);
  v41 = v17;
  v16((char *)&v40 - v13, v12);
  v18 = (_QWORD *)(v15 + 136);
  swift_beginAccess();
  v19 = *(_QWORD **)(v15 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v15 + 136) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *v18 = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
    *v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
  ((void (*)(char *, char *, uint64_t))v16)(v9, v14, v6);
  v23 = (void (*)(uint64_t *, void *, uint64_t))v16;
  v24 = *(_QWORD *)(v40 + 24);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, (uint64_t)v9, (uint64_t *)(v15 + 136), v6, v24);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  swift_endAccess();
  v25 = v50;
  v27 = (void *)v50[1];
  v26 = v50[2];
  v47 = v6;
  v48 = v24;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46);
  v23(boxed_opaque_existential_1, v41, v6);
  v41 = v27;
  _JSONKeyedEncodingContainer._converted(_:)(v46, v15, v26, v49);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_project_boxed_opaque_existential_1(v49, v49[3]);
  v29 = dispatch thunk of CodingKey.stringValue.getter();
  v31 = v30;
  v32 = v44;
  v47 = v44;
  v48 = v45;
  v33 = __swift_allocate_boxed_opaque_existential_1(v46);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v33, v42, v32);
  v34 = v43;
  __DictionaryEncoder.box_(_:)(v46);
  if (v34)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    v36 = v25;
  }
  else
  {
    v37 = v35;
    v38 = v41;
    if (!v35)
      v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    v46[0] = v29;
    v46[1] = v31;
    swift_bridgeObjectRetain();
    objc_msgSend(v38, sel___swift_setObject_forKeyedSubscript_, v37, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    v36 = v50;
  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v36);
}

void _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v7 = v6;
  v50 = a4;
  v51 = a5;
  v49 = a6;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - v14;
  v16 = *v6;
  v18 = (_QWORD **)(v7 + 2);
  v17 = v7[2];
  v20 = *(_QWORD *)(v19 + 24);
  v54 = v9;
  v55 = v20;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v53);
  v48 = v10;
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v45 = a2;
  v46 = v22;
  v22((char *)boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(&v53, v16, v17, (unint64_t *)&v56);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
  __swift_project_boxed_opaque_existential_1(&v56, v58);
  v23 = dispatch thunk of CodingKey.stringValue.getter();
  v25 = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  v26 = (void *)v7[1];
  *(_QWORD *)&v53 = v23;
  *((_QWORD *)&v53 + 1) = v25;
  swift_bridgeObjectRetain_n();
  v27 = objc_msgSend(v26, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v27)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v53, &v56);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v56, (uint64_t)&v53);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableDictionary);
    if (!swift_dynamicCast())
    {
      *(_QWORD *)&v53 = 0;
      *((_QWORD *)&v53 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(133);
      v40._object = (void *)0x8000000187BDDB20;
      v40._countAndFlagsBits = 0xD000000000000038;
      String.append(_:)(v40);
      v41._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = 0x656B20726F66203ELL;
      v42._object = (void *)0xEB00000000222079;
      String.append(_:)(v42);
      v43._countAndFlagsBits = v23;
      v43._object = v25;
      String.append(_:)(v43);
      v44._countAndFlagsBits = 0xD00000000000003ELL;
      v44._object = (void *)0x8000000187BDDB60;
      String.append(_:)(v44);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();

    outlined init with take of Any(&v56, &v53);
    swift_dynamicCast();
    v28 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
    *(_QWORD *)&v56 = v23;
    *((_QWORD *)&v56 + 1) = v25;
    swift_bridgeObjectRetain();
    v28 = v29;
    objc_msgSend(v26, sel___swift_setObject_forKeyedSubscript_, v28, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  v30 = v46;
  v46(v15, v45, v9);
  v31 = *v18;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v18 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    *v18 = v31;
  }
  v34 = v31[2];
  v33 = v31[3];
  if (v34 >= v33 >> 1)
    *v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
  v35 = (uint64_t)v47;
  v30(v47, v15, v9);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v35, v7 + 2, v9, v20);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v9);
  v36 = v7[2];
  *(_QWORD *)&v56 = *v7;
  *((_QWORD *)&v56 + 1) = v28;
  v57 = v36;
  v38 = type metadata accessor for _JSONKeyedEncodingContainer(0, v50, v51, v37);
  swift_retain();
  swift_bridgeObjectRetain();
  v39 = v28;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v38);
  KeyedEncodingContainer.init<A>(_:)();
  $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v7);

}

uint64_t $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  v1 = a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v5 = v4 - 1;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(_QWORD *)(v1 + 16) = v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  id v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v40 = (char *)&v40 - v12;
  v13 = *v3;
  v14 = (_QWORD **)(v4 + 2);
  v15 = v4[2];
  v17 = *(_QWORD *)(v16 + 24);
  v47 = v7;
  v48 = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v46);
  v44 = v8;
  v19 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v41 = a1;
  v42 = v19;
  v19((char *)boxed_opaque_existential_1, a1, v7);
  _JSONKeyedEncodingContainer._converted(_:)(&v46, v13, v15, (unint64_t *)&v49);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
  __swift_project_boxed_opaque_existential_1(&v49, v50);
  v20 = dispatch thunk of CodingKey.stringValue.getter();
  v22 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  v23 = (void *)v4[1];
  *(_QWORD *)&v46 = v20;
  *((_QWORD *)&v46 + 1) = v22;
  swift_bridgeObjectRetain_n();
  v24 = objc_msgSend(v23, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v46, &v49);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v49, (uint64_t)&v46);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableArray);
    if (!swift_dynamicCast())
    {
      *(_QWORD *)&v46 = 0;
      *((_QWORD *)&v46 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(140);
      v37._object = (void *)0x8000000187BDDA80;
      v37._countAndFlagsBits = 0xD000000000000043;
      String.append(_:)(v37);
      v38._countAndFlagsBits = v20;
      v38._object = v22;
      String.append(_:)(v38);
      v39._countAndFlagsBits = 0xD000000000000047;
      v39._object = (void *)0x8000000187BDDAD0;
      String.append(_:)(v39);
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();

    outlined init with take of Any(&v49, &v46);
    swift_dynamicCast();
    v25 = v45;
  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
    *(_QWORD *)&v49 = v20;
    *((_QWORD *)&v49 + 1) = v22;
    swift_bridgeObjectRetain();
    v25 = v26;
    objc_msgSend(v23, sel___swift_setObject_forKeyedSubscript_, v25, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  v27 = v40;
  v28 = v42;
  v42(v40, v41, v7);
  v29 = *v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v14 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    *v14 = v29;
  }
  v32 = v29[2];
  v31 = v29[3];
  if (v32 >= v31 >> 1)
    *v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
  v33 = (uint64_t)v43;
  v28(v43, v27, v7);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v33, v4 + 2, v7, v17);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v27, v7);
  v34 = v4[2];
  v35 = *v4;
  a3[3] = (uint64_t)&unk_1E1AFBAB8;
  a3[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  *a3 = v35;
  a3[1] = (uint64_t)v25;
  a3[2] = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  return $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v4);
}

uint64_t _JSONKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[5];
  unint64_t v12[5];

  v3 = *v1;
  v4 = v1[2];
  v11[3] = &unk_1E1B0CCC8;
  v11[4] = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v5 = swift_allocObject();
  v11[0] = v5;
  *(_QWORD *)(v5 + 16) = 0x7265707573;
  *(_QWORD *)(v5 + 24) = 0xE500000000000000;
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 1;
  swift_retain();
  _JSONKeyedEncodingContainer._converted(_:)(v11, v3, v4, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  v6 = (void *)v1[1];
  v7 = type metadata accessor for __DictionaryReferencingEncoder();
  v8 = swift_allocObject();
  v9 = specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(v3, 0x7265707573, 0xE500000000000000, 0, 1, v12, v6, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  a1[3] = v7;
  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryReferencingEncoder and conformance __DictionaryEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryReferencingEncoder, (uint64_t)&protocol conformance descriptor for __DictionaryEncoder);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _JSONKeyedEncodingContainer.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22[5];
  unint64_t v23[5];

  v21 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for __DictionaryReferencingEncoder();
  v10 = *(_QWORD *)v3;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v11(v9, a1, v6);
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v22[3] = v6;
  v22[4] = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  v11((char *)boxed_opaque_existential_1, a1, v6);
  swift_retain();
  _JSONKeyedEncodingContainer._converted(_:)(v22, v10, v12, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v15 = *(id *)(v3 + 8);
  v16 = v20;
  v17 = specialized __DictionaryReferencingEncoder.__allocating_init(referencing:key:convertedKey:wrapping:)(v10, (uint64_t)v9, v23, v15, v20, v6, v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v18 = v21;
  v21[3] = v16;
  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryReferencingEncoder and conformance __DictionaryEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryReferencingEncoder, (uint64_t)&protocol conformance descriptor for __DictionaryEncoder);
  v18[4] = result;
  *v18 = v17;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(char a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, double a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, float a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED8E8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED918]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED940]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED908]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED928]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED910]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED938]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

void protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(float a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  unint64_t v20;
  id v21;

  v2 = v1;
  v4 = *v1;
  v16 = (id)v1[1];
  v5 = objc_msgSend(v16, sel_count);
  *(_QWORD *)&v18 = 0x207865646E49;
  *((_QWORD *)&v18 + 1) = 0xE600000000000000;
  v21 = v5;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(v4 + 136);
  swift_beginAccess();
  v8 = *(_QWORD **)(v4 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v19 = &unk_1E1B0CCC8;
  v20 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v12 = swift_allocObject();
  *(_QWORD *)&v18 = v12;
  *(_QWORD *)(v12 + 16) = 0x207865646E49;
  *(_QWORD *)(v12 + 24) = 0xE600000000000000;
  *(_QWORD *)(v12 + 32) = v5;
  *(_BYTE *)(v12 + 40) = 0;
  v8[2] = v11 + 1;
  outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)&v8[5 * v11 + 4]);
  v13 = __DictionaryEncoder.box(_:)(a1);
  if (!v17)
  {
    v14 = v13;
    objc_msgSend(v16, sel_addObject_, v13);

  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(double a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  unint64_t v20;
  id v21;

  v2 = v1;
  v4 = *v1;
  v16 = (id)v1[1];
  v5 = objc_msgSend(v16, sel_count);
  *(_QWORD *)&v18 = 0x207865646E49;
  *((_QWORD *)&v18 + 1) = 0xE600000000000000;
  v21 = v5;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(v4 + 136);
  swift_beginAccess();
  v8 = *(_QWORD **)(v4 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v19 = &unk_1E1B0CCC8;
  v20 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v12 = swift_allocObject();
  *(_QWORD *)&v18 = v12;
  *(_QWORD *)(v12 + 16) = 0x207865646E49;
  *(_QWORD *)(v12 + 24) = 0xE600000000000000;
  *(_QWORD *)(v12 + 32) = v5;
  *(_BYTE *)(v12 + 40) = 0;
  v8[2] = v11 + 1;
  outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)&v8[5 * v11 + 4]);
  v13 = __DictionaryEncoder.box(_:)(a1);
  if (!v17)
  {
    v14 = v13;
    objc_msgSend(v16, sel_addObject_, v13);

  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
}

uint64_t _JSONUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t *v3;
  void *v5;
  uint64_t v6;
  id v7;
  Swift::String v8;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  void *v16;
  id v17;
  void *v19;
  uint64_t v22;
  __int128 v23;
  void *v24;
  unint64_t v25;
  id v26;
  uint64_t *v27;

  v6 = *v3;
  v5 = (void *)v3[1];
  v7 = objc_msgSend(v5, sel_count);
  *(_QWORD *)&v23 = 0x207865646E49;
  *((_QWORD *)&v23 + 1) = 0xE600000000000000;
  v26 = v7;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(v6 + 136);
  swift_beginAccess();
  v10 = *(_QWORD **)(v6 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 136) = v10;
  v19 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *v9 = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *v9 = v10;
  }
  v24 = &unk_1E1B0CCC8;
  v25 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v14 = swift_allocObject();
  *(_QWORD *)&v23 = v14;
  *(_QWORD *)(v14 + 16) = 0x207865646E49;
  *(_QWORD *)(v14 + 24) = 0xE600000000000000;
  *(_QWORD *)(v14 + 32) = v7;
  *(_BYTE *)(v14 + 40) = 0;
  v10[2] = v13 + 1;
  outlined init with take of OptionalBinaryInteger(&v23, (uint64_t)&v10[5 * v13 + 4]);
  v24 = a2;
  v25 = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, void *))(*((_QWORD *)a2 - 1) + 16))(boxed_opaque_existential_1, a1, a2);
  __DictionaryEncoder.box_(_:)(&v23);
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  }
  else
  {
    v17 = v16;
    if (!v16)
      v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    objc_msgSend(v19, sel_addObject_, v17);

  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v27);
}

uint64_t _JSONUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v7;
  id v8;
  Swift::String v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  id v22;

  v4 = v3;
  v7 = (void *)v3[1];
  v8 = objc_msgSend(v7, sel_count);
  *(_QWORD *)&v18 = 0x207865646E49;
  *((_QWORD *)&v18 + 1) = 0xE600000000000000;
  v22 = v8;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)v3[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v20 = &unk_1E1B0CCC8;
  v21 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v13 = swift_allocObject();
  *(_QWORD *)&v18 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v8;
  *(_BYTE *)(v13 + 40) = 0;
  v10[2] = v12 + 1;
  outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)&v10[5 * v12 + 4]);
  v4[2] = v10;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  objc_msgSend(v7, sel_addObject_, v14);
  *(_QWORD *)&v18 = *v4;
  *((_QWORD *)&v18 + 1) = v14;
  v19 = v10;
  v16 = type metadata accessor for _JSONKeyedEncodingContainer(0, a2, a3, v15);
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v16);
  KeyedEncodingContainer.init<A>(_:)();
  return $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v4);
}

uint64_t _JSONUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  void *v4;
  id v5;
  Swift::String v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  __int128 v14;
  void *v15;
  unint64_t v16;
  id v17;

  v2 = v1;
  v4 = (void *)v1[1];
  v5 = objc_msgSend(v4, sel_count);
  *(_QWORD *)&v14 = 0x207865646E49;
  *((_QWORD *)&v14 + 1) = 0xE600000000000000;
  v17 = v5;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)v1[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v15 = &unk_1E1B0CCC8;
  v16 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v10 = swift_allocObject();
  *(_QWORD *)&v14 = v10;
  *(_QWORD *)(v10 + 16) = 0x207865646E49;
  *(_QWORD *)(v10 + 24) = 0xE600000000000000;
  *(_QWORD *)(v10 + 32) = v5;
  *(_BYTE *)(v10 + 40) = 0;
  v7[2] = v9 + 1;
  outlined init with take of OptionalBinaryInteger(&v14, (uint64_t)&v7[5 * v9 + 4]);
  v2[2] = (uint64_t)v7;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
  objc_msgSend(v4, sel_addObject_, v11);
  v12 = *v2;
  a1[3] = &unk_1E1AFBAB8;
  a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  *a1 = v12;
  a1[1] = v11;
  a1[2] = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  return $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v2);
}

id protocol witness for UnkeyedEncodingContainer.count.getter in conformance _JSONUnkeyedEncodingContainer()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 8), sel_count);
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _JSONUnkeyedEncodingContainer()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E38]), sel_init);
  objc_msgSend(v1, sel_addObject_, v2);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(char a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
  objc_msgSend(v2, sel_addObject_, v3);

}

{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v5 = *(void **)(v2 + 8);
  v6 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v7 = (void *)MEMORY[0x18D75CC88](a1, a2);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithString_, v7);

  objc_msgSend(v5, sel_addObject_, v8);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(double a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(float a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(__int16 a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(unsigned __int8 a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(unsigned __int16 a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  void *v5;
  id v6;

  v5 = *(void **)(v4 + 8);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), *a4, a1);
  objc_msgSend(v5, sel_addObject_, v6);

}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, void *a2, unint64_t a3)
{
  return _JSONUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _JSONUnkeyedEncodingContainer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *v1;
  v3 = (void *)v1[1];
  swift_retain();
  v5 = objc_msgSend(v3, sel_count);
  v6 = type metadata accessor for __DictionaryReferencingEncoder();
  swift_allocObject();
  v7 = __DictionaryReferencingEncoder.init(referencing:at:wrapping:)(v4, (uint64_t)v5, v3);
  a1[3] = v6;
  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryReferencingEncoder and conformance __DictionaryEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryReferencingEncoder, (uint64_t)&protocol conformance descriptor for __DictionaryEncoder);
  a1[4] = result;
  *a1 = v7;
  return result;
}

void __DictionaryEncoder.encodeNil()()
{
  _QWORD *v0;
  id v1;
  id v2;

  if (((*(uint64_t (**)(void))(*v0 + 168))() & 1) != 0)
  {
    v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E38]), sel_init);
    swift_beginAccess();
    v2 = v1;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(char a1)
{
  _QWORD *v1;
  id v3;
  id v4;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
    swift_beginAccess();
    v4 = v3;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

{
  _QWORD *v1;
  id v3;
  id v4;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithChar_, a1);
    swift_beginAccess();
    v4 = v3;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(__int16 a1)
{
  _QWORD *v1;
  id v3;
  id v4;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithShort_, a1);
    swift_beginAccess();
    v4 = v3;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(unsigned __int8 a1)
{
  _QWORD *v1;
  id v3;
  id v4;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedChar_, a1);
    swift_beginAccess();
    v4 = v3;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(unsigned __int16 a1)
{
  _QWORD *v1;
  id v3;
  id v4;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedShort_, a1);
    swift_beginAccess();
    v4 = v3;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(uint64_t a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;

  if (((*(uint64_t (**)(void))(*v2 + 168))() & 1) != 0)
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), *a2, a1);
    swift_beginAccess();
    v6 = v5;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  void *v7;
  id v8;
  id v9;

  v3 = v2;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v2 + 168))() & 1) != 0)
  {
    v6 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v7 = (void *)MEMORY[0x18D75CC88](a1, a2);
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_initWithString_, v7);

    swift_beginAccess();
    v9 = v8;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(float a1)
{
  _QWORD *v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v4 = __DictionaryEncoder.box(_:)(a1);
    if (!v2)
    {
      v5 = v4;
      swift_beginAccess();
      v6 = v5;
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(double a1)
{
  _QWORD *v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;

  if (((*(uint64_t (**)(void))(*v1 + 168))() & 1) != 0)
  {
    v4 = __DictionaryEncoder.box(_:)(a1);
    if (!v2)
    {
      v5 = v4;
      swift_beginAccess();
      v6 = v5;
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  void *v9;
  id v10;
  id v11;
  uint64_t v12[5];

  if (((*(uint64_t (**)(void))(*v3 + 168))() & 1) != 0)
  {
    v12[3] = a2;
    v12[4] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    __DictionaryEncoder.box_(_:)(v12);
    if (v4)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
    else
    {
      v10 = v9;
      if (!v9)
        v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      swift_beginAccess();
      v11 = v10;
      MEMORY[0x18D75CF58]();
      if (*(_QWORD *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __DictionaryEncoder()
{
  __DictionaryEncoder.encodeNil()();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(char a1)
{
  __DictionaryEncoder.encode(_:)(a1);
}

{
  __DictionaryEncoder.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(uint64_t a1, uint64_t a2)
{
  __DictionaryEncoder.encode(_:)(a1, a2);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(double a1)
{
  __DictionaryEncoder.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(float a1)
{
  __DictionaryEncoder.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(uint64_t a1)
{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithInteger_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithInt_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithLongLong_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(__int16 a1)
{
  __DictionaryEncoder.encode(_:)(a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(unsigned __int8 a1)
{
  __DictionaryEncoder.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(unsigned __int16 a1)
{
  __DictionaryEncoder.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __DictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __DictionaryEncoder.encode<A>(_:)(a1, a2, a3);
}

uint64_t specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;

  v4 = 0x616E2E74616F6C46;
  if (a2 == -INFINITY)
    v4 = 0x692E74616F6C462DLL;
  v5 = 0xE90000000000006ELL;
  if (a2 == -INFINITY)
    v5 = 0xEF7974696E69666ELL;
  if (a2 == INFINITY)
    v6 = 0x6E692E74616F6C46;
  else
    v6 = v4;
  if (a2 == INFINITY)
    v7 = (void *)0xEE007974696E6966;
  else
    v7 = (void *)v5;
  _StringGuts.grow(_:)(154);
  v8._object = (void *)0x8000000187BDCBD0;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000087;
  v10._object = (void *)0x8000000187BDCBF0;
  String.append(_:)(v10);
  type metadata accessor for (Any, EncodingError.Context)();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB188];
  *(float *)a1 = a2;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC4B0];
  v12 = type metadata accessor for EncodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, v11, v12);
}

uint64_t specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;

  v4 = 0x6E2E656C62756F44;
  if (a2 == -INFINITY)
    v4 = 0xD000000000000010;
  v5 = 0x8000000187BDCC80;
  if (a2 != -INFINITY)
    v5 = 0xEA00000000006E61;
  if (a2 == INFINITY)
    v6 = 0x692E656C62756F44;
  else
    v6 = v4;
  if (a2 == INFINITY)
    v7 = (void *)0xEF7974696E69666ELL;
  else
    v7 = (void *)v5;
  _StringGuts.grow(_:)(154);
  v8._countAndFlagsBits = 0xD000000000000011;
  v8._object = (void *)0x8000000187BDCBD0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000087;
  v10._object = (void *)0x8000000187BDCBF0;
  String.append(_:)(v10);
  type metadata accessor for (Any, EncodingError.Context)();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB070];
  *(double *)a1 = a2;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v11 = *MEMORY[0x1E0DEC4B0];
  v12 = type metadata accessor for EncodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, v11, v12);
}

unint64_t __DictionaryEncoder.box(_:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v44;
  __int128 v45;
  void *v46;
  unint64_t v47;
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  int64_t v54;

  v3 = v2;
  v4 = v1;
  v5 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  v44 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  if (!(v6 >> 62))
  {
    v39 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
LABEL_66:
  swift_bridgeObjectRetain();
  v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  v54 = v3;
  swift_beginAccess();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  v40 = v5;
  specialized Array._endMutation()();
  v5 = &v51;
  swift_endAccess();
  v41 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = v44 + 136;
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v3 = 0;
  v42 = (unint64_t)(v8 + 63) >> 6;
  if (v10)
  {
LABEL_8:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v3 << 6);
LABEL_9:
    v15 = *(_QWORD *)(a1 + 56);
    v16 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v14);
    v17 = v16[1];
    *(_QWORD *)&v48 = *v16;
    *((_QWORD *)&v48 + 1) = v17;
    outlined init with copy of TableColumnList(v15 + 40 * v14, (uint64_t)v49);
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  while (1)
  {
    v18 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_65;
    if (v18 < v42)
    {
      v19 = *(_QWORD *)(v41 + 8 * v18);
      if (v19)
        goto LABEL_13;
      v3 += 2;
      if (v18 + 1 >= v42)
      {
        v3 = v18;
      }
      else
      {
        v19 = *(_QWORD *)(v41 + 8 * v3);
        if (v19)
        {
          ++v18;
LABEL_13:
          v10 = (v19 - 1) & v19;
          v14 = __clz(__rbit64(v19)) + (v18 << 6);
          v3 = v18;
          goto LABEL_9;
        }
        if (v18 + 2 < v42)
        {
          v19 = *(_QWORD *)(v41 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_13;
          }
          v33 = v18 + 3;
          if (v18 + 3 < v42)
          {
            v19 = *(_QWORD *)(v41 + 8 * v33);
            if (!v19)
            {
              while (1)
              {
                v18 = v33 + 1;
                if (__OFADD__(v33, 1))
                  goto LABEL_73;
                if (v18 >= v42)
                {
                  v3 = v42 - 1;
                  goto LABEL_18;
                }
                v19 = *(_QWORD *)(v41 + 8 * v18);
                ++v33;
                if (v19)
                  goto LABEL_13;
              }
            }
            v18 += 3;
            goto LABEL_13;
          }
          v3 = v18 + 2;
        }
      }
    }
LABEL_18:
    v10 = 0;
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    v48 = 0u;
LABEL_19:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v48, (uint64_t)&v51);
    v20 = v52;
    if (!v52)
      break;
    v21 = v51;
    outlined init with take of OptionalBinaryInteger(&v53, (uint64_t)&v48);
    v22 = *(uint64_t **)v11;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      *(_QWORD *)v11 = v22;
    }
    v25 = v22[2];
    v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
      *(_QWORD *)v11 = v22;
    }
    v46 = &unk_1E1B0CCC8;
    v47 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v26 = swift_allocObject();
    *(_QWORD *)&v45 = v26;
    *(_QWORD *)(v26 + 16) = v21;
    *(_QWORD *)(v26 + 24) = v20;
    *(_QWORD *)(v26 + 32) = 0;
    *(_BYTE *)(v26 + 40) = 1;
    v22[2] = v25 + 1;
    outlined init with take of OptionalBinaryInteger(&v45, (uint64_t)&v22[5 * v25 + 4]);
    v27 = v54;
    v28 = __DictionaryEncoder.box_(_:)(&v48);
    if (v27)
    {
      swift_bridgeObjectRelease();
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
      swift_release();
      v35 = *(_QWORD *)(v44 + 16);
      if (v35 >> 62)
      {
        swift_bridgeObjectRetain();
        v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v39 < v36)
      {
        swift_beginAccess();
        if ((unint64_t)*v40 >> 62)
        {
          swift_bridgeObjectRetain();
          v38 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v38)
            goto LABEL_72;
        }
        else if (!*(_QWORD *)((*v40 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_72;
        }
        result = specialized RangeReplaceableCollection<>.popLast()();
        if (!result)
          goto LABEL_75;
        v35 = result;
        swift_endAccess();

      }
      swift_willThrow();
      goto LABEL_62;
    }
    v29 = (id)v28;
    v54 = 0;
    if (!v28)
      v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
    *(_QWORD *)&v45 = v21;
    *((_QWORD *)&v45 + 1) = v20;
    swift_bridgeObjectRetain();
    objc_msgSend(v7, sel___swift_setObject_forKeyedSubscript_, v29, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_beginAccess();
    v5 = *(uint64_t **)v11;
    if (!*(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v5;
    if ((v30 & 1) != 0)
    {
      v31 = v5[2];
      if (!v31)
        goto LABEL_64;
    }
    else
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *(_QWORD *)v11 = v5;
      v31 = v5[2];
      if (!v31)
        goto LABEL_64;
    }
    v32 = v31 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5[5 * v31 - 1]);
    v5[2] = v32;
    *(_QWORD *)v11 = v5;
    swift_endAccess();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    if (v10)
      goto LABEL_8;
  }
  swift_release();
  if ((unint64_t)*v40 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v39 >= v34)
  {
    v35 = 0;
LABEL_62:

    return v35;
  }
  swift_beginAccess();
  if ((unint64_t)*v40 >> 62)
  {
    swift_bridgeObjectRetain();
    v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v37)
      goto LABEL_72;
LABEL_51:
    result = specialized RangeReplaceableCollection<>.popLast()();
    if (!result)
      goto LABEL_74;
    v35 = result;
    swift_endAccess();
    goto LABEL_62;
  }
  if (*(_QWORD *)((*v40 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_51;
LABEL_72:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t __DictionaryReferencingEncoder.init(referencing:at:wrapping:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  Swift::String v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v30;
  uint64_t v31;
  __int128 v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;

  v4 = v3;
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = a3;
  *(_QWORD *)(v3 + 160) = a2;
  *(_QWORD *)(v3 + 168) = 0;
  *(_BYTE *)(v3 + 176) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 64);
  v28 = *(void **)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v31 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 128);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 120);
  v13 = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(v4 + 32) = v6;
  *(_BYTE *)(v4 + 40) = v13;
  *(_QWORD *)(v4 + 48) = v7;
  *(_QWORD *)(v4 + 56) = v24;
  *(_QWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 72) = v26;
  *(_QWORD *)(v4 + 80) = v9;
  *(_QWORD *)(v4 + 88) = v10;
  *(_QWORD *)(v4 + 96) = v31;
  *(_QWORD *)(v4 + 104) = v25;
  *(_QWORD *)(v4 + 112) = v11;
  *(_QWORD *)(v4 + 120) = v27;
  *(_QWORD *)(v4 + 128) = v12;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 136) = v14;
  v16 = (_QWORD *)(v4 + 136);
  *(_QWORD *)(v4 + 16) = v15;
  *(_QWORD *)(v4 + 24) = v28;
  *(_QWORD *)&v33 = 0x207865646E49;
  *((_QWORD *)&v33 + 1) = 0xE600000000000000;
  v36 = a2;
  swift_retain();
  v30 = a3;
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v28, v6, v13);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v7);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v8, v26);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v18 = *(_QWORD **)(v4 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 136) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *v16 = v18;
  }
  v21 = v18[2];
  v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    *v16 = v18;
  }
  v34 = &unk_1E1B0CCC8;
  v35 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v22 = swift_allocObject();
  *(_QWORD *)&v33 = v22;
  *(_QWORD *)(v22 + 16) = 0x207865646E49;
  *(_QWORD *)(v22 + 24) = 0xE600000000000000;
  *(_QWORD *)(v22 + 32) = a2;
  *(_BYTE *)(v22 + 40) = 0;
  v18[2] = v21 + 1;
  outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)&v18[5 * v21 + 4]);
  swift_release();
  swift_release();

  return v4;
}

BOOL __DictionaryReferencingEncoder.canEncodeNewValue.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  v3 = v0[17];
  v4 = v0[18];
  v5 = *(_QWORD *)(v3 + 16);
  swift_beginAccess();
  return v2 == v5 + ~*(_QWORD *)(*(_QWORD *)(v4 + 136) + 16);
}

void __DictionaryReferencingEncoder.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  outlined consume of __DictionaryReferencingEncoder.Reference(*(void **)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_BYTE *)(v0 + 176));
}

uint64_t __DictionaryReferencingEncoder.deinit()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 16);
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4 == 1)
      goto LABEL_3;
LABEL_8:
    if (!v4)
    {
      v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
      v7 = &lazy cache variable for type metadata for NSDictionary;
      goto LABEL_10;
    }
LABEL_17:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4 != 1)
    goto LABEL_8;
LABEL_3:
  swift_beginAccess();
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21)
      goto LABEL_17;
  }
  else if (!*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_17;
  }
  v5 = specialized RangeReplaceableCollection<>.popLast()();
  if (!v5)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = (id)v5;
  swift_endAccess();
  v7 = &lazy cache variable for type metadata for NSObject;
LABEL_10:
  v8 = type metadata accessor for NSObject(0, (unint64_t *)v7);
  v23 = v8;
  v22[0] = v6;
  v10 = *(void **)(v1 + 152);
  v9 = *(_QWORD *)(v1 + 160);
  v11 = *(_QWORD *)(v1 + 168);
  if ((*(_BYTE *)(v1 + 176) & 1) != 0)
  {
    v12 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    v13 = v10;
    swift_bridgeObjectRetain();
    v14 = (void *)MEMORY[0x18D75CC88](v9, v11);
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v12, sel_initWithString_, v14);

    __swift_project_boxed_opaque_existential_1(v22, v23);
    objc_msgSend(v13, sel_setObject_forKeyedSubscript_, _bridgeAnythingToObjectiveC<A>(_:)(), v15);

    swift_unknownObjectRelease();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v22, v8);
    objc_msgSend(v10, sel_insertObject_atIndex_, _bridgeAnythingToObjectiveC<A>(_:)(), v9);
    swift_unknownObjectRelease();
    outlined consume of __DictionaryReferencingEncoder.Reference(v10, v9, v11, 0);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v1 + 48);
  v17 = *(_QWORD *)(v1 + 64);
  v18 = *(_QWORD *)(v1 + 72);
  v19 = *(_QWORD *)(v1 + 112);
  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(v16);
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(v17, v18);
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of __DictionaryReferencingEncoder.Reference(*(void **)(v1 + 152), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168), *(_BYTE *)(v1 + 176));
  return v1;
}

uint64_t __DictionaryReferencingEncoder.__deallocating_deinit()
{
  __DictionaryReferencingEncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __DictionaryReferencingEncoder()
{
  return objc_opt_self();
}

uint64_t DictionaryDecoder.decode<A>(_:from:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[32];
  _OWORD v55[2];
  __int128 v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v53 = a4;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v41 - v13;
  strcpy(v54, "__DICTIONARY__");
  v54[15] = -18;
  v15 = objc_msgSend(a2, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v15)
  {
    v41 = v11;
    v42 = v10;
    v43 = a5;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v54, v55);
    outlined init with copy of Any((uint64_t)v55, (uint64_t)v54);
    v17 = *(void **)(v5 + 16);
    v16 = *(_QWORD *)(v5 + 24);
    v18 = *(_QWORD *)(v5 + 40);
    v19 = *(_QWORD *)(v5 + 48);
    v50 = v14;
    v51 = a3;
    v21 = *(_QWORD *)(v5 + 56);
    v20 = *(_QWORD *)(v5 + 64);
    v52 = a1;
    v22 = *(_QWORD *)(v5 + 72);
    v23 = *(_QWORD *)(v5 + 80);
    v24 = *(_QWORD *)(v5 + 96);
    v46 = *(_QWORD *)(v5 + 88);
    v45 = v24;
    v25 = *(_QWORD *)(v5 + 112);
    v48 = *(_QWORD *)(v5 + 104);
    v47 = v25;
    v49 = *(_QWORD *)(v5 + 120);
    *(_QWORD *)&v56 = v17;
    *((_QWORD *)&v56 + 1) = v16;
    v26 = *(_BYTE *)(v5 + 32);
    v57 = v26;
    v58 = v18;
    v59 = v19;
    v60 = v21;
    v61 = v20;
    v62 = v22;
    v63 = v23;
    v64 = v46;
    v65 = v24;
    v66 = v48;
    v67 = v25;
    v68 = v49;
    type metadata accessor for __DictionaryDecoder();
    v44 = swift_allocObject();
    outlined copy of DictionaryDecoder.DateDecodingStrategy(v17, v16, v26);
    outlined copy of DictionaryDecoder.KeyDecodingStrategy(v18);
    v27 = v21;
    v28 = (uint64_t)v50;
    v29 = v20;
    v30 = v51;
    v31 = v52;
    outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v27, v29);
    outlined copy of DictionaryDecoder.KeyDecodingStrategy(v48);
    swift_bridgeObjectRetain();
    __DictionaryDecoder.init(referencing:at:options:)((uint64_t)v54, MEMORY[0x1E0DEE9D8], &v56);
    v32 = v69;
    __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)v55, v31, v30, v53, v28);
    if (v32)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
      return swift_release();
    }
    else
    {
      v37 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v28, 1, v30) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v28, v42);
        v38 = type metadata accessor for DecodingError();
        swift_allocError();
        v40 = v39;
        type metadata accessor for (@thick Any.Type, DecodingError.Context)();
        *v40 = v31;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x1E0DEC460], v38);
        swift_willThrow();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v43, v28, v30);
      }
    }
  }
  else
  {
    v34 = type metadata accessor for DecodingError();
    swift_allocError();
    v36 = v35;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, *MEMORY[0x1E0DEC458], v34);
    return swift_willThrow();
  }
}

void __DictionaryDecoder.unbox<A>(_:as:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v8;
  uint64_t v9[4];

  __DictionaryDecoder.unbox_(_:as:)(a1, a2, a4, v9);
  if (!v5)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, v8 ^ 1u, 1, a3);
  }
}

uint64_t DictionaryDecoder.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(_QWORD *)(v0 + 40));
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DictionaryDecoder()
{
  return objc_opt_self();
}

uint64_t __DictionaryDecoder.init(referencing:at:options:)(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  char **v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  _BYTE v17[32];

  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  v7 = (char **)(v3 + 16);
  outlined init with copy of Any(a1, (uint64_t)v17);
  swift_beginAccess();
  outlined init with copy of Any((uint64_t)v17, (uint64_t)v16);
  v8 = *(char **)(v3 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    *v7 = v8;
  }
  v11 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  *((_QWORD *)v8 + 2) = v11 + 1;
  outlined init with take of Any(v16, &v8[32 * v11 + 32]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1(a1);
  v12 = a3[2];
  *(_OWORD *)(v3 + 72) = a3[3];
  v13 = a3[5];
  *(_OWORD *)(v3 + 88) = a3[4];
  *(_OWORD *)(v3 + 104) = v13;
  *(_OWORD *)(v3 + 120) = a3[6];
  v14 = a3[1];
  *(_OWORD *)(v3 + 24) = *a3;
  *(_OWORD *)(v3 + 40) = v14;
  *(_QWORD *)(v3 + 136) = a2;
  *(_OWORD *)(v3 + 56) = v12;
  return v3;
}

uint64_t __DictionaryDecoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  _QWORD v22[4];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v3 + 16), (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if ((swift_dynamicCast() & 1) != 0)
  {

    v6 = type metadata accessor for DecodingError();
    swift_allocError();
    v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v8 = type metadata accessor for KeyedDecodingContainer();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, *MEMORY[0x1E0DEC460], v6);
  }
  else
  {
    _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v3 + 16), (uint64_t)v22);
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v9 = swift_retain();
      v10 = specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(v9, (uint64_t)v21);
      v12 = v11;
      v14 = v13;
      swift_release();
      v22[0] = v10;
      v22[1] = v12;
      v22[2] = v14;
      v16 = type metadata accessor for _DictionaryKeyedDecodingContainer(0, a2, a3, v15);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DictionaryKeyedDecodingContainer<A>, v16);
      return KeyedDecodingContainer.init<A>(_:)();
    }
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v20 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC450], v18);
  }
  return swift_willThrow();
}

uint64_t _DictionaryDecodingStorage.topContainer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    return outlined init with copy of Any(a1 + 32 * v3, a2);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __DictionaryDecoder.unkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v11;
  void *v12;
  _BYTE v13[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v1 + 16), (uint64_t)v13);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  v3 = MEMORY[0x1E0DEE9B8] + 8;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v4 = type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v6 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UnkeyedDecodingContainer);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v7 = (unsigned int *)MEMORY[0x1E0DEC460];
  }
  else
  {
    _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v1 + 16), (uint64_t)v13);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Any], v3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_beginAccess();
      v8 = *(_QWORD *)(v1 + 136);
      a1[3] = &unk_1E1AFBA30;
      a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer();
      v9 = (_QWORD *)swift_allocObject();
      *a1 = v9;
      v9[2] = v1;
      v9[3] = v12;
      v9[4] = v8;
      v9[5] = 0;
      swift_retain();
      return swift_bridgeObjectRetain();
    }
    v4 = type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v11;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v7 = (unsigned int *)MEMORY[0x1E0DEC450];
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *v7, v4);
  return swift_willThrow();
}

uint64_t __DictionaryDecoder.__deallocating_deinit()
{
  return __DictionaryEncoder.__deallocating_deinit((void (*)(_QWORD, _QWORD, _QWORD))outlined consume of DictionaryDecoder.DateDecodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.DataDecodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.KeyDecodingStrategy);
}

uint64_t __DictionaryEncoder.__deallocating_deinit(void (*a1)(_QWORD, _QWORD, _QWORD), void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 56);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v3 + 72);
  v10 = *(_QWORD *)(v3 + 120);
  v11 = *(_QWORD *)(v3 + 112);
  a1(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(unsigned __int8 *)(v3 + 40));
  a2(v5, v6);
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(v7, v8);
  a3(v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __DictionaryDecoder()
{
  return objc_opt_self();
}

id outlined copy of DictionaryDecoder.DateDecodingStrategy(id result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return (id)swift_retain();
  if (!a3)
    return result;
  return result;
}

uint64_t destroy for DictionaryDecoder._Options(uint64_t a1, uint64_t a2)
{
  return destroy for DictionaryDecoder._Options(a1, a2, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

void outlined consume of DictionaryDecoder.DateDecodingStrategy(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }
  else if (!a3)
  {

  }
}

uint64_t initializeWithCopy for DictionaryDecoder._Options(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t *assignWithCopy for DictionaryDecoder._Options(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (positiveInfinity: String, negativeInfinity: String, nan: String)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (positiveInfinity: String, negativeInfinity: String, nan: String)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
  }
}

uint64_t *assignWithTake for DictionaryDecoder._Options(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder._Options(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

void *type metadata accessor for DictionaryDecoder._Options()
{
  return &unk_1E1AC2F28;
}

void *type metadata accessor for _DictionaryDecodingStorage()
{
  return &unk_1E1AF14F8;
}

_QWORD *destroy for DictionaryDecoder.KeyDecodingStrategy(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

uint64_t getEnumTag for DictionaryDecoder.KeyDecodingStrategy(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for DictionaryDecoder.KeyDecodingStrategy(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.KeyDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.KeyDecodingStrategy;
}

double destructiveInjectEnumTag for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.NonConformingFloatDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.NonConformingFloatDecodingStrategy;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.DataDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.DataDecodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy);
}

void destroy for DictionaryDecoder.DateDecodingStrategy(uint64_t a1)
{
  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t *assignWithTake for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t getEnumTag for DictionaryDecoder.DateDecodingStrategy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for DictionaryDecoder.DateDecodingStrategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.DateDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.DateDecodingStrategy;
}

id outlined copy of __DictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v4;

  if ((a4 & 1) == 0)
    return a1;
  v4 = a1;
  return (id)swift_bridgeObjectRetain();
}

void destroy for __DictionaryReferencingEncoder.Reference(uint64_t a1)
{
  outlined consume of __DictionaryReferencingEncoder.Reference(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

void outlined consume of __DictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{

  if ((a4 & 1) != 0)
    swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __DictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of __DictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for __DictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of __DictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of __DictionaryReferencingEncoder.Reference(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for __DictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of __DictionaryReferencingEncoder.Reference(v5, v7, v6, v8);
  return a1;
}

void *type metadata accessor for __DictionaryReferencingEncoder.Reference()
{
  return &unk_1E1AFE670;
}

uint64_t destroy for DictionaryEncoder._Options(uint64_t a1, uint64_t a2)
{
  return destroy for DictionaryDecoder._Options(a1, a2, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t destroy for DictionaryDecoder._Options(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
    swift_release();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 88) >= 2uLL)
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DictionaryEncoder._Options(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t initializeWithCopy for DictionaryDecoder._Options(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  v8 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a2[3];
  if (v9 >= 2)
  {
    v13 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v13;
    swift_retain();
    v10 = a2[6];
    if (v10)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v10 = a2[6];
    if (v10)
    {
LABEL_3:
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v10;
      v11 = a2[8];
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_QWORD *)(a1 + 64) = v11;
      v12 = a2[10];
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  v14 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
LABEL_6:
  v15 = a2[11];
  if (v15 >= 2)
  {
    v16 = a2[12];
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  }
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DictionaryEncoder._Options(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithCopy for DictionaryDecoder._Options(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  v9 = a2[1];
  v10 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v9, v10);
  v11 = *a1;
  v12 = a1[1];
  *a1 = v8;
  a1[1] = v9;
  v13 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v10;
  a5(v11, v12, v13);
  v14 = a2[3];
  if ((unint64_t)a1[3] < 2)
  {
    if (v14 >= 2)
    {
      v15 = a2[4];
      a1[3] = v14;
      a1[4] = v15;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    goto LABEL_8;
  }
  v16 = a2[4];
  a1[3] = v14;
  a1[4] = v16;
  swift_retain();
  swift_release();
LABEL_8:
  v17 = a1 + 5;
  v18 = a2 + 5;
  v19 = a2[6];
  if (a1[6])
  {
    if (v19)
    {
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)((uint64_t)(a1 + 5));
      v21 = *(_OWORD *)(a2 + 7);
      v20 = *(_OWORD *)(a2 + 9);
      *v17 = *v18;
      *(_OWORD *)(a1 + 7) = v21;
      *(_OWORD *)(a1 + 9) = v20;
    }
  }
  else if (v19)
  {
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = *v18;
    v23 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v23;
    *v17 = v22;
  }
  v24 = a2[11];
  if ((unint64_t)a1[11] >= 2)
  {
    if (v24 >= 2)
    {
      v26 = a2[12];
      a1[11] = v24;
      a1[12] = v26;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
    goto LABEL_20;
  }
  if (v24 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    goto LABEL_22;
  }
  v25 = a2[12];
  a1[11] = v24;
  a1[12] = v25;
  swift_retain();
LABEL_22:
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for DictionaryEncoder._Options(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder._Options(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for DictionaryDecoder._Options(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *a1;
  v8 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v6;
  a4(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)a1[3] < 2)
  {
    if (v10 >= 2)
    {
      v11 = *(_QWORD *)(a2 + 32);
      a1[3] = v10;
      a1[4] = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(a2 + 32);
  a1[3] = v10;
  a1[4] = v12;
  swift_release();
LABEL_8:
  if (a1[6])
  {
    v13 = *(_QWORD *)(a2 + 48);
    if (v13)
    {
      a1[5] = *(_QWORD *)(a2 + 40);
      a1[6] = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 64);
      a1[7] = *(_QWORD *)(a2 + 56);
      a1[8] = v14;
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(a2 + 80);
      a1[9] = *(_QWORD *)(a2 + 72);
      a1[10] = v15;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)((uint64_t)(a1 + 5));
  }
  v16 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 7) = v16;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
LABEL_13:
  v17 = *(_QWORD *)(a2 + 88);
  if ((unint64_t)a1[11] >= 2)
  {
    if (v17 >= 2)
    {
      v19 = *(_QWORD *)(a2 + 96);
      a1[11] = v17;
      a1[12] = v19;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
    goto LABEL_18;
  }
  if (v17 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 88);
    goto LABEL_20;
  }
  v18 = *(_QWORD *)(a2 + 96);
  a1[11] = v17;
  a1[12] = v18;
LABEL_20:
  a1[13] = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DictionaryDecoder._Options(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DictionaryDecoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for DictionaryEncoder._Options()
{
  return &unk_1E1AC3220;
}

void *type metadata accessor for _JSONEncodingStorage()
{
  return &unk_1E1AD6458;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.KeyEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.KeyEncodingStrategy;
}

unint64_t destroy for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for DictionaryDecoder.NonConformingFloatDecodingStrategy(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)a2;
    v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v6;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.NonConformingFloatEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.NonConformingFloatEncodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryDecoder.KeyDecodingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for DictionaryDecoder.KeyDecodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for DictionaryDecoder.KeyDecodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DictionaryDecoder.KeyDecodingStrategy(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DictionaryDecoder.KeyDecodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.DataEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.DataEncodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryEncoder.DateEncodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for DictionaryEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithCopy for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for DictionaryEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.DateEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.DateEncodingStrategy;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.OutputFormatting()
{
  return &type metadata for DictionaryEncoder.OutputFormatting;
}

unint64_t lazy protocol witness table accessor for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DictionaryEncoder.OutputFormatting, &type metadata for DictionaryEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DictionaryEncoder.OutputFormatting, &type metadata for DictionaryEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DictionaryEncoder.OutputFormatting, &type metadata for DictionaryEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DictionaryEncoder.OutputFormatting, &type metadata for DictionaryEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance __DictionaryDecoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance __DictionaryDecoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __DictionaryDecoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance __DictionaryDecoder@<X0>(_QWORD *a1@<X8>)
{
  return __DictionaryDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance __DictionaryDecoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for __DictionaryDecoder();
  a1[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryDecoder, (uint64_t)&protocol conformance descriptor for __DictionaryDecoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _DictionaryDecodingStorage.popContainer()()
{
  char **v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *v0;
  if (*((_QWORD *)*v0 + 2))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v2 = *((_QWORD *)v1 + 2);
      if (v2)
      {
LABEL_4:
        v3 = v2 - 1;
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[32 * v2]);
        *((_QWORD *)v1 + 2) = v3;
        *v0 = v1;
        return result;
      }
    }
    else
    {
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
      v2 = *((_QWORD *)v1 + 2);
      if (v2)
        goto LABEL_4;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  swift_beginAccess();
  v13 = *(_QWORD *)(a7 + 136);
  type metadata accessor for _ContiguousArrayStorage<CodingKey>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v15 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 40) = 1;
  v18[0] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  a5(v18, v13);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  v16 = dispatch thunk of CodingKey.stringValue.getter();
  outlined init with copy of Any(a4, a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v16;
}

uint64_t _DictionaryKeyedDecodingContainer.allKeys.getter()
{
  uint64_t v0;

  type metadata accessor for [String : Any](0, &lazy cache variable for type metadata for [String : Any].Keys, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DE9EC0]);
  lazy protocol witness table accessor for type [String : Any].Keys and conformance [A : B].Keys();
  swift_bridgeObjectRetain();
  v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL _DictionaryKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  _BOOL8 v8;
  __int128 v10;
  __int128 v11;

  v4 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a3 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    v8 = *((_QWORD *)&v11 + 1) != 0;
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  outlined destroy of Any?((uint64_t)&v10);
  return v8;
}

uint64_t _DictionaryKeyedDecodingContainer._errorDescription(of:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  BOOL v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;

  if (*(_QWORD *)(a2 + 112) != 1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v17._countAndFlagsBits = 2238496;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v15 = dispatch thunk of CodingKey.stringValue.getter();
    goto LABEL_9;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v3 = dispatch thunk of CodingKey.stringValue.getter();
  v5 = (void *)v4;
  v6 = specialized static DictionaryEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v3, v4);
  v8 = (void *)v7;
  v9 = specialized static DictionaryDecoder.KeyDecodingStrategy._convertFromSnakeCase(_:)(v6, v7);
  v11 = v10;
  v12 = v6 == v3 && v8 == v5;
  if (v12 || (v13 = v9, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14._countAndFlagsBits = 2238496;
    v14._object = (void *)0xE300000000000000;
    String.append(_:)(v14);
    v15 = v3;
    v16 = v5;
LABEL_9:
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 10530;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    return 0;
  }
  v20 = v13 == v3 && v11 == v5;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(26);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v21._countAndFlagsBits = 2238496;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = v3;
    v22._object = v5;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23 = 0x8000000187BDD760;
    v24 = 0xD000000000000011;
  }
  else
  {
    _StringGuts.grow(_:)(60);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v25._countAndFlagsBits = 2238496;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    v26._countAndFlagsBits = v3;
    v26._object = v5;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000022;
    v27._object = (void *)0x8000000187BDD730;
    String.append(_:)(v27);
    v28._countAndFlagsBits = v13;
    v28._object = v11;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v24 = 0x7265766E6F63202CLL;
    v23 = 0xEF206F7420646574;
  }
  String.append(_:)(*(Swift::String *)&v24);
  v29._countAndFlagsBits = v6;
  v29._object = v8;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _DictionaryKeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *boxed_opaque_existential_1;
  void (*v20)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a3 + 16) || (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) == 0))
  {
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v13, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)&v33);
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v18[3] = a5;
    v18[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
    v20(boxed_opaque_existential_1, a1, a5);
    swift_beginAccess();
    v16 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)&v28 = 0;
    *((_QWORD *)&v28 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v31 = (id)0xD00000000000001DLL;
    v32 = 0x8000000187BDD7A0;
    v29 = a5;
    v30 = a6;
    v21 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
    v20(v21, a1, a5);
    v22 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v28, a2);
    v24 = v23;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 46;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v35 - 8) + 104))(v18, *MEMORY[0x1E0DEC448]);
    swift_willThrow();
    return v16 & 1;
  }
  outlined init with take of Any(&v33, &v28);
  outlined init with take of Any(&v28, &v33);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  v15 = swift_dynamicCast();
  LOBYTE(v16) = v15;
  if (v15)

  return v16 & 1;
}

uint64_t _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  void (*v37)(uint64_t *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v52 = a4;
  v53 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v49 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v60 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v58 = 0u;
    v59 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v59 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v58);
    v32 = type metadata accessor for DecodingError();
    v51 = swift_allocError();
    v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v37(boxed_opaque_existential_1, a1, a5);
    v38 = v53;
    swift_beginAccess();
    *(_QWORD *)&v54 = 0;
    *((_QWORD *)&v54 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v57[0] = 0xD00000000000001DLL;
    v57[1] = 0x8000000187BDD7A0;
    v55 = a5;
    v56 = a6;
    v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    v37(v39, a1, a5);
    v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v54, v38);
    v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v28 = (__int128 *)v57;
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC448], v32);
    swift_willThrow();
    return v28 & 1;
  }
  outlined init with take of Any(&v58, &v54);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v50(v16, a1, a5);
  v22 = v53;
  v23 = (_QWORD *)(v53 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v50(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  LOBYTE(v28) = v22;
  v29 = v51;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v54);
  if (v29)
  {
    v31 = v22;
  }
  else
  {
    if (v30 != 2)
    {
      LOBYTE(v28) = v30 & 1;
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      return v28 & 1;
    }
    v46 = type metadata accessor for DecodingError();
    v51 = swift_allocError();
    v48 = v47;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v48 = MEMORY[0x1E0DEAFA0];
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v58;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, *MEMORY[0x1E0DEC460], v46);
    swift_willThrow();
    v31 = v22;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  return v28 & 1;
}

__int128 *_DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  SEL *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v53 = a4;
  v54 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v50 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v61 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v59);
    v33 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v38(boxed_opaque_existential_1, a1, a5);
    v39 = v54;
    swift_beginAccess();
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000187BDD7A0;
    v56 = a5;
    v57 = a6;
    v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, a1, a5);
    v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    v28 = (__int128 *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC448], v33);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v59, &v55);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v51(v16, a1, a5);
  v22 = v54;
  v23 = (_QWORD *)(v54 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v51(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v52;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, 7630409, (void *)0xE300000000000000);
  if (v29)
  {
    v32 = v22;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v28;
  }
  if ((v31 & 1) != 0)
  {
    v47 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v49 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, *MEMORY[0x1E0DEC460], v47);
    swift_willThrow();
    v32 = v22;
    goto LABEL_16;
  }
  v28 = (__int128 *)v30;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v28;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  void (*v37)(uint64_t *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v52 = a4;
  v53 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v49 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v60 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v58 = 0u;
    v59 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v59 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v58);
    v32 = type metadata accessor for DecodingError();
    v51 = swift_allocError();
    v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v37(boxed_opaque_existential_1, a1, a5);
    v38 = v53;
    swift_beginAccess();
    *(_QWORD *)&v54 = 0;
    *((_QWORD *)&v54 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v57[0] = 0xD00000000000001DLL;
    v57[1] = 0x8000000187BDD7A0;
    v55 = a5;
    v56 = a6;
    v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    v37(v39, a1, a5);
    v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v54, v38);
    v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v28 = (__int128 *)v57;
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC448], v32);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v58, &v54);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v50(v16, a1, a5);
  v22 = v53;
  v23 = (_QWORD *)(v53 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v50(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v51;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v54, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, 0x3233746E49, (void *)0xE500000000000000);
  if (v29)
  {
    v31 = v22;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    return v28;
  }
  v28 = (__int128 *)v30;
  if ((v30 & 0x100000000) != 0)
  {
    v46 = type metadata accessor for DecodingError();
    v51 = swift_allocError();
    v48 = v47;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v48 = MEMORY[0x1E0DEDBC8];
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v58;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, *MEMORY[0x1E0DEC460], v46);
    swift_willThrow();
    v31 = v22;
    goto LABEL_16;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  return v28;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  SEL *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v53 = a4;
  v54 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v50 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v61 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v59);
    v33 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v38(boxed_opaque_existential_1, a1, a5);
    v39 = v54;
    swift_beginAccess();
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000187BDD7A0;
    v56 = a5;
    v57 = a6;
    v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, a1, a5);
    v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    v28 = (__int128 *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC448], v33);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v59, &v55);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v51(v16, a1, a5);
  v22 = v54;
  v23 = (_QWORD *)(v54 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v51(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v52;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, 0x3436746E49, (void *)0xE500000000000000);
  if (v29)
  {
    v32 = v22;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v28;
  }
  if ((v31 & 1) != 0)
  {
    v47 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v49 = MEMORY[0x1E0DEDC60];
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, *MEMORY[0x1E0DEC460], v47);
    swift_willThrow();
    v32 = v22;
    goto LABEL_16;
  }
  v28 = (__int128 *)v30;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v28;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  SEL *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v53 = a4;
  v54 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v50 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v61 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v59);
    v33 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v38(boxed_opaque_existential_1, a1, a5);
    v39 = v54;
    swift_beginAccess();
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000187BDD7A0;
    v56 = a5;
    v57 = a6;
    v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, a1, a5);
    v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    v28 = (__int128 *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC448], v33);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v59, &v55);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v51(v16, a1, a5);
  v22 = v54;
  v23 = (_QWORD *)(v54 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v51(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v52;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, 1953384789, (void *)0xE400000000000000);
  if (v29)
  {
    v32 = v22;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v28;
  }
  if ((v31 & 1) != 0)
  {
    v47 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v49 = MEMORY[0x1E0DEBB98];
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, *MEMORY[0x1E0DEC460], v47);
    swift_willThrow();
    v32 = v22;
    goto LABEL_16;
  }
  v28 = (__int128 *)v30;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v28;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  void (*v37)(uint64_t *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v52 = a4;
  v53 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v49 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v60 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v58 = 0u;
    v59 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v59 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v58);
    v32 = type metadata accessor for DecodingError();
    v51 = swift_allocError();
    v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v37(boxed_opaque_existential_1, a1, a5);
    v38 = v53;
    swift_beginAccess();
    *(_QWORD *)&v54 = 0;
    *((_QWORD *)&v54 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v57[0] = 0xD00000000000001DLL;
    v57[1] = 0x8000000187BDD7A0;
    v55 = a5;
    v56 = a6;
    v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    v37(v39, a1, a5);
    v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v54, v38);
    v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v28 = (__int128 *)v57;
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC448], v32);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v58, &v54);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v50(v16, a1, a5);
  v22 = v53;
  v23 = (_QWORD *)(v53 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v50(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v51;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v54, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, 0x3233746E4955, (void *)0xE600000000000000);
  if (v29)
  {
    v31 = v22;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    return v28;
  }
  v28 = (__int128 *)v30;
  if ((v30 & 0x100000000) != 0)
  {
    v46 = type metadata accessor for DecodingError();
    v51 = swift_allocError();
    v48 = v47;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v48 = MEMORY[0x1E0DEE0F8];
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v58;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, *MEMORY[0x1E0DEC460], v46);
    swift_willThrow();
    v31 = v22;
    goto LABEL_16;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  return v28;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  SEL *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v53 = a4;
  v54 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v50 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v61 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v59);
    v33 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v38(boxed_opaque_existential_1, a1, a5);
    v39 = v54;
    swift_beginAccess();
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000187BDD7A0;
    v56 = a5;
    v57 = a6;
    v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, a1, a5);
    v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    v28 = (__int128 *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC448], v33);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v59, &v55);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v51(v16, a1, a5);
  v22 = v54;
  v23 = (_QWORD *)(v54 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v51(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v52;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, 0x3436746E4955, (void *)0xE600000000000000);
  if (v29)
  {
    v32 = v22;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v28;
  }
  if ((v31 & 1) != 0)
  {
    v47 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v49 = MEMORY[0x1E0DEE190];
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, *MEMORY[0x1E0DEC460], v47);
    swift_willThrow();
    v32 = v22;
    goto LABEL_16;
  }
  v28 = (__int128 *)v30;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v28;
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v53 = a4;
  v54 = a2;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v50 - v15;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = *(_QWORD *)(a3 + 16);
  v61 = a3;
  if (!v19 || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v59);
    v33 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
    v38(boxed_opaque_existential_1, a1, a5);
    v39 = v54;
    swift_beginAccess();
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000187BDD7A0;
    v56 = a5;
    v57 = a6;
    v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, a1, a5);
    v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    v28 = (__int128 *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x1E0DEC448], v33);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v59, &v55);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v51(v16, a1, a5);
  v22 = v54;
  v23 = (_QWORD *)(v54 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(v22 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = v24;
  }
  v27 = v24[2];
  v26 = v24[3];
  if (v27 >= v26 >> 1)
    *v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
  v51(v12, (uint64_t)v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v12, (uint64_t *)(v22 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  v28 = (__int128 *)v22;
  v29 = v52;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55);
  if (v29)
  {
    v32 = v22;
  }
  else
  {
    if (v31)
    {
      v28 = (__int128 *)v30;
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
      return v28;
    }
    v47 = type metadata accessor for DecodingError();
    v52 = swift_allocError();
    v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v49 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v28 = &v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, *MEMORY[0x1E0DEC460], v47);
    swift_willThrow();
    v32 = v22;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v28;
}

uint64_t $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 136);
  swift_beginAccess();
  v3 = *(_QWORD **)(a1 + 136);
  if (!v3[2])
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_4;
    goto LABEL_7;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v5 = v3[2];
  if (v5)
  {
LABEL_4:
    v6 = v5 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3[5 * v5 - 1]);
    v3[2] = v6;
    *v2 = v3;
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t *_DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(__int128 *), uint64_t a8, char *a9, uint64_t (*a10)(__int128 *))
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *boxed_opaque_existential_1;
  void (*v43)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t (*v55)(__int128 *);
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v53 = a8;
  v55 = a7;
  v56 = a4;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v53 - v19;
  v65 = v21;
  v22 = dispatch thunk of CodingKey.stringValue.getter();
  v24 = *(_QWORD *)(a3 + 16);
  v57 = a3;
  if (!v24 || (v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23), (v26 & 1) == 0))
  {
    v63 = 0u;
    v64 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v25, (uint64_t)&v63);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v64 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v63);
    v37 = type metadata accessor for DecodingError();
    v55 = (uint64_t (*)(__int128 *))swift_allocError();
    v39 = v38;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v54 = (char *)v39 + *(int *)(v40 + 48);
    v41 = v65;
    v39[3] = a5;
    v39[4] = v41;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
    v43 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
    v43(boxed_opaque_existential_1, a1, a5);
    swift_beginAccess();
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v61 = 0xD00000000000001DLL;
    v62 = 0x8000000187BDD7A0;
    v59 = a5;
    v60 = v41;
    v44 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
    v43(v44, a1, a5);
    v29 = (uint64_t *)_DictionaryKeyedDecodingContainer._errorDescription(of:)(&v58, a2);
    v46 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
    v47._countAndFlagsBits = (uint64_t)v29;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x1E0DEC448], v37);
    swift_willThrow();
    return v29;
  }
  outlined init with take of Any(&v63, &v58);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v27(v20, a1, a5);
  v28 = a2;
  v29 = (uint64_t *)(a2 + 136);
  swift_beginAccess();
  v30 = *(_QWORD **)(v28 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v28 + 136) = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *v29 = (uint64_t)v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
    *v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
  v27(v16, (uint64_t)v20, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, (uint64_t)v16, v29, a5, v65);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v20, a5);
  swift_endAccess();
  v34 = v54;
  v35 = v55(&v58);
  if (v34)
  {
    v36 = v28;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
    return v29;
  }
  v29 = (uint64_t *)v35;
  if ((v35 & 0x100) != 0)
  {
    v54 = a9;
    v55 = a10;
    v50 = type metadata accessor for DecodingError();
    swift_allocError();
    v52 = v51;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    v29 = (uint64_t *)v28;
    *v52 = v53;
    *(_QWORD *)&v63 = 0;
    *((_QWORD *)&v63 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v52, *MEMORY[0x1E0DEC460], v50);
    swift_willThrow();
    v36 = v28;
    goto LABEL_16;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
  return v29;
}

{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *boxed_opaque_existential_1;
  void (*v43)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t (*v55)(__int128 *);
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v53 = a8;
  v55 = a7;
  v56 = a4;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v53 - v19;
  v65 = v21;
  v22 = dispatch thunk of CodingKey.stringValue.getter();
  v24 = *(_QWORD *)(a3 + 16);
  v57 = a3;
  if (!v24 || (v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23), (v26 & 1) == 0))
  {
    v63 = 0u;
    v64 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v25, (uint64_t)&v63);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v64 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v63);
    v37 = type metadata accessor for DecodingError();
    v55 = (uint64_t (*)(__int128 *))swift_allocError();
    v39 = v38;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v54 = (char *)v39 + *(int *)(v40 + 48);
    v41 = v65;
    v39[3] = a5;
    v39[4] = v41;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
    v43 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
    v43(boxed_opaque_existential_1, a1, a5);
    swift_beginAccess();
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v61 = 0xD00000000000001DLL;
    v62 = 0x8000000187BDD7A0;
    v59 = a5;
    v60 = v41;
    v44 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
    v43(v44, a1, a5);
    v29 = (uint64_t *)_DictionaryKeyedDecodingContainer._errorDescription(of:)(&v58, a2);
    v46 = v45;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
    v47._countAndFlagsBits = (uint64_t)v29;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 46;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x1E0DEC448], v37);
    swift_willThrow();
    return v29;
  }
  outlined init with take of Any(&v63, &v58);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v27(v20, a1, a5);
  v28 = a2;
  v29 = (uint64_t *)(a2 + 136);
  swift_beginAccess();
  v30 = *(_QWORD **)(v28 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v28 + 136) = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *v29 = (uint64_t)v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
    *v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
  v27(v16, (uint64_t)v20, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, (uint64_t)v16, v29, a5, v65);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v20, a5);
  swift_endAccess();
  v34 = v54;
  v35 = v55(&v58);
  if (v34)
  {
    v36 = v28;
LABEL_16:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
    return v29;
  }
  v29 = (uint64_t *)v35;
  if ((v35 & 0x10000) != 0)
  {
    v54 = a9;
    v55 = a10;
    v50 = type metadata accessor for DecodingError();
    swift_allocError();
    v52 = v51;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    v29 = (uint64_t *)v28;
    *v52 = v53;
    *(_QWORD *)&v63 = 0;
    *((_QWORD *)&v63 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v52, *MEMORY[0x1E0DEC460], v50);
    swift_willThrow();
    v36 = v28;
    goto LABEL_16;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
  return v29;
}

float _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  void (*v36)(uint64_t *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;

  v50 = a4;
  v51 = a2;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v48 - v16;
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  v20 = *(_QWORD *)(a3 + 16);
  v52 = a3;
  if (!v20 || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v22 & 1) == 0))
  {
    v58 = 0u;
    v59 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v21, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v59 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v58);
    v31 = type metadata accessor for DecodingError();
    v49 = swift_allocError();
    v33 = v32;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v48 = (void (*)(char *, uint64_t, uint64_t))((char *)v33 + *(int *)(v34 + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
    v36(boxed_opaque_existential_1, a1, a5);
    v37 = v51;
    swift_beginAccess();
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v56 = 0xD00000000000001DLL;
    v57 = 0x8000000187BDD7A0;
    v54 = a5;
    v55 = a6;
    v38 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v53);
    v36(v38, a1, a5);
    v39 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v53, v37);
    v41 = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    v42._countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 46;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC448], v31);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v58, &v53);
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v48(v17, a1, a5);
  v23 = v51;
  v24 = (_QWORD *)(v51 + 136);
  swift_beginAccess();
  v25 = *(_QWORD **)(v23 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v23 + 136) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *v24 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
    *v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
  v48(v13, (uint64_t)v17, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)v13, (uint64_t *)(v23 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, a5);
  swift_endAccess();
  v29 = v49;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v53);
  if (v29)
    goto LABEL_15;
  if ((v30 & 0x100000000) != 0)
  {
    v45 = type metadata accessor for DecodingError();
    swift_allocError();
    v47 = v46;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v47 = MEMORY[0x1E0DEB188];
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, *MEMORY[0x1E0DEC460], v45);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    return v6;
  }
  v6 = *(float *)&v30;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
  return v6;
}

double _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  void (*v37)(uint64_t *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;

  v51 = a4;
  v52 = a2;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v49 - v16;
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  v20 = *(_QWORD *)(a3 + 16);
  v53 = a3;
  if (!v20 || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v22 & 1) == 0))
  {
    v59 = 0u;
    v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v21, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v59);
    v32 = type metadata accessor for DecodingError();
    v50 = swift_allocError();
    v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v49 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
    v37(boxed_opaque_existential_1, a1, a5);
    v38 = v52;
    swift_beginAccess();
    *(_QWORD *)&v54 = 0;
    *((_QWORD *)&v54 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v57 = 0xD00000000000001DLL;
    v58 = 0x8000000187BDD7A0;
    v55 = a5;
    v56 = a6;
    v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    v37(v39, a1, a5);
    v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v54, v38);
    v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC448], v32);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v59, &v54);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v49(v17, a1, a5);
  v23 = v52;
  v24 = (_QWORD *)(v52 + 136);
  swift_beginAccess();
  v25 = *(_QWORD **)(v23 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v23 + 136) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *v24 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
    *v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
  v49(v13, (uint64_t)v17, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)v13, (uint64_t *)(v23 + 136), a5, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, a5);
  swift_endAccess();
  v29 = v50;
  v30 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v54);
  if (v29)
    goto LABEL_15;
  if ((v31 & 1) != 0)
  {
    v46 = type metadata accessor for DecodingError();
    swift_allocError();
    v48 = v47;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v48 = MEMORY[0x1E0DEB070];
    *(_QWORD *)&v59 = 0;
    *((_QWORD *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, *MEMORY[0x1E0DEC460], v46);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    return v6;
  }
  v6 = *(double *)&v30;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  return v6;
}

uint64_t _DictionaryKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *boxed_opaque_existential_1;
  void (*v49)(uint64_t *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v73 = a5;
  v83 = a3;
  v69 = a9;
  v70 = a1;
  v71 = a7;
  v14 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v14 - 8);
  v68 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v65 - v16;
  v75 = *(char **)(a6 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v65 - v24;
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  v28 = *(_QWORD *)(a4 + 16);
  v74 = a4;
  if (!v28 || (v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27), (v30 & 1) == 0))
  {
    v81 = 0u;
    v82 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(a4 + 56) + 32 * v29, (uint64_t)&v81);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v82 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v81);
    v43 = type metadata accessor for DecodingError();
    v72 = swift_allocError();
    v45 = v44;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v71 = (uint64_t)v45 + *(int *)(v46 + 48);
    v45[3] = a6;
    v45[4] = a8;
    v47 = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v45);
    v49 = (void (*)(uint64_t *, uint64_t, uint64_t))*((_QWORD *)v75 + 2);
    v49(boxed_opaque_existential_1, a2, a6);
    v50 = v83;
    swift_beginAccess();
    *(_QWORD *)&v76 = 0;
    *((_QWORD *)&v76 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v79 = 0xD00000000000001DLL;
    v80 = 0x8000000187BDD7A0;
    v77 = a6;
    v78 = v47;
    v51 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
    v49(v51, a2, a6);
    v52 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v76, v50);
    v54 = v53;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 46;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, *MEMORY[0x1E0DEC448], v43);
    return swift_willThrow();
  }
  v66 = a10;
  outlined init with take of Any(&v81, &v76);
  v65 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v75 + 2);
  v65(v25, a2, a6);
  v31 = v83;
  v32 = (uint64_t *)(v83 + 136);
  swift_beginAccess();
  v33 = *(_QWORD **)(v31 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v31 + 136) = v33;
  v35 = a8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    *v32 = (uint64_t)v33;
  }
  v36 = v70;
  v38 = v33[2];
  v37 = v33[3];
  if (v38 >= v37 >> 1)
    *v32 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v33);
  v65(v21, (uint64_t)v25, a6);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, (uint64_t)v21, v32, a6, v35);
  (*((void (**)(char *, uint64_t))v75 + 1))(v25, a6);
  swift_endAccess();
  v40 = v71;
  v39 = v72;
  v41 = v83;
  __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)&v76, v36, v71, v66, (uint64_t)v17);
  if (v39)
  {
    v42 = v41;
  }
  else
  {
    v58 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v17, 1, v40) == 1)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v17, v68);
      v59 = type metadata accessor for DecodingError();
      v72 = swift_allocError();
      v61 = v60;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      v75 = (char *)v61 + *(int *)(v62 + 48);
      *v61 = v70;
      *(_QWORD *)&v81 = 0;
      *((_QWORD *)&v81 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v81 = 0x6465746365707845;
      *((_QWORD *)&v81 + 1) = 0xE900000000000020;
      v63._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 0xD00000000000001ELL;
      v64._object = (void *)0x8000000187BDD7C0;
      String.append(_:)(v64);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v61, *MEMORY[0x1E0DEC460], v59);
      swift_willThrow();
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v69, v17, v40);
    }
    v42 = v41;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v42);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
}

uint64_t _DictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, double);
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v66 = a5;
  v70 = a7;
  v72 = a4;
  v65 = a9;
  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v64 - v19;
  v21 = *(void (**)(char *, double))(v13 + 16);
  v69 = v22;
  v21((char *)&v64 - v19, v18);
  v23 = (uint64_t *)(a3 + 136);
  swift_beginAccess();
  v24 = *(_QWORD **)(a3 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v71 = a3;
  *(_QWORD *)(a3 + 136) = v24;
  v26 = a8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *v23 = (uint64_t)v24;
  }
  v28 = v24[2];
  v27 = v24[3];
  if (v28 >= v27 >> 1)
    *v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
  v68 = a10;
  ((void (*)(char *, char *, uint64_t))v21)(v15, v20, a6);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, (uint64_t)v15, v23, a6, v26);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, a6);
  swift_endAccess();
  v29 = dispatch thunk of CodingKey.stringValue.getter();
  v31 = v72;
  if (*(_QWORD *)(v72 + 16))
  {
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v30);
    v33 = v70;
    v34 = v71;
    if ((v35 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v32, (uint64_t)&v76);
    }
    else
    {
      v76 = 0u;
      v77 = 0u;
    }
  }
  else
  {
    v76 = 0u;
    v77 = 0u;
    v33 = v70;
    v34 = v71;
  }
  v36 = v68;
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v77 + 1))
  {
    outlined init with take of Any(&v76, &v73);
    outlined init with copy of Any((uint64_t)&v73, (uint64_t)&v76);
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v37 = v78;
      v38 = swift_retain();
      v39 = v33;
      v40 = specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(v38, v37);
      v42 = v41;
      v44 = v43;
      swift_release();
      *(_QWORD *)&v76 = v40;
      *((_QWORD *)&v76 + 1) = v42;
      *(_QWORD *)&v77 = v44;
      v46 = type metadata accessor for _DictionaryKeyedDecodingContainer(0, v39, v36, v45);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DictionaryKeyedDecodingContainer<A>, v46);
      KeyedDecodingContainer.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v34);
    }
    v61 = type metadata accessor for DecodingError();
    swift_allocError();
    v63 = v62;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v63 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v63, *MEMORY[0x1E0DEC450], v61);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v76);
    v68 = type metadata accessor for DecodingError();
    v67 = swift_allocError();
    v49 = v48;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v65 = (char *)v49 + *(int *)(v50 + 48);
    v49[3] = a6;
    v49[4] = v26;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v49);
    v52 = v69;
    ((void (*)(uint64_t *, uint64_t, uint64_t))v21)(boxed_opaque_existential_1, v69, a6);
    *(_QWORD *)&v73 = 0;
    *((_QWORD *)&v73 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v76 = 0x6720746F6E6E6143;
    *((_QWORD *)&v76 + 1) = 0xEB00000000207465;
    type metadata accessor for KeyedDecodingContainer();
    v53._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._object = (void *)0x8000000187BDD780;
    v54._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v54);
    v74 = a6;
    v75 = v26;
    v55 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    ((void (*)(uint64_t *, uint64_t, uint64_t))v21)(v55, v52, a6);
    v56 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v73, v71);
    v58 = v57;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    v59._countAndFlagsBits = v56;
    v59._object = v58;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v60 = v49;
    v34 = v71;
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v68 - 8) + 104))(v60, *MEMORY[0x1E0DEC448]);
    swift_willThrow();
  }
  return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v34);
}

uint64_t _DictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v41;
  void (*v42)(uint64_t *, uint64_t, uint64_t);
  Swift::String v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, double);
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v55 = a4;
  v54 = a7;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v53 - v17;
  v57 = *(void (**)(char *, double))(v11 + 16);
  v58 = v19;
  v57((char *)&v53 - v17, v16);
  v20 = (uint64_t *)(a2 + 136);
  swift_beginAccess();
  v21 = *(_QWORD **)(a2 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v59 = a2;
  *(_QWORD *)(a2 + 136) = v21;
  v23 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    *v20 = (uint64_t)v21;
  }
  v25 = v21[2];
  v24 = v21[3];
  if (v25 >= v24 >> 1)
    *v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v21);
  ((void (*)(char *, char *, uint64_t))v57)(v13, v18, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, (uint64_t)v13, v20, a5, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v18, a5);
  swift_endAccess();
  v26 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(v23 + 16))
  {
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    v29 = v59;
    if ((v30 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v23 + 56) + 32 * v28, (uint64_t)&v63);
    }
    else
    {
      v63 = 0u;
      v64 = 0u;
    }
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
    v29 = v59;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v64 + 1))
  {
    outlined init with take of Any(&v63, &v60);
    outlined init with copy of Any((uint64_t)&v60, (uint64_t)&v63);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Any], MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v31 = v65;
      v32 = *(_QWORD *)(v29 + 136);
      v33 = v54;
      v54[3] = &unk_1E1AFBA30;
      v33[4] = lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer();
      v34 = (_QWORD *)swift_allocObject();
      *v33 = v34;
      v34[2] = v29;
      v34[3] = v31;
      v34[4] = v32;
      v34[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
    }
    v50 = type metadata accessor for DecodingError();
    swift_allocError();
    v52 = v51;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v52 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v52, *MEMORY[0x1E0DEC450], v50);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v63);
    v36 = type metadata accessor for DecodingError();
    v56 = swift_allocError();
    v38 = v37;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v55 = (char *)v38 + *(int *)(v39 + 48);
    v38[3] = a5;
    v38[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
    v42 = (void (*)(uint64_t *, uint64_t, uint64_t))v57;
    v41 = v58;
    ((void (*)(uint64_t *, uint64_t, uint64_t))v57)(boxed_opaque_existential_1, v58, a5);
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(64);
    v63 = v60;
    v43._object = (void *)0x8000000187BDD6F0;
    v43._countAndFlagsBits = 0xD00000000000003ELL;
    String.append(_:)(v43);
    v61 = a5;
    v62 = a6;
    v44 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
    v42(v44, v41, a5);
    v45 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v60, v59);
    v47 = v46;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    v48._countAndFlagsBits = v45;
    v48._object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v49 = v38;
    v29 = v59;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v49, *MEMORY[0x1E0DEC448], v36);
    swift_willThrow();
  }
  return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
}

uint64_t _DictionaryKeyedDecodingContainer._superDecoder(forKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  _QWORD *v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v41 = a5;
  v40 = a4;
  v39 = a7;
  outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)&v45);
  v11 = (_QWORD *)(a2 + 136);
  swift_beginAccess();
  v12 = *(_QWORD **)(a2 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 136) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *v11 = v12;
  }
  v52 = a3;
  v38 = a6;
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
    *v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
  v16 = *((_QWORD *)&v46 + 1);
  v17 = v47;
  v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v45, *((uint64_t *)&v46 + 1));
  v19 = MEMORY[0x1E0C80A78](v18, v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v22 + 16))(v21, v19);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v21, (uint64_t *)(a2 + 136), v16, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
  swift_endAccess();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v23 = dispatch thunk of CodingKey.stringValue.getter();
  v25 = v52;
  if (*(_QWORD *)(v52 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v46 + 1))
  {
    outlined init with take of Any(&v45, &v43);
  }
  else
  {
    v28 = objc_allocWithZone(MEMORY[0x1E0C99E38]);
    v29 = objc_msgSend(v28, sel_init, v38);
    v44 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
    *(_QWORD *)&v43 = v29;
    outlined destroy of Any?((uint64_t)&v45);
  }
  outlined init with copy of Any((uint64_t)&v43, (uint64_t)v42);
  v30 = *(_QWORD *)(a2 + 136);
  v31 = *(_OWORD *)(a2 + 72);
  v32 = *(_OWORD *)(a2 + 104);
  v49 = *(_OWORD *)(a2 + 88);
  v50 = v32;
  v51 = *(_OWORD *)(a2 + 120);
  v33 = *(_OWORD *)(a2 + 40);
  v45 = *(_OWORD *)(a2 + 24);
  v46 = v33;
  v47 = *(_OWORD *)(a2 + 56);
  v48 = v31;
  v34 = type metadata accessor for __DictionaryDecoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  outlined retain of DictionaryDecoder._Options((uint64_t)&v45);
  v35 = __DictionaryDecoder.init(referencing:at:options:)((uint64_t)v42, v30, &v45);
  v36 = v39;
  v39[3] = v34;
  v36[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryDecoder, (uint64_t)&protocol conformance descriptor for __DictionaryDecoder);
  *v36 = v35;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _DictionaryKeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD v14[5];

  v14[3] = &unk_1E1B0CCC8;
  v14[4] = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v12 = swift_allocObject();
  v14[0] = v12;
  *(_QWORD *)(v12 + 16) = 0x7265707573;
  *(_QWORD *)(v12 + 24) = 0xE500000000000000;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 1;
  return _DictionaryKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _DictionaryKeyedDecodingContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16[5];

  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  return _DictionaryKeyedDecodingContainer._superDecoder(forKey:)(v16, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return _DictionaryKeyedDecodingContainer.allKeys.getter();
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _DictionaryKeyedDecodingContainer.contains(_:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, _DictionaryKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, _DictionaryKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

__int128 *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEDA70], (char *)0xD00000000000002BLL, (uint64_t (*)(__int128 *))0x8000000187BDD960);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEDB58], (char *)0xD00000000000002CLL, (uint64_t (*)(__int128 *))0x8000000187BDD930);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEDE70], (char *)0xD00000000000002CLL, (uint64_t (*)(__int128 *))0x8000000187BDD870);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEE068], (char *)0xD00000000000002DLL, (uint64_t (*)(__int128 *))0x8000000187BDD840);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(__int128 *), uint64_t a5, char *a6, uint64_t (*a7)(__int128 *))
{
  uint64_t *v7;

  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))_DictionaryKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED7E8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED808]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED810]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED818]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED830]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED828]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED838]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED840]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E0DED850]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))_DictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))
{
  _QWORD *v7;

  return a7(a1, a2, *v7, v7[1], v7[2], *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _DictionaryKeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return _DictionaryKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_DictionaryKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void _JSONUnkeyedDecodingContainer.decodeNil()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t inited;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  _BYTE v16[32];
  id v17;
  unint64_t v18;
  uint64_t v19;

  v1 = v0[1];
  v2 = v0[3];
  if (v2 >= *(_QWORD *)(v1 + 16))
  {
    v6 = type metadata accessor for DecodingError();
    swift_allocError();
    v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    *v8 = v9;
    v10 = *v0;
    swift_beginAccess();
    v11 = *(void **)(v10 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v13 = v0[3];
    v18 = 0xE600000000000000;
    v19 = v13;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v15 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v15;
    *(_QWORD *)(v15 + 16) = 0x207865646E49;
    *(_QWORD *)(v15 + 24) = 0xE600000000000000;
    *(_QWORD *)(v15 + 32) = v13;
    *(_BYTE *)(v15 + 40) = 0;
    v17 = v11;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, *MEMORY[0x1E0DEC460], v6);
    swift_willThrow();
    return;
  }
  if (v2 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  outlined init with copy of Any(v1 + 32 * v2 + 32, (uint64_t)v16);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    v3 = v0[3];
    v4 = __OFADD__(v3, 1);
    v5 = v3 + 1;
    if (!v4)
    {
      v0[3] = v5;
      return;
    }
    goto LABEL_9;
  }
}

uint64_t _JSONUnkeyedDecodingContainer.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  v71 = a3;
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v14 = (char *)&v63 - v13;
  v15 = v4[1];
  v16 = v4[3];
  if (v16 >= *(_QWORD *)(v15 + 16))
  {
    v31 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v33 = a1;
    v34 = *v4;
    swift_beginAccess();
    v35 = *(_QWORD *)(v34 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v37 = v4[3];
    v77 = 0x207865646E49;
    v78 = 0xE600000000000000;
    v72 = v37;
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39 = v77;
    v40 = v78;
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v41 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v41;
    *(_QWORD *)(v41 + 16) = v39;
    *(_QWORD *)(v41 + 24) = v40;
    *(_QWORD *)(v41 + 32) = v37;
    *(_BYTE *)(v41 + 40) = 0;
    v77 = v35;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x1E0DEC460], v31);
    return swift_willThrow();
  }
  v66 = v5;
  v63 = v12;
  v64 = v11;
  v65 = a4;
  v70 = v4;
  v17 = *v4;
  *(_QWORD *)&v74 = 0x207865646E49;
  *((_QWORD *)&v74 + 1) = 0xE600000000000000;
  v77 = v16;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v68 = *((_QWORD *)&v74 + 1);
  v19 = (char *)v74;
  v20 = (_QWORD *)(v17 + 136);
  swift_beginAccess();
  v21 = *(_QWORD **)(v17 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v17 + 136) = v21;
  v67 = a1;
  v69 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    *v20 = v21;
  }
  v24 = v21[2];
  v23 = v21[3];
  if (v24 >= v23 >> 1)
  {
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
    *v20 = v21;
  }
  v75 = &unk_1E1B0CCC8;
  v25 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v76 = v25;
  v26 = swift_allocObject();
  *(_QWORD *)&v74 = v26;
  v27 = v68;
  *(_QWORD *)(v26 + 16) = v69;
  *(_QWORD *)(v26 + 24) = v27;
  *(_QWORD *)(v26 + 32) = v16;
  *(_BYTE *)(v26 + 40) = 0;
  v21[2] = v24 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v74, (uint64_t)&v21[5 * v24 + 4]);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v16 >= *(_QWORD *)(v15 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v15 + 32 * v16 + 32, (uint64_t)&v74);
  v29 = v67;
  v30 = v66;
  __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)&v74, v67, a2, v71, (uint64_t)v14);
  if (v30)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
LABEL_13:
    v59 = v70;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v59);
  }
  v42 = v29;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
  v43 = *(_QWORD *)(a2 - 8);
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v14, 1, a2);
  v45 = v70;
  if (v44 == 1)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v64);
    v71 = type metadata accessor for DecodingError();
    swift_allocError();
    v47 = v46;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    v69 = (char *)v47 + *(int *)(v48 + 48);
    *v47 = v42;
    v49 = *v45;
    swift_beginAccess();
    v50 = *(_QWORD *)(v49 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v51 = swift_initStackObject();
    *(_OWORD *)(v51 + 16) = xmmword_187BF9830;
    v52 = v45[3];
    v72 = 0x207865646E49;
    v73 = 0xE600000000000000;
    v79 = v52;
    swift_bridgeObjectRetain();
    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54 = v72;
    v55 = v73;
    *(_QWORD *)(v51 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v51 + 64) = v25;
    v56 = swift_allocObject();
    *(_QWORD *)(v51 + 32) = v56;
    *(_QWORD *)(v56 + 16) = v54;
    *(_QWORD *)(v56 + 24) = v55;
    *(_QWORD *)(v56 + 32) = v52;
    *(_BYTE *)(v56 + 40) = 0;
    v72 = v50;
    specialized Array.append<A>(contentsOf:)(v51);
    v72 = 0;
    v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v72 = 0x6465746365707845;
    v73 = 0xE900000000000020;
    v57._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._object = (void *)0x8000000187BDD430;
    v58._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v58);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v71 - 8) + 104))(v47, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_13;
  }
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 32))(v65, v14, a2);
  v60 = v45[3];
  v61 = __OFADD__(v60, 1);
  v62 = v60 + 1;
  if (!v61)
  {
    v45[3] = v62;
    v59 = v45;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v59);
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t _JSONUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD v39[4];
  __int128 v40;
  void *v41;
  unint64_t v42;
  id v43;

  v4 = v3;
  v5 = *v3;
  v6 = v3[3];
  *(_QWORD *)&v40 = 0x207865646E49;
  *((_QWORD *)&v40 + 1) = 0xE600000000000000;
  v39[0] = v6;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(v5 + 136);
  swift_beginAccess();
  v9 = *(_QWORD **)(v5 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 136) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = v9;
  }
  v41 = &unk_1E1B0CCC8;
  v42 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v13 = swift_allocObject();
  *(_QWORD *)&v40 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v6;
  *(_BYTE *)(v13 + 40) = 0;
  v9[2] = v12 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v40, (uint64_t)&v9[5 * v12 + 4]);
  v15 = v4[1];
  if (v6 >= *(_QWORD *)(v15 + 16))
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v21 = v20;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v21 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v4);
  }
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v15 + 32 * v6 + 32, (uint64_t)&v40);
    outlined init with copy of Any((uint64_t)&v40, (uint64_t)v39);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
    if ((swift_dynamicCast() & 1) != 0)
    {

      v16 = type metadata accessor for DecodingError();
      swift_allocError();
      v18 = v17;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v18 = type metadata accessor for KeyedDecodingContainer();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
LABEL_14:
      swift_willThrow();
      goto LABEL_15;
    }
    outlined init with copy of Any((uint64_t)&v40, (uint64_t)v39);
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
    {
      v34 = type metadata accessor for DecodingError();
      swift_allocError();
      v36 = v35;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v36 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, *MEMORY[0x1E0DEC450], v34);
      goto LABEL_14;
    }
    v22 = v4[3];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v25 = (uint64_t)v43;
      v4[3] = v24;
      v26 = swift_retain();
      v27 = specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(v26, v25);
      v29 = v28;
      v31 = v30;
      swift_release();
      v39[0] = v27;
      v39[1] = v29;
      v39[2] = v31;
      v33 = type metadata accessor for _DictionaryKeyedDecodingContainer(0, a2, a3, v32);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DictionaryKeyedDecodingContainer<A>, v33);
      KeyedDecodingContainer.init<A>(_:)();
LABEL_15:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v4);
    }
  }
  __break(1u);
  return result;
}

uint64_t _JSONUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD v31[4];
  __int128 v32;
  void *v33;
  unint64_t v34;
  id v35;

  v2 = v1;
  v3 = *v1;
  v4 = v1[3];
  *(_QWORD *)&v32 = 0x207865646E49;
  *((_QWORD *)&v32 + 1) = 0xE600000000000000;
  v31[0] = v4;
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(v3 + 136);
  swift_beginAccess();
  v7 = *(_QWORD **)(v3 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 136) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v33 = &unk_1E1B0CCC8;
  v34 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v11 = swift_allocObject();
  *(_QWORD *)&v32 = v11;
  *(_QWORD *)(v11 + 16) = 0x207865646E49;
  *(_QWORD *)(v11 + 24) = 0xE600000000000000;
  *(_QWORD *)(v11 + 32) = v4;
  *(_BYTE *)(v11 + 40) = 0;
  v7[2] = v10 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)&v7[5 * v10 + 4]);
  v13 = v2[1];
  if (v4 >= *(_QWORD *)(v13 + 16))
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v21 = v20;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v21 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v13 + 32 * v4 + 32, (uint64_t)&v32);
    outlined init with copy of Any((uint64_t)&v32, (uint64_t)v31);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
    v14 = MEMORY[0x1E0DEE9B8] + 8;
    if ((swift_dynamicCast() & 1) != 0)
    {

      v15 = type metadata accessor for DecodingError();
      swift_allocError();
      v17 = v16;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v17 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UnkeyedDecodingContainer);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v18 = (unsigned int *)MEMORY[0x1E0DEC460];
LABEL_14:
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *v18, v15);
      swift_willThrow();
      goto LABEL_15;
    }
    outlined init with copy of Any((uint64_t)&v32, (uint64_t)v31);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Any], v14, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
    {
      v15 = type metadata accessor for DecodingError();
      swift_allocError();
      v17 = v29;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v17 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v18 = (unsigned int *)MEMORY[0x1E0DEC450];
      goto LABEL_14;
    }
    v22 = v2[3];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v25 = v35;
      v2[3] = v24;
      v26 = *v2;
      swift_beginAccess();
      v27 = *(_QWORD *)(v26 + 136);
      a1[3] = &unk_1E1AFBA30;
      a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer();
      v28 = (_QWORD *)swift_allocObject();
      *a1 = v28;
      v28[2] = v26;
      v28[3] = v25;
      v28[4] = v27;
      v28[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_15:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t _JSONUnkeyedDecodingContainer.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD v31[8];
  uint64_t v32;

  v3 = v1;
  v5 = *v1;
  v6 = v1[3];
  *(_QWORD *)&v27 = 0x207865646E49;
  *((_QWORD *)&v27 + 1) = 0xE600000000000000;
  v30 = v6;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = (uint64_t *)(v5 + 136);
  swift_beginAccess();
  v9 = *(_QWORD **)(v5 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 136) = v9;
  v32 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *v8 = (uint64_t)v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = (uint64_t)v9;
  }
  v28 = &unk_1E1B0CCC8;
  v29 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v13 = swift_allocObject();
  *(_QWORD *)&v27 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v6;
  *(_BYTE *)(v13 + 40) = 0;
  v9[2] = v12 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v27, (uint64_t)&v9[5 * v12 + 4]);
  v15 = v3[1];
  if (v6 >= *(_QWORD *)(v15 + 16))
  {
    v24 = type metadata accessor for DecodingError();
    swift_allocError();
    v26 = v25;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v26 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Decoder);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC460], v24);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v3);
  }
  else if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    v16 = *v8;
    v3[3] = v6 + 1;
    outlined init with copy of Any(v15 + 32 * v6 + 32, (uint64_t)&v27);
    v17 = *(_OWORD *)(v5 + 24);
    v18 = *(_OWORD *)(v5 + 40);
    v19 = *(_OWORD *)(v5 + 56);
    v20 = *(_OWORD *)(v5 + 72);
    v21 = *(_OWORD *)(v5 + 104);
    v31[4] = *(_OWORD *)(v5 + 88);
    v31[5] = v21;
    v31[6] = *(_OWORD *)(v5 + 120);
    v31[2] = v19;
    v31[3] = v20;
    v31[0] = v17;
    v31[1] = v18;
    v22 = type metadata accessor for __DictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    outlined retain of DictionaryDecoder._Options((uint64_t)v31);
    v23 = __DictionaryDecoder.init(referencing:at:options:)((uint64_t)&v27, v16, v31);
    a1[3] = v22;
    a1[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryDecoder, (uint64_t)&protocol conformance descriptor for __DictionaryDecoder);
    *a1 = v23;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v3);
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _JSONUnkeyedDecodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance _JSONUnkeyedDecodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) >= *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _JSONUnkeyedDecodingContainer()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _JSONUnkeyedDecodingContainer()
{
  char v0;

  _JSONUnkeyedDecodingContainer.decodeNil()();
  return v0 & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _JSONUnkeyedDecodingContainer()
{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)() & 1;
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEDA70]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEDB58]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEDE70]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(__int128 *))specialized __DictionaryDecoder.unbox(_:as:), MEMORY[0x1E0DEE068]);
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _JSONUnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _JSONUnkeyedDecodingContainer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _JSONUnkeyedDecodingContainer.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED2E0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED300]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED308]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED310]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED328]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED320]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED330]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED338]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E0DED348]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance _JSONUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _JSONUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _JSONUnkeyedDecodingContainer@<X0>(_QWORD *a1@<X8>)
{
  return _JSONUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _JSONUnkeyedDecodingContainer@<X0>(uint64_t *a1@<X8>)
{
  return _JSONUnkeyedDecodingContainer.superDecoder()(a1);
}

uint64_t specialized __DictionaryDecoder.expectNonNull<A>(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEB418];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEDA70];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEAFA0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEDB58];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEDBC8];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEDC60];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEBB98];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEDE70];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEE068];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEE0F8];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEE190];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEB188];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEB070];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _BYTE v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v2 = type metadata accessor for DecodingError();
    swift_allocError();
    v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v4 = MEMORY[0x1E0DEA968];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, *MEMORY[0x1E0DEC460], v2);
    return swift_willThrow();
  }
  return result;
}

uint64_t __DictionaryDecoder.expectNonNull<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  _BYTE v10[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v1 + 16), (uint64_t)v10);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {

    v4 = type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v6 = a1;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x8000000187BDCCC0;
    v8._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v8);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0DEC460], v4);
    return swift_willThrow();
  }
  return result;
}

uint64_t __DictionaryDecoder.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v17[32];

  v10 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v17[-v12 - 8];
  result = __DictionaryDecoder.expectNonNull<A>(_:)(a1);
  if (!v5)
  {
    swift_beginAccess();
    _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v4 + 16), (uint64_t)v17);
    __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)v17, a1, a2, a3, (uint64_t)v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v15 = *(_QWORD *)(a2 - 8);
    result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, a2);
    if ((_DWORD)result == 1)
      __break(1u);
    else
      return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(a4, v13, a2);
  }
  return result;
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __DictionaryEncoder()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SingleValueDecodingContainer.decodeNil() in conformance __DictionaryDecoder()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v4;
  _BYTE v5[32];

  v1 = *v0;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v1 + 16), (uint64_t)v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  v2 = swift_dynamicCast();
  if ((_DWORD)v2)

  return v2;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;
  _BYTE v6[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return v3 & 1;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v2 + 16), (uint64_t)v6);
  v4 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v4 != 2)
  {
    v3 = v4 & 1;
    return v3 & 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v2 + 16), (uint64_t)v6);
  v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
  v4 = v3;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v4)
    return v2;
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;
  _BYTE v6[32];

  v2 = *v0;
  result = specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (!v1)
  {
    swift_beginAccess();
    _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v2 + 16), (uint64_t)v6);
    specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
    v5 = v4;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    if ((v5 & 1) != 0)
      __break(1u);
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];

  v2 = *v0;
  result = specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (!v1)
  {
    swift_beginAccess();
    _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v2 + 16), (uint64_t)v6);
    specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
    v5 = v4;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    if ((v5 & 0x100000000) != 0)
      __break(1u);
  }
  return result;
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  _BYTE v6[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return (uint64_t)v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, 7630409, (void *)0xE300000000000000);
  v5 = v4;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v2 + 16), (uint64_t)v5);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v5, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, 0x3233746E49, (void *)0xE500000000000000);
  v2 = v3;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v2 & 0x100000000) == 0)
    return v2;
  __break(1u);
  return result;
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  _BYTE v6[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return (uint64_t)v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, 0x3436746E49, (void *)0xE500000000000000);
  v5 = v4;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  _BYTE v6[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return (uint64_t)v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, 1953384789, (void *)0xE400000000000000);
  v5 = v4;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v2 + 16), (uint64_t)v5);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v5, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, 0x3233746E4955, (void *)0xE600000000000000);
  v2 = v3;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v2 & 0x100000000) == 0)
    return v2;
  __break(1u);
  return result;
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  _BYTE v6[32];

  v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1)
    return (uint64_t)v2;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, 0x3436746E4955, (void *)0xE600000000000000);
  v5 = v4;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(uint64_t a1, uint64_t a2)
{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(_BYTE *))specialized __DictionaryDecoder.unbox(_:as:));
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(_BYTE *))specialized __DictionaryDecoder.unbox(_:as:));
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(_BYTE *))specialized __DictionaryDecoder.unbox(_:as:));
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(_BYTE *))specialized __DictionaryDecoder.unbox(_:as:));
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(_BYTE *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[32];

  v7 = *v4;
  a3();
  if (v5)
    return v7;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v7 + 16), (uint64_t)v9);
  v7 = a4(v9);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if ((v7 & 0x100) == 0)
    return v7;
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[32];

  v7 = *v4;
  a3();
  if (v5)
    return v7;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(_QWORD *)(v7 + 16), (uint64_t)v9);
  v7 = a4(v9);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if ((v7 & 0x10000) == 0)
    return v7;
  __break(1u);
  return result;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance __DictionaryDecoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return __DictionaryDecoder.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t outlined init with take of (key: String, value: Encodable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (key: String, value: Encodable)?, (void (*)(uint64_t))type metadata accessor for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: String, value: Encodable)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: String, value: Encodable))
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for Encodable);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: Encodable));
  }
}

uint64_t __DictionaryDecoder.unbox(_:as:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  id v21[2];
  _BYTE v22[32];

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, a2, a3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v21 - v10;
  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    v12 = ((uint64_t (*)(_QWORD))a3)(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
  }
  outlined init with copy of Any(a1, (uint64_t)v22);
  v14 = ((uint64_t (*)(_QWORD))a3)(0);
  v15 = swift_dynamicCast();
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  if (v15)
  {
    v17(v11, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v14) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v11, v14);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(a4, 0, 1, v14);
    }
  }
  else
  {
    v17(v11, 1, 1, v14);
  }
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  v18 = type metadata accessor for DecodingError();
  swift_allocError();
  v20 = v19;
  type metadata accessor for (@thick Any.Type, DecodingError.Context)();
  *v20 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC450], v18);
  return swift_willThrow();
}

uint64_t __DictionaryDecoder.unbox(_:as:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;
  uint64_t result;
  char v6;
  void *v7;
  _BYTE v8[32];

  outlined init with copy of Any(a1, (uint64_t)v8);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  v3 = swift_dynamicCast();
  v4 = v3;
  if (v3)
  {

    result = 0;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)v8);
    type metadata accessor for NSDecimal(0);
    if (swift_dynamicCast())
    {
      result = (uint64_t)v7;
    }
    else
    {
      result = specialized __DictionaryDecoder.unbox(_:as:)(a1);
      if (v1)
        return result;
      if ((v6 & 1) != 0)
      {
        __break(1u);
        return result;
      }
      result = MEMORY[0x18D75DF0C](*(double *)&result);
    }
  }
  v8[0] = v4;
  return result;
}

void specialized __DictionaryDecoder.unbox<A>(_:as:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  _OWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  _OWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  _OWORD v49[2];
  __int128 v50;
  void *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;

  outlined init with copy of Any(a1, (uint64_t)&v53);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    *a4 = 0u;
    a4[1] = 0u;
    return;
  }
  outlined init with copy of Any(a1, (uint64_t)&v53);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v40 = type metadata accessor for DecodingError();
    swift_allocError();
    v42 = v41;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v42 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x1E0DEC450], v40);
    swift_willThrow();
    return;
  }
  v43 = a4;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v45 = v10;
  v46 = v9;
  v44 = (void *)v50;
  NSDictionary.makeIterator()();
  v11 = v47 + 136;
  swift_retain();
  swift_beginAccess();
  NSDictionary.Iterator.next()();
  outlined init with take of (key: Any, value: Any)?((uint64_t)&v50, (uint64_t)&v53);
  if (!v54)
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_39:

    swift_release_n();
    *(_QWORD *)&v53 = v12;
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DEA048]);
    if ((swift_dynamicCast() & 1) == 0)
    {
      *v43 = 0u;
      v43[1] = 0u;
    }
    return;
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    outlined init with take of Any(&v55, v49);
    outlined init with take of Any(&v53, &v50);
    swift_dynamicCast();
    v13 = v48[0];
    v14 = *(_QWORD **)v11;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)v11 = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)v11 = v14;
    }
    v51 = &unk_1E1B0CCC8;
    v52 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v18 = swift_allocObject();
    *(_QWORD *)&v50 = v18;
    *(_OWORD *)(v18 + 16) = v13;
    *(_QWORD *)(v18 + 32) = 0;
    *(_BYTE *)(v18 + 40) = 1;
    v14[2] = v17 + 1;
    outlined init with take of OptionalBinaryInteger(&v50, (uint64_t)&v14[5 * v17 + 4]);
    __DictionaryDecoder.unbox_(_:as:)(&v50, v49, v46, v45);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v47);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      return;
    }
    if (v51)
    {
      outlined init with take of Any(&v50, v48);
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v56 = v12;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((uint64_t *)&v13 + 1));
      v22 = v12[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        goto LABEL_45;
      v25 = v20;
      if (v12[3] < v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v19);
        v26 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((uint64_t *)&v13 + 1));
        if ((v25 & 1) != (v27 & 1))
          goto LABEL_47;
        v21 = v26;
        v12 = v56;
        if ((v25 & 1) == 0)
          goto LABEL_27;
LABEL_23:
        v32 = (_OWORD *)(v12[7] + 32 * v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
        outlined init with take of Any(v48, v32);
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      if ((v19 & 1) != 0)
      {
        v12 = v56;
        if ((v20 & 1) != 0)
          goto LABEL_23;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v12 = v56;
        if ((v25 & 1) != 0)
          goto LABEL_23;
      }
LABEL_27:
      v12[(v21 >> 6) + 8] |= 1 << v21;
      *(_OWORD *)(v12[6] + 16 * v21) = v13;
      outlined init with take of Any(v48, (_OWORD *)(v12[7] + 32 * v21));
      v33 = v12[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_46;
      v12[2] = v35;
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    outlined destroy of Any?((uint64_t)&v50);
    swift_bridgeObjectRetain();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((uint64_t *)&v13 + 1));
    v30 = v29;
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
    {
      v31 = swift_isUniquelyReferenced_nonNull_native();
      v56 = v12;
      if ((v31 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v12 = v56;
      }
      swift_bridgeObjectRelease();
      outlined init with take of Any((_OWORD *)(v12[7] + 32 * v28), v48);
      specialized _NativeDictionary._delete(at:)(v28, (uint64_t)v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v48, 0, sizeof(v48));
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v48);
LABEL_30:
    swift_beginAccess();
    v36 = *(_QWORD **)v11;
    if (!*(_QWORD *)(*(_QWORD *)v11 + 16))
      break;
    v37 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v36;
    if ((v37 & 1) != 0)
    {
      v38 = v36[2];
      if (!v38)
        goto LABEL_44;
    }
    else
    {
      v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      *(_QWORD *)v11 = v36;
      v38 = v36[2];
      if (!v38)
        goto LABEL_44;
    }
    v39 = v38 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36[5 * v38 - 1]);
    v36[2] = v39;
    *(_QWORD *)v11 = v36;
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    NSDictionary.Iterator.next()();
    outlined init with take of (key: Any, value: Any)?((uint64_t)&v50, (uint64_t)&v53);
    if (!v54)
      goto LABEL_39;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void __DictionaryDecoder.unbox_(_:as:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t *v46;
  uint64_t *v47;
  char **v48;
  char *v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v59 = a3;
  v60 = a4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v58 - v9;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v58 - v18;
  v20 = type metadata accessor for Date();
  if (v20 == a2 || type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDate) == a2)
  {
    v27 = v67;
    __DictionaryDecoder.unbox(_:as:)(a1, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t)v19);
    if (v27)
      return;
    v28 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v20) != 1)
    {
      v33 = v60;
      v60[3] = v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
      (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 32))(boxed_opaque_existential_1, v19, v20);
      return;
    }
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x1E0CB0870], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_22;
  }
  v21 = MEMORY[0x1E0CB0338];
  if (a2 == MEMORY[0x1E0CB0338]
    || type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSData) == a2)
  {
    v29 = v67;
    v30 = specialized __DictionaryDecoder.unbox(_:as:)(a1);
    if (v29)
      return;
    if (v31 >> 60 != 15)
    {
      v39 = v60;
      v60[3] = v21;
      *v39 = v30;
      v39[1] = v31;
      return;
    }
    goto LABEL_22;
  }
  if (v11 != a2 && type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL) != a2)
  {
    type metadata accessor for NSDecimal(0);
    v23 = v22;
    if (v22 != a2
      && type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDecimalNumber) != a2)
    {
      v24 = swift_conformsToProtocol2();
      if (v24)
        v25 = v24;
      else
        v25 = 0;
      if (v24)
        v26 = a2;
      else
        v26 = 0;
      if (v26)
      {
        specialized __DictionaryDecoder.unbox<A>(_:as:)(a1, v26, v25, v60);
      }
      else
      {
        outlined init with copy of Any(a1, (uint64_t)v64);
        v48 = (char **)(v4 + 16);
        swift_beginAccess();
        outlined init with copy of Any((uint64_t)v64, (uint64_t)&v61);
        v49 = *(char **)(v4 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v4 + 16) = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
          *v48 = v49;
        }
        v52 = *((_QWORD *)v49 + 2);
        v51 = *((_QWORD *)v49 + 3);
        if (v52 >= v51 >> 1)
        {
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, v49);
          *v48 = v49;
        }
        *((_QWORD *)v49 + 2) = v52 + 1;
        outlined init with take of Any(&v61, &v49[32 * v52 + 32]);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        swift_endAccess();
        v62 = type metadata accessor for __DictionaryDecoder();
        v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (uint64_t (*)(uint64_t))type metadata accessor for __DictionaryDecoder, (uint64_t)&protocol conformance descriptor for __DictionaryDecoder);
        *(_QWORD *)&v61 = v4;
        v65 = a2;
        v66 = v59;
        __swift_allocate_boxed_opaque_existential_1(v64);
        swift_retain();
        v53 = v67;
        dispatch thunk of Decodable.init(from:)();
        if (v53)
        {
          __swift_deallocate_boxed_opaque_existential_0((uint64_t)v64);
        }
        else
        {
          v54 = v65;
          v55 = __swift_project_boxed_opaque_existential_1(v64, v65);
          v56 = v60;
          v60[3] = v54;
          v57 = __swift_allocate_boxed_opaque_existential_1(v56);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v57, v55, v54);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        }
        swift_beginAccess();
        _DictionaryDecodingStorage.popContainer()();
        swift_endAccess();
      }
      return;
    }
    v40 = v67;
    v41 = __DictionaryDecoder.unbox(_:as:)(a1);
    if (v40)
      return;
    if ((v43 & 0x100000000) == 0)
    {
      v44 = v60;
      v60[3] = v23;
      *v44 = v41;
      v44[1] = v42;
      *((_DWORD *)v44 + 4) = v43;
      return;
    }
LABEL_22:
    v32 = v60;
    *(_OWORD *)v60 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    return;
  }
  v35 = v67;
  __DictionaryDecoder.unbox(_:as:)(a1, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t)v10);
  if (!v35)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
      v36 = type metadata accessor for DecodingError();
      swift_allocError();
      v38 = v37;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC458], v36);
      swift_willThrow();
    }
    else
    {
      v45 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v45(v15, v10, v11);
      v46 = v60;
      v60[3] = v11;
      v47 = __swift_allocate_boxed_opaque_existential_1(v46);
      v45((char *)v47, v15, v11);
    }
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _JSONKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _JSONKey()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _JSONKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = dispatch thunk of CustomStringConvertible.description.getter();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _JSONKey()
{
  lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _JSONKey()
{
  lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  return CodingKey.debugDescription.getter();
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v47[4];

  v47[3] = a4;
  if (a1 < 0)
    goto LABEL_35;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = a5;
  if (!a1 || (v45 = a6 >> 14, a6 >> 14 == a5 >> 14))
  {
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(a6, v44, a2 & 1, v10);
    swift_bridgeObjectRelease();
    a6 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_5:
    swift_release();
    return a6;
  }
  v35 = a1;
  v36 = v10;
  v43 = (char *)MEMORY[0x1E0DEE9D8];
  v12 = a5;
  v13 = a5;
  v40 = a5;
  while (1)
  {
    v47[0] = Substring.subscript.getter();
    v47[1] = v14;
    v15 = a3(v47);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a6;
    }
    v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      break;
    v12 = Substring.index(after:)();
LABEL_9:
    if (v45 == v12 >> 14)
      goto LABEL_24;
  }
  if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
  {
    v12 = Substring.index(after:)();
    *(_QWORD *)(v44 + 16) = v12;
    v13 = v12;
    v40 = v12;
    goto LABEL_9;
  }
  if (v12 >> 14 < v13 >> 14)
    goto LABEL_34;
  v17 = Substring.subscript.getter();
  v39 = v18;
  v41 = v17;
  v37 = v20;
  v38 = v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
  v22 = *((_QWORD *)v43 + 2);
  v21 = *((_QWORD *)v43 + 3);
  if (v22 >= v21 >> 1)
    v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v43);
  *((_QWORD *)v43 + 2) = v22 + 1;
  v23 = &v43[32 * v22];
  *((_QWORD *)v23 + 4) = v41;
  *((_QWORD *)v23 + 5) = v39;
  *((_QWORD *)v23 + 6) = v38;
  *((_QWORD *)v23 + 7) = v37;
  *(_QWORD *)(v36 + 16) = v43;
  v24 = Substring.index(after:)();
  v12 = v24;
  *(_QWORD *)(v44 + 16) = v24;
  if (*((_QWORD *)v43 + 2) != v35)
  {
    v13 = v24;
    v40 = v24;
    goto LABEL_9;
  }
  v40 = v24;
  v13 = v24;
LABEL_24:
  if (v45 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
LABEL_33:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_5;
  }
  if (v45 >= v40 >> 14)
  {
    v25 = Substring.subscript.getter();
    v27 = v26;
    v29 = v28;
    v31 = v30;
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
    v33 = *(_QWORD *)(a6 + 16);
    v32 = *(_QWORD *)(a6 + 24);
    if (v33 >= v32 >> 1)
      a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, (char *)a6);
    *(_QWORD *)(a6 + 16) = v33 + 1;
    v34 = (_QWORD *)(a6 + 32 * v33);
    v34[4] = v25;
    v34[5] = v27;
    v34[6] = v29;
    v34[7] = v31;
    *(_QWORD *)(v36 + 16) = a6;
    goto LABEL_33;
  }
LABEL_34:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_35:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = Substring.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(char **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    *((_QWORD *)v14 + 2) = v17 + 1;
    v18 = &v14[32 * v17];
    *((_QWORD *)v18 + 4) = v7;
    *((_QWORD *)v18 + 5) = v9;
    *((_QWORD *)v18 + 6) = v11;
    *((_QWORD *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey;
  if (!lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONKey, &unk_1E1B0CCC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey;
  if (!lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONKey, &unk_1E1B0CCC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey;
  if (!lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONKey, &unk_1E1B0CCC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONKey and conformance _JSONKey);
  }
  return result;
}

uint64_t sub_18733F028()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized Array._customRemoveLast()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for (Any, EncodingError.Context)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Any, EncodingError.Context))
  {
    type metadata accessor for EncodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any, EncodingError.Context));
  }
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of OptionalBinaryInteger(&v12, v10 + 40 * a1 + 32);
}

uint64_t specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(double);
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v62 = a7;
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v63 = v16;
  v64 = v15;
  v17 = *(void (**)(double))(v16 + 32);
  v61 = (char *)&v48 - v18;
  v17(v14);
  *(_QWORD *)(a5 + 144) = a1;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  swift_retain();
  swift_retain();
  v19 = a4;
  v20 = dispatch thunk of CodingKey.stringValue.getter();
  v59 = v19;
  *(_QWORD *)(a5 + 152) = v19;
  *(_QWORD *)(a5 + 160) = v20;
  *(_QWORD *)(a5 + 168) = v21;
  *(_BYTE *)(a5 + 176) = 1;
  swift_release();
  v22 = *(_QWORD *)(a1 + 32);
  v57 = *(void **)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v52 = v22;
  v53 = v24;
  v48 = v23;
  v25 = *(_QWORD *)(a1 + 72);
  v55 = *(_QWORD *)(a1 + 64);
  v26 = v55;
  v50 = v25;
  v28 = *(_QWORD *)(a1 + 88);
  v54 = *(_QWORD *)(a1 + 80);
  v27 = v54;
  v29 = *(_QWORD *)(a1 + 96);
  v49 = *(_QWORD *)(a1 + 104);
  v30 = *(_QWORD *)(a1 + 120);
  v56 = *(_QWORD *)(a1 + 112);
  v31 = v56;
  v32 = *(_QWORD *)(a1 + 128);
  v65 = v30;
  v66 = v32;
  LOBYTE(a3) = *(_BYTE *)(a1 + 40);
  v51 = a3;
  swift_beginAccess();
  v58 = *(_QWORD *)(a1 + 136);
  v33 = v58;
  *(_QWORD *)(a5 + 32) = v22;
  *(_BYTE *)(a5 + 40) = (_BYTE)a3;
  *(_QWORD *)(a5 + 48) = v24;
  *(_QWORD *)(a5 + 56) = v48;
  *(_QWORD *)(a5 + 64) = v26;
  v34 = v50;
  *(_QWORD *)(a5 + 72) = v50;
  *(_QWORD *)(a5 + 80) = v27;
  *(_QWORD *)(a5 + 88) = v28;
  *(_QWORD *)(a5 + 96) = v29;
  *(_QWORD *)(a5 + 104) = v49;
  *(_QWORD *)(a5 + 112) = v31;
  v35 = v66;
  *(_QWORD *)(a5 + 120) = v65;
  v36 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a5 + 128) = v35;
  v37 = v57;
  *(_QWORD *)(a5 + 16) = v36;
  *(_QWORD *)(a5 + 24) = v37;
  *(_QWORD *)(a5 + 136) = v33;
  v38 = (_QWORD *)(a5 + 136);
  swift_beginAccess();
  v39 = *(_QWORD **)(a5 + 136);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v37, v52, v51);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v53);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v55, v34);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a5 + 136) = v39;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    *v38 = v39;
  }
  v42 = v39[2];
  v41 = v39[3];
  if (v42 >= v41 >> 1)
    *v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v39);
  v44 = v63;
  v43 = v64;
  v46 = (uint64_t)v60;
  v45 = v61;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v64);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v46, (uint64_t *)(a5 + 136), v43, v62);
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
  return a5;
}

unint64_t specialized static DictionaryDecoder.KeyDecodingStrategy._convertFromSnakeCase(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  Swift::String *v36;
  Swift::String v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  Swift::String v64;
  _QWORD v65[4];
  Swift::String *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v3 = a1;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    return v3;
  }
  v5 = 0;
  v6 = 4 * v4;
  v7 = 15;
  while (1)
  {
    if (String.subscript.getter() == 95 && v9 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      break;
LABEL_7:
    v7 = String.index(after:)();
    v5 = v7 >> 14;
    if (v7 >> 14 == v6)
      goto LABEL_11;
  }
  v11 = 7;
  if (((a2 >> 60) & ((v3 & 0x800000000000000) == 0)) != 0)
    v11 = 11;
  v70 = v11 | (v4 << 16);
  result = String.index(before:)();
  i = result >> 14;
  if (v5 < result >> 14)
  {
    if (String.subscript.getter() == 95 && v13 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
        goto LABEL_30;
    }
    result = String.index(before:)();
    for (i = result >> 14; v5 < result >> 14; i = result >> 14)
    {
      if (String.subscript.getter() == 95 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          break;
      }
      result = String.index(before:)();
    }
  }
LABEL_30:
  if (i < v5)
  {
    __break(1u);
    goto LABEL_53;
  }
  result = String.index(after:)();
  v69 = result;
  v71 = result >> 14;
  v72 = v6;
  if (v6 < result >> 14)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  String.index(after:)();
  v18 = String.subscript.getter();
  v20 = v19;
  v21 = swift_bridgeObjectRelease();
  *(_QWORD *)&v74 = 95;
  *((_QWORD *)&v74 + 1) = 0xE100000000000000;
  MEMORY[0x1E0C80A78](v21, v22);
  v65[2] = &v74;
  swift_bridgeObjectRetain();
  v23 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v65, v18, v20);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (v24 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    v25 = String.subscript.getter();
    v27 = v26;
    v29 = v28;
    v31 = v30;
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x18D75CD24](v25, v27, v29, v31);
    v34 = v33;
    swift_bridgeObjectRelease();
    v35 = v72;
    if (!(v7 >> 14))
      goto LABEL_34;
LABEL_47:
    v55 = String.subscript.getter();
    v56 = MEMORY[0x18D75CD24](v55);
    v58 = v57;
    swift_bridgeObjectRelease();
    if (v71 == v35)
    {
      *(_QWORD *)&v74 = v56;
      *((_QWORD *)&v74 + 1) = v58;
      swift_bridgeObjectRetain();
      v59._countAndFlagsBits = v32;
      v59._object = v34;
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    *(_QWORD *)&v74 = v56;
    *((_QWORD *)&v74 + 1) = v58;
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = v32;
    v60._object = v34;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = (void *)*((_QWORD *)&v74 + 1);
    v61 = v74;
    v62 = String.subscript.getter();
    v51 = MEMORY[0x18D75CD24](v62);
    v53 = v63;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v74 = v61;
LABEL_50:
    *((_QWORD *)&v74 + 1) = v34;
    swift_bridgeObjectRetain();
    v64._countAndFlagsBits = v51;
    v64._object = v53;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRelease();
    return v74;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_187BF9830;
  if (!v24)
    goto LABEL_54;
  v36 = (Swift::String *)result;
  swift_bridgeObjectRetain();
  v37 = Substring.lowercased()();
  result = swift_bridgeObjectRelease();
  v36[2] = v37;
  v68 = v23;
  v38 = *(_QWORD *)(v23 + 16);
  v35 = v72;
  if (!v38)
  {
LABEL_55:
    __break(1u);
    return result;
  }
  v67 = v3;
  v39 = v38 - 1;
  if (v38 == 1)
  {
    swift_bridgeObjectRelease();
    v40 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v66 = v36;
    v77 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
    v40 = v77;
    v73 = lazy protocol witness table accessor for type Substring and conformance Substring();
    v41 = (uint64_t *)(v68 + 88);
    do
    {
      v42 = *(v41 - 1);
      v43 = *v41;
      v74 = *(_OWORD *)(v41 - 3);
      v75 = v42;
      v76 = v43;
      v44 = StringProtocol.capitalized.getter();
      v46 = v45;
      v77 = v40;
      v48 = *(_QWORD *)(v40 + 16);
      v47 = *(_QWORD *)(v40 + 24);
      if (v48 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1);
        v40 = v77;
      }
      *(_QWORD *)(v40 + 16) = v48 + 1;
      v49 = v40 + 16 * v48;
      *(_QWORD *)(v49 + 32) = v44;
      *(_QWORD *)(v49 + 40) = v46;
      v41 += 4;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    v35 = v72;
    v36 = v66;
  }
  *(_QWORD *)&v74 = v36;
  specialized Array.append<A>(contentsOf:)(v40);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v32 = BidirectionalCollection<>.joined(separator:)();
  v34 = v54;
  swift_bridgeObjectRelease();
  if (v7 >> 14)
    goto LABEL_47;
LABEL_34:
  if (v71 != v35)
  {
    v50 = String.subscript.getter();
    v51 = MEMORY[0x18D75CD24](v50);
    v53 = v52;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v74 = v32;
    goto LABEL_50;
  }
  return v32;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5D11OIegnrzr_TRSSypSSypIggnor_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(_OWORD *, _QWORD, _QWORD, _OWORD *), uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  _OWORD v37[2];
  _QWORD v38[2];
  _BYTE v39[32];
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;

  v43 = a3;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return v4;
  v42 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  result = specialized Dictionary.startIndex.getter(a1);
  v8 = result;
  v9 = 0;
  v10 = a1 + 64;
  v11 = *(_BYTE *)(a1 + 32);
  v31 = v7;
  v32 = a1 + 64;
  v30 = v3;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << v11)
  {
    v14 = (unint64_t)v8 >> 6;
    if ((*(_QWORD *)(v10 + 8 * ((unint64_t)v8 >> 6)) & (1 << v8)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a1 + 36) != v7)
      goto LABEL_28;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v17 = *v15;
    v16 = v15[1];
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)v39);
    v38[0] = v17;
    v38[1] = v16;
    *(_QWORD *)&v36 = v17;
    *((_QWORD *)&v36 + 1) = v16;
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v37);
    v34 = v36;
    v35[0] = v37[0];
    v35[1] = v37[1];
    swift_bridgeObjectRetain_n();
    v18 = MEMORY[0x1E0DEA968];
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD))type metadata accessor for (key: Any, value: Any));
    *(_QWORD *)&v40 = a2(v41, v34, *((_QWORD *)&v34 + 1), v35);
    *((_QWORD *)&v40 + 1) = v19;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)&v34, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), v18, (uint64_t (*)(_QWORD))type metadata accessor for (key: Any, value: Any));
    v4 = v42;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v4 = v42;
    }
    v21 = *(_QWORD *)(v4 + 16);
    v20 = *(_QWORD *)(v4 + 24);
    if (v21 >= v20 >> 1)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1);
      v4 = v42;
    }
    *(_QWORD *)(v4 + 16) = v21 + 1;
    v22 = (_OWORD *)(v4 + 48 * v21);
    v23 = v40;
    v24 = v41[1];
    v22[3] = v41[0];
    v22[4] = v24;
    v22[2] = v23;
    v11 = *(_BYTE *)(a1 + 32);
    v12 = 1 << v11;
    if (v8 >= 1 << v11)
      goto LABEL_29;
    v10 = a1 + 64;
    v25 = *(_QWORD *)(v32 + 8 * v14);
    if ((v25 & (1 << v8)) == 0)
      goto LABEL_30;
    v7 = v31;
    if (*(_DWORD *)(a1 + 36) != v31)
      goto LABEL_31;
    v26 = v25 & (-2 << (v8 & 0x3F));
    if (v26)
    {
      v12 = __clz(__rbit64(v26)) | v8 & 0xFFFFFFFFFFFFFFC0;
      v13 = v30;
    }
    else
    {
      v27 = v14 + 1;
      v28 = (v12 + 63) >> 6;
      v13 = v30;
      if (v14 + 1 < v28)
      {
        v29 = *(_QWORD *)(v32 + 8 * v27);
        if (!v29)
        {
          v27 = v14 + 2;
          if (v14 + 2 >= v28)
            goto LABEL_4;
          v29 = *(_QWORD *)(v32 + 8 * v27);
          if (!v29)
          {
            while (v28 - 3 != v14)
            {
              v29 = *(_QWORD *)(a1 + 88 + 8 * v14++);
              if (v29)
              {
                v27 = v14 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v12 = __clz(__rbit64(v29)) + (v27 << 6);
      }
    }
LABEL_4:
    ++v9;
    v8 = v12;
    if (v9 == v13)
      return v4;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50124_s7SwiftUI17DictionaryEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_2462DFFC835A6F4511AFEB231EB4B8C2LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      String.subscript.getter();
      v5 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(Swift::String *)(v9 + 16 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _OWORD v25[2];
  _OWORD v26[2];
  _QWORD v27[2];
  uint64_t v28;
  uint64_t *v29;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return result;
  v29 = &v28;
  v6 = result + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)v27);
    v10 = v27[0];
    v9 = v27[1];
    outlined init with take of Any(v29, v26);
    v11 = *a3;
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (*(_QWORD *)(v11 + 24) >= v16)
    {
      if ((a2 & 1) != 0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v17 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_20;
      v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_3:
        v7 = 32 * v13;
        outlined init with copy of Any(*(_QWORD *)(*a3 + 56) + v7, (uint64_t)v25);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        swift_bridgeObjectRelease();
        v8 = (_OWORD *)(*(_QWORD *)(*a3 + 56) + v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        outlined init with take of Any(v25, v8);
        goto LABEL_4;
      }
    }
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v21 = (uint64_t *)(v20[6] + 16 * v13);
    *v21 = v10;
    v21[1] = v9;
    outlined init with take of Any(v26, (_OWORD *)(v20[7] + 32 * v13));
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_19;
    v20[2] = v24;
LABEL_4:
    v6 += 48;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  uint64_t v12[3];

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    if (v4 == 1)
    {
      swift_retain();
      v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5d148OIegnrzr_TR160_s7SwiftUI33_DictionaryKeyedDecodingContainer33_2462DFFC835A6F4511AFEB231EB4B8C2LLV11referencing8wrappingADyxGAA02__C7DecoderACLLC_SDyf5Gtcfcj4_yptJ19_yptXEfU_Tf3nnnpf_nTf1cn_n(a2);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v5 + 16))
      {
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
        v6 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v6 = MEMORY[0x1E0DEE9E0];
      }
      v12[0] = v6;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, 1, v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 120);
      MEMORY[0x1E0C80A78](a1, a2);
      v11[2] = v4;
      v11[3] = v7;
      v11[4] = a1;
      swift_retain();
      outlined copy of DictionaryDecoder.KeyDecodingStrategy(v4);
      v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5D11OIegnrzr_TRSSypSSypIggnor_Tf1cn_nTf4ng_n(a2, (uint64_t (*)(_OWORD *, _QWORD, _QWORD, _OWORD *))partial apply for closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:), (uint64_t)v11);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v8 + 16))
      {
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x1E0DECD58]);
        v9 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v9 = MEMORY[0x1E0DEE9E0];
      }
      v12[0] = v9;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v8, 1, v12);
      swift_bridgeObjectRelease();
      outlined consume of DictionaryDecoder.KeyDecodingStrategy(v4);
    }
  }
  else
  {
    swift_retain();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  _BYTE v7[32];

  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)v7);
    if (swift_dynamicCast())
    {
      return (uint64_t)v6;
    }
    else
    {
      v3 = type metadata accessor for DecodingError();
      swift_allocError();
      v5 = v4;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, *MEMORY[0x1E0DEC450], v3);
      return swift_willThrow();
    }
  }
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  _BYTE v7[32];

  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)v7);
    if (swift_dynamicCast())
    {
      return (uint64_t)v6;
    }
    else
    {
      v3 = type metadata accessor for DecodingError();
      swift_allocError();
      v5 = v4;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, *MEMORY[0x1E0DEC450], v3);
      return swift_willThrow();
    }
  }
}

{
  _QWORD *v1;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  _BYTE v18[32];
  uint64_t v19;

  outlined init with copy of Any(a1, (uint64_t)v18);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  outlined init with copy of Any(a1, (uint64_t)v18);
  v4 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (*MEMORY[0x1E0C9AE50])
      v5 = v16 == (id)*MEMORY[0x1E0C9AE50];
    else
      v5 = 0;
    if (!v5 && (!*MEMORY[0x1E0C9AE40] || v16 != (id)*MEMORY[0x1E0C9AE40]))
    {
      objc_msgSend(v16, sel_doubleValue);
      v14 = v13;

      return v14;
    }

  }
  outlined init with copy of Any(a1, (uint64_t)v18);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_18;
  v6 = v1[9];
  if (!v6)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v8 = (id)v1[10];
  v7 = v1[11];
  v9 = (id)v1[12];
  if (v16 == (id)v1[8] && v6 == v17 || (v19 = v1[13], (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0x7FF0000000000000;
  }
  if (v16 == v8 && v7 == v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0xFFF0000000000000;
  }
  if (v16 == v9 && v19 == v17)
  {
    swift_bridgeObjectRelease();
    return 0x7FF8000000000000;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_18:
    v10 = type metadata accessor for DecodingError();
    swift_allocError();
    v12 = v11;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v12 = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC450], v10);
    return swift_willThrow();
  }
  return 0x7FF8000000000000;
}

{
  uint64_t result;
  uint64_t v3;
  id v4;
  BOOL v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  id v9;
  _BYTE v10[32];

  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 2;
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    if (*MEMORY[0x1E0C9AE50])
    {
      if (v9 == (id)*MEMORY[0x1E0C9AE50])
      {

        return 1;
      }
      if (*MEMORY[0x1E0C9AE40])
      {
        if (v9 == (id)*MEMORY[0x1E0C9AE40])
        {

          return 0;
        }
        v4 = objc_msgSend(v9, sel_integerValue);

        v5 = v4 == 0;
        return !v5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  if (swift_dynamicCast())
    return v9;
  outlined init with copy of Any(a1, (uint64_t)v10);
  if (!swift_dynamicCast())
  {
    v6 = type metadata accessor for DecodingError();
    swift_allocError();
    v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v8 = v3;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, *MEMORY[0x1E0DEC450], v6);
    return swift_willThrow();
  }
  v5 = v9 == 0;
  return !v5;
}

uint64_t specialized _JSONUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  void *v40;
  unint64_t v41;
  _QWORD v42[3];
  uint64_t v43;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v20 = MEMORY[0x1E0DEA968];
    v21 = *v0;
    swift_beginAccess();
    v22 = *(_QWORD *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v26 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(v26 + 16) = 0x207865646E49;
    *(_QWORD *)(v26 + 24) = 0xE600000000000000;
    *(_QWORD *)(v26 + 32) = v24;
    *(_BYTE *)(v26 + 40) = 0;
    v42[0] = v22;
    v15 = v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC460], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v39 = 0x207865646E49;
  *((_QWORD *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v40 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v41 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v39 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  v15 = v5;
  v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_10:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  v15 = (_QWORD *)v16;
  v27 = v17;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (!v27)
  {
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = MEMORY[0x1E0DEA968];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
    v43 = v2[3];
    v34 = v43;
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v33 + 64) = v12;
    v36 = swift_allocObject();
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v36 + 16) = 0x207865646E49;
    *(_QWORD *)(v36 + 24) = 0xE600000000000000;
    *(_QWORD *)(v36 + 32) = v34;
    *(_BYTE *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    v15 = v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v37 - 8) + 104))(v32, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_10;
  }
  v28 = v2[3];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  __int128 v38;
  void *v39;
  unint64_t v40;
  _QWORD v41[3];
  uint64_t v42;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v19 = MEMORY[0x1E0DEAFA0];
    v20 = *v0;
    swift_beginAccess();
    v21 = *(_QWORD *)(v20 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v23 = v2[3];
    v41[1] = 0xE600000000000000;
    v37[0] = v23;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v25 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v25;
    *(_QWORD *)(v25 + 16) = 0x207865646E49;
    *(_QWORD *)(v25 + 24) = 0xE600000000000000;
    *(_QWORD *)(v25 + 32) = v23;
    *(_BYTE *)(v25 + 40) = 0;
    v41[0] = v21;
    v15 = v41;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
    swift_willThrow();
    return v15 & 1;
  }
  v5 = *v0;
  *(_QWORD *)&v38 = 0x207865646E49;
  *((_QWORD *)&v38 + 1) = 0xE600000000000000;
  v41[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(v5 + 136);
  swift_beginAccess();
  v8 = *(_QWORD **)(v5 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v39 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v40 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v38 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v38, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v38);
  LOBYTE(v15) = v5;
  v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v38);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
LABEL_13:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15 & 1;
  }
  v26 = v16;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  if (v26 == 2)
  {
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v28 = v27;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v28 = MEMORY[0x1E0DEAFA0];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_187BF9830;
    v42 = v2[3];
    v30 = v42;
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v29 + 64) = v12;
    v32 = swift_allocObject();
    *(_QWORD *)(v29 + 32) = v32;
    *(_QWORD *)(v32 + 16) = 0x207865646E49;
    *(_QWORD *)(v32 + 24) = 0xE600000000000000;
    *(_QWORD *)(v32 + 32) = v30;
    *(_BYTE *)(v32 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v29);
    v37[0] = 0;
    v37[1] = 0xE000000000000000;
    v15 = v37;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v36 - 8) + 104))(v28, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_13;
  }
  v33 = v2[3];
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (!v34)
  {
    LOBYTE(v15) = v26 & 1;
    v2[3] = v35;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15 & 1;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  void *v40;
  unint64_t v41;
  _QWORD v42[3];
  uint64_t v43;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v20 = MEMORY[0x1E0DEB418];
    v21 = *v0;
    swift_beginAccess();
    v22 = *(_QWORD *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v26 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(v26 + 16) = 0x207865646E49;
    *(_QWORD *)(v26 + 24) = 0xE600000000000000;
    *(_QWORD *)(v26 + 32) = v24;
    *(_BYTE *)(v26 + 40) = 0;
    v42[0] = v22;
    v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC460], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v39 = 0x207865646E49;
  *((_QWORD *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v40 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v41 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v39 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  v15 = (SEL *)v5;
  v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, 7630409, (void *)0xE300000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  v15 = v16;
  v27 = v17;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if ((v27 & 1) != 0)
  {
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = MEMORY[0x1E0DEB418];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
    v43 = v2[3];
    v34 = v43;
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v33 + 64) = v12;
    v36 = swift_allocObject();
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v36 + 16) = 0x207865646E49;
    *(_QWORD *)(v36 + 24) = 0xE600000000000000;
    *(_QWORD *)(v36 + 32) = v34;
    *(_BYTE *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v37 - 8) + 104))(v32, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v28 = v2[3];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  void *v38;
  unint64_t v39;
  _QWORD v40[3];
  uint64_t v41;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v19 = MEMORY[0x1E0DEDBC8];
    v20 = *v0;
    swift_beginAccess();
    v21 = *(_QWORD *)(v20 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v23 = v2[3];
    v40[1] = 0xE600000000000000;
    v36[0] = v23;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v25 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v25;
    *(_QWORD *)(v25 + 16) = 0x207865646E49;
    *(_QWORD *)(v25 + 24) = 0xE600000000000000;
    *(_QWORD *)(v25 + 32) = v23;
    *(_BYTE *)(v25 + 40) = 0;
    v40[0] = v21;
    v15 = (unint64_t)v40;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
    swift_willThrow();
    return v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v37 = 0x207865646E49;
  *((_QWORD *)&v37 + 1) = 0xE600000000000000;
  v40[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v38 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v39 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v37 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v37);
  v15 = (unint64_t)v5;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v37, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, 0x3233746E49, (void *)0xE500000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
  v15 = (unint64_t)v16;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  if ((v15 & 0x100000000) != 0)
  {
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v30 = MEMORY[0x1E0DEDBC8];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_187BF9830;
    v41 = v2[3];
    v32 = v41;
    swift_bridgeObjectRetain();
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v31 + 64) = v12;
    v34 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = v34;
    *(_QWORD *)(v34 + 16) = 0x207865646E49;
    *(_QWORD *)(v34 + 24) = 0xE600000000000000;
    *(_QWORD *)(v34 + 32) = v32;
    *(_BYTE *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    v15 = (unint64_t)v36;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v35 - 8) + 104))(v30, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v26 = v2[3];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  void *v40;
  unint64_t v41;
  _QWORD v42[3];
  uint64_t v43;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v20 = MEMORY[0x1E0DEDC60];
    v21 = *v0;
    swift_beginAccess();
    v22 = *(_QWORD *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v26 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(v26 + 16) = 0x207865646E49;
    *(_QWORD *)(v26 + 24) = 0xE600000000000000;
    *(_QWORD *)(v26 + 32) = v24;
    *(_BYTE *)(v26 + 40) = 0;
    v42[0] = v22;
    v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC460], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v39 = 0x207865646E49;
  *((_QWORD *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v40 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v41 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v39 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  v15 = (SEL *)v5;
  v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, 0x3436746E49, (void *)0xE500000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  v15 = v16;
  v27 = v17;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if ((v27 & 1) != 0)
  {
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = MEMORY[0x1E0DEDC60];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
    v43 = v2[3];
    v34 = v43;
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v33 + 64) = v12;
    v36 = swift_allocObject();
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v36 + 16) = 0x207865646E49;
    *(_QWORD *)(v36 + 24) = 0xE600000000000000;
    *(_QWORD *)(v36 + 32) = v34;
    *(_BYTE *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v37 - 8) + 104))(v32, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v28 = v2[3];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  void *v40;
  unint64_t v41;
  _QWORD v42[3];
  uint64_t v43;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v20 = MEMORY[0x1E0DEBB98];
    v21 = *v0;
    swift_beginAccess();
    v22 = *(_QWORD *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v26 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(v26 + 16) = 0x207865646E49;
    *(_QWORD *)(v26 + 24) = 0xE600000000000000;
    *(_QWORD *)(v26 + 32) = v24;
    *(_BYTE *)(v26 + 40) = 0;
    v42[0] = v22;
    v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC460], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v39 = 0x207865646E49;
  *((_QWORD *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v40 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v41 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v39 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  v15 = (SEL *)v5;
  v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, 1953384789, (void *)0xE400000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  v15 = v16;
  v27 = v17;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if ((v27 & 1) != 0)
  {
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = MEMORY[0x1E0DEBB98];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
    v43 = v2[3];
    v34 = v43;
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v33 + 64) = v12;
    v36 = swift_allocObject();
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v36 + 16) = 0x207865646E49;
    *(_QWORD *)(v36 + 24) = 0xE600000000000000;
    *(_QWORD *)(v36 + 32) = v34;
    *(_BYTE *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v37 - 8) + 104))(v32, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v28 = v2[3];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  void *v38;
  unint64_t v39;
  _QWORD v40[3];
  uint64_t v41;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v17 = type metadata accessor for DecodingError();
    swift_allocError();
    v19 = v18;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v19 = MEMORY[0x1E0DEE0F8];
    v20 = *v0;
    swift_beginAccess();
    v21 = *(_QWORD *)(v20 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v23 = v2[3];
    v40[1] = 0xE600000000000000;
    v36[0] = v23;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v25 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v25;
    *(_QWORD *)(v25 + 16) = 0x207865646E49;
    *(_QWORD *)(v25 + 24) = 0xE600000000000000;
    *(_QWORD *)(v25 + 32) = v23;
    *(_BYTE *)(v25 + 40) = 0;
    v40[0] = v21;
    v15 = (unint64_t)v40;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
    swift_willThrow();
    return v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v37 = 0x207865646E49;
  *((_QWORD *)&v37 + 1) = 0xE600000000000000;
  v40[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v38 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v39 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v37 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v37);
  v15 = (unint64_t)v5;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v37, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, 0x3233746E4955, (void *)0xE600000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
  v15 = (unint64_t)v16;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  if ((v15 & 0x100000000) != 0)
  {
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v30 = MEMORY[0x1E0DEE0F8];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_187BF9830;
    v41 = v2[3];
    v32 = v41;
    swift_bridgeObjectRetain();
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v31 + 64) = v12;
    v34 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = v34;
    *(_QWORD *)(v34 + 16) = 0x207865646E49;
    *(_QWORD *)(v34 + 24) = 0xE600000000000000;
    *(_QWORD *)(v34 + 32) = v32;
    *(_BYTE *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    v15 = (unint64_t)v36;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v35 - 8) + 104))(v30, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v26 = v2[3];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  SEL *v15;
  SEL *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  void *v40;
  unint64_t v41;
  _QWORD v42[3];
  uint64_t v43;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v20 = MEMORY[0x1E0DEE190];
    v21 = *v0;
    swift_beginAccess();
    v22 = *(_QWORD *)(v21 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v24 = v2[3];
    v42[1] = 0xE600000000000000;
    v38[0] = v24;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v26 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(v26 + 16) = 0x207865646E49;
    *(_QWORD *)(v26 + 24) = 0xE600000000000000;
    *(_QWORD *)(v26 + 32) = v24;
    *(_BYTE *)(v26 + 40) = 0;
    v42[0] = v22;
    v15 = (SEL *)v42;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC460], v18);
    swift_willThrow();
    return (uint64_t)v15;
  }
  v5 = (_QWORD *)*v0;
  *(_QWORD *)&v39 = 0x207865646E49;
  *((_QWORD *)&v39 + 1) = 0xE600000000000000;
  v42[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = v5 + 17;
  swift_beginAccess();
  v8 = (_QWORD *)v5[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5[17] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v40 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v41 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v39 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v39);
  v15 = (SEL *)v5;
  v16 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v39, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, 0x3436746E4955, (void *)0xE600000000000000);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
  v15 = v16;
  v27 = v17;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if ((v27 & 1) != 0)
  {
    v37 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = MEMORY[0x1E0DEE190];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
    v43 = v2[3];
    v34 = v43;
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v33 + 64) = v12;
    v36 = swift_allocObject();
    *(_QWORD *)(v33 + 32) = v36;
    *(_QWORD *)(v36 + 16) = 0x207865646E49;
    *(_QWORD *)(v36 + 24) = 0xE600000000000000;
    *(_QWORD *)(v36 + 32) = v34;
    *(_BYTE *)(v36 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v33);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    v15 = (SEL *)v38;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v37 - 8) + 104))(v32, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v28 = v2[3];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    v2[3] = v30;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    return (uint64_t)v15;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v18 = MEMORY[0x1E0DEB188];
    v19 = *v0;
    swift_beginAccess();
    v20 = *(_QWORD *)(v19 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v22 = v2[3];
    v40 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v24 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v24;
    *(_QWORD *)(v24 + 16) = 0x207865646E49;
    *(_QWORD *)(v24 + 24) = 0xE600000000000000;
    *(_QWORD *)(v24 + 32) = v22;
    *(_BYTE *)(v24 + 40) = 0;
    v39 = v20;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
    return swift_willThrow();
  }
  v5 = *v0;
  *(_QWORD *)&v36 = 0x207865646E49;
  *((_QWORD *)&v36 + 1) = 0xE600000000000000;
  v39 = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(v5 + 136);
  swift_beginAccess();
  v8 = *(_QWORD **)(v5 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v37 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v38 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v36 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v36);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v36);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  v25 = v15;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  if ((v25 & 0x100000000) != 0)
  {
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v30 = MEMORY[0x1E0DEB188];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_187BF9830;
    v32 = v2[3];
    swift_bridgeObjectRetain();
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v31 + 64) = v12;
    v34 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = v34;
    *(_QWORD *)(v34 + 16) = 0x207865646E49;
    *(_QWORD *)(v34 + 24) = 0xE600000000000000;
    *(_QWORD *)(v34 + 32) = v32;
    *(_BYTE *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v35 - 8) + 104))(v30, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  v26 = v2[3];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v2 = v0;
  v3 = v0[1];
  v4 = v0[3];
  if (v4 >= *(_QWORD *)(v3 + 16))
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v18 = MEMORY[0x1E0DEB070];
    v19 = *v0;
    swift_beginAccess();
    v20 = *(_QWORD *)(v19 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v22 = v2[3];
    v40 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v24 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v24;
    *(_QWORD *)(v24 + 16) = 0x207865646E49;
    *(_QWORD *)(v24 + 24) = 0xE600000000000000;
    *(_QWORD *)(v24 + 32) = v22;
    *(_BYTE *)(v24 + 40) = 0;
    v39 = v20;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC460], v16);
    return swift_willThrow();
  }
  v5 = *v0;
  *(_QWORD *)&v36 = 0x207865646E49;
  *((_QWORD *)&v36 + 1) = 0xE600000000000000;
  v39 = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(v5 + 136);
  swift_beginAccess();
  v8 = *(_QWORD **)(v5 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v37 = &unk_1E1B0CCC8;
  v12 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v38 = v12;
  v13 = swift_allocObject();
  *(_QWORD *)&v36 = v13;
  *(_QWORD *)(v13 + 16) = 0x207865646E49;
  *(_QWORD *)(v13 + 24) = 0xE600000000000000;
  *(_QWORD *)(v13 + 32) = v4;
  *(_BYTE *)(v13 + 40) = 0;
  v8[2] = v11 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v8[5 * v11 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((unint64_t)v4 >= *(_QWORD *)(v3 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v36);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v36);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  v25 = v15;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  if ((v25 & 1) != 0)
  {
    v35 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v30 = MEMORY[0x1E0DEB070];
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_187BF9830;
    v32 = v2[3];
    swift_bridgeObjectRetain();
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v31 + 64) = v12;
    v34 = swift_allocObject();
    *(_QWORD *)(v31 + 32) = v34;
    *(_QWORD *)(v34 + 16) = 0x207865646E49;
    *(_QWORD *)(v34 + 24) = 0xE600000000000000;
    *(_QWORD *)(v34 + 32) = v32;
    *(_BYTE *)(v34 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v31);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v35 - 8) + 104))(v30, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  v26 = v2[3];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    v2[3] = v28;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized static DictionaryEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  char v15;
  void (*v16)(char *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v40 = type metadata accessor for CharacterSet();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x2000000000000000) != 0)
    v9 = HIBYTE(a2) & 0xF;
  else
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  v10 = String.index(after:)();
  v11 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v11 = 11;
  v39 = 4 * v9;
  if (4 * v9 < v10 >> 14)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    v42 = a1;
    v2 = (char *)MEMORY[0x1E0DEE9D8];
    v3 = 15;
    v41 = v11 | (v9 << 16);
    while (1)
    {
      v43 = v42;
      v44 = a2;
      static CharacterSet.uppercaseLetters.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v13 = StringProtocol.rangeOfCharacter(from:options:range:)();
      v15 = v14;
      v16 = *(void (**)(char *, uint64_t))(v38 + 8);
      v16(v8, v40);
      if ((v15 & 1) != 0)
      {
        v17 = v3 >> 14;
        goto LABEL_26;
      }
      v17 = v13 >> 14;
      if (v13 >> 14 < v3 >> 14)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
      v19 = *((_QWORD *)v2 + 2);
      v18 = *((_QWORD *)v2 + 3);
      if (v19 >= v18 >> 1)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v2);
      *((_QWORD *)v2 + 2) = v19 + 1;
      v20 = &v2[16 * v19];
      *((_QWORD *)v20 + 4) = v3;
      *((_QWORD *)v20 + 5) = v13;
      if (v39 < v17)
        goto LABEL_33;
      v3 = v42;
      v43 = v42;
      v44 = a2;
      static CharacterSet.lowercaseLetters.getter();
      v21 = StringProtocol.rangeOfCharacter(from:options:range:)();
      v23 = v22;
      v25 = v24;
      v16(v8, v40);
      if ((v25 & 1) != 0)
        break;
      if ((String.index(after:)() ^ (unint64_t)v21) >= 0x4000)
      {
        v26 = String.index(before:)();
        if (v17 > v26 >> 14)
          goto LABEL_35;
        v27 = v26;
        v29 = *((_QWORD *)v2 + 2);
        v28 = *((_QWORD *)v2 + 3);
        if (v29 >= v28 >> 1)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v2);
        *((_QWORD *)v2 + 2) = v29 + 1;
        v12 = &v2[16 * v29];
        *((_QWORD *)v12 + 4) = v13;
        *((_QWORD *)v12 + 5) = v27;
        v13 = v27;
      }
      v3 = v13;
      if (v39 < v23 >> 14)
        goto LABEL_34;
    }
    v3 = v13;
LABEL_26:
    if (v39 < v17)
      goto LABEL_37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_28;
  }
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
LABEL_28:
  v31 = *((_QWORD *)v2 + 2);
  v30 = *((_QWORD *)v2 + 3);
  if (v31 >= v30 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v31 + 1;
  v32 = &v2[16 * v31];
  v33 = v41;
  *((_QWORD *)v32 + 4) = v3;
  *((_QWORD *)v32 + 5) = v33;
  swift_bridgeObjectRetain();
  v34 = swift_bridgeObjectRetain();
  v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50124_s7SwiftUI17DictionaryEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_2462DFFC835A6F4511AFEB231EB4B8C2LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(v34);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v43 = v35;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  a1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6, void *a7, uint64_t a8)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  unint64_t v46;

  *(_QWORD *)(a8 + 144) = a1;
  __swift_project_boxed_opaque_existential_1(a6, a6[3]);
  swift_retain();
  swift_retain();
  v11 = a7;
  v12 = dispatch thunk of CodingKey.stringValue.getter();
  v40 = v11;
  *(_QWORD *)(a8 + 152) = v11;
  *(_QWORD *)(a8 + 160) = v12;
  *(_QWORD *)(a8 + 168) = v13;
  *(_BYTE *)(a8 + 176) = 1;
  swift_release();
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 48);
  v34 = v14;
  v16 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v35 = v20;
  v36 = *(void **)(a1 + 24);
  v42 = *(_QWORD *)(a1 + 120);
  v43 = *(_QWORD *)(a1 + 128);
  v21 = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a8 + 32) = v14;
  *(_BYTE *)(a8 + 40) = v21;
  *(_QWORD *)(a8 + 48) = v15;
  *(_QWORD *)(a8 + 56) = v31;
  *(_QWORD *)(a8 + 64) = v16;
  *(_QWORD *)(a8 + 72) = v33;
  *(_QWORD *)(a8 + 80) = v17;
  *(_QWORD *)(a8 + 88) = v18;
  *(_QWORD *)(a8 + 96) = v19;
  *(_QWORD *)(a8 + 104) = v32;
  *(_QWORD *)(a8 + 112) = v20;
  *(_QWORD *)(a8 + 120) = v42;
  v23 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a8 + 128) = v43;
  *(_QWORD *)(a8 + 16) = v23;
  *(_QWORD *)(a8 + 24) = v36;
  *(_QWORD *)(a8 + 136) = v22;
  v24 = (_QWORD *)(a8 + 136);
  swift_beginAccess();
  v25 = *(_QWORD **)(a8 + 136);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v36, v34, v21);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v15);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v16, v33);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a8 + 136) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *v24 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
    *v24 = v25;
  }
  v45 = &unk_1E1B0CCC8;
  v46 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v29 = swift_allocObject();
  *(_QWORD *)&v44 = v29;
  *(_QWORD *)(v29 + 16) = a2;
  *(_QWORD *)(v29 + 24) = a3;
  *(_QWORD *)(v29 + 32) = a4;
  *(_BYTE *)(v29 + 40) = a5 & 1;
  v25[2] = v28 + 1;
  outlined init with take of OptionalBinaryInteger(&v44, (uint64_t)&v25[5 * v28 + 4]);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

  return a8;
}

uint64_t specialized __DictionaryReferencingEncoder.__allocating_init(referencing:key:convertedKey:wrapping:)(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __DictionaryReferencingEncoder();
  v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a6);
  return specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(a1, (uint64_t)v15, a3, a4, v16, a6, a7);
}

uint64_t outlined init with take of (key: Any, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, &lazy cache variable for type metadata for (key: Any, value: Any)?, (uint64_t)&lazy cache variable for type metadata for (key: Any, value: Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (key: Any, value: Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = a4(255, a3, MEMORY[0x1E0DEE9B8] + 8);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  _BYTE v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any(a1, (uint64_t)v22);
    v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_10:
      v4 = type metadata accessor for DecodingError();
      swift_allocError();
      v6 = v5;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *v6 = v2;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0DEC450], v4);
      swift_willThrow();
      return;
    }
    if (*MEMORY[0x1E0C9AE50])
      v3 = v21 == (id)*MEMORY[0x1E0C9AE50];
    else
      v3 = 0;
    if (v3 || *MEMORY[0x1E0C9AE40] && v21 == (id)*MEMORY[0x1E0C9AE40])
    {

      goto LABEL_10;
    }
    v7 = objc_msgSend(v21, sel_charValue);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithChar_, v7);
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      v10 = type metadata accessor for DecodingError();
      swift_allocError();
      v12 = v11;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v21, sel_description);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

      v17._countAndFlagsBits = v14;
      v17._object = v16;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._object = (void *)0x8000000187BDCD00;
      v18._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v18);
      v19._countAndFlagsBits = 947154505;
      v19._object = (void *)0xE400000000000000;
      String.append(_:)(v19);
      v20._countAndFlagsBits = 46;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC458], v10);
      swift_willThrow();
    }
  }

}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  _BYTE v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
    goto LABEL_2;
  outlined init with copy of Any(a1, (uint64_t)v22);
  v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;
  if (*MEMORY[0x1E0C9AE50])
    v3 = v21 == (id)*MEMORY[0x1E0C9AE50];
  else
    v3 = 0;
  if (v3 || *MEMORY[0x1E0C9AE40] && v21 == (id)*MEMORY[0x1E0C9AE40])
  {

LABEL_11:
    v4 = type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v6 = v2;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0DEC450], v4);
    swift_willThrow();
    return;
  }
  v7 = objc_msgSend(v21, sel_shortValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithShort_, v7);
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) != 0)
  {
LABEL_2:

    return;
  }
  v10 = type metadata accessor for DecodingError();
  swift_allocError();
  v12 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v21, sel_description);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000187BDCD00;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x3631746E49;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC458], v10);
  swift_willThrow();

}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  _BYTE v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
    goto LABEL_2;
  outlined init with copy of Any(a1, (uint64_t)v22);
  v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;
  if (*MEMORY[0x1E0C9AE50])
    v3 = v21 == (id)*MEMORY[0x1E0C9AE50];
  else
    v3 = 0;
  if (v3 || *MEMORY[0x1E0C9AE40] && v21 == (id)*MEMORY[0x1E0C9AE40])
  {

LABEL_11:
    v4 = type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v6 = v2;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0DEC450], v4);
    swift_willThrow();
    return;
  }
  v7 = objc_msgSend(v21, sel_unsignedCharValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedChar_, v7);
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) != 0)
  {
LABEL_2:

    return;
  }
  v10 = type metadata accessor for DecodingError();
  swift_allocError();
  v12 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v21, sel_description);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000187BDCD00;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x38746E4955;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC458], v10);
  swift_willThrow();

}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  _BYTE v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
    goto LABEL_2;
  outlined init with copy of Any(a1, (uint64_t)v22);
  v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;
  if (*MEMORY[0x1E0C9AE50])
    v3 = v21 == (id)*MEMORY[0x1E0C9AE50];
  else
    v3 = 0;
  if (v3 || *MEMORY[0x1E0C9AE40] && v21 == (id)*MEMORY[0x1E0C9AE40])
  {

LABEL_11:
    v4 = type metadata accessor for DecodingError();
    swift_allocError();
    v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v6 = v2;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0DEC450], v4);
    swift_willThrow();
    return;
  }
  v7 = objc_msgSend(v21, sel_unsignedShortValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedShort_, v7);
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) != 0)
  {
LABEL_2:

    return;
  }
  v10 = type metadata accessor for DecodingError();
  swift_allocError();
  v12 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v21, sel_description);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000187BDCD00;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x3631746E4955;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v12, *MEMORY[0x1E0DEC458], v10);
  swift_willThrow();

}

{
  _QWORD *v1;
  int v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _BYTE v30[32];

  outlined init with copy of Any(a1, (uint64_t)v30);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  v3 = swift_dynamicCast();
  v4 = v3;
  if (v3)
    goto LABEL_2;
  outlined init with copy of Any(a1, (uint64_t)v30);
  v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_12;
  if (*MEMORY[0x1E0C9AE50])
    v6 = v28 == (id)*MEMORY[0x1E0C9AE50];
  else
    v6 = 0;
  if (v6 || *MEMORY[0x1E0C9AE40] && v28 == (id)*MEMORY[0x1E0C9AE40])
  {

LABEL_12:
    outlined init with copy of Any(a1, (uint64_t)v30);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = v1[9];
      if (v7)
      {
        v9 = (id)v1[10];
        v8 = v1[11];
        v10 = (id)v1[12];
        if (v28 == (id)v1[8] && v7 == v29
          || (v27 = v1[13], (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          || v28 == v9 && v8 == v29
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v28 == v10 && v27 == v29)
        {
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v26 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v11 = type metadata accessor for DecodingError();
    swift_allocError();
    v13 = v12;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v13 = v5;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v13, *MEMORY[0x1E0DEC450], v11);
    swift_willThrow();
    return;
  }
  objc_msgSend(v28, sel_doubleValue);
  if (fabs(v14) <= 3.40282347e38)
  {
LABEL_2:

LABEL_3:
    v30[0] = v4;
    return;
  }
  v15 = type metadata accessor for DecodingError();
  swift_allocError();
  v17 = v16;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v28, sel_description);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x8000000187BDCF20;
  v23._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x74616F6C46;
  v24._object = (void *)0xE500000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 46;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC458], v15);
  swift_willThrow();

}

SEL *specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1, SEL *a2, SEL *a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  id v29;
  _BYTE v30[32];
  uint64_t v31;

  outlined init with copy of Any(a1, (uint64_t)v30);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  outlined init with copy of Any(a1, (uint64_t)v30);
  v10 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v13 = type metadata accessor for DecodingError();
    swift_allocError();
    v15 = v14;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v15 = v10;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, *MEMORY[0x1E0DEC450], v13);
    swift_willThrow();
    return a2;
  }
  v11 = v29;
  if (*MEMORY[0x1E0C9AE50])
    v12 = v29 == (id)*MEMORY[0x1E0C9AE50];
  else
    v12 = 0;
  if (v12 || *MEMORY[0x1E0C9AE40] && v29 == (id)*MEMORY[0x1E0C9AE40])
  {

    goto LABEL_11;
  }
  a2 = (SEL *)objc_msgSend(v29, *a2);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), *a3, a2);
  v18 = static NSObject.== infix(_:_:)();

  if ((v18 & 1) == 0)
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v31 = v20;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v29, sel_description, 0xD000000000000014, 0x8000000187BDCCE0);
    a2 = (SEL *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    v24._countAndFlagsBits = (uint64_t)a2;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x8000000187BDCD00;
    v25._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v25);
    v26._countAndFlagsBits = a4;
    v26._object = a5;
    String.append(_:)(v26);
    v27._countAndFlagsBits = 46;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28 = v31;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v28, *MEMORY[0x1E0DEC458], v19);
    swift_willThrow();
  }

  return a2;
}

void specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1, SEL *a2, SEL *a3, uint64_t a4, void *a5)
{
  int v10;
  char v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  id v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  id v32;
  _BYTE v33[32];
  uint64_t v34;

  outlined init with copy of Any(a1, (uint64_t)v33);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  v10 = swift_dynamicCast();
  v11 = v10;
  if (v10)
    goto LABEL_2;
  outlined init with copy of Any(a1, (uint64_t)v33);
  v12 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;
  v13 = v32;
  if (*MEMORY[0x1E0C9AE50])
    v14 = v32 == (id)*MEMORY[0x1E0C9AE50];
  else
    v14 = 0;
  if (v14 || *MEMORY[0x1E0C9AE40] && v32 == (id)*MEMORY[0x1E0C9AE40])
  {

LABEL_11:
    v15 = type metadata accessor for DecodingError();
    swift_allocError();
    v17 = v16;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v17 = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC450], v15);
    swift_willThrow();
    return;
  }
  v18 = objc_msgSend(v32, *a2);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), *a3, v18);
  v20 = static NSObject.== infix(_:_:)();

  if ((v20 & 1) != 0)
  {
LABEL_2:

    v33[0] = v11;
    return;
  }
  v21 = type metadata accessor for DecodingError();
  swift_allocError();
  v34 = v22;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v32, sel_description, 0xD000000000000014, 0x8000000187BDCCE0);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v25;

  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000187BDCD00;
  v28._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v28);
  v29._countAndFlagsBits = a4;
  v29._object = a5;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31 = v34;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v31, *MEMORY[0x1E0DEC458], v21);
  swift_willThrow();

}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONUnkeyedDecodingContainer, &unk_1E1AFBA30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer);
  }
  return result;
}

uint64_t sub_18734333C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for _DictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DictionaryKeyedDecodingContainer);
}

uint64_t partial apply for closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(a1, a2, a3, a4, *(void (**)(_QWORD *__return_ptr, uint64_t))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

unint64_t outlined copy of DictionaryDecoder.KeyDecodingStrategy(unint64_t result)
{
  if (result >= 2)
    return swift_retain();
  return result;
}

unint64_t outlined consume of DictionaryDecoder.KeyDecodingStrategy(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

void type metadata accessor for (key: Any, value: Any)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t sub_187343454()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_187343478()
{
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<CodingKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CodingKey>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for CodingKey);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  }
}

uint64_t outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _JSONUnkeyedEncodingContainer, &unk_1E1AFBAB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t type metadata accessor for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _JSONKeyedEncodingContainer);
}

void type metadata accessor for (String, Any)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for _JSONKeyedEncodingContainer(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for _JSONKeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _JSONKeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for _JSONUnkeyedEncodingContainer()
{
  return &unk_1E1AFBAB8;
}

_QWORD *initializeBufferWithCopyOfBuffer for _DictionaryKeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _DictionaryKeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _DictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for _DictionaryKeyedDecodingContainer()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for _JSONUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _JSONUnkeyedDecodingContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void *type metadata accessor for _JSONUnkeyedDecodingContainer()
{
  return &unk_1E1AFBA30;
}

uint64_t initializeWithCopy for _JSONKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _JSONKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for _JSONKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

void *type metadata accessor for _JSONKey()
{
  return &unk_1E1B0CCC8;
}

uint64_t outlined retain of DictionaryDecoder._Options(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 88);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v2);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v3, v4);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized _JSONUnkeyedDecodingContainer.decode(_:)(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::String v9;
  _QWORD *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  void *v43;
  unint64_t v44;
  _QWORD v45[3];
  uint64_t v46;

  v5 = v2;
  v6 = v2[1];
  v7 = v2[3];
  if (v7 >= *(_QWORD *)(v6 + 16))
  {
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v22 = a2;
    v23 = *v2;
    swift_beginAccess();
    v24 = *(_QWORD *)(v23 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v26 = v5[3];
    v45[1] = 0xE600000000000000;
    v41[0] = v26;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v28 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v28;
    *(_QWORD *)(v28 + 16) = 0x207865646E49;
    *(_QWORD *)(v28 + 24) = 0xE600000000000000;
    *(_QWORD *)(v28 + 32) = v26;
    *(_BYTE *)(v28 + 40) = 0;
    v45[0] = v24;
    v18 = v45;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC460], v20);
    swift_willThrow();
    return (uint64_t)v18;
  }
  v8 = (_QWORD *)*v2;
  *(_QWORD *)&v42 = 0x207865646E49;
  *((_QWORD *)&v42 + 1) = 0xE600000000000000;
  v45[0] = v7;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10 = v8 + 17;
  swift_beginAccess();
  v11 = (_QWORD *)v8[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[17] = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *v10 = v11;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    *v10 = v11;
  }
  v43 = &unk_1E1B0CCC8;
  v15 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v44 = v15;
  v16 = swift_allocObject();
  *(_QWORD *)&v42 = v16;
  *(_QWORD *)(v16 + 16) = 0x207865646E49;
  *(_QWORD *)(v16 + 24) = 0xE600000000000000;
  *(_QWORD *)(v16 + 32) = v7;
  *(_BYTE *)(v16 + 40) = 0;
  v11[2] = v14 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v42, (uint64_t)&v11[5 * v14 + 4]);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v7 >= *(_QWORD *)(v6 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v42);
  v18 = v8;
  v19 = a1(&v42);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
  v18 = (_QWORD *)v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  if (((unsigned __int16)v18 & 0x100) != 0)
  {
    v40 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v33 = a2;
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_187BF9830;
    v46 = v5[3];
    v35 = v46;
    swift_bridgeObjectRetain();
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v34 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v34 + 64) = v15;
    v37 = swift_allocObject();
    *(_QWORD *)(v34 + 32) = v37;
    *(_QWORD *)(v37 + 16) = 0x207865646E49;
    *(_QWORD *)(v37 + 24) = 0xE600000000000000;
    *(_QWORD *)(v37 + 32) = v35;
    *(_BYTE *)(v37 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v34);
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    v18 = v41;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v40 - 8) + 104))(v33, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v29 = v5[3];
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    v5[3] = v31;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::String v9;
  _QWORD *v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  void *v43;
  unint64_t v44;
  _QWORD v45[3];
  uint64_t v46;

  v5 = v2;
  v6 = v2[1];
  v7 = v2[3];
  if (v7 >= *(_QWORD *)(v6 + 16))
  {
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v22 = a2;
    v23 = *v2;
    swift_beginAccess();
    v24 = *(_QWORD *)(v23 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v26 = v5[3];
    v45[1] = 0xE600000000000000;
    v41[0] = v26;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    v28 = swift_allocObject();
    *(_QWORD *)(inited + 32) = v28;
    *(_QWORD *)(v28 + 16) = 0x207865646E49;
    *(_QWORD *)(v28 + 24) = 0xE600000000000000;
    *(_QWORD *)(v28 + 32) = v26;
    *(_BYTE *)(v28 + 40) = 0;
    v45[0] = v24;
    v18 = v45;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC460], v20);
    swift_willThrow();
    return (uint64_t)v18;
  }
  v8 = (_QWORD *)*v2;
  *(_QWORD *)&v42 = 0x207865646E49;
  *((_QWORD *)&v42 + 1) = 0xE600000000000000;
  v45[0] = v7;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10 = v8 + 17;
  swift_beginAccess();
  v11 = (_QWORD *)v8[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[17] = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *v10 = v11;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
    *v10 = v11;
  }
  v43 = &unk_1E1B0CCC8;
  v15 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  v44 = v15;
  v16 = swift_allocObject();
  *(_QWORD *)&v42 = v16;
  *(_QWORD *)(v16 + 16) = 0x207865646E49;
  *(_QWORD *)(v16 + 24) = 0xE600000000000000;
  *(_QWORD *)(v16 + 32) = v7;
  *(_BYTE *)(v16 + 40) = 0;
  v11[2] = v14 + 1;
  result = outlined init with take of OptionalBinaryInteger(&v42, (uint64_t)&v11[5 * v14 + 4]);
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v7 >= *(_QWORD *)(v6 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v42);
  v18 = v8;
  v19 = a1(&v42);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
LABEL_15:
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
  v18 = (_QWORD *)v19;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  if ((v18 & 0x10000) != 0)
  {
    v40 = type metadata accessor for DecodingError();
    swift_allocError();
    v33 = v32;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v33 = a2;
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_187BF9830;
    v46 = v5[3];
    v35 = v46;
    swift_bridgeObjectRetain();
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v34 + 56) = &unk_1E1B0CCC8;
    *(_QWORD *)(v34 + 64) = v15;
    v37 = swift_allocObject();
    *(_QWORD *)(v34 + 32) = v37;
    *(_QWORD *)(v37 + 16) = 0x207865646E49;
    *(_QWORD *)(v37 + 24) = 0xE600000000000000;
    *(_QWORD *)(v37 + 32) = v35;
    *(_BYTE *)(v37 + 40) = 0;
    specialized Array.append<A>(contentsOf:)(v34);
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    v18 = v41;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v40 - 8) + 104))(v33, *MEMORY[0x1E0DEC460]);
    swift_willThrow();
    goto LABEL_15;
  }
  v29 = v5[3];
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    v5[3] = v31;
    $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v5);
    return (uint64_t)v18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void type metadata accessor for (CodingKey, DecodingError.Context)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CodingKey, DecodingError.Context))
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for CodingKey);
    type metadata accessor for DecodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CodingKey, DecodingError.Context));
  }
}

uint64_t partial apply for closure #1 in _DictionaryKeyedDecodingContainer.allKeys.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain();
  return MEMORY[0x18D75EF98](v4, v5, v2, v3);
}

uint64_t destroy for AccessibilityAdaptiveStack(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for AccessibilityAdaptiveStack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 56);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(v2 + 64);
  LOBYTE(v2) = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v7, v2);
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v2;
  return a1;
}

uint64_t assignWithCopy for AccessibilityAdaptiveStack(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = v2[2];
  *(_QWORD *)(a1 + 24) = v2[3];
  v5 = v2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 41) = *((_BYTE *)v2 + 41);
  v6 = v2[6];
  v7 = *((_BYTE *)v2 + 56);
  outlined copy of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = v2[8];
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  outlined copy of Environment<Bool>.Content(v10, (char)v2);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessibilityAdaptiveStack(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 72);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityAdaptiveStack(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityAdaptiveStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityAdaptiveStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityAdaptiveStack);
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityAdaptiveStack<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AccessibilityAdaptiveStack.shouldUseVerticalLayout.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v7;
  unsigned __int8 v8;

  v1 = *(unsigned __int8 *)(v0 + 41);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_BYTE *)(v0 + 72);
  outlined copy of Environment<Bool>.Content(v2, v3);
  specialized Environment.wrappedValue.getter(v2, v3, &v8);
  outlined consume of Environment<Bool>.Content(v2, v3);
  if (v8 - 7 < 5)
  {
    outlined copy of Environment<Bool>.Content(v4, v5);
    specialized Environment.wrappedValue.getter(v4, v5, &v7);
    outlined consume of Environment<Bool>.Content(v4, v5);
    if (v7 != 2 && (v7 & 1) == 0)
      return 1;
  }
  if (v1 == 2)
    return 0;
  return v1 & 1;
}

uint64_t AccessibilityAdaptiveStack.axis.getter()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 41);
  if (v1 == 2)
    v2 = AccessibilityAdaptiveStack.shouldUseVerticalLayout.getter();
  else
    v2 = v1 & 1;
  return v2 & 1;
}

uint64_t AccessibilityAdaptiveStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for AdaptiveStack(0, v5, v6, a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v23[-v14];
  v16 = v3[1];
  v17 = v3[3];
  v33 = v3[2];
  v34[0] = v17;
  *(_OWORD *)((char *)v34 + 9) = *(__int128 *)((char *)v3 + 57);
  v18 = v3[1];
  v31 = *v3;
  v32 = v18;
  v19 = v3[3];
  v29 = v33;
  v30[0] = v19;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)v3 + 57);
  v27 = v31;
  v28 = v16;
  v20 = AccessibilityAdaptiveStack.axis.getter();
  v24 = v5;
  v25 = v6;
  v26 = &v31;
  AdaptiveStack.init(axis:alignment:spacing:content:)(v20 & 1, v32, *((uint64_t *)&v32 + 1), v33, BYTE8(v33), (void (*)(uint64_t))partial apply for closure #1 in AccessibilityAdaptiveStack.body.getter);
  static ViewBuilder.buildExpression<A>(_:)(v11, v7, &protocol witness table for AdaptiveStack<A>);
  v21 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v21(v11, v7);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v7, a3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v21)(v15, v7);
}

uint64_t closure #1 in AccessibilityAdaptiveStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(_QWORD);
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  _OWORD v24[3];
  _OWORD v25[2];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v24 - v12;
  v15 = *(void (**)(_QWORD))v14;
  v16 = *(_OWORD *)(v14 + 16);
  v17 = *(_OWORD *)(v14 + 48);
  v24[2] = *(_OWORD *)(v14 + 32);
  v25[0] = v17;
  *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)(v14 + 57);
  v24[0] = *(_OWORD *)v14;
  v24[1] = v16;
  type metadata accessor for AccessibilityAdaptiveStack(0, v18, v19, v20);
  v21 = AccessibilityAdaptiveStack.shouldUseVerticalLayout.getter();
  v15(v21 & 1);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a3);
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v9, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, a2);
}

uint64_t partial apply for closure #1 in AccessibilityAdaptiveStack.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in AccessibilityAdaptiveStack.body.getter(v1[4], v1[2], v1[3], a1);
}

_UNKNOWN **sub_187347CA4()
{
  return &protocol witness table for AdaptiveStack<A>;
}

void WindowLayoutRoot.subscript.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayoutRoot.sizeThatFits(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayoutRootView.dimensions(in:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowLayoutRootView.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t outlined destroy of WindowLayoutRootView.Proxy(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
    swift_unknownObjectWeakDestroy();
  return a1;
}

ValueMetadata *type metadata accessor for WindowLayoutRoot()
{
  return &type metadata for WindowLayoutRoot;
}

uint64_t destroy for WindowLayoutRoot(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16) == 1)
    swift_unknownObjectWeakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for WindowLayoutRoot(uint64_t a1, uint64_t a2)
{
  char v4;

  if (*(_BYTE *)(a2 + 16) == 1)
  {
    swift_unknownObjectWeakCopyInit();
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v4 = 1;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v4 = *(_BYTE *)(a2 + 16);
  }
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for WindowLayoutRoot(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of WindowLayoutRootView.Proxy(a1);
    if (*((_BYTE *)a2 + 16) == 1)
    {
      swift_unknownObjectWeakCopyInit();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_BYTE *)(a1 + 16) = 1;
    }
    else
    {
      v4 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v4;
    }
  }
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for WindowLayoutRoot(uint64_t result, uint64_t a2)
{
  char v3;

  if (*(_BYTE *)(a2 + 16) == 1)
  {
    result = swift_unknownObjectWeakTakeInit();
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
    v3 = 1;
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    v3 = *(_BYTE *)(a2 + 16);
  }
  *(_BYTE *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t assignWithTake for WindowLayoutRoot(uint64_t a1, uint64_t a2)
{
  char v4;

  if (a1 != a2)
  {
    outlined destroy of WindowLayoutRootView.Proxy(a1);
    if (*(_BYTE *)(a2 + 16) == 1)
    {
      swift_unknownObjectWeakTakeInit();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v4 = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v4 = *(_BYTE *)(a2 + 16);
    }
    *(_BYTE *)(a1 + 16) = v4;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for WindowLayoutRootView()
{
  return &type metadata for WindowLayoutRootView;
}

uint64_t destroy for WindowLayoutRootView.Proxy(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return swift_unknownObjectWeakDestroy();
  return result;
}

uint64_t initializeWithCopy for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for WindowLayoutRootView.Proxy(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF30]);
}

uint64_t assignWithCopy for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_unknownObjectWeakDestroy();
    v5 = *((unsigned __int8 *)a2 + 16);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      swift_unknownObjectWeakCopyInit();
      *(_QWORD *)(a1 + 8) = a2[1];
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)a1 = v7;
    }
    *(_BYTE *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t initializeWithTake for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for WindowLayoutRootView.Proxy(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF58]);
}

uint64_t initializeWithCopy for WindowLayoutRootView.Proxy(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  unsigned int v5;
  char v6;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    result = a4(result, a2);
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  *(_BYTE *)(result + 16) = v6;
  return result;
}

uint64_t assignWithTake for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_unknownObjectWeakDestroy();
    v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      swift_unknownObjectWeakTakeInit();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v6 = 1;
    }
    else
    {
      v6 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowLayoutRootView.Proxy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WindowLayoutRootView.Proxy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for WindowLayoutRootView.Proxy(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 16);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for WindowLayoutRootView.Proxy(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WindowLayoutRootView.Proxy()
{
  return &type metadata for WindowLayoutRootView.Proxy;
}

ValueMetadata *type metadata accessor for WindowLayoutRootView.WeakHost()
{
  return &type metadata for WindowLayoutRootView.WeakHost;
}

void WindowLayoutRootView.subscript.getter()
{
  WindowLayoutRoot.subscript.getter();
}

void WindowLayoutRootView.sizeThatFits(_:)()
{
  WindowLayoutRoot.sizeThatFits(_:)();
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  char v10;
  uint64_t v11;
  id v13;

  if (a3 >> 62)
    goto LABEL_14;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v7 = 0;
  if (v6)
  {
    while (1)
    {
      v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v7, a3) : *(id *)(a3 + 8 * v7 + 32);
      v9 = v8;
      v13 = v8;
      v10 = a1(&v13);

      if (v3 || (v10 & 1) != 0)
        break;
      v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v7 = 0;
        if (!v6)
          return v7;
      }
      else
      {
        ++v7;
        if (v11 == v6)
          return 0;
      }
    }
  }
  return v7;
}

uint64_t Array<A>.synthesizedPlacement(of:in:avoiding:distance:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, double (*a3)(uint64_t, double, double, double, double, double, double, double, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t result;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  void (*v18)(_QWORD *, _QWORD);
  float64x2_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  float64x2_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[40];
  float64x2_t v42;
  char v43;

  Array<A>.motionVectors(closestTo:in:avoiding:distance:)(a1, a4, a3, a2, (uint64_t)v41, a6, a7, a8, a9);
  result = outlined init with take of CGRect?((uint64_t)v41, (uint64_t)&v42, &lazy cache variable for type metadata for (translation: CGSize, scale: CGSize)?, (void (*)(uint64_t))type metadata accessor for (translation: CGSize, scale: CGSize));
  if ((v43 & 1) != 0)
  {
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_BYTE *)(a5 + 64) = 1;
    return result;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    v28 = v42;
    v13 = a2 + 72 * a1;
    v14 = *(_BYTE *)(v13 + 48);
    v15 = *(_QWORD *)(v13 + 56);
    v16 = *(_BYTE *)(v13 + 64);
    v35 = *(_QWORD *)(v13 + 40);
    v36 = v14;
    v37 = v15;
    v38 = v16;
    v17 = *(_OWORD *)(v13 + 88);
    v39 = *(_OWORD *)(v13 + 72);
    v40 = v17;
    v18 = (void (*)(_QWORD *, _QWORD))_Placement.anchorPosition.modify();
    *v19 = vaddq_f64(v28, *v19);
    v18(v29, 0);
    v20 = *(_QWORD *)(v13 + 40);
    v21 = *(_BYTE *)(v13 + 48);
    v22 = *(_QWORD *)(v13 + 56);
    v23 = *(_BYTE *)(v13 + 64);
    v29[0] = *(_QWORD *)(v13 + 32);
    v29[1] = v20;
    v30 = v21;
    v31 = v22;
    v32 = v23;
    v33 = *(_OWORD *)(v13 + 72);
    v34 = *(_OWORD *)(v13 + 88);
    _IncrementalLayout_PlacedChild.size.getter();
    result = _Placement.proposedSize.setter();
    v24 = v36;
    v25 = v37;
    v26 = v38;
    *(_QWORD *)a5 = v35;
    *(_QWORD *)(a5 + 8) = v24;
    *(_QWORD *)(a5 + 16) = v25;
    *(_QWORD *)(a5 + 24) = v26;
    v27 = v40;
    *(_OWORD *)(a5 + 32) = v39;
    *(_OWORD *)(a5 + 48) = v27;
    *(_BYTE *)(a5 + 64) = 0;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t Array<A>.externalPlacement(of:avoiding:in:)@<X0>(unint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  CGPoint v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double y;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t (*v31)(uint64_t *, _QWORD);
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(a3 + 16) <= result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v6 = a3 + 72 * result;
  v7 = *(_BYTE *)(v6 + 48);
  v8 = *(_QWORD *)(v6 + 56);
  v9 = *(_BYTE *)(v6 + 64);
  v10 = *(_QWORD *)(v6 + 72);
  v11 = *(_QWORD *)(v6 + 80);
  v12 = *(_QWORD *)(v6 + 88);
  v13 = *(_QWORD *)(v6 + 96);
  v48 = *(_QWORD *)(v6 + 40);
  v49 = v7;
  v50 = v8;
  v51 = v9;
  *(_QWORD *)&v52 = v10;
  *((_QWORD *)&v52 + 1) = v11;
  *(_QWORD *)&v53 = v12;
  *((_QWORD *)&v53 + 1) = v13;
  CGRect.subscript.getter();
  v39 = v14;
  CGRect.subscript.getter();
  v37 = v16;
  v38 = v15;
  _Placement.proposedSize.getter();
  v19 = UnitPoint.in(_:)((CGSize)__PAIR128__(v18, v17));
  _Placement.anchorPosition.getter();
  v21 = v20;
  v23 = v22;
  v40 = v48;
  v41 = v7;
  v42 = v8;
  v43 = v9;
  v44 = v10;
  v45 = v11;
  v46 = v12;
  v47 = v13;
  _Placement.proposedSize.getter();
  if ((a2 & 1) != 0)
    y = v19.y;
  else
    y = v19.x;
  v27 = v39 + v37 - v38 + y;
  if ((a2 & 1) != 0)
    v28 = v23;
  else
    v28 = v21;
  if ((a2 & 1) != 0)
    v24 = v25;
  v29 = v28 + v24;
  if (v27 > v29)
    v30 = v27;
  else
    v30 = v29;
  v31 = (uint64_t (*)(uint64_t *, _QWORD))_Placement.anchorPosition.modify();
  *(double *)(v32 + 8 * (a2 & 1)) = v30;
  result = v31(&v40, 0);
  v33 = v49;
  v34 = v50;
  v35 = v51;
  *(_QWORD *)a4 = v48;
  *(_BYTE *)(a4 + 8) = v33;
  *(_QWORD *)(a4 + 16) = v34;
  *(_BYTE *)(a4 + 24) = v35;
  v36 = v53;
  *(_OWORD *)(a4 + 32) = v52;
  *(_OWORD *)(a4 + 48) = v36;
  return result;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t (*a1)(uint64_t *, uint64_t *)@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v4 = v3;
  v82 = 0;
  v83 = 0;
  v81 = a2;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v61);
  v7 = v61;
  v6 = v62;
  v8 = v66;
  v10 = v67;
  v9 = v68;
  v12 = v69;
  v11 = v70;
  if (v62)
  {
    v49 = a3;
    v50 = v61;
    v60 = v4;
    v13 = v67;
    v14 = v68;
    v15 = v69;
    v16 = v70;
    v71 = v61;
    v72 = v62;
    v73 = v63;
    v74 = v64 & 1;
    v75 = v65;
    v76 = v66 & 1;
    v77 = v67;
    v78 = v68;
    v79 = v69;
    v80 = v70;
    v84 = v81;
    v17 = *(_QWORD *)(v81 + 16);
    v18 = v65;
    v19 = v64;
    v20 = v63;
    result = swift_bridgeObjectRetain();
    v22 = v82;
    v52 = v17;
    if (v82 == v17)
    {
      LOBYTE(v23) = v19;
      v24 = v18;
      v25 = v20;
      v26 = v8;
      v27 = v10;
      v28 = v14;
      v29 = v15;
      v30 = v16;
      v31 = v6;
LABEL_4:
      result = swift_bridgeObjectRelease();
      *v49 = v50;
      v49[1] = v31;
      v49[2] = v25;
      v49[3] = v23 & 1;
      v49[4] = v24;
      v49[5] = v26 & 1;
      v49[6] = v27;
      v49[7] = v28;
      v49[8] = v29;
      v49[9] = v30;
    }
    else
    {
      v34 = v83;
      v35 = 72 * v82;
      v54 = v6;
      v36 = v82;
      v37 = v18;
      v38 = v19;
      v51 = v82;
      while ((v22 & 0x8000000000000000) == 0)
      {
        if (v36 >= *(_QWORD *)(v84 + 16))
          goto LABEL_17;
        if (__OFADD__(v34, 1))
          goto LABEL_18;
        v58 = v36;
        v40 = v38;
        v56 = v37;
        v59 = v35;
        v41 = *(_QWORD *)(v84 + v35 + 32);
        v42 = *(_QWORD *)(v84 + v35 + 40);
        v43 = *(unsigned __int8 *)(v84 + v35 + 48);
        v44 = *(_QWORD *)(v84 + v35 + 56);
        v45 = *(_BYTE *)(v84 + v35 + 64);
        v27 = *(_QWORD *)(v84 + v35 + 72);
        v28 = *(_QWORD *)(v84 + v35 + 80);
        v29 = *(_QWORD *)(v84 + v35 + 88);
        v30 = *(_QWORD *)(v84 + v35 + 96);
        v46 = v34;
        v61 = v34;
        v62 = v41;
        v25 = v42;
        v63 = v42;
        v23 = v43;
        LOBYTE(v64) = v43;
        v47 = v44;
        v65 = v44;
        v26 = v45;
        LOBYTE(v66) = v45;
        v67 = v27;
        v68 = v28;
        v69 = v29;
        v70 = v30;
        v31 = v41;
        swift_retain();
        v48 = a1(&v61, &v71);
        if (v60)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_release();
        }
        if ((v48 & 1) != 0)
        {
          result = swift_release();
          v39 = v46;
          v71 = v46;
          v72 = v31;
          v73 = v25;
          v74 = v23;
          v24 = v47;
          v75 = v47;
          v50 = v46;
          v76 = v26;
          v16 = v30;
          v15 = v29;
          v14 = v28;
          v13 = v27;
          v77 = v27;
          v78 = v28;
          v8 = v26;
          v37 = v47;
          v38 = v23;
          v20 = v25;
          v54 = v31;
          v79 = v29;
          v80 = v30;
        }
        else
        {
          result = swift_release();
          v31 = v54;
          v37 = v56;
          v25 = v20;
          v38 = v40;
          LOBYTE(v23) = v40;
          v24 = v56;
          v26 = v8;
          v27 = v13;
          v28 = v14;
          v29 = v15;
          v30 = v16;
          v39 = v46;
        }
        v36 = v58 + 1;
        v35 = v59 + 72;
        v34 = v39 + 1;
        v22 = v51;
        if (v52 == v58 + 1)
          goto LABEL_4;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  else
  {
    v55 = v65;
    v57 = v66;
    v32 = v64;
    v33 = v63;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *a3 = v7;
    a3[1] = 0;
    a3[2] = v33;
    a3[3] = v32;
    a3[4] = v55;
    a3[5] = v57;
    a3[6] = v10;
    a3[7] = v9;
    a3[8] = v12;
    a3[9] = v11;
  }
  return result;
}

Swift::Void __swiftcall IncrementalLayoutComputer.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t Value;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  int v41;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for IncrementalLayoutComputer.Engine(0, v3, *(_QWORD *)(v7 + 24), v8);
  v10 = *((_QWORD *)v9 - 1);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v25 - v12;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v28 = v10;
    v27 = *(_DWORD *)(v1 + 12);
    LOBYTE(v40) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    v26 = v41;
    v14 = v40;
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
    type metadata accessor for IncrementalLayoutViewCache();
    v16 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v13, v6, v3);
    v17 = &v13[v9[9]];
    *(_QWORD *)v17 = v14;
    v18 = v27;
    *((_DWORD *)v17 + 2) = v26;
    *((_DWORD *)v17 + 3) = v18;
    *(_QWORD *)&v13[v9[10]] = v16;
    v19 = &v13[v9[11]];
    v20 = v38;
    *((_OWORD *)v19 + 8) = v37;
    *((_OWORD *)v19 + 9) = v20;
    v19[160] = v39;
    v21 = v34;
    *((_OWORD *)v19 + 4) = v33;
    *((_OWORD *)v19 + 5) = v21;
    v22 = v36;
    *((_OWORD *)v19 + 6) = v35;
    *((_OWORD *)v19 + 7) = v22;
    v23 = v30;
    *(_OWORD *)v19 = v29;
    *((_OWORD *)v19 + 1) = v23;
    v24 = v32;
    *((_OWORD *)v19 + 2) = v31;
    *((_OWORD *)v19 + 3) = v24;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v2);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>.Engine, v9);
    StatefulRule<>.update<A>(to:)();
    (*(void (**)(char *, int *))(v28 + 8))(v13, v9);
  }
}

uint64_t IncrementalLayoutComputer.Engine.spacing()()
{
  return SizeAndSpacingContext.update<A>(_:)();
}

uint64_t closure #1 in IncrementalLayoutComputer.Engine.spacing()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v27 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v24 - v9;
  v25 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for IncrementalLayoutComputer.Engine(0, a2, a3, v15);
  v17 = *(int *)(v16 + 40);
  v18 = (uint64_t *)(a1 + *(int *)(v16 + 36));
  v19 = *((_DWORD *)v18 + 2);
  v29 = *v18;
  v30 = v19;
  swift_retain();
  v20 = SizeAndSpacingContext.context.getter();
  IncrementalLayoutViewCache.children(context:)(v20, (uint64_t)&v29);
  swift_release();
  v21 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v14, a1, a2);
  v28 = *(_OWORD *)v18;
  v22 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)(a1 + v17) + 280);
  swift_retain();
  v22(AssociatedTypeWitness, AssociatedTypeWitness);
  swift_release();
  (*(void (**)(uint64_t *, __int128 *, char *, uint64_t, uint64_t))(a3 + 48))(&v29, &v28, v10, a2, a3);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v14, a2);
  return outlined destroy of _IncrementalLayout_Children((uint64_t)&v29);
}

double IncrementalChildPlacements.parent.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t IncrementalChildPlacements.transaction.getter()
{
  const void *v0;
  uint64_t v2;
  _BYTE __dst[329];

  memcpy(__dst, v0, sizeof(__dst));
  AGGraphClearUpdate();
  closure #1 in IncrementalChildPlacements.transaction.getter(&v2);
  AGGraphSetUpdate();
  return v2;
}

uint64_t closure #1 in IncrementalChildPlacements.transaction.getter@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  _ViewInputs.transaction.getter();
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

uint64_t IncrementalChildPlacements.allowsContentOffsetAdjustments.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  AGGraphClearUpdate();
  IncrementalChildPlacements.parent.getter((uint64_t)v4);
  AGGraphSetUpdate();
  v0 = v5;
  if (v5)
  {
    v1 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v4);
    v2 = 1;
  }
  return v2 & 1;
}

Swift::Void __swiftcall IncrementalChildPlacements.updateValue()()
{
  double v0;
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t Value;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int CurrentAttribute;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  CGSize v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t OutputValue;
  BOOL v59;
  BOOL IsNull;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  char v65;
  CGFloat x;
  CGFloat y;
  double v68;
  double v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  double v74;
  uint64_t v75;
  double v76;
  double MaxX;
  CGFloat v78;
  uint64_t v79;
  double MinY;
  uint64_t v81;
  double MaxY;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  unsigned int v86;
  unsigned int v87;
  char *v88;
  char v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  unsigned int v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  int v120;
  CGSize size;
  uint64_t v122;
  int v123;
  void (*v124)(char *, uint64_t);
  void (*v125)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  int v129;
  uint64_t v130;
  CGFloat v131;
  CGFloat v132;
  CGFloat v133;
  CGFloat v134;
  uint64_t v135;
  int v136;
  CGFloat MinX;
  CGFloat height;
  CGFloat width;
  double v140;
  double v141;
  CGFloat v142;
  CGFloat v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  CGRect v152;
  __int128 v153;
  __int128 v154;
  _OWORD v155[14];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  char *v163;
  __int128 v164;
  __int128 v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  _OWORD v175[8];
  _OWORD v176[2];
  __int128 v177;
  _OWORD v178[5];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _BYTE v182[136];
  _OWORD v183[2];
  uint64_t v184;
  uint64_t v185;
  char v186;
  _DWORD v187[84];
  _BYTE v188[232];
  uint64_t v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;
  CGRect v205;

  v2 = v1;
  v189 = *MEMORY[0x1E0C80C00];
  v151 = v0;
  v148 = *(_QWORD *)(*(_QWORD *)&v0 + 16);
  v3 = *(_QWORD *)(v148 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v147 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v6 = v5;
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0), (static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) == 0))
  {
    v146 = v3;
    memcpy(v187, v1, 0x149uLL);
    v7 = v187[36];
    v8 = type metadata accessor for IncrementalLayoutViewCache();
    Value = AGGraphGetValue();
    v10 = *(_QWORD *)Value;
    v11 = *(_DWORD *)(*(_QWORD *)Value + 40);
    v12 = *(_QWORD *)(*(_QWORD *)Value + 48);
    v13 = *(_DWORD *)(*(_QWORD *)Value + 112);
    *(_QWORD *)&v177 = *(_QWORD *)(*(_QWORD *)Value + 32);
    DWORD2(v177) = v11;
    *(_QWORD *)&v178[0] = v12;
    *(_OWORD *)((char *)v178 + 8) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)((char *)&v178[1] + 8) = *(_OWORD *)(v10 + 72);
    *(_OWORD *)((char *)&v178[2] + 8) = *(_OWORD *)(v10 + 88);
    *((_QWORD *)&v178[3] + 1) = *(_QWORD *)(v10 + 104);
    LODWORD(v178[4]) = v13;
    _ViewInputs.viewPhase.getter();
    v14 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v7 != v14)
    {
      v1[36] = v14;
      v15 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *((_OWORD *)v1 + 6) = *MEMORY[0x1E0C9D628];
      *((_OWORD *)v1 + 7) = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)&v187[38]);
      v16 = MEMORY[0x1E0DEE9D8];
      *((_QWORD *)v1 + 16) = MEMORY[0x1E0DEE9D8];
      *((_QWORD *)v1 + 17) = v16;
      LOBYTE(v177) = 1;
      *((_BYTE *)v1 + 152) = 0;
      *((_OWORD *)v1 + 10) = 0u;
      *((_OWORD *)v1 + 11) = 0u;
      *((_OWORD *)v1 + 12) = 0u;
      *((_OWORD *)v1 + 13) = 0u;
      *((_OWORD *)v1 + 14) = 0u;
      *((_OWORD *)v1 + 15) = 0u;
      *((_OWORD *)v1 + 16) = 0u;
      *((_OWORD *)v1 + 17) = 0u;
      *((_OWORD *)v1 + 18) = 0u;
      *((_BYTE *)v1 + 304) = 1;
    }
    v17 = AGGraphGetValue();
    v19 = v18;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v21 = *MEMORY[0x1E0CFED28];
    if (CurrentAttribute == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
      goto LABEL_56;
    }
    v135 = v19;
    v136 = v14;
    LODWORD(MinX) = v7;
    v123 = v21;
    v149 = v6;
    v150 = v8;
    v22 = v187[9];
    LODWORD(v145) = v187[0];
    v24 = *(_QWORD *)(v17 + 24);
    v23 = *(_QWORD *)(v17 + 32);
    v144 = *(_OWORD *)(v17 + 8);
    v25 = *(_QWORD *)v17;
    swift_retain();
    LOBYTE(v177) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    *(_QWORD *)&v155[0] = v177;
    *((_QWORD *)&v155[0] + 1) = __PAIR64__(v22, DWORD2(v177));
    v175[0] = *(_OWORD *)AGGraphGetValue();
    v26 = (_OWORD *)AGGraphGetValue();
    v27 = v26[1];
    *(_OWORD *)v188 = *v26;
    *(_OWORD *)&v188[16] = v27;
    v170 = v25;
    v171 = v144;
    v172 = v24;
    v173 = v23;
    AGGraphGetValue();
    LOBYTE(v163) = *(_BYTE *)AGGraphGetValue();
    v28 = v148;
    v29 = AGGraphGetValue();
    v31 = v146;
    v30 = v147;
    v127 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 16);
    v127(v147, v29, v28);
    v32 = *(_QWORD *)(*(_QWORD *)&v151 + 24);
    v33 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v32 + 120);
    v130 = v25;
    swift_retain();
    v125 = v33;
    v126 = v32;
    v33(&v156, v28, v32);
    v124 = *(void (**)(char *, uint64_t))(v31 + 8);
    v124(v30, v28);
    v129 = *v2;
    v128 = *((_QWORD *)v2 + 1);
    *(_QWORD *)&v145 = *((_QWORD *)v2 + 12);
    v34 = *((_QWORD *)v2 + 13);
    v143 = *((double *)v2 + 14);
    *(_QWORD *)&v144 = v34;
    v142 = *((double *)v2 + 15);
    v35 = *((_QWORD *)v2 + 16);
    AGGraphGetValue();
    v36 = (char *)AGGraphGetValue();
    _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v155, (__int128 *)v188, (uint64_t)&v170, (char *)&v163, (int *)&v156, *v36, (uint64_t)&v177);
    v153 = v177;
    v154 = v178[0];
    v140 = *((double *)&v178[1] + 1);
    v141 = *(double *)&v178[1];
    *(_OWORD *)&v188[192] = *(_OWORD *)&v182[96];
    *(_OWORD *)&v188[208] = *(_OWORD *)&v182[112];
    *(_QWORD *)&v188[224] = *(_QWORD *)&v182[128];
    *(_OWORD *)&v188[128] = *(_OWORD *)&v182[32];
    *(_OWORD *)&v188[144] = *(_OWORD *)&v182[48];
    *(_OWORD *)&v188[176] = *(_OWORD *)&v182[80];
    *(_OWORD *)&v188[160] = *(_OWORD *)&v182[64];
    *(_OWORD *)&v188[64] = v180;
    *(_OWORD *)&v188[80] = v181;
    *(_OWORD *)&v188[112] = *(_OWORD *)&v182[16];
    *(_OWORD *)&v188[96] = *(_OWORD *)v182;
    *(_OWORD *)v188 = v178[2];
    *(_OWORD *)&v188[16] = v178[3];
    *(_OWORD *)&v188[48] = v179;
    *(_OWORD *)&v188[32] = v178[4];
    v37 = (CGSize)v183[0];
    LODWORD(v31) = LOBYTE(v183[1]);
    v155[10] = *(_OWORD *)&v188[168];
    v155[11] = *(_OWORD *)&v188[184];
    v155[12] = *(_OWORD *)&v188[200];
    v155[13] = *(_OWORD *)&v188[216];
    v155[6] = *(_OWORD *)&v188[104];
    v155[7] = *(_OWORD *)&v188[120];
    v155[8] = *(_OWORD *)&v188[136];
    v155[9] = *(_OWORD *)&v188[152];
    v155[2] = *(_OWORD *)&v188[40];
    v155[3] = *(_OWORD *)&v188[56];
    v155[4] = *(_OWORD *)&v188[72];
    v155[5] = *(_OWORD *)&v188[88];
    v155[0] = *(_OWORD *)&v188[8];
    v155[1] = *(_OWORD *)&v188[24];
    v178[3] = *(_OWORD *)&v188[184];
    v178[4] = *(_OWORD *)&v188[200];
    v179 = *(_OWORD *)&v188[216];
    v177 = *(_OWORD *)&v188[120];
    v178[0] = *(_OWORD *)&v188[136];
    v178[2] = *(_OWORD *)&v188[168];
    v178[1] = *(_OWORD *)&v188[152];
    ScrollGeometry.visibleRect.getter();
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v44;
    v152.origin.x = v38;
    v152.origin.y = v40;
    v152.size.width = v42;
    v152.size.height = v44;
    v160 = *(_OWORD *)&v188[72];
    v161 = *(_OWORD *)&v188[88];
    v162 = *(_OWORD *)&v188[104];
    v156 = *(_OWORD *)&v188[8];
    v157 = *(_OWORD *)&v188[24];
    v158 = *(_OWORD *)&v188[40];
    v159 = *(_OWORD *)&v188[56];
    v178[3] = *(_OWORD *)&v188[72];
    v178[4] = *(_OWORD *)&v188[88];
    v179 = *(_OWORD *)&v188[104];
    v177 = *(_OWORD *)&v188[8];
    v178[0] = *(_OWORD *)&v188[24];
    v178[2] = *(_OWORD *)&v188[56];
    v178[1] = *(_OWORD *)&v188[40];
    LODWORD(v146) = v31;
    if ((v31 & 1) != 0)
      ScrollGeometry.outsetForAX(limit:)(v37);
    height = v37.height;
    width = v37.width;
    ScrollGeometry.visibleRect.getter();
    v133 = v47;
    v134 = v46;
    v131 = v49;
    v132 = v48;
    v178[3] = *(_OWORD *)&v188[72];
    v178[4] = *(_OWORD *)&v188[88];
    v179 = *(_OWORD *)&v188[104];
    v177 = *(_OWORD *)&v188[8];
    v178[0] = *(_OWORD *)&v188[24];
    v178[2] = *(_OWORD *)&v188[56];
    v178[1] = *(_OWORD *)&v188[40];
    ScrollGeometry.visibleRect.getter();
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;
    OutputValue = AGGraphGetOutputValue();
    if (LODWORD(MinX) != v136 || !OutputValue)
    {
      *((CGFloat *)v2 + 20) = v39;
      *((CGFloat *)v2 + 21) = v41;
      *((CGFloat *)v2 + 22) = v43;
      *((CGFloat *)v2 + 23) = v45;
      *((_QWORD *)v2 + 24) = v51;
      *((_QWORD *)v2 + 25) = v53;
      *((_QWORD *)v2 + 26) = v55;
      *((_QWORD *)v2 + 27) = v57;
    }
    *(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) = 0;
    if ((v135 & 1) != 0)
    {
      *((_QWORD *)v2 + 39) = 0;
      *((_QWORD *)v2 + 40) = 0;
      *((_BYTE *)v2 + 328) = 1;
    }
    v203.origin.x = 0.0;
    v203.origin.y = 0.0;
    v203.size.width = 0.0;
    v203.size.height = 0.0;
    v190.origin.y = v133;
    v190.origin.x = v134;
    v190.size.height = v131;
    v190.size.width = v132;
    v59 = CGRectEqualToRect(v190, v203);
    *(_QWORD *)&v191.origin.x = v145;
    v191.size.width = v143;
    *(_QWORD *)&v191.origin.y = v144;
    v191.size.height = v142;
    IsNull = CGRectIsNull(v191);
    v61 = v140;
    v62 = v141;
    v64 = height;
    v63 = width;
    if (IsNull || (v170 = v128, (AGGraphAnyInputsChanged() & 1) != 0))
    {
      v65 = 0;
      if (v59)
        goto LABEL_43;
      goto LABEL_38;
    }
    v178[3] = *(_OWORD *)&v188[72];
    v178[4] = *(_OWORD *)&v188[88];
    v179 = *(_OWORD *)&v188[104];
    v177 = *(_OWORD *)&v188[8];
    v178[0] = *(_OWORD *)&v188[24];
    v178[2] = *(_OWORD *)&v188[56];
    v178[1] = *(_OWORD *)&v188[40];
    if ((v146 & 1) != 0)
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(*(unint64_t *)&v64, *(unint64_t *)&v63));
    ScrollGeometry.visibleRect.getter();
    v204.origin.x = 0.0;
    v204.origin.y = 0.0;
    v204.size.width = v62;
    v204.size.height = v61;
    v193 = CGRectIntersection(v192, v204);
    x = v193.origin.x;
    y = v193.origin.y;
    v68 = v193.size.width;
    v69 = v193.size.height;
    if (CGRectIsEmpty(v193))
    {
      if (v59)
      {
        v65 = 0;
        goto LABEL_43;
      }
      v65 = 1;
LABEL_38:
      v84 = AGGraphGetValue();
      v85 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v164 = *MEMORY[0x1E0C9D628];
      ++*(_DWORD *)(*(_QWORD *)v84 + 212);
      v163 = (char *)MEMORY[0x1E0DEE9D8];
      v165 = v85;
      v166 = 0;
      v168 = 0;
      v167 = 0;
      v169 = 0;
      if ((v65 & 1) != 0)
      {
        *((_OWORD *)v2 + 6) = 0u;
        *((_OWORD *)v2 + 7) = 0u;
      }
      else
      {
        v177 = v153;
        v178[0] = v154;
        *(CGFloat *)&v178[1] = v62;
        *((CGFloat *)&v178[1] + 1) = v61;
        *(_OWORD *)&v182[96] = *(_OWORD *)&v188[192];
        *(_OWORD *)&v182[112] = *(_OWORD *)&v188[208];
        *(_QWORD *)&v182[128] = *(_QWORD *)&v188[224];
        *(_OWORD *)&v182[32] = *(_OWORD *)&v188[128];
        *(_OWORD *)&v182[48] = *(_OWORD *)&v188[144];
        *(_OWORD *)&v182[80] = *(_OWORD *)&v188[176];
        *(_OWORD *)&v182[64] = *(_OWORD *)&v188[160];
        v180 = *(_OWORD *)&v188[64];
        v181 = *(_OWORD *)&v188[80];
        *(_OWORD *)&v182[16] = *(_OWORD *)&v188[112];
        *(_OWORD *)v182 = *(_OWORD *)&v188[96];
        v178[2] = *(_OWORD *)v188;
        v178[3] = *(_OWORD *)&v188[16];
        v179 = *(_OWORD *)&v188[48];
        v178[4] = *(_OWORD *)&v188[32];
        *(CGFloat *)v183 = v63;
        *((CGFloat *)v183 + 1) = v64;
        LOBYTE(v183[1]) = v146;
        IncrementalChildPlacements.placeChildren(placementContext:in:for:)(&v177, (uint64_t *)&v163, &v152, *(uint64_t *)&v151);
      }
      v86 = AGGraphGetCurrentAttribute();
      if (v86 != v123)
      {
        v87 = v86;
        AGGraphGetValue();
        v88 = (char *)*((_QWORD *)v2 + 16);
        v89 = v169;
        swift_retain();
        IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(v88, &v163, v89, v87);
        swift_release();
        v90 = v163;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((_QWORD *)v2 + 16) = v90;
        v91 = swift_bridgeObjectRetain();
        v92 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(v91);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *((_QWORD *)v2 + 17) = v92;
        v93 = v2[10];
        v94 = *((_QWORD *)v2 + 6);
        v95 = v2[14];
        v96 = *((_QWORD *)v2 + 8);
        v97 = *((_QWORD *)v2 + 11);
        v35 = *((_QWORD *)v2 + 16);
        v98 = v2[36];
        v99 = *(_OWORD *)(v2 + 66);
        v175[6] = *(_OWORD *)(v2 + 62);
        v175[7] = v99;
        v100 = *(_OWORD *)(v2 + 66);
        v176[0] = *(_OWORD *)(v2 + 70);
        *(_OWORD *)((char *)v176 + 9) = *(_OWORD *)((char *)v2 + 289);
        v101 = *(_OWORD *)(v2 + 50);
        v175[2] = *(_OWORD *)(v2 + 46);
        v175[3] = v101;
        v102 = *(_OWORD *)(v2 + 58);
        v175[4] = *(_OWORD *)(v2 + 54);
        v175[5] = v102;
        v103 = *(_OWORD *)(v2 + 42);
        v175[0] = *(_OWORD *)(v2 + 38);
        v175[1] = v103;
        v104 = *((_QWORD *)v2 + 39);
        v105 = *((_QWORD *)v2 + 40);
        v106 = *((_BYTE *)v2 + 328);
        v107 = *((_OWORD *)v2 + 1);
        v144 = *(_OWORD *)v2;
        v145 = v107;
        v177 = v144;
        v178[0] = v107;
        *(_QWORD *)&v178[1] = *((_QWORD *)v2 + 4);
        DWORD2(v178[1]) = v93;
        *(_QWORD *)&v178[2] = v94;
        DWORD2(v178[2]) = v95;
        *(_OWORD *)((char *)&v178[3] + 8) = *(_OWORD *)(v2 + 18);
        *(_QWORD *)&v178[3] = v96;
        *((_QWORD *)&v178[4] + 1) = v97;
        v108 = *((_OWORD *)v2 + 7);
        v179 = *((_OWORD *)v2 + 6);
        v180 = v108;
        *(_QWORD *)&v181 = v35;
        *((_QWORD *)&v181 + 1) = v92;
        *(_DWORD *)v182 = v98;
        v109 = *(_OWORD *)(v2 + 70);
        *(_OWORD *)&v182[120] = v100;
        v183[0] = v109;
        *(_OWORD *)((char *)v183 + 9) = *(_OWORD *)((char *)v2 + 289);
        *(_OWORD *)&v182[104] = *(_OWORD *)(v2 + 62);
        *(_OWORD *)&v182[24] = *(_OWORD *)(v2 + 42);
        *(_OWORD *)&v182[8] = *(_OWORD *)(v2 + 38);
        *(_OWORD *)&v182[88] = *(_OWORD *)(v2 + 58);
        *(_OWORD *)&v182[72] = *(_OWORD *)(v2 + 54);
        *(_OWORD *)&v182[56] = *(_OWORD *)(v2 + 50);
        *(_OWORD *)&v182[40] = *(_OWORD *)(v2 + 46);
        v184 = v104;
        v185 = v105;
        v186 = v106;
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)&v177);
        IncrementalChildPlacements.mainID(children:)((uint64_t)&v174);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)&v177);
        outlined release of PositionState((uint64_t)v175);
        *((_OWORD *)v2 + 17) = v174;
        v65 = 1;
        goto LABEL_43;
      }
LABEL_56:
      __break(1u);
    }
    v70 = *(double *)&v145;
    *(_QWORD *)&v194.origin.x = v145;
    v71 = v143;
    v72 = *(double *)&v144;
    *(_QWORD *)&v194.origin.y = v144;
    v194.size.width = v143;
    v73 = v142;
    v194.size.height = v142;
    v205.origin.x = x;
    v205.origin.y = y;
    v205.size.width = v68;
    v205.size.height = v69;
    if (CGRectContainsRect(v194, v205))
    {
      v151 = v68 / 3.0;
      v195.origin.x = x;
      v195.origin.y = y;
      v195.size.width = v68;
      v195.size.height = v69;
      MinX = CGRectGetMinX(v195);
      v196.origin.x = v70;
      v196.origin.y = v72;
      v196.size.width = v71;
      v74 = v151;
      v196.size.height = v73;
      if (MinX - CGRectGetMinX(v196) < v74)
      {
        v75 = AGGraphGetValue();
        if ((*(_BYTE *)(*(_QWORD *)v75 + 216) & 2) == 0)
          *(_BYTE *)(*(_QWORD *)v75 + 216) |= 2u;
      }
      v76 = v69 / 3.0;
      *(_QWORD *)&v197.origin.x = v145;
      v197.size.width = v143;
      *(_QWORD *)&v197.origin.y = v144;
      v197.size.height = v142;
      MaxX = CGRectGetMaxX(v197);
      v198.origin.x = x;
      v198.origin.y = y;
      v198.size.width = v68;
      v198.size.height = v69;
      v78 = CGRectGetMaxX(v198);
      v62 = v141;
      if (MaxX - v78 < v74)
      {
        v79 = AGGraphGetValue();
        if ((*(_BYTE *)(*(_QWORD *)v79 + 216) & 8) == 0)
          *(_BYTE *)(*(_QWORD *)v79 + 216) |= 8u;
      }
      v199.origin.x = x;
      v199.origin.y = y;
      v199.size.width = v68;
      v199.size.height = v69;
      MinY = CGRectGetMinY(v199);
      *(_QWORD *)&v200.origin.x = v145;
      v200.size.width = v143;
      *(_QWORD *)&v200.origin.y = v144;
      v200.size.height = v142;
      if (MinY - CGRectGetMinY(v200) < v76)
      {
        v81 = AGGraphGetValue();
        if ((*(_BYTE *)(*(_QWORD *)v81 + 216) & 1) == 0)
          *(_BYTE *)(*(_QWORD *)v81 + 216) |= 1u;
      }
      *(_QWORD *)&v201.origin.x = v145;
      v201.size.width = v143;
      *(_QWORD *)&v201.origin.y = v144;
      v201.size.height = v142;
      MaxY = CGRectGetMaxY(v201);
      v202.origin.x = x;
      v202.origin.y = y;
      v202.size.width = v68;
      v202.size.height = v69;
      if (MaxY - CGRectGetMaxY(v202) >= v76)
      {
        v65 = 0;
        v63 = width;
        v61 = v140;
        v64 = height;
      }
      else
      {
        v83 = AGGraphGetValue();
        v63 = width;
        v61 = v140;
        v64 = height;
        if ((*(_BYTE *)(*(_QWORD *)v83 + 216) & 4) == 0)
          *(_BYTE *)(*(_QWORD *)v83 + 216) |= 4u;
        v65 = 0;
      }
    }
    else
    {
      v65 = 0;
      v61 = v140;
      v62 = v141;
      v64 = height;
      v63 = width;
      if (!v59)
        goto LABEL_38;
    }
LABEL_43:
    v170 = v35;
    if (*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 225) == 1)
    {
      v110 = v148;
      v111 = AGGraphGetValue();
      v112 = v147;
      v113 = v127;
      v127(v147, v111, v110);
      v114 = v126;
      v115 = *(uint64_t (**)(uint64_t, uint64_t))(v126 + 128);
      swift_bridgeObjectRetain();
      v116 = v115(v110, v114);
      LODWORD(v151) = v116;
      v117 = v35;
      v118 = v124;
      v124(v112, v110);
      v119 = AGGraphGetValue();
      v113(v112, v119, v110);
      v125(&v177, v110, v114);
      v118(v112, v110);
      v35 = v117;
      if (LODWORD(v151))
      {
        v120 = v177;
        if ((_DWORD)v177)
        {
          v178[3] = v160;
          v178[4] = v161;
          v179 = v162;
          v177 = v156;
          v178[0] = v157;
          v178[2] = v159;
          v178[1] = v158;
          Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(&v177, (v120 << 31 >> 31) & v116, v116 & (v120 << 30 >> 31));
          v35 = v170;
          goto LABEL_51;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if ((v65 & 1) == 0 && AGGraphGetOutputValue())
    {
      swift_bridgeObjectRelease();
LABEL_52:
      size = v152.size;
      *((_OWORD *)v2 + 10) = v152.origin;
      *((CGSize *)v2 + 11) = size;
      v177 = v153;
      v178[0] = v154;
      *(CGFloat *)&v178[1] = v62;
      *((CGFloat *)&v178[1] + 1) = v61;
      *(_OWORD *)&v182[96] = *(_OWORD *)&v188[192];
      *(_OWORD *)&v182[112] = *(_OWORD *)&v188[208];
      *(_QWORD *)&v182[128] = *(_QWORD *)&v188[224];
      *(_OWORD *)&v182[32] = *(_OWORD *)&v188[128];
      *(_OWORD *)&v182[48] = *(_OWORD *)&v188[144];
      *(_OWORD *)&v182[80] = *(_OWORD *)&v188[176];
      *(_OWORD *)&v182[64] = *(_OWORD *)&v188[160];
      v180 = *(_OWORD *)&v188[64];
      v181 = *(_OWORD *)&v188[80];
      *(_OWORD *)&v182[16] = *(_OWORD *)&v188[112];
      *(_OWORD *)v182 = *(_OWORD *)&v188[96];
      v178[2] = *(_OWORD *)v188;
      v178[3] = *(_OWORD *)&v188[16];
      v179 = *(_OWORD *)&v188[48];
      v178[4] = *(_OWORD *)&v188[32];
      *(CGFloat *)v183 = v63;
      *((CGFloat *)v183 + 1) = v64;
      LOBYTE(v183[1]) = v146;
      PositionState.update(context:)((uint64_t)&v177);
      swift_release();
      return;
    }
LABEL_51:
    *(_QWORD *)&v177 = v35;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
}

double IncrementalChildPlacements.placeChildren(placementContext:in:for:)(void *__src, uint64_t *a2, CGRect *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  void (*v14)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  int v15;
  Swift::Bool v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  double v20;
  double v21;
  char v22;
  _OWORD *Value;
  __int128 v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  _BOOL4 v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  double v39;
  double v40;
  char v41;
  char v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  double v48;
  double v49;
  double v50;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  double *v56;
  uint64_t *v57;
  uint64_t *v58;
  double result;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[7];
  __int128 v63[19];
  double __srca[42];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  char v68;
  double v69;
  double v70;
  char v71;
  _BYTE v72[304];
  _BYTE __dst[297];
  _OWORD v74[22];

  v5 = v4;
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v74, __src, 0x129uLL);
  IncrementalChildPlacements.resolvedPlacementContext(placementContext:)((unsigned int *)v74, a4, (uint64_t)v72);
  type metadata accessor for IncrementalLayoutViewCache();
  v10 = *(_QWORD *)AGGraphGetValue();
  v12 = *(_QWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62[2] = v12;
  v62[3] = v11;
  v62[4] = v5;
  v62[5] = v72;
  v62[6] = a2;
  v14 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 288);
  swift_retain();
  v14(AssociatedTypeWitness, partial apply for closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), v62, AssociatedTypeWitness, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  if (*((_BYTE *)a2 + 40) == 1)
  {
    v15 = *(_DWORD *)(v5 + 40);
    AGGraphGetValue();
    swift_retain();
    v16 = IncrementalLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v16 && v15 != *MEMORY[0x1E0CFED28])
    {
      v17 = AGCreateWeakAttribute();
      *(_QWORD *)(swift_allocObject() + 16) = v17;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(__srca, (const void *)v5, 0x149uLL);
  memcpy(v74, (const void *)v5, 0x149uLL);
  IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  v18 = LOBYTE(v74[0]);
  AGGraphGetValue();
  v19 = *(_BYTE *)AGGraphGetValue();
  v20 = __srca[36];
  v21 = __srca[37];
  v22 = LOBYTE(__srca[38]);
  Value = (_OWORD *)AGGraphGetValue();
  v24 = Value[1];
  v74[0] = *Value;
  v74[1] = v24;
  MEMORY[0x18D75BE3C]();
  v27 = 0.0;
  v28 = 3;
  if ((v22 & 1) != 0)
  {
    v29 = 0.0;
  }
  else if (v20 != 0.0 || (v29 = 0.0, v21 != 0.0))
  {
    v28 = v18 == 2 ? 3 : 1;
    v29 = 0.0;
    v27 = v18 == 2 ? 0.0 : v21;
    if (v18 != 2)
      v29 = v20;
  }
  v30 = *((double *)a2 + 6);
  v31 = *((double *)a2 + 7);
  v32 = v30 == 0.0;
  if (v31 != 0.0)
    v32 = 0;
  if (v18 == 2)
    v32 = 1;
  if (v32)
    v33 = v28;
  else
    v33 = 0;
  if (v32)
    v34 = -0.0;
  else
    v34 = *((double *)a2 + 7);
  v35 = v27 + v34;
  if (v32)
    v36 = -0.0;
  else
    v36 = *((double *)a2 + 6);
  v37 = v29 + v36;
  if (v29 + v36 == 0.0)
  {
    v38 = v35 != 0.0 || v18 == 2;
    if (!v38 && (__srca[32] != 0.0 || __srca[33] != 0.0) && (v25 != 0.0 || v26 != 0.0))
    {
      v39 = vabdd_f64(v25, __srca[32]);
      v40 = vabdd_f64(v26, __srca[33]);
      if (v39 >= 0.01 || v40 >= 0.01)
      {
        memcpy(v74, __srca, 0x149uLL);
        v41 = *((_BYTE *)a2 + 40);
        v42 = *((_BYTE *)a2 + 64);
        v65 = *a2;
        v66 = *(_OWORD *)(a2 + 1);
        v67 = *(_OWORD *)(a2 + 3);
        v68 = v41;
        v69 = v30;
        v70 = v31;
        v71 = v42;
        memcpy(v63, __dst, 0x129uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__srca);
        swift_bridgeObjectRetain();
        IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)&v65, v63);
        v44 = v43;
        v46 = v45;
        swift_bridgeObjectRelease();
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__srca);
        if (v46 == 0.0)
          v47 = v33;
        else
          v47 = 2;
        if (v46 == 0.0)
          v48 = v35;
        else
          v48 = v46;
        if (v46 == 0.0)
          v49 = v37;
        else
          v49 = v44;
        if (v44 == 0.0)
          v33 = v47;
        else
          v33 = 2;
        if (v44 == 0.0)
          v35 = v48;
        else
          v35 = v46;
        if (v44 == 0.0)
          v37 = v49;
        else
          v37 = v44;
      }
    }
  }
  if ((v19 & (v37 != 0.0)) != 0)
    v50 = -v37;
  else
    v50 = v37;
  if ((v35 != 0.0 || v50 != 0.0) && v33 != 3)
  {
    specialized IncrementalChildPlacements.logTranslation(_:reason:)(v33, v50, v35);
    *a3 = CGRectOffset(*a3, v50, v35);
    *(double *)(v5 + 312) = v50;
    *(double *)(v5 + 320) = v35;
    *(_BYTE *)(v5 + 328) = 0;
    AGGraphClearUpdate();
    memcpy(v74, (const void *)v5, 0x149uLL);
    IncrementalChildPlacements.parent.getter((uint64_t)v63);
    AGGraphSetUpdate();
    outlined init with copy of Scrollable?((uint64_t)v63, (uint64_t)v74);
    v53 = *((_QWORD *)&v74[1] + 1);
    if (!*((_QWORD *)&v74[1] + 1))
    {
      outlined destroy of Scrollable?((uint64_t)v63);
      outlined destroy of Scrollable?((uint64_t)v74);
      if ((a2[8] & 1) != 0)
        goto LABEL_72;
LABEL_74:
      v55 = a2 + 1;
      v58 = a2 + 2;
      v57 = a2 + 3;
      v56 = (double *)(a2 + 4);
      goto LABEL_75;
    }
    v54 = *(_QWORD *)&v74[2];
    __swift_project_boxed_opaque_existential_1(v74, *((uint64_t *)&v74[1] + 1));
    (*(void (**)(uint64_t, uint64_t, double, double))(v54 + 32))(v53, v54, v50, v35);
    outlined destroy of Scrollable?((uint64_t)v63);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  }
  if ((a2[8] & 1) == 0)
    goto LABEL_74;
LABEL_72:
  v55 = (_QWORD *)MEMORY[0x1E0C9D628];
  v56 = (double *)(MEMORY[0x1E0C9D628] + 24);
  v57 = (uint64_t *)(MEMORY[0x1E0C9D628] + 16);
  v58 = (uint64_t *)(MEMORY[0x1E0C9D628] + 8);
LABEL_75:
  result = *v56;
  v60 = *v57;
  v61 = *v58;
  *(_QWORD *)(v5 + 96) = *v55;
  *(_QWORD *)(v5 + 104) = v61;
  *(_QWORD *)(v5 + 112) = v60;
  *(double *)(v5 + 120) = result;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_BYTE *)(v5 + 304) = 1;
  return result;
}

uint64_t IncrementalChildPlacements.mainID(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v2);
  Sequence.min(by:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _IncrementalLayout_PlacedChild?, (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #2 in IncrementalChildPlacements.mainID(children:), 0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE1C98], v3, a1);
  return swift_release();
}

uint64_t Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__int128 *a1, unint64_t a2, int a3)
{
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double MaxX;
  double v18;
  double MaxY;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  CGPoint v29;
  _QWORD *Value;
  uint64_t v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  char isUniquelyReferenced_nonNull_native;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double MinX;
  double v55;
  double MinY;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int128 *v66;
  __int128 v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t result;
  unsigned int v72;
  uint64_t **v74;
  uint64_t v75;
  char v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[32];
  __int128 v83[8];
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;

  v4 = v3;
  v5 = a3;
  v6 = a2;
  v7 = a1[5];
  v83[4] = a1[4];
  v83[5] = v7;
  v83[6] = a1[6];
  v8 = a1[1];
  v83[0] = *a1;
  v83[1] = v8;
  v9 = a1[3];
  v83[2] = a1[2];
  v83[3] = v9;
  v10 = (*v3)[2];
  if (v10)
  {
    v72 = a2;
    v74 = v4;
    v11 = swift_bridgeObjectRetain();
    v12 = 0;
    v13 = 0;
    v14 = MEMORY[0x1E0DEE9E0];
    v15 = v11 + 48;
    v75 = v10;
    do
    {
      v20 = *(_QWORD *)(v15 - 16);
      if (*(_BYTE *)(v20 + 164) != 1)
      {
        v79 = (uint64_t)v12;
        v21 = *(_BYTE *)v15;
        v22 = *(_QWORD *)(v15 + 8);
        v23 = *(_BYTE *)(v15 + 16);
        v76 = *(_BYTE *)(v20 + 165);
        v77 = *(unsigned __int8 *)(v20 + 166);
        v78 = *(_DWORD *)(v20 + 160);
        *(_QWORD *)&v80 = *(_QWORD *)(v15 - 8);
        BYTE8(v80) = v21;
        *(_QWORD *)&v81 = v22;
        BYTE8(v81) = v23;
        v24 = *(_OWORD *)(v15 + 40);
        *(_OWORD *)v82 = *(_OWORD *)(v15 + 24);
        *(_OWORD *)&v82[16] = v24;
        swift_retain_n();
        if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
        {
          static LayoutComputer.defaultValue.getter();
        }
        else
        {
          AGGraphGetValue();
          swift_retain();
        }
        LayoutComputer.sizeThatFits(_:)();
        v26 = v25;
        v28 = v27;
        swift_release();
        v29 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v28, v26));
        v80 = *(_OWORD *)(v20 + 32);
        if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
        {
          static LayoutComputer.defaultValue.getter();
        }
        else
        {
          Value = (_QWORD *)AGGraphGetValue();
          v31 = Value[1];
          *(_QWORD *)&v80 = *Value;
          *((_QWORD *)&v80 + 1) = v31;
          swift_retain();
        }
        BYTE8(v80) = v21;
        *(_QWORD *)&v81 = v22;
        BYTE8(v81) = v23;
        LayoutComputer.sizeThatFits(_:)();
        v33 = v32;
        v35 = v34;
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v79);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v80 = v14;
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
        v39 = *(_QWORD *)(v14 + 16);
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        v42 = v37;
        if (*(_QWORD *)(v14 + 24) >= v41)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v14 = v80;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
          v14 = v80;
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
          if ((v42 & 1) != (v44 & 1))
            goto LABEL_70;
          v38 = v43;
        }
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
        {
          v45 = v38 << 6;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_QWORD *)(v14 + 8 * (v38 >> 6) + 64) |= 1 << v38;
          *(_DWORD *)(*(_QWORD *)(v14 + 48) + 4 * v38) = v78;
          v45 = v38 << 6;
          v46 = *(_QWORD *)(v14 + 56) + (v38 << 6);
          *(_OWORD *)v46 = xmmword_187C05360;
          *(_OWORD *)(v46 + 16) = xmmword_187C05360;
          *(_QWORD *)(v46 + 32) = 0;
          *(_BYTE *)(v46 + 40) = 1;
          *(_QWORD *)(v46 + 48) = 0;
          *(_BYTE *)(v46 + 56) = 1;
          v47 = *(_QWORD *)(v14 + 16);
          v48 = v47 + 1;
          v49 = __OFADD__(v47, 1);
          swift_bridgeObjectRetain();
          if (v49)
            goto LABEL_68;
          *(_QWORD *)(v14 + 16) = v48;
        }
        v50 = *(_QWORD *)(v14 + 56);
        swift_bridgeObjectRelease();
        v51 = v50 + v45;
        if ((v76 & 1) != 0)
        {
          v52 = *(_QWORD *)(v51 + 32);
          if (*(_BYTE *)(v51 + 40))
            v52 = v13;
          *(_QWORD *)(v51 + 32) = v52;
          *(_BYTE *)(v51 + 40) = 0;
        }
        else
        {
          v53 = *(double *)v51;
          v86.origin.x = v29.x;
          v86.origin.y = v29.y;
          v86.size.width = v33;
          v86.size.height = v35;
          MinX = CGRectGetMinX(v86);
          if (MinX >= v53)
            MinX = v53;
          *(double *)v51 = MinX;
          v55 = *(double *)(v51 + 16);
          v87.origin.x = v29.x;
          v87.origin.y = v29.y;
          v87.size.width = v33;
          v87.size.height = v35;
          MinY = CGRectGetMinY(v87);
          if (MinY >= v55)
            MinY = v55;
          *(double *)(v51 + 16) = MinY;
        }
        v10 = v75;
        if (v77)
        {
          v57 = *(_QWORD *)(v51 + 48);
          if (*(_BYTE *)(v51 + 56))
            v57 = v13;
          *(_QWORD *)(v51 + 48) = v57;
          *(_BYTE *)(v51 + 56) = 0;
        }
        else
        {
          v16 = *(double *)(v51 + 8);
          v84.origin.x = v29.x;
          v84.origin.y = v29.y;
          v84.size.width = v33;
          v84.size.height = v35;
          MaxX = CGRectGetMaxX(v84);
          if (v16 > MaxX)
            MaxX = v16;
          *(double *)(v51 + 8) = MaxX;
          v18 = *(double *)(v51 + 24);
          v85.origin.x = v29.x;
          v85.origin.y = v29.y;
          v85.size.width = v33;
          v85.size.height = v35;
          MaxY = CGRectGetMaxY(v85);
          if (v18 > MaxY)
            MaxY = v18;
          *(double *)(v51 + 24) = MaxY;
        }
        swift_release();
        v12 = specialized thunk for @callee_guaranteed () -> (@unowned PinnedSection);
      }
      ++v13;
      v15 += 72;
    }
    while (v10 != v13);
    swift_bridgeObjectRelease();
    v4 = v74;
    v6 = v72;
    v5 = a3;
  }
  else
  {
    v12 = 0;
    v14 = MEMORY[0x1E0DEE9E0];
  }
  v58 = 0;
  v59 = v14 + 64;
  v60 = 1 << *(_BYTE *)(v14 + 32);
  v61 = -1;
  if (v60 < 64)
    v61 = ~(-1 << v60);
  v62 = v61 & *(_QWORD *)(v14 + 64);
  v63 = (unint64_t)(v60 + 63) >> 6;
  while (1)
  {
    if (v62)
    {
      v64 = __clz(__rbit64(v62));
      v62 &= v62 - 1;
      v65 = v64 | (v58 << 6);
      goto LABEL_49;
    }
    v68 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_67;
    }
    if (v68 >= v63)
      goto LABEL_65;
    v69 = *(_QWORD *)(v59 + 8 * v68);
    ++v58;
    if (!v69)
    {
      v58 = v68 + 1;
      if (v68 + 1 >= v63)
        goto LABEL_65;
      v69 = *(_QWORD *)(v59 + 8 * v58);
      if (!v69)
      {
        v58 = v68 + 2;
        if (v68 + 2 >= v63)
          goto LABEL_65;
        v69 = *(_QWORD *)(v59 + 8 * v58);
        if (!v69)
          break;
      }
    }
LABEL_64:
    v62 = (v69 - 1) & v69;
    v65 = __clz(__rbit64(v69)) + (v58 << 6);
LABEL_49:
    v66 = (__int128 *)(*(_QWORD *)(v14 + 56) + (v65 << 6));
    v67 = v66[1];
    v80 = *v66;
    v81 = v67;
    *(_OWORD *)v82 = v66[2];
    *(_OWORD *)&v82[9] = *(__int128 *)((char *)v66 + 41);
    commitSection #1 <A>(_:) in Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)((uint64_t)&v80, v6, v4, v83, v5);
  }
  v70 = v68 + 3;
  if (v70 >= v63)
  {
LABEL_65:
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v12);
  }
  v69 = *(_QWORD *)(v59 + 8 * v70);
  if (v69)
  {
    v58 = v70;
    goto LABEL_64;
  }
  while (1)
  {
    v58 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v58 >= v63)
      goto LABEL_65;
    v69 = *(_QWORD *)(v59 + 8 * v58);
    ++v70;
    if (v69)
      goto LABEL_64;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double IncrementalChildPlacements.resolvedPlacementContext(placementContext:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  char v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double result;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  _QWORD __src[38];
  _QWORD __dst[38];
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  char v127;
  _BYTE v128[312];

  v6 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v10 = *((_QWORD *)a1 + 2);
  v11 = *((_QWORD *)a1 + 3);
  v12 = *((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a1 + 5);
  v14 = a1[12];
  v16 = *((_QWORD *)a1 + 21);
  v15 = *((_QWORD *)a1 + 22);
  v18 = *((_QWORD *)a1 + 23);
  v17 = *((_QWORD *)a1 + 24);
  v19 = *((_QWORD *)a1 + 25);
  v20 = *((_QWORD *)a1 + 26);
  v21 = *((_QWORD *)a1 + 27);
  v22 = *((_QWORD *)a1 + 28);
  v24 = *((_QWORD *)a1 + 29);
  v23 = *((_QWORD *)a1 + 30);
  v25 = *((_QWORD *)a1 + 31);
  v26 = *((_QWORD *)a1 + 32);
  v27 = *((_QWORD *)a1 + 33);
  v28 = *((_QWORD *)a1 + 34);
  v29 = *((_QWORD *)a1 + 35);
  v30 = *((double *)a1 + 36);
  v31 = *((_BYTE *)a1 + 296);
  LODWORD(v97) = *a1;
  *(_QWORD *)((char *)&v97 + 4) = __PAIR64__(v9, v7);
  v68 = v8;
  HIDWORD(v97) = v8;
  v98 = v10;
  v99 = v11;
  v91 = v13;
  v92 = v12;
  v100 = v12;
  v101 = v13;
  v107 = *(_OWORD *)(a1 + 29);
  v108 = *(_OWORD *)(a1 + 33);
  v109 = *(_OWORD *)(a1 + 37);
  v32 = a1[41];
  v102 = v14;
  v110 = v32;
  v103 = *(_OWORD *)(a1 + 13);
  v104 = *(_OWORD *)(a1 + 17);
  v105 = *(_OWORD *)(a1 + 21);
  v106 = *(_OWORD *)(a1 + 25);
  v111 = v16;
  v112 = v15;
  v113 = v18;
  v87 = v17;
  v89 = v19;
  v114 = v17;
  v115 = v19;
  v70 = v20;
  v116 = v20;
  v81 = v22;
  v83 = v21;
  v117 = v21;
  v118 = v22;
  v77 = v28;
  v79 = v24;
  v119 = v24;
  v120 = v23;
  v121 = v25;
  v66 = v26;
  v122 = v26;
  v123 = v27;
  v124 = v28;
  v93 = v30;
  v94 = v29;
  v125 = v29;
  v126 = v30;
  v127 = v31;
  IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(&v97, a2, (uint64_t)v128);
  outlined init with take of Image.Resolved?((uint64_t)v128, (uint64_t)&v97, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)&v97, (uint64_t)v128, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v128) == 1)
  {
    v33 = *(_OWORD *)(a1 + 33);
    *(_OWORD *)((char *)&__dst[14] + 4) = *(_OWORD *)(a1 + 29);
    *(_OWORD *)((char *)&__dst[16] + 4) = v33;
    *(_OWORD *)((char *)&__dst[18] + 4) = *(_OWORD *)(a1 + 37);
    v34 = *(_OWORD *)(a1 + 17);
    *(_OWORD *)((char *)&__dst[6] + 4) = *(_OWORD *)(a1 + 13);
    *(_OWORD *)((char *)&__dst[8] + 4) = v34;
    v35 = *(_OWORD *)(a1 + 25);
    *(_OWORD *)((char *)&__dst[10] + 4) = *(_OWORD *)(a1 + 21);
    v36 = v31 & 1;
    __dst[0] = __PAIR64__(v7, v6);
    __dst[1] = __PAIR64__(v68, v9);
    __dst[2] = v10;
    __dst[3] = v11;
    __dst[4] = v92;
    __dst[5] = v91;
    v37 = a1[41];
    LODWORD(__dst[6]) = v14;
    HIDWORD(__dst[20]) = v37;
    *(_OWORD *)((char *)&__dst[12] + 4) = v35;
    v85 = v16;
    __dst[21] = v16;
    __dst[22] = v15;
    __dst[23] = v18;
    v38 = v87;
    __dst[24] = v87;
    __dst[25] = v89;
    v39 = v70;
    __dst[26] = v70;
    v41 = v81;
    v40 = v83;
    __dst[27] = v83;
    __dst[28] = v81;
    v42 = v79;
    __dst[29] = v79;
    v73 = v25;
    v74 = v23;
    __dst[30] = v23;
    __dst[31] = v25;
    v43 = v66;
    __dst[32] = v66;
    v72 = v27;
    __dst[33] = v27;
    __dst[34] = v77;
    __dst[35] = v94;
    *(double *)&__dst[36] = v93;
    LOBYTE(__dst[37]) = v31;
    v44 = v14;
    v45 = v6;
    v75 = v15;
    v76 = v18;
    v46 = v9;
    v47 = v89;
    v48 = v68;
    v49 = v77;
    if ((*(_BYTE *)(v3 + 328) & 1) == 0)
      goto LABEL_3;
LABEL_6:
    v64 = v85;
    v62 = v73;
    v63 = v74;
    v61 = v72;
    goto LABEL_8;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v97, (uint64_t)__src, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  v36 = __src[37];
  v93 = *(double *)&__src[36];
  v94 = __src[35];
  v75 = __src[22];
  v76 = __src[23];
  v85 = __src[21];
  v39 = __src[26];
  v73 = __src[31];
  v74 = __src[30];
  v43 = __src[32];
  v72 = __src[33];
  v49 = __src[34];
  v44 = __src[6];
  v11 = __src[3];
  v92 = __src[4];
  v91 = __src[5];
  v10 = __src[2];
  v45 = __src[0];
  v7 = HIDWORD(__src[0]);
  v46 = __src[1];
  v48 = HIDWORD(__src[1]);
  memcpy(__dst, __src, 0x129uLL);
  v42 = __src[29];
  v41 = __src[28];
  v40 = __src[27];
  v38 = __src[24];
  v47 = __src[25];
  if ((*(_BYTE *)(v3 + 328) & 1) != 0)
    goto LABEL_6;
LABEL_3:
  v78 = v49;
  v80 = v42;
  v82 = v41;
  v84 = v40;
  v50 = v38;
  v67 = v10;
  v69 = v11;
  v51 = *(_QWORD *)(v3 + 312);
  v52 = *(_QWORD *)(v3 + 320);
  outlined init with take of Image.Resolved?((uint64_t)&v97, (uint64_t)__src, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)__src) == 1)
  {
    ScrollGeometry.visibleRect.getter();
    ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v52, v51), (CGSize)__PAIR128__(*(unint64_t *)&v93, v94));
    ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v52, v51), (CGSize)__PAIR128__(*(unint64_t *)&v93, v94));
    v86 = __dst[21];
    v88 = __dst[24];
    v90 = __dst[25];
    v71 = __dst[26];
    v53 = __dst[27];
    v54 = __dst[28];
    v55 = __dst[29];
    v56 = __dst[30];
    v57 = __dst[31];
    v58 = __dst[32];
    v59 = __dst[33];
    v60 = __dst[34];
    v75 = __dst[22];
    v76 = __dst[23];
    ScrollGeometry.visibleRect.getter();
    v42 = v55;
    v41 = v54;
    v40 = v53;
    v38 = v88;
    v47 = v90;
    v61 = v59;
    v62 = v57;
    v49 = v60;
    v63 = v56;
    v43 = v58;
    v64 = v86;
    v10 = v67;
    v11 = v69;
    v39 = v71;
  }
  else
  {
    v11 = v69;
    v40 = v84;
    v64 = v85;
    v38 = v50;
    v42 = v80;
    v41 = v82;
    v62 = v73;
    v63 = v74;
    v61 = v72;
    v49 = v78;
  }
LABEL_8:
  *(_DWORD *)a3 = v45;
  *(_DWORD *)(a3 + 4) = v7;
  *(_DWORD *)(a3 + 8) = v46;
  *(_DWORD *)(a3 + 12) = v48;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v92;
  *(_QWORD *)(a3 + 40) = v91;
  *(_DWORD *)(a3 + 48) = v44;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)&__dst[7];
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&__dst[9];
  *(_OWORD *)(a3 + 88) = *(_OWORD *)&__dst[11];
  *(_OWORD *)(a3 + 104) = *(_OWORD *)&__dst[13];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&__dst[15];
  *(_OWORD *)(a3 + 136) = *(_OWORD *)&__dst[17];
  *(_OWORD *)(a3 + 152) = *(_OWORD *)&__dst[19];
  *(_QWORD *)(a3 + 168) = v64;
  *(_QWORD *)(a3 + 176) = v75;
  *(_QWORD *)(a3 + 184) = v76;
  *(_QWORD *)(a3 + 192) = v38;
  *(_QWORD *)(a3 + 200) = v47;
  *(_QWORD *)(a3 + 208) = v39;
  *(_QWORD *)(a3 + 216) = v40;
  *(_QWORD *)(a3 + 224) = v41;
  *(_QWORD *)(a3 + 232) = v42;
  *(_QWORD *)(a3 + 240) = v63;
  *(_QWORD *)(a3 + 248) = v62;
  *(_QWORD *)(a3 + 256) = v43;
  *(_QWORD *)(a3 + 264) = v61;
  *(_QWORD *)(a3 + 272) = v49;
  result = v93;
  *(_QWORD *)(a3 + 280) = v94;
  *(double *)(a3 + 288) = v93;
  *(_BYTE *)(a3 + 296) = v36;
  return result;
}

uint64_t closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Value;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[304];
  _BYTE v23[128];

  v21 = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(type metadata accessor for IncrementalChildPlacements(0, v14, v15, v13) + 16);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, Value, v16);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v19 = result;
    AGGraphGetValue();
    swift_retain();
    IncrementalLayoutViewCache.children(context:)(v19, (uint64_t)v23);
    swift_release();
    memcpy(v22, a3, 0x129uLL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 56))(v23, v22, a1, v21, a5, a6);
    outlined destroy of _IncrementalLayout_Children((uint64_t)v23);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  }
  return result;
}

uint64_t closure #2 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)()
{
  uint64_t result;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    AGGraphInvalidateValue();
    v1 = (id)AGGraphGetAttributeGraph();
    v2 = AGGraphRef.viewGraph()();

    swift_beginAccess();
    v3 = MEMORY[0x18D760234](v2 + 200);
    v4 = *(_QWORD *)(v2 + 208);
    result = swift_release();
    if (v3)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 16))(ObjectType);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t a1, __int128 *a2)
{
  const void *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *i;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  unint64_t v45;
  CGPoint v46;
  double v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  _OWORD v66[21];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[43];

  v4 = *a2;
  v58 = *((double *)a2 + 3);
  v59 = *((double *)a2 + 2);
  v5 = a2[8];
  v6 = a2[9];
  v7 = a2[6];
  v66[7] = a2[7];
  v66[8] = v5;
  v66[9] = v6;
  *(_QWORD *)&v66[10] = *((_QWORD *)a2 + 20);
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[2];
  v66[3] = a2[3];
  v66[4] = v8;
  v66[5] = v9;
  v66[6] = v7;
  v66[0] = v4;
  v66[2] = v10;
  v12 = *((_QWORD *)a2 + 21);
  v11 = *((_QWORD *)a2 + 22);
  v14 = *((_QWORD *)a2 + 23);
  v13 = *((_QWORD *)a2 + 24);
  v16 = *((_QWORD *)a2 + 25);
  v15 = *((_QWORD *)a2 + 26);
  v17 = *((_QWORD *)a2 + 27);
  v18 = *((_QWORD *)a2 + 28);
  v62 = *((_QWORD *)a2 + 30);
  v64 = *((_QWORD *)a2 + 29);
  v60 = *((_QWORD *)a2 + 31);
  v54 = *((_QWORD *)a2 + 33);
  v56 = *((_QWORD *)a2 + 32);
  v53 = *((_QWORD *)a2 + 34);
  *(_OWORD *)((char *)&v66[17] + 8) = *(__int128 *)((char *)a2 + 280);
  BYTE8(v66[18]) = *((_BYTE *)a2 + 296);
  memcpy(v75, v2, 0x149uLL);
  *(double *)&v66[1] = v59;
  *((double *)&v66[1] + 1) = v58;
  *(_QWORD *)&v50 = v12;
  *((_QWORD *)&v50 + 1) = v11;
  *((_QWORD *)&v66[10] + 1) = v12;
  *(_QWORD *)&v66[11] = v11;
  *((_QWORD *)&v66[11] + 1) = v14;
  *(_QWORD *)&v66[12] = v13;
  *(_QWORD *)&v51 = v16;
  *((_QWORD *)&v51 + 1) = v15;
  *((_QWORD *)&v66[12] + 1) = v16;
  *(_QWORD *)&v66[13] = v15;
  *(_QWORD *)&v52 = v17;
  *((_QWORD *)&v52 + 1) = v18;
  *((_QWORD *)&v66[13] + 1) = v17;
  *(_QWORD *)&v66[14] = v18;
  *((_QWORD *)&v66[14] + 1) = v64;
  *(_QWORD *)&v66[15] = v62;
  *((_QWORD *)&v66[15] + 1) = v60;
  *(_QWORD *)&v66[16] = v56;
  *((_QWORD *)&v66[16] + 1) = v54;
  *(_QWORD *)&v66[17] = v53;
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)v75, (BOOL *)v66);
  result = AGGraphSetUpdate();
  if ((v66[0] & 1) != 0)
    return result;
  v21 = v75[16];
  MEMORY[0x1E0C80A78](result, v20);
  swift_bridgeObjectRetain();
  specialized Sequence.min(by:)((uint64_t (*)(uint64_t *, uint64_t *))partial apply for closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:), v21, v66);
  result = swift_bridgeObjectRelease();
  v22 = *((_QWORD *)&v66[0] + 1);
  if (!*((_QWORD *)&v66[0] + 1))
    return result;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v24)
    return swift_release();
  v48 = *(_QWORD *)&v66[0];
  outlined retain of [Text.Modifier](a1);
  v49 = a1;
  outlined retain of [Text.Modifier](a1);
  for (i = (char *)(v23 + 48); ; i += 72)
  {
    v26 = *((_QWORD *)i - 2);
    v27 = *((_QWORD *)i - 1);
    v28 = *i;
    v29 = *((_QWORD *)i + 1);
    v30 = i[16];
    v32 = *((_QWORD *)i + 3);
    v31 = *((_QWORD *)i + 4);
    v33 = *((_QWORD *)i + 5);
    v34 = *((_QWORD *)i + 6);
    if (*(_BYTE *)(v22 + 165) == 1 || *(_BYTE *)(v22 + 166) == 1)
      goto LABEL_6;
    v35 = *(_QWORD *)(v22 + 144);
    *(_QWORD *)&v66[0] = *(_QWORD *)(v22 + 136);
    *((_QWORD *)&v66[0] + 1) = v35;
    v36 = *(_QWORD *)(v26 + 144);
    v67 = *(_QWORD *)(v26 + 136);
    v68 = v36;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v24)
    {
      outlined release of _IncrementalLayout_Placements(v49);
      outlined release of _IncrementalLayout_Placements(v49);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(v49);
  outlined release of _IncrementalLayout_Placements(v49);
  v37 = *(_QWORD *)(v26 + 144);
  *(_QWORD *)&v66[0] = *(_QWORD *)(v26 + 136);
  *((_QWORD *)&v66[0] + 1) = v37;
  v38 = *(_QWORD *)(v22 + 144);
  v67 = *(_QWORD *)(v22 + 136);
  v68 = v38;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v66[0] = v50;
  *(_QWORD *)&v66[1] = v14;
  *((_QWORD *)&v66[1] + 1) = v13;
  v66[2] = v51;
  v66[3] = v52;
  *(_QWORD *)&v66[4] = v64;
  *((_QWORD *)&v66[4] + 1) = v62;
  *(_QWORD *)&v66[5] = v60;
  *((_QWORD *)&v66[5] + 1) = v56;
  *(_QWORD *)&v66[6] = v54;
  *((_QWORD *)&v66[6] + 1) = v53;
  result = ScrollGeometry.visibleRect.getter();
  if ((v48 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v63 = v40;
  v65 = v39;
  if (v48 >= *(_QWORD *)(v75[17] + 16))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v41 = v75[17] + 32 * v48;
  v61 = *(double *)(v41 + 40);
  v42 = *(double *)&v75[30];
  v55 = *(double *)&v75[31];
  v57 = *(double *)&v75[21];
  v43 = *(double *)(v41 + 32) - *(double *)&v75[20];
  v67 = v27;
  LOBYTE(v68) = v28;
  v69 = v29;
  v70 = v30;
  v71 = v32;
  v72 = v31;
  v73 = v33;
  v74 = v34;
  *(_QWORD *)&v66[0] = v26;
  *((_QWORD *)&v66[0] + 1) = v27;
  LOBYTE(v66[1]) = v28;
  *((_QWORD *)&v66[1] + 1) = v29;
  LOBYTE(v66[2]) = v30;
  *((_QWORD *)&v66[2] + 1) = v32;
  *(_QWORD *)&v66[3] = v31;
  *((_QWORD *)&v66[3] + 1) = v33;
  *(_QWORD *)&v66[4] = v34;
  swift_retain();
  v44 = _IncrementalLayout_PlacedChild.size.getter();
  v46 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v45, *(unint64_t *)&v44));
  *(_QWORD *)&v66[0] = v26;
  *((_QWORD *)&v66[0] + 1) = v27;
  LOBYTE(v66[1]) = v28;
  *((_QWORD *)&v66[1] + 1) = v29;
  LOBYTE(v66[2]) = v30;
  *((_QWORD *)&v66[2] + 1) = v32;
  *(_QWORD *)&v66[3] = v31;
  *((_QWORD *)&v66[3] + 1) = v33;
  *(_QWORD *)&v66[4] = v34;
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  if ((Axis.Set.contains(_:)() & 1) != 0)
    v47 = v46.x - v65 - v43 - (v59 - v42);
  else
    v47 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v47 != 0.0 || v46.y - v63 - (v61 - v57) - (v58 - v55) != 0.0)
    {
LABEL_24:
      memcpy(v66, v75, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v75);
      IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v75);
    }
  }
  else if (v47 != 0.0)
  {
    goto LABEL_24;
  }
  swift_release();
  return swift_release();
}

uint64_t IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t Value;
  uint64_t v29;
  unint64_t v30;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[3];

  v4 = *((double *)a1 + 4);
  v5 = *((double *)a1 + 5);
  v6 = *(_QWORD *)(v3 + 48);
  v7 = *(_DWORD *)(v3 + 56);
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(_DWORD *)(v3 + 72);
  v10 = *(_DWORD *)(v3 + 76);
  v12 = *(_DWORD *)(v3 + 80);
  v11 = *(_DWORD *)(v3 + 84);
  v13 = *(double *)(v3 + 88);
  *(_QWORD *)&v36 = v6;
  DWORD2(v36) = v7;
  *(_QWORD *)&v37 = v8;
  *((_QWORD *)&v37 + 1) = __PAIR64__(v10, v9);
  v38 = __PAIR64__(v11, v12);
  v39 = v13;
  LOBYTE(v34) = 1;
  if ((_GraphInputs.hasValueScrollPosition(kind:)() & 1) != 0)
  {
    *(_QWORD *)&v36 = v6;
    DWORD2(v36) = v7;
    *(_QWORD *)&v37 = v8;
    *((_QWORD *)&v37 + 1) = __PAIR64__(v10, v9);
    v38 = __PAIR64__(v11, v12);
    v39 = v13;
    if (_GraphInputs.scrollTargetRole.getter() != *MEMORY[0x1E0CFED28])
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E0CE33A8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v14 = *(unsigned __int8 *)AGGraphGetValue();
      if (v14 != 2 && (v14 & 1) == 0 && v4 != 0.0 && v5 != 0.0)
      {
        v15 = *(_QWORD *)(v3 + 128);
        if (*(_QWORD *)(v15 + 16))
        {
          v16 = *(_QWORD *)(v15 + 32);
          v17 = *(_QWORD *)(v16 + 136);
          v18 = *(_QWORD *)(v16 + 144);
          swift_bridgeObjectRetain();
LABEL_9:
          v19 = a1[1];
          v36 = *a1;
          v37 = v19;
          v38 = *(_QWORD *)&v4;
          v39 = v5;
          *(_OWORD *)((char *)v54 + 9) = *(__int128 *)((char *)a1 + 281);
          v20 = a1[16];
          v52 = a1[15];
          v53 = v20;
          v54[0] = a1[17];
          v21 = a1[12];
          v48 = a1[11];
          v49 = v21;
          v22 = a1[14];
          v50 = a1[13];
          v51 = v22;
          v23 = a1[8];
          v44 = a1[7];
          v45 = v23;
          v24 = a1[10];
          v46 = a1[9];
          v47 = v24;
          v25 = a1[4];
          v40 = a1[3];
          v41 = v25;
          v26 = a1[6];
          v42 = a1[5];
          v43 = v26;
          v34 = v17;
          v35 = v18;
          IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)&v36, (uint64_t)&v34, a2, a3);
          return swift_bridgeObjectRelease();
        }
        type metadata accessor for IncrementalLayoutViewCache();
        AGGraphGetValue();
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        Value = AGGraphGetValue();
        outlined init with copy of TableColumnList(Value, (uint64_t)&v36);
        v29 = *((_QWORD *)&v37 + 1);
        v30 = v38;
        __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
        if ((*(uint64_t (**)(uint64_t, unint64_t))(v30 + 32))(v29, v30))
        {
          if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
          {
            dispatch thunk of _ViewList_ID_Views.subscript.getter();
            swift_release();
            v17 = v34;
            v18 = v35;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
            goto LABEL_9;
          }
          swift_release();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
    }
  }
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)&v36);
  return outlined init with take of Image.Resolved?((uint64_t)&v36, a3, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

uint64_t IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[8];
  _OWORD v38[11];
  _OWORD v39[5];
  _OWORD v40[5];
  _OWORD v41[21];
  _BYTE v42[297];

  v5 = v4;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v42, v13, sizeof(v42));
  v14 = *(_DWORD *)(a2 + 4);
  LODWORD(v36) = *(_DWORD *)a2;
  HIDWORD(v36) = v14;
  v15 = *(_QWORD *)(a2 + 8);
  v41[0] = *(_OWORD *)v5;
  v16 = *((_DWORD *)v5 + 5);
  LODWORD(v41[1]) = *((_DWORD *)v5 + 4);
  memcpy((char *)&v41[1] + 8, v5 + 24, 0x131uLL);
  DWORD1(v41[1]) = v16;
  IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  if (LOBYTE(v41[0]) != 2)
  {
    v35 = v15;
    type metadata accessor for IncrementalLayoutViewCache();
    if (*(_DWORD *)(*(_QWORD *)AGGraphGetValue() + 148) != *MEMORY[0x1E0CFED28])
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v18 = v17;
      Value = AGGraphGetValue();
      outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)v37);
      MEMORY[0x18D75B9C8](v39, v18);
      outlined destroy of Binding<ScrollPosition>((uint64_t)v37);
      v40[2] = v39[2];
      v40[3] = v39[3];
      v40[4] = v39[4];
      v40[0] = v39[0];
      v40[1] = v39[1];
      AGGraphClearUpdate();
      v20 = *(_QWORD *)(a3 + 24);
      closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v5, (BOOL *)v41);
      AGGraphSetUpdate();
      if ((v41[0] & 1) == 0)
      {
        v34 = a4;
        v21 = *(_OWORD *)(v5 + 248);
        v22 = *(_OWORD *)(v5 + 200);
        v37[2] = *(_OWORD *)(v5 + 184);
        v37[3] = v22;
        v23 = *(_OWORD *)(v5 + 232);
        v37[4] = *(_OWORD *)(v5 + 216);
        v37[5] = v23;
        v24 = *(_OWORD *)(v5 + 168);
        v37[0] = *(_OWORD *)(v5 + 152);
        v37[1] = v24;
        v25 = *(_OWORD *)(v5 + 264);
        v26 = *(_OWORD *)(v5 + 280);
        v37[6] = v21;
        v37[7] = v25;
        v38[0] = v26;
        *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v5 + 289);
        memcpy(v41, v42, 0x129uLL);
        if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v41) & 1) != 0)
        {
          memcpy(v41, v42, 0x129uLL);
          *(_QWORD *)&v39[0] = v36;
          *((_QWORD *)&v39[0] + 1) = v35;
          IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)v41, (uint64_t)v40);
          outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v41, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
          outlined init with take of Image.Resolved?((uint64_t)v41, (uint64_t)v37, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
          v27 = (uint64_t (*)(uint64_t))implicit closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:);
          v28 = v34;
LABEL_14:
          logAndReturnContext #1 <A>(_:_:) in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v37, v27, v5, v28);
          result = outlined destroy of ScrollPosition((uint64_t)v40);
          goto LABEL_11;
        }
        memcpy(v41, v42, 0x129uLL);
        v29 = AGGraphGetValue();
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v29, v9);
        v30 = *(_QWORD *)AGGraphGetValue();
        swift_retain();
        v31 = PositionState.dispatchChildrenChange<A>(context:layout:cache:)((unsigned int *)v41, (uint64_t)v12, v30, v9, v20);
        swift_release();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        a4 = v34;
        if ((v31 & 1) != 0)
        {
          memcpy(v41, v42, 0x129uLL);
          *(_QWORD *)&v39[0] = v36;
          *((_QWORD *)&v39[0] + 1) = v35;
          IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)v41, (uint64_t)v40);
          outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v41, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
          outlined init with take of Image.Resolved?((uint64_t)v41, (uint64_t)v37, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
          v27 = (uint64_t (*)(uint64_t))implicit closure #2 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:);
LABEL_13:
          v28 = a4;
          goto LABEL_14;
        }
      }
      if ((v5[152] & 1) == 0)
      {
        memcpy(v41, v42, 0x129uLL);
        *(_QWORD *)&v39[0] = v36;
        *((_QWORD *)&v39[0] + 1) = v35;
        IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)v41, (uint64_t)v40);
        outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v41, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
        outlined init with take of Image.Resolved?((uint64_t)v41, (uint64_t)v37, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
        v27 = (uint64_t (*)(uint64_t))implicit closure #3 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:);
        goto LABEL_13;
      }
      outlined destroy of ScrollPosition((uint64_t)v40);
    }
  }
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v41);
  result = outlined init with take of Image.Resolved?((uint64_t)v41, a4, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_11:
  v5[152] = 1;
  return result;
}

unsigned __int8 *closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  unsigned __int8 *result;
  int v4;
  unsigned __int8 v5;

  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E0CFED28]
    || (result = (unsigned __int8 *)AGGraphGetValue(), v4 = *result, v4 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    result = (unsigned __int8 *)ScrollPhaseState.init(phase:velocity:)();
    v4 = v5;
  }
  *a2 = v4 != 0;
  return result;
}

uint64_t logAndReturnContext #1 <A>(_:_:) in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, const void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v11[336];
  _BYTE v12[304];
  _BYTE v13[304];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v12, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v12, (uint64_t)v13, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v13) != 1)
  {
    memcpy(v11, a3, 0x149uLL);
    v7 = outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v11);
    v8 = a2(v7);
    specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v8, v9);
    swift_bridgeObjectRelease();
    outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v11);
  }
  return outlined init with take of Image.Resolved?((uint64_t)v12, a4, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

uint64_t PositionState.dispatchContainerSizeChange(context:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  double v3;
  double v4;
  double v5;
  double v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _BOOL4 v13;
  CGRect v14;

  v2 = *(_DWORD *)(a1 + 12);
  v4 = *(double *)(v1 + 72);
  v3 = *(double *)(v1 + 80);
  v5 = 0.0;
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = 0.0;
  v14.size.height = 0.0;
  if (CGRectEqualToRect(*(CGRect *)(v1 + 40), v14))
    return 0;
  v7 = 0.0;
  if (v2 != *MEMORY[0x1E0CFED28])
  {
    Value = AGGraphGetValue();
    MEMORY[0x18D75BE3C](Value, v9, v10, v11);
    v5 = v12;
  }
  v13 = vabdd_f64(v4, v7) >= 0.1;
  return vabdd_f64(v3, v5) >= 0.1 || v13;
}

void IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)(uint64_t a1, uint64_t a2)
{
  _QWORD v2[7];

  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_18734C5BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  double v30;
  char v31;
  char v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  CGSize v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  CGSize v128;
  char v129;
  _QWORD v130[42];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  unsigned __int8 v135;
  _QWORD v136[72];

  v14 = *(_OWORD *)(v6 - 208);
  v131 = *(_OWORD *)(v6 - 224);
  v132 = v14;
  v133 = *(_OWORD *)(v6 - 192);
  *(_OWORD *)(v4 + 41) = *(_OWORD *)(v0 + 41);
  v136[0] = v9;
  v136[1] = v1;
  v15 = _ViewList_ID.allExplicitIDs.getter();
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ScrollPosition.ViewID((uint64_t)&v131);
LABEL_13:
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v136);
    v43 = v3;
    return outlined init with take of Image.Resolved?((uint64_t)v136, v43, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  }
  v45 = v2;
  v46 = v3;
  v17 = 0;
  v18 = 0.0;
  v19 = 0;
  v20 = 1;
  v21 = v15;
  do
  {
    v130[0] = *(_QWORD *)(v21 + 8 * v19 + 32);
    swift_retain();
    AnyHashable2.anyValue.getter();
    __swift_project_boxed_opaque_existential_1(v136, v136[3]);
    v32 = ScrollPosition.matches<A>(id:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
    if ((v32 & 1) != 0)
    {
      v22 = *((_QWORD *)&v132 + 1);
      v74 = v133;
      v23 = __swift_project_boxed_opaque_existential_1(&v131, *((uint64_t *)&v132 + 1));
      memcpy(v136, (const void *)v5, 0x149uLL);
      memcpy(v130, (const void *)v5, 0x149uLL);
      *(_QWORD *)&v93 = __PAIR64__(v66, v67);
      *((_QWORD *)&v93 + 1) = __PAIR64__(v64, v65);
      v94 = v48;
      v95 = v47;
      v96 = v72;
      v97 = v71;
      v98 = v70;
      v99 = v62;
      v100 = v60;
      v101 = v59;
      v102 = v58;
      v103 = v57;
      v104 = v69;
      v105 = v68;
      v106 = v56;
      v107 = v55;
      v108 = v54;
      v109 = v53;
      v110 = v52;
      v111 = v51;
      v112 = v50;
      v113 = v49;
      v114 = v88;
      v115 = v10;
      v116 = v86;
      v117 = v7;
      v118 = v84;
      v119 = v82;
      v120 = v13;
      v121 = v80;
      v122 = v11;
      v123 = v78;
      v124 = v90;
      v125 = v76;
      v126 = v12;
      v127 = v8;
      v128 = v63;
      v129 = v61;
      v24 = *((_QWORD *)&v133 + 1);
      v25 = v134;
      v26 = v16;
      v27 = v21;
      v28 = v135;
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v136);
      v29 = v28;
      v21 = v27;
      v16 = v26;
      v17 = IncrementalChildPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(&v93, (uint64_t)v23, v24, v25, v29, v73, v22, v74);
      v18 = v30;
      LOBYTE(v24) = v31;
      swift_release();
      v20 = v24 & 1;
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v136);
    }
    else
    {
      swift_release();
    }
    ++v19;
  }
  while (v16 != v19);
  swift_bridgeObjectRelease();
  outlined destroy of ScrollPosition.ViewID((uint64_t)&v131);
  v3 = v46;
  if ((v20 & 1) != 0 || fabs(*(double *)&v17) < 0.01 && fabs(v18) < 0.01)
    goto LABEL_13;
  memcpy(v136, (const void *)v5, 0x149uLL);
  if ((IncrementalChildPlacements.allowsContentOffsetAdjustments.getter() & 1) == 0)
    goto LABEL_13;
  v130[7] = v60;
  v130[8] = v59;
  v130[9] = v58;
  v130[10] = v57;
  v130[11] = v69;
  v130[12] = v68;
  v130[13] = v56;
  v130[14] = v55;
  v130[15] = v54;
  v130[16] = v53;
  v130[17] = v52;
  v130[18] = v51;
  v130[19] = v50;
  v130[20] = v49;
  v136[0] = v88;
  v130[21] = v88;
  v130[22] = v10;
  v136[1] = v10;
  v136[2] = v86;
  v130[23] = v86;
  v130[24] = v7;
  v136[3] = v7;
  v136[4] = v84;
  v130[25] = v84;
  v130[26] = v82;
  v136[5] = v82;
  v136[6] = v13;
  v130[27] = v13;
  v130[28] = v80;
  v136[7] = v80;
  v136[8] = v11;
  v130[29] = v11;
  v130[30] = v78;
  v136[9] = v78;
  v136[10] = v90;
  v130[31] = v90;
  v130[32] = v76;
  v136[11] = v76;
  v136[12] = v12;
  v130[33] = v12;
  v130[34] = v8;
  v136[13] = v8;
  v130[0] = __PAIR64__(v66, v67);
  v130[1] = __PAIR64__(v64, v65);
  v130[2] = v48;
  v130[3] = v47;
  v130[4] = v72;
  v130[5] = v71;
  v130[6] = __PAIR64__(v62, v70);
  *(CGSize *)&v130[35] = v63;
  LOBYTE(v130[37]) = v61;
  ScrollGeometry.visibleRect.getter();
  v75 = v33;
  v77 = v34;
  ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v18, v17), v63);
  ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v18, v17), v63);
  v91 = v130[22];
  v92 = v130[21];
  v35 = v130[23];
  v36 = v130[24];
  v37 = v130[25];
  v38 = v130[26];
  v39 = v130[27];
  v40 = v130[28];
  v87 = v130[30];
  v89 = v130[29];
  v83 = v130[32];
  v85 = v130[31];
  v79 = v130[34];
  v81 = v130[33];
  v136[0] = v130[21];
  v136[1] = v130[22];
  v136[2] = v130[23];
  v136[3] = v130[24];
  v136[4] = v130[25];
  v136[5] = v130[26];
  v136[6] = v130[27];
  v136[7] = v130[28];
  v136[8] = v130[29];
  v136[9] = v130[30];
  v136[10] = v130[31];
  v136[11] = v130[32];
  v136[12] = v130[33];
  v136[13] = v130[34];
  ScrollGeometry.visibleRect.getter();
  *(double *)(v5 + 288) = v41 - v75;
  *(double *)(v5 + 296) = v42 - v77;
  *(_BYTE *)(v5 + 304) = 0;
  v136[0] = __PAIR64__(v66, v67);
  v136[1] = __PAIR64__(v64, v65);
  v136[2] = v48;
  v136[3] = v47;
  v136[4] = v72;
  v136[5] = v71;
  LODWORD(v136[6]) = v70;
  *(_OWORD *)&v136[7] = *(_OWORD *)&v130[7];
  *(_OWORD *)&v136[9] = *(_OWORD *)&v130[9];
  *(_OWORD *)&v136[11] = *(_OWORD *)&v130[11];
  *(_OWORD *)&v136[13] = *(_OWORD *)&v130[13];
  *(_OWORD *)&v136[15] = *(_OWORD *)&v130[15];
  *(_OWORD *)&v136[17] = *(_OWORD *)&v130[17];
  *(_OWORD *)&v136[19] = *(_OWORD *)&v130[19];
  v136[21] = v92;
  v136[22] = v91;
  v136[23] = v35;
  v136[24] = v36;
  v136[25] = v37;
  v136[26] = v38;
  v136[27] = v39;
  v136[28] = v40;
  v136[29] = v89;
  v136[30] = v87;
  v136[31] = v85;
  v136[32] = v83;
  v136[33] = v81;
  v136[34] = v79;
  *(CGSize *)&v136[35] = v63;
  LOBYTE(v136[37]) = v45;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v136);
  v43 = v46;
  return outlined init with take of Image.Resolved?((uint64_t)v136, v43, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

unint64_t implicit closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)()
{
  return 0xD000000000000014;
}

uint64_t PositionState.dispatchChildrenChange<A>(context:layout:cache:)(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t result;
  char v18;
  void (*v19)(uint64_t, uint64_t);
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE v43[281];
  _BYTE v44[16];
  _QWORD v45[13];
  _BYTE v46[281];

  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v31 - v12;
  v14 = *a1;
  v15 = a1[1];
  *(_QWORD *)&v16 = *((_QWORD *)a1 + 1);
  v35 = v16;
  memcpy(v46, a1 + 4, sizeof(v46));
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v18 & 1) != 0)
  {
    v32 = v10;
    result = *(_QWORD *)(v34 + 128);
    if (result)
    {
      v31 = *(_QWORD *)(v34 + 120);
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 280);
      v34 = result;
      swift_bridgeObjectRetain();
      v19(AssociatedTypeWitness, AssociatedTypeWitness);
      v41 = __PAIR64__(v15, v14);
      LODWORD(v42) = v35;
      v20 = SizeAndSpacingContext.context.getter();
      v21 = v13;
      IncrementalLayoutViewCache.children(context:)(v20, (uint64_t)v44);
      v41 = __PAIR64__(v15, v14);
      v42 = v35;
      memcpy(v43, v46, sizeof(v43));
      v22 = (*(uint64_t (**)(_BYTE *, unint64_t *, char *, uint64_t, uint64_t))(a5 + 88))(v44, &v41, v13, a4, a5);
      if ((v23 & 1) != 0)
      {
        v26 = 0;
      }
      else
      {
        v38 = v22;
        v39 = 0;
        v40 = 0;
        MEMORY[0x1E0C80A78](v22, v23);
        *(&v31 - 2) = (uint64_t)&v39;
        v37 = v45[11];
        v24 = outlined init with copy of _ViewList_Node((uint64_t)v45, (uint64_t)&v41);
        v36 = 2;
        MEMORY[0x1E0C80A78](v24, v25);
        *(&v31 - 4) = (uint64_t)v44;
        *(&v31 - 3) = (uint64_t)partial apply for closure #1 in _IncrementalLayout_Children.id(at:style:);
        *(&v31 - 2) = (uint64_t)(&v31 - 4);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v41);
        swift_bridgeObjectRelease();
        v26 = v39;
        v27 = v40;
        if (!v40)
        {
          (*(void (**)(char *, uint64_t))(v32 + 8))(v13, AssociatedTypeWitness);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of _ViewList_ID??(v26, 0);
          v30 = v26;
          v29 = 0;
          goto LABEL_13;
        }
        if (v40 != 1)
        {
          v41 = v39;
          v42 = v40;
          v39 = v31;
          v40 = v34;
          outlined copy of _ViewList_ID??(v26, v27);
          outlined copy of _ViewList_ID??(v26, v27);
          swift_bridgeObjectRetain();
          v28 = static _ViewList_ID.== infix(_:_:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v32 + 8))(v21, AssociatedTypeWitness);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of _ViewList_ID??(v26, v27);
          outlined consume of _ViewList_ID??(v26, v27);
          if ((v28 & 1) == 0)
            goto LABEL_14;
LABEL_10:
          outlined destroy of _IncrementalLayout_Children((uint64_t)v44);
          return 0;
        }
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, AssociatedTypeWitness);
      outlined consume of _ViewList_ID??(v26, 1);
      v29 = v34;
      if (v34 == 1)
        goto LABEL_10;
      v30 = v31;
LABEL_13:
      outlined consume of _ViewList_ID??(v30, v29);
LABEL_14:
      outlined destroy of _IncrementalLayout_Children((uint64_t)v44);
      return 1;
    }
  }
  return result;
}

uint64_t implicit closure #2 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)()
{
  return 0x2077656E20726F66;
}

unint64_t implicit closure #3 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)()
{
  return 0xD000000000000011;
}

uint64_t IncrementalChildPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t result;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t Value;
  char *v45;
  CGFloat v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  CGFloat v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  CGFloat v73;
  CGFloat v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  CGFloat v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t AssociatedTypeWitness;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CGFloat v121;
  CGFloat v122;
  CGFloat v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  _BYTE v128[120];
  _QWORD v129[5];
  _QWORD v130[4];
  char v131;
  __int128 v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __C::CGRect v145;
  __C::CGRect v146;

  v83 = a5;
  v77 = a3;
  v78 = a4;
  v90 = *(double *)(*(_QWORD *)(a6 + 16) - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v89 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = *(_QWORD *)(v14 + 24);
  v92 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v93 = (char *)&v72 - v18;
  v19 = a1[9];
  v142 = a1[8];
  v143 = v19;
  v144 = *((_QWORD *)a1 + 20);
  v20 = a1[5];
  v138 = a1[4];
  v139 = v20;
  v21 = a1[7];
  v140 = a1[6];
  v141 = v21;
  v22 = a1[1];
  v134 = *a1;
  v135 = v22;
  v23 = a1[3];
  v136 = a1[2];
  v137 = v23;
  v24 = *((_QWORD *)a1 + 21);
  v25 = *((_QWORD *)a1 + 22);
  v26 = *((_QWORD *)a1 + 23);
  v88 = *((_QWORD *)a1 + 24);
  v27 = *((_QWORD *)a1 + 25);
  v28 = *((_QWORD *)a1 + 26);
  v29 = *((_QWORD *)a1 + 27);
  v30 = *((_QWORD *)a1 + 28);
  v32 = *((_QWORD *)a1 + 29);
  v31 = *((double *)a1 + 30);
  v99 = *((double *)a1 + 31);
  v100 = v31;
  v33 = *((double *)a1 + 32);
  v97 = *((_QWORD *)a1 + 33);
  v98 = v33;
  *(_QWORD *)&v23 = *((_QWORD *)a1 + 34);
  v95 = v27;
  v96 = v23;
  v132 = *(__int128 *)((char *)a1 + 280);
  v133 = *((_BYTE *)a1 + 296);
  v86 = *(_QWORD *)(v8 + 128);
  v80 = *(_QWORD *)(v8 + 136);
  v34 = *(double *)(v8 + 160);
  v79 = *(_QWORD *)(v8 + 168);
  *(_QWORD *)&v23 = *(_QWORD *)(v8 + 264);
  v81 = *(double *)(v8 + 256);
  v82 = *(double *)&v23;
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v36 = result;
  v87 = v16;
  AGGraphGetValue();
  swift_retain();
  IncrementalLayoutViewCache.children(context:)(v36, (uint64_t)v128);
  swift_release();
  *(_QWORD *)&v101 = 2;
  v84 = a2;
  v85 = a8;
  v37 = _IncrementalLayout_Children.firstIndex<A>(id:style:)();
  if ((v38 & 1) != 0)
  {
LABEL_5:
    outlined destroy of _IncrementalLayout_Children((uint64_t)v128);
    return 0;
  }
  v39 = v37;
  v75 = v34;
  v40 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)AGGraphGetValue() + 280);
  swift_retain();
  v42 = v93;
  v41 = AssociatedTypeWitness;
  v40(AssociatedTypeWitness, AssociatedTypeWitness);
  swift_release();
  v43 = v92;
  Value = AGGraphGetValue();
  v45 = v89;
  v46 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v90 + 16))(v89, Value, v43);
  v109 = v142;
  v110 = v143;
  v111 = v144;
  v105 = v138;
  v106 = v139;
  v107 = v140;
  v108 = v141;
  v101 = v134;
  v102 = v135;
  v103 = v136;
  v104 = v137;
  v112 = v24;
  v113 = v25;
  v47 = v88;
  v114 = v26;
  v115 = v88;
  v48 = v28;
  v49 = v95;
  v116 = v95;
  v117 = v48;
  v76 = v48;
  v118 = v29;
  v119 = v30;
  v120 = v32;
  v121 = v100;
  v122 = v99;
  v123 = v98;
  v124 = v97;
  v125 = v96;
  v126 = v132;
  v127 = v133;
  v50 = v91;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, __int128 *, char *, uint64_t, uint64_t))(v91 + 104))(v129, v39, v128, &v101, v42, v43, v91);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v46 + 8))(v45, v43);
  outlined init with take of CGRect?((uint64_t)v129, (uint64_t)v130, (unint64_t *)&lazy cache variable for type metadata for CGRect?, type metadata accessor for CGRect);
  if ((v131 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v42, v41);
    goto LABEL_5;
  }
  v89 = (char *)v130[0];
  v90 = *(double *)&v130[1];
  v73 = *(double *)&v130[3];
  v74 = *(double *)&v130[2];
  *(_QWORD *)&v101 = v24;
  *((_QWORD *)&v101 + 1) = v25;
  *(_QWORD *)&v102 = v26;
  *((_QWORD *)&v102 + 1) = v47;
  *(_QWORD *)&v103 = v49;
  *((_QWORD *)&v103 + 1) = v76;
  *(_QWORD *)&v104 = v29;
  *((_QWORD *)&v104 + 1) = v30;
  *(_QWORD *)&v105 = v32;
  *((CGFloat *)&v105 + 1) = v100;
  *(CGFloat *)&v106 = v99;
  *((CGFloat *)&v106 + 1) = v98;
  *(_QWORD *)&v107 = v97;
  *((_QWORD *)&v107 + 1) = v96;
  v51 = ScrollGeometry.visibleRect.getter();
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v59 = v58;
  MEMORY[0x1E0C80A78](v51, v60);
  *(&v72 - 6) = v43;
  *(&v72 - 5) = a7;
  v61 = v85;
  *(&v72 - 4) = v50;
  *(&v72 - 3) = v61;
  *(&v72 - 2) = v84;
  v62 = v86;
  swift_bridgeObjectRetain();
  v63 = specialized Collection.firstIndex(where:)((uint64_t (*)(_QWORD *))partial apply for closure #1 in IncrementalChildPlacements.makeViewIDTranslation<A>(_:viewID:anchor:), (uint64_t)(&v72 - 8), v62);
  v65 = v64;
  result = swift_bridgeObjectRelease();
  v66 = v87;
  if ((v65 & 1) != 0)
  {
    v98 = v59;
    v99 = v57;
    v100 = v53;
    if ((v83 & 1) != 0)
      static UnitPoint.topLeading.getter();
    *(_QWORD *)&v145.origin.x = v89;
    v145.origin.y = v90;
    v145.size.height = v73;
    v145.size.width = v74;
    UnitPoint.in(_:)(v145);
    EdgeInsets.negatedInsets.getter();
    CGPoint.offset(by:)();
    v71 = v70;
    v146.size.width = v99;
    v146.origin.x = v100;
    v146.origin.y = v55;
    v146.size.height = v98;
    v69 = v71 - UnitPoint.in(_:)(v146).x;
    goto LABEL_19;
  }
  if ((v63 & 0x8000000000000000) != 0)
    goto LABEL_21;
  if (v63 >= *(_QWORD *)(v80 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v81 < 0.0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v82 >= 0.0)
  {
    v67 = v80 + 32 * v63;
    v68 = *(double *)(v67 + 32);
    if (v68 < 0.0)
      v68 = 0.0;
    if (v81 < v68)
      v68 = v81;
    v69 = *(double *)&v89 - v53 - (v68 - v75);
LABEL_19:
    (*(void (**)(char *, uint64_t))(v66 + 8))(v42, v41);
    outlined destroy of _IncrementalLayout_Children((uint64_t)v128);
    return *(_QWORD *)&v69;
  }
LABEL_24:
  __break(1u);
  return result;
}

unsigned __int8 *closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  unsigned __int8 *result;
  int v4;
  unsigned __int8 v5;

  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E0CFED28]
    || (result = (unsigned __int8 *)AGGraphGetValue(), v4 = *result, v4 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    result = (unsigned __int8 *)ScrollPhaseState.init(phase:velocity:)();
    v4 = v5;
  }
  *a2 = v4 == 4;
  return result;
}

_QWORD *closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(_QWORD *result, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;

  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  if (*(_BYTE *)(v4 + 165) == 1 || *(_BYTE *)(v4 + 166) == 1)
  {
    v8 = INFINITY;
    goto LABEL_7;
  }
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*result >= *(_QWORD *)(*(_QWORD *)(a3 + 136) + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (_QWORD *)distance(_:_:)();
  v8 = v7;
LABEL_7:
  if (*(_BYTE *)(v6 + 165) == 1 || *(_BYTE *)(v6 + 166) == 1)
  {
    v9 = INFINITY;
    return (_QWORD *)(v8 < v9);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v5 < *(_QWORD *)(*(_QWORD *)(a3 + 136) + 16))
  {
    distance(_:_:)();
    return (_QWORD *)(v8 < v9);
  }
LABEL_17:
  __break(1u);
  return result;
}

BOOL closure #1 in IncrementalChildPlacements.mainID(children:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;

  v2 = *a2;
  if (*(_BYTE *)(*(_QWORD *)a1 + 165) == 1 || *(_BYTE *)(*(_QWORD *)a1 + 166) == 1)
  {
    v3 = INFINITY;
  }
  else
  {
    swift_retain();
    v4 = _IncrementalLayout_PlacedChild.size.getter();
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v5, *(unint64_t *)&v4));
    _IncrementalLayout_PlacedChild.size.getter();
    swift_release();
    distance(_:_:)();
    v3 = v6;
  }
  if (*(_BYTE *)(v2 + 165) == 1 || *(_BYTE *)(v2 + 166) == 1)
  {
    v7 = INFINITY;
  }
  else
  {
    swift_retain();
    v8 = _IncrementalLayout_PlacedChild.size.getter();
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v9, *(unint64_t *)&v8));
    _IncrementalLayout_PlacedChild.size.getter();
    swift_release();
    distance(_:_:)();
  }
  return v3 < v7;
}

uint64_t closure #2 in IncrementalChildPlacements.mainID(children:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 144);
  *a2 = *(_QWORD *)(v2 + 136);
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

void PositionState.update(context:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *Value;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v21 = *(_OWORD *)(a1 + 88);
  ScrollGeometry.visibleRect.getter();
  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 48) = v8;
  *(_QWORD *)(v1 + 56) = v9;
  *(_QWORD *)(v1 + 64) = v10;
  v11 = 0;
  v12 = 0.0;
  if (v2 != *MEMORY[0x1E0CFED28])
  {
    Value = (_QWORD *)AGGraphGetValue();
    v12 = MEMORY[0x18D75BE3C](Value, v14, v15, v16, v17, v18, v19, v20, *Value, Value[1], Value[2], Value[3], v21, *((_QWORD *)&v21 + 1));
  }
  *(double *)(v1 + 72) = v12;
  *(_QWORD *)(v1 + 80) = v11;
  *(_QWORD *)(v1 + 88) = v3;
  *(_QWORD *)(v1 + 96) = v4;
  *(_QWORD *)(v1 + 104) = v5;
  *(_QWORD *)(v1 + 112) = v6;
}

uint64_t commitSection #1 <A>(_:) in Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(uint64_t result, unint64_t a2, uint64_t **a3, __int128 *a4, int a5)
{
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  double *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _OWORD *v17;
  char v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void (*v37)(__int128 *, _QWORD);
  double *v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void (*v48)(__int128 *, _QWORD);
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  _OWORD *v54;
  char v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  double v70;
  double v71;
  double v72;
  void (*v73)(__int128 *, _QWORD);
  double *v74;
  double v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  double v79;
  double v80;
  double v81;
  double v82;
  void (*v83)(__int128 *, _QWORD);
  uint64_t v84;
  uint64_t *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD *v96;
  unsigned __int8 v97;
  _OWORD *v98;
  char v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[16];
  _BYTE v103[16];
  unint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  v12 = (double *)result;
  if (!(_BYTE)a2)
    goto LABEL_31;
  v13 = a2;
  v14 = &lazy cache variable for type metadata for Int?;
  v6 = MEMORY[0x1E0DEB418];
  outlined init with take of Image.Resolved?(result + 32, (uint64_t)v103, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
  result = outlined init with take of Image.Resolved?((uint64_t)v103, (uint64_t)&v104, (unint64_t *)&lazy cache variable for type metadata for Int?, v6);
  if ((v105 & 1) != 0)
    goto LABEL_31;
  v6 = v104;
  if ((v104 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v104 < (*a3)[2])
  {
    LODWORD(v88) = a5;
    v15 = (uint64_t)&(*a3)[9 * v104];
    v16 = *(_BYTE *)(v15 + 48);
    v17 = *(_OWORD **)(v15 + 56);
    v18 = *(_BYTE *)(v15 + 64);
    v20 = *(double *)(v15 + 72);
    v19 = *(double *)(v15 + 80);
    v21 = *(_QWORD *)(v15 + 88);
    v22 = *(_QWORD *)(v15 + 96);
    v25 = v15 + 32;
    v23 = *(_QWORD *)(v15 + 32);
    v24 = *(_OWORD **)(v25 + 8);
    v96 = v24;
    v97 = v16;
    v98 = v17;
    v99 = v18;
    *(double *)&v100 = v20;
    *((double *)&v100 + 1) = v19;
    *(_QWORD *)&v101 = v21;
    *((_QWORD *)&v101 + 1) = v22;
    *(_QWORD *)&v89 = v23;
    *((_QWORD *)&v89 + 1) = v24;
    LOBYTE(v90) = v16;
    *((_QWORD *)&v90 + 1) = v17;
    LOBYTE(v91) = v18;
    *((double *)&v91 + 1) = v20;
    *(double *)&v92 = v19;
    *((_QWORD *)&v92 + 1) = v21;
    *(_QWORD *)&v93 = v22;
    v26 = _IncrementalLayout_PlacedChild.size.getter();
    v28 = v27;
    if ((Axis.Set.contains(_:)() & 1) != 0 && (~*((_QWORD *)v12 + 1) & 0x7FF0000000000000) != 0)
    {
      v29 = v12[1] - (1.0 - v20) * v26;
      v30 = a4[5];
      v93 = a4[4];
      v94 = v30;
      v95 = a4[6];
      v31 = a4[1];
      v89 = *a4;
      v90 = v31;
      v32 = a4[3];
      v91 = a4[2];
      v92 = v32;
      ScrollGeometry.bounds.getter();
      v33 = v20 * v26 + CGRectGetMinX(v108);
      *(_QWORD *)&v89 = v24;
      BYTE8(v89) = v16;
      if (v33 >= v29)
        v34 = v29;
      else
        v34 = v33;
      *(_QWORD *)&v90 = v17;
      BYTE8(v90) = v18;
      *(double *)&v91 = v20;
      *((double *)&v91 + 1) = v19;
      *(_QWORD *)&v92 = v21;
      *((_QWORD *)&v92 + 1) = v22;
      _Placement.anchorPosition.getter();
      if (v34 > v35)
        v35 = v34;
      if (v29 >= v35)
        v36 = v35;
      else
        v36 = v29;
      v37 = (void (*)(__int128 *, _QWORD))_Placement.anchorPosition.modify();
      *v38 = v36;
      v37(&v89, 0);
    }
    if ((Axis.Set.contains(_:)() & 1) != 0 && (~*((_QWORD *)v12 + 3) & 0x7FF0000000000000) != 0)
    {
      v39 = v12[3] - (1.0 - v19) * v28;
      v40 = a4[5];
      v93 = a4[4];
      v94 = v40;
      v95 = a4[6];
      v41 = a4[1];
      v89 = *a4;
      v90 = v41;
      v42 = a4[3];
      v91 = a4[2];
      v92 = v42;
      ScrollGeometry.bounds.getter();
      v43 = v19 * v28 + CGRectGetMinY(v109);
      if (v43 >= v39)
        v44 = v39;
      else
        v44 = v43;
      *(_QWORD *)&v89 = v96;
      BYTE8(v89) = v97;
      *(_QWORD *)&v90 = v98;
      BYTE8(v90) = v99;
      v91 = v100;
      v92 = v101;
      _Placement.anchorPosition.getter();
      if (v44 > v45)
        v46 = v44;
      else
        v46 = v45;
      if (v39 >= v46)
        v47 = v46;
      else
        v47 = v39;
      v48 = (void (*)(__int128 *, _QWORD))_Placement.anchorPosition.modify();
      *(double *)(v49 + 8) = v47;
      v48(&v89, 0);
    }
    v5 = v96;
    v13 = v97;
    v7 = (uint64_t)v98;
    v8 = v99;
    v86 = v101;
    v87 = v100;
    v14 = *a3;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v14;
    LOBYTE(a5) = v88;
    if ((result & 1) != 0)
      goto LABEL_29;
    goto LABEL_62;
  }
  __break(1u);
LABEL_62:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
  v14 = (uint64_t *)result;
LABEL_29:
  if (v6 >= v14[2])
  {
    __break(1u);
    goto LABEL_64;
  }
  v50 = &v14[9 * v6];
  v50[5] = (uint64_t)v5;
  *((_BYTE *)v50 + 48) = v13;
  v50[7] = v7;
  *((_BYTE *)v50 + 64) = v8;
  *(_OWORD *)(v50 + 9) = v87;
  *(_OWORD *)(v50 + 11) = v86;
  *a3 = v14;
LABEL_31:
  if ((_BYTE)a5)
  {
    v14 = &lazy cache variable for type metadata for Int?;
    v51 = MEMORY[0x1E0DEB418];
    outlined init with take of Image.Resolved?((uint64_t)(v12 + 6), (uint64_t)v102, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    result = outlined init with take of Image.Resolved?((uint64_t)v102, (uint64_t)&v106, (unint64_t *)&lazy cache variable for type metadata for Int?, v51);
    if ((v107 & 1) == 0)
    {
      v13 = v106;
      if ((v106 & 0x8000000000000000) == 0)
      {
        if (v106 < (*a3)[2])
        {
          v52 = (uint64_t)&(*a3)[9 * v106];
          v53 = *(_BYTE *)(v52 + 48);
          v54 = *(_OWORD **)(v52 + 56);
          v55 = *(_BYTE *)(v52 + 64);
          v57 = *(double *)(v52 + 72);
          v56 = *(double *)(v52 + 80);
          v58 = *(_QWORD *)(v52 + 88);
          v59 = *(_QWORD *)(v52 + 96);
          v62 = v52 + 32;
          v60 = *(_QWORD *)(v52 + 32);
          v61 = *(_OWORD **)(v62 + 8);
          v96 = v61;
          v97 = v53;
          v98 = v54;
          v99 = v55;
          *(double *)&v100 = v57;
          *((double *)&v100 + 1) = v56;
          *(_QWORD *)&v101 = v58;
          *((_QWORD *)&v101 + 1) = v59;
          *(_QWORD *)&v89 = v60;
          *((_QWORD *)&v89 + 1) = v61;
          LOBYTE(v90) = v53;
          *((_QWORD *)&v90 + 1) = v54;
          LOBYTE(v91) = v55;
          *((double *)&v91 + 1) = v57;
          *(double *)&v92 = v56;
          *((_QWORD *)&v92 + 1) = v58;
          *(_QWORD *)&v93 = v59;
          v63 = _IncrementalLayout_PlacedChild.size.getter();
          v65 = v64;
          if ((Axis.Set.contains(_:)() & 1) != 0 && (~*(_QWORD *)v12 & 0x7FF0000000000000) != 0)
          {
            v66 = v57 * v63 + *v12;
            v67 = a4[5];
            v93 = a4[4];
            v94 = v67;
            v95 = a4[6];
            v68 = a4[1];
            v89 = *a4;
            v90 = v68;
            v69 = a4[3];
            v91 = a4[2];
            v92 = v69;
            ScrollGeometry.bounds.getter();
            v70 = CGRectGetMaxX(v110) - (1.0 - v57) * v63;
            *(_QWORD *)&v89 = v61;
            BYTE8(v89) = v53;
            *(_QWORD *)&v90 = v54;
            if (v66 > v70)
              v71 = v66;
            else
              v71 = v70;
            BYTE8(v90) = v55;
            *(double *)&v91 = v57;
            *((double *)&v91 + 1) = v56;
            *(_QWORD *)&v92 = v58;
            *((_QWORD *)&v92 + 1) = v59;
            _Placement.anchorPosition.getter();
            if (v66 > v72)
              v72 = v66;
            if (v71 >= v72)
              v71 = v72;
            v73 = (void (*)(__int128 *, _QWORD))_Placement.anchorPosition.modify();
            *v74 = v71;
            v73(&v89, 0);
          }
          if ((Axis.Set.contains(_:)() & 1) != 0 && (~*((_QWORD *)v12 + 2) & 0x7FF0000000000000) != 0)
          {
            v75 = v56 * v65 + v12[2];
            v76 = a4[5];
            v93 = a4[4];
            v94 = v76;
            v95 = a4[6];
            v77 = a4[1];
            v89 = *a4;
            v90 = v77;
            v78 = a4[3];
            v91 = a4[2];
            v92 = v78;
            ScrollGeometry.bounds.getter();
            v79 = CGRectGetMaxY(v111) - (1.0 - v56) * v65;
            if (v75 > v79)
              v80 = v75;
            else
              v80 = v79;
            *(_QWORD *)&v89 = v96;
            BYTE8(v89) = v97;
            *(_QWORD *)&v90 = v98;
            BYTE8(v90) = v99;
            v91 = v100;
            v92 = v101;
            _Placement.anchorPosition.getter();
            if (v75 > v81)
              v82 = v75;
            else
              v82 = v81;
            if (v80 >= v82)
              v80 = v82;
            v83 = (void (*)(__int128 *, _QWORD))_Placement.anchorPosition.modify();
            *(double *)(v84 + 8) = v80;
            v83(&v89, 0);
          }
          a4 = v96;
          LOBYTE(v12) = v97;
          v5 = v98;
          LOBYTE(v6) = v99;
          v87 = v101;
          v88 = v100;
          v14 = *a3;
          result = swift_isUniquelyReferenced_nonNull_native();
          *a3 = v14;
          if ((result & 1) != 0)
            goto LABEL_57;
          goto LABEL_66;
        }
LABEL_65:
        __break(1u);
LABEL_66:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
        v14 = (uint64_t *)result;
LABEL_57:
        if (v13 >= v14[2])
        {
          __break(1u);
        }
        else
        {
          v85 = &v14[9 * v13];
          v85[5] = (uint64_t)a4;
          *((_BYTE *)v85 + 48) = (_BYTE)v12;
          v85[7] = (uint64_t)v5;
          *((_BYTE *)v85 + 64) = v6;
          *(_OWORD *)(v85 + 9) = v88;
          *(_OWORD *)(v85 + 11) = v87;
          *a3 = v14;
        }
        return result;
      }
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
  }
  return result;
}

void type metadata accessor for Scrollable?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Scrollable?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Scrollable?);
  }
}

unint64_t partial apply for closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(_QWORD *a1, unint64_t *a2)
{
  uint64_t v2;

  return (unint64_t)closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, *(_QWORD *)(v2 + 32)) & 1;
}

double specialized thunk for @callee_guaranteed () -> (@unowned PinnedSection)@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = INFINITY;
  *(_OWORD *)a1 = xmmword_187C05360;
  *(_OWORD *)(a1 + 16) = xmmword_187C05360;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

uint64_t Array<A>.motionVectors(closestTo:in:avoiding:distance:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, double (*a3)(uint64_t, double, double, double, double, double, double, double, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  CGPoint v36;
  double x;
  double y;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  CGPoint v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  CGPoint v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double Height;
  double v74;
  CGFloat v75;
  CGFloat v76;
  double v77;
  double v78;
  _BOOL4 IsEmpty;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t result;
  double Width;
  double v86;
  _BYTE v87[32];
  double v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v97;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  double v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;

  *(double *)&v87[16] = a8;
  *(double *)&v87[24] = a9;
  *(double *)v87 = a6;
  *(double *)&v87[8] = a7;
  v9 = a2;
  v10 = a1;
  v105 = *(_QWORD *)(a2 + 16);
  if (v105)
  {
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v13 = 32;
    v103 = v9;
    while (1)
    {
      v106 = v13;
      swift_retain();
      _ViewList_ID.canonicalID.getter();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v113 = v12;
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v108 | ((unint64_t)v110 << 32), v111);
      v17 = v12;
      v18 = v12[2];
      v19 = (v15 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        goto LABEL_65;
      v21 = v15;
      if (v17[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v24 = v113;
          if ((v15 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v24 = v113;
          if ((v21 & 1) == 0)
            goto LABEL_12;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
        v22 = specialized __RawDictionaryStorage.find<A>(_:)(v108 | ((unint64_t)v110 << 32), v111);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_69;
        v16 = v22;
        v24 = v113;
        if ((v21 & 1) == 0)
        {
LABEL_12:
          v24[(v16 >> 6) + 8] |= 1 << v16;
          v25 = v24[6] + 16 * v16;
          *(_DWORD *)v25 = v108;
          *(_DWORD *)(v25 + 4) = v110;
          *(_QWORD *)(v25 + 8) = v111;
          *(_QWORD *)(v24[7] + 8 * v16) = v11;
          v26 = v24[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_66;
          v12 = v24;
          v24[2] = v28;
          swift_retain();
          goto LABEL_4;
        }
      }
      *(_QWORD *)(v24[7] + 8 * v16) = v11;
      v12 = v24;
LABEL_4:
      ++v11;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v13 = v106 + 72;
      v9 = v103;
      if (v105 == v11)
      {
        swift_bridgeObjectRelease();
        v29 = a4;
        v10 = a1;
        if ((a1 & 0x8000000000000000) == 0)
          goto LABEL_17;
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
  }
  v29 = a4;
  v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_64;
LABEL_17:
  v30 = *(_QWORD *)(v29 + 16);
  if (v30 <= v10)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v31 = v29 + 72 * v10;
  v33 = *(_QWORD *)(v31 + 32);
  v32 = *(_QWORD *)(v31 + 40);
  v99 = v12;
  swift_retain();
  v34 = _IncrementalLayout_PlacedChild.size.getter();
  v36 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v35, *(unint64_t *)&v34));
  x = v36.x;
  y = v36.y;
  v109 = v33;
  v112 = v32;
  v39 = _IncrementalLayout_PlacedChild.size.getter();
  v41 = v40;
  swift_release();
  v93 = v9 + 32;
  swift_bridgeObjectRetain();
  v42 = 0;
  v104 = 1;
  v97 = 0.0;
  v91 = 0.0;
  v92 = 0.0;
  v89 = 0.0;
  v90 = 0.0;
  v94 = v41;
  v95 = v39;
  do
  {
    if (!v10)
      goto LABEL_20;
    v43 = v29 + v42;
    swift_retain();
    _ViewList_ID.canonicalID.getter();
    if (!v12[2] || (v44 = specialized __RawDictionaryStorage.find<A>(_:)(v109, v112), (v45 & 1) == 0))
    {
      swift_release();
      swift_release();
      goto LABEL_20;
    }
    v100 = *(_QWORD *)(v12[7] + 8 * v44);
    v102 = v10;
    swift_release();
    v47 = *(_QWORD *)(v43 + 32);
    v46 = *(_QWORD *)(v43 + 40);
    v48 = *(_BYTE *)(v43 + 48);
    swift_retain_n();
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      AGGraphGetValue();
      swift_retain();
    }
    LayoutComputer.sizeThatFits(_:)();
    v50 = v49;
    v52 = v51;
    swift_release();
    v53 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v52, v50));
    v112 = *(_QWORD *)(v47 + 40);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      v112 = *(_QWORD *)(AGGraphGetValue() + 8);
      swift_retain();
    }
    v109 = v46;
    LOBYTE(v112) = v48;
    LayoutComputer.sizeThatFits(_:)();
    v55 = v54;
    v57 = v56;
    swift_release_n();
    v58 = swift_release();
    v59 = a3(v58, x, y, v39, v41, v53.x, v53.y, v55, v57);
    if (!(v104 & 1 | (v59 < v97)))
    {
      swift_release();
      v104 = 0;
      v29 = a4;
      v12 = v99;
      v10 = v102;
      goto LABEL_20;
    }
    if (v100 >= v105)
      goto LABEL_67;
    v107 = v59;
    v60 = (uint64_t *)(v93 + 72 * v100);
    v62 = *v60;
    v61 = v60[1];
    v63 = *((_BYTE *)v60 + 16);
    swift_retain();
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      AGGraphGetValue();
      swift_retain();
    }
    LayoutComputer.sizeThatFits(_:)();
    v65 = v64;
    v67 = v66;
    swift_release();
    v68 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v67, v65));
    v112 = *(_QWORD *)(v62 + 40);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
    }
    else
    {
      v112 = *(_QWORD *)(AGGraphGetValue() + 8);
      swift_retain();
    }
    v109 = v61;
    LOBYTE(v112) = v63;
    LayoutComputer.sizeThatFits(_:)();
    v70 = v69;
    v72 = v71;
    swift_release();
    swift_release();
    v114.origin.x = v53.x;
    v114.origin.y = v53.y;
    v114.size.width = v55;
    v114.size.height = v57;
    if (CGRectIsEmpty(v114))
    {
      swift_release();
      v29 = a4;
      v12 = v99;
      v10 = v102;
LABEL_43:
      y = v36.y;
      x = v36.x;
      v41 = v94;
      v39 = v95;
      goto LABEL_20;
    }
    v115.origin.x = v68.x;
    v115.origin.y = v68.y;
    v115.size.width = v70;
    v115.size.height = v72;
    v29 = a4;
    v12 = v99;
    v10 = v102;
    if (CGRectIsEmpty(v115))
    {
      swift_release();
      goto LABEL_43;
    }
    v116.origin.x = v68.x;
    v116.origin.y = v68.y;
    v116.size.width = v70;
    v116.size.height = v72;
    Width = CGRectGetWidth(v116);
    v117.origin.x = v53.x;
    v117.origin.y = v53.y;
    v117.size.width = v55;
    v117.size.height = v57;
    v86 = Width / CGRectGetWidth(v117);
    v118.origin.x = v68.x;
    v118.origin.y = v68.y;
    v118.size.width = v70;
    v118.size.height = v72;
    Height = CGRectGetHeight(v118);
    v119.origin.x = v53.x;
    v119.origin.y = v53.y;
    v119.size.width = v55;
    v119.size.height = v57;
    v74 = Height / CGRectGetHeight(v119);
    y = v36.y;
    x = v36.x;
    v41 = v94;
    v39 = v95;
    v77 = v95 * v86;
    if (v95 == 0.0)
      v77 = 0.0;
    v78 = v94 * v74;
    if (v94 == 0.0)
      v78 = 0.0;
    v75 = v36.x + v68.x - v53.x;
    v76 = v36.y + v68.y - v53.y;
    v120 = CGRectIntersection(*(CGRect *)(&v77 - 2), *(CGRect *)v87);
    IsEmpty = CGRectIsEmpty(v120);
    swift_release();
    if (IsEmpty)
    {
      v104 = 0;
      v97 = v107;
      v91 = v68.y - v53.y;
      v92 = v68.x - v53.x;
      v89 = v74;
      v90 = v86;
    }
LABEL_20:
    v42 += 72;
    --v10;
    --v30;
  }
  while (v30);
  swift_bridgeObjectRelease();
  if ((v104 & 1) != 0)
    v80 = 0.0;
  else
    v80 = v92;
  if ((v104 & 1) != 0)
    v81 = 0.0;
  else
    v81 = v91;
  if ((v104 & 1) != 0)
    v82 = 0.0;
  else
    v82 = v90;
  if ((v104 & 1) != 0)
    v83 = 0.0;
  else
    v83 = v89;
  result = swift_bridgeObjectRelease();
  *(double *)a5 = v80;
  *(double *)(a5 + 8) = v81;
  *(double *)(a5 + 16) = v82;
  *(double *)(a5 + 24) = v83;
  *(_BYTE *)(a5 + 32) = v104 & 1;
  return result;
}

uint64_t outlined copy of _ViewList_ID??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t partial apply for closure #1 in IncrementalChildPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)()
{
  return _ViewList_ID.containsID<A>(_:)() & 1;
}

uint64_t outlined init with copy of Binding<ScrollPosition>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Binding<ScrollPosition>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(a1, *(_QWORD *)(v1 + 32), *(const void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined init with copy of Scrollable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Scrollable?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18734F340()
{
  return swift_deallocObject();
}

void type metadata accessor for (translation: CGSize, scale: CGSize)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (translation: CGSize, scale: CGSize))
  {
    type metadata accessor for CGSize(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (translation: CGSize, scale: CGSize));
  }
}

uint64_t getEnumTagSinglePayload for PinnedSection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PinnedSection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PinnedSection()
{
  return &type metadata for PinnedSection;
}

uint64_t *initializeBufferWithCopyOfBuffer for IncrementalLayoutComputer.Engine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v11 = (_OWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_OWORD *)(v15 + 112);
    v17 = *(_OWORD *)(v15 + 128);
    v18 = *(_OWORD *)(v15 + 144);
    *(_BYTE *)(v14 + 160) = *(_BYTE *)(v15 + 160);
    *(_OWORD *)(v14 + 128) = v17;
    *(_OWORD *)(v14 + 144) = v18;
    *(_OWORD *)(v14 + 112) = v16;
    v19 = *(_OWORD *)(v15 + 48);
    v20 = *(_OWORD *)(v15 + 64);
    v21 = *(_OWORD *)(v15 + 96);
    *(_OWORD *)(v14 + 80) = *(_OWORD *)(v15 + 80);
    *(_OWORD *)(v14 + 96) = v21;
    *(_OWORD *)(v14 + 48) = v19;
    *(_OWORD *)(v14 + 64) = v20;
    v22 = *(_OWORD *)v15;
    v23 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
    *(_OWORD *)(v14 + 32) = v23;
    *(_OWORD *)v14 = v22;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for IncrementalLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for IncrementalLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)(v12 + 112);
  v14 = *(_OWORD *)(v12 + 128);
  v15 = *(_OWORD *)(v12 + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v14;
  *(_OWORD *)(v11 + 144) = v15;
  *(_OWORD *)(v11 + 112) = v13;
  v16 = *(_OWORD *)(v12 + 48);
  v17 = *(_OWORD *)(v12 + 64);
  v18 = *(_OWORD *)(v12 + 96);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v11 + 96) = v18;
  *(_OWORD *)(v11 + 48) = v16;
  *(_OWORD *)(v11 + 64) = v17;
  v19 = *(_OWORD *)v12;
  v20 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v11 + 32) = v20;
  *(_OWORD *)v11 = v19;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IncrementalLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  v7 += 23;
  v8 += 23;
  v9 = (v8 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFF8);
  v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v13 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  v14 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v11 + 48) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v11 + 16) = v13;
  *(_OWORD *)(v11 + 32) = v14;
  *(_OWORD *)v11 = v12;
  v15 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 56);
  v16 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 72);
  v17 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 88);
  *(_BYTE *)(v11 + 104) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_OWORD *)(v11 + 88) = v17;
  *(_OWORD *)(v11 + 72) = v16;
  *(_OWORD *)(v11 + 56) = v15;
  v18 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 112);
  v19 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 128);
  v20 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 160);
  *(_OWORD *)(v11 + 128) = v19;
  *(_OWORD *)(v11 + 144) = v20;
  *(_OWORD *)(v11 + 112) = v18;
  return a1;
}

uint64_t initializeWithTake for IncrementalLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)(v12 + 112);
  v14 = *(_OWORD *)(v12 + 128);
  v15 = *(_OWORD *)(v12 + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v14;
  *(_OWORD *)(v11 + 144) = v15;
  *(_OWORD *)(v11 + 112) = v13;
  v16 = *(_OWORD *)(v12 + 48);
  v17 = *(_OWORD *)(v12 + 64);
  v18 = *(_OWORD *)(v12 + 96);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v11 + 96) = v18;
  *(_OWORD *)(v11 + 48) = v16;
  *(_OWORD *)(v11 + 64) = v17;
  v19 = *(_OWORD *)v12;
  v20 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v11 + 32) = v20;
  *(_OWORD *)v11 = v19;
  return a1;
}

uint64_t assignWithTake for IncrementalLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *(_DWORD *)v7 = *v8;
  *(_DWORD *)(v7 + 4) = v8[1];
  *(_DWORD *)(v7 + 8) = v8[2];
  *(_DWORD *)(v7 + 12) = v8[3];
  v7 += 23;
  v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v9 += 15;
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = v10;
  v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v14 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  v15 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v12 + 48) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)v12 = v13;
  v16 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 56);
  v17 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 72);
  v18 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 88);
  *(_BYTE *)(v12 + 104) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_OWORD *)(v12 + 88) = v18;
  *(_OWORD *)(v12 + 72) = v17;
  *(_OWORD *)(v12 + 56) = v16;
  v19 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 112);
  v20 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 128);
  v21 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 144);
  *(_BYTE *)(v12 + 160) = *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF8) + 160);
  *(_OWORD *)(v12 + 128) = v20;
  *(_OWORD *)(v12 + 144) = v21;
  *(_OWORD *)(v12 + 112) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalLayoutComputer.Engine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((((a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (a2 - v6 + 255) >> (8 * (((((((v7 + 3) & 0xFC) + 23) & 0xF8) + 15) & 0xF8) - 95));
    if ((((((((_DWORD)v7 + 3) & 0xFFFFFFFC) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 161 < 4)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18734F94C + 4 * byte_187C25FFC[v11]))();
  }
}

void storeEnumTagSinglePayload for IncrementalLayoutComputer.Engine(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((((*(_QWORD *)(v5 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 161;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * (((((((*(_BYTE *)(v5 + 64) + 3) & 0xFC) + 23) & 0xF8) + 15) & 0xF8) - 95))) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18734FB14()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18734FB90);
}

void sub_18734FB1C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18734FB24);
  JUMPOUT(0x18734FB90);
}

void sub_18734FB6C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18734FB90);
}

void sub_18734FB74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18734FB90);
}

uint64_t sub_18734FB7C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18734FB90);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18734FB8CLL);
    JUMPOUT(0x18734FB88);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t destroy for IncrementalChildPlacements()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for IncrementalChildPlacements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = v4;
  v5 = *(_OWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v5;
  return a1;
}

void *__swift_memcpy329_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x149uLL);
}

uint64_t assignWithTake for IncrementalChildPlacements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  v8 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v8;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalChildPlacements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 329))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalChildPlacements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 329) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 329) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in IncrementalChildPlacements<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in IncrementalLayoutComputer<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

double partial apply for closure #1 in IncrementalLayoutComputer.Engine.sizeThatFits(_:)()
{
  return closure #1 in IncrementalLayoutComputer.Engine.sizeThatFits(_:)();
}

uint64_t partial apply for closure #1 in IncrementalLayoutComputer.Engine.spacing()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in IncrementalLayoutComputer.Engine.spacing()(v1[4], v1[2], v1[3], a1);
}

uint64_t destroy for PositionState()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PositionState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PositionState(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  return a1;
}

uint64_t assignWithTake for PositionState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PositionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 153) = 0;
    if (a2)
      *(_QWORD *)(result + 128) = a2;
  }
  return result;
}

void *type metadata accessor for PositionState()
{
  return &unk_1E1AB61C0;
}

uint64_t View.accessibilityScrollAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
  v12 = swift_retain();
  View.accessibilityAction<A>(_:label:image:_:)(v12, 0, 0, 0, 0, 0, (uint64_t)partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:), v10, a5, a3, (uint64_t)&type metadata for AccessibilityScrollAction, a4, v11);
  return swift_release();
}

uint64_t sub_187350400()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollAction, &type metadata for AccessibilityScrollAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityScrollAction, &type metadata for AccessibilityScrollAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityScrollAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
  v10 = swift_retain();
  ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)(v10, 0, 0, 0, 0, 0, (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Edge) -> ()partial apply, v8, a4, a3, (uint64_t)&type metadata for AccessibilityScrollAction, v9);
  return swift_release();
}

ValueMetadata *type metadata accessor for AccessibilityScrollAction()
{
  return &type metadata for AccessibilityScrollAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityScrollAction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t View.fileDialogDefaultDirectory(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogDefaultDirectory.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>, (uint64_t)&unk_1E1AC3D48, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogDefaultDirectoryKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>, (uint64_t)&unk_1E1AC3D48, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogDefaultDirectoryKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187350638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>, (uint64_t)&unk_1E1AC3D48, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogDefaultDirectoryKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for URL?, (uint64_t (*)(char *))EnvironmentValues.fileDialogDefaultDirectory.setter);
}

uint64_t sub_187350680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for URL?, (uint64_t (*)(char *))EnvironmentValues.fileDialogDefaultDirectory.setter);
}

uint64_t EnvironmentValues.fileDialogDefaultDirectory.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t View.fileDialogCustomizationID(_:)()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  View.environment<A>(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogCustomizationID.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.fileDialogCustomizationID : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.fileDialogCustomizationID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1873509FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.fileDialogCustomizationID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.fileDialogCustomizationID : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t View.fileDialogMessage(_:)()
{
  return View.fileDialogMessage(_:)();
}

{
  return View.fileDialogMessage(_:)();
}

{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = Text.init(_:tableName:bundle:comment:)();
  v2 = v1;
  v4 = v3 & 1;
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of Text.Storage(v0, v2, v4);
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.fileDialogMessage.getter()
{
  return EnvironmentValues.fileDialogMessage.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogMessageKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogMessageKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogMessage.getter, a3);
}

uint64_t sub_187350AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogMessage.getter, a3);
}

uint64_t key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_187350ACC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t View.fileDialogMessage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.fileDialogMessage<A>(_:)(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v14[4];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  v8 = Text.init<A>(_:)();
  v10 = v9;
  v14[0] = v8;
  v14[1] = v9;
  LOBYTE(v7) = v11 & 1;
  v14[2] = v11 & 1;
  v14[3] = v12;
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of Text.Storage(v8, v10, (char)v7);
  return swift_bridgeObjectRelease();
}

uint64_t View.fileDialogConfirmationLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.fileDialogMessage<A>(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.fileDialogConfirmationLabel.getter()
{
  return EnvironmentValues.fileDialogMessage.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogConfirmationLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogConfirmationLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogConfirmationLabel : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogConfirmationLabel.getter, a3);
}

uint64_t key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = a3(a1, a2);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t sub_187350B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogConfirmationLabel.getter, a3);
}

uint64_t key path setter for EnvironmentValues.fileDialogConfirmationLabel : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_187350B90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t View.fileDialogConfirmationLabel(_:)()
{
  return View.fileDialogMessage(_:)();
}

{
  return View.fileDialogMessage(_:)();
}

uint64_t View.fileExporterFilenameLabel(_:)()
{
  return View.fileDialogMessage(_:)();
}

{
  return View.fileDialogMessage(_:)();
}

uint64_t EnvironmentValues.fileExporterFilenameLabel.getter()
{
  return EnvironmentValues.fileDialogMessage.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileExporterFilenameLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileExporterFilenameLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.fileDialogMessage.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v8;
}

uint64_t key path getter for EnvironmentValues.fileExporterFilenameLabel : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileExporterFilenameLabel.getter, a3);
}

uint64_t sub_187350DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileExporterFilenameLabel.getter, a3);
}

uint64_t key path setter for EnvironmentValues.fileExporterFilenameLabel : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  outlined copy of Text?(*a1, v7, v8, v9);
  a5(v6, v7, v8, v9);
  return outlined consume of Text?(v6, v7, v8, v9);
}

uint64_t sub_187350E3C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t View.fileExporterFilenameLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.fileDialogMessage<A>(_:)(a1, a2, a3);
}

uint64_t View.fileDialogURLEnabled(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  type metadata accessor for Predicate<Pack{URL}>();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v5, a1, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?);
}

void type metadata accessor for Predicate<Pack{URL}>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t EnvironmentValues.fileDialogURLEnabled.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>, (uint64_t)&unk_1E1AC39B0, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogURLEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.fileDialogDefaultDirectory.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.fileDialogURLEnabled : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>, (uint64_t)&unk_1E1AC39B0, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogURLEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a7, a4);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a7, a4);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187351410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>, (uint64_t)&unk_1E1AC39B0, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogURLEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.fileDialogURLEnabled : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?, (uint64_t (*)(char *))EnvironmentValues.fileDialogURLEnabled.setter);
}

uint64_t key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v9 = a5(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v14 - v11;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v14 - v11, a5);
  return a6(v12);
}

uint64_t sub_1873514E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?, (uint64_t (*)(char *))EnvironmentValues.fileDialogURLEnabled.setter);
}

uint64_t EnvironmentValues.fileDialogURLEnabled.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?);
}

uint64_t View.fileDialogImportsUnresolvedAliases(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogImportsUnresolvedAliases.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.fileDialogImportsUnresolvedAliases : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.fileDialogImportsUnresolvedAliases.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18735183C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.fileDialogImportsUnresolvedAliases.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.fileDialogImportsUnresolvedAliases : EnvironmentValues()
{
  return EnvironmentValues.fileDialogImportsUnresolvedAliases.setter();
}

uint64_t sub_187351898()
{
  return EnvironmentValues.fileDialogImportsUnresolvedAliases.setter();
}

uint64_t EnvironmentValues.fileDialogImportsUnresolvedAliases.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.fileDialogBrowserOptions(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogBrowserOptions.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.fileDialogBrowserOptions : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.fileDialogBrowserOptions : EnvironmentValues()
{
  return EnvironmentValues.fileDialogBrowserOptions.setter();
}

uint64_t sub_187351D04()
{
  return EnvironmentValues.fileDialogBrowserOptions.setter();
}

uint64_t EnvironmentValues.fileDialogBrowserOptions.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t FileDialogBrowserOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::FileDialogBrowserOptions __swiftcall FileDialogBrowserOptions.init(rawValue:)(SwiftUI::FileDialogBrowserOptions rawValue)
{
  SwiftUI::FileDialogBrowserOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static FileDialogBrowserOptions.enumeratePackages.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FileDialogBrowserOptions.includeHiddenFiles.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FileDialogBrowserOptions.displayFileExtensions.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

unint64_t lazy protocol witness table accessor for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogBrowserOptions, &type metadata for FileDialogBrowserOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogBrowserOptions, &type metadata for FileDialogBrowserOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogBrowserOptions, &type metadata for FileDialogBrowserOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogBrowserOptions, &type metadata for FileDialogBrowserOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for FileDialogBrowserOptions()
{
  return &type metadata for FileDialogBrowserOptions;
}

uint64_t sub_187351FA4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy10Foundation3URLVSgGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<URL?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_187351FC0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_187351FE4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text?>, &lazy cache variable for type metadata for Text?, MEMORY[0x1E0CE6CF8], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v9 = *(_QWORD *)(a1 + 8);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v10 = type metadata accessor for ModifiedContent();
  v12[0] = v9;
  v12[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>(a5, a2, a3, a4);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v12);
}

uint64_t sub_18735209C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0CE6CF8];
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text?>, &lazy cache variable for type metadata for Text?, MEMORY[0x1E0CE6CF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text?> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text?>, &lazy cache variable for type metadata for Text?, v2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t sub_18735214C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy10Foundation3URLVSgGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Predicate<Pack{URL}>?>, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Predicate<Pack{URL}>?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy10Foundation3URLVSgGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v7 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v7;
  v10[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<URL?> and conformance _EnvironmentKeyWritingModifier<A>(a4, a2, a3);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<URL?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18735223C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_187352260(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FileDialogBrowserOptions?>, &lazy cache variable for type metadata for FileDialogBrowserOptions?, (uint64_t)&type metadata for FileDialogBrowserOptions, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FileDialogBrowserOptions?> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata completion function for FileDialogConfiguration()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Optional();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDialogConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  unsigned int v23;
  int v24;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  const void *v76;
  size_t __n;
  uint64_t v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  type metadata accessor for Predicate<Pack{URL}>();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8 | 7;
  if (*(_DWORD *)(v11 + 84))
    v14 = *(_QWORD *)(v11 + 64);
  else
    v14 = *(_QWORD *)(v11 + 64) + 1;
  if (v14 <= 8)
    v15 = 8;
  else
    v15 = v14;
  v16 = *(_QWORD *)(a3 + 24);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = *(_DWORD *)(v17 + 84);
  v20 = v18;
  v88 = v17;
  v21 = *(_QWORD *)(v17 + 64);
  if (v19)
    v22 = v21;
  else
    v22 = v21 + 1;
  v23 = v18 | *(_DWORD *)(v7 + 80) & 0xF8 | *(_DWORD *)(v11 + 80) & 0xF8;
  v24 = (v18 | v12 | *(_DWORD *)(v7 + 80)) & 0x100000;
  if (v23 > 7
    || v24 != 0
    || ((v18
       + 8
       + (((((((v9 & 0xFFFFFFFFFFFFFFF8) + v13 + 145) & ~v13) + v15 + 1 + 23) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v18)
     + v22 > 0x18)
  {
    v27 = *a2;
    *a1 = *a2;
    v28 = v27 + (((v23 | 7) + 16) & ~(unint64_t)(v23 | 7));
    swift_retain();
  }
  else
  {
    v29 = *((unsigned __int8 *)a2 + v9);
    if (v29 >= 2)
    {
      if (v9 <= 3)
        v30 = v9;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    __n = v14;
    v79 = v10;
    v84 = v15 + 1;
    v85 = v18 + 8;
    v80 = v22;
    v81 = ~v13;
    v82 = *(_QWORD *)(v10 - 8);
    v86 = v16;
    v83 = v15;
    if (v29 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v9) = 0;
      swift_retain();
    }
    v87 = a1;
    v31 = (char *)a1 + v9 + 1;
    v32 = (char *)a2 + v9 + 1;
    v33 = (unint64_t)(v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = (unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_BYTE *)(v34 + 16);
    outlined copy of Environment<String?>.Content(*(_QWORD *)v34, v36, v37);
    *(_QWORD *)v33 = v35;
    *(_QWORD *)(v33 + 8) = v36;
    *(_BYTE *)(v33 + 16) = v37;
    v38 = (unint64_t)(v31 + 31) & 0xFFFFFFFFFFFFFFF8;
    v39 = (unint64_t)(v32 + 31) & 0xFFFFFFFFFFFFFFF8;
    v40 = *(_QWORD *)v39;
    v41 = *(_QWORD *)(v39 + 8);
    v42 = *(_QWORD *)(v39 + 16);
    v43 = *(_QWORD *)(v39 + 24);
    v44 = *(_BYTE *)(v39 + 32);
    outlined copy of Environment<Text?>.Content(*(_QWORD *)v39, v41, v42, v43, v44);
    *(_QWORD *)v38 = v40;
    *(_QWORD *)(v38 + 8) = v41;
    *(_QWORD *)(v38 + 16) = v42;
    *(_QWORD *)(v38 + 24) = v43;
    *(_BYTE *)(v38 + 32) = v44;
    v45 = (unint64_t)(v31 + 71) & 0xFFFFFFFFFFFFFFF8;
    v46 = (unint64_t)(v32 + 71) & 0xFFFFFFFFFFFFFFF8;
    v47 = *(_QWORD *)v46;
    v48 = *(_QWORD *)(v46 + 8);
    v49 = *(_QWORD *)(v46 + 16);
    v50 = *(_QWORD *)(v46 + 24);
    v51 = *(_BYTE *)(v46 + 32);
    outlined copy of Environment<Text?>.Content(*(_QWORD *)v46, v48, v49, v50, v51);
    *(_QWORD *)v45 = v47;
    *(_QWORD *)(v45 + 8) = v48;
    *(_QWORD *)(v45 + 16) = v49;
    *(_QWORD *)(v45 + 24) = v50;
    *(_BYTE *)(v45 + 32) = v51;
    v52 = (unint64_t)(v31 + 111) & 0xFFFFFFFFFFFFFFF8;
    v53 = (unint64_t)(v32 + 111) & 0xFFFFFFFFFFFFFFF8;
    v54 = *(_QWORD *)v53;
    v55 = *(_QWORD *)(v53 + 8);
    v56 = *(_QWORD *)(v53 + 16);
    v57 = *(_QWORD *)(v53 + 24);
    v58 = *(_BYTE *)(v53 + 32);
    outlined copy of Environment<Text?>.Content(*(_QWORD *)v53, v55, v56, v57, v58);
    *(_QWORD *)v52 = v54;
    *(_QWORD *)(v52 + 8) = v55;
    *(_QWORD *)(v52 + 16) = v56;
    *(_QWORD *)(v52 + 24) = v57;
    *(_BYTE *)(v52 + 32) = v58;
    v59 = (_QWORD *)((v13 + 33 + v52) & v81);
    v60 = (_QWORD *)((v13 + 33 + v53) & v81);
    v61 = *((unsigned __int8 *)v60 + v83);
    if (v61 >= 2)
    {
      if (v83 <= 3)
        v62 = v83;
      else
        v62 = 4;
      __asm { BR              X12 }
    }
    v63 = ~v20;
    if (v61 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v82 + 48))((v13 + 33 + v53) & v81, 1, v79))
      {
        memcpy(v59, v60, __n);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v82 + 16))(v59, v60, v79);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v59, 0, 1, v79);
      }
      *((_BYTE *)v59 + v83) = 1;
    }
    else
    {
      *v59 = *v60;
      *((_BYTE *)v59 + v83) = 0;
      swift_retain();
    }
    v64 = (char *)v59 + v84;
    v65 = ((unint64_t)v59 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
    v66 = ((unint64_t)v60 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = *(_QWORD *)v66;
    v68 = *(_BYTE *)(v66 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v66, v68);
    *(_QWORD *)v65 = v67;
    *(_BYTE *)(v65 + 8) = v68;
    v69 = (unint64_t)(v64 + 23) & 0xFFFFFFFFFFFFFFF8;
    v70 = ((unint64_t)v60 + v84 + 23) & 0xFFFFFFFFFFFFFFF8;
    v71 = *(_QWORD *)v70;
    v72 = *(_BYTE *)(v70 + 9);
    LOBYTE(v65) = *(_BYTE *)(v70 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v70, v65, v72);
    *(_QWORD *)v69 = v71;
    *(_BYTE *)(v69 + 8) = v65;
    *(_BYTE *)(v69 + 9) = v72;
    v73 = (_QWORD *)((v69 + 17) & 0xFFFFFFFFFFFFFFF8);
    v74 = (_QWORD *)((v70 + 17) & 0xFFFFFFFFFFFFFFF8);
    *v73 = *v74;
    v75 = (void *)(((unint64_t)v73 + v85) & v63);
    v76 = (const void *)(((unint64_t)v74 + v85) & v63);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v88 + 48))(v76, 1, v86))
    {
      memcpy(v75, v76, v80);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v88 + 16))(v75, v76, v86);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v75, 0, 1, v86);
    }
    return v87;
  }
  return (uint64_t *)v28;
}

uint64_t outlined copy of Environment<String?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  else
    return swift_retain();
}

uint64_t outlined copy of Environment<Text?>.Content(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return outlined copy of Text?(result, a2, a3, a4);
  else
    return swift_retain();
}

uint64_t destroy for FileDialogConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  v10 = a1 + v7;
  outlined consume of Environment<String?>.Content(*(_QWORD *)((v10 + 8) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v10 + 8) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v10 + 8) & 0xFFFFFFFFFFFFFFF8) + 16));
  outlined consume of Environment<Text?>.Content(*(_QWORD *)((v10 + 32) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v10 + 32) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(((v10 + 32) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(((v10 + 32) & 0xFFFFFFFFFFFFFFF8) + 24), *(_BYTE *)(((v10 + 32) & 0xFFFFFFFFFFFFFFF8) + 32));
  outlined consume of Environment<Text?>.Content(*(_QWORD *)((v10 + 72) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((v10 + 72) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(((v10 + 72) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(((v10 + 72) & 0xFFFFFFFFFFFFFFF8) + 24), *(_BYTE *)(((v10 + 72) & 0xFFFFFFFFFFFFFFF8) + 32));
  v11 = (v10 + 112) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Text?>.Content(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_BYTE *)(v11 + 32));
  type metadata accessor for Predicate<Pack{URL}>();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v16 = (v11 + v15 + 33) & ~v15;
  v17 = *(_QWORD *)(v14 + 64);
  if (!*(_DWORD *)(v14 + 84))
    ++v17;
  if (v17 <= 8)
    v18 = 8;
  else
    v18 = v17;
  v19 = *(unsigned __int8 *)(v16 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  if (v19 == 1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v18 + v16 + 8) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v18 + v16 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
  v21 = (v18 + v16 + 24) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v21, *(unsigned __int8 *)(v21 + 8), *(_BYTE *)(v21 + 9));
  v22 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (((v21 + 17) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v23 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v23 + 8))(v24, v22);
  return result;
}

uint64_t outlined consume of Environment<String?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return swift_release();
}

uint64_t outlined consume of Environment<Text?>.Content(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return outlined consume of Text?(result, a2, a3, a4);
  else
    return swift_release();
}

_QWORD *initializeWithCopy for FileDialogConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  size_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  size_t v70;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = *((unsigned __int8 *)a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    *((_BYTE *)a1 + v9) = 1;
  }
  else
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v9) = 0;
    swift_retain();
  }
  v12 = (char *)a1 + v9 + 1;
  v13 = (char *)a2 + v9 + 1;
  v14 = (unint64_t)(v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(_BYTE *)(v15 + 16);
  outlined copy of Environment<String?>.Content(*(_QWORD *)v15, v17, v18);
  *(_QWORD *)v14 = v16;
  *(_QWORD *)(v14 + 8) = v17;
  *(_BYTE *)(v14 + 16) = v18;
  v19 = (unint64_t)(v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = (unint64_t)(v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  v22 = *(_QWORD *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 16);
  v24 = *(_QWORD *)(v20 + 24);
  v25 = *(_BYTE *)(v20 + 32);
  outlined copy of Environment<Text?>.Content(*(_QWORD *)v20, v22, v23, v24, v25);
  *(_QWORD *)v19 = v21;
  *(_QWORD *)(v19 + 8) = v22;
  *(_QWORD *)(v19 + 16) = v23;
  *(_QWORD *)(v19 + 24) = v24;
  *(_BYTE *)(v19 + 32) = v25;
  v26 = (unint64_t)(v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  v27 = (unint64_t)(v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  v29 = *(_QWORD *)(v27 + 8);
  v30 = *(_QWORD *)(v27 + 16);
  v31 = *(_QWORD *)(v27 + 24);
  v32 = *(_BYTE *)(v27 + 32);
  outlined copy of Environment<Text?>.Content(*(_QWORD *)v27, v29, v30, v31, v32);
  *(_QWORD *)v26 = v28;
  *(_QWORD *)(v26 + 8) = v29;
  *(_QWORD *)(v26 + 16) = v30;
  *(_QWORD *)(v26 + 24) = v31;
  *(_BYTE *)(v26 + 32) = v32;
  v33 = (unint64_t)(v12 + 111) & 0xFFFFFFFFFFFFFFF8;
  v34 = (unint64_t)(v13 + 111) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)v34;
  v36 = *(_QWORD *)(v34 + 8);
  v37 = *(_QWORD *)(v34 + 16);
  v38 = *(_QWORD *)(v34 + 24);
  v39 = *(_BYTE *)(v34 + 32);
  outlined copy of Environment<Text?>.Content(*(_QWORD *)v34, v36, v37, v38, v39);
  *(_QWORD *)v33 = v35;
  *(_QWORD *)(v33 + 8) = v36;
  *(_QWORD *)(v33 + 16) = v37;
  *(_QWORD *)(v33 + 24) = v38;
  *(_BYTE *)(v33 + 32) = v39;
  type metadata accessor for Predicate<Pack{URL}>();
  v41 = v40;
  v42 = *(_QWORD *)(v40 - 8);
  v43 = *(_DWORD *)(v42 + 80) & 0xF8;
  v44 = v43 + 40;
  v45 = v43 + 40 + v33;
  v46 = ~v43 & 0xFFFFFFFFFFFFFFF8;
  v47 = (_QWORD *)(v45 & v46);
  v48 = (_QWORD *)((v44 + v34) & v46);
  if (*(_DWORD *)(v42 + 84))
    v49 = *(_QWORD *)(v42 + 64);
  else
    v49 = *(_QWORD *)(v42 + 64) + 1;
  if (v49 <= 8)
    v50 = 8;
  else
    v50 = v49;
  v51 = *((unsigned __int8 *)v48 + v50);
  if (v51 >= 2)
  {
    if (v50 <= 3)
      v52 = v50;
    else
      v52 = 4;
    __asm { BR              X12 }
  }
  if (v51 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v48, 1, v40))
    {
      memcpy(v47, v48, v49);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v42 + 16))(v47, v48, v41);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v47, 0, 1, v41);
    }
    *((_BYTE *)v47 + v50) = 1;
  }
  else
  {
    *v47 = *v48;
    *((_BYTE *)v47 + v50) = 0;
    swift_retain();
  }
  v53 = (char *)v47 + v50 + 1;
  v54 = (char *)v48 + v50 + 1;
  v55 = (unint64_t)(v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = (unint64_t)(v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = *(_QWORD *)v56;
  v58 = *(_BYTE *)(v56 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v56, v58);
  *(_QWORD *)v55 = v57;
  *(_BYTE *)(v55 + 8) = v58;
  v59 = (unint64_t)(v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  v60 = (unint64_t)(v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  v61 = *(_QWORD *)v60;
  v62 = *(_BYTE *)(v60 + 9);
  LOBYTE(v53) = *(_BYTE *)(v60 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v60, v53, v62);
  *(_QWORD *)v59 = v61;
  *(_BYTE *)(v59 + 8) = (_BYTE)v53;
  *(_BYTE *)(v59 + 9) = v62;
  v63 = (_QWORD *)((v59 + 17) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)((v60 + 17) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = *(_QWORD *)(a3 + 24);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = (void *)(((unint64_t)v63 + v67 + 8) & ~v67);
  v69 = (const void *)(((unint64_t)v64 + v67 + 8) & ~v67);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v66 + 48))(v69, 1, v65))
  {
    if (*(_DWORD *)(v66 + 84))
      v70 = *(_QWORD *)(v66 + 64);
    else
      v70 = *(_QWORD *)(v66 + 64) + 1;
    memcpy(v68, v69, v70);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v66 + 16))(v68, v69, v65);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v68, 0, 1, v65);
  }
  return a1;
}

_QWORD *assignWithCopy for FileDialogConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  size_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t (*v106)(void *, uint64_t, uint64_t);
  int v107;
  size_t v108;

  if (a1 != a2)
  {
    v6 = type metadata accessor for URL();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_DWORD *)(v7 + 84))
      v8 = *(_QWORD *)(v7 + 64);
    else
      v8 = *(_QWORD *)(v7 + 64) + 1;
    if (v8 <= 8)
      v9 = 8;
    else
      v9 = v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    }
    else
    {
      swift_release();
    }
    v12 = *((unsigned __int8 *)a2 + v9);
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v9) = 0;
      swift_retain();
    }
  }
  v14 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_QWORD *)(v14 + 64);
  if (!v15)
    ++v16;
  if (v16 <= 8)
    v16 = 8;
  v17 = v16 + 1;
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = ((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_BYTE *)(v21 + 16);
  outlined copy of Environment<String?>.Content(*(_QWORD *)v21, v23, v24);
  v25 = *(_QWORD *)v20;
  v26 = *(_QWORD *)(v20 + 8);
  v27 = *(_BYTE *)(v20 + 16);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_BYTE *)(v20 + 16) = v24;
  outlined consume of Environment<String?>.Content(v25, v26, v27);
  v28 = (unint64_t)(v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v29 = (unint64_t)(v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  v31 = *(_QWORD *)(v29 + 8);
  v32 = *(_QWORD *)(v29 + 16);
  v33 = *(_QWORD *)(v29 + 24);
  v34 = *(_BYTE *)(v29 + 32);
  outlined copy of Environment<Text?>.Content(*(_QWORD *)v29, v31, v32, v33, v34);
  v35 = *(_QWORD *)v28;
  v36 = *(_QWORD *)(v28 + 8);
  v37 = *(_QWORD *)(v28 + 16);
  v38 = *(_QWORD *)(v28 + 24);
  v39 = *(_BYTE *)(v28 + 32);
  *(_QWORD *)v28 = v30;
  *(_QWORD *)(v28 + 8) = v31;
  *(_QWORD *)(v28 + 16) = v32;
  *(_QWORD *)(v28 + 24) = v33;
  *(_BYTE *)(v28 + 32) = v34;
  outlined consume of Environment<Text?>.Content(v35, v36, v37, v38, v39);
  v40 = (unint64_t)(v18 + 71) & 0xFFFFFFFFFFFFFFF8;
  v41 = (unint64_t)(v19 + 71) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_QWORD *)v41;
  v43 = *(_QWORD *)(v41 + 8);
  v44 = *(_QWORD *)(v41 + 16);
  v45 = *(_QWORD *)(v41 + 24);
  v46 = *(_BYTE *)(v41 + 32);
  outlined copy of Environment<Text?>.Content(*(_QWORD *)v41, v43, v44, v45, v46);
  v47 = *(_QWORD *)v40;
  v48 = *(_QWORD *)(v40 + 8);
  v49 = *(_QWORD *)(v40 + 16);
  v50 = *(_QWORD *)(v40 + 24);
  v51 = *(_BYTE *)(v40 + 32);
  *(_QWORD *)v40 = v42;
  *(_QWORD *)(v40 + 8) = v43;
  *(_QWORD *)(v40 + 16) = v44;
  *(_QWORD *)(v40 + 24) = v45;
  *(_BYTE *)(v40 + 32) = v46;
  outlined consume of Environment<Text?>.Content(v47, v48, v49, v50, v51);
  v52 = (unint64_t)(v18 + 111) & 0xFFFFFFFFFFFFFFF8;
  v53 = (unint64_t)(v19 + 111) & 0xFFFFFFFFFFFFFFF8;
  v54 = *(_QWORD *)v53;
  v55 = *(_QWORD *)(v53 + 8);
  v56 = *(_QWORD *)(v53 + 16);
  v57 = *(_QWORD *)(v53 + 24);
  v58 = *(_BYTE *)(v53 + 32);
  outlined copy of Environment<Text?>.Content(*(_QWORD *)v53, v55, v56, v57, v58);
  v59 = *(_QWORD *)v52;
  v60 = *(_QWORD *)(v52 + 8);
  v61 = *(_QWORD *)(v52 + 16);
  v62 = *(_QWORD *)(v52 + 24);
  v63 = *(_BYTE *)(v52 + 32);
  *(_QWORD *)v52 = v54;
  *(_QWORD *)(v52 + 8) = v55;
  *(_QWORD *)(v52 + 16) = v56;
  *(_QWORD *)(v52 + 24) = v57;
  *(_BYTE *)(v52 + 32) = v58;
  outlined consume of Environment<Text?>.Content(v59, v60, v61, v62, v63);
  type metadata accessor for Predicate<Pack{URL}>();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(_DWORD *)(v65 + 84);
  v67 = *(_DWORD *)(v65 + 80) & 0xF8;
  v68 = v67 + 40;
  v69 = v67 + 40 + v52;
  v70 = ~v67 & 0xFFFFFFFFFFFFFFF8;
  v71 = (_QWORD *)(v69 & v70);
  v72 = v68 + v53;
  v73 = (_QWORD *)(v72 & v70);
  v74 = *(_QWORD *)(v65 + 64);
  if ((v69 & v70) != (v72 & v70))
  {
    v75 = v64;
    if (v66)
      v76 = *(_QWORD *)(v65 + 64);
    else
      v76 = v74 + 1;
    if (v76 <= 8)
      v77 = 8;
    else
      v77 = v76;
    v78 = *((unsigned __int8 *)v71 + v77);
    if (v78 >= 2)
    {
      if (v77 <= 3)
        v79 = v77;
      else
        v79 = 4;
      __asm { BR              X12 }
    }
    if (v78 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v65 + 48))(v71, 1, v64))
        (*(void (**)(_QWORD *, uint64_t))(v65 + 8))(v71, v75);
    }
    else
    {
      swift_release();
    }
    v80 = *((unsigned __int8 *)v73 + v77);
    if (v80 >= 2)
    {
      if (v77 <= 3)
        v81 = v77;
      else
        v81 = 4;
      __asm { BR              X12 }
    }
    if (v80 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v65 + 48))(v73, 1, v75))
      {
        memcpy(v71, v73, v76);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v65 + 16))(v71, v73, v75);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v71, 0, 1, v75);
      }
      *((_BYTE *)v71 + v77) = 1;
    }
    else
    {
      *v71 = *v73;
      *((_BYTE *)v71 + v77) = 0;
      swift_retain();
    }
  }
  if (v66)
    v82 = v74;
  else
    v82 = v74 + 1;
  if (v82 <= 8)
    v82 = 8;
  v83 = v82 + 1;
  v84 = (char *)v71 + v83;
  v85 = (char *)v73 + v83;
  v86 = ((unint64_t)v71 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
  v87 = ((unint64_t)v73 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
  v88 = *(_QWORD *)v87;
  v89 = *(_BYTE *)(v87 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v87, v89);
  v90 = *(_QWORD *)v86;
  v91 = *(_BYTE *)(v86 + 8);
  *(_QWORD *)v86 = v88;
  *(_BYTE *)(v86 + 8) = v89;
  outlined consume of Environment<Bool>.Content(v90, v91);
  v92 = (unint64_t)(v84 + 23) & 0xFFFFFFFFFFFFFFF8;
  v93 = (unint64_t)(v85 + 23) & 0xFFFFFFFFFFFFFFF8;
  v94 = *(_QWORD *)v93;
  v95 = *(_BYTE *)(v93 + 9);
  LOBYTE(v84) = *(_BYTE *)(v93 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v93, v84, v95);
  v96 = *(_QWORD *)v92;
  v97 = *(_BYTE *)(v92 + 9);
  *(_QWORD *)v92 = v94;
  v98 = *(unsigned __int8 *)(v92 + 8);
  *(_BYTE *)(v92 + 8) = (_BYTE)v84;
  *(_BYTE *)(v92 + 9) = v95;
  outlined consume of Environment<CGFloat?>.Content(v96, v98, v97);
  v99 = (_QWORD *)((v92 + 17) & 0xFFFFFFFFFFFFFFF8);
  v100 = (_QWORD *)((v93 + 17) & 0xFFFFFFFFFFFFFFF8);
  *v99 = *v100;
  v101 = *(_QWORD *)(a3 + 24);
  v102 = *(_QWORD *)(v101 - 8);
  v103 = *(unsigned __int8 *)(v102 + 80);
  v104 = (void *)(((unint64_t)v99 + v103 + 8) & ~v103);
  v105 = (void *)(((unint64_t)v100 + v103 + 8) & ~v103);
  v106 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v102 + 48);
  LODWORD(v84) = v106(v104, 1, v101);
  v107 = v106(v105, 1, v101);
  if ((_DWORD)v84)
  {
    if (!v107)
    {
      (*(void (**)(void *, void *, uint64_t))(v102 + 16))(v104, v105, v101);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v104, 0, 1, v101);
      return a1;
    }
  }
  else
  {
    if (!v107)
    {
      (*(void (**)(void *, void *, uint64_t))(v102 + 24))(v104, v105, v101);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v102 + 8))(v104, v101);
  }
  if (*(_DWORD *)(v102 + 84))
    v108 = *(_QWORD *)(v102 + 64);
  else
    v108 = *(_QWORD *)(v102 + 64) + 1;
  memcpy(v104, v105, v108);
  return a1;
}

_QWORD *initializeWithTake for FileDialogConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  size_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  size_t v59;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = *((unsigned __int8 *)a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
      v12 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v12 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  else
  {
    v12 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v9) = v12;
  v13 = (char *)a1 + v9 + 1;
  v14 = (char *)a2 + v9 + 1;
  v15 = (unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (unint64_t)(v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v15 = v17;
  v18 = (unint64_t)(v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = (unint64_t)(v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)v19;
  v21 = *(_OWORD *)(v19 + 16);
  *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
  *(_OWORD *)v18 = v20;
  *(_OWORD *)(v18 + 16) = v21;
  v22 = (unint64_t)(v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  v23 = (unint64_t)(v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)v23;
  v25 = *(_OWORD *)(v23 + 16);
  *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
  *(_OWORD *)v22 = v24;
  *(_OWORD *)(v22 + 16) = v25;
  v26 = (unint64_t)(v13 + 111) & 0xFFFFFFFFFFFFFFF8;
  v27 = (unint64_t)(v14 + 111) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_OWORD *)v27;
  v29 = *(_OWORD *)(v27 + 16);
  *(_BYTE *)(v26 + 32) = *(_BYTE *)(v27 + 32);
  *(_OWORD *)v26 = v28;
  *(_OWORD *)(v26 + 16) = v29;
  type metadata accessor for Predicate<Pack{URL}>();
  v31 = v30;
  v32 = *(_QWORD *)(v30 - 8);
  v33 = *(_DWORD *)(v32 + 80) & 0xF8;
  v34 = v33 + 40;
  v35 = v33 + 40 + v26;
  v36 = ~v33 & 0xFFFFFFFFFFFFFFF8;
  v37 = (_QWORD *)(v35 & v36);
  v38 = (_QWORD *)((v34 + v27) & v36);
  if (*(_DWORD *)(v32 + 84))
    v39 = *(_QWORD *)(v32 + 64);
  else
    v39 = *(_QWORD *)(v32 + 64) + 1;
  if (v39 <= 8)
    v40 = 8;
  else
    v40 = v39;
  v41 = *((unsigned __int8 *)v38 + v40);
  if (v41 >= 2)
  {
    if (v40 <= 3)
      v42 = v40;
    else
      v42 = 4;
    __asm { BR              X12 }
  }
  if (v41 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v38, 1, v30))
    {
      memcpy(v37, v38, v39);
      v43 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v32 + 32))(v37, v38, v31);
      v43 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v37, 0, 1, v31);
    }
  }
  else
  {
    v43 = 0;
    *v37 = *v38;
  }
  *((_BYTE *)v37 + v40) = v43;
  v44 = (char *)v37 + v40 + 1;
  v45 = (char *)v38 + v40 + 1;
  v46 = (unint64_t)(v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = (unint64_t)(v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = (unint64_t)(v44 + 23) & 0xFFFFFFFFFFFFFFF8;
  v50 = (unint64_t)(v45 + 23) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)v50;
  *(_WORD *)(v49 + 8) = *(_WORD *)(v50 + 8);
  *(_QWORD *)v49 = v51;
  v52 = (_QWORD *)((v49 + 17) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)((v50 + 17) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = *(_QWORD *)(a3 + 24);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(unsigned __int8 *)(v55 + 80);
  v57 = (void *)(((unint64_t)v52 + v56 + 8) & ~v56);
  v58 = (const void *)(((unint64_t)v53 + v56 + 8) & ~v56);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v58, 1, v54))
  {
    if (*(_DWORD *)(v55 + 84))
      v59 = *(_QWORD *)(v55 + 64);
    else
      v59 = *(_QWORD *)(v55 + 64) + 1;
    memcpy(v57, v58, v59);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v55 + 32))(v57, v58, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v57, 0, 1, v54);
  }
  return a1;
}

_QWORD *assignWithTake for FileDialogConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t (*v96)(void *, uint64_t, uint64_t);
  int v97;
  int v98;
  size_t v99;

  if (a1 != a2)
  {
    v6 = type metadata accessor for URL();
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_DWORD *)(v7 + 84))
      v8 = *(_QWORD *)(v7 + 64);
    else
      v8 = *(_QWORD *)(v7 + 64) + 1;
    if (v8 <= 8)
      v9 = 8;
    else
      v9 = v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    }
    else
    {
      swift_release();
    }
    v12 = *((unsigned __int8 *)a2 + v9);
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
        v14 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
        v14 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
    }
    else
    {
      v14 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v9) = v14;
  }
  v15 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v17;
  if (v17 <= 8)
    v17 = 8;
  v18 = v17 + 1;
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = ((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_BYTE *)(v22 + 16);
  v24 = *(_QWORD *)v21;
  v25 = *(_QWORD *)(v21 + 8);
  v26 = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v23;
  outlined consume of Environment<String?>.Content(v24, v25, v26);
  v27 = (unint64_t)(v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_BYTE *)(v27 + 32);
  v29 = (unint64_t)(v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  v31 = *(_QWORD *)(v29 + 8);
  v32 = *(_QWORD *)(v29 + 16);
  v33 = *(_QWORD *)(v29 + 24);
  v34 = *(_BYTE *)(v29 + 32);
  v35 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v27;
  *(_OWORD *)(v29 + 16) = v35;
  *(_BYTE *)(v29 + 32) = v28;
  outlined consume of Environment<Text?>.Content(v30, v31, v32, v33, v34);
  v36 = (unint64_t)(v20 + 71) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_BYTE *)(v36 + 32);
  v38 = (unint64_t)(v19 + 71) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)v38;
  v40 = *(_QWORD *)(v38 + 8);
  v41 = *(_QWORD *)(v38 + 16);
  v42 = *(_QWORD *)(v38 + 24);
  v43 = *(_BYTE *)(v38 + 32);
  v44 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)v38 = *(_OWORD *)v36;
  *(_OWORD *)(v38 + 16) = v44;
  *(_BYTE *)(v38 + 32) = v37;
  outlined consume of Environment<Text?>.Content(v39, v40, v41, v42, v43);
  v45 = (unint64_t)(v20 + 111) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_BYTE *)(v45 + 32);
  v47 = (unint64_t)(v19 + 111) & 0xFFFFFFFFFFFFFFF8;
  v48 = *(_QWORD *)v47;
  v49 = *(_QWORD *)(v47 + 8);
  v50 = *(_QWORD *)(v47 + 16);
  v51 = *(_QWORD *)(v47 + 24);
  v52 = *(_BYTE *)(v47 + 32);
  v53 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v45;
  *(_OWORD *)(v47 + 16) = v53;
  *(_BYTE *)(v47 + 32) = v46;
  outlined consume of Environment<Text?>.Content(v48, v49, v50, v51, v52);
  type metadata accessor for Predicate<Pack{URL}>();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(_DWORD *)(v55 + 84);
  v57 = *(_DWORD *)(v55 + 80) & 0xF8;
  v58 = v57 + 40;
  v59 = v57 + 40 + v47;
  v60 = ~v57 & 0xFFFFFFFFFFFFFFF8;
  v61 = (_QWORD *)(v59 & v60);
  v62 = v58 + v45;
  v63 = (_QWORD *)(v62 & v60);
  v64 = *(_QWORD *)(v55 + 64);
  if ((v59 & v60) != (v62 & v60))
  {
    v65 = v54;
    if (v56)
      v66 = *(_QWORD *)(v55 + 64);
    else
      v66 = v64 + 1;
    if (v66 <= 8)
      v67 = 8;
    else
      v67 = v66;
    v68 = *((unsigned __int8 *)v61 + v67);
    if (v68 >= 2)
    {
      if (v67 <= 3)
        v69 = v67;
      else
        v69 = 4;
      __asm { BR              X12 }
    }
    if (v68 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v55 + 48))(v61, 1, v54))
        (*(void (**)(_QWORD *, uint64_t))(v55 + 8))(v61, v65);
    }
    else
    {
      swift_release();
    }
    v70 = *((unsigned __int8 *)v63 + v67);
    if (v70 >= 2)
    {
      if (v67 <= 3)
        v71 = v67;
      else
        v71 = 4;
      __asm { BR              X12 }
    }
    if (v70 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v55 + 48))(v63, 1, v65))
      {
        memcpy(v61, v63, v66);
        v72 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v55 + 32))(v61, v63, v65);
        v72 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v61, 0, 1, v65);
      }
    }
    else
    {
      v72 = 0;
      *v61 = *v63;
    }
    *((_BYTE *)v61 + v67) = v72;
  }
  if (v56)
    v73 = v64;
  else
    v73 = v64 + 1;
  if (v73 <= 8)
    v73 = 8;
  v74 = v73 + 1;
  v75 = (char *)v61 + v74;
  v76 = (char *)v63 + v74;
  v77 = (unint64_t)(v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  v78 = (unint64_t)(v76 + 7) & 0xFFFFFFFFFFFFFFF8;
  v79 = *(_QWORD *)v78;
  LOBYTE(v78) = *(_BYTE *)(v78 + 8);
  v80 = *(_QWORD *)v77;
  v81 = *(_BYTE *)(v77 + 8);
  *(_QWORD *)v77 = v79;
  *(_BYTE *)(v77 + 8) = v78;
  outlined consume of Environment<Bool>.Content(v80, v81);
  v82 = (unint64_t)(v75 + 23) & 0xFFFFFFFFFFFFFFF8;
  v83 = (unint64_t)(v76 + 23) & 0xFFFFFFFFFFFFFFF8;
  v84 = *(_BYTE *)(v83 + 8);
  v85 = *(_BYTE *)(v83 + 9);
  v86 = *(_QWORD *)v82;
  v87 = *(_BYTE *)(v82 + 9);
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v88 = *(unsigned __int8 *)(v82 + 8);
  *(_BYTE *)(v82 + 8) = v84;
  *(_BYTE *)(v82 + 9) = v85;
  outlined consume of Environment<CGFloat?>.Content(v86, v88, v87);
  v89 = (_QWORD *)((v82 + 17) & 0xFFFFFFFFFFFFFFF8);
  v90 = (_QWORD *)((v83 + 17) & 0xFFFFFFFFFFFFFFF8);
  *v89 = *v90;
  v91 = *(_QWORD *)(a3 + 24);
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(unsigned __int8 *)(v92 + 80);
  v94 = (void *)(((unint64_t)v89 + v93 + 8) & ~v93);
  v95 = (void *)(((unint64_t)v90 + v93 + 8) & ~v93);
  v96 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
  v97 = v96(v94, 1, v91);
  v98 = v96(v95, 1, v91);
  if (v97)
  {
    if (!v98)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 32))(v94, v95, v91);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v94, 0, 1, v91);
      return a1;
    }
  }
  else
  {
    if (!v98)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 40))(v94, v95, v91);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v92 + 8))(v94, v91);
  }
  if (*(_DWORD *)(v92 + 84))
    v99 = *(_QWORD *)(v92 + 64);
  else
    v99 = *(_QWORD *)(v92 + 64) + 1;
  memcpy(v94, v95, v99);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDialogConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int v31;

  v6 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  type metadata accessor for Predicate<Pack{URL}>();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = *(_QWORD *)(v9 - 8);
  if (v7)
    v15 = v8;
  else
    v15 = v8 + 1;
  if (v15 <= 8)
    v15 = 8;
  if (*(_DWORD *)(v14 + 84))
    v16 = *(_QWORD *)(v14 + 64);
  else
    v16 = *(_QWORD *)(v14 + 64) + 1;
  if (v16 <= 8)
    v16 = 8;
  if (v11)
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  if (!a2)
    return 0;
  v18 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v19 = v16 + 24;
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = v20 + 8;
  if (a2 <= v13)
    goto LABEL_40;
  v22 = v17
      + ((v21
        + ((((v19 + (((v15 & 0xFFFFFFFFFFFFFFF8) + v18 + 145) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v20);
  v23 = 8 * v22;
  if (v22 <= 3)
  {
    v26 = ((a2 - v13 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v26))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_40;
      goto LABEL_31;
    }
    if (v26 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_40;
      goto LABEL_31;
    }
    if (v26 < 2)
    {
LABEL_40:
      v29 = (unint64_t *)((((v19 + ((((a1 + v15 + 112) & 0xFFFFFFFFFFFFFFF8) + v18 + 33) & ~v18)) & 0xFFFFFFFFFFFFFFF8)
                                + 17) & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0x80000000) != 0)
      {
        v31 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v29 + v21) & ~v20);
        if (v31 >= 2)
          return v31 - 1;
        else
          return 0;
      }
      else
      {
        v30 = *v29;
        if (v30 >= 0xFFFFFFFF)
          LODWORD(v30) = -1;
        return (v30 + 1);
      }
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_40;
LABEL_31:
  v27 = (v24 - 1) << v23;
  if (v22 > 3)
    v27 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v28 = v22;
    else
      v28 = 4;
    __asm { BR              X12 }
  }
  return v13 + v27 + 1;
}

void storeEnumTagSinglePayload for FileDialogConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;

  v8 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(v8 + 64);
  type metadata accessor for Predicate<Pack{URL}>();
  v12 = 0u;
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = v14 - 1;
  if (!v14)
    v15 = 0;
  if (v15 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  else
    v16 = v15;
  v17 = *(_QWORD *)(v11 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  if (v9)
    v19 = v10;
  else
    v19 = v10 + 1;
  if (v19 <= 8)
    v19 = 8;
  v21 = v17 + 80;
  v20 = *(_DWORD *)(v17 + 80);
  if (!*(_DWORD *)(v21 + 4))
    ++v18;
  if (v18 <= 8)
    v18 = 8;
  v22 = v20 & 0xF8 | 7;
  v23 = v18 + 24;
  v24 = *(unsigned __int8 *)(v13 + 80);
  if (v14)
    v25 = *(_QWORD *)(v13 + 64);
  else
    v25 = *(_QWORD *)(v13 + 64) + 1;
  v26 = ((v24 + 8 + ((((v23 + (((v19 & 0xFFFFFFF8) + v22 + 145) & ~(_DWORD)v22)) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8)) & ~(_DWORD)v24)
      + v25;
  if (a3 > v16)
  {
    if (v26 > 3)
    {
      v12 = 1u;
      if (v16 >= a2)
LABEL_34:
        __asm { BR              X0 }
LABEL_27:
      v28 = ~v16 + a2;
      if (v26 < 4)
      {
        if (v26)
        {
          v29 = v28 & ~(-1 << (8
                             * (((v24 + 8 + ((((v23 + (((v19 & 0xF8) + v22 - 111) & ~(_BYTE)v22)) & 0xF8) + 17) & 0xF8)) & ~(_BYTE)v24)
                              + v25)));
          bzero(a1, ((v24+ 8+ ((((v23 + (((v19 & 0xFFFFFFFFFFFFFFF8) + v22 + 145) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v24)+ v25);
          if (v26 == 3)
          {
            *(_WORD *)a1 = v29;
            a1[2] = BYTE2(v29);
          }
          else if (v26 == 2)
          {
            *(_WORD *)a1 = v29;
          }
          else
          {
            *a1 = v29;
          }
        }
      }
      else
      {
        bzero(a1, ((v24+ 8+ ((((v23 + (((v19 & 0xFFFFFFFFFFFFFFF8) + v22 + 145) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v24)+ v25);
        *(_DWORD *)a1 = v28;
      }
      __asm { BR              X10 }
    }
    v27 = ((a3 - v16 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
    if (HIWORD(v27))
    {
      v12 = 4u;
      if (v16 >= a2)
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v27 >= 0x100)
      v12 = 2;
    else
      v12 = v27 > 1;
  }
  if (v16 >= a2)
    goto LABEL_34;
  goto LABEL_27;
}

void sub_1873548A8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1873548B0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_1873548D4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1873548DC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1873548EC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void type metadata accessor for FileDialogConfiguration()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FileDialogConfiguration<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for URL?, (uint64_t)static EnvironmentValues.FileDialogDefaultDirectoryKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.FileDialogCustomizationIDKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v4 = a1[1];
  v5 = a2[1];
  result = (v4 | v5) == 0;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*a1 == *a2 && v4 == v5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.FileDialogMessageKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = a2[3];
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = a2[2] & 1;
  outlined copy of Text.Storage(*a2, v5, v7);
  swift_bridgeObjectRetain();
  v8 = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v6, v5, v7);
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  v7 = __swift_project_value_buffer(v6, (uint64_t)a3);
  v8 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogURLEnabledKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?, (uint64_t)static EnvironmentValues.FileDialogURLEnabledKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, a4, a2);
}

uint64_t FileDialogConfiguration.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  _OWORD v78[2];
  char v79;
  _OWORD v80[2];
  char v81;
  _OWORD v82[2];
  char v83;
  _BYTE v84[40];
  _BYTE v85[40];
  _BYTE v86[48];

  v3 = v2;
  v72 = a2;
  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v70 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = type metadata accessor for Optional();
  v71 = swift_allocBox();
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, v3 + *(int *)(a1 + 84), v13);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  if (!v16(v15, 1, v12))
  {
    specialized Environment.wrappedValue.getter((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(a1 + 40) + 40))(v11, v12);
  }
  v17 = v16(v15, 1, v12);
  *(_QWORD *)&v73 = v3;
  if (!v17)
  {
    v18 = v3 + *(int *)(a1 + 52);
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_BYTE *)(v18 + 16);
    outlined copy of Environment<String?>.Content(*(_QWORD *)v18, v20, v21);
    v22 = specialized Environment.wrappedValue.getter(v19, v20, v21);
    v24 = v23;
    outlined consume of Environment<String?>.Content(v19, v20, v21);
    v25 = v22;
    v3 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(v25, v24, v12);
  }
  if (!v16(v15, 1, v12))
  {
    v26 = v3 + *(int *)(a1 + 56);
    v27 = *(_OWORD *)(v26 + 16);
    v82[0] = *(_OWORD *)v26;
    v82[1] = v27;
    v83 = *(_BYTE *)(v26 + 32);
    outlined init with take of Environment<Text?>.Content((uint64_t)v82, (uint64_t)v84);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<Text?>.Content);
    v28 = specialized Environment.wrappedValue.getter();
    v30 = v29;
    v32 = v31;
    v34 = v33;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<Text?>.Content);
    v35 = v34;
    v3 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 64))(v28, v30, v32, v35, v12);
  }
  if (!v16(v15, 1, v12))
  {
    v36 = v3 + *(int *)(a1 + 60);
    v37 = *(_OWORD *)(v36 + 16);
    v80[0] = *(_OWORD *)v36;
    v80[1] = v37;
    v81 = *(_BYTE *)(v36 + 32);
    outlined init with take of Environment<Text?>.Content((uint64_t)v80, (uint64_t)v85);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<Text?>.Content);
    v38 = specialized Environment.wrappedValue.getter();
    v40 = v39;
    v42 = v41;
    v44 = v43;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<Text?>.Content);
    v45 = v44;
    v3 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 88))(v38, v40, v42, v45, v12);
  }
  if (!v16(v15, 1, v12))
  {
    v46 = v3 + *(int *)(a1 + 64);
    v47 = *(_OWORD *)(v46 + 16);
    v78[0] = *(_OWORD *)v46;
    v78[1] = v47;
    v79 = *(_BYTE *)(v46 + 32);
    outlined init with take of Environment<Text?>.Content((uint64_t)v78, (uint64_t)v86);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<Text?>.Content);
    v48 = specialized Environment.wrappedValue.getter();
    v50 = v49;
    v52 = v51;
    v54 = v53;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<Text?>.Content);
    v55 = v54;
    v3 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 112))(v48, v50, v52, v55, v12);
  }
  if (!v16(v15, 1, v12))
  {
    v56 = v70;
    specialized Environment.wrappedValue.getter(v70);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 136))(v56, v12);
  }
  if (!v16(v15, 1, v12))
  {
    v57 = v3 + *(int *)(a1 + 72);
    v58 = *(_QWORD *)v57;
    v59 = *(_BYTE *)(v57 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v57, v59);
    v60 = specialized Environment.wrappedValue.getter(v58, v59);
    outlined consume of Environment<Bool>.Content(v58, v59);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 160))(v60, v12);
  }
  if (!v16(v15, 1, v12))
  {
    v61 = v3 + *(int *)(a1 + 76);
    v62 = *(_QWORD *)v61;
    v63 = *(unsigned __int8 *)(v61 + 8);
    v64 = *(unsigned __int8 *)(v61 + 9);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v61, v63, *(_BYTE *)(v61 + 9));
    specialized Environment.wrappedValue.getter(v62, v63 | (v64 << 8), (uint64_t)&v76);
    outlined consume of Environment<CGFloat?>.Content(v62, v63, v64);
    v74 = v76;
    v75 = v77;
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a1 + 40) + 184))(&v74, v12);
  }
  v65 = *(_QWORD *)(a1 + 16);
  v66 = swift_allocObject();
  *(_QWORD *)(v66 + 16) = v65;
  *(_QWORD *)(v66 + 24) = v12;
  v73 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v66 + 32) = v73;
  *(_QWORD *)(v66 + 48) = v71;
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogConfiguration<A, B>, a1);
  v67 = type metadata accessor for _ViewModifier_Content();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v67);
  View.transformPreference<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in FileDialogConfiguration.body(content:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  v4 = swift_projectBox();
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v4, v2);
}

uint64_t sub_187355190()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileDialogConfiguration.body(content:)(uint64_t a1)
{
  return closure #1 in FileDialogConfiguration.body(content:)(a1);
}

uint64_t outlined init with take of Environment<Text?>.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(0, &lazy cache variable for type metadata for Environment<Text?>.Content, &lazy cache variable for type metadata for Text?, MEMORY[0x1E0CE6CF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for EnvironmentValues.FileDialogDefaultDirectoryKey()
{
  return &unk_1E1AC3D48;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileDialogCustomizationIDKey()
{
  return &type metadata for EnvironmentValues.FileDialogCustomizationIDKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileDialogMessageKey()
{
  return &type metadata for EnvironmentValues.FileDialogMessageKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileDialogConfirmationLabelKey()
{
  return &type metadata for EnvironmentValues.FileDialogConfirmationLabelKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileExporterFilenameLabelKey()
{
  return &type metadata for EnvironmentValues.FileExporterFilenameLabelKey;
}

void *type metadata accessor for EnvironmentValues.FileDialogURLEnabledKey()
{
  return &unk_1E1AC39B0;
}

void *type metadata accessor for EnvironmentValues.FileDialogImportsUnresolvedAliasesKey()
{
  return &unk_1E1AC3F80;
}

void *type metadata accessor for EnvironmentValues.FileDialogBrowserOptionsKey()
{
  return &unk_1E1AC3CA8;
}

void sub_1873552A8()
{
  type metadata accessor for FileDialogConfiguration();
}

uint64_t sub_1873552D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[12];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogConfiguration<A, B>, a1);
  v1 = type metadata accessor for _ViewModifier_Content();
  v2 = type metadata accessor for _PreferenceTransformModifier();
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v5[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *);
  uint64_t v31;

  v28 = a5;
  v29 = a2;
  v30 = a1;
  v31 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v10, v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v20);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v23 + 16))(v22, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v31, 1, 1, a4);
  v27 = a3;
  v26 = v28;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v22, v14);
  v30(v19, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v26, v12, v27);
  return result;
}

uint64_t SceneStorage.init<A>(key:transform:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v16 = (int *)type metadata accessor for SceneStorage(0, a5, a3, a4);
  *((_QWORD *)a8 + 2) = 0;
  *((_QWORD *)a8 + 3) = 0;
  *(_QWORD *)&a8[v16[9]] = 0;
  *(_QWORD *)a8 = a1;
  *((_QWORD *)a8 + 1) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(&a8[v16[8]], a4, a5);
  type metadata accessor for TransformBox(0, a6, a7, v17);
  v18 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 112) - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)v18 + 128), a3);
  *(_QWORD *)&a8[v16[10]] = v18;
  return result;
}

void SceneStorageValues.AnyEntry.encode(into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *SceneStorageValues.Entry.__allocating_init(_:_:location:transformBox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  swift_retain();
  swift_bridgeObjectRelease();
  v12[6] = a5;
  v12[7] = a6;
  swift_release();
  return v12;
}

uint64_t SceneStorageValues.Entry.encode(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;
  uint64_t v11[4];

  v3 = v1[7];
  v11[3] = *(_QWORD *)(*v1 + 104);
  __swift_allocate_boxed_opaque_existential_1(v11);
  swift_retain();
  swift_retain();
  StoredLocationBase.get()();
  swift_release();
  v4 = (void *)v1[5];
  v6 = v1[2];
  v5 = (void *)v1[3];
  if (v4)
  {
    v10 = v1[4];
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 47;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = v6;
    v8._object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v10;
    v5 = v4;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, void *))(*(_QWORD *)v3 + 96))(v11, a1, v6, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t SceneStorageValues.Entry.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t SceneStorageValues.Entry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SceneStorageValues.Entry.__deallocating_deinit()
{
  SceneStorageValues.Entry.deinit();
  return swift_deallocClassInstance();
}

uint64_t SceneStorageValues.initialValue<A>(_:key:transformBox:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v19;
  char v20;
  void (*v21)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  char v33;

  v31 = a5;
  v30 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v10);
  v12 = (char *)&v27 - v11;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = 0;
  v29 = v5;
  v18 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 88);
  v19 = swift_bridgeObjectRetain();
  v18(v32, v19, a1, a2, &v33);
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v20 = swift_dynamicCast();
  v21 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v13 + 56);
  if ((v20 & 1) != 0)
  {
    v22 = v29;
    v21(v12, 0, 1, a4);
    v23 = *(void (**)(_QWORD, _QWORD, _QWORD))(v13 + 32);
    v23(v17, v12, a4);
    v24 = v31;
    if (v33 == 1)
    {
      --*(_QWORD *)(v22 + 32);
      v23(v24, v17, a4);
      v25 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
      v25 = 1;
    }
  }
  else
  {
    v25 = 1;
    v21(v12, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v30);
    v24 = v31;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v24, v25, 1, a4);
}

uint64_t SceneStorageValues.getLocation<A>(_:domain:key:transformBox:signal:makeLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *), uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v11 = v10;
  v44[2] = a1;
  v19 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v44 - v21;
  v50 = a2;
  v51 = a7;
  v48 = a8;
  v49 = a4;
  v46 = v23;
  v47 = a6;
  v45 = v24;
  if (a3)
  {
    v53 = a2;
    v54 = a3;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = 47;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = a4;
    v26._object = a5;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a4 = v53;
    v27 = v54;
  }
  else
  {
    swift_bridgeObjectRetain();
    v27 = (uint64_t)a5;
  }
  swift_beginAccess();
  v28 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16);
  v44[1] = v11 + 24;
  if (!v28)
  {
    v29 = a4;
    swift_endAccess();
LABEL_11:
    v36 = v29;
    v37 = v29;
    v38 = v47;
    SceneStorageValues.initialValue<A>(_:key:transformBox:)(v37, v27, v47, a10, (uint64_t)v22);
    v35 = v48(v22);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v46);
    type metadata accessor for SceneStorageValues.Entry(0, a10, v39, v40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v41 = SceneStorageValues.Entry.__allocating_init(_:_:location:transformBox:)(v49, (uint64_t)a5, v50, a3, v35, v38);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v41, v36, v27, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 24) = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v29 = a4;
  specialized __RawDictionaryStorage.find<A>(_:)(a4, v27);
  if ((v30 & 1) == 0)
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  type metadata accessor for SceneStorageValues.Entry(0, a10, v31, v32);
  v33 = swift_dynamicCastClass();
  if (!v33)
  {
    swift_release();
    goto LABEL_11;
  }
  v34 = v33;
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v34 + 48);
  swift_retain();
  swift_release();
LABEL_12:
  type metadata accessor for GraphHost();
  MEMORY[0x18D75C118]();
  ObservableLocation.addObserver(host:signal:)();
  swift_release();
  return v35;
}

uint64_t SceneStorageValues.removeObserver<A>(_:domain:key:signal:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  Swift::String v11;
  Swift::String v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  if (a3)
  {
    swift_bridgeObjectRetain();
    v11._countAndFlagsBits = 47;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = a4;
    v12._object = a5;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a4 = a2;
    a5 = a3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v7 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a4, (uint64_t)a5);
    if ((v13 & 1) != 0)
    {
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease_n();
      type metadata accessor for SceneStorageValues.Entry(0, a7, v14, v15);
      if (swift_dynamicCastClass())
      {
        swift_retain();
        swift_release();
        ObservableLocation.removeObserver(signal:)();
      }
      return swift_release();
    }
    else
    {
      swift_endAccess();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
}

uint64_t SceneStorageValues.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak FallbackResponderProvider?(v0 + 40);
  return swift_deallocClassInstance();
}

uint64_t EnvironmentValues.sceneStorageValues.getter()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t (*v2)(_QWORD);
  _BYTE v4[16];

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v4[8] & 1) != 0)
  {
    Strong = 0;
    v2 = (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<SceneStorageValues>?;
  }
  else
  {
    Strong = swift_weakLoadStrong();
    v2 = (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<SceneStorageValues>;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, v2);
  return Strong;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance SceneStorageValuesKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of WeakBox<SceneStorageValues>?((uint64_t)&static SceneStorageValuesKey.defaultValue, a1);
}

uint64_t View.sceneStorageDomain(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.sceneStorageDomain.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.sceneStorageDomain : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.sceneStorageDomain.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_187356290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.sceneStorageDomain.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.sceneStorageDomain : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)a1[1];
  swift_bridgeObjectRetain();
  return EnvironmentValues.sceneStorageDomain.setter(v1, v2);
}

uint64_t sub_187356304(uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)a1[1];
  swift_bridgeObjectRetain();
  return EnvironmentValues.sceneStorageDomain.setter(v1, v2);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.sceneStorageDomain.setter(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  if (a2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    if (v5)
    {
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release();
    if (v9)
    {
      v6._countAndFlagsBits = 47;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = a1;
      v7._object = a2;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.setter();
      if (v5)
        goto LABEL_9;
LABEL_10:
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (!*(_QWORD *)(v2 + 8))
    goto LABEL_10;
LABEL_9:
  swift_retain();
  swift_retain();
  PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void (*EnvironmentValues.sceneStorageDomain.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return EnvironmentValues.sceneStorageDomain.modify;
}

void EnvironmentValues.sceneStorageDomain.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  v4 = **a1;
  v3 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    EnvironmentValues.sceneStorageDomain.setter(v4, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    EnvironmentValues.sceneStorageDomain.setter(**a1, v3);
  }
  free(v2);
}

uint64_t SceneStorage._key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneStorage._key.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SceneStorage._key.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneStorage._domain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SceneStorage._domain.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t SceneStorage._value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 32), a1);
}

uint64_t (*SceneStorage._value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._location.getter()
{
  return swift_retain();
}

uint64_t SceneStorage._location.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 36);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*SceneStorage._location.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._transformBox.getter()
{
  return swift_retain();
}

uint64_t SceneStorage._transformBox.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 40);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*SceneStorage._transformBox.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TransformBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 112) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128), a1);
  return v2;
}

uint64_t SceneStorage.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SceneStorage.getValue(forReading:)(1, a1, a2);
}

uint64_t SceneStorage.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized SceneStorage.wrappedValue.setter(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t SceneStorage.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;

  if (!*(_QWORD *)(v3 + *(int *)(a2 + 36)))
  {
    static os_log_type_t.fault.getter();
    v7 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v3 + *(int *)(a2 + 32));
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if ((static GraphHost.isUpdating.getter() & 1) != 0)
  {
    if ((a1 & 1) != 0)
      dispatch thunk of AnyLocation.wasRead.setter();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v3 + *(int *)(a2 + 32));
  }
  dispatch thunk of AnyLocation.get()();
  return swift_release();
}

void (*SceneStorage.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  SceneStorage.getValue(forReading:)(1, a2, (uint64_t)v9);
  return SceneStorage.wrappedValue.modify;
}

void SceneStorage.wrappedValue.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = *v2;
    v3 = v2[1];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    if (*(_QWORD *)(v3 + *(int *)(v4 + 36)))
      dispatch thunk of AnyLocation.set(_:transaction:)();
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    v7 = v2[2];
    v8 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v8(v6, v7);
    v8(v5, v7);
  }
  else
  {
    if (*(_QWORD *)(v2[1] + *(int *)(*v2 + 36)))
      dispatch thunk of AnyLocation.set(_:transaction:)();
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    (*(void (**)(void *, _QWORD))(v2[3] + 8))(v5, v2[2]);
  }
  free(v5);
  free(v6);
  free(v2);
}

uint64_t SceneStorage.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v20 - v12;
  SceneStorage.getValue(forReading:)(0, a1, (uint64_t)&v20 - v12);
  v14 = *(uint64_t **)(v3 + *(int *)(a1 + 36));
  if (v14)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v13, v6);
    swift_retain();
    v15 = *v14;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = v14;
    v16 = *(_QWORD *)(v15 + *MEMORY[0x1E0CE0F08]);
    v17 = type metadata accessor for Binding();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(&a3[*(int *)(v17 + 32)], v9, v16);
  }
  else
  {
    static os_log_type_t.fault.getter();
    v18 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
}

uint64_t static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t SceneStorage.Box.update(property:phase:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *Value;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WeakValue;
  char v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v3;
  v50 = *(_QWORD *)(a3 + 16);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v46) = *(_DWORD *)v4;
  v8 = *(_BYTE *)(v4 + 8);
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v4 + 32);
  v12 = *(void **)(v4 + 40);
  v45 = *(_QWORD *)(v4 + 48);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v17 = *Value;
  v18 = Value[1];
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 16) = v17;
    *(_QWORD *)(v4 + 24) = v18;
    *(_BYTE *)(v4 + 8) = 1;
    goto LABEL_15;
  }
  v47 = *Value;
  if ((v14 & 1) == 0)
    goto LABEL_4;
  if (v10)
  {
    if (v18)
    {
      v15 = v47;
      v19 = v9 == v47 && v10 == v18;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_4:
        v17 = v9;
        v18 = v10;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  if (v18)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    static os_log_type_t.fault.getter();
    v20 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    SceneStorage.Box.reset()(a3);
    swift_bridgeObjectRelease();
    v17 = v47;
    *(_QWORD *)(v4 + 16) = v47;
    *(_QWORD *)(v4 + 24) = v18;
    goto LABEL_15;
  }
  v17 = v9;
LABEL_15:
  v21 = v50;
  v23 = *a1;
  v22 = (void *)a1[1];
  if (v12)
  {
    if (v11 == v23 && v12 == v22)
    {
      v23 = v11;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      MEMORY[0x18D75AC90](0xD000000000000056, 0x8000000187BDDE30);
    }
  }
  else
  {
    *(_QWORD *)(v4 + 32) = v23;
    *(_QWORD *)(v4 + 40) = v22;
    swift_bridgeObjectRetain();
  }
  v24 = *(_QWORD *)(v4 + 56);
  LODWORD(v50) = v24 == 0;
  if (!v24)
  {
    v47 = v17;
    v39 = type metadata accessor for SceneStorage(0, v21, v15, v16);
    if (*(uint64_t *)((char *)a1 + *(int *)(v39 + 36))
      && (type metadata accessor for ObservableLocation(), (v40 = swift_dynamicCastClass()) != 0))
    {
      *(_QWORD *)(v4 + 56) = v40;
      swift_retain();
    }
    else
    {
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for SceneStorageValues?, v38, (uint64_t (*)(uint64_t))type metadata accessor for SceneStorageValues, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v41 = (_QWORD *)AGGraphGetValue();
      if (!*v41)
      {
        MEMORY[0x18D75AC90](0xD00000000000006CLL, 0x8000000187BDDE90);
        v37 = 0;
        return v37 & 1;
      }
      v46 = &v45;
      v43 = *(uint64_t *)((char *)a1 + *(int *)(v39 + 40));
      MEMORY[0x1E0C80A78](v41, v42);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v44 = SceneStorageValues.getLocation<A>(_:domain:key:transformBox:signal:makeLocation:)(v21, v47, v18, v23, v22, v43, v45, (uint64_t (*)(char *))partial apply for closure #1 in SceneStorage.Box.update(property:phase:), (uint64_t)(&v45 - 4), v21);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      *(_QWORD *)(v4 + 56) = v44;
    }
  }
  WeakValue = AGGraphGetWeakValue();
  v27 = v26;
  v28 = v48;
  StoredLocationBase.updateValue.getter();
  v31 = type metadata accessor for SceneStorage(0, v21, v29, v30);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 40))((char *)a1 + *(int *)(v31 + 32), v28, v21);
  v33 = *(_QWORD *)(v4 + 56);
  if (v33)
  {
    v34 = *(int *)(v31 + 36);
    swift_retain();
    swift_release();
    *(uint64_t *)((char *)a1 + v34) = v33;
    v36 = *(_QWORD *)(v4 + 16);
    v35 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = v36;
    a1[3] = v35;
    if (WeakValue)
    {
      v37 = v50;
      if ((v27 & 1) != 0)
        v37 = (v24 == 0) | StoredLocationBase.wasRead.getter();
    }
    else
    {
      v37 = v50;
    }
    return v37 & 1;
  }
  __break(1u);
  return result;
}

_QWORD *SceneStorage.Box.reset()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;

  result = (_QWORD *)swift_release();
  v1[7] = 0;
  v5 = (void *)v1[5];
  if (v5)
  {
    v6 = v1[4];
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for SceneStorageValues?, v4, (uint64_t (*)(uint64_t))type metadata accessor for SceneStorageValues, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    result = (_QWORD *)AGGraphGetValue();
    if (*result)
    {
      v7 = v1[6];
      v10 = v1 + 2;
      v8 = v1[2];
      v9 = (void *)v10[1];
      v11 = *(_QWORD *)(a1 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      SceneStorageValues.removeObserver<A>(_:domain:key:signal:)(v11, v8, v9, v6, v5, v7, v11);
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in SceneStorage.Box.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
  {
    v19 = type metadata accessor for SceneStorage(0, a3, v17, v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a2 + *(int *)(v19 + 32), a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v10, a3);
  }
  type metadata accessor for ObservableLocation();
  swift_allocObject();
  return ObservableLocation.init(initialValue:)();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance SceneStorage<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16));
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Bool>>, &lazy cache variable for type metadata for PropertyListTransform<Bool>, MEMORY[0x1E0DEAFA0]);
  result = swift_allocObject();
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = a1;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = result;
  return result;
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Int>>, &lazy cache variable for type metadata for PropertyListTransform<Int>, MEMORY[0x1E0DEB418]);
  result = swift_allocObject();
  *a4 = a2;
  a4[1] = a3;
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = a1;
  a4[5] = 0;
  a4[6] = result;
  return result;
}

{
  return SceneStorage.init<A>(wrappedValue:_:)(a1, a2, a3, &lazy cache variable for type metadata for SceneStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], &lazy cache variable for type metadata for TransformBox<PropertyListTransform<URL>>, (uint64_t (*)(uint64_t))type metadata accessor for PropertyListTransform<URL>, a4);
}

{
  return SceneStorage.init<A>(wrappedValue:_:)(a1, a2, a3, &lazy cache variable for type metadata for SceneStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Date>>, (uint64_t (*)(uint64_t))type metadata accessor for PropertyListTransform<Date>, a4);
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Double>>, &lazy cache variable for type metadata for PropertyListTransform<Double>, MEMORY[0x1E0DEB070]);
  result = swift_allocObject();
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 32) = a4;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = result;
  return result;
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<String>>, &lazy cache variable for type metadata for PropertyListTransform<String>, MEMORY[0x1E0DEA968]);
  result = swift_allocObject();
  *a5 = a3;
  a5[1] = a4;
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = a1;
  a5[5] = a2;
  a5[6] = 0;
  a5[7] = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Data>>, &lazy cache variable for type metadata for PropertyListTransform<Data>, MEMORY[0x1E0CB0338]);
  result = swift_allocObject();
  *a5 = a3;
  a5[1] = a4;
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = a1;
  a5[5] = a2;
  a5[6] = 0;
  a5[7] = result;
  return result;
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, unint64_t *a6@<X5>, uint64_t (*a7)(uint64_t)@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, a4, 255, a5, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  v16 = v15;
  a8[2] = 0;
  a8[3] = 0;
  *(_QWORD *)((char *)a8 + *(int *)(v15 + 36)) = 0;
  *a8 = a2;
  a8[1] = a3;
  v17 = (char *)a8 + *(int *)(v15 + 32);
  v18 = a5(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a1, v18);
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(0, a6, a7);
  result = swift_allocObject();
  *(_QWORD *)((char *)a8 + *(int *)(v16 + 40)) = result;
  return result;
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for RawRepresentableTransform(0, a4, a5, a4);
  return SceneStorage.init<A>(key:transform:defaultValue:)(a2, a3, v12, a1, a4, v11, (uint64_t)&protocol witness table for RawRepresentableTransform<A>, a6);
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Bool?>>, &lazy cache variable for type metadata for PropertyListTransform<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0]);
  result = swift_allocObject();
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 2;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = result;
  return result;
}

{
  return SceneStorage<A>.init<>(_:)(a1, a2, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Int?>>, &lazy cache variable for type metadata for PropertyListTransform<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], a3);
}

{
  return SceneStorage<A>.init<>(_:)(a1, a2, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Double?>>, &lazy cache variable for type metadata for PropertyListTransform<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E0DEB070], a3);
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, a3, a4, a5, a6);
  result = swift_allocObject();
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 40) = 1;
  *(_QWORD *)(a7 + 48) = 0;
  *(_QWORD *)(a7 + 56) = result;
  return result;
}

double SceneStorage<A>.init<>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;

  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<String?>>, &lazy cache variable for type metadata for PropertyListTransform<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  v6 = swift_allocObject();
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v6;
  return result;
}

{
  uint64_t v6;
  double result;

  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Data?>>, &lazy cache variable for type metadata for PropertyListTransform<Data?>, (unint64_t *)&lazy cache variable for type metadata for Data?, MEMORY[0x1E0CB0338]);
  v6 = swift_allocObject();
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = -3.10503618e231;
  *(_OWORD *)(a3 + 40) = xmmword_187C268F0;
  *(_QWORD *)(a3 + 56) = v6;
  return result;
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return SceneStorage<A>.init<>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SceneStorage<URL?>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8], type metadata accessor for TransformBox<PropertyListTransform<URL?>>, a3);
}

{
  return SceneStorage<A>.init<>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SceneStorage<Date?>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], type metadata accessor for TransformBox<PropertyListTransform<Date?>>, a3);
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, void (*a5)(_QWORD)@<X4>, _QWORD *a6@<X8>)
{
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t result;

  v11 = (int *)a3(0);
  v12 = (char *)a6 + v11[8];
  v13 = a4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  a6[2] = 0;
  a6[3] = 0;
  *(_QWORD *)((char *)a6 + v11[9]) = 0;
  *a6 = a1;
  a6[1] = a2;
  a5(0);
  result = swift_allocObject();
  *(_QWORD *)((char *)a6 + v11[10]) = result;
  return result;
}

uint64_t SceneStorage.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v10 = type metadata accessor for Optional();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 56))((char *)&v19 - v13, 1, 1, a3, v12);
  v16 = type metadata accessor for RawRepresentableTransform(0, a3, a4, v15);
  return SceneStorage.init<A>(key:transform:defaultValue:)(a1, a2, v17, (uint64_t)v14, v10, v16, (uint64_t)&protocol witness table for RawRepresentableTransform<A>, a5);
}

uint64_t SceneStorage<A>.init(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for JSONCodableTransform(0, a4, a5, a6);
  return SceneStorage.init<A>(key:transform:defaultValue:)(a2, a3, v13, a1, a4, v12, (uint64_t)&protocol witness table for JSONCodableTransform<A>, a7);
}

uint64_t SceneStorage<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  v14 = type metadata accessor for JSONCodableTransform(0, a3, a4, a5);
  return SceneStorage.init<A>(key:transform:defaultValue:)(a1, a2, v15, (uint64_t)v13, a3, v14, (uint64_t)&protocol witness table for JSONCodableTransform<A>, a6);
}

void SceneStorageTransformBox.readValue(from:key:read:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void SceneStorageTransformBox.writeValue(_:to:key:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SceneStorageTransformBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SceneStorageTransformBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t TransformBox.readValue(from:key:read:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *v4;
  v10 = *(_QWORD *)(*v4 + 112);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, (uint64_t)v4 + *(_QWORD *)(v9 + 128), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 120) + 16))(a1, a2, a3, a4, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t TransformBox.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *v4;
  v10 = *(_QWORD *)(*v4 + 112);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, (uint64_t)v4 + *(_QWORD *)(v9 + 128), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 120) + 24))(a1, a2, a3, a4, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t TransformBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 112) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

uint64_t TransformBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 112) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_deallocClassInstance();
}

uint64_t PropertyListTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X3>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;
  _BYTE v8[40];

  *a2 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return outlined destroy of AnyHashable((uint64_t)v8);
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance PropertyListTransform<A>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X3>, _OWORD *a3@<X8>)
{
  return PropertyListTransform.readValue(from:key:read:)(a1, a2, a3);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance PropertyListTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PropertyListTransform.writeValue(_:to:key:)(a1, a2, a3, a4);
}

uint64_t RawRepresentableTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[2];
  _OWORD v31[2];
  _BYTE v32[40];

  v30[0] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v30 - v17;
  *a4 = 1;
  *(_QWORD *)&v31[0] = a2;
  *((_QWORD *)&v31[0] + 1) = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32), (v20 & 1) != 0))
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v19, (uint64_t)v31);
  else
    memset(v31, 0, sizeof(v31));
  outlined destroy of AnyHashable((uint64_t)v32);
  v21 = MEMORY[0x1E0DEE9B8] + 8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = swift_dynamicCast();
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v18, v22 ^ 1u, 1, AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v23, v24);
  v30[-2] = a5;
  v30[-1] = a6;
  MEMORY[0x1E0C80A78](v25, v26);
  v30[-4] = a5;
  v30[-3] = a6;
  v30[-2] = (uint64_t)partial apply for closure #1 in RawRepresentableTransform.readValue(from:key:read:);
  v30[-1] = v27;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?), (uint64_t)&v30[-6], MEMORY[0x1E0DEDCE8], v21, v28, v30[0]);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t closure #1 in RawRepresentableTransform.readValue(from:key:read:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v8 - v6, a1, v4);
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, double)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;

  v8 = type metadata accessor for Optional();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v16 - v11;
  a2(a1, v10);
  v13 = *(_QWORD *)(a3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a3);
  if ((_DWORD)result == 1)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a4 + 24) = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, a3);
  }
  return result;
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance RawRepresentableTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return RawRepresentableTransform.readValue(from:key:read:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance RawRepresentableTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized RawRepresentableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

uint64_t JSONCodableTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE v32[40];
  __int128 v33;
  __int128 v34;

  v29 = a4;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v28 - v18;
  v30 = a2;
  v31 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a1 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32), (v21 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v33);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v32);
  if (*((_QWORD *)&v34 + 1))
  {
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v24 = v30;
      v23 = v31;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      v28 = v23;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      v25 = *(_QWORD *)(a5 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v19, 0, 1, a5);
      *v29 = 1;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v15, 1, a5) != 1)
      {
        *(_QWORD *)(a6 + 24) = a5;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a6);
        (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v15, a5);
        swift_release();
        outlined consume of Data._Representation(v24, v28);
        return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
      }
      v26 = *(void (**)(char *, uint64_t))(v12 + 8);
      v26(v19, v11);
      swift_release();
      outlined consume of Data._Representation(v24, v28);
      result = ((uint64_t (*)(char *, uint64_t))v26)(v15, v11);
    }
  }
  else
  {
    result = outlined destroy of Any?((uint64_t)&v33);
  }
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  return result;
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance JSONCodableTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return JSONCodableTransform.readValue(from:key:read:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), a6);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance JSONCodableTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized JSONCodableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

uint64_t specialized EnvironmentValues.sceneStorageValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[16];
  uint64_t v6;
  BOOL v7;

  if (a1)
  {
    swift_weakInit();
    swift_weakAssign();
    outlined init with take of WeakBox<SceneStorageValues>((uint64_t)v5, (uint64_t)&v6, v3);
  }
  else
  {
    v6 = 0;
  }
  v7 = a1 == 0;
  outlined init with copy of WeakBox<SceneStorageValues>?((uint64_t)&v6, (uint64_t)v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<SceneStorageValues>?);
}

uint64_t specialized JSONCodableTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  _BYTE v28[48];

  v25[1] = a2;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v25 - v12;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v28);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v19)
  {
    v20(v13, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a5);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v24 = v23;
    *(_QWORD *)&v26 = a3;
    *((_QWORD *)&v26 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v24 >> 60 == 15)
    {
      v26 = 0u;
      v27 = 0u;
    }
    else
    {
      *((_QWORD *)&v27 + 1) = MEMORY[0x1E0CB0338];
      *(_QWORD *)&v26 = v22;
      *((_QWORD *)&v26 + 1) = v24;
    }
    outlined copy of Data?(v22, v24);
    specialized Dictionary.subscript.setter((uint64_t)&v26, (uint64_t)v28);
    swift_release();
    outlined consume of Data?(v22, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a5);
  }
  else
  {
    v20(v13, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
}

uint64_t specialized PropertyListTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[4];
  _BYTE v7[40];

  v6[0] = a3;
  v6[1] = a4;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  outlined init with copy of Any(a1, (uint64_t)v6);
  return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)v7);
}

uint64_t specialized RawRepresentableTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23[4];
  _BYTE v24[40];

  v22 = a2;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v23[-1] - v12;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v23[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v24);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v19)
  {
    v20(v13, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a5);
    v23[0] = a3;
    v23[1] = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    v23[3] = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_1(v23);
    dispatch thunk of RawRepresentable.rawValue.getter();
    specialized Dictionary.subscript.setter((uint64_t)v23, (uint64_t)v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a5);
  }
  else
  {
    v20(v13, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
}

uint64_t specialized SceneStorage.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v2 + *(int *)(a2 + 36)))
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  return result;
}

uint64_t specialized static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;
  _OWORD v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  v6 = *(_DWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 40);
  v16 = *(_QWORD *)a3;
  v17 = v6;
  *(_QWORD *)&v18[0] = v7;
  *(_OWORD *)((char *)v18 + 8) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)&v18[1] + 1) = v8;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  LODWORD(v7) = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v17 = *(_DWORD *)(a3 + 8);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v16 = __PAIR64__(v9, v7);
  LOBYTE(v17) = 0;
  memset(v18, 0, 32);
  v18[2] = (unint64_t)AGCreateWeakAttribute();
  v12 = type metadata accessor for SceneStorage.Box(0, a4, v10, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneStorage<A>.Box, v12);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  type metadata accessor for SceneStorage(0, a4, v13, v14);
  static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();
  return outlined release of SceneStorage<A>.Box((uint64_t)&v16);
}

uint64_t type metadata accessor for PropertyListTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListTransform);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListTransform);
}

uint64_t type metadata accessor for TransformBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransformBox);
}

void type metadata accessor for TransformBox<PropertyListTransform<Bool>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PropertyListTransform);
    v8 = type metadata accessor for TransformBox(a1, v6, (uint64_t)&protocol witness table for PropertyListTransform<A>, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t type metadata accessor for SceneStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SceneStorage);
}

void type metadata accessor for PropertyListTransform<URL>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for PropertyListTransform<URL>, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
}

void type metadata accessor for PropertyListTransform<Date>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for PropertyListTransform<Date>, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
}

uint64_t type metadata accessor for RawRepresentableTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RawRepresentableTransform);
}

void type metadata accessor for TransformBox<PropertyListTransform<Data?>>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
    v9 = type metadata accessor for TransformBox(a1, v7, (uint64_t)&protocol witness table for PropertyListTransform<A>, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for SceneStorage<URL?>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for SceneStorage<URL?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
}

void type metadata accessor for TransformBox<PropertyListTransform<URL?>>(uint64_t a1)
{
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(a1, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<URL?>>, (uint64_t (*)(uint64_t))type metadata accessor for PropertyListTransform<URL?>);
}

void type metadata accessor for PropertyListTransform<URL?>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for PropertyListTransform<URL?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
}

void type metadata accessor for SceneStorage<Date?>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for SceneStorage<Date?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Date?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
}

void type metadata accessor for TransformBox<PropertyListTransform<Date?>>(uint64_t a1)
{
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(a1, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Date?>>, (uint64_t (*)(uint64_t))type metadata accessor for PropertyListTransform<Date?>);
}

void type metadata accessor for TransformBox<PropertyListTransform<URL>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = a3(255);
    v7 = type metadata accessor for TransformBox(a1, v5, (uint64_t)&protocol witness table for PropertyListTransform<A>, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for PropertyListTransform<Date?>(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for PropertyListTransform<Date?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Date?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
}

uint64_t type metadata accessor for JSONCodableTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONCodableTransform);
}

{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONCodableTransform);
}

uint64_t sub_187359198@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for SceneStorage(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return SceneStorage.wrappedValue.getter(v5, a4);
}

uint64_t sub_1873591D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for SceneStorage(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized SceneStorage.wrappedValue.setter(a1, v5);
}

uint64_t sub_18735920C()
{
  return 8;
}

_QWORD *sub_187359218(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for SceneStorageValues.Entry()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SceneStorageValues.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SceneStorageValues.Entry);
}

uint64_t type metadata completion function for SceneStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SceneStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  _QWORD *v18;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 32) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    v12 = (_QWORD *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v12[1] = v13[1];
    v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 16) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    v17 = (_QWORD *)((v7 + v14) & 0xFFFFFFFFFFFFF8);
    v18 = (_QWORD *)((v7 + v15) & 0xFFFFFFFFFFFFF8);
    *v17 = *v18;
    *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for SceneStorage(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for SceneStorage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v10) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SceneStorage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = v12 + v11;
  v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v13 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for SceneStorage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 16) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for SceneStorage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 16) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneStorage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1873598DC + 4 * byte_187C26900[v10]))();
  }
}

void storeEnumTagSinglePayload for SceneStorage(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 32) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 32) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187359A74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187359AE8);
}

void sub_187359A7C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187359A84);
  JUMPOUT(0x187359AE8);
}

void sub_187359A98()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187359AE8);
}

void sub_187359AA0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187359AE8);
}

void sub_187359AA8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x187359AB4);
    if (a2 < 0)
      JUMPOUT(0x187359AE0);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x187359AE8);
}

uint64_t type metadata accessor for SceneStorageTransformBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for SceneStorageTransformBox()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for TransformBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_187359B9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for SceneStorageDomainKey()
{
  return &unk_1E1AD8C60;
}

uint64_t partial apply for closure #1 in RawRepresentableTransform.readValue(from:key:read:)(uint64_t a1)
{
  return closure #1 in RawRepresentableTransform.readValue(from:key:read:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)(a1, *(void (**)(uint64_t, double))(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

{
  uint64_t v2;

  return thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)(a1, *(void (**)(uint64_t, double))(v2 + 48), *(_QWORD *)(v2 + 16), a2);
}

uint64_t outlined init with copy of WeakBox<SceneStorageValues>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<SceneStorageValues>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_187359D5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sceneStorageValues.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187359D94()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.sceneStorageValues.setter(v0);
  return swift_release();
}

uint64_t type metadata accessor for SceneStorage.Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SceneStorage.Box);
}

uint64_t outlined release of SceneStorage<A>.Box(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t destroy for SceneStorage.Box()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SceneStorage.Box(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SceneStorage.Box(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SceneStorage.Box(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneStorage.Box(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneStorage.Box(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

void *type metadata accessor for SceneStorageValuesKey()
{
  return &unk_1E1AD8C80;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in SceneStorage<A>.Box()
{
  return &protocol witness table for SceneStorage<A>;
}

uint64_t partial apply for closure #1 in SceneStorage.Box.update(property:phase:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SceneStorage.Box.update(property:phase:)(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t key path getter for EnvironmentValues.menuIndicatorVisibility : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuIndicatorVisibility : EnvironmentValues()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

uint64_t Menu<>.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  outlined copy of AppIntentExecutor?(*a1);
  outlined copy of AppIntentExecutor?(v5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

void Menu.body.getter()
{
  lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_18735A1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 - 480) = v11;
  *(_QWORD *)(v10 - 360) = v12;
  MEMORY[0x1E0C80A78](v11, v13);
  *(_QWORD *)(v10 - 448) = (char *)&a9 - v14;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 440) = v15;
  v16 = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  *(_QWORD *)(v10 - 432) = v16;
  v17 = *(_QWORD *)(v9 + 40);
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  *(_QWORD *)(v10 - 104) = v17;
  *(_QWORD *)(v10 - 96) = v18;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v10 - 104);
  *(_QWORD *)(v10 - 472) = v19;
  *(_QWORD *)(v10 - 160) = &type metadata for MenuStyleConfiguration.Content;
  *(_QWORD *)(v10 - 152) = v15;
  *(_QWORD *)(v10 - 144) = v16;
  *(_QWORD *)(v10 - 136) = v19;
  type metadata accessor for StaticSourceWriter();
}

void sub_18735A2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v15 = type metadata accessor for ModifiedContent();
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v14 - 416) = v15;
  *(_QWORD *)(v14 - 376) = v16;
  MEMORY[0x1E0C80A78](v15, v17);
  *(_QWORD *)(v14 - 488) = (char *)&a9 - v18;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>();
  v19 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 368) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v14 - 424) = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v14 - 400) = (char *)&a9 - v24;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v25 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 456) = v25;
  *(_QWORD *)(v14 - 352) = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  *(_QWORD *)(v14 - 408) = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)(v14 - 384) = (char *)&a9 - v30;
  v31 = v9;
  v32 = (uint64_t *)(v9 + *(int *)(v10 + 56));
  v34 = *v32;
  v33 = v32[1];
  v35 = (uint64_t *)(v31 + *(int *)(v10 + 60));
  v36 = *v35;
  v37 = v35[1];
  outlined copy of AppIntentExecutor?(v34);
  outlined copy of AppIntentExecutor?(v36);
  *(_QWORD *)(v14 - 160) = v34;
  *(_QWORD *)(v14 - 152) = v33;
  *(_QWORD *)(v14 - 144) = v36;
  *(_QWORD *)(v14 - 136) = v37;
  *(_QWORD *)(v14 - 256) = *(_QWORD *)(v14 - 464);
  *(_QWORD *)(v14 - 248) = v13;
  *(_QWORD *)(v14 - 240) = v11;
  *(_QWORD *)(v14 - 232) = v12;
  *(_QWORD *)(v14 - 224) = v31;
  lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter);
}

void sub_18735A4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(v6 - 144);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v6 - 160));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *(_QWORD *)(v6 - 320) = v3;
  *(_QWORD *)(v6 - 312) = v5;
  *(_QWORD *)(v6 - 304) = v2;
  *(_QWORD *)(v6 - 296) = v1;
  *(_QWORD *)(v6 - 288) = v4;
  *(_QWORD *)(v6 - 120) = v0;
  *(_QWORD *)(v6 - 112) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v6 - 480), v6 - 120);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for MenuStyleConfiguration.Content, (uint64_t)partial apply for closure #2 in Menu.body.getter);
}

void sub_18735A580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 360) + 8))(v3, v1);
  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  *(_QWORD *)(v5 - 160) = 0;
  *(_QWORD *)(v5 - 152) = KeyPath;
  *(_BYTE *)(v5 - 144) = 0;
  *(_QWORD *)(v5 - 136) = v7;
  *(_BYTE *)(v5 - 128) = 0;
  *(_QWORD *)(v5 - 176) = v0;
  *(_QWORD *)(v5 - 168) = v2;
  MEMORY[0x18D75FFDC](v4, *(_QWORD *)(v5 - 416), v5 - 176);
  lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle();
  View.menuStyle<A, B>(_:in:)(v5 - 160, v8);
}

uint64_t sub_18735A62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  unint64_t IsSharingPicker;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);

  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 376) + 8))(v4, v5);
  v7 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v6 - 192) = v0;
  *(_QWORD *)(v6 - 184) = v7;
  v8 = v3;
  v9 = MEMORY[0x18D75FFDC](v3, v1, v6 - 192);
  v10 = *(_QWORD *)(v6 - 400);
  ModifiedContent<>.accessibility()(v1, v10);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 368) + 8);
  v11(v2, v1);
  v12 = *(_QWORD *)(v6 - 408);
  View.sharingPickerHost()(v1, v9);
  v11(v10, v1);
  IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v6 - 208) = v9;
  *(_QWORD *)(v6 - 200) = IsSharingPicker;
  v14 = *(_QWORD *)(v6 - 456);
  v15 = MEMORY[0x18D75FFDC](v8, v14, v6 - 208);
  v16 = *(_QWORD *)(v6 - 384);
  static ViewBuilder.buildExpression<A>(_:)(v12, v14, v15);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 352) + 8);
  v17(v12, v14);
  static ViewBuilder.buildBlock<A>(_:)(v16, v14, *(_QWORD *)(v6 - 344));
  return v17(v16, v14);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<PlatformItemListMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle, (uint64_t)&type metadata for PlatformItemListMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE6398]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>)
  {
    v0 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListMenuStyle, &type metadata for PlatformItemListMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle);
  }
  return result;
}

void closure #2 in Menu.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for Menu();
}

uint64_t sub_18735AA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  View.styleContext<A>(_:)();
  v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v7;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v9(v3, v1);
}

uint64_t partial apply for closure #2 in Menu.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in Menu.body.getter);
}

uint64_t sub_18735AAD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18735AB08()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for MenuStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void Menu.init(content:label:)()
{
  type metadata accessor for Menu();
}

uint64_t sub_18735ABD8(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (_QWORD *)(v3 + *(int *)(a1 + 56));
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v3 + *(int *)(a1 + 60));
  *v5 = 0;
  v5[1] = 0;
  v6 = v1();
  return v2(v6);
}

void Menu.init<>(_:content:)()
{
  type metadata accessor for Menu();
}

uint64_t sub_18735AC8C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;

  v7 = (_QWORD *)(v5 + a1[14]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(v5 + a1[15]);
  *v8 = 0;
  v8[1] = 0;
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)(v5);
  closure #1 in LabeledContent<>.init(_:content:)(v4, v3, v2, v1, v5 + a1[13]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void Menu.init<A>(_:content:)()
{
  type metadata accessor for Menu();
}

uint64_t sub_18735AD70(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;

  v9 = (_QWORD *)(v7 + a1[14]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(v7 + a1[15]);
  *v10 = 0;
  v10[1] = 0;
  closure #1 in ModalLink<>.init<A>(_:presenting:)(v6, v7);
  closure #1 in LabeledContent<>.init<A>(_:content:)(v5, v4, v3, v1, v7 + a1[13]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v6, v2);
}

void Menu.init(content:label:primaryAction:)()
{
  type metadata accessor for Menu();
}

uint64_t sub_18735AE50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  void (*v4)(uint64_t);
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_QWORD *)(v5 + *(int *)(a1 + 56));
  v7 = (_QWORD *)(v5 + *(int *)(a1 + 60));
  *v7 = 0;
  v7[1] = 0;
  *v6 = v2;
  v6[1] = v1;
  v8 = swift_retain();
  v9 = v3(v8);
  v4(v9);
  return swift_release();
}

void Menu.init<>(_:content:primaryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a7;
  *(_QWORD *)(v10 + 24) = a8;
  swift_retain();
  type metadata accessor for Menu();
}

uint64_t sub_18735AF3C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v6 = (_QWORD *)(v1 + a1[14]);
  v7 = (_QWORD *)(v1 + a1[15]);
  *v7 = 0;
  v7[1] = 0;
  *v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  v6[1] = v2;
  swift_retain();
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)(v1);
  closure #1 in LabeledContent<>.init(_:content:)(v9, v10, v4, v3, v1 + a1[13]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_18735AFD4()
{
  swift_release();
  return swift_deallocObject();
}

void Menu.init<A>(_:content:primaryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a5;
  swift_retain();
  type metadata accessor for Menu();
}

uint64_t sub_18735B088(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;

  v9 = (_QWORD *)(v5 + a1[14]);
  v10 = (_QWORD *)(v5 + a1[15]);
  *v10 = 0;
  v10[1] = 0;
  *v9 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  v9[1] = v7;
  swift_retain();
  closure #1 in ModalLink<>.init<A>(_:presenting:)(v2, v5);
  closure #1 in LabeledContent<>.init<A>(_:content:)(v6, v12, v4, v3, v5 + a1[13]);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v2, v1);
}

void Menu<>.init(_:image:content:)()
{
  type metadata accessor for Label<Text, Image>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  type metadata accessor for Menu();
}

uint64_t sub_18735B1B8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v8 = (_QWORD *)(v5 + a1[14]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(v5 + a1[15]);
  *v9 = 0;
  v9[1] = 0;
  closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(v4, v1, v5);
  closure #1 in LabeledContent<>.init(_:content:)(v3, v12, v2, v6, v5 + a1[13]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v1, v10);
}

void Menu<>.init<A>(_:image:content:)()
{
  type metadata accessor for Label<Text, Image>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  type metadata accessor for Menu();
}

uint64_t sub_18735B2D8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v10 = (_QWORD *)(v8 + a1[14]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(v8 + a1[15]);
  *v11 = 0;
  v11[1] = 0;
  closure #2 in Menu<>.init<A>(_:image:content:)(v2, v3, v1, v8);
  closure #1 in LabeledContent<>.init<A>(_:content:)(v7, v6, v5, v4, v8 + a1[13]);
  v12 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v3, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v2, v1);
}

__n128 closure #2 in Menu<>.init<A>(_:image:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

void Menu<>.init(_:image:content:primaryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a8;
  *(_QWORD *)(v10 + 24) = a9;
  type metadata accessor for Label<Text, Image>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  swift_retain();
  type metadata accessor for Menu();
}

uint64_t sub_18735B544(int *a1)
{
  uint64_t (*v1)();
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v6)();
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (uint64_t (**)())(v4 + a1[14]);
  v7 = (_QWORD *)(v4 + a1[15]);
  *v7 = 0;
  v7[1] = 0;
  *v6 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v6[1] = v1;
  swift_retain();
  closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(v10, v11, v4);
  closure #1 in LabeledContent<>.init(_:content:)(v12, v13, v3, v2, v4 + a1[13]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v8 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v11, v8);
}

void Menu.init(onPresentationChanged:content:label:)()
{
  type metadata accessor for Menu();
}

uint64_t sub_18735B654(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v6 = (_QWORD *)(v5 + *(int *)(a1 + 56));
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v5 + *(int *)(a1 + 60));
  v8 = v1();
  result = v2(v8);
  *v7 = v4;
  v7[1] = v3;
  return result;
}

void Menu.init(onPresentationChanged:content:label:primaryAction:)()
{
  type metadata accessor for Menu();
}

uint64_t sub_18735B704(uint64_t a1)
{
  uint64_t (*v1)(void);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v6 = (_QWORD *)(v5 + *(int *)(a1 + 56));
  v7 = (_QWORD *)(v5 + *(int *)(a1 + 60));
  v8 = v1();
  result = v2(v8);
  *v6 = v10;
  v6[1] = v11;
  *v7 = v4;
  v7[1] = v3;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Menu<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Menu(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v10 + v16) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v19;
      swift_retain();
    }
    v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v21 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
      return v4;
    }
    v22 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = v22;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Menu(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD *v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v7);
  v9 = (_QWORD *)((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v9 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = v16;
    swift_retain();
  }
  v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = v19;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (unint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      v18 = v15[1];
      *v14 = v16;
      v14[1] = v18;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v16 >= 0xFFFFFFFF)
    {
      v17 = v15[1];
      *v14 = v16;
      v14[1] = v17;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
LABEL_8:
  v19 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 = (unint64_t *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if (*v19 < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      v23 = v20[1];
      *v19 = v21;
      v19[1] = v23;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v22 = v20[1];
  *v19 = v21;
  v19[1] = v22;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = v16;
  }
  v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = (uint64_t *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if ((unint64_t)*v18 < 0xFFFFFFFF)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v20 = v18[1];
    *(_QWORD *)v17 = v19;
    *(_QWORD *)(v17 + 8) = v20;
  }
  return a1;
}

uint64_t assignWithTake for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (unint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      v18 = v15[1];
      *v14 = v16;
      v14[1] = v18;
      goto LABEL_8;
    }
  }
  else
  {
    if (v16 >= 0xFFFFFFFF)
    {
      v17 = v15[1];
      *v14 = v16;
      v14[1] = v17;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
LABEL_8:
  v19 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 = (unint64_t *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if (*v19 < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      v23 = v20[1];
      *v19 = v21;
      v19[1] = v23;
      return a1;
    }
LABEL_14:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v22 = v20[1];
  *v19 = v21;
  v19[1] = v22;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Menu(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFE)
    v9 = 2147483646;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v12 + v17) & 0xFFFFFFFFFFFFF8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  else
  {
    if (((((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18735BEE4 + 4 * byte_187C26CA8[v15]))();
  }
}

void storeEnumTagSinglePayload for Menu(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18735C0B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18735C158);
}

void sub_18735C0C0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18735C0C8);
  JUMPOUT(0x18735C158);
}

void sub_18735C10C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18735C158);
}

void sub_18735C114()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18735C158);
}

uint64_t sub_18735C11C(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x18735C158);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x18735C128);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void sub_18735C170()
{
  lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_18735C1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ValueMetadata *a19, uint64_t a20,unint64_t a21,uint64_t a22)
{
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v22 = type metadata accessor for ModifiedContent();
  v23 = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  a18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, &a17);
  a19 = &type metadata for MenuStyleConfiguration.Content;
  a20 = v22;
  a21 = v23;
  a22 = v24;
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_18735C244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[16];

  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v4 = type metadata accessor for ModifiedContent();
  v9[0] = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
  v9[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v8[0] = MEMORY[0x18D75FFDC](v0, v1, v9);
  v8[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v7[0] = MEMORY[0x18D75FFDC](v0, v2, v8);
  v7[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6[0] = MEMORY[0x18D75FFDC](v0, v3, v7);
  v6[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v0, v4, v6);
}

void __swiftcall TexturedButtonMenuStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TexturedButtonMenuStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in TexturedButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TexturedButtonMenuStyle()
{
  return &type metadata for TexturedButtonMenuStyle;
}

uint64_t sub_18735C35C()
{
  return MEMORY[0x1E0CE7C28];
}

uint64_t TabContent.dropDestination<A>(for:action:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD *v14;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  swift_retain();
  TabContent._dropDestination<A>(for:isTargeted:action:)(0, 0, 0, (uint64_t)partial apply for closure #1 in TabContent.dropDestination<A>(for:action:), (uint64_t)v14, a3, a4, a7, a5, a6);
  return swift_release();
}

{
  return TabContent._dropDestination<A>(for:isTargeted:action:)(0, 0, 0, a1, a2, a3, a4, a7, a5, a6);
}

uint64_t sub_18735C420()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t TabContent._dropDestination<A>(for:isTargeted:action:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  _QWORD v20[3];
  char v21;
  uint64_t (*v22)(uint64_t, uint64_t, unint64_t);
  _QWORD *v23;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a4;
  v17[7] = a5;
  swift_retain();
  v20[0] = MEMORY[0x18D754DF8](a7, a10);
  v20[1] = a1;
  v20[2] = a2;
  v21 = a3;
  v22 = partial apply for closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:);
  v23 = v17;
  TabContent.modifier<A>(_:)((uint64_t)v20, a6, (uint64_t)&type metadata for DropDestinationModifier, a8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.springLoadingBehavior(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = *a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&unk_1E1AD95A8, a3);
}

uint64_t TabContent.dropDestination<A>(for:isTargeted:action:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a9;
  v17[5] = a10;
  v17[6] = a4;
  v17[7] = a5;
  swift_retain();
  TabContent._dropDestination<A>(for:isTargeted:action:)(a1, a2, a3 & 1, (uint64_t)partial apply for closure #1 in TabContent.dropDestination<A>(for:action:), (uint64_t)v17, a6, a7, a8, a9, a10);
  return swift_release();
}

uint64_t partial apply for closure #1 in TabContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(v3 + 48))(a3);
}

uint64_t sub_18735C644(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  v5 = type metadata accessor for ModifiedTabContent(255, *a1, (uint64_t)&type metadata for DropDestinationModifier, a4);
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

unint64_t lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DropDestinationModifier and conformance DropDestinationModifier;
  if (!lazy protocol witness table cache variable for type DropDestinationModifier and conformance DropDestinationModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropDestinationModifier, &type metadata for DropDestinationModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropDestinationModifier and conformance DropDestinationModifier);
  }
  return result;
}

uint64_t sub_18735C6E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedTabContent(255, *a1, (uint64_t)&unk_1E1AD95A8, a4);
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

unint64_t lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingModifier and conformance SpringLoadingModifier;
  if (!lazy protocol witness table cache variable for type SpringLoadingModifier and conformance SpringLoadingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingModifier, &unk_1E1AD95A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingModifier and conformance SpringLoadingModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for DropDestinationModifier()
{
  return &type metadata for DropDestinationModifier;
}

uint64_t storeEnumTagSinglePayload for SpringLoadingModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18735C7E4 + 4 * byte_187C26DA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18735C818 + 4 * asc_187C26DA0[v4]))();
}

uint64_t sub_18735C818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18735C820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18735C828);
  return result;
}

uint64_t sub_18735C834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18735C83CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18735C840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18735C848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SpringLoadingModifier()
{
  return &unk_1E1AD95A8;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SpringLoadingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_group_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  _QWORD *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[6];
  uint64_t v58;

  v56 = a8;
  v54 = a6;
  v49 = a2;
  v50 = a5;
  v48 = a1;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v52 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v51 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = dispatch_group_create();
  v58 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  v21 = aBlock[0];
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v22 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    result = v22;
  }
  v53 = v17;
  if (!result)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    type metadata accessor for OS_dispatch_queue();
    v37 = (void *)static OS_dispatch_queue.main.getter();
    v38 = (_QWORD *)swift_allocObject();
    v38[2] = v54;
    v38[3] = a7;
    v38[4] = v56;
    v38[5] = a9;
    v40 = v49;
    v39 = v50;
    v38[6] = a4;
    v38[7] = v39;
    v38[8] = v48;
    v38[9] = v40;
    v38[10] = v21;
    aBlock[4] = partial apply for closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:);
    aBlock[5] = v38;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_23;
    v41 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v42 = v51;
    static DispatchQoS.unspecified.getter();
    v58 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v41);
    swift_release();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);
    return swift_release();
  }
  if (result >= 1)
  {
    v44 = a4;
    v45 = v16;
    v46 = v13;
    v47 = v12;
    v24 = a3;
    v55 = result;
    if ((a3 & 0xC000000000000001) != 0)
    {
      v25 = 0;
      v26 = v54;
      do
      {
        MEMORY[0x18D75E3BC](v25++, v24);
        dispatch_group_enter(v20);
        v27 = (_QWORD *)swift_allocObject();
        v27[2] = v26;
        v27[3] = a7;
        v27[4] = v56;
        v27[5] = a9;
        v27[6] = v20;
        v27[7] = v21;
        swift_retain();
        v28 = v20;
        v29 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();
        swift_unknownObjectRelease();

        swift_release();
      }
      while (v55 != v25);
    }
    else
    {
      v30 = 0;
      v31 = v54;
      do
      {
        v32 = *(void **)(v24 + 8 * v30++ + 32);
        v33 = v32;
        dispatch_group_enter(v20);
        v34 = (_QWORD *)swift_allocObject();
        v34[2] = v31;
        v34[3] = a7;
        v34[4] = v56;
        v34[5] = a9;
        v34[6] = v20;
        v34[7] = v21;
        swift_retain();
        v35 = v20;
        v36 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();

        swift_release();
      }
      while (v55 != v30);
    }
    swift_bridgeObjectRelease();
    v13 = v46;
    v12 = v47;
    a4 = v44;
    v16 = v45;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Array();
  type metadata accessor for AtomicBox();
  AtomicBox.wrappedValue.getter();
  a1(a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in IdentifiedDropConfiguration.drop(_:onto:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DropDestinationModifier@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = *((_BYTE *)v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v7;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  return swift_retain();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SpringLoadingModifier@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t result;

  v3 = *v1;
  result = swift_getKeyPath();
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = v3;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DropDestinationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;

  return closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_18735CE44()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(*(void (**)(uint64_t, uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

ValueMetadata *type metadata accessor for IdentifiedDropOntoTraitKey()
{
  return &type metadata for IdentifiedDropOntoTraitKey;
}

ValueMetadata *type metadata accessor for SpringLoadingTraitKey()
{
  return &type metadata for SpringLoadingTraitKey;
}

uint64_t destroy for DropDestinationModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for DropDestinationModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    *v4 = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DropDestinationModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1 + 8);
      v7 = *(_BYTE *)(a2 + 24);
      *v4 = *v5;
      *(_BYTE *)(a1 + 24) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *v5;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *v4 = v8;
  }
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DropDestinationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    outlined destroy of Binding<Bool>(a1 + 8);
LABEL_5:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
LABEL_6:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for IdentifiedDropConfiguration()
{
  return &type metadata for IdentifiedDropConfiguration;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DropDestinationModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DropDestinationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier, (uint64_t)&type metadata for DropDestinationModifier);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<IdentifiedDropOntoTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<IdentifiedDropOntoTraitKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DropDestinationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier, (uint64_t)&type metadata for DropDestinationModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IdentifiedDropOntoTraitKey>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior, (uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SpringLoadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier, (uint64_t)&unk_1E1AD95A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SpringLoadingTraitKey>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SpringLoadingModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<SpringLoadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier, (uint64_t)&unk_1E1AD95A8);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<SpringLoadingTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<SpringLoadingTraitKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void static InlinePickerStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_18735D64C()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;

  type metadata accessor for _GraphValue();
  v27 = *(_OWORD *)(v1 + 40);
  v25 = *(_OWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 72);
  _GraphValue.value.getter();
  v31 = v8;
  v32 = v2;
  v34 = v6;
  v35 = v4;
  v36 = v5;
  v37 = v7;
  v38 = v0;
  *(_QWORD *)&v39 = v27;
  _GraphInputs.interfaceIdiom.getter();
  v33 = HIDWORD(*(_QWORD *)(v9 - 128));
  type metadata accessor for ResolvedPicker(255, v19, v3, v11);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>, (uint64_t)&type metadata for WheelPickerStyle, (uint64_t)&protocol witness table for WheelPickerStyle);
  type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for InlinePickerStyle.Body(0, v19, v3, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InlinePickerStyle.Body<A>, v16);
  _GraphValue.init<A>(_:)();
  v31 = v20;
  v32 = v2;
  v34 = v21;
  v35 = v4;
  v36 = v24;
  v37 = v23;
  v38 = v22;
  v39 = v27;
  v40 = v25;
  v41 = v10;
  v42 = v26;
  v30[0] = &protocol witness table for ResolvedPicker<A>;
  v30[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  v17 = MEMORY[0x1E0CE2E70];
  v29[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v30);
  v29[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  v28[0] = MEMORY[0x18D75FFDC](v17, v13, v29);
  v28[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  MEMORY[0x18D75FFDC](v17, v14, v28);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>, (uint64_t)&type metadata for SectionPickerStyle, (uint64_t)&protocol witness table for SectionPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SegmentedPickerStyle>, (uint64_t)&type metadata for SegmentedPickerStyle, (uint64_t)&protocol witness table for SegmentedPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>, (uint64_t)&type metadata for SectionPickerStyle, (uint64_t)&protocol witness table for SectionPickerStyle);
    lazy protocol witness table accessor for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle;
  if (!lazy protocol witness table cache variable for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldUseListSectionInlinePickerStyle, &unk_1E1B07808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle);
  }
  return result;
}

void type metadata accessor for PickerStyleWriter<SectionPickerStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for PickerStyleWriter(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata accessor for InlinePickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InlinePickerStyle.Body);
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for PickerStyleWriter<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

void static InlinePickerStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_18735DC78()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v32 = v5;
  v33 = v7;
  v35 = v1;
  v36 = v3;
  v37 = v4;
  v38 = v6;
  v39 = v0;
  v40 = v2;
  _GraphInputs.interfaceIdiom.getter();
  v34 = HIDWORD(*(_QWORD *)(v8 - 112));
  type metadata accessor for ResolvedPicker(255, v18, v17, v9);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>, (uint64_t)&type metadata for WheelPickerStyle, (uint64_t)&protocol witness table for WheelPickerStyle);
  type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for InlinePickerStyle.Body(0, v18, v17, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InlinePickerStyle.Body<A>, v14);
  _GraphValue.init<A>(_:)();
  v32 = v19;
  v33 = v7;
  v35 = v1;
  v36 = v23;
  v37 = v22;
  v38 = v21;
  v39 = v20;
  v40 = v2;
  v41 = v28;
  v42 = v27;
  v43 = v26;
  v44 = v25;
  v45 = v24;
  v31[0] = &protocol witness table for ResolvedPicker<A>;
  v31[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  v15 = MEMORY[0x1E0CE2E70];
  v30[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v31);
  v30[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  v29[0] = MEMORY[0x18D75FFDC](v15, v11, v30);
  v29[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  MEMORY[0x18D75FFDC](v15, v12, v29);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void InlinePickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_18735DF14(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void InlinePickerStyle.Body.value.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ValueMetadata *v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;

  v10 = a3;
  v9 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for PickerStyleConfiguration(0, v3, v4, a2);
  v7[3] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v5);
  v7[2] = (char *)v7 - v6;
  v11 = &type metadata for InlinePickerStyle;
  v12 = v3;
  v13 = &protocol witness table for InlinePickerStyle;
  v14 = v4;
  type metadata accessor for _PickerValue();
}

void sub_18735DFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = type metadata accessor for ResolvedPicker(0, v10, v11, v13);
  *(_QWORD *)(v12 - 248) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 224) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  v18 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 192) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  v20 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 200) = v20;
  *(_QWORD *)(v12 - 184) = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v12 - 256) = (char *)&a9 - v22;
  *(_DWORD *)(v12 - 120) = *(_DWORD *)v9;
  *(_OWORD *)(v12 - 112) = *(_OWORD *)(v9 + 8);
  InlinePickerStyle.Body.base.getter();
}

void sub_18735E14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 - 240);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 232) + 32))(v5, v1, *(_QWORD *)(v4 - 216));
  v7 = ResolvedPicker.init(configuration:)(v5, v2, v3, v6, v0);
  View.pickerStyle<A, B>(_:in:)(v7, v8);
}

void sub_18735E1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 248) + 8))(v1, v3);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 136) = v2;
  *(_QWORD *)(v4 - 128) = v5;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v4 - 136);
  View.pickerStyle<A, B>(_:in:)(v6, v7);
}

void sub_18735E238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t ShouldUseListSectionInlinePickerStyle;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v4, v0);
  v6 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 152) = v3;
  *(_QWORD *)(v5 - 144) = v6;
  MEMORY[0x18D75FFDC](v1, v2, v5 - 152);
  ShouldUseListSectionInlinePickerStyle = lazy protocol witness table accessor for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle();
  View.pickerStyle<A, B>(_:if:)(ShouldUseListSectionInlinePickerStyle, (uint64_t)&unk_1E1B07808);
}

uint64_t sub_18735E2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 192) + 8))(v4, v2);
  v6 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 168) = v0;
  *(_QWORD *)(v5 - 160) = v6;
  v7 = *(_QWORD *)(v5 - 200);
  v8 = MEMORY[0x18D75FFDC](v1, v7, v5 - 168);
  View.pickerStyle<A>(_:)(v8, v7, (uint64_t)&type metadata for WheelPickerStyle, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 184) + 8))(v3, v7);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InlinePickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  type metadata accessor for ResolvedPicker(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>, (uint64_t)&type metadata for WheelPickerStyle, (uint64_t)&protocol witness table for WheelPickerStyle);
  v4 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

ValueMetadata *type metadata accessor for InlinePickerStyle()
{
  return &type metadata for InlinePickerStyle;
}

void *type metadata accessor for ShouldUseListSectionInlinePickerStyle()
{
  return &unk_1E1B07808;
}

void base witness table accessor for _AttributeBody in InlinePickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized static ShouldUseListSectionInlinePickerStyle.evaluate(inputs:)()
{
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else
  {
    return 0;
  }
}

ValueMetadata *type metadata accessor for _WidgetOutputs()
{
  return &type metadata for _WidgetOutputs;
}

void _HoverTableRowModifier.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TableRowContent.onHover(perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  TableRowContent.onHover(perform:)();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _HoverTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for _HoverTableRowModifier()
{
  return &type metadata for _HoverTableRowModifier;
}

uint64_t sub_18735E57C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

unint64_t lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _HoverTableRowModifier and conformance _HoverTableRowModifier;
  if (!lazy protocol witness table cache variable for type _HoverTableRowModifier and conformance _HoverTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _HoverTableRowModifier, &type metadata for _HoverTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HoverTableRowModifier and conformance _HoverTableRowModifier);
  }
  return result;
}

_UNKNOWN **sub_18735E614()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

ValueMetadata *type metadata accessor for TableRowHoverActionTraitKey()
{
  return &type metadata for TableRowHoverActionTraitKey;
}

double EnvironmentValues.dialogSuppression.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  return result;
}

uint64_t View.dialogSuppressionToggle(_:isSuppressed:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = Text.init(_:tableName:bundle:comment:)();
  v2 = v1;
  v4 = v3 & 1;
  View.dialogSuppressionToggle(_:isSuppressed:)(v0, v1, v3 & 1);
  outlined consume of Text.Storage(v0, v2, v4);
  return swift_bridgeObjectRelease();
}

uint64_t View.dialogSuppressionToggle(_:isSuppressed:)(uint64_t a1, uint64_t a2, char a3)
{
  char v5;

  v5 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(a1, a2, v5);
  swift_bridgeObjectRetain();
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of Text.Storage(a1, a2, v5);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t View.dialogSuppression<A>(_:isSuppressed:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v4 = Text.init<A>(_:)();
  v6 = v5;
  v8 = v7 & 1;
  View.dialogSuppressionToggle(_:isSuppressed:)(v4, v5, v7 & 1);
  outlined consume of Text.Storage(v4, v6, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18735EA8C@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[56];

  EnvironmentValues.dialogSuppression.getter((uint64_t)v3);
  return outlined init with take of DialogSuppressionConfiguration?((uint64_t)v3, a1);
}

uint64_t key path setter for EnvironmentValues.dialogSuppression : EnvironmentValues(uint64_t a1)
{
  uint64_t v2[7];

  outlined init with take of DialogSuppressionConfiguration?(a1, (uint64_t)v2);
  outlined retain of DialogSuppressionConfiguration?((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of DialogSuppressionConfiguration?);
  specialized EnvironmentValues.subscript.setter(v2);
  return outlined retain of DialogSuppressionConfiguration?((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of DialogSuppressionConfiguration?);
}

uint64_t View.dialogSuppressionToggle(isSuppressed:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

void Scene.dialogSuppressionToggle(_:isSuppressed:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.dialogSuppressionToggle<A>(_:isSuppressed:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.dialogSuppressionToggle(isSuppressed:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18735EC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>)
  {
    type metadata accessor for DialogSuppressionConfiguration?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>);
  }
}

void type metadata accessor for DialogSuppressionConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DialogSuppressionConfiguration?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DialogSuppressionConfiguration?);
  }
}

uint64_t sub_18735ED40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_18735EDC4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18735EDCC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t destroy for DialogSuppressionConfiguration(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for DialogSuppressionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DialogSuppressionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for DialogSuppressionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Text(a1);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_6;
  }
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogSuppressionConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DialogSuppressionConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogSuppressionConfiguration()
{
  return &type metadata for DialogSuppressionConfiguration;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DialogSuppressionConfiguration.Key@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
  }
}

ValueMetadata *type metadata accessor for DialogSuppressionConfiguration.Key()
{
  return &type metadata for DialogSuppressionConfiguration.Key;
}

void static DigitalCrownRotationalSensitivity.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DigitalCrownRotationalSensitivity.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DigitalCrownRotationalSensitivity.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.digitalCrownRotation<A>(_:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._digitalCrownRotation<A>(_:configuration:onChange:onIdle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.digitalCrownRotation<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._digitalCrownRotation<A>(_:configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DigitalCrownEvent.offset.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DigitalCrownEvent.offset.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DigitalCrownEvent.offset.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DigitalCrownEvent.velocity.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._digitalCrownRotation<A>(detent:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:isRubberBandingEnabled:onChange:onIdle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._digitalCrownRotation<A>(binding:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:isRubberBandingEnabled:isBindingConstrainedToDetent:onChange:onIdle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.digitalCrownRotation<A>(detent:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:onChange:onIdle:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.digitalCrownRotation<A>(_:from:through:sensitivity:isContinuous:isHapticFeedbackEnabled:onChange:onIdle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.digitalCrownRotation<A>(_:onChange:onIdle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity;
  if (!lazy protocol witness table cache variable for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DigitalCrownRotationalSensitivity, &type metadata for DigitalCrownRotationalSensitivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DigitalCrownRotationalSensitivity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18735F358 + 4 * byte_187C270F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18735F38C + 4 * byte_187C270F0[v4]))();
}

uint64_t sub_18735F38C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18735F394(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18735F39CLL);
  return result;
}

uint64_t sub_18735F3A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18735F3B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18735F3B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18735F3BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DigitalCrownRotationalSensitivity()
{
  return &type metadata for DigitalCrownRotationalSensitivity;
}

ValueMetadata *type metadata accessor for DigitalCrownEvent()
{
  return &type metadata for DigitalCrownEvent;
}

uint64_t get_witness_table_7SwiftUI4ViewRzSBRd__SB6StrideRpd__r__lAA15ModifiedContentVyxAA21_DigitalCrownModifierVGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _DigitalCrownModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void DigitalCrownEvent.velocity.setter()
{
  DigitalCrownEvent.offset.setter();
}

uint64_t View.fileImporter(isPresented:allowedContentTypes:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;

  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  swift_retain();
  View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, a3, a4, 0, (uint64_t)partial apply for closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:), v18, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, a9, 0, a7, a8);
  return swift_release();
}

uint64_t closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:)(_QWORD *a1, char a2, void (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Result<URL, Error>();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    goto LABEL_6;
  }
  v14 = a1[2];
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  if (v14)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v9, (unint64_t)a1+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v9, 0, 1, v15);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(_QWORD *, char *, uint64_t))(v16 + 32))(v13, v9, v15);
      swift_storeEnumTagMultiPayload();
LABEL_6:
      a3(v13);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Result<URL, Error>);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v9, 1, 1, v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_18735F6C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:)(_QWORD *a1, char a2)
{
  uint64_t v2;

  return closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:)(a1, a2 & 1, *(void (**)(_QWORD *))(v2 + 16));
}

uint64_t View.fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t View.fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, a9, 0, a8, a10);
}

uint64_t View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  uint64_t v54;
  void (**v55)(void *, unsigned __int8);
  uint64_t (**v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  _QWORD v70[2];
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;

  v72 = a6;
  v73 = a8;
  v74 = a5;
  v79 = a9;
  v80 = a12;
  v77 = a7;
  v78 = a11;
  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v75 = (uint64_t)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v71 = (char *)v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportOperation?(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v76 = (_QWORD *)((char *)v70 - v28);
  v29 = (int *)type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>();
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (_QWORD *)((char *)v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (_QWORD *)((char *)v70 - v35);
  v37 = a1;
  v81 = a1;
  v82 = a2;
  v83 = a3;
  type metadata accessor for Binding<Bool>();
  v39 = v38;
  MEMORY[0x18D75B9C8](&v84);
  if (v84 == 1)
  {
    v40 = a3 & 1;
    if (!*(_QWORD *)(a4 + 16))
    {
      static os_log_type_t.fault.getter();
      v41 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();

    }
    v81 = v37;
    v82 = a2;
    v83 = v40;
    MEMORY[0x18D75B9C8](&v84, v39);
    if (v84 == 1)
    {
      v42 = type metadata accessor for URL();
      v43 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v71, 1, 1, v42);
      type metadata accessor for Predicate<Pack{URL}>();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v75, 1, 1, v44);
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = v37;
      *(_QWORD *)(v45 + 24) = a2;
      *(_BYTE *)(v45 + 32) = v40;
      v46 = v77;
      *(_QWORD *)(v45 + 40) = v72;
      *(_QWORD *)(v45 + 48) = v46;
      v47 = swift_allocObject();
      v70[1] = a2;
      v48 = v47;
      *(_QWORD *)(v47 + 16) = v37;
      *(_QWORD *)(v47 + 24) = a2;
      *(_BYTE *)(v47 + 32) = v40;
      *(_QWORD *)(v47 + 40) = v73;
      *(_QWORD *)(v47 + 48) = a10;
      v49 = (int *)type metadata accessor for FileImportOperation(0);
      v50 = (uint64_t)v76;
      *v76 = 0;
      *(_QWORD *)(v50 + 8) = 0;
      outlined init with take of TableCellFormula(v43, v50 + v49[5], (uint64_t (*)(_QWORD))type metadata accessor for URL?);
      v51 = (_OWORD *)(v50 + v49[6]);
      *v51 = 0u;
      v51[1] = 0u;
      v52 = (_OWORD *)(v50 + v49[7]);
      *v52 = 0u;
      v52[1] = 0u;
      v53 = (_OWORD *)(v50 + v49[8]);
      *v53 = 0u;
      v53[1] = 0u;
      *(_QWORD *)(v50 + v49[9]) = a4;
      *(_BYTE *)(v50 + v49[10]) = v74 & 1;
      outlined init with take of TableCellFormula(v75, v50 + v49[11], (uint64_t (*)(_QWORD))type metadata accessor for Predicate<Pack{URL}>?);
      *(_BYTE *)(v50 + v49[12]) = 2;
      v54 = v50 + v49[13];
      *(_QWORD *)v54 = 0;
      *(_BYTE *)(v54 + 8) = 1;
      v55 = (void (**)(void *, unsigned __int8))(v50 + v49[14]);
      *v55 = partial apply for closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
      v55[1] = (void (*)(void *, unsigned __int8))v45;
      v56 = (uint64_t (**)())(v50 + v49[15]);
      *v56 = partial apply for closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
      v56[1] = (uint64_t (*)())v48;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v49 - 1) + 56))(v50, 0, 1, v49);
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v60 = type metadata accessor for FileImportOperation(0);
      v50 = (uint64_t)v76;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v76, 1, 1, v60);
    }
    v58 = v80;
    v59 = v78;
    *v36 = swift_getKeyPath();
  }
  else
  {
    v57 = type metadata accessor for FileImportOperation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v25, 1, 1, v57);
    *v32 = swift_getKeyPath();
    v36 = v32;
    v50 = (uint64_t)v25;
    v58 = v80;
    v59 = v78;
  }
  v61 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v62 = (char *)v36 + v29[13];
  *(_QWORD *)v62 = swift_getKeyPath();
  *((_QWORD *)v62 + 1) = 0;
  v62[16] = 0;
  v63 = (char *)v36 + v29[14];
  *(_QWORD *)v63 = swift_getKeyPath();
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  *((_QWORD *)v63 + 3) = 0;
  v63[32] = 0;
  v64 = (char *)v36 + v29[15];
  *(_QWORD *)v64 = swift_getKeyPath();
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  *((_QWORD *)v64 + 3) = 0;
  v64[32] = 0;
  v65 = (char *)v36 + v29[16];
  *(_QWORD *)v65 = swift_getKeyPath();
  *((_QWORD *)v65 + 1) = 0;
  *((_QWORD *)v65 + 2) = 0;
  *((_QWORD *)v65 + 3) = 0;
  v65[32] = 0;
  v66 = (uint64_t *)((char *)v36 + v29[17]);
  *v66 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, v61);
  swift_storeEnumTagMultiPayload();
  v67 = (char *)v36 + v29[18];
  *(_QWORD *)v67 = swift_getKeyPath();
  v67[8] = 0;
  v68 = (char *)v36 + v29[19];
  *(_QWORD *)v68 = swift_getKeyPath();
  *((_WORD *)v68 + 4) = 0;
  *(uint64_t *)((char *)v36 + v29[20]) = (uint64_t)&type metadata for FileImportOperation.Key;
  outlined init with take of TableCellFormula(v50, (uint64_t)v36 + v29[21], (uint64_t (*)(_QWORD))type metadata accessor for FileImportOperation?);
  MEMORY[0x18D75B4AC](v36, v59, v29, v58);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>);
}

uint64_t sub_18735FD40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>;
  if (!lazy cache variable for type metadata for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>)
  {
    type metadata accessor for FileImportOperation(255);
    type metadata accessor for FileDialogConfiguration();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>;
  if (!lazy protocol witness table cache variable for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>)
  {
    v1 = type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDialogConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>);
  }
  return result;
}

void closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, _QWORD))
{
  int v9;

  v9 = ~a2;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  if (v9)
  {
    outlined copy of Result<[URL], Error>(a1, a2 & 1);
    a6(a1, a2 & 1);
    outlined consume of Result<[URL], Error>?(a1, a2);
  }
}

void partial apply for closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(void *a1, unsigned __int8 a2)
{
  uint64_t v2;

  closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void (**)(void *, _QWORD))(v2 + 40));
}

uint64_t closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  v5 = swift_release();
  return a4(v5);
}

uint64_t partial apply for closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)()
{
  uint64_t v0;

  return closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40));
}

id outlined copy of Result<[URL], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void outlined consume of Result<[URL], Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<[URL], Error>(a1, a2 & 1);
}

void outlined consume of Result<[URL], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void type metadata accessor for Result<URL, Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Result<URL, Error>)
  {
    type metadata accessor for URL();
    type metadata accessor for Error();
    v0 = type metadata accessor for Result();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Result<URL, Error>);
  }
}

uint64_t type metadata accessor for DisplayList.HostedViewResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DisplayList.HostedViewResponder);
}

uint64_t type metadata completion function for DisplayList.HostedViewResponder()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall DisplayList.HostedViews.updateValue()()
{
  uint64_t *v0;
  uint64_t v1;
  int CurrentAttribute;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[28];
  _OWORD v49[2];
  _BYTE v50[64];
  _BYTE v51[28];
  _OWORD v52[6];
  _OWORD v53[2];
  _OWORD v54[6];
  _OWORD v55[2];
  _OWORD v56[6];
  _OWORD v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v1 = *v0;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
    __break(1u);
  v3 = CurrentAttribute;
  swift_beginAccess();
  v5 = *(_OWORD *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 96);
  v6 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)&v51[12] = *(_OWORD *)(v1 + 124);
  v7 = *(_OWORD *)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 32);
  v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)v51 = v6;
  v49[0] = v7;
  v49[1] = v8;
  v10 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)v50 = v9;
  *(_OWORD *)&v50[16] = v10;
  *(_OWORD *)&v50[32] = v5;
  *(_OWORD *)&v50[48] = v4;
  v11 = DWORD2(v8);
  v12 = v9;
  v13 = *(_DWORD *)&v51[24];
  v14 = *(_DWORD *)v51;
  v16 = *((_QWORD *)&v7 + 1);
  v15 = v8;
  v17 = DWORD1(v7);
  v18 = *(_OWORD *)&v50[24];
  v19 = *(_OWORD *)&v51[8];
  v20 = *(_OWORD *)&v50[8];
  v21 = *(_OWORD *)&v50[40];
  v22 = *(_OWORD *)(v1 + 16);
  v23 = *(_OWORD *)(v1 + 32);
  v24 = *(_OWORD *)(v1 + 64);
  v52[2] = *(_OWORD *)(v1 + 48);
  v52[3] = v24;
  v25 = *(_OWORD *)(v1 + 80);
  v26 = *(_OWORD *)(v1 + 96);
  v27 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)(v1 + 124);
  v28 = *(_QWORD *)&v50[56];
  v52[5] = v26;
  v53[0] = v27;
  v52[4] = v25;
  v52[0] = v22;
  v52[1] = v23;
  *(_DWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 20) = v17;
  *(_QWORD *)(v1 + 24) = v16;
  *(_QWORD *)(v1 + 32) = v15;
  *(_DWORD *)(v1 + 40) = v11;
  *(_QWORD *)(v1 + 48) = v12;
  *(_OWORD *)(v1 + 56) = v20;
  *(_OWORD *)(v1 + 72) = v18;
  *(_OWORD *)(v1 + 88) = v21;
  *(_QWORD *)(v1 + 104) = v28;
  *(_DWORD *)(v1 + 112) = v14;
  *(_OWORD *)(v1 + 120) = v19;
  *(_DWORD *)(v1 + 136) = v13;
  outlined retain of DisplayList.HostedViewState((uint64_t)v49);
  outlined release of DisplayList.HostedViewState((uint64_t)v52);
  v29 = *(_OWORD *)(v1 + 16);
  v30 = *(_OWORD *)(v1 + 32);
  v31 = *(_OWORD *)(v1 + 64);
  v54[2] = *(_OWORD *)(v1 + 48);
  v54[3] = v31;
  v32 = *(_OWORD *)(v1 + 80);
  v33 = *(_OWORD *)(v1 + 96);
  v34 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(v1 + 124);
  v35 = *(_OWORD *)((char *)v55 + 12);
  v54[5] = v33;
  v55[0] = v34;
  v54[4] = v32;
  v54[0] = v29;
  v54[1] = v30;
  v44 = *(_OWORD *)(v1 + 48);
  v45 = *(_OWORD *)(v1 + 64);
  v42 = *(_OWORD *)(v1 + 16);
  v43 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)&v48[12] = v35;
  v47 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)v48 = *(_OWORD *)(v1 + 112);
  v46 = *(_OWORD *)(v1 + 80);
  outlined retain of DisplayList.HostedViewState((uint64_t)v54);
  LOBYTE(v3) = DisplayList.HostedViewState.update()();
  v36 = *(_OWORD *)(v1 + 16);
  v37 = *(_OWORD *)(v1 + 32);
  v38 = *(_OWORD *)(v1 + 64);
  v56[2] = *(_OWORD *)(v1 + 48);
  v56[3] = v38;
  v39 = *(_OWORD *)(v1 + 80);
  v40 = *(_OWORD *)(v1 + 96);
  v41 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)(v1 + 124);
  v56[5] = v40;
  v57[0] = v41;
  v56[4] = v39;
  v56[0] = v36;
  v56[1] = v37;
  *(_OWORD *)(v1 + 16) = v42;
  *(_OWORD *)(v1 + 32) = v43;
  *(_OWORD *)(v1 + 48) = v44;
  *(_OWORD *)(v1 + 64) = v45;
  *(_OWORD *)(v1 + 80) = v46;
  *(_OWORD *)(v1 + 124) = *(_OWORD *)&v48[12];
  *(_OWORD *)(v1 + 96) = v47;
  *(_OWORD *)(v1 + 112) = *(_OWORD *)v48;
  outlined release of DisplayList.HostedViewState((uint64_t)v56);
  if ((v3 & 1) != 0 || !AGGraphGetOutputValue())
    AGGraphSetOutputValue();
}

Swift::Bool __swiftcall DisplayList.HostedViewState.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Value;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t *v11;
  int isUniquelyReferenced_nonNull_native;
  size_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87[4];

  v1 = v0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v41 - v4;
  Value = AGGraphGetValue();
  v7 = *(_WORD *)(Value + 8);
  LODWORD(v9) = v8 | ((v7 & 2) >> 1);
  if (v8 & 1 | ((v7 & 2) != 0))
  {
    v10 = *(_QWORD *)Value;
    v61 = *(unsigned __int8 *)(Value + 10);
    ++*(_DWORD *)(v0 + 120);
    swift_bridgeObjectRetain();
    v11 = (size_t *)(v0 + 112);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v11;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v13 + 16));
      if ((v7 & 2) == 0)
      {
LABEL_4:
        swift_bridgeObjectRelease();
LABEL_7:
        DisplayList.HostedViewState.reclaim()();
        return v9 & 1;
      }
    }
    else
    {
      *v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v13 + 24) >> 1);
      swift_bridgeObjectRelease();
      if ((v7 & 2) == 0)
        goto LABEL_4;
    }
    DisplayList.Index.init()();
    v57 = *(_QWORD *)(v1 + 16);
    v58 = *(_DWORD *)(v1 + 24);
    v62 = v10;
    v14 = *(_QWORD *)(v1 + 32);
    v15 = *(_DWORD *)(v1 + 40);
    v16 = *(_DWORD *)(v1 + 44);
    v17 = *(_DWORD *)(v1 + 48);
    v18 = *(_DWORD *)(v1 + 52);
    v19 = *(_QWORD *)(v1 + 64);
    v46 = *(_QWORD *)(v1 + 56);
    v60 = v19;
    v20 = *(_DWORD *)(v1 + 76);
    v43 = *(_DWORD *)(v1 + 72);
    v21 = *(_DWORD *)(v1 + 84);
    v45 = *(_DWORD *)(v1 + 80);
    v59 = v21;
    v22 = *(_DWORD *)(v1 + 88);
    v44 = *(_DWORD *)(v1 + 92);
    v42 = *(_DWORD *)(v1 + 96);
    *(_QWORD *)&v66 = v57;
    DWORD2(v66) = v58;
    v67 = v14;
    v48 = v14;
    v68 = v15;
    v69 = v16;
    v56 = v9;
    v23 = v15;
    v54 = v15;
    v53 = v16;
    v70 = v17;
    v71 = v18;
    v52 = v17;
    v51 = v18;
    v72 = v46;
    v73 = v19;
    v74 = v43;
    v75 = v20;
    v55 = v5;
    v24 = v20;
    v50 = v20;
    v76 = v45;
    v77 = v21;
    v78 = v22;
    v79 = v44;
    v49 = v22;
    v80 = v42;
    _ViewInputs.transform.getter();
    v25 = AGGraphGetValue();
    v26 = *(_QWORD *)v25;
    v47 = *(_OWORD *)(v25 + 8);
    v27 = *(_QWORD *)(v25 + 24);
    v28 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)&v66 = v57;
    DWORD2(v66) = v58;
    v67 = v14;
    v68 = v23;
    v69 = v16;
    v70 = v17;
    v71 = v18;
    v29 = v46;
    v72 = v46;
    v73 = v60;
    v30 = v43;
    v74 = v43;
    v75 = v24;
    v31 = v45;
    v76 = v45;
    v77 = v59;
    v32 = v44;
    v78 = v22;
    v79 = v44;
    LODWORD(v14) = v42;
    v80 = v42;
    v33 = v26;
    swift_retain();
    _ViewInputs.environment.getter();
    v34 = (uint64_t *)AGGraphGetValue();
    v35 = *v34;
    v9 = v34[1];
    v81 = v33;
    v82 = v47;
    v83 = v27;
    v84 = v28;
    v85 = v35;
    v86 = v9;
    v63 = v62;
    v64 = v7;
    v65 = v61;
    v36 = type metadata accessor for DisplayList.ArchiveIDs();
    v37 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v55, 1, 1, v36);
    *(_QWORD *)&v66 = v57;
    DWORD2(v66) = v58;
    v67 = v48;
    v68 = v54;
    v69 = v53;
    v70 = v52;
    v71 = v51;
    v72 = v29;
    v73 = v60;
    v74 = v30;
    v75 = v50;
    v76 = v31;
    v77 = v59;
    v78 = v49;
    v79 = v32;
    v80 = v14;
    LOBYTE(v9) = v56;
    swift_retain();
    swift_retain();
    _ViewInputs.position.getter();
    v66 = *(_OWORD *)AGGraphGetValue();
    v38 = MEMORY[0x18D755E9C]();
    DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(&v63, (uint64_t)v87, v37, (uint64_t)&v81, v38, v39);
    outlined destroy of TableRowID?(v37, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)MEMORY[0x1E0CE0F78], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  return v9 & 1;
}

uint64_t DisplayList.HostedViewState.splicedDisplayList()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Value;
  __int16 v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  _BYTE v13[20];
  uint64_t v14;
  __int16 v15;
  char v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v13[-v4 - 4];
  Value = AGGraphGetValue();
  v7 = *(_WORD *)(Value + 8);
  v8 = *(_BYTE *)(Value + 10);
  v14 = *(_QWORD *)Value;
  v15 = v7;
  v16 = v8;
  if ((v7 & 2) != 0)
  {
    swift_bridgeObjectRetain();
    DisplayList.Index.init()();
    v10 = type metadata accessor for DisplayList.ArchiveIDs();
    v11 = MEMORY[0x1E0CE0F78];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
    DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(&v14, (uint64_t)v13, (uint64_t)v5, MEMORY[0x1E0DEE9E0], &v12);
    outlined destroy of TableRowID?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    result = v14;
    v7 = v15;
    v8 = v16;
  }
  else
  {
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 10) = v8;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance DisplayList.HostedViews.SplicedDisplayList@<X0>(uint64_t a1@<X8>)
{
  void (*v2)(uint64_t, char);
  _QWORD v4[4];

  AGGraphGetValue();
  swift_retain();
  v2 = specialized MutableBox.wrappedValue.modify(v4);
  DisplayList.HostedViewState.splicedDisplayList()(a1);
  v2((uint64_t)v4, 0);
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews.SplicedDisplayList()
{
  lazy protocol witness table accessor for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList();
  return static AsyncAttribute.flags.getter();
}

Swift::Void __swiftcall DisplayList.HostedViews.ResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *Value;
  __int128 v4;
  __int128 *v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned int *)(AGGraphGetValue() + 8);
  Value = (_OWORD *)AGGraphGetValue();
  v4 = Value[1];
  v14[0] = *Value;
  v14[1] = v4;
  v5 = (__int128 *)AGGraphGetValue();
  v7 = v6 & 1;
  v13 = *v5;
  v8 = AGGraphGetValue();
  v10 = v9 & 1;
  v15 = *(_QWORD *)v8;
  v16 = *(_OWORD *)(v8 + 8);
  v17 = *(_OWORD *)(v8 + 24);
  swift_retain();
  v11 = swift_retain();
  specialized DisplayList.HostedViewResponder.update(info:size:position:transform:)(v11, v2, (uint64_t)v14, (uint64_t)&v13, v7, &v15, v10);
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v12 + 32) = v1;
    v15 = v12;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews.ResponderFilter()
{
  lazy protocol witness table accessor for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter();
  return static AsyncAttribute.flags.getter();
}

uint64_t DisplayList.HostedViews.Preference.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Value;
  double v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t AssociatedTypeWitness;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[10];
  __int128 v52;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v35 = (char *)&v32 - v7;
  v8 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (Swift::UInt32 *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v14 = *(_QWORD *)(v13 + 120);
  v15 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  swift_bridgeObjectRetain();
  v37 = a3;
  v38 = a1;
  v39 = a2;
  v15(a1, a2);
  v16 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v17 = *(_QWORD *)(v16 + 128);
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
    return swift_bridgeObjectRelease();
  v19 = v17 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v32 = v18 - 1;
  LODWORD(v33) = 1;
LABEL_3:
  v22 = v21;
  while (v22 < *(_QWORD *)(v17 + 16))
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19 + *(_QWORD *)(v9 + 72) * v22, (uint64_t)v12, type metadata accessor for DisplayList.HostedViewState.Key);
    if (*(_QWORD *)(v14 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12), (v24 & 1) != 0))
    {
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(_QWORD *)(v14 + 56) + 176 * v23, (uint64_t)&v40);
    }
    else
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for DisplayList.HostedViewState.Key);
    if (*((_QWORD *)&v42 + 1))
    {
      v51[8] = v48;
      v51[9] = v49;
      v52 = v50;
      v51[4] = v44;
      v51[5] = v45;
      v51[6] = v46;
      v51[7] = v47;
      v51[0] = v40;
      v51[1] = v41;
      v51[2] = v42;
      v51[3] = v43;
      if (*((_QWORD *)&v49 + 1))
      {
        *(_QWORD *)&v40 = *((_QWORD *)&v49 + 1);
        *((_QWORD *)&v40 + 1) = v52;
        v25 = _ViewOutputs.subscript.getter();
        if ((v25 & 0x100000000) == 0)
        {
          if ((v33 & 1) != 0)
          {
            v27 = AssociatedTypeWitness;
            Value = AGGraphGetValue();
            (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, Value, v27);
            outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v51);
            (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v27);
            result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v37, v35, v27);
          }
          else
          {
            v33 = &v32;
            v29 = MEMORY[0x1E0C80A78](v25, v26);
            v30 = v39;
            *(&v32 - 4) = v38;
            *(&v32 - 3) = v30;
            *((_DWORD *)&v32 - 4) = v31;
            (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v30 + 24))(v37, partial apply for closure #1 in IncrementalPreference.value.getter, v29);
            result = outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v51);
          }
          LODWORD(v33) = 0;
          v21 = v22 + 1;
          if (v32 == v22)
          {
LABEL_19:
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          goto LABEL_3;
        }
      }
      result = outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v51);
    }
    else
    {
      result = outlined destroy of TableRowID?((uint64_t)&v40, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    }
    if (v18 == ++v22)
      goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DisplayList.HostedViews.Preference<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance DisplayList.HostedViews.Preference<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DisplayList.HostedViews.Preference.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews.Preference<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews.Preference<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews()
{
  lazy protocol witness table accessor for type DisplayList.HostedViews and conformance DisplayList.HostedViews();
  return static AsyncAttribute.flags.getter();
}

void DisplayList.HostedViewState.Key.hash(into:)()
{
  Swift::UInt32 *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v12 - v9;
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  v11 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of UTType?((uint64_t)v0 + *(int *)(v11 + 24), (uint64_t)v10, &lazy cache variable for type metadata for UUID?, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v10, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  }
}

Swift::Int DisplayList.HostedViewState.Key.hashValue.getter()
{
  Swift::UInt32 *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v13 - v9;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  v11 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of UTType?((uint64_t)v0 + *(int *)(v11 + 24), (uint64_t)v10, &lazy cache variable for type metadata for UUID?, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v10, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2)
{
  Swift::UInt32 *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = type metadata accessor for UUID();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v15 - v12;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v2);
  Hasher._combine(_:)(v2[1]);
  outlined init with copy of UTType?((uint64_t)v2 + *(int *)(a2 + 24), (uint64_t)v13, &lazy cache variable for type metadata for UUID?, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v4);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  }
  return Hasher._finalize()();
}

void DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  _QWORD v59[25];
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int16 v88;
  char v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD v93[174];

  v79 = a3;
  v80 = a4;
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v65 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v67 = (char *)v59 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v59[23] = (char *)v59 - v19;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], v10);
  MEMORY[0x1E0C80A78](v20, v21);
  v59[19] = (char *)v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v59[22] = (char *)v59 - v25;
  v60 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v62 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v26);
  v59[21] = (char *)v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v59[18] = (char *)v59 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v59[24] = (char *)v59 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  MEMORY[0x1E0C80A78](v36, v37);
  v64 = (char *)v59 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v61 = (char *)v59 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v63 = (char *)v59 - v45;
  if ((a1[4] & 2) != 0)
  {
    v46 = *(_QWORD *)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    {
      v66 = v6;
      v69 = (uint64_t *)(v46 + 32);
      v59[3] = v80 + 40;
      v59[16] = &v87;
      v59[17] = v44;
      v59[14] = &v92;
      v59[15] = &v91;
      v59[13] = v93;
      v47 = swift_bridgeObjectRetain();
      *(double *)&v59[20] = a6;
      v72 = a2;
      v68 = v47;
      if (*(_QWORD *)(v47 + 16))
      {
        v48 = *v69;
        v49 = v69[1];
        v50 = v69[2];
        v51 = v69[3];
        v52 = v69[4];
        v53 = v69[5];
        v55 = v69[6];
        v54 = v69[7];
        v56 = *((unsigned __int8 *)v69 + 66);
        v57 = *((unsigned __int16 *)v69 + 32);
        v58 = *((_DWORD *)v69 + 17);
        v75 = 1;
        v93[72] = v58;
        v77 = v57 | (v56 << 16);
        outlined copy of DisplayList.Item.Value(v53, v55);
        DisplayList.Index.enter(identity:)();
        v74 = v81;
        v73 = v82;
        *(_QWORD *)&v81 = v48;
        *((_QWORD *)&v81 + 1) = v49;
        v82 = v50;
        v83 = v51;
        v71 = v52;
        v84 = v52;
        v85 = v53;
        v78 = v53;
        v76 = v55;
        v86 = v55;
        v87 = v54;
        v89 = v56;
        v88 = v57;
        v90 = v58;
        DisplayList.Item.frame.getter();
        __asm { BR              X8 }
      }
      __break(1u);
      JUMPOUT(0x187362B2CLL);
    }
  }
}

void DisplayList.HostedViewState.reclaim()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 104) + 16))
  {
    v1 = swift_bridgeObjectRetain();
    v2 = specialized _NativeDictionary.filter(_:)(v1, v0);
    swift_bridgeObjectRelease_n();
    *(_QWORD *)(v0 + 104) = v2;
    v3 = *(_QWORD *)(v0 + 112);
    if (*(_QWORD *)(v3 + 16) < *(_QWORD *)(v3 + 24) >> 3)
    {
      v4 = MEMORY[0x1E0DEE9D8];
      specialized Array.append<A>(contentsOf:)(v3);
      *(_QWORD *)(v0 + 112) = v4;
    }
  }
}

uint64_t DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, CGFloat a6, CGFloat a7)
{
  _OWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t *v32;
  CGPoint v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[6];
  _BYTE v37[28];

  v33.x = a6;
  v33.y = a7;
  v9 = *a4;
  v10 = a4[1];
  v11 = a4[2];
  v12 = a4[3];
  v13 = a4[4];
  v14 = *a5;
  v15 = a5[1];
  v16 = a5[2];
  v17 = a5[3];
  v18 = a5[4];
  v19 = a5[5];
  v20 = a5[6];
  v21 = v7[5];
  v36[4] = v7[4];
  v36[5] = v21;
  *(_OWORD *)v37 = v7[6];
  *(_OWORD *)&v37[12] = *(_OWORD *)((char *)v7 + 108);
  v22 = v7[1];
  v36[0] = *v7;
  v36[1] = v22;
  v23 = v7[3];
  v36[2] = v7[2];
  v36[3] = v23;
  if (!*(_QWORD *)(a1 + 144))
  {
    v32 = a3;
    v25 = (id)AGSubgraphGetGraph();
    v26 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    *(_QWORD *)(a1 + 144) = v26;
    v27 = v26;
    AGGraphClearUpdate();
    v28 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)((int *)v36, a2, a1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    *(_QWORD *)(swift_allocObject() + 16) = v27;
    v29 = v27;
    static Update.enqueueAction(_:)();

    swift_release();
    a3 = v32;
  }
  *(_QWORD *)a1 = v13;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)&v37[24];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), a3);
  *(_QWORD *)&v34 = v9;
  *((_QWORD *)&v34 + 1) = v10;
  *(_QWORD *)&v35 = v11;
  *((_QWORD *)&v35 + 1) = v12;
  DisplayList.Item.frame.getter();
  static ViewSize.fixed(_:)();
  *(_OWORD *)(a1 + 56) = v34;
  *(_OWORD *)(a1 + 72) = v35;
  v30 = (_QWORD *)(a1 + 88);
  swift_retain();
  swift_release();
  *v30 = v14;
  v30[1] = v15;
  v30[2] = v16;
  v30[3] = v17;
  v30[4] = v18;
  ViewTransform.resetPosition(_:)(v33);
  swift_retain();
  swift_retain();
  swift_release();
  result = swift_release();
  v30[5] = v19;
  v30[6] = v20;
  return result;
}

uint64_t closure #1 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t View;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _OWORD v36[4];
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  _OWORD v45[2];
  _BYTE v46[36];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  View = type metadata accessor for DisplayList.HostedViewState.FetchView(0);
  MEMORY[0x1E0C80A78](View, v7);
  v9 = (_DWORD *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *a1;
  if (*a1 == *MEMORY[0x1E0CFED28])
    __break(1u);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v9 + *(int *)(View + 20), type metadata accessor for DisplayList.HostedViewState.Key);
  *v9 = v10;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.FetchView and conformance DisplayList.HostedViewState.FetchView, type metadata accessor for DisplayList.HostedViewState.FetchView, (uint64_t)&protocol conformance descriptor for DisplayList.HostedViewState.FetchView);
  v31 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.FetchView);
  v11 = *((_OWORD *)a1 + 2);
  v44 = *((_OWORD *)a1 + 1);
  v45[0] = v11;
  v12 = *((_OWORD *)a1 + 4);
  v45[1] = *((_OWORD *)a1 + 3);
  *(_OWORD *)v46 = v12;
  *(_OWORD *)&v46[16] = *((_OWORD *)a1 + 5);
  *(_DWORD *)&v46[32] = a1[24];
  v13 = *(_QWORD *)&v45[0];
  v38 = v44;
  v41 = *(_OWORD *)((char *)v45 + 8);
  v39 = DWORD2(v44);
  LODWORD(v43[0]) = DWORD2(v12);
  *(_QWORD *)&v42 = *((_QWORD *)&v45[1] + 1);
  *((_QWORD *)&v42 + 1) = v12;
  *(_OWORD *)((char *)v43 + 4) = *(_OWORD *)&v46[12];
  *(_QWORD *)((char *)&v43[1] + 4) = *(_QWORD *)&v46[28];
  swift_beginAccess();
  v14 = *(_DWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  v16 = *(_OWORD *)(v13 + 32);
  v29 = *(_OWORD *)(v13 + 48);
  v30 = v16;
  v32 = a3;
  v18 = *(_QWORD *)(v13 + 64);
  v17 = *(_QWORD *)(v13 + 72);
  v19 = *(_BYTE *)(v13 + 80);
  v28 = *(unsigned __int8 *)(v13 + 81);
  v20 = *(_QWORD *)(v13 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(_QWORD *)(v21 + 24) = v15;
  v22 = v29;
  *(_OWORD *)(v21 + 32) = v30;
  *(_OWORD *)(v21 + 48) = v22;
  *(_QWORD *)(v21 + 64) = v18;
  *(_QWORD *)(v21 + 72) = v17;
  *(_BYTE *)(v21 + 80) = v19;
  *(_BYTE *)(v21 + 81) = v28;
  *(_QWORD *)(v21 + 88) = v20;
  outlined retain of _ViewInputs((uint64_t)&v44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v40 = v21;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  ViewGraph.$zeroPoint.getter();
  swift_release();
  _ViewInputs.position.setter();
  *(_QWORD *)&v35 = v38;
  DWORD2(v35) = v39;
  *(_QWORD *)&v36[0] = v40;
  *(_OWORD *)((char *)v36 + 8) = v41;
  *(_OWORD *)((char *)&v36[1] + 8) = v42;
  *(_OWORD *)((char *)&v36[2] + 8) = v43[0];
  *((_QWORD *)&v36[3] + 1) = *(_QWORD *)&v43[1];
  v37 = DWORD2(v43[1]);
  _ViewInputs.position.getter();
  _ViewInputs.containerPosition.setter();
  LODWORD(v17) = v31;
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.transform.setter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.setter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.size.setter();
  LODWORD(v35) = v17;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  *(_QWORD *)&v35 = v38;
  DWORD2(v35) = v39;
  *(_QWORD *)&v36[0] = v40;
  *(_OWORD *)((char *)v36 + 8) = v41;
  *(_OWORD *)((char *)&v36[1] + 8) = v42;
  *(_OWORD *)((char *)&v36[2] + 8) = v43[0];
  *((_QWORD *)&v36[3] + 1) = *(_QWORD *)&v43[1];
  v37 = DWORD2(v43[1]);
  static AnyView._makeView(view:inputs:)();
  v23 = v34;
  v24 = v32;
  *(_QWORD *)(v32 + 152) = v33;
  *(_QWORD *)(v24 + 160) = v23;
  v25 = v24;
  swift_bridgeObjectRelease();
  v36[1] = v45[1];
  v36[2] = *(_OWORD *)v46;
  v36[3] = *(_OWORD *)&v46[16];
  v37 = *(_DWORD *)&v46[32];
  v35 = v44;
  v36[0] = v45[0];
  type metadata accessor for DefaultLayoutViewResponder();
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v44);
  *(_QWORD *)(v25 + 168) = DefaultLayoutViewResponder.init(inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)()
{
  uint64_t result;

  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    static AGAttributeFlags.transactional.getter();
    return AGSubgraphUpdate();
  }
  return result;
}

uint64_t DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  char v53;
  uint64_t result;
  __int16 v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  _QWORD v60[15];
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  unsigned __int8 v81;
  uint64_t v82;

  v6 = v5;
  v78 = a3;
  v61 = a5;
  v10 = type metadata accessor for DisplayList.ArchiveIDs();
  v11 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  v63 = v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v60[10] = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v60[14] = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v60[11] = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v67 = (char *)v60 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v65 = (char *)v60 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v60 - v27;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v60 - v31;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], v14);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v60 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)v60 - v39;
  v41 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  MEMORY[0x1E0C80A78](v41, v42);
  MEMORY[0x1E0C80A78](v43, v44);
  MEMORY[0x1E0C80A78](v45, v46);
  v51 = *((_WORD *)a1 + 4);
  v52 = *a1;
  if ((v51 & 2) != 0)
  {
    v60[5] = v40;
    v60[6] = (char *)v60 - v48;
    v60[12] = v50;
    v60[13] = v47;
    v60[2] = v49;
    v60[3] = v36;
    v64 = v32;
    v60[4] = v28;
    DisplayList.init()();
    v55 = WORD4(v80);
    v56 = BYTE10(v80);
    *a1 = v80;
    *((_WORD *)a1 + 4) = v55;
    *((_BYTE *)a1 + 10) = v56;
    if (*(_QWORD *)(v52 + 16))
    {
      v77 = 0;
      v70 = a1;
      v71 = v52 + 32;
      v68 = v6;
      v69 = v52;
      v66 = a4;
      v79 = a2;
      if (*(_QWORD *)(v52 + 16))
      {
        v57 = *(_QWORD *)(v71 + 40);
        v58 = *(_QWORD *)(v71 + 48);
        v59 = *(_DWORD *)(v71 + 68);
        v76 = 1;
        v75 = v59;
        LODWORD(v82) = v59;
        outlined copy of DisplayList.Item.Value(v57, v58);
        outlined copy of DisplayList.Item.Value(v57, v58);
        DisplayList.Index.enter(identity:)();
        v74 = v80;
        v73 = v81;
        __asm { BR              X8 }
      }
      __break(1u);
      JUMPOUT(0x187364800);
    }
    result = swift_bridgeObjectRelease();
    *v61 = 0;
  }
  else
  {
    v53 = *((_BYTE *)a1 + 10);
    *(_QWORD *)&v80 = *a1;
    WORD4(v80) = v51;
    BYTE10(v80) = v53;
    return DisplayList.version.getter();
  }
  return result;
}

uint64_t DisplayList.HostedViewState.FetchView.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt32 *v6;
  _OWORD *v7;
  uint64_t View;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[6];
  _OWORD v36[2];

  v3 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (Swift::UInt32 *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_OWORD **)AGGraphGetValue();
  View = type metadata accessor for DisplayList.HostedViewState.FetchView(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(View + 20), (uint64_t)v6, type metadata accessor for DisplayList.HostedViewState.Key);
  swift_beginAccess();
  v9 = v7[5];
  v10 = v7[7];
  v35[5] = v7[6];
  v36[0] = v10;
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v7 + 124);
  v35[4] = v9;
  v11 = v7[2];
  v35[0] = v7[1];
  v35[1] = v11;
  v12 = v7[4];
  v35[2] = v7[3];
  v35[3] = v12;
  v13 = *((_QWORD *)&v36[0] + 1);
  if (*(_QWORD *)(*((_QWORD *)&v36[0] + 1) + 16))
  {
    outlined retain of DisplayList.HostedViewState((uint64_t)v35);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v15 & 1) != 0)
    {
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(_QWORD *)(v13 + 56) + 176 * v14, (uint64_t)&v24);
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
    }
    outlined release of DisplayList.HostedViewState((uint64_t)v35);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
  }
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for DisplayList.HostedViewState.Key);
  if (*((_QWORD *)&v26 + 1))
  {
    v17 = v33;
    *(_OWORD *)(a1 + 128) = v32;
    *(_OWORD *)(a1 + 144) = v17;
    *(_OWORD *)(a1 + 160) = v34;
    v18 = v29;
    *(_OWORD *)(a1 + 64) = v28;
    *(_OWORD *)(a1 + 80) = v18;
    v19 = v31;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 112) = v19;
    v20 = v25;
    *(_OWORD *)a1 = v24;
    *(_OWORD *)(a1 + 16) = v20;
    v21 = v27;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + 48) = v21;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    v22 = MEMORY[0x1E0CE31B0];
    *(_DWORD *)(a1 + 8) = 0;
    v23 = MEMORY[0x1E0CE31A8];
    *(_QWORD *)(a1 + 40) = v22;
    *(_QWORD *)(a1 + 48) = v23;
    static ViewSize.zero.getter();
    ViewTransform.init()();
    EnvironmentValues.init()();
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    return outlined destroy of TableRowID?((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance DisplayList.HostedViewState.FetchView@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViewState.FetchView()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.FetchView and conformance DisplayList.HostedViewState.FetchView, type metadata accessor for DisplayList.HostedViewState.FetchView, (uint64_t)&protocol conformance descriptor for DisplayList.HostedViewState.FetchView);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for Rule.value.getter in conformance DisplayList.HostedViewState.Child@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 16, (uint64_t)v7);
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  *a1 = v5;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViewState.Child()
{
  lazy protocol witness table accessor for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child();
  return static AsyncAttribute.flags.getter();
}

uint64_t DisplayList.HostedViewResponder.__allocating_init(inputs:)()
{
  _QWORD *v0;

  v0 = (_QWORD *)swift_allocObject();
  v0[27] = 0;
  v0[28] = 0;
  v0[26] = 0;
  ViewTransform.init()();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t DisplayList.HostedViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  _QWORD *v0;

  v0 = (_QWORD *)swift_allocObject();
  v0[27] = 0;
  v0[28] = 0;
  v0[26] = 0;
  ViewTransform.init()();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t DisplayList.HostedViewResponder.__ivar_destroyer()
{
  swift_release();
  return swift_release();
}

uint64_t DisplayList.HostedViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DisplayList.HostedViewResponder()
{
  return type metadata accessor for DisplayList.HostedViewResponder(0);
}

uint64_t type metadata accessor for DisplayList.HostedViews.Preference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DisplayList.HostedViews.Preference);
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews.SplicedDisplayList()
{
  return &type metadata for DisplayList.HostedViews.SplicedDisplayList;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews.ResponderFilter()
{
  return &type metadata for DisplayList.HostedViews.ResponderFilter;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews()
{
  return &type metadata for DisplayList.HostedViews;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews.Value()
{
  return &type metadata for DisplayList.HostedViews.Value;
}

uint64_t destroy for DisplayList.HostedViewState(uint64_t a1)
{

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.HostedViewState(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.HostedViewState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy124_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 108) = *(__int128 *)((char *)a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.HostedViewState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 124))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 124) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 124) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViewState()
{
  return &type metadata for DisplayList.HostedViewState;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews and conformance DisplayList.HostedViews()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews, &type metadata for DisplayList.HostedViews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews, &type metadata for DisplayList.HostedViews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews.ResponderFilter, &type metadata for DisplayList.HostedViews.ResponderFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews.ResponderFilter, &type metadata for DisplayList.HostedViews.ResponderFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews.SplicedDisplayList, &type metadata for DisplayList.HostedViews.SplicedDisplayList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews.SplicedDisplayList, &type metadata for DisplayList.HostedViews.SplicedDisplayList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList);
  }
  return result;
}

void base witness table accessor for _AttributeBody in DisplayList.HostedViews.Preference<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for DisplayList.HostedViewState.Key(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DisplayList.HostedViewState.Key);
}

void (*specialized MutableBox.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _OWORD *v1;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = (char *)malloc(0x2A0uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 83) = v1;
  swift_beginAccess();
  v4 = v1[5];
  v5 = v1[6];
  *((_OWORD *)v3 + 4) = v4;
  *((_OWORD *)v3 + 5) = v5;
  v6 = v1[7];
  *((_OWORD *)v3 + 6) = v6;
  v7 = *(_OWORD *)((char *)v1 + 124);
  *(_OWORD *)(v3 + 108) = v7;
  v8 = v1[1];
  v9 = v1[2];
  *(_OWORD *)v3 = v8;
  *((_OWORD *)v3 + 1) = v9;
  v10 = v1[3];
  v11 = v1[4];
  *((_OWORD *)v3 + 2) = v10;
  *((_OWORD *)v3 + 3) = v11;
  *((_OWORD *)v3 + 8) = v8;
  *((_OWORD *)v3 + 9) = v9;
  *((_OWORD *)v3 + 10) = v10;
  *((_OWORD *)v3 + 11) = v11;
  *((_OWORD *)v3 + 12) = v4;
  *((_OWORD *)v3 + 13) = v5;
  *((_OWORD *)v3 + 14) = v6;
  *(_OWORD *)(v3 + 236) = v7;
  outlined retain of DisplayList.HostedViewState((uint64_t)v3);
  return MutableBox.wrappedValue.modifyspecialized ;
}

void MutableBox.wrappedValue.modifyspecialized (uint64_t a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v2 = *(_OWORD **)a1;
  v3 = (_OWORD *)(*(_QWORD *)a1 + 128);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 256);
  v5 = *(_OWORD **)(*(_QWORD *)a1 + 664);
  if ((a2 & 1) != 0)
  {
    v6 = *(_OWORD *)(*(_QWORD *)a1 + 144);
    v2[32] = *v3;
    v2[33] = v6;
    v7 = v3[3];
    v9 = *v3;
    v8 = v3[1];
    v10 = v3[2];
    v11 = v7;
    v2[34] = v10;
    v2[35] = v7;
    *(_OWORD *)((char *)v2 + 620) = *(_OWORD *)((char *)v3 + 108);
    v12 = v3[6];
    v2[37] = v3[5];
    v2[38] = v12;
    v2[36] = v3[4];
    v13 = v5[1];
    v14 = v5[2];
    v15 = v5[4];
    v2[26] = v5[3];
    v2[27] = v15;
    v2[24] = v13;
    v2[25] = v14;
    v16 = v5[5];
    v17 = v5[6];
    v18 = v5[7];
    *(_OWORD *)((char *)v2 + 492) = *(_OWORD *)((char *)v5 + 124);
    v2[29] = v17;
    v2[30] = v18;
    v2[28] = v16;
    v5[3] = v10;
    v5[4] = v11;
    v5[1] = v9;
    v5[2] = v8;
    v19 = v3[4];
    v20 = v3[5];
    v21 = v3[6];
    *(_OWORD *)((char *)v5 + 124) = *(_OWORD *)((char *)v3 + 108);
    v5[6] = v20;
    v5[7] = v21;
    v5[5] = v19;
    outlined retain of DisplayList.HostedViewState((uint64_t)(v2 + 32));
    outlined release of DisplayList.HostedViewState((uint64_t)(v2 + 24));
    v22 = v3[5];
    v4[4] = v3[4];
    v4[5] = v22;
    v4[6] = v3[6];
    *(_OWORD *)((char *)v4 + 108) = *(_OWORD *)((char *)v3 + 108);
    v23 = v3[1];
    *v4 = *v3;
    v4[1] = v23;
    v24 = v3[3];
    v4[2] = v3[2];
    v4[3] = v24;
  }
  else
  {
    v25 = v5[4];
    v27 = v5[1];
    v26 = v5[2];
    *(_OWORD *)(*(_QWORD *)a1 + 288) = v5[3];
    v4[3] = v25;
    *v4 = v27;
    v4[1] = v26;
    v29 = v5[6];
    v28 = v5[7];
    v30 = v5[5];
    *(_OWORD *)((char *)v4 + 108) = *(_OWORD *)((char *)v5 + 124);
    v4[5] = v29;
    v4[6] = v28;
    v4[4] = v30;
    v31 = *v3;
    v32 = v3[1];
    v33 = v3[3];
    v5[3] = v3[2];
    v5[4] = v33;
    v5[1] = v31;
    v5[2] = v32;
    v34 = v3[4];
    v35 = v3[5];
    v36 = v3[6];
    *(_OWORD *)((char *)v5 + 124) = *(_OWORD *)((char *)v3 + 108);
    v5[6] = v35;
    v5[7] = v36;
    v5[5] = v34;
  }
  outlined release of DisplayList.HostedViewState((uint64_t)v4);
  free(v2);
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  BOOL v45;
  uint64_t v46[2];
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[152];
  int64_t v59;

  v53 = a4;
  v46[0] = a2;
  v47 = a1;
  type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo)();
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v56 = (uint64_t)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v55 = (uint64_t)v46 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v52 = (uint64_t)v46 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v46 - v17;
  v19 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v51 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = 0;
  v23 = 0;
  v54 = (_QWORD *)a3;
  v24 = *(_QWORD *)(a3 + 64);
  v49 = a3 + 64;
  v25 = 1 << *(_BYTE *)(a3 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v50 = (unint64_t)(v25 + 63) >> 6;
  while (v27)
  {
    v57 = (v27 - 1) & v27;
    v59 = v23;
    v28 = __clz(__rbit64(v27)) | (v23 << 6);
LABEL_21:
    v33 = v54;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54[6] + *(_QWORD *)(v51 + 72) * v28, (uint64_t)v22, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(v33[7] + 176 * v28, (uint64_t)v58);
    v34 = (uint64_t)&v18[*(int *)(v6 + 48)];
    v35 = (uint64_t)v22;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v22, (uint64_t)v18, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo((uint64_t)v58, v34);
    v36 = v52;
    v37 = v52 + *(int *)(v6 + 48);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v52, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(v34, v37);
    v38 = *(_DWORD *)(v37 + 8);
    outlined destroy of DisplayList.HostedViewState.ViewInfo(v37);
    LODWORD(v37) = *(_DWORD *)(v53 + 120);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, type metadata accessor for DisplayList.HostedViewState.Key);
    if (v38 == (_DWORD)v37)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo));
      outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v58);
      v22 = (char *)v35;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, type metadata accessor for DisplayList.HostedViewState.Key);
      *(unint64_t *)((char *)v47 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v45 = __OFADD__(v48++, 1);
      v23 = v59;
      v27 = v57;
      if (v45)
      {
        __break(1u);
LABEL_29:
        specialized _NativeDictionary.extractDictionary(using:count:)(v47, v46[0], v48, v54);
        return;
      }
    }
    else
    {
      v39 = v55 + *(int *)(v6 + 48);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v55, type metadata accessor for DisplayList.HostedViewState.Key);
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(v34, v39);
      v40 = *(void **)(v39 + 144);
      v41 = v40;
      outlined destroy of DisplayList.HostedViewState.ViewInfo(v39);
      if (v40)
      {
        AGSubgraphRef.willRemove()();

      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v55, type metadata accessor for DisplayList.HostedViewState.Key);
      v42 = v56 + *(int *)(v6 + 48);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v56, type metadata accessor for DisplayList.HostedViewState.Key);
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(v34, v42);
      v43 = *(void **)(v42 + 144);
      v44 = v43;
      outlined destroy of DisplayList.HostedViewState.ViewInfo(v42);
      if (v43)
      {
        AGSubgraphInvalidate();

      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, type metadata accessor for DisplayList.HostedViewState.Key);
      outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v58);
      v22 = (char *)v35;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v35, type metadata accessor for DisplayList.HostedViewState.Key);
      v23 = v59;
      v27 = v57;
    }
  }
  v29 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v29 >= v50)
    goto LABEL_29;
  v30 = *(_QWORD *)(v49 + 8 * v29);
  v31 = v23 + 1;
  if (v30)
    goto LABEL_20;
  v31 = v23 + 2;
  if (v23 + 2 >= v50)
    goto LABEL_29;
  v30 = *(_QWORD *)(v49 + 8 * v31);
  if (v30)
    goto LABEL_20;
  v31 = v23 + 3;
  if (v23 + 3 >= v50)
    goto LABEL_29;
  v30 = *(_QWORD *)(v49 + 8 * v31);
  if (v30)
  {
LABEL_20:
    v57 = (v30 - 1) & v30;
    v59 = v31;
    v28 = __clz(__rbit64(v30)) + (v31 << 6);
    goto LABEL_21;
  }
  v32 = v23 + 4;
  if (v23 + 4 >= v50)
    goto LABEL_29;
  v30 = *(_QWORD *)(v49 + 8 * v32);
  if (v30)
  {
    v31 = v23 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v50)
      goto LABEL_29;
    v30 = *(_QWORD *)(v49 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
}

{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  id v19;
  id v20;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v6 = 0;
  v7 = 0;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v25 = (unint64_t)(v8 + 63) >> 6;
  while (2)
  {
    v23 = v6;
    if (v10)
    {
LABEL_6:
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v13 >= v25)
        goto LABEL_24;
      v14 = *(_QWORD *)(v24 + 8 * v13);
      ++v7;
      if (!v14)
      {
        v7 = v13 + 1;
        if (v13 + 1 >= v25)
          goto LABEL_24;
        v14 = *(_QWORD *)(v24 + 8 * v7);
        if (!v14)
        {
          v7 = v13 + 2;
          if (v13 + 2 >= v25)
            goto LABEL_24;
          v14 = *(_QWORD *)(v24 + 8 * v7);
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v25)
            {
LABEL_24:
              specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v23, a3);
              return;
            }
            v14 = *(_QWORD *)(v24 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                v7 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_26;
                if (v7 >= v25)
                  goto LABEL_24;
                v14 = *(_QWORD *)(v24 + 8 * v7);
                ++v15;
                if (v14)
                  goto LABEL_20;
              }
            }
            v7 = v15;
          }
        }
      }
LABEL_20:
      v10 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_21:
      v16 = *(_QWORD *)(a3 + 56) + 48 * v12;
      if (*(_DWORD *)(v16 + 32) == *(_DWORD *)(a4 + 144))
        break;
      v17 = *(void **)v16;
      v18 = *(_BYTE *)(v16 + 40);
      swift_retain();
      v19 = v17;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v20 = v19;
      AGSubgraphRef.willInvalidate(isInserted:)(v18);
      AGSubgraphInvalidate();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();

      if (v10)
        goto LABEL_6;
    }
    *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v6 = v23 + 1;
    if (!__OFADD__(v23, 1))
      continue;
    break;
  }
LABEL_27:
  __break(1u);
}

BOOL specialized static DisplayList.HostedViewState.Key.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t (*v38)(void);
  char *v39;
  uint64_t (*v40)(void);
  char v41;
  void (*v42)(char *, uint64_t);
  char *v44;
  uint64_t v45;

  v4 = type metadata accessor for UUID();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UUID?, UUID?)();
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v44 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v44 - v25;
  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v44 = v9;
  v27 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v28 = (uint64_t)a1 + *(int *)(v27 + 24);
  v45 = v6;
  v29 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  outlined init with copy of UTType?(v28, (uint64_t)v26, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
  v30 = *(int *)(v27 + 24);
  v31 = v4;
  outlined init with copy of UTType?((uint64_t)a2 + v30, (uint64_t)v22, &lazy cache variable for type metadata for UUID?, v29);
  v32 = (uint64_t)&v14[*(int *)(v11 + 48)];
  outlined init with copy of UTType?((uint64_t)v26, (uint64_t)v14, &lazy cache variable for type metadata for UUID?, v29);
  v33 = v29;
  v34 = v45;
  outlined init with copy of UTType?((uint64_t)v22, v32, &lazy cache variable for type metadata for UUID?, v33);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v35((uint64_t)v14, 1, v4) == 1)
  {
    v36 = MEMORY[0x1E0CB0998];
    outlined destroy of TableRowID?((uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    outlined destroy of TableRowID?((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)v36, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if (v35(v32, 1, v4) == 1)
    {
      outlined destroy of TableRowID?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      return 1;
    }
    goto LABEL_8;
  }
  outlined init with copy of UTType?((uint64_t)v14, (uint64_t)v18, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
  if (v35(v32, 1, v4) == 1)
  {
    v37 = v34;
    v38 = MEMORY[0x1E0CB0998];
    outlined destroy of TableRowID?((uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)MEMORY[0x1E0CB0998], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    outlined destroy of TableRowID?((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)v38, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v4);
LABEL_8:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for (UUID?, UUID?));
    return 0;
  }
  v39 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v44, v32, v4);
  v40 = MEMORY[0x1E0CB0998];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42 = *(void (**)(char *, uint64_t))(v34 + 8);
  v42(v39, v31);
  outlined destroy of TableRowID?((uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)v40, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined destroy of TableRowID?((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)v40, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v42(v18, v31);
  outlined destroy of TableRowID?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UUID?, (uint64_t)v40, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  return (v41 & 1) != 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt32 *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  _BYTE v37[32];
  _OWORD v38[6];
  _OWORD v39[2];
  uint64_t v40;

  v5 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (Swift::UInt32 *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x1E0DEE9D8];
  v40 = MEMORY[0x1E0DEE9D8];
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v23[1] = a1;
    v23[2] = v2;
    v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v13 = (_OWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v24 = *(_QWORD *)(v6 + 72);
    for (i = v11 - 1; ; --i)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v12, (uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.Key);
      v15 = v13[6];
      v38[5] = v13[5];
      v39[0] = v15;
      *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)((char *)v13 + 108);
      v16 = v13[4];
      v17 = v13[1];
      v38[0] = *v13;
      v38[1] = v17;
      v18 = v13[3];
      v38[2] = v13[2];
      v38[3] = v18;
      v38[4] = v16;
      v19 = *((_QWORD *)&v39[0] + 1);
      if (*(_QWORD *)(*((_QWORD *)&v39[0] + 1) + 16))
      {
        outlined retain of DisplayList.HostedViewState((uint64_t)v38);
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if ((v21 & 1) != 0)
        {
          outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(_QWORD *)(v19 + 56) + 176 * v20, (uint64_t)&v25);
        }
        else
        {
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v25 = 0u;
        }
        outlined release of DisplayList.HostedViewState((uint64_t)v38);
      }
      else
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
      }
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.Key);
      if (*((_QWORD *)&v27 + 1))
      {
        v36[8] = v33;
        *(_OWORD *)v37 = v34;
        *(_OWORD *)&v37[16] = v35;
        v36[4] = v29;
        v36[5] = v30;
        v36[6] = v31;
        v36[7] = v32;
        v36[0] = v25;
        v36[1] = v26;
        v36[2] = v27;
        v36[3] = v28;
        if (!*((_QWORD *)&v35 + 1))
        {
          __break(1u);
          return result;
        }
        if (*(_QWORD *)&v37[8])
        {
          v25 = *(_OWORD *)&v37[8];
          swift_retain();
          if ((_ViewOutputs.subscript.getter() & 0x100000000) == 0)
          {
            type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
            AGGraphGetValue();
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          swift_retain();
        }
        MultiViewResponder.children.setter();
        swift_release();
        swift_retain();
        v22 = outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v36);
        MEMORY[0x18D75CF58](v22);
        if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        if (!i)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          return v40;
        }
      }
      else
      {
        outlined destroy of TableRowID?((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        if (!i)
          goto LABEL_21;
      }
      v12 += v24;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = MEMORY[0x1E0DEE9D8];
  v19 = MEMORY[0x1E0DEE9D8];
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v17 = a1 + 32;
    v4 = a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    for (i = 0; i != v18; ++i)
    {
      v6 = v17 + 32 * i;
      v7 = *(_QWORD *)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v9 = *(_BYTE *)(v6 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v10)
      {
        v11 = (unsigned __int8 *)(*(_QWORD *)v4 + 64);
        v12 = v10 - 1;
        do
        {
          v13 = v12;
          v14 = *v11;
          v11 += 40;
          if (((v14 != 255) & v14) != 0)
            break;
          --v12;
        }
        while (v13);
      }
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v8, v9);
      swift_retain();
      swift_retain();
      v15 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
      swift_release();
      swift_release();
      outlined consume of Text.Storage(v7, v8, v9);
      v16 = swift_bridgeObjectRelease();
      if (v15)
      {
        MEMORY[0x18D75CF58](v16);
        if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

void specialized DisplayList.HostedViewResponder.update(info:size:position:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;

  v8 = v7;
  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a6[4];
  *(_QWORD *)(v8 + 208) = a1;
  swift_retain();
  swift_release();
  swift_beginAccess();
  swift_retain();
  v17 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v17, a1);
  swift_bridgeObjectRelease();
  swift_release();
  v18 = MultiViewResponder.children.setter();
  *(double *)(v8 + 216) = MEMORY[0x18D75BE3C](v18);
  *(_QWORD *)(v8 + 224) = v19;
  if ((a5 & 1) != 0 || (a7 & 1) != 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v8 + 232) = v12;
    *(_QWORD *)(v8 + 240) = v13;
    *(_QWORD *)(v8 + 248) = v14;
    *(_QWORD *)(v8 + 256) = v15;
    *(_QWORD *)(v8 + 264) = v16;
    swift_retain();
    v20 = swift_release();
    v21 = MEMORY[0x18D755E9C](v20);
    v23 = v22;
    swift_beginAccess();
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v23, *(unint64_t *)&v21));
    swift_endAccess();
  }
}

uint64_t outlined destroy of DisplayList.HostedViewState.ViewInfo(uint64_t a1)
{
  destroy for DisplayList.HostedViewState.ViewInfo(a1);
  return a1;
}

uint64_t outlined init with copy of DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DisplayList.HostedViewState.ViewInfo(a2, a1);
  return a2;
}

uint64_t sub_187366438()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined assign with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1873664B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined retain of DisplayList.HostedViewState(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t outlined release of DisplayList.HostedViewState(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t sub_1873665CC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)()
{
  return closure #2 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)();
}

uint64_t type metadata accessor for DisplayList.HostedViewState.FetchView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DisplayList.HostedViewState.FetchView);
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViewState.Child, &unk_1E1AAF158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViewState.Child, &unk_1E1AAF158);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child);
  }
  return result;
}

void type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo))
  {
    type metadata accessor for DisplayList.HostedViewState.Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo));
  }
}

void *type metadata accessor for DisplayList.HostedViewState.Child()
{
  return &unk_1E1AAF158;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayList.HostedViewState.FetchView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    v8 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
    v9 = &v6[v8];
    v10 = &v7[v8];
    v11 = type metadata accessor for UUID();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for DisplayList.HostedViewState.FetchView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = v2 + *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return result;
}

_DWORD *initializeWithCopy for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  v8 = &v5[v7];
  v9 = &v6[v7];
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

_DWORD *assignWithCopy for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_DWORD *)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  *v5 = *(_DWORD *)((char *)a2 + v4);
  v5[1] = *(_DWORD *)((char *)a2 + v4 + 4);
  v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  v8 = (char *)v5 + v7;
  v9 = &v6[v7];
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

_DWORD *initializeWithTake for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  v8 = &v5[v7];
  v9 = &v6[v7];
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

_DWORD *assignWithTake for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  v8 = &v5[v7];
  v9 = &v6[v7];
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState.FetchView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187366CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState.FetchView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187366D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DisplayList.HostedViewState.FetchView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DisplayList.HostedViewState.Key(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DisplayList.HostedViewState.ViewInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = *(void **)(a2 + 144);
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  v4 = *(void **)(a1 + 144);
  v5 = *(void **)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release();
  v6 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);

  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState.ViewInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState.ViewInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViewState.ViewInfo()
{
  return &type metadata for DisplayList.HostedViewState.ViewInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayList.HostedViewState.Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_QWORD *initializeWithCopy for DisplayList.HostedViewState.Key(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_DWORD *assignWithCopy for DisplayList.HostedViewState.Key(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

_QWORD *initializeWithTake for DisplayList.HostedViewState.Key(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for DisplayList.HostedViewState.Key(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState.Key()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187367718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState.Key()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18736777C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void type metadata completion function for DisplayList.HostedViewState.Key()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t base witness table accessor for _AttributeBody in DisplayList.HostedViewState.FetchView()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.FetchView and conformance DisplayList.HostedViewState.FetchView, type metadata accessor for DisplayList.HostedViewState.FetchView, (uint64_t)&protocol conformance descriptor for DisplayList.HostedViewState.FetchView);
}

uint64_t base witness table accessor for Equatable in DisplayList.HostedViewState.Key()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Key and conformance DisplayList.HostedViewState.Key, type metadata accessor for DisplayList.HostedViewState.Key, (uint64_t)&protocol conformance descriptor for DisplayList.HostedViewState.Key);
}

uint64_t static View.mapKitMakeDebuggableView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

void VibrantColorForegroundStyle.init(_:alwaysAppearsActive:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void VibrantColorForegroundStyle._apply(to:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t assignWithCopy for VibrantColorForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for VibrantColorForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VibrantColorForegroundStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VibrantColorForegroundStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VibrantColorForegroundStyle()
{
  return &type metadata for VibrantColorForegroundStyle;
}

void VibrantColorForegroundStyle.init(_:sensitiveToControlActiveState:)()
{
  VibrantColorForegroundStyle.init(_:alwaysAppearsActive:)();
}

uint64_t initializeBufferWithCopyOfBuffer for GradientBackground(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for GradientBackground(uint64_t a1)
{
  return outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for GradientBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v4);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

uint64_t *assignWithTake for GradientBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for GradientBackground()
{
  return &type metadata for GradientBackground;
}

uint64_t associated type witness table accessor for View.Body : View in GradientBackground()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in GradientBackground.body.getter@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  double v27;

  type metadata accessor for _ContiguousArrayStorage<Color>();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187BF9820;
  v6 = a2 & 1;
  outlined copy of Environment<Color?>.Content(a1, v6);
  v7 = specialized Environment.wrappedValue.getter(a1, a2 & 1);
  outlined consume of Environment<Color?>.Content(a1, v6);
  if (!v7)
    v7 = static Color.accentColor.getter();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = static Color.clear.getter();
  specialized Array._endMutation()();
  GeometryProxy.safeAreaInsets.getter();
  v27 = v8;
  GeometryProxy.size.getter();
  v10 = v9;
  GeometryProxy.safeAreaInsets.getter();
  v12 = v11;
  GeometryProxy.safeAreaInsets.getter();
  v14 = v13;
  if (one-time initialization token for minimumComponentHeight != -1)
    swift_once();
  v15 = *(double *)&static ClarityUIMetrics.minimumComponentHeight;
  if (one-time initialization token for backButtonPadding != -1)
    swift_once();
  v16 = *(double *)&static ClarityUIMetrics.backButtonPadding;
  GeometryProxy.size.getter();
  v18 = v17;
  GeometryProxy.safeAreaInsets.getter();
  v20 = v19;
  GeometryProxy.safeAreaInsets.getter();
  v22 = v21;
  v23 = MEMORY[0x18D75BC98](v5);
  v24 = static Edge.Set.all.getter();
  if (one-time initialization token for clarityUIContentBackground != -1)
    swift_once();
  v25 = static Color.clarityUIContentBackground;
  swift_retain();
  result = static Edge.Set.all.getter();
  *(_QWORD *)a3 = v23;
  *(_QWORD *)(a3 + 8) = 0x3FE0000000000000;
  *(double *)(a3 + 16) = v27 / (v10 + v12 + v14);
  *(_QWORD *)(a3 + 24) = 0x3FE0000000000000;
  *(double *)(a3 + 32) = 1.0 - (v15 + v16 + v16) / (v18 + v20 + v22);
  *(_QWORD *)(a3 + 40) = 0x3FC3333333333333;
  *(_BYTE *)(a3 + 48) = v24;
  *(_QWORD *)(a3 + 56) = v25;
  *(_BYTE *)(a3 + 64) = result;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance GradientBackground@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_BYTE *)(v5 + 24) = v4;
  *a1 = partial apply for closure #1 in GradientBackground.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
  return outlined copy of Environment<Color?>.Content(v3, v4);
}

uint64_t sub_187368040()
{
  uint64_t v0;

  outlined consume of Environment<Color?>.Content(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GradientBackground.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in GradientBackground.body.getter(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

void type metadata accessor for _ContiguousArrayStorage<Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Color>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>);
  }
}

unint64_t lazy protocol witness table accessor for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>;
  if (!lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>)
  {
    type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2768], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>);
  }
  return result;
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LinearGradient, _OpacityEffect>, MEMORY[0x1E0CE2800], MEMORY[0x1E0CE2BB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE5BA0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LinearGradient, _OpacityEffect>, MEMORY[0x1E0CE2800], MEMORY[0x1E0CE2BB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LinearGradient and conformance LinearGradient();
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinearGradient and conformance LinearGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient;
  if (!lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE27F0], MEMORY[0x1E0CE2800]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient);
  }
  return result;
}

uint64_t Scene.environment<A>(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v17 = a4;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a1 + 8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v17 - v8;
  v10 = type metadata accessor for _EnvironmentKeyWritingModifier();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a2, v6, v13);
  swift_retain();
  _EnvironmentKeyWritingModifier.init(keyPath:value:)();
  Scene.modifier<A>(_:)(v15, a3, v10, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
}

uint64_t Scene.transformEnvironment<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  swift_retain();
  swift_retain();
  v11[0] = _EnvironmentKeyTransformModifier.init(keyPath:transform:)();
  v11[1] = v7;
  v11[2] = v8;
  v9 = type metadata accessor for _EnvironmentKeyTransformModifier();
  Scene.modifier<A>(_:)(v11, a4, v9, a5);
  swift_release();
  return swift_release();
}

uint64_t sub_1873685F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyTransformModifier();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t type metadata completion function for LayoutGestureResponder()
{
  return swift_initClassMetadata2();
}

double static LayoutGestureModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  double result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v46 = a5;
  v47 = a4;
  v48 = a6;
  v67 = *MEMORY[0x1E0C80C00];
  v38 = *a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v16 = *(_DWORD *)(a2 + 56);
  v15 = *(_DWORD *)(a2 + 60);
  v17 = *(_DWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 68);
  v19 = *(_DWORD *)(a2 + 72);
  v20 = *(_DWORD *)(a2 + 76);
  v21 = *(_DWORD *)(a2 + 80);
  v51 = *(_QWORD *)a2;
  LODWORD(v52) = v7;
  v53 = v8;
  v44 = v15;
  v45 = v9;
  v54 = v9;
  v55 = v10;
  v56 = v11;
  v57 = v12;
  v58 = v14;
  v59 = v13;
  v60 = v16;
  v61 = v15;
  v42 = v18;
  v43 = v17;
  v62 = v17;
  v63 = v18;
  v41 = v19;
  v64 = v19;
  v65 = v20;
  v40 = v20;
  v39 = v21;
  v66 = v21;
  a3(&v49, a1, &v51);
  v51 = v13;
  LODWORD(v52) = v16;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v51 = v49;
    v52 = v50;
    v37 = _ViewOutputs.viewResponders()();
    v35 = v12;
    v36 = type metadata accessor for LayoutGestureResponder(0, v47, v46, v22);
    LODWORD(v51) = v38;
    type metadata accessor for LayoutGestureModifier(255, v47, v46, v23);
    type metadata accessor for _GraphValue();
    v24 = _GraphValue.value.getter();
    v51 = v6;
    LODWORD(v52) = v7;
    v53 = v8;
    v54 = v45;
    v55 = v10;
    v56 = v11;
    v57 = v12;
    v58 = v14;
    v59 = v13;
    v60 = v16;
    v61 = v44;
    v62 = v43;
    v63 = v42;
    v64 = v41;
    v65 = v40;
    v66 = v39;
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = LayoutGestureResponder.init(modifier:inputs:)(v24, &v51);
    LODWORD(v51) = v37;
    v52 = *(double *)&v25;
    MEMORY[0x1E0C80A78](v25, v26);
    v33 = type metadata accessor for LayoutResponderFilter(0, v47, v46, v27);
    v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LayoutResponderFilter<A>, v33);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)&v32, v33, MEMORY[0x1E0DEDCE8], v28, MEMORY[0x1E0DEDD18], v29);
    swift_release();
    LOBYTE(v51) = 0;
    _ViewOutputs.subscript.setter();
  }
  v30 = v48;
  *v48 = v49;
  result = v50;
  *((double *)v30 + 1) = v50;
  return result;
}

id LayoutGestureResponder.__allocating_init(modifier:inputs:)(int a1, uint64_t *a2)
{
  swift_allocObject();
  return LayoutGestureResponder.init(modifier:inputs:)(a1, a2);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LayoutGestureModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return static LayoutGestureModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LayoutGestureModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LayoutGestureModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t View.layoutGesture<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = type metadata accessor for LayoutGestureModifier(0, a4, a6, a4);
  swift_retain();
  MEMORY[0x18D75B4AC](v10, a3, v8, a5);
  return swift_release();
}

uint64_t LayoutResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id LayoutGestureResponder.init(modifier:inputs:)(int a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  id result;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 20);
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_DWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v3;
  *(_DWORD *)(v2 + 96) = v4;
  *(_QWORD *)(v2 + 104) = v5;
  v7 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v2 + 128) = v7;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a2 + 7);
  *(_QWORD *)(v2 + 160) = a2[9];
  *(_DWORD *)(v2 + 168) = v6;
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_QWORD *)(v2 + 176) = result;
    return (id)MultiViewResponder.init()();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void LayoutGestureResponder.makeGesture(inputs:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  __int128 v29[6];
  _BYTE v30[28];

  v3 = v2;
  v5 = a1[5];
  v29[4] = a1[4];
  v29[5] = v5;
  *(_OWORD *)v30 = a1[6];
  *(_OWORD *)&v30[12] = *(__int128 *)((char *)a1 + 108);
  v6 = a1[1];
  v29[0] = *a1;
  v29[1] = v6;
  v7 = a1[3];
  v29[2] = a1[2];
  v29[3] = v7;
  _GestureInputs.makeDefaultOutputs<A>()();
  if (!AGSubgraphIsValid())
    goto LABEL_11;
  v24 = (id)AGSubgraphGetCurrent();
  if (!v24)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = v30[24];
  v9 = (id)AGSubgraphGetGraph();
  v10 = AGSubgraphCreate();

  v11 = *(void **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = v10;

  v12 = *(void **)(v2 + 184);
  if (!v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v13 = v12;
  AGSubgraphRef.addSecondaryChild(_:)();

  if (!*(_QWORD *)(v2 + 184))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  AGSubgraphAddChild();
  if ((v8 & 0x10) == 0)
    goto LABEL_9;
  v14 = (id)AGSubgraphGetGraph();
  v15 = AGSubgraphCreate();

  v16 = *(void **)(v3 + 192);
  *(_QWORD *)(v3 + 192) = v15;

  v17 = *(void **)(v3 + 184);
  if (!v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18 = *(void **)(v3 + 192);
  if (v18)
  {
    v19 = v17;
    v20 = v18;
    AGSubgraphRef.addSecondaryChild(_:)();

LABEL_9:
    v21 = *(void **)(v3 + 184);
    if (v21)
    {
      v22 = v21;
      AGGraphClearUpdate();
      v23 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      closure #1 in LayoutGestureResponder.makeGesture(inputs:)(v3, v29, v25 | ((unint64_t)v26 << 32), v27);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
LABEL_11:
      *(_DWORD *)a2 = v25;
      *(_DWORD *)(a2 + 4) = v26;
      *(_QWORD *)(a2 + 8) = v27;
      *(_DWORD *)(a2 + 16) = v28;
      return;
    }
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t closure #1 in LayoutGestureResponder.makeGesture(inputs:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(*(_QWORD *)a1 + class metadata base offset for LayoutGestureResponder);
  v8 = *v6;
  v7 = v6[1];
  LODWORD(v52) = *(_DWORD *)(a1 + 80);
  *((_QWORD *)&v52 + 1) = a1;
  v33 = v8;
  v34 = type metadata accessor for LayoutGestureChild(0, v8, v7, a4);
  v35 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LayoutGestureChild<A>, v34);
  v9 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v52, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v32, v34, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  swift_release();
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v13 = HIDWORD(v11);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v7;
  *(_DWORD *)(v14 + 32) = v12;
  *(_DWORD *)(v14 + 36) = v13;
  v15 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = partial apply for closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:);
  *(_QWORD *)(a1 + 208) = v14;
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  v17 = a2[5];
  v56 = a2[4];
  v57 = v17;
  v58[0] = a2[6];
  *(_OWORD *)((char *)v58 + 12) = *(__int128 *)((char *)a2 + 108);
  v18 = a2[1];
  v52 = *a2;
  v53 = v18;
  v19 = a2[3];
  v54 = a2[2];
  v55 = v19;
  v20 = *(_DWORD *)(a1 + 96);
  v21 = *(_QWORD *)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  v24 = *(_DWORD *)(a1 + 168);
  v43 = *(_QWORD *)(a1 + 88);
  v44 = v20;
  v46 = *(_OWORD *)(a1 + 112);
  v45 = v21;
  v47 = v22;
  v48 = v23;
  v49 = *(_OWORD *)(a1 + 144);
  v50 = *(_QWORD *)(a1 + 160);
  v51 = v24;
  v25 = *(void **)(a1 + 192);
  if (v25)
  {
    v26 = *(id *)(a1 + 192);
LABEL_5:
    outlined retain of _GestureInputs((uint64_t)a2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v25;
    _GestureInputs.mergeViewInputs(_:viewSubgraph:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    _GraphValue.init(_:)();
    v29 = a2[5];
    v40 = a2[4];
    v41 = v29;
    v42[0] = a2[6];
    *(_OWORD *)((char *)v42 + 12) = *(__int128 *)((char *)a2 + 108);
    v30 = a2[1];
    v36 = *a2;
    v37 = v30;
    v31 = a2[3];
    v38 = a2[2];
    v39 = v31;
    static Gesture.makeDebuggableGesture(gesture:inputs:)();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GestureOutputs<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2FD8]);
    _GestureOutputs.overrideDefaultValues(_:)();
    v40 = v56;
    v41 = v57;
    v42[0] = v58[0];
    *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v58 + 12);
    v36 = v52;
    v37 = v53;
    v38 = v54;
    v39 = v55;
    outlined release of _GestureInputs((uint64_t)&v36);
    return swift_bridgeObjectRelease();
  }
  v27 = *(void **)(a1 + 184);
  if (v27)
  {
    v26 = v27;
    v25 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;

  v5 = a1;
  v6 = HIDWORD(a1);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = v5;
  *(_DWORD *)(v7 + 36) = v6;
  static Update.enqueueAction(_:)();
  return swift_release();
}

uint64_t LayoutGestureResponder.childrenDidChange()()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = *(void (**)(uint64_t))(v0 + 200);
  if (v1)
  {
    v2 = swift_retain();
    v1(v2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  }
  type metadata accessor for MultiViewResponder();
  v3 = (uint64_t (*)(void))method lookup function for MultiViewResponder();
  return v3();
}

uint64_t LayoutGestureResponder.resetGesture()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);

  v1 = v0[25];
  v0[25] = 0;
  v0[26] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  v2 = (void *)v0[23];
  v0[23] = 0;

  v3 = (void *)v0[24];
  v0[24] = 0;

  type metadata accessor for MultiViewResponder();
  v4 = (uint64_t (*)(void))method lookup function for ResponderNode();
  return v4();
}

void LayoutGestureResponder.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t LayoutGestureResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 200));
}

uint64_t LayoutGestureResponder.deinit()
{
  uint64_t v0;

  v0 = MultiViewResponder.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 200));
  return v0;
}

uint64_t LayoutGestureResponder.__deallocating_deinit()
{
  LayoutGestureResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LayoutGestureResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutGestureResponder);
}

uint64_t type metadata accessor for LayoutGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutGestureModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in LayoutGestureModifier<A>()
{
  return &protocol witness table for LayoutGestureModifier<A>;
}

uint64_t LayoutGestureChild.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(uint64_t);

  type metadata accessor for LayoutGestureModifier(0, a3, a4, a4);
  v5 = *(void (**)(uint64_t))AGGraphGetValue();
  swift_retain();
  v5(a2);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutGestureChild<A>(uint64_t a1)
{
  unsigned int *v1;

  return LayoutGestureChild.value.getter(*v1, *((_QWORD *)v1 + 1), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t type metadata accessor for LayoutResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutResponderFilter);
}

uint64_t type metadata accessor for LayoutGestureChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutGestureChild);
}

uint64_t sub_187369570()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_18736958C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    return AGGraphInvalidateValue();
  return result;
}

void base witness table accessor for _AttributeBody in LayoutGestureChild<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in LayoutResponderFilter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t MapKitViewTraitCollection.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ViewTraitCollection.init()();
  *a1 = v3;
  return result;
}

uint64_t MapKitViewTraitCollection.subscript.getter()
{
  return ViewTraitCollection.value<A>(for:)();
}

uint64_t MapKitViewTraitCollection.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  specialized MapKitViewTraitCollection.subscript.setter(a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*MapKitViewTraitCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  ViewTraitCollection.value<A>(for:)();
  return MapKitViewTraitCollection.subscript.modify;
}

void MapKitViewTraitCollection.subscript.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 48), v4, v5);
    specialized MapKitViewTraitCollection.subscript.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    specialized MapKitViewTraitCollection.subscript.setter(*(_QWORD *)(*(_QWORD *)a1 + 56));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t specialized MapKitViewTraitCollection.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v8 - v6, a1, v4);
  return ViewTraitCollection.subscript.setter();
}

ValueMetadata *type metadata accessor for MapKitViewTraitCollection()
{
  return &type metadata for MapKitViewTraitCollection;
}

uint64_t key path getter for EnvironmentValues.menuTitleVisibility : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuTitleVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuTitleVisibility : EnvironmentValues()
{
  return EnvironmentValues.menuTitleVisibility.setter();
}

uint64_t PaletteControlGroupStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t PaletteControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = v1[1];
  v15 = *v1;
  v16 = v3;
  v17 = *((_BYTE *)v1 + 32);
  v4 = static VerticalAlignment.center.getter();
  v18 = 0;
  *(_QWORD *)&v19 = 0xE000000000000000;
  v14 = Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0xE000000000000000;
  KeyPath = swift_getKeyPath();
  v7 = *((_QWORD *)&v15 + 1);
  v8 = v16;
  outlined retain of PaletteControlGroupStyle((uint64_t)&v15, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v14);
  outlined consume of Environment<Bool>.Content(v7, v8);
  outlined retain of PaletteControlGroupStyle((uint64_t)&v15, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  v18 = (unsigned __int16)v14;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v9 = swift_allocObject();
  outlined init with take of PlatformItemList.Item.SystemItem?((uint64_t)&v18, v9 + 16);
  v10 = swift_allocObject();
  v11 = v16;
  *(_OWORD *)(v10 + 16) = v15;
  *(_OWORD *)(v10 + 32) = v11;
  *(_BYTE *)(v10 + 48) = v17;
  v12 = swift_getKeyPath();
  LOBYTE(v14) = 1;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = KeyPath;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = partial apply for closure #1 in View.platformItemSystemType(_:);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = partial apply for closure #3 in PaletteControlGroupStyle.makeBody(configuration:);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = closure #4 in PaletteControlGroupStyle.makeBody(configuration:);
  *(_QWORD *)(a1 + 136) = 0;
  return outlined retain of PaletteControlGroupStyle((uint64_t)&v15, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
}

void closure #3 in PaletteControlGroupStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  outlined retain of PaletteControlGroupStyle(a2, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined retain of PaletteControlGroupStyle(a2, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  if (v6 == 2)
  {
    v7 = *(_QWORD **)a1;
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_10:
        v7 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      for (i = 0; i != v8; ++i)
      {
        if (i >= v7[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        v10 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
        v11 = (char *)v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        v12 = *(_QWORD *)(v10 + 72) * i;
        v13 = *(void **)&v11[v12];
        *(_QWORD *)&v11[v12] = 0;

      }
      *(_QWORD *)a1 = v7;
    }
  }
}

_BYTE *closure #4 in PaletteControlGroupStyle.makeBody(configuration:)(_BYTE *result)
{
  if (!*result)
    *result = 2;
  return result;
}

uint64_t sub_187369CE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuTitleVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187369D1C()
{
  return EnvironmentValues.menuTitleVisibility.setter();
}

uint64_t sub_187369D40()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.platformItemIdentifier(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemIdentifier(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined retain of PaletteControlGroupStyle(uint64_t a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  a2(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  a3(v5, v6);
  return a1;
}

uint64_t sub_187369DC4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  return swift_deallocObject();
}

uint64_t outlined init with take of PlatformItemList.Item.SystemItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in View.platformItemSystemType(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemSystemType(_:)(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_187369E80()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

void partial apply for closure #3 in PaletteControlGroupStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v1;

  closure #3 in PaletteControlGroupStyle.makeBody(configuration:)(a1, v1 + 16);
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in PaletteControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PaletteControlGroupStyle(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for PaletteControlGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v2 + 24);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v2;
  return a1;
}

uint64_t assignWithCopy for PaletteControlGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 24);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v2);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for PaletteControlGroupStyle(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaletteControlGroupStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaletteControlGroupStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaletteControlGroupStyle()
{
  return &type metadata for PaletteControlGroupStyle;
}

uint64_t sub_18736A0EC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

void type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>)
  {
    type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>();
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>);
  }
}

uint64_t type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    lazy protocol witness table accessor for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>();
    type metadata accessor for Menu();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>)
  {
    v2 = lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle();
    v4 = type metadata accessor for LabelStyleWritingModifier(a1, (uint64_t)&type metadata for TitleAndIconLabelStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v4_4, LabelGroup<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleConfiguration.Label>, OnPlatformContainerSelectionModifier>, PlatformButtonActionModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t)&protocol conformance descriptor for LabelStyleWritingModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

void View.sheet<A>(isPresented:onDismiss:content:)()
{
  View.sheet<A>(isPresented:onDismiss:content:)();
}

{
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)();
}

uint64_t SheetPreference.Value.dismissalTransaction(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v8[13];
  char v9;

  outlined init with copy of SheetPreference.Value(v1, (uint64_t)v8);
  if (v9)
  {
    if (v9 == 1)
      outlined destroy of SheetPreference.Value((uint64_t)v8);
    return 1;
  }
  v3 = v8[0];
  if (!*(_QWORD *)(v8[0] + 16) || (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  swift_retain();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t SheetPreference.Value.viewIDs.getter()
{
  uint64_t v0;
  uint64_t inited;
  Swift::Int v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  _OWORD v10[5];
  _BYTE v11[25];
  char v12;

  outlined init with copy of SheetPreference.Value(v0, (uint64_t)v10);
  if (!v12)
    return specialized Set.init<A>(_:)(*(uint64_t *)&v10[0]);
  if (v12 != 1)
    return MEMORY[0x1E0DEE9E8];
  v8 = v10[4];
  v9[0] = *(_OWORD *)v11;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v11[9];
  v4 = v10[0];
  v5 = v10[1];
  v6 = v10[2];
  v7 = v10[3];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Namespace.ID>, MEMORY[0x1E0CE7DD0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = *((_QWORD *)&v5 + 1);
  v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  outlined destroy of SheetPreference((uint64_t)&v4);
  return v2;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  return outlined init with copy of SheetPreference.Value(a2, a3);
}

unint64_t SheetPreference.Value.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  unint64_t v2;
  _QWORD v4[14];
  unint64_t v5;
  unint64_t v6;
  _OWORD v7[5];
  _OWORD v8[2];
  _OWORD v9[5];
  _BYTE v10[25];
  char v11;

  outlined init with copy of SheetPreference.Value(v0, (uint64_t)v9);
  if (v11)
  {
    if (v11 == 1)
    {
      v7[4] = v9[4];
      v8[0] = *(_OWORD *)v10;
      *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)&v10[9];
      v7[0] = v9[0];
      v7[1] = v9[1];
      v7[2] = v9[2];
      v7[3] = v9[3];
      v4[0] = 0;
      v4[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v5 = 0xD000000000000012;
      v6 = 0x8000000187BDE0F0;
      outlined init with copy of SheetPreference((uint64_t)v7, (uint64_t)v4);
      v1._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      v2 = v5;
      outlined destroy of SheetPreference((uint64_t)v7);
    }
    else
    {
      return 0xD000000000000013;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0xD000000000000016;
  }
  return v2;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CoreSheetPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoreSheetPresentationModifier<A>, a5);
  return static EnvironmentalModifier._makeView(modifier:inputs:body:)();
}

uint64_t ItemSheetPresentationModifier.item.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  return a2(v2);
}

uint64_t ItemSheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t AssociatedTypeWitness;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105[16];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[2];
  _OWORD v114[2];
  uint64_t v115;
  uint64_t v116;

  v102 = a3;
  v5 = *(_QWORD *)(a2 + 32);
  v100 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v101 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v91 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v9, v7);
  v78 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = *(_QWORD *)(v11 + 40);
  v12 = v103;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v79 = (char *)&v77 - v14;
  v88 = *(_QWORD *)(a2 - 8);
  v89 = *(_QWORD *)(v88 + 64);
  MEMORY[0x1E0C80A78](v15, v16);
  v86 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = *(_QWORD *)(a2 + 56);
  v18 = v5;
  v82 = v5;
  v20 = type metadata accessor for CoreSheetPresentationModifier(0, v5, v104, v19);
  v97 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v96 = (uint64_t)&v77 - v23;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemSheetPresentationModifier<A, B, C>, a2, v22);
  v92 = type metadata accessor for _ViewModifier_Content();
  v99 = v20;
  v98 = type metadata accessor for ModifiedContent();
  v95 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98, v24);
  v93 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v94 = (char *)&v77 - v28;
  v83 = v8;
  v29 = type metadata accessor for Optional();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v84 = (char *)&v77 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v77 - v35;
  ItemSheetPresentationModifier.item.getter(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
  v37 = *(_QWORD *)(a2 + 24);
  v106 = v8;
  v107 = v37;
  v108 = v18;
  v109 = v12;
  v39 = v104;
  v110 = *(_QWORD *)(a2 + 48);
  v38 = v110;
  v111 = v104;
  v112 = v3;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ItemSheetPresentationModifier.body(content:), (uint64_t)v105, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v40, (uint64_t)&v116);
  v41 = *(void (**)(char *, uint64_t))(v30 + 8);
  v87 = v29;
  v85 = v41;
  v41(v36, v29);
  v90 = v116;
  v42 = v88;
  v43 = v86;
  v44 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v86, v3, a2);
  v45 = v42;
  v46 = (*(unsigned __int8 *)(v42 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v47 = (char *)swift_allocObject();
  v48 = v83;
  *((_QWORD *)v47 + 2) = v83;
  *((_QWORD *)v47 + 3) = v37;
  v49 = v82;
  v50 = v103;
  *((_QWORD *)v47 + 4) = v82;
  *((_QWORD *)v47 + 5) = v50;
  *((_QWORD *)v47 + 6) = v38;
  *((_QWORD *)v47 + 7) = v39;
  v51 = v43;
  v52 = v84;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v47[v46], v51, a2);
  v53 = v44;
  v54 = *(_BYTE *)(v44 + *(int *)(a2 + 76));
  v55 = *(unsigned __int8 *)(v44 + *(int *)(a2 + 80));
  v56 = v53;
  ItemSheetPresentationModifier.item.getter(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
  v57 = v91;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v52, 1, v48))
  {
    v85(v52, v87);
    v115 = 0;
    memset(v114, 0, sizeof(v114));
  }
  else
  {
    LODWORD(v89) = v55;
    v58 = v54;
    v59 = v57;
    v60 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
    v61 = v78;
    v60(v78, v52, v48);
    v85(v52, v87);
    v62 = v79;
    dispatch thunk of RawRepresentable.rawValue.getter();
    v63 = *(void (**)(char *, uint64_t))(v59 + 8);
    v54 = v58;
    LOBYTE(v55) = v89;
    v63(v61, v48);
    v64 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    _convertToAnyHashable<A>(_:)();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v64);
  }
  v65 = (uint64_t)v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v101, v56 + *(int *)(a2 + 84), v49);
  v66 = v96;
  CoreSheetPresentationModifier.init(content:onDismiss:placement:drawsBackground:itemID:anchorProvider:activeInspector:)(v90, (uint64_t)partial apply for closure #2 in ItemSheetPresentationModifier.body(content:), (uint64_t)v47, v54, v55, (uint64_t)v114, v65, 2, v96, v49, v104);
  v67 = v92;
  v68 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v92);
  v69 = v93;
  v70 = v67;
  v71 = v99;
  MEMORY[0x18D75B4AC](v66, v70, v99, v68);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v66, v71);
  v113[0] = v68;
  v113[1] = &protocol witness table for CoreSheetPresentationModifier<A>;
  v72 = v98;
  v73 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v98, v113);
  v74 = (uint64_t)v94;
  static ViewBuilder.buildExpression<A>(_:)(v69, v72, v73);
  v75 = *(void (**)(char *, uint64_t))(v95 + 8);
  v75(v69, v72);
  static ViewBuilder.buildBlock<A>(_:)(v74, v72, v102);
  return ((uint64_t (*)(uint64_t, uint64_t))v75)(v74, v72);
}

void closure #1 in ItemSheetPresentationModifier.body(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v19 = a1;
  v20 = a5;
  v27 = a6;
  type metadata accessor for Optional();
  v9 = type metadata accessor for Binding();
  v10 = *(_QWORD *)(v9 - 8);
  v23 = v9;
  v24 = v10;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = type metadata accessor for SheetContent(0, a3, a4, v12);
  v26 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v21 = (char *)&v18 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>();
  v25 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v25, v16);
  v22 = (char *)&v18 - v17;
  closure #1 in closure #1 in ItemSheetPresentationModifier.body(content:)(a2, v19);
}

void sub_18736B238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 248) = swift_getKeyPath();
  *(_QWORD *)(v6 - 136) = v0;
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v3;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v5;
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_18736B260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  ItemSheetPresentationModifier.item.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7548]);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v1);
  v7 = type metadata accessor for PresentationMode.FromItem(0, v1, v4, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationMode.FromItem<A>, v7);
  v8 = *(_QWORD *)(v5 - 216);
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 208) + 8))(v2, v8);
  v9 = *(_QWORD *)(v5 - 128);
  v10 = *(_BYTE *)(v5 - 120);
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(v5 - 136);
  *(_QWORD *)(v5 - 152) = v9;
  *(_BYTE *)(v5 - 144) = v10;
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetContent<A>, v3);
  v12 = *(_QWORD *)(v5 - 232);
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 192) + 8))(v12, v3);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, MEMORY[0x1E0CE65C0]);
  *(_QWORD *)(v5 - 176) = v11;
  *(_QWORD *)(v5 - 168) = v13;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v5 - 200), v5 - 176);
  result = AnyView.init<A>(_:)();
  **(_QWORD **)(v5 - 184) = result;
  return result;
}

void closure #1 in closure #1 in ItemSheetPresentationModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_18736B448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 72)))(v7);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v2);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v6, v1, v4);
  return v9(v6, v1);
}

void closure #2 in ItemSheetPresentationModifier.body(content:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = a8;
  v14 = type metadata accessor for Optional();
  v17 = MEMORY[0x1E0C80A78](v14, v15);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 56))((char *)&v18 - v16, 1, 1, a3, v17);
    v20 = a3;
    v21 = a4;
    v22 = a5;
    v23 = a6;
    v24 = a7;
    v25 = v19;
    type metadata accessor for ItemSheetPresentationModifier();
  }
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = v19;
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_18736B5B0(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(void);

  v2 = (uint64_t (**)(void))(v1 + *(int *)(result + 68));
  if (*v2)
    return (*v2)();
  return result;
}

void ItemSheetPresentationModifier.init(item:onDismiss:sheetContent:placement:drawsBackground:anchorProvider:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Optional();
  v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_18736B68C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;
  char v11;
  uint64_t v12;

  v7 = (_QWORD *)(v5 + a1[17]);
  *v7 = v4;
  v7[1] = v3;
  v8 = (_QWORD *)(v5 + a1[18]);
  *v8 = v2;
  v8[1] = v1;
  *(_BYTE *)(v5 + a1[19]) = v10;
  *(_BYTE *)(v5 + a1[20]) = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5 + a1[21], v12, v6);
}

void ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  ItemSheetPresentationModifier.init(item:onDismiss:sheetContent:placement:drawsBackground:anchorProvider:)(a1, a2);
}

uint64_t SheetPresentationModifier.isPresented.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in SheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v18 - v13;
  (*(void (**)(double))(v15 + 40))(v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a3);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a2);
}

uint64_t closure #2 in SheetPresentationModifier.body(content:)(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(void);

  if ((result & 1) != 0)
    type metadata accessor for SheetPresentationModifier();
  v2 = *(uint64_t (**)(void))(a2 + 24);
  if (v2)
    return v2();
  return result;
}

uint64_t outlined release of SheetPresentationModifier<A1, NullSheetAnchor<SheetPreference.Key>>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  return a1;
}

void View.sheet<A, B>(item:onDismiss:content:)()
{
  View.sheet<A, B>(item:onDismiss:content:)();
}

{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for ItemSheetPresentationModifier();
}

void type metadata accessor for ItemSheetPresentationModifier()
{
  JUMPOUT(0x18D75FF28);
}

void View.fullScreenCover<A, B>(item:onDismiss:content:)()
{
  View.sheet<A, B>(item:onDismiss:content:)();
}

void View._cover<A, B>(item:onDismiss:content:)()
{
  View.fullScreenCover<A, B>(item:onDismiss:content:)();
}

void View.fullScreenCover<A>(isPresented:onDismiss:content:)()
{
  View.sheet<A>(isPresented:onDismiss:content:)();
}

void View._cover<A>(isPresented:onDismiss:content:)()
{
  View.fullScreenCover<A>(isPresented:onDismiss:content:)();
}

void View.fullScreenBlur<A, B>(item:onDismiss:content:)()
{
  View.sheet<A, B>(item:onDismiss:content:)();
}

void sub_18736BBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v9, *(_QWORD *)(v12 - 216), v10, v13);
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)(v9, (uint64_t)v15);
}

uint64_t sub_18736BC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v4 - 152), v0, *(_QWORD *)(v4 - 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

void View.fullScreenBlur<A>(isPresented:onDismiss:content:)()
{
  View.sheet<A>(isPresented:onDismiss:content:)();
}

void sub_18736BD2C()
{
  uint64_t v0;

  swift_retain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  swift_retain();
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_18736BDD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x18D75B4AC](&v4, v1, a1, v2);
  return outlined release of SheetPresentationModifier<A1, NullSheetAnchor<SheetPreference.Key>>((uint64_t)&v5);
}

void View.sheet<A, B>(item:drawsBackground:content:)()
{
  View.sheet<A, B>(item:drawsBackground:content:)();
}

{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for ItemSheetPresentationModifier();
}

void View.sheet<A>(isPresented:drawsBackground:content:)()
{
  View.sheet<A>(isPresented:drawsBackground:content:)();
}

{
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)();
}

void View.fullScreenCover<A, B>(item:drawsBackground:content:)()
{
  View.sheet<A, B>(item:drawsBackground:content:)();
}

void sub_18736BF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v10, *(_QWORD *)(v12 - 200), v9, v13);
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)(v10, (uint64_t)v15);
}

uint64_t sub_18736C000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_retain();
  MEMORY[0x18D75B4AC](v1, *(_QWORD *)(v3 - 152), v0, *(_QWORD *)(v3 - 144));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void View.fullScreenCover<A>(isPresented:drawsBackground:content:)()
{
  View.sheet<A>(isPresented:drawsBackground:content:)();
}

void sub_18736C0DC()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  swift_retain();
  swift_retain();
  swift_retain();
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_18736C178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x18D75B4AC](&v4, v3, a1, v1);
  return outlined release of SheetPresentationModifier<A1, NullSheetAnchor<SheetPreference.Key>>((uint64_t)&v5);
}

void View.formSheet<A, B>(item:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[17];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v20[13] = a9;
  v20[11] = a3;
  v20[12] = a7;
  v20[8] = a6;
  v20[9] = a4;
  v20[10] = a2;
  v22 = a1;
  type metadata accessor for Optional();
  v21 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v21, v12);
  v20[15] = (char *)v20 - v13;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v14 = type metadata accessor for ModifiedContent();
  v20[2] = v14;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  v16 = v15;
  v17 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v29[0] = a10;
  v29[1] = v17;
  v20[1] = a10;
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v29);
  v19 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  v23 = a5;
  v24 = v14;
  v25 = v16;
  v26 = a8;
  v27 = v18;
  v28 = v19;
  v20[0] = v18;
  type metadata accessor for ItemSheetPresentationModifier();
}

void sub_18736C324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 - 264) = (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v9 - 176) = (char *)&a9 - v14;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, MEMORY[0x1E0CE3F10], MEMORY[0x1E0CE3F00], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  v16 = v15;
  v17 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  *(_QWORD *)(v9 - 152) = v16;
  *(_QWORD *)(v9 - 144) = a1;
  *(_QWORD *)(v9 - 272) = a1;
  *(_QWORD *)(v9 - 136) = a1;
  *(_QWORD *)(v9 - 128) = v17;
  type metadata accessor for StaticIf();
}

void sub_18736C3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v13 - 256) = a1;
  *(_QWORD *)(v13 - 248) = v14;
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v13 - 280) = (char *)&a9 - v16;
  v17 = *(_QWORD *)(v13 - 184);
  (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v9 + 16))(v17, *(_QWORD *)(v13 - 160), *(_QWORD *)(v13 - 168), v15);
  v18 = (_QWORD *)swift_allocObject();
  v19 = *(_QWORD *)(v13 - 240);
  v18[2] = *(_QWORD *)(v13 - 232);
  v18[3] = v11;
  v21 = *(_QWORD *)(v13 - 216);
  v20 = *(_QWORD *)(v13 - 208);
  v18[4] = v19;
  v18[5] = v20;
  v18[6] = v10;
  v18[7] = v12;
  v18[8] = *(_QWORD *)(v13 - 224);
  v18[9] = v21;
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)(v17, *(_QWORD *)(v13 - 176));
}

void sub_18736C48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6(v5, *(_QWORD *)(v9 - 160), *(_QWORD *)(v9 - 168));
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v2;
  v10[3] = v0;
  v10[4] = v3;
  v10[5] = v1;
  v11 = *(_QWORD *)(v9 - 296);
  v10[6] = v4;
  v10[7] = v11;
  v10[8] = v8;
  v10[9] = v7;
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)(*(_QWORD *)(v9 - 184), *(_QWORD *)(v9 - 264));
}

void sub_18736C510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain_n();
  v1 = *(_QWORD *)(v0 - 272);
  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemSheetPresentationModifier<A, B, C>, v1);
  StaticIf<>.init<A>(idiom:then:else:)(v2, *(_QWORD *)(v0 - 176), v1, MEMORY[0x1E0CE3F10], *(_QWORD *)(v0 - 280));
}

uint64_t sub_18736C574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v0;
  v5 = v0;
  v6 = *(_QWORD *)(v3 - 256);
  MEMORY[0x18D75B4AC](v4, v2, v6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v5, v6);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, MEMORY[0x1E0CE3F10], MEMORY[0x1E0CE3F00], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

uint64_t sub_18736C69C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in View.formSheet<A, B>(item:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void (*v11)(double);
  uint64_t v13;

  v7 = *(_QWORD *)(a6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  View.transformPreference<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a6);
}

uint64_t partial apply for closure #1 in View.formSheet<A, B>(item:content:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in View.formSheet<A, B>(item:content:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4]);
}

uint64_t sub_18736C7A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in View.formSheet<A>(isPresented:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  void (*v9)(double);
  uint64_t v11;

  v5 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  View.transformPreference<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t partial apply for closure #1 in View.formSheet<A>(isPresented:content:)()
{
  uint64_t *v0;

  return closure #1 in View.formSheet<A>(isPresented:content:)(v0[6], v0[7], v0[2], v0[3]);
}

uint64_t outlined release of StaticIf<InterfaceIdiomPredicate<PadInterfaceIdiom>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>, SheetPresentationModifier<ModifiedContent<A1, _PreferenceTransformModifier<PresentationOptionsPreferenceKey>>, NullSheetAnchor<SheetPreference.Key>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 88);
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  swift_release();
  return a1;
}

uint64_t closure #1 in View.formSheetSizing()(uint64_t result)
{
  *(_BYTE *)(result + 136) = 1;
  return result;
}

void SheetContent.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  char v77;
  _QWORD v78[2];
  _QWORD v79[2];

  v72 = a2;
  v51[1] = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SheetStyleContext>, MEMORY[0x1E0CE3F80], MEMORY[0x1E0CE3F70], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  v5 = type metadata accessor for ModifiedContent();
  v63 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v52 = (char *)v51 - v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>();
  v8 = type metadata accessor for ModifiedContent();
  v64 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v54 = (char *)v51 - v10;
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  v65 = v12;
  MEMORY[0x1E0C80A78](v11, v13);
  v56 = (char *)v51 - v14;
  v15 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  v66 = v17;
  MEMORY[0x1E0C80A78](v16, v16);
  v55 = (char *)v51 - v18;
  v19 = type metadata accessor for ModifiedContent();
  v20 = *(_QWORD *)(v19 - 8);
  v61 = v19;
  v67 = v20;
  MEMORY[0x1E0C80A78](v19, v19);
  v57 = (char *)v51 - v21;
  v22 = type metadata accessor for ModifiedContent();
  v70 = *(_QWORD *)(v22 - 8);
  v62 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v58 = (char *)v51 - v24;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v15);
  v69 = type metadata accessor for ModifiedContent();
  v71 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v25);
  v60 = (char *)v51 - v26;
  v27 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)v51 - v30;
  v68 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  static Alignment.center.getter();
  v50 = *(_QWORD *)(a1 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v79[0] = v50;
  v79[1] = MEMORY[0x1E0CE35E0];
  v34 = MEMORY[0x1E0CE2E70];
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v79);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v3);
  v36 = lazy protocol witness table accessor for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>();
  v78[0] = v35;
  v78[1] = v36;
  v37 = v34;
  v38 = MEMORY[0x18D75FFDC](v34, v4, v78);
  v39 = v52;
  View.renderContainerBackgroundInHostingView<A>(_:)();
  swift_getKeyPath();
  v77 = 2;
  v40 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>, MEMORY[0x1E0CE6488]);
  v76[0] = v38;
  v76[1] = v40;
  v41 = v37;
  v42 = MEMORY[0x18D75FFDC](v37, v5, v76);
  v43 = v54;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v5);
  v44 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, MEMORY[0x1E0CE65C0]);
  v75[0] = v42;
  v75[1] = v44;
  v45 = MEMORY[0x18D75FFDC](v41, v8, v75);
  v46 = v56;
  View.resetScrollEnvironment()(v8, v45);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v8);
  v74[0] = v45;
  v74[1] = &protocol witness table for ResetScrollEnvironmentModifier;
  v47 = v53;
  v48 = MEMORY[0x18D75FFDC](v41, v53, v74);
  View.resetListStackBehavior()();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v47);
  v49 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  v73[0] = v48;
  v73[1] = v49;
  MEMORY[0x18D75FFDC](v41, v59, v73);
  View.resetSearchEnvironment()();
}

void sub_18736CF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 296) + 8))(v2, v1);
  *(_QWORD *)(v4 - 208) = v0;
  *(_QWORD *)(v4 - 200) = &protocol witness table for ResetSearchEnvironmentModifier;
  MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v4 - 336), v4 - 208);
  View.resetFormEnvironment()();
}

uint64_t sub_18736CFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 288) + 8))(v3, v2);
  swift_getKeyPath();
  *(_BYTE *)(v8 - 121) = 0;
  *(_QWORD *)(v8 - 224) = v0;
  *(_QWORD *)(v8 - 216) = &protocol witness table for ResetFormEnvironmentModifier;
  v9 = *(_QWORD *)(v8 - 328);
  v10 = MEMORY[0x18D75FFDC](v5, v9, v8 - 224);
  v11 = *(_QWORD *)(v8 - 344);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 264) + 8))(v4, v9);
  v12 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
  *(_QWORD *)(v8 - 240) = v10;
  *(_QWORD *)(v8 - 232) = v12;
  v13 = *(_QWORD *)(v8 - 272);
  v14 = MEMORY[0x18D75FFDC](v1, v13, v8 - 240);
  View.clearNavigationContext()(v14, *(_QWORD *)(v8 - 248));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 256) + 8))(v11, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 8))(v7, v6);
}

uint64_t key path getter for EnvironmentValues.tintAdjustmentMode : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.tintAdjustmentMode.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintAdjustmentMode : EnvironmentValues()
{
  return EnvironmentValues.tintAdjustmentMode.setter();
}

uint64_t key path getter for EnvironmentValues.menuIndicatorProminenceReduced : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuIndicatorProminenceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuIndicatorProminenceReduced : EnvironmentValues()
{
  return EnvironmentValues.menuIndicatorProminenceReduced.setter();
}

void EnvironmentValues.isSheetPresented.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18736D1FC()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18736D220()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18736D230()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_18736D2CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[18];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemSheetPresentationModifier<A, B, C>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

void sub_18736D328()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_18736D3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[16];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

void sub_18736D40C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 40);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, MEMORY[0x1E0CE3F10], MEMORY[0x1E0CE3F00], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for ItemSheetPresentationModifier();
}

void sub_18736D530()
{
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_18736D54C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[22];

  v4 = type metadata accessor for ModifiedContent();
  v8[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemSheetPresentationModifier<A, B, C>, v2);
  v8[1] = v8[0];
  v7[0] = v6;
  v7[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8);
  return MEMORY[0x18D75FFDC](v1, v4, v7);
}

void sub_18736D5C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, MEMORY[0x1E0CE3F10], MEMORY[0x1E0CE3F00], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  type metadata accessor for SheetPresentationModifier();
}

void sub_18736D6DC()
{
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_18736D6F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[20];

  v5 = type metadata accessor for ModifiedContent();
  v8[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, v2);
  v8[1] = v8[0];
  v7[0] = v3;
  v7[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8);
  return MEMORY[0x18D75FFDC](v1, v5, v7);
}

uint64_t assignWithCopy for SheetPreference.Value(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 105);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      swift_release();
      swift_release();
      swift_release();
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    v5 = *((unsigned __int8 *)a2 + 105);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *((_QWORD *)a2 + 1);
      swift_retain();
      if (v6)
      {
        v7 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a1 + 16) = v7;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)a2 + 8);
      }
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v13 = (_OWORD *)(a1 + 32);
      v14 = a2 + 2;
      v15 = *((_QWORD *)a2 + 7);
      if (v15)
      {
        *(_QWORD *)(a1 + 56) = v15;
        *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
        (**(void (***)(_OWORD *, __int128 *))(v15 - 8))(v13, v14);
      }
      else
      {
        v16 = *v14;
        v17 = a2[3];
        *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
        *v13 = v16;
        *(_OWORD *)(a1 + 48) = v17;
      }
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_BYTE *)(a1 + 105) = 1;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)a1 = v8;
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[5];
      *(_OWORD *)(a1 + 90) = *(__int128 *)((char *)a2 + 90);
      *(_OWORD *)(a1 + 64) = v11;
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 48) = v10;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 105) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for SheetPreference.Value(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 105);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      swift_release();
      swift_release();
      swift_release();
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 105);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 105) = 1;
    }
    else if (v5)
    {
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 90) = *(_OWORD *)(a2 + 90);
      v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 105) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTag for SheetPreference.Value(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 105);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for SheetPreference.Value(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 1)
  {
    *(_OWORD *)(result + 89) = 0u;
    v2 = a2 - 2;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 105) = a2;
  return result;
}

uint64_t destroy for SheetPreference(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SheetPreference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  swift_retain();
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *v5;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 56);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SheetPreference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 32);
      v10 = *(_QWORD *)(a2 + 64);
      v11 = *(_OWORD *)(a2 + 48);
      *v7 = *v8;
      *(_OWORD *)(a1 + 48) = v11;
      *(_QWORD *)(a1 + 64) = v10;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
  }
  else
  {
    v12 = *v8;
    v13 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *v7 = v12;
    *(_OWORD *)(a1 + 48) = v13;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for SheetPreference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 56))
  {
    if (*(_QWORD *)(a2 + 56))
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    else
      outlined destroy of AnyHashable(a1 + 32);
  }
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t storeEnumTagSinglePayload for SheetPreference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SheetPreference()
{
  return &type metadata for SheetPreference;
}

uint64_t type metadata completion function for ItemSheetPresentationModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemSheetPresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v18;
  _QWORD *v19;
  const void *v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(unint64_t, unint64_t, uint64_t);
  uint64_t v33;
  void *__dst;
  uint64_t v36;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = (v6 + 16) & ~v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v7 + v8;
  v10 = *(_QWORD *)(a3 + 32);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = ((v12 + 18 + ((((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v12)
      + *(_QWORD *)(v11 + 64);
  v14 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000;
  v15 = *a2;
  *a1 = *a2;
  if ((v12 | v6) > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15 + (((v12 | v6) & 0xF8 ^ 0x1F8) & ((v12 | v6) + 16)));
    swift_retain();
  }
  else
  {
    v36 = v10;
    v18 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v33 = v12 + 18;
    __dst = (void *)(((unint64_t)v18 + v6 + 8) & ~v6);
    v20 = (const void *)(((unint64_t)v19 + v6 + 8) & ~v6);
    v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v21(v20, 1, v4))
    {
      memcpy(__dst, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(__dst, v20, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v4);
    }
    v22 = ~v12;
    v23 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v24 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v25 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_QWORD *)(v23 + 8) = v25;
      swift_retain();
    }
    v26 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *(_QWORD *)(v26 + 8) = v28;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    *(_BYTE *)(v26 + 17) = *(_BYTE *)(v27 + 17);
    v29 = (v33 + v26) & v22;
    v30 = (v33 + v27) & v22;
    v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
    swift_retain();
    v31(v29, v30, v36);
  }
  return a1;
}

uint64_t destroy for ItemSheetPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a1 + 15;
  swift_release();
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  v10 = a1 + *(_QWORD *)(v7 + 64) + ((v8 + 16) & ~v8);
  if (!*(_DWORD *)(v7 + 84))
    ++v10;
  v11 = (_QWORD *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL)
    swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))(((((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

_QWORD *initializeWithCopy for ItemSheetPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  v16 = v14 + ((v9 + 16) & ~v9);
  if (!v13)
    ++v16;
  v17 = ((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = v19;
    swift_retain();
  }
  v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v22;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  *(_BYTE *)(v20 + 17) = *(_BYTE *)(v21 + 17);
  v23 = *(_QWORD *)(a3 + 32);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 18 + v20) & ~v25;
  v27 = (v25 + 18 + v21) & ~v25;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  v28(v26, v27, v23);
  return a1;
}

_QWORD *assignWithCopy for ItemSheetPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v28 = a3;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  v13 = (void *)((v11 + 8 + v8) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v10 + 84))
      v16 = *(_QWORD *)(v10 + 64);
    else
      v16 = *(_QWORD *)(v10 + 64) + 1;
    memcpy(v12, v13, v16);
    goto LABEL_10;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
LABEL_10:
  v17 = *(_QWORD *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84))
    ++v17;
  v18 = (_QWORD *)(((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      swift_retain();
      goto LABEL_19;
    }
LABEL_18:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_19;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_18;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_retain();
  swift_release();
LABEL_19:
  v23 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = v25;
  swift_retain();
  swift_release();
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  *(_BYTE *)(v23 + 17) = *(_BYTE *)(v24 + 17);
  v26 = *(_QWORD *)(*(_QWORD *)(v28 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v26 + 24))((*(unsigned __int8 *)(v26 + 80) + 18 + v23) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), (*(unsigned __int8 *)(v26 + 80) + 18 + v24) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  return a1;
}

_QWORD *initializeWithTake for ItemSheetPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  v12 = (const void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14 + ((v10 + 16) & ~v10);
  else
    v16 = v14 + ((v10 + 16) & ~v10) + 1;
  v17 = ((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = v19;
  }
  v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  *(_BYTE *)(v20 + 17) = *(_BYTE *)(v21 + 17);
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 32))((*(unsigned __int8 *)(v22 + 80) + 18 + v20) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (*(unsigned __int8 *)(v22 + 80) + 18 + v21) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

_QWORD *assignWithTake for ItemSheetPresentationModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  v7 = (unint64_t)a1 + 15;
  swift_release();
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = v6 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v28 = a3;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)((v12 + 8 + v8) & ~v12);
  v14 = (void *)((v12 + 8 + v9) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v9) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v9)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_10;
    }
LABEL_6:
    if (*(_DWORD *)(v11 + 84))
      v17 = *(_QWORD *)(v11 + 64);
    else
      v17 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v13, v14, v17);
    goto LABEL_10;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_6;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v13, v14, v10);
LABEL_10:
  v18 = *(_QWORD *)(v11 + 64) + ((v12 + 16) & ~v12);
  if (!*(_DWORD *)(v11 + 84))
    ++v18;
  v19 = (_QWORD *)(((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 = (unint64_t *)(((unint64_t)a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if (*v19 < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      v23 = v20[1];
      *v19 = v21;
      v19[1] = v23;
      goto LABEL_19;
    }
LABEL_18:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    goto LABEL_19;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_18;
  }
  v22 = v20[1];
  *v19 = v21;
  v19[1] = v22;
  swift_release();
LABEL_19:
  v24 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  swift_release();
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  *(_BYTE *)(v24 + 17) = *(_BYTE *)(v25 + 17);
  v26 = *(_QWORD *)(*(_QWORD *)(v28 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v26 + 40))((*(unsigned __int8 *)(v26 + 80) + 18 + v24) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), (*(unsigned __int8 *)(v26 + 80) + 18 + v25) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemSheetPresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v5)
    v12 = *(_QWORD *)(v4 + 64);
  else
    v12 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = v12 + ((v13 + 16) & ~v13);
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = v15 + 18;
  v17 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_33;
  v18 = ((v16 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v15) + *(_QWORD *)(v9 + 64);
  v19 = 8 * v18;
  if (v18 > 3)
    goto LABEL_16;
  v22 = ((v17 + ~(-1 << v19)) >> v19) + 1;
  if (HIWORD(v22))
  {
    v20 = *(_DWORD *)(a1 + v18);
    if (v20)
      goto LABEL_24;
  }
  else
  {
    if (v22 <= 0xFF)
    {
      if (v22 < 2)
        goto LABEL_33;
LABEL_16:
      v20 = *(unsigned __int8 *)(a1 + v18);
      if (!*(_BYTE *)(a1 + v18))
        goto LABEL_33;
LABEL_24:
      v23 = (v20 - 1) << v19;
      if (v18 > 3)
        v23 = 0;
      if ((_DWORD)v18)
      {
        if (v18 <= 3)
          v24 = ((v16 + ((((v14 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~(_DWORD)v15) + *(_DWORD *)(v9 + 64);
        else
          v24 = 4;
        __asm { BR              X12 }
      }
      return v11 + v23 + 1;
    }
    v20 = *(unsigned __int16 *)(a1 + v18);
    if (*(_WORD *)(a1 + v18))
      goto LABEL_24;
  }
LABEL_33:
  if (v7 >= v10)
  {
    v27 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      v28 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v27 + v13 + 8) & ~v13);
      if (v28 >= 2)
        return v28 - 1;
      else
        return 0;
    }
    v26 = *v27;
  }
  else
  {
    v25 = (unint64_t *)((((a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    if (v11 != 0x7FFFFFFF)
      return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))(((unint64_t)v25 + v16) & ~v15, *(unsigned int *)(v9 + 84), v8);
    v26 = *v25;
  }
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  return (v26 + 1);
}

void storeEnumTagSinglePayload for ItemSheetPresentationModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v11 + 84) <= v10)
    v12 = v10;
  else
    v12 = *(_DWORD *)(v11 + 84);
  v13 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v13;
  v14 = ((*(unsigned __int8 *)(v11 + 80)
        + 18
        + ((((((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v13 + 7) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(_QWORD *)(v11 + 64);
  v15 = a3 >= v12;
  v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = 1u;
      if (v12 < a2)
        goto LABEL_22;
      goto LABEL_16;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = 4u;
      if (v12 < a2)
      {
LABEL_22:
        v18 = ~v12 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_16:
      __asm { BR              X21 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v12 < a2)
    goto LABEL_22;
  goto LABEL_16;
}

uint64_t initializeBufferWithCopyOfBuffer for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v6 > 7 || v8 != 0 || v7 + ((v6 + 58) & (unint64_t)~v6) + 1 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    v24 = ~v6;
    v25 = v4;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v12 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
    v13 = a2 & 0xFFFFFFFFFFFFFFF8;
    v15 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 = *v15;
    swift_retain();
    swift_retain();
    if (v14 < 0xFFFFFFFF)
    {
      *v12 = *(_OWORD *)v15;
    }
    else
    {
      v16 = v15[1];
      *(_QWORD *)v12 = v14;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v16;
      swift_retain();
    }
    v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v13 + 47) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = v19;
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    *(_BYTE *)(v17 + 17) = *(_BYTE *)(v18 + 17);
    v20 = (v17 + v6 + 18) & v24;
    v21 = (v18 + v6 + 18) & v24;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v22(v20, v21, v25);
    *(_BYTE *)(v20 + v7) = *(_BYTE *)(v21 + v7);
  }
  return a1;
}

uint64_t assignWithCopy for SheetPresentationModifier(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (unint64_t)a2;
  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v4 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v4 + 16);
  v6 = (unint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = v4 & 0xFFFFFFFFFFFFFFF8;
  v4 &= 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v4 + 24);
  v9 = (_QWORD *)(v4 + 24);
  v8 = v10;
  if (*v6 < 0xFFFFFFFF)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      v12 = v9[1];
      *v6 = v8;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v12;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v6 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = v9[1];
  *v6 = v8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v11;
  swift_retain();
  swift_release();
LABEL_8:
  v13 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v15;
  swift_retain();
  swift_release();
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_BYTE *)(v13 + 17) = *(_BYTE *)(v14 + 17);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 18 + v13) & ~v17;
  v19 = (v17 + 18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v18, v19);
  *(_BYTE *)(v18 + *(_QWORD *)(v16 + 64)) = *(_BYTE *)(v19 + *(_QWORD *)(v16 + 64));
  return a1;
}

uint64_t initializeWithTake for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 < 0xFFFFFFFF)
  {
    *v4 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  }
  else
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_QWORD *)v4 = v5;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v6;
  }
  v7 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 18 + v7) & ~v10;
  v12 = (v10 + 18 + v8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v9 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v9 + 64));
  return a1;
}

uint64_t assignWithTake for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (unint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 24);
  if (*v6 < 0xFFFFFFFF)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      v10 = *(_QWORD *)(v7 + 32);
      *v6 = v8;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v10;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v6 = *(_OWORD *)(v7 + 24);
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v7 + 32);
  *v6 = v8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v9;
  swift_release();
LABEL_8:
  v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  swift_release();
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_BYTE *)(v11 + 17) = *(_BYTE *)(v12 + 17);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 18 + v11) & ~v14;
  v16 = (v14 + 18 + v12) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v15, v16);
  *(_BYTE *)(v15 + *(_QWORD *)(v13 + 64)) = *(_BYTE *)(v16 + *(_QWORD *)(v13 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for SheetPresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = *(_QWORD *)(v4 + 64) + ((v7 + 58) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 18) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18736F604 + 4 * byte_187C27D16[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SheetPresentationModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 58) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 58) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemSheetPresentationModifier<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

void View.inspectorSheet<A>(isPresented:activeInspector:content:)()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey);
  type metadata accessor for SheetPresentationModifier();
}

void sub_18736F9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v15 - 152 + *(int *)(a1 + 68), a2, v14);
  *(_BYTE *)(v15 - 152 + *(int *)(a1 + 72)) = a14;
  swift_retain();
  swift_retain();
  swift_retain();
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_18736FA34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](&v4, v3, a1);
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  return swift_release();
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v9 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v18[0] = v7;
    v18[1] = v8;
    v9(&v17, v18);
    return v17;
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = (unint64_t)(v0[2] + 64) >> 6;
    if (v11 < v12)
    {
      v13 = v0[1];
      v14 = *(_QWORD *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        v5 = (v14 - 1) & v14;
        v6 = __clz(__rbit64(v14)) + (v11 << 6);
        v4 = v11;
        goto LABEL_3;
      }
      v15 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * v15);
        if (v14)
        {
LABEL_10:
          v11 = v15;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * (v3 + 3));
          if (v14)
          {
            v11 = v3 + 3;
            goto LABEL_7;
          }
          v15 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v12)
          {
            v14 = *(_QWORD *)(v13 + 8 * v15);
            if (v14)
              goto LABEL_10;
            v11 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v12)
            {
              v14 = *(_QWORD *)(v13 + 8 * v11);
              if (v14)
                goto LABEL_7;
              v4 = v12 - 1;
              v16 = v3 + 6;
              while (v12 != v16)
              {
                v14 = *(_QWORD *)(v13 + 8 * v16++);
                if (v14)
                {
                  v11 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t *__return_ptr, int *);
  __int128 v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (void (*)(uint64_t *__return_ptr, int *))v0[5];
    v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v6);
    v17 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v18 = v8;
    swift_retain();
    v7(&v16, &v17);
    swift_release();
    return v16;
  }
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = (unint64_t)(v0[2] + 64) >> 6;
    if (v10 < v11)
    {
      v12 = v0[1];
      v13 = *(_QWORD *)(v12 + 8 * v10);
      if (v13)
      {
LABEL_7:
        v5 = (v13 - 1) & v13;
        v6 = __clz(__rbit64(v13)) + (v10 << 6);
        v4 = v10;
        goto LABEL_3;
      }
      v14 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v11)
      {
        v13 = *(_QWORD *)(v12 + 8 * v14);
        if (v13)
        {
LABEL_10:
          v10 = v14;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v11)
        {
          v13 = *(_QWORD *)(v12 + 8 * (v3 + 3));
          if (v13)
          {
            v10 = v3 + 3;
            goto LABEL_7;
          }
          v14 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v11)
          {
            v13 = *(_QWORD *)(v12 + 8 * v14);
            if (v13)
              goto LABEL_10;
            v10 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v11)
            {
              v13 = *(_QWORD *)(v12 + 8 * v10);
              if (v13)
                goto LABEL_7;
              v4 = v11 - 1;
              v15 = v3 + 6;
              while (v11 != v15)
              {
                v13 = *(_QWORD *)(v12 + 8 * v15++);
                if (v13)
                {
                  v10 = v15 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    swift_retain();
    v10(&v18, v19);
    swift_release();
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    swift_retain();
    v10(&v18, v19);
    swift_release();
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    swift_bridgeObjectRetain();
    v10(&v18, v19);
    swift_bridgeObjectRelease();
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  __int128 v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    v8 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * v6);
    v17 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v18 = v8;
    swift_retain();
    v7(&v16, &v17);
    swift_release();
    return v16;
  }
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = (unint64_t)(v0[2] + 64) >> 6;
    if (v10 < v11)
    {
      v12 = v0[1];
      v13 = *(_QWORD *)(v12 + 8 * v10);
      if (v13)
      {
LABEL_7:
        v5 = (v13 - 1) & v13;
        v6 = __clz(__rbit64(v13)) + (v10 << 6);
        v4 = v10;
        goto LABEL_3;
      }
      v14 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v11)
      {
        v13 = *(_QWORD *)(v12 + 8 * v14);
        if (v13)
        {
LABEL_10:
          v10 = v14;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v11)
        {
          v13 = *(_QWORD *)(v12 + 8 * (v3 + 3));
          if (v13)
          {
            v10 = v3 + 3;
            goto LABEL_7;
          }
          v14 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v11)
          {
            v13 = *(_QWORD *)(v12 + 8 * v14);
            if (v13)
              goto LABEL_10;
            v10 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v11)
            {
              v13 = *(_QWORD *)(v12 + 8 * v10);
              if (v13)
                goto LABEL_7;
              v4 = v11 - 1;
              v15 = v3 + 6;
              while (v11 != v15)
              {
                v13 = *(_QWORD *)(v12 + 8 * v15++);
                if (v13)
                {
                  v10 = v15 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  _QWORD *v0;
  unint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v2;
  if (v1)
  {
    v4 = (v1 - 1) & v1;
    v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    v6 = *(_QWORD *)(*(_QWORD *)(*v0 + 56) + 8 * v5);
    v0[3] = v3;
    v0[4] = v4;
    v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    v16 = v6;
    swift_bridgeObjectRetain();
    v7(&v15, &v16);
    swift_bridgeObjectRelease();
    return v15;
  }
  v9 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    v10 = (unint64_t)(v0[2] + 64) >> 6;
    if (v9 < v10)
    {
      v11 = v0[1];
      v12 = *(_QWORD *)(v11 + 8 * v9);
      if (v12)
      {
LABEL_7:
        v4 = (v12 - 1) & v12;
        v5 = __clz(__rbit64(v12)) + (v9 << 6);
        v3 = v9;
        goto LABEL_3;
      }
      v13 = v2 + 2;
      v3 = v2 + 1;
      if (v2 + 2 < v10)
      {
        v12 = *(_QWORD *)(v11 + 8 * v13);
        if (v12)
        {
LABEL_10:
          v9 = v13;
          goto LABEL_7;
        }
        v3 = v2 + 2;
        if (v2 + 3 < v10)
        {
          v12 = *(_QWORD *)(v11 + 8 * (v2 + 3));
          if (v12)
          {
            v9 = v2 + 3;
            goto LABEL_7;
          }
          v13 = v2 + 4;
          v3 = v2 + 3;
          if (v2 + 4 < v10)
          {
            v12 = *(_QWORD *)(v11 + 8 * v13);
            if (v12)
              goto LABEL_10;
            v9 = v2 + 5;
            v3 = v2 + 4;
            if (v2 + 5 < v10)
            {
              v12 = *(_QWORD *)(v11 + 8 * v9);
              if (v12)
                goto LABEL_7;
              v3 = v10 - 1;
              v14 = v2 + 6;
              while (v10 != v14)
              {
                v12 = *(_QWORD *)(v11 + 8 * v14++);
                if (v12)
                {
                  v9 = v14 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v3;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[3];
  _OWORD v20[2];
  __int128 v21;
  _OWORD v22[3];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    outlined init with copy of TableColumnList(*(_QWORD *)(v3 + 56) + 40 * v10, (uint64_t)v22 + 8);
    *(_QWORD *)&v22[0] = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of CGSize?((uint64_t)v22, (uint64_t)v20, &lazy cache variable for type metadata for (key: Selector, value: CommandAction)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: Selector, value: CommandAction));
  if ((_QWORD)v21)
  {
    v19[0] = v20[0];
    v19[1] = v20[1];
    v19[2] = v21;
    v17(v19);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for (key: Selector, value: CommandAction));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void (*v16)(_OWORD *);
  uint64_t result;
  _OWORD v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of AnyHashable(*(_QWORD *)(v3 + 48) + 40 * v10, (uint64_t)v22);
    *((_QWORD *)&v23 + 1) = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
    swift_retain();
    goto LABEL_23;
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    v13 = *(_QWORD *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      v9 = (v13 - 1) & v13;
      v10 = __clz(__rbit64(v13)) + (v11 << 6);
      v7 = v11;
      goto LABEL_3;
    }
    v14 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      v13 = *(_QWORD *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        v11 = v14;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        v13 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          v11 = v5 + 3;
          goto LABEL_7;
        }
        v14 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          v13 = *(_QWORD *)(v4 + 8 * v14);
          if (v13)
            goto LABEL_10;
          v11 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            v13 = *(_QWORD *)(v4 + 8 * v11);
            if (v13)
              goto LABEL_7;
            v7 = v12 - 1;
            v15 = v5 + 6;
            while (v12 != v15)
            {
              v13 = *(_QWORD *)(v4 + 8 * v15++);
              if (v13)
              {
                v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v16 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of CGSize?((uint64_t)v22, (uint64_t)&v19, &lazy cache variable for type metadata for (key: AnyHashable, value: Anchor<CGRect?>)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: AnyHashable, value: Anchor<CGRect?>));
  if (*((_QWORD *)&v20 + 1))
  {
    v18[0] = v19;
    v18[1] = v20;
    v18[2] = v21;
    v16(v18);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for (key: AnyHashable, value: Anchor<CGRect?>));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

void specialized LazyMapSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  type metadata accessor for (key: UIMenuElement, value: CommandOperation)();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation)?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (uint64_t *)((char *)&v43 - v17);
  v20 = *v1;
  v19 = v1[1];
  v22 = v1[2];
  v21 = v1[3];
  v23 = v21;
  v24 = v1[4];
  v44 = v8;
  v48 = v22;
  if (v24)
  {
    v46 = v19;
    v47 = v13;
    v25 = v5;
    v45 = a1;
    v26 = (v24 - 1) & v24;
    v27 = __clz(__rbit64(v24)) | (v21 << 6);
LABEL_3:
    v28 = *(_QWORD *)(v20 + 56);
    v29 = v20;
    v30 = *(void **)(*(_QWORD *)(v20 + 48) + 8 * v27);
    v31 = type metadata accessor for CommandOperation();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v27, (uint64_t)v18 + *(int *)(v4 + 48), (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    *v18 = v30;
    v5 = v25;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v18, 0, 1, v4);
    v32 = v30;
    v20 = v29;
    a1 = v45;
    v19 = v46;
    v13 = v47;
    goto LABEL_23;
  }
  v33 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    return;
  }
  v34 = (unint64_t)(v22 + 64) >> 6;
  if (v33 < v34)
  {
    v35 = *(_QWORD *)(v19 + 8 * v33);
    if (v35)
    {
LABEL_7:
      v46 = v19;
      v47 = v13;
      v25 = v5;
      v45 = a1;
      v26 = (v35 - 1) & v35;
      v27 = __clz(__rbit64(v35)) + (v33 << 6);
      v23 = v33;
      goto LABEL_3;
    }
    v36 = v21 + 2;
    v23 = v21 + 1;
    if (v21 + 2 < v34)
    {
      v35 = *(_QWORD *)(v19 + 8 * v36);
      if (v35)
      {
LABEL_10:
        v33 = v36;
        goto LABEL_7;
      }
      v23 = v21 + 2;
      if (v21 + 3 < v34)
      {
        v35 = *(_QWORD *)(v19 + 8 * (v21 + 3));
        if (v35)
        {
          v33 = v21 + 3;
          goto LABEL_7;
        }
        v36 = v21 + 4;
        v23 = v21 + 3;
        if (v21 + 4 < v34)
        {
          v35 = *(_QWORD *)(v19 + 8 * v36);
          if (v35)
            goto LABEL_10;
          v33 = v21 + 5;
          v23 = v21 + 4;
          if (v21 + 5 < v34)
          {
            v35 = *(_QWORD *)(v19 + 8 * v33);
            if (v35)
              goto LABEL_7;
            v23 = v34 - 1;
            v37 = v21 + 6;
            while (v34 != v37)
            {
              v35 = *(_QWORD *)(v19 + 8 * v37++);
              if (v35)
              {
                v33 = v37 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v18, 1, 1, v4, v16);
  v26 = 0;
LABEL_23:
  *v1 = v20;
  v1[1] = v19;
  v1[2] = v48;
  v1[3] = v23;
  v1[4] = v26;
  v38 = (void (*)(uint64_t))v1[5];
  outlined init with take of CGSize?((uint64_t)v18, (uint64_t)v13, &lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UIMenuElement, value: CommandOperation));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    type metadata accessor for (UIMenuElement, CommandOperation)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a1, 1, 1, v39);
  }
  else
  {
    v40 = (uint64_t)v13;
    v41 = (uint64_t)v44;
    outlined init with take of TableCellFormula(v40, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for (key: UIMenuElement, value: CommandOperation));
    v38(v41);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, (uint64_t (*)(_QWORD))type metadata accessor for (key: UIMenuElement, value: CommandOperation));
    type metadata accessor for (UIMenuElement, CommandOperation)();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a1, 0, 1, v42);
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *);
  _QWORD v11[2];
  char v12;

  v3 = *(_QWORD *)(v1 + 288);
  v4 = *(_QWORD *)(v1 + 296);
  v5 = *(_BYTE *)(v1 + 304);
  if (v3 == *(_QWORD *)(v1 + 264))
  {
    v6 = *(_BYTE *)(v1 + 280);
    if ((*(_BYTE *)(v1 + 304) & 1) != 0)
    {
      if ((*(_BYTE *)(v1 + 280) & 1) == 0)
        goto LABEL_4;
LABEL_13:
      *(_QWORD *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_WORD *)(a1 + 88) = -256;
      return;
    }
    if (v4 != *(_QWORD *)(v1 + 272))
      v6 = 1;
    if ((v6 & 1) == 0)
      goto LABEL_13;
  }
LABEL_4:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
  v7 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = specialized ShadowRowCollection.endIndex.getter();
    if (v7 == v8)
    {
      v9 = 0;
LABEL_9:
      *(_QWORD *)(v1 + 288) = v7;
      *(_QWORD *)(v1 + 296) = v9;
      *(_BYTE *)(v1 + 304) = v7 == v8;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
      v10 = *(void (**)(_QWORD *))(v1 + 312);
      v11[0] = v3;
      v11[1] = v4;
      v12 = v5;
      v10(v11);
      return;
    }
    if ((v5 & 1) != 0)
      goto LABEL_16;
    v9 = v4 + 1;
    if (!__OFADD__(v4, 1))
      goto LABEL_9;
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

uint64_t specialized static SheetPreference.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[5];
  _BYTE v16[25];
  char v17;
  _QWORD v18[13];
  char v19;

  v4 = outlined init with copy of SheetPreference.Value(a1, (uint64_t)v18);
  if (v19)
  {
    if (v19 == 1)
    {
      return outlined destroy of SheetPreference.Value((uint64_t)v18);
    }
    else
    {
      v10 = outlined destroy of SheetPreference.Value(a1);
      return a2(v10);
    }
  }
  else
  {
    v6 = v18[0];
    ((void (*)(_OWORD *__return_ptr, uint64_t))a2)(v15, v4);
    if (v17)
    {
      if (v17 == 1)
      {
        outlined destroy of SheetPreference.Value(a1);
        result = swift_bridgeObjectRelease();
        v7 = *(_OWORD *)v16;
        *(_OWORD *)(a1 + 64) = v15[4];
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v16[9];
        v8 = v15[1];
        *(_OWORD *)a1 = v15[0];
        *(_OWORD *)(a1 + 16) = v8;
        v9 = v15[3];
        *(_OWORD *)(a1 + 32) = v15[2];
        *(_OWORD *)(a1 + 48) = v9;
        *(_BYTE *)(a1 + 105) = 1;
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v11 = *(_QWORD *)&v15[0];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = v6;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v11, (uint64_t)keypath_getTm_2, 0, isUniquelyReferenced_nonNull_native, &v14);
      v13 = v14;
      swift_bridgeObjectRelease();
      result = outlined destroy of SheetPreference.Value(a1);
      *(_QWORD *)a1 = v13;
      *(_BYTE *)(a1 + 105) = 0;
    }
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>);
  }
}

void sub_18737284C()
{
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_18737288C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 48) & ~v3);
  swift_release();
  swift_release();
  if (*(_QWORD *)(v4 + 24))
    swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4 + *(int *)(a1 + 68));
  return swift_deallocObject();
}

void partial apply for closure #2 in SheetPresentationModifier.body(content:)()
{
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_187372954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return closure #2 in SheetPresentationModifier.body(content:)(v1, v2 + ((v3 + 48) & ~v3));
}

unint64_t lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented;
  if (!lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationMode.FromIsPresented, &type metadata for PresentationMode.FromIsPresented);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented;
  if (!lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationMode.FromIsPresented, &type metadata for PresentationMode.FromIsPresented);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented;
  if (!lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationMode.FromIsPresented, &type metadata for PresentationMode.FromIsPresented);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented);
  }
  return result;
}

void partial apply for closure #1 in ItemSheetPresentationModifier.body(content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  closure #1 in ItemSheetPresentationModifier.body(content:)(a1, v2[8], v2[3], v2[6], v2[7], a2);
}

void sub_187372A14()
{
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_187372A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 64) & ~v3);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v5 = v4 + *(int *)(type metadata accessor for Binding() + 32);
  v6 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v6 + 48))(v5, 1))
    (*(void (**)(uint64_t))(v6 + 8))(v5);
  if (*(_QWORD *)(v4 + *(int *)(a1 + 68)))
    swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4 + *(int *)(a1 + 84));
  return swift_deallocObject();
}

void partial apply for closure #2 in ItemSheetPresentationModifier.body(content:)()
{
  type metadata accessor for ItemSheetPresentationModifier();
}

void sub_187372B94(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #2 in ItemSheetPresentationModifier.body(content:)(v1, v2 + ((v9 + 64) & ~v9), v3, v4, v5, v6, v7, v8);
}

uint64_t specialized ItemSheetPresentationModifier.item.setter()
{
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

uint64_t outlined init with copy of InspectorStorage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for InspectorStorage(a2, a1);
  return a2;
}

void type metadata accessor for (key: ViewIdentity, value: InspectorStorage)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?);
  }
}

void type metadata accessor for (key: AnyHashable, value: Anchor<CGRect?>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: AnyHashable, value: Anchor<CGRect?>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for Anchor<CGRect?>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect?, MEMORY[0x1E0CE7360]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: Anchor<CGRect?>));
  }
}

void type metadata accessor for (key: UIMenuElement, value: CommandOperation)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation))
  {
    type metadata accessor for UIMenuElement();
    type metadata accessor for CommandOperation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation));
  }
}

void type metadata accessor for (UIMenuElement, CommandOperation)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UIMenuElement, CommandOperation))
  {
    type metadata accessor for UIMenuElement();
    type metadata accessor for CommandOperation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIMenuElement, CommandOperation));
  }
}

void type metadata accessor for (key: UUID, value: PlatformItemList)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: UUID, value: PlatformItemList))
  {
    type metadata accessor for UUID();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: PlatformItemList));
  }
}

void type metadata accessor for (UUID, PlatformItemList)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UUID, PlatformItemList))
  {
    type metadata accessor for UUID();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID, PlatformItemList));
  }
}

void type metadata accessor for (key: Namespace.ID, value: UpdateViewDestinationRequest)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Namespace.ID, value: UpdateViewDestinationRequest)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, &lazy cache variable for type metadata for (key: Namespace.ID, value: UpdateViewDestinationRequest));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: UpdateViewDestinationRequest)?);
  }
}

void type metadata accessor for (key: AnyHashable, value: Any)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: AnyHashable, value: Any)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, &lazy cache variable for type metadata for (key: AnyHashable, value: Any));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: Any)?);
  }
}

uint64_t getEnumTagSinglePayload for SheetContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187373078 + 4 * byte_187C27D24[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for SheetContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t *initializeBufferWithCopyOfBuffer for CoreSheetPresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 80) & (unint64_t)~v6) + 1 > 0x18)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = *a2;
    v11 = (unint64_t)a2 + 15;
    *a1 = v12;
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
    *v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFF8);
    v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((v11 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    swift_retain();
    if (v16 < 0xFFFFFFFF)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = v16;
      *(_QWORD *)(v14 + 8) = v17;
      swift_retain();
    }
    v18 = ~v6;
    *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
    *(_BYTE *)(v14 + 17) = *(_BYTE *)(v15 + 17);
    v19 = (v14 + 25) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v15 + 25) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)(v20 + 24);
    if (v21 < 0xFFFFFFFF)
    {
      v22 = *(_OWORD *)v20;
      v23 = *(_OWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_OWORD *)v19 = v22;
      *(_OWORD *)(v19 + 16) = v23;
    }
    else
    {
      *(_QWORD *)(v19 + 24) = v21;
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      (**(void (***)(unint64_t, unint64_t))(v21 - 8))(v19, v20);
    }
    v24 = (v19 + v6 + 40) & v18;
    v25 = (v20 + v6 + 40) & v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v24, v25, v4);
    *(_BYTE *)(v24 + v7) = *(_BYTE *)(v25 + v7);
  }
  return v3;
}

_QWORD *assignWithCopy for CoreSheetPresentationModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v9 + 8) = v13;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v9 + 8) = v12;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v9 = *(_OWORD *)v10;
LABEL_8:
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v14 + 24) = v16;
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))((v9 + 25) & 0xFFFFFFFFFFFFFFF8, v15);
      goto LABEL_15;
    }
LABEL_14:
    v18 = *(_OWORD *)v15;
    v19 = *(_OWORD *)(v15 + 16);
    *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
    *(_OWORD *)v14 = v18;
    *(_OWORD *)(v14 + 16) = v19;
    goto LABEL_15;
  }
  v17 = (uint64_t *)((v9 + 25) & 0xFFFFFFFFFFFFFFF8);
  if (v16 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_1(v17, (uint64_t *)v15);
LABEL_15:
  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (v14 + v21 + 40) & ~v21;
  v23 = (v15 + v21 + 40) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v20 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v20 + 64));
  return a1;
}

_QWORD *initializeWithTake for CoreSheetPresentationModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFF8);
  v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (_OWORD *)(((v4 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *v8;
  }
  else
  {
    v9 = *(_QWORD *)((((v4 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
  }
  *(_BYTE *)(v7 + 16) = *(_BYTE *)((((v4 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 0x10);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)((((v4 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 0x11);
  v10 = (v7 + 25) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)v8 + 25) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  v13 = *(_OWORD *)(v11 + 16);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v10 + v15 + 40) & ~v15;
  v17 = (v11 + v15 + 40) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v16, v17);
  *(_BYTE *)(v16 + *(_QWORD *)(v14 + 64)) = *(_BYTE *)(v17 + *(_QWORD *)(v14 + 64));
  return a1;
}

_QWORD *assignWithTake for CoreSheetPresentationModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = (v5 & 0xFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFF8);
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  if (*(_QWORD *)v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v9 + 8) = v13;
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v9 + 8) = v12;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v9 = *(_OWORD *)v10;
LABEL_8:
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v10 + 17);
  v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(v14);
  v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v15;
  v17 = *(_OWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v14 + v19 + 40) & ~v19;
  v21 = (v15 + v19 + 40) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v18 + 40))(v20, v21);
  *(_BYTE *)(v20 + *(_QWORD *)(v18 + 64)) = *(_BYTE *)(v21 + *(_QWORD *)(v18 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSheetPresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = *(_QWORD *)(v4 + 64) + ((v7 + 80) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 25) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 40) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((v16 + 1) >= 2)
        return v16;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187373890 + 4 * byte_187C27D32[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for CoreSheetPresentationModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 80) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t storeEnumTagSinglePayload for SheetPreference.Placement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187373B9C + 4 * byte_187C27D45[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187373BD0 + 4 * byte_187C27D40[v4]))();
}

uint64_t sub_187373BD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187373BD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187373BE0);
  return result;
}

uint64_t sub_187373BEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187373BF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187373BF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187373C00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_UNKNOWN **sub_187373C0C()
{
  return &protocol witness table for TransactionalPreferenceTransformModifier<A>;
}

void sub_187373C18()
{
  type metadata accessor for SheetPresentationModifier();
}

uint64_t sub_187373C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[10];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPresentationModifier<A, B>, a1);
  v2 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for CoreSheetPresentationModifier(255, v6, v1, v3);
  v4 = type metadata accessor for ModifiedContent();
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2);
  v7[1] = &protocol witness table for CoreSheetPresentationModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v7);
}

void sub_187373CE0()
{
  type metadata accessor for ItemSheetPresentationModifier();
}

uint64_t sub_187373D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[12];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemSheetPresentationModifier<A, B, C>, a1);
  v2 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for CoreSheetPresentationModifier(255, v6, v1, v3);
  v4 = type metadata accessor for ModifiedContent();
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2);
  v7[1] = &protocol witness table for CoreSheetPresentationModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v7);
}

unint64_t lazy protocol witness table accessor for type SheetPreference.Placement and conformance SheetPreference.Placement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SheetPreference.Placement and conformance SheetPreference.Placement;
  if (!lazy protocol witness table cache variable for type SheetPreference.Placement and conformance SheetPreference.Placement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SheetPreference.Placement, &type metadata for SheetPreference.Placement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SheetPreference.Placement and conformance SheetPreference.Placement);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SheetContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>();
    lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
  }
}

void type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>)
  {
    type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0(255);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  result = lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>();
    v2 = v1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4[2] = v3;
    v4[3] = &type metadata for ContainerBackgroundKeys.TransparentHost;
    v4[4] = lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    v4[5] = &protocol witness table for ContainerBackgroundKeys.TransparentHost;
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E0CE4550], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>);
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SheetStyleContext>, MEMORY[0x1E0CE3F80], MEMORY[0x1E0CE3F70], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t sub_1873741B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.tintAdjustmentMode.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1873741F0()
{
  return EnvironmentValues.tintAdjustmentMode.setter();
}

uint64_t sub_187374224@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuIndicatorProminenceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187374260()
{
  return EnvironmentValues.menuIndicatorProminenceReduced.setter();
}

_QWORD *outlined retain of AlertStorage(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1[14];
  v7 = a1[13];
  v8 = a1[12];
  v3 = a1[15];
  v4 = a1[16];
  v5 = a1[17];
  v12 = a1[20];
  v13 = (void *)a1[19];
  v10 = a1[22];
  v11 = a1[21];
  v9 = (void *)a1[23];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v8, v7, v2, v3, v4, v5);
  outlined copy of BoundInputsView?(v13, v12, v11, v10, v9);
  return a1;
}

_QWORD *outlined release of AlertStorage(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[14];
  v7 = a1[13];
  v8 = a1[12];
  v3 = a1[15];
  v4 = a1[16];
  v5 = a1[17];
  v12 = a1[20];
  v13 = a1[19];
  v10 = a1[22];
  v11 = a1[21];
  v9 = (void *)a1[23];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v8, v7, v2, v3, v4, v5);
  outlined consume of BoundInputsView?(v13, v12, v11, v10, v9);
  return a1;
}

double _s7SwiftUI12ViewIdentityV_AA12AlertStorageVtSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void type metadata accessor for (ViewIdentity, AlertStorage)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?);
  }
}

double _s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0x1FFFFFFFELL;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

void type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?);
  }
}

void type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?);
  }
}

double _s7SwiftUI9NamespaceV2IDV_AA20OrnamentPresentationVtSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void type metadata accessor for (Namespace.ID, OrnamentPresentation)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Namespace.ID, OrnamentPresentation)?)
  {
    type metadata accessor for (Badge, Spacer)(255, &lazy cache variable for type metadata for (Namespace.ID, OrnamentPresentation));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (Namespace.ID, OrnamentPresentation)?);
  }
}

void type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation)?);
  }
}

void type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, &lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog));
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog)?);
  }
}

uint64_t sub_187374780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for CoreSheetPresentationModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80));
  swift_release();
  if (*(_QWORD *)(v7 + 16))
    swift_release();
  if (*(_QWORD *)(v7 + 64))
    __swift_destroy_boxed_opaque_existential_1(v7 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v7 + *(int *)(v6 + 56), v5);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<(Namespace.ID, Transaction)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Namespace.ID, Transaction)>)
  {
    type metadata accessor for (Badge, Spacer)(255, &lazy cache variable for type metadata for (Namespace.ID, Transaction));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Namespace.ID, Transaction)>);
  }
}

void type metadata accessor for (key: Selector, value: CommandAction)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: Selector, value: CommandAction))
  {
    type metadata accessor for CommandAction();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Selector, value: CommandAction));
  }
}

unint64_t type metadata accessor for CommandAction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CommandAction;
  if (!lazy cache variable for type metadata for CommandAction)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
  }
  return result;
}

uint64_t sub_187374978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[3];

  v13 = *(_QWORD *)(a1 + 8);
  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SheetStyleContext>, MEMORY[0x1E0CE3F80], MEMORY[0x1E0CE3F70], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v6);
  v15 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, (uint64_t (*)(_QWORD, uint64_t))v6);
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))v6);
  v16 = type metadata accessor for ModifiedContent();
  v28[0] = v13;
  v28[1] = MEMORY[0x1E0CE35E0];
  v11 = MEMORY[0x1E0CE2E70];
  v27[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v28);
  v27[1] = lazy protocol witness table accessor for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>();
  v26[0] = MEMORY[0x18D75FFDC](v11, v2, v27);
  v26[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>, MEMORY[0x1E0CE6488]);
  v25[0] = MEMORY[0x18D75FFDC](v11, v3, v26);
  v25[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, MEMORY[0x1E0CE65C0]);
  v24[0] = MEMORY[0x18D75FFDC](v11, v4, v25);
  v24[1] = &protocol witness table for ResetScrollEnvironmentModifier;
  v23[0] = MEMORY[0x18D75FFDC](v11, v5, v24);
  v23[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  v22[0] = MEMORY[0x18D75FFDC](v11, v7, v23);
  v22[1] = &protocol witness table for ResetSearchEnvironmentModifier;
  v21[0] = MEMORY[0x18D75FFDC](v11, v8, v22);
  v21[1] = &protocol witness table for ResetFormEnvironmentModifier;
  v20[0] = MEMORY[0x18D75FFDC](v11, v9, v21);
  v20[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0]);
  v19[0] = MEMORY[0x18D75FFDC](v11, v15, v20);
  v19[1] = &protocol witness table for ClearNavigationContextModifier;
  v18[0] = MEMORY[0x18D75FFDC](v11, v14, v19);
  v18[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  v17[0] = MEMORY[0x18D75FFDC](v11, v10, v18);
  v17[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  return MEMORY[0x18D75FFDC](v11, v16, v17);
}

void sub_187374D60()
{
  swift_getAssociatedTypeWitness();
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  type metadata accessor for StaticIf();
}

uint64_t sub_187374DCC(uint64_t a1)
{
  _QWORD v3[14];

  v3[0] = swift_getAssociatedConformanceWitness();
  v3[1] = MEMORY[0x1E0CE1E88];
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v3);
}

uint64_t destroy for UpdateViewDestinationRequest(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    result = swift_release();
  }
  if (*(_QWORD *)(v1 + 128) >> 1 != 0xFFFFFFFFLL)
  {
    outlined consume of NavigationRequest.Action(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88));
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v19;

  if (*(_QWORD *)(a2 + 8) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    swift_weakCopyInit();
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v4;
    swift_retain();
    swift_retain();
  }
  if (*(_QWORD *)(a2 + 128) >> 1 == 0xFFFFFFFFLL)
  {
    v5 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v5;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v6;
    v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v7;
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 80);
    v19 = *(_BYTE *)(a2 + 88);
    outlined copy of NavigationRequest.Action(v9, v10, v11, v12, v13, v14, v15, v16, v19);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    *(_BYTE *)(a1 + 88) = v19;
    v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for UpdateViewDestinationRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v52;
  char v53;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v4 == 1)
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_retain();
      swift_retain();
    }
  }
  else if (v4 == 1)
  {
    outlined destroy of NavigationAuthority(a1);
    v6 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v6;
  }
  else
  {
    swift_weakCopyAssign();
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_retain();
    swift_release();
  }
  v7 = (_OWORD *)(a1 + 24);
  v8 = (__int128 *)((char *)a2 + 24);
  v9 = a2[8] & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 128) >> 1 == 0xFFFFFFFFLL)
  {
    if (v9 == 0x1FFFFFFFELL)
    {
      *v7 = *v8;
      v10 = *(__int128 *)((char *)a2 + 40);
      v11 = *(__int128 *)((char *)a2 + 56);
      v12 = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 88) = v12;
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 56) = v11;
      v13 = *(__int128 *)((char *)a2 + 104);
      v14 = *(__int128 *)((char *)a2 + 120);
      v15 = *(__int128 *)((char *)a2 + 136);
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      *(_OWORD *)(a1 + 120) = v14;
      *(_OWORD *)(a1 + 136) = v15;
      *(_OWORD *)(a1 + 104) = v13;
    }
    else
    {
      v22 = *((_QWORD *)a2 + 3);
      v23 = *((_QWORD *)a2 + 4);
      v24 = *((_QWORD *)a2 + 5);
      v25 = *((_QWORD *)a2 + 6);
      v26 = *((_QWORD *)a2 + 7);
      v27 = *((_QWORD *)a2 + 8);
      v28 = *((_QWORD *)a2 + 9);
      v29 = *((_QWORD *)a2 + 10);
      v52 = *((_BYTE *)a2 + 88);
      outlined copy of NavigationRequest.Action(v22, v23, v24, v25, v26, v27, v28, v29, v52);
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = v26;
      *(_QWORD *)(a1 + 64) = v27;
      *(_QWORD *)(a1 + 72) = v28;
      *(_QWORD *)(a1 + 80) = v29;
      *(_BYTE *)(a1 + 88) = v52;
      v30 = a2[6];
      v31 = a2[8];
      *(_OWORD *)(a1 + 112) = a2[7];
      *(_OWORD *)(a1 + 128) = v31;
      *(_OWORD *)(a1 + 96) = v30;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      swift_retain();
    }
  }
  else if (v9 == 0x1FFFFFFFELL)
  {
    outlined destroy of NavigationRequest(a1 + 24);
    *v7 = *v8;
    v16 = *(__int128 *)((char *)a2 + 88);
    v18 = *(__int128 *)((char *)a2 + 40);
    v17 = *(__int128 *)((char *)a2 + 56);
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 88) = v16;
    *(_OWORD *)(a1 + 40) = v18;
    *(_OWORD *)(a1 + 56) = v17;
    v20 = *(__int128 *)((char *)a2 + 120);
    v19 = *(__int128 *)((char *)a2 + 136);
    v21 = *(__int128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_OWORD *)(a1 + 120) = v20;
    *(_OWORD *)(a1 + 136) = v19;
    *(_OWORD *)(a1 + 104) = v21;
  }
  else
  {
    v32 = *((_QWORD *)a2 + 3);
    v33 = *((_QWORD *)a2 + 4);
    v34 = *((_QWORD *)a2 + 5);
    v35 = *((_QWORD *)a2 + 6);
    v36 = *((_QWORD *)a2 + 7);
    v37 = *((_QWORD *)a2 + 8);
    v38 = *((_QWORD *)a2 + 9);
    v39 = *((_QWORD *)a2 + 10);
    v53 = *((_BYTE *)a2 + 88);
    outlined copy of NavigationRequest.Action(v32, v33, v34, v35, v36, v37, v38, v39, v53);
    v40 = *(_QWORD *)(a1 + 24);
    v41 = *(_QWORD *)(a1 + 32);
    v42 = *(_QWORD *)(a1 + 40);
    v43 = *(_QWORD *)(a1 + 48);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(_QWORD *)(a1 + 64);
    v46 = *(_QWORD *)(a1 + 72);
    v47 = *(_QWORD *)(a1 + 80);
    v48 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 24) = v32;
    *(_QWORD *)(a1 + 32) = v33;
    *(_QWORD *)(a1 + 40) = v34;
    *(_QWORD *)(a1 + 48) = v35;
    *(_QWORD *)(a1 + 56) = v36;
    *(_QWORD *)(a1 + 64) = v37;
    *(_QWORD *)(a1 + 72) = v38;
    *(_QWORD *)(a1 + 80) = v39;
    *(_BYTE *)(a1 + 88) = v53;
    outlined consume of NavigationRequest.Action(v40, v41, v42, v43, v44, v45, v46, v47, v48);
    v49 = a2[6];
    v50 = a2[8];
    *(_OWORD *)(a1 + 112) = a2[7];
    *(_OWORD *)(a1 + 128) = v50;
    *(_OWORD *)(a1 + 96) = v49;
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    swift_retain();
    swift_release();
  }
  return a1;
}

uint64_t outlined destroy of NavigationRequest(uint64_t a1)
{
  destroy for PositionedNavigationDestination.Storage.SeededRequest(a1);
  return a1;
}

__n128 initializeWithTake for UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __n128 result;

  v3 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 8) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    a1 = swift_weakTakeInit();
    *(_OWORD *)(a1 + 8) = *v3;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t assignWithTake for UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v5 != 1)
    {
      swift_weakTakeInit();
      *v4 = *v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 == 1)
  {
    outlined destroy of NavigationAuthority(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
LABEL_8:
  if (*(_QWORD *)(a1 + 128) >> 1 != 0xFFFFFFFFLL)
  {
    if (*(_QWORD *)(a2 + 128) >> 1 != 0xFFFFFFFFLL)
    {
      v11 = *(_BYTE *)(a2 + 88);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      v18 = *(_QWORD *)(a1 + 72);
      v19 = *(_QWORD *)(a1 + 80);
      v20 = *(_BYTE *)(a1 + 88);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 88) = v11;
      outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
      v21 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v21;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationRequest(a1 + 24);
  }
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v8;
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v9;
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationRequest(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 128) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewDestinationRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_QWORD *)(result + 128) = 2 * ~a2;
      *(_QWORD *)(result + 136) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateViewDestinationRequest.UpdateViewDestinationRequestKey()
{
  return &type metadata for UpdateViewDestinationRequest.UpdateViewDestinationRequestKey;
}

uint64_t View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t updated;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, double);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD v67[2];
  char v68;

  v56 = a6;
  v57 = a8;
  v55 = a5;
  v47 = a4;
  v54 = a3;
  v49 = a2;
  v65 = a9;
  v50 = a12;
  v51 = a10;
  v64 = a14;
  v48 = a11;
  v52 = a7 & 1;
  v63 = a16;
  updated = type metadata accessor for UpdateViewDestinationRequestProcessor(0, a15, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0]);
  v62 = *(_QWORD *)(updated - 8);
  v53 = updated;
  MEMORY[0x1E0C80A78](updated, v20);
  v58 = (uint64_t)&v45 - v21;
  v22 = *(_QWORD *)(a15 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for UpdateViewDestinationViewModifier(0, a15, a17, v27);
  v61 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v45 - v30;
  v32 = type metadata accessor for ModifiedContent();
  v33 = *(_QWORD *)(v32 - 8);
  v59 = v32;
  v60 = v33;
  v35 = MEMORY[0x1E0C80A78](v32, v34);
  v37 = (char *)&v45 - v36;
  v46 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v46(v26, a4, a15, v35);
  outlined init with copy of SwiftUIAnySortComparator?(v48, (uint64_t)v67, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  v38 = v49;
  LOBYTE(v22) = v54;
  v39 = v57;
  UpdateViewDestinationViewModifier.init(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(a1, v49, v54, (uint64_t)v26, v55, v56, v52, v57, (uint64_t)v31, v51, (uint64_t)v67, v50, a13, a15, a17);
  v67[0] = a1;
  v67[1] = v38;
  v68 = v22;
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(a13);
  v40 = MEMORY[0x1E0DEAFA0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v66);
  LOBYTE(v67[0]) = v66;
  ((void (*)(char *, uint64_t, uint64_t))v46)(v26, v47, a15);
  v41 = v58;
  UpdateViewDestinationRequestProcessor.init(presentationData:destination:linkID:)((uint64_t)v67, (uint64_t)v26, v39, a15, v40, MEMORY[0x1E0DEAFB0], v58);
  v42 = v53;
  MEMORY[0x18D756BEC](v41, v28, v53, &protocol witness table for UpdateViewDestinationViewModifier<A>);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v41, v42);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v28);
  v43 = v59;
  MEMORY[0x18D75B4AC](v37, v64, v59, v63);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v37, v43);
}

uint64_t UpdateViewDestinationViewModifier.init(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int *updated;
  uint64_t v22;
  uint64_t result;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  updated = (int *)type metadata accessor for UpdateViewDestinationViewModifier(0, a14, a15, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 - 8) + 32))(a9 + updated[9], a4, a14);
  outlined init with take of Image.Resolved?(a5, a9 + updated[10], &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  v22 = a9 + updated[11];
  *(_QWORD *)v22 = a6;
  *(_BYTE *)(v22 + 8) = a7 & 1;
  *(_QWORD *)(a9 + updated[12]) = a8;
  *(_BYTE *)(a9 + updated[13]) = a10;
  result = outlined init with take of Image.Resolved?(a11, a9 + updated[14], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(_BYTE *)(a9 + updated[15]) = a12;
  *(_QWORD *)(a9 + updated[16]) = a13;
  return result;
}

uint64_t UpdateViewDestinationRequestProcessor.init(presentationData:destination:linkID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t updated;
  uint64_t result;

  v14 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a7, a1, v14);
  updated = type metadata accessor for UpdateViewDestinationRequestProcessor(0, a4, a5, a6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7 + *(int *)(updated + 44), a2, a4);
  *(_QWORD *)(a7 + *(int *)(updated + 48)) = a3;
  return result;
}

double static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)@<D0>(__int128 *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;

  v4 = a1[3];
  v5 = a1[1];
  v19 = a1[2];
  v20 = v4;
  v6 = a1[3];
  v21 = a1[4];
  v7 = a1[1];
  v17 = *a1;
  v18 = v7;
  v11 = v19;
  v12 = v6;
  v13 = a1[4];
  v22 = *((_DWORD *)a1 + 20);
  v14 = *((_DWORD *)a1 + 20);
  v9 = v17;
  v10 = v5;
  a2(&v15);
  v9 = v17;
  v10 = v18;
  v11 = v19;
  outlined retain of _ViewInputs((uint64_t)&v17);
  outlined retain of _GraphInputs((uint64_t)&v9);
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v9);
  outlined release of _ViewInputs((uint64_t)&v17);
  v23 = v20;
  v24 = DWORD2(v20);
  outlined retain of [Text.Modifier]((uint64_t)&v23);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v15;
  result = v16;
  a3[1] = v16;
  return result;
}

uint64_t implicit closure #1 in static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)(unint64_t a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  _OWORD v18[2];
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  _BYTE v23[16];
  uint64_t updated;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  LODWORD(v26) = a2;
  type metadata accessor for UpdateViewDestinationRequestProcessor(255, a4, a5, a6);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v11 = a3[3];
  v28 = a3[2];
  v29 = v11;
  v30 = a3[4];
  v31 = *((_DWORD *)a3 + 20);
  v12 = a3[1];
  v26 = *a3;
  v27 = v12;
  v13 = _ViewInputs.viewPhase.getter();
  UpdateViewDestinationRequestProcessor.PreferenceDebouncer.init(seeds:modifier:phase:)(a1, v13, a4, a5, a6, (uint64_t)&v26);
  v18[0] = v26;
  v18[1] = v27;
  v19 = v28;
  v20 = BYTE4(v28);
  v21 = *((_QWORD *)&v28 + 1);
  v22 = v29;
  updated = type metadata accessor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(0, a4, a5, a6);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewDestinationRequestProcessor<A, B>.PreferenceDebouncer, updated);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v23, updated, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  return v17;
}

double UpdateViewDestinationRequestProcessor.PreferenceDebouncer.init(seeds:modifier:phase:)@<D0>(unint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v10;
  unint64_t v12;
  int OffsetAttribute2;
  int v14;
  double result;
  uint64_t v16;
  int v17;
  char v18;

  v10 = a1;
  v12 = HIDWORD(a1);
  UpdateCycleDetector.init()();
  type metadata accessor for Optional();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  type metadata accessor for UpdateViewDestinationRequestProcessor(0, a3, a4, a5);
  LODWORD(a4) = AGGraphCreateOffsetAttribute2();
  v14 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)a6 = v10;
  *(_DWORD *)(a6 + 4) = v12;
  *(_DWORD *)(a6 + 8) = OffsetAttribute2;
  *(_DWORD *)(a6 + 12) = a4;
  *(_DWORD *)(a6 + 16) = v14;
  *(_DWORD *)(a6 + 20) = a2;
  *(_QWORD *)(a6 + 24) = v16;
  *(_DWORD *)(a6 + 32) = v17;
  *(_BYTE *)(a6 + 36) = v18;
  result = NAN;
  *(_QWORD *)(a6 + 40) = -1;
  *(_DWORD *)(a6 + 48) = 0;
  return result;
}

unint64_t *UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t *WeakValue;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_DWORD *)(v1 + 48);
  v5 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v5 != v4)
  {
    *(_DWORD *)(v1 + 48) = v5;
    *(_QWORD *)(v1 + 28) = 0xFFFFFFFFLL;
    *(_BYTE *)(v1 + 36) = 0;
  }
  v6 = a1[2];
  AGGraphGetValue();
  v8 = v7;
  v9 = a1[3];
  type metadata accessor for Optional();
  AGGraphGetValue();
  v11 = v10;
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
    v13 = *WeakValue;
  else
    v13 = 0;
  v14 = WeakValue == 0;
  v15 = *(_QWORD *)AGGraphGetValue();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  *(_BYTE *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 28) = v3;
  *(_BYTE *)(v16 + 36) = v8 & 1;
  *(_BYTE *)(v16 + 37) = v11 & 1;
  *(_QWORD *)(v16 + 40) = v15;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  swift_release();
  return $defer #1 <A, B>() in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(v1, v6, v9, a1[4]);
}

unint64_t *$defer #1 <A, B>() in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(0, a2, a3, a4);
  result = (unint64_t *)AGGraphGetWeakValue();
  if (result)
    v6 = *result;
  else
    v6 = 0;
  v7 = HIDWORD(v6);
  if (!result)
  {
    LODWORD(v6) = -1;
    LODWORD(v7) = -1;
  }
  *(_DWORD *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 44) = v7;
  return result;
}

uint64_t closure #1 in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 *v14;
  _QWORD v15[20];
  __int128 v16[8];
  uint64_t v17;
  __int128 v18[8];
  unint64_t v19;
  _OWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  _OWORD v30[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  _BYTE v36[24];
  _BYTE v37[136];

  if ((a3 & 1) == 0)
  {
    v9 = a4;
    v10 = a2;
    if ((_DWORD)a4 == (_DWORD)a2 && HIDWORD(a4) != HIDWORD(a2) && (a5 & 1) == 0 && (a6 & 1) == 0)
    {
      v11 = *(_QWORD *)result;
      if (*(_QWORD *)(*(_QWORD *)result + 16))
      {
        v12 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
        if ((v13 & 1) != 0)
        {
          outlined init with copy of UpdateViewDestinationRequest(*(_QWORD *)(v11 + 56) + 160 * v12, (uint64_t)v30);
          outlined init with take of UpdateViewDestinationRequest((uint64_t)v30, (uint64_t)v36);
          outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v18, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
          outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
          if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v20) != 1
            && v21 == 14)
          {
            specialized Dictionary.removeValue(forKey:)(a7, (uint64_t)v15);
            outlined destroy of AccessibilityTableContext?((uint64_t)v15, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
            return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
          }
          outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
        }
      }
    }
    specialized Dictionary.removeValue(forKey:)(a7, (uint64_t)v30);
    if (v35 >> 1 == 4294967294)
      return outlined destroy of AccessibilityTableContext?((uint64_t)v30, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v30, (uint64_t)v36);
    if ((a6 & 1) != 0)
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v36, (uint64_t)v28, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      if (v29 == 1)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)v28, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
      }
      outlined init with take of NavigationAuthority((uint64_t)v28, (uint64_t)v16);
      outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v15, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v30, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v30) == 1)
      {
        outlined destroy of NavigationAuthority((uint64_t)v16);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
      }
      v18[6] = v33;
      v18[7] = v34;
      v19 = v35;
      v18[2] = v30[2];
      v18[3] = v30[3];
      v18[4] = v31;
      v18[5] = v32;
      v18[0] = v30[0];
      v18[1] = v30[1];
      outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined retain of NavigationRequest((uint64_t)v20);
      NavigationAuthority.enqueueRequest(_:)(v18);
      v14 = v16;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v15, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v30, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v30) != 1)
      {
        if (v31 == 18)
        {
          if (v9 != v10)
            return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
          outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
        }
        else
        {
          outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
          if (v9 != v10 && v21 == 13)
            return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
        }
      }
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v36, (uint64_t)v26, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      if (v27 == 1)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)v26, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
      }
      outlined init with take of NavigationAuthority((uint64_t)v26, (uint64_t)v28);
      outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v20, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v20) == 1)
      {
        outlined destroy of NavigationAuthority((uint64_t)v28);
        return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
      }
      v16[6] = v23;
      v16[7] = v24;
      v17 = v25;
      v16[2] = v20[2];
      v16[3] = v20[3];
      v16[4] = v21;
      v16[5] = v22;
      v16[0] = v20[0];
      v16[1] = v20[1];
      outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v18, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined retain of NavigationRequest((uint64_t)v18);
      NavigationAuthority.enqueueRequest(_:)(v16);
      v14 = (__int128 *)v28;
    }
    outlined destroy of NavigationAuthority((uint64_t)v14);
    outlined release of NavigationRequest?(v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationRequest?);
    return outlined destroy of UpdateViewDestinationRequest((uint64_t)v36);
  }
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateViewDestinationRequestProcessor<A, B>@<D0>(__int128 *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  return static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateViewDestinationRequestProcessor<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewDestinationRequestProcessor<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t OffsetAttribute2;
  double result;
  uint64_t v6;
  double v7;

  a1(&v6);
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
    OffsetAttribute2 = 0;
  else
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  MEMORY[0x1E0C80A78](OffsetAttribute2, v3);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v6;
  result = v7;
  a2[1] = v7;
  return result;
}

uint64_t implicit closure #1 in static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  _BYTE v11[16];
  uint64_t updated;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned __int8 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  type metadata accessor for UpdateViewDestinationViewModifier(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v14 = _GraphValue.value.getter();
  v15 = AGCreateWeakAttribute();
  v16 = 0;
  v17 = 1;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = -1;
  updated = type metadata accessor for UpdateViewDestinationViewModifier.RequestWriter(0, a3, a4, v6);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewDestinationViewModifier<A>.RequestWriter, updated);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v14, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v11, updated, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  outlined consume of NavigationRequest.Action?(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return v10;
}

uint64_t UpdateViewDestinationViewModifier.RequestWriter.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t updated;
  uint64_t Value;

  updated = type metadata accessor for UpdateViewDestinationViewModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a3, Value, updated);
}

uint64_t UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v48;
  char v49;
  int *WeakValue;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  _QWORD v67[20];
  _QWORD v68[8];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _QWORD v79[17];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  __int128 v89;
  char v90;
  _QWORD v91[8];
  char v92;
  unint64_t v93;
  _BYTE v94[160];
  _BYTE v95[72];
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;

  v5 = v4;
  v6 = a1;
  v104 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a1 + 24);
  updated = type metadata accessor for UpdateViewDestinationViewModifier(0, v7, v58, a4);
  v9 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v10);
  v12 = (char *)&v52 - v11;
  LOBYTE(v11) = *(_BYTE *)(v4 + 16);
  v13 = *(_BYTE *)(v4 + 88);
  *(_OWORD *)v95 = *(_OWORD *)v4;
  v95[16] = v11;
  *(_OWORD *)&v95[24] = *(_OWORD *)(v4 + 24);
  *(_OWORD *)&v95[40] = *(_OWORD *)(v4 + 40);
  *(_OWORD *)&v95[56] = *(_OWORD *)(v4 + 56);
  v96 = *(_OWORD *)(v4 + 72);
  LOBYTE(v97) = v13;
  UpdateViewDestinationViewModifier.RequestWriter.modifier.getter(v6, v14, (uint64_t)v12);
  UpdateViewDestinationViewModifier.request.getter(updated, v15, (uint64_t)v94);
  v65 = *(void (**)(char *, uint64_t))(v9 + 8);
  v65(v12, updated);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v94, (uint64_t)&v89, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  v66 = v7;
  if (v93 >> 1 != 4294967294)
  {
    v57 = updated;
    outlined init with take of Image.Resolved?((uint64_t)v91, (uint64_t)v79, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    outlined release of NavigationRequest?(v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationRequest?);
    outlined destroy of UpdateViewDestinationRequest((uint64_t)&v89);
    outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)&v80, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)&v80) == 1)
    {
      updated = v57;
      goto LABEL_5;
    }
    v52 = v6;
    v27 = v80;
    v28 = v83;
    v55 = v82;
    v56 = v81;
    v29 = v85;
    v30 = v86;
    v53 = v87;
    v54 = v84;
    v31 = v88;
    outlined copy of NavigationRequest.Action(v80, v81, v82, v83, v84, v85, v86, v87, v88);
    outlined release of NavigationRequest?(v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationRequest?);
    v33 = *(_QWORD *)(v4 + 24);
    v32 = *(_QWORD *)(v4 + 32);
    v34 = *(_QWORD *)(v4 + 40);
    v35 = *(_QWORD *)(v4 + 48);
    v36 = *(_QWORD *)(v4 + 56);
    v37 = *(_QWORD *)(v4 + 64);
    v38 = *(_QWORD *)(v4 + 72);
    v39 = *(_QWORD *)(v4 + 80);
    LODWORD(v4) = *(unsigned __int8 *)(v4 + 88);
    v68[0] = v27;
    v68[1] = v56;
    v68[2] = v55;
    v68[3] = v28;
    v24 = v33;
    v68[4] = v54;
    v68[5] = v29;
    v68[6] = v30;
    v68[7] = v53;
    v69 = v31;
    v70 = v33;
    v71 = v32;
    v72 = v34;
    v73 = v35;
    v74 = v36;
    v75 = v37;
    v76 = v38;
    v77 = v39;
    v78 = v4;
    v63 = v34;
    v64 = v32;
    v61 = v36;
    v62 = v35;
    v59 = v38;
    v60 = v37;
    if (v31 == 13)
    {
      v40 = (_DWORD)v4 == 13;
    }
    else
    {
      if (v31 != 18)
      {
        v25 = v39;
        outlined copy of NavigationRequest.Action?(v33, v32, v34, v35, v36, v37, v38, v39, v4);
        outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)v68);
        v26 = v58;
        v6 = v52;
LABEL_16:
        updated = v57;
        goto LABEL_17;
      }
      v40 = (_DWORD)v4 == 18;
    }
    v26 = v58;
    v6 = v52;
    if (!v40)
    {
      v25 = v39;
      if ((_DWORD)v4 != 255)
        outlined copy of NavigationRequest.Action(v33, v32, v34, v35, v36, v37, v38, v39, v4);
      outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)v68);
      goto LABEL_16;
    }
    v58 = v33;
    v25 = v39;
    outlined copy of NavigationRequest.Action(v33, v32, v34, v35, v36, v37, v38, v39, v4);
    outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)v68);
    v48 = *(_DWORD *)(v5 + 12);
    v49 = *(_BYTE *)(v5 + 16);
    WeakValue = (int *)AGGraphGetWeakValue();
    if (WeakValue)
      v51 = *WeakValue;
    else
      v51 = 0;
    if ((v49 & 1) != 0)
    {
      if (WeakValue)
      {
LABEL_28:
        memset(v67, 0, 128);
        v67[16] = 0x1FFFFFFFCLL;
        memset(&v67[17], 0, 24);
        goto LABEL_29;
      }
    }
    else if (!WeakValue || v48 != v51)
    {
      goto LABEL_28;
    }
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v94, (uint64_t)v67, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_29:
    v24 = v58;
    outlined init with take of Image.Resolved?((uint64_t)v67, (uint64_t)v95, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
    updated = v57;
    goto LABEL_18;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)&v89, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_5:
  v17 = *(_QWORD *)(v4 + 24);
  v16 = *(_QWORD *)(v4 + 32);
  v18 = *(_QWORD *)(v4 + 40);
  v19 = *(_QWORD *)(v4 + 48);
  v20 = *(_QWORD *)(v4 + 56);
  v21 = *(_QWORD *)(v4 + 64);
  v22 = *(_QWORD *)(v4 + 72);
  v23 = *(_QWORD *)(v4 + 80);
  LOBYTE(v4) = *(_BYTE *)(v4 + 88);
  memset(v95, 0, 64);
  v95[64] = -1;
  *(_QWORD *)&v96 = v17;
  *((_QWORD *)&v96 + 1) = v16;
  v97 = v18;
  v98 = v19;
  v99 = v20;
  v100 = v21;
  v101 = v22;
  v102 = v23;
  v24 = v17;
  v103 = v4;
  v63 = v18;
  v64 = v16;
  v61 = v20;
  v62 = v19;
  v59 = v22;
  v60 = v21;
  v25 = v23;
  outlined copy of NavigationRequest.Action?(v17, v16, v18, v19, v20, v21, v22, v23, v4);
  outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)v95);
  v26 = v58;
LABEL_17:
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v94, (uint64_t)v95, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_18:
  v42 = *(_BYTE *)(v5 + 16);
  v89 = *(_OWORD *)v5;
  v90 = v42;
  v91[0] = v24;
  v91[1] = v64;
  v91[2] = v63;
  v91[3] = v62;
  v91[4] = v61;
  v91[5] = v60;
  v91[6] = v59;
  v91[7] = v25;
  v92 = v4;
  UpdateViewDestinationViewModifier.RequestWriter.modifier.getter(v6, v41, (uint64_t)v12);
  v43 = *(_QWORD *)&v12[*(int *)(updated + 48)];
  v65(v12, updated);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v95, (uint64_t)&v89, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v43;
  outlined init with take of Image.Resolved?((uint64_t)&v89, v44 + 24, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  v67[0] = partial apply for closure #1 in UpdateViewDestinationViewModifier.RequestWriter.updateValue();
  v67[1] = v44;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  swift_release();
  v45 = v66;
  $defer #2 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(v5, (uint64_t)v94);
  $defer #1 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(v5, v45, v26, v46);
  outlined destroy of AccessibilityTableContext?((uint64_t)v94, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  return outlined destroy of AccessibilityTableContext?((uint64_t)v95, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
}

void UpdateViewDestinationViewModifier.request.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _BYTE v65[136];
  _BYTE v66[40];

  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v20 = (char *)&v43 - v19;
  if ((*(_BYTE *)(v3 + *(int *)(v16 + 60)) & 1) != 0)
    goto LABEL_7;
  v48 = v18;
  MEMORY[0x1E0C80A78](v16, v17);
  v49 = *(_QWORD *)(a1 + 24);
  static Update.dispatchImmediately<A>(_:)();
  v21 = v66[31];
  v22 = UpdateViewDestinationViewModifier.authorityIsPresenting.getter((int *)a1);
  v23 = v3 + *(int *)(a1 + 44);
  v24 = *(unsigned __int8 *)(v23 + 8);
  if ((v22 & 1) != 0)
  {
    if (((v21 | v24) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v3 + *(int *)(a1 + 36), v9);
      outlined init with take of Image.Resolved?(v3 + *(int *)(a1 + 40), (uint64_t)v65, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
      v25 = *(int *)(a1 + 52);
      v26 = *(_QWORD *)(v3 + *(int *)(a1 + 48));
      v50 = 0;
      v51 = 0;
      v52 = 1;
      v53 = v26;
      v27 = *(_BYTE *)(v3 + v25);
      outlined init with copy of SwiftUIAnySortComparator?(v3 + *(int *)(a1 + 56), (uint64_t)v66, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      UpdateViewDestinationRequest.init<A>(updateDestination:key:identifier:shouldTargetSourceColumn:navigationAuthority:)((uint64_t)v13, (uint64_t)v65, &v50, v27, (uint64_t)v66, v9, v49, a3);
    }
    else
    {
      v28 = (uint64_t *)(v3 + *(int *)(a1 + 40));
      v29 = *v28;
      v30 = v28[1];
      v31 = v28[2];
      v32 = v28[3];
      v33 = v28[4];
      v49 = v28[5];
      v34 = *(_QWORD *)(v3 + *(int *)(a1 + 48));
      outlined init with copy of SwiftUIAnySortComparator?(v3 + *(int *)(a1 + 56), (uint64_t)v66, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      *(_OWORD *)a3 = xmmword_187BF9840;
      *(_QWORD *)(a3 + 16) = 0;
      if (v33 >> 1 == 0xFFFFFFFF)
      {
        _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)&v50);
      }
      else
      {
        swift_retain();
        v41 = v29;
        v42 = Transaction.disablesAnimations.getter();
        swift_release();
        v50 = 0;
        v51 = 0;
        v52 = 1;
        v53 = v34;
        v54 = 0u;
        v55 = 0u;
        v56 = 19;
        v57 = v41;
        v58 = v30;
        v59 = v31;
        v60 = v32;
        v61 = v33;
        v62 = v49;
        v63 = v42 & 1;
        v64 = 0;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v50);
      }
      outlined init with take of Image.Resolved?((uint64_t)&v50, (uint64_t)v65, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of Image.Resolved?((uint64_t)v65, a3 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined assign with take of NavigationAuthority?((uint64_t)v66, a3);
    }
    return;
  }
  if (!v21 || (v24 & 1) != 0)
  {
LABEL_7:
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)(a3 + 128) = 0x1FFFFFFFCLL;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 152) = 0;
    return;
  }
  v47 = *(_QWORD *)v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v20, v3 + *(int *)(a1 + 36), v9);
  outlined init with take of Image.Resolved?(v3 + *(int *)(a1 + 40), (uint64_t)v65, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  v35 = *(_QWORD *)(v3 + *(int *)(a1 + 48));
  v50 = 0;
  v51 = 0;
  v52 = 1;
  v53 = v35;
  v36 = *(_QWORD *)v3;
  v46 = *(_QWORD *)(v3 + 8);
  v45 = *(unsigned __int8 *)(v3 + 16);
  outlined init with copy of SwiftUIAnySortComparator?(v3 + *(int *)(a1 + 56), (uint64_t)v66, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  v37 = *(_QWORD *)(v3 + *(int *)(a1 + 64));
  v38 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v7, v3, a1);
  v39 = v37;
  if (v37 == 1)
    v39 = swift_retain();
  v44 = v39;
  swift_retain();
  v40 = v46;
  swift_retain();
  outlined copy of Transaction?(v37);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, a1);
  UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)((uint64_t)v20, (uint64_t)v65, v47, (uint64_t)&v50, v36, v40, v45, a3, (uint64_t)v66, v44, v9, v49);
}

int *$defer #1 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *result;
  int v6;

  type metadata accessor for UpdateViewDestinationViewModifier.RequestWriter(0, a2, a3, a4);
  result = (int *)AGGraphGetWeakValue();
  if (result)
    v6 = *result;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 12) = v6;
  *(_BYTE *)(a1 + 16) = result == 0;
  return result;
}

uint64_t $defer #2 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD v22[17];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[24];
  _QWORD v33[18];

  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)v32, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  if (v33[13] >> 1 == 4294967294)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v32, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)v22, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    outlined release of NavigationRequest?(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationRequest?);
    outlined destroy of UpdateViewDestinationRequest((uint64_t)v32);
    outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)&v23, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)&v23) != 1)
    {
      v3 = v23;
      v4 = v24;
      v5 = v25;
      v6 = v26;
      v7 = v27;
      v8 = v28;
      v9 = v29;
      v10 = v30;
      v11 = v31;
      outlined copy of NavigationRequest.Action(v23, v24, v25, v26, v27, v28, v29, v30, v31);
      outlined release of NavigationRequest?(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationRequest?);
      goto LABEL_6;
    }
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = -1;
LABEL_6:
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = v11;
  return outlined consume of NavigationRequest.Action?(v12, v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t UpdateViewDestinationViewModifier.authorityIsPresenting.getter(int *a1)
{
  uint64_t v1;
  uint64_t Strong;
  Swift::UInt *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  uint64_t v10;
  Swift::UInt v11;
  unsigned __int8 v12;
  Swift::UInt v13;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  char v28[24];
  uint64_t v29;
  _BYTE v30[152];
  char v31[8];
  uint64_t v32;
  _BYTE v33[32];

  outlined init with copy of SwiftUIAnySortComparator?(v1 + a1[14], (uint64_t)v31, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (v32 != 1)
  {
    outlined init with take of NavigationAuthority((uint64_t)v31, (uint64_t)v33);
    v4 = (Swift::UInt *)(v1 + a1[10]);
    v5 = v4[4];
    if (v5 >> 1 == 0xFFFFFFFF)
    {
      outlined destroy of NavigationAuthority((uint64_t)v33);
      return 0;
    }
    v6 = *v4;
    v7 = v4[1];
    v9 = v4[2];
    v8 = v4[3];
    v10 = *(_QWORD *)(v1 + a1[12]);
    Strong = swift_weakLoadStrong();
    if (!Strong)
    {
LABEL_12:
      outlined destroy of NavigationAuthority((uint64_t)v33);
      return Strong;
    }
    swift_beginAccess();
    outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v31) == 1)
    {
LABEL_11:
      Strong = 0;
      goto LABEL_12;
    }
    v11 = v5 >> 62;
    v12 = v7;
    v13 = v9;
    if ((_DWORD)v11 && ((_DWORD)v11 != 1 || (v6 = v7, v12 = v9, v13 = v8, v9 == 6))
      || (v27 = v11,
          outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), v15 = v29, !*(_QWORD *)(v29 + 16))|| (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v12, v13), (v17 & 1) == 0))
    {
LABEL_10:
      outlined retain of NavigationState?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
      goto LABEL_11;
    }
    v18 = (_QWORD *)(*(_QWORD *)(v15 + 56) + 304 * v16);
    v19 = v18[14];
    v20 = v18[18];
    if ((v18[21] & 0x8000000000000000) != 0)
    {
      if ((v19 & 0x8000000000000000) == 0
        || ((v19 & 0xF000000000000007) != 0xF000000000000007 ? (v26 = v20 == v10) : (v26 = 0), !v26))
      {
LABEL_32:
        if (!v27 || v27 == 1 && (LOBYTE(v7) = v9, v9 != 6))
          __asm { BR              X9 }
        goto LABEL_10;
      }
    }
    else
    {
      v21 = v18[22];
      if ((v19 & 0x8000000000000000) == 0
        || ((v19 & 0xF000000000000007) != 0xF000000000000007 ? (v22 = v20 == v10) : (v22 = 0), !v22))
      {
        v23 = *(_QWORD *)(v21 + 16);
        if (v23)
        {
          v24 = (uint64_t *)(v21 + 64);
          while (1)
          {
            v25 = *v24;
            v24 += 7;
            if (v25 == v10)
              goto LABEL_36;
            if (!--v23)
              goto LABEL_32;
          }
        }
        goto LABEL_32;
      }
    }
LABEL_36:
    outlined retain of NavigationState?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    Strong = 1;
    goto LABEL_12;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)v31, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  return 0;
}

uint64_t UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  _OWORD v33[8];
  uint64_t v34;
  _OWORD v35[8];
  uint64_t v36;
  _QWORD v37[6];
  _BYTE v38[32];
  unint64_t v39;
  _QWORD v40[17];
  _BYTE v41[144];

  outlined init with take of Image.Resolved?(a2, (uint64_t)v37, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  v16 = v37[0];
  v15 = v37[1];
  v17 = v37[2];
  v24 = v37[4];
  v25 = v37[3];
  v23 = v37[5];
  v29 = *(_QWORD *)(a4 + 8);
  v28 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a8 = xmmword_187BF9840;
  *(_QWORD *)(a8 + 16) = 0;
  _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)v41);
  outlined init with take of Image.Resolved?((uint64_t)v41, a8 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined init with take of Image.Resolved?(a2, (uint64_t)v38, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  if (v39 >> 1 == 0xFFFFFFFF)
  {
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v41, (uint64_t)v40, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    v18 = a1;
    v19 = a11;
    v21 = v28;
    v20 = v29;
  }
  else
  {
    v40[0] = v16;
    v40[1] = v15;
    v40[2] = v17;
    v40[3] = v25;
    v40[4] = v24;
    v40[5] = v23;
    v18 = a1;
    v20 = v29;
    v21 = v28;
    closure #1 in UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)((uint64_t)v40, a1, a3, (uint64_t)v33, a5, a6, a7 & 1, a11, a12);
    swift_release();
    v35[6] = v33[6];
    v35[7] = v33[7];
    v36 = v34;
    v35[2] = v33[2];
    v35[3] = v33[3];
    v35[4] = v33[4];
    v35[5] = v33[5];
    v35[0] = v33[0];
    v35[1] = v33[1];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v35);
    outlined init with take of Image.Resolved?((uint64_t)v35, (uint64_t)v40, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    v19 = a11;
  }
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  outlined init with take of Image.Resolved?(a8 + 24, (uint64_t)v35, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined release of NavigationRequest?(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationRequest?);
  outlined init with take of Image.Resolved?((uint64_t)v40, a8 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  return outlined assign with take of NavigationAuthority?(a9, a8);
}

uint64_t UpdateViewDestinationRequest.init<A>(updateDestination:key:identifier:shouldTargetSourceColumn:navigationAuthority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v29[6];
  _OWORD v30[8];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[6];
  _BYTE v42[32];
  unint64_t v43;
  _BYTE v44[136];
  _BYTE v45[152];

  outlined init with take of Image.Resolved?(a2, (uint64_t)v41, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  v11 = v41[0];
  v12 = v41[1];
  v21 = v41[3];
  v22 = v41[2];
  v19 = v41[5];
  v20 = v41[4];
  v14 = *a3;
  v13 = a3[1];
  v15 = a3[2];
  v23 = a3[3];
  *(_OWORD *)a8 = xmmword_187BF9840;
  *(_QWORD *)(a8 + 16) = 0;
  _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)v45);
  outlined init with take of Image.Resolved?((uint64_t)v45, a8 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined init with take of Image.Resolved?(a2, (uint64_t)v42, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  if (v43 >> 1 == 0xFFFFFFFF)
  {
    swift_release();
    outlined consume of Text.LineStyle?(v13, v15);
    outlined init with take of Image.Resolved?((uint64_t)v45, (uint64_t)v44, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    v16 = a1;
    v17 = a6;
  }
  else
  {
    v29[0] = v11;
    v29[1] = v12;
    v29[2] = v22;
    v29[3] = v21;
    v29[4] = v20;
    v29[5] = v19;
    outlined init with take of NavigationRequest.KeyKind((uint64_t)v29, (uint64_t)v44);
    *(_QWORD *)&v32 = v14;
    *((_QWORD *)&v32 + 1) = v13;
    *(_QWORD *)&v33 = v15;
    *((_QWORD *)&v33 + 1) = v23;
    static NavigationRequest.updateView<A>(_:from:identifier:shouldTargetSourceColumn:)(a1, (uint64_t)v44, a4 & 1, a6, a7, (uint64_t)v30);
    swift_release();
    outlined consume of Text.LineStyle?(v13, v15);
    v38 = v30[6];
    v39 = v30[7];
    v40 = v31;
    v34 = v30[2];
    v35 = v30[3];
    v36 = v30[4];
    v37 = v30[5];
    v32 = v30[0];
    v33 = v30[1];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v32);
    outlined init with take of Image.Resolved?((uint64_t)&v32, (uint64_t)v44, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    v17 = a6;
    v16 = a1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16);
  outlined init with take of Image.Resolved?(a8 + 24, (uint64_t)&v32, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined release of NavigationRequest?(&v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationRequest?);
  outlined init with take of Image.Resolved?((uint64_t)v44, a8 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  return outlined assign with take of NavigationAuthority?(a5, a8);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateViewDestinationViewModifier<A>@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  return static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateViewDestinationViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewDestinationViewModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  _BYTE v14[48];

  outlined init with take of NavigationRequest.KeyKind(a1, (uint64_t)v14);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = a6;
  *(_BYTE *)(v10 + 32) = a7;
  swift_retain();
  swift_retain();
  static NavigationRequest.programmaticallyPresentView<A>(_:from:transaction:depth:identifier:dismiss:)(a2, (uint64_t)v14, a3, (uint64_t)partial apply for closure #1 in View.actionSheet(isPresented:content:), v10, a8, a4, a9);
  return swift_release();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance UpdateViewDestinationRequest.UpdateViewDestinationRequestKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static UpdateViewDestinationRequest.UpdateViewDestinationRequestKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for UpdateViewDestinationRequestProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateViewDestinationRequestProcessor);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = outlined init with copy of UpdateViewDestinationRequest((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  return swift_retain();
}

{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = outlined init with copy of TableColumnList((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = outlined init with copy of NavigationDestinationPresentation((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

uint64_t specialized static UpdateViewDestinationRequest.UpdateViewDestinationRequestKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for UpdateViewDestinationRequestProcessor()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UpdateViewDestinationRequestProcessor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v8 + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12 + ((v8 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    v17 = ~v10;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v7 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    v18 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, v18, v5);
    *(_QWORD *)((v12 + (((unint64_t)a1 + v11) & v17)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v18) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for UpdateViewDestinationRequestProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  if (!*(_DWORD *)(v5 + 84))
    ++v6;
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v6 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void *initializeWithCopy for UpdateViewDestinationRequestProcessor(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = ((unint64_t)a1 + v14) & ~v13;
  v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for UpdateViewDestinationRequestProcessor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = ((unint64_t)a1 + v15) & ~v14;
  v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))(v16, v17);
  *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for UpdateViewDestinationRequestProcessor(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = ((unint64_t)a1 + v14) & ~v13;
  v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for UpdateViewDestinationRequestProcessor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = ((unint64_t)a1 + v15) & ~v14;
  v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(v16, v17);
  *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationRequestProcessor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v6)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v5 + 64) + 1;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = v11 + v12;
  if (v10 < a2)
  {
    if (((((*(_QWORD *)(v8 + 64) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v14 = 2;
    else
      v14 = a2 - v10 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X5 }
  }
  if (!v10)
    return 0;
  if (v7 < v9)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))((v13 + a1) & ~v12, *(unsigned int *)(v8 + 84), v4);
  v18 = (*(uint64_t (**)(void))(v5 + 48))();
  if (v18 >= 2)
    return v18 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for UpdateViewDestinationRequestProcessor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  if (v11 < a3)
  {
    v13 = a3 - v11;
    if (((*(_DWORD *)(v10 + 64) + (((_DWORD)v12 + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (a2 > v11)
  {
    if (((*(_DWORD *)(v10 + 64) + (((_DWORD)v12 + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v16 = ~v11 + a2;
      bzero(a1, ((*(_QWORD *)(v10 + 64)+ ((v12 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_187378D28(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, size_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;

  v19[v20] = 0;
  if ((_DWORD)a1)
  {
    if (v15 >= v13)
    {
      if (v15 >= a1)
      {
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, (a1 + 1), a2, a3);
      }
      else if ((_DWORD)a4)
      {
        if (a4 <= 3)
          v21 = a4;
        else
          v21 = 4;
        bzero(v19, a4);
        __asm { BR              X10 }
      }
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))((unint64_t)&v19[v18] & v14, a1, v13, v12);
    }
  }
}

void sub_187378E00()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_187378E10()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateViewDestinationRequestProcessor<A, B>()
{
  return &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
}

uint64_t partial apply for implicit closure #1 in static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 40), *(_DWORD *)(v0 + 48), *(__int128 **)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer);
}

uint64_t type metadata accessor for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateViewDestinationViewModifier);
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 52))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 36);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 52) = 0;
    if (a2)
      *(_BYTE *)(result + 36) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for UpdateViewDestinationViewModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t destroy for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  uint64_t v9;

  swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(((v6 + 87) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v7 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  if ((int)v7 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  result = *(_QWORD *)((v6 + 119) & 0xFFFFFFFFFFFFF8);
  LODWORD(v9) = -1;
  if (result < 0xFFFFFFFF)
    v9 = *(_QWORD *)((v6 + 119) & 0xFFFFFFFFFFFFF8);
  if ((int)v9 - 1 < 0)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (_OWORD *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (__int128 *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  v15 = v13[2];
  v12[1] = v13[1];
  v12[2] = v15;
  *v12 = v14;
  v16 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v13 + 87) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)(v22 + 8);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  if ((int)v23 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v24 = *(_OWORD *)v22;
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
    *(_OWORD *)v21 = v24;
  }
  *(_BYTE *)(v21 + 24) = *(_BYTE *)(v22 + 24);
  v25 = *(_QWORD *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFF8);
  LODWORD(v26) = -1;
  if (v25 < 0xFFFFFFFF)
    v26 = *(_QWORD *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFF8);
  if ((int)v26 - 1 < 0)
    v25 = swift_retain();
  *(_QWORD *)(((unint64_t)v12 + 119) & 0xFFFFFFFFFFFFF8) = v25;
  return a1;
}

uint64_t assignWithCopy for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (__int128 *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = *v12;
  v14 = v12[2];
  v11[1] = v12[1];
  v11[2] = v14;
  *v11 = v13;
  v15 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = ((unint64_t)v11 + 71) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = ((unint64_t)v11 + 87) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v20 + 8);
  if (v22 >= 0xFFFFFFFF)
    LODWORD(v22) = -1;
  v23 = v22 - 1;
  v24 = *(_QWORD *)(v21 + 8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  v25 = v24 - 1;
  if ((v23 & 0x80000000) == 0)
  {
    if (v25 < 0)
    {
      swift_weakCopyInit();
      *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((v25 & 0x80000000) == 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
LABEL_10:
    v26 = *(_OWORD *)v21;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
    *(_OWORD *)v20 = v26;
    goto LABEL_11;
  }
  swift_weakCopyAssign();
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  swift_retain();
  swift_release();
LABEL_11:
  *(_BYTE *)(v20 + 24) = *(_BYTE *)(v21 + 24);
  v27 = (uint64_t *)(((unint64_t)v11 + 119) & 0xFFFFFFFFFFFFFFF8);
  v28 = (uint64_t *)(((unint64_t)v12 + 119) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v29) = -1;
  if ((unint64_t)*v27 >= 0xFFFFFFFF)
    LODWORD(v30) = -1;
  else
    v30 = *v27;
  v31 = v30 - 1;
  v32 = *v28;
  if ((unint64_t)*v28 < 0xFFFFFFFF)
    v29 = *v28;
  v33 = v29 - 1;
  if (v31 < 0)
  {
    if (v33 < 0)
    {
      *v27 = v32;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *v27 = *v28;
    }
  }
  else
  {
    *v27 = v32;
    if (v33 < 0)
      swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  __int128 v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 17 + a1) & ~v5;
  v7 = (v5 + 17 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_OWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (__int128 *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = v10[2];
  v9[1] = v10[1];
  v9[2] = v12;
  *v9 = v11;
  v13 = ((unint64_t)v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v15;
  v16 = ((unint64_t)v9 + 71) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v10 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = ((unint64_t)v9 + 87) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v10 + 87) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v19 + 8);
  if (*(_QWORD *)(v19 + 8) >= 0xFFFFFFFFuLL)
    v20 = -1;
  if (v20 - 1 < 0)
  {
    v18 = swift_weakTakeInit();
    *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
  }
  else
  {
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
    *(_OWORD *)v18 = v21;
  }
  *(_BYTE *)(v18 + 24) = *(_BYTE *)(v19 + 24);
  *(_QWORD *)(((unint64_t)v9 + 119) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + 119) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  uint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (__int128 *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = *v12;
  v14 = v12[2];
  v11[1] = v12[1];
  v11[2] = v14;
  *v11 = v13;
  v15 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = ((unint64_t)v11 + 71) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = ((unint64_t)v11 + 87) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v20 + 8);
  if (*(_QWORD *)(v20 + 8) >= 0xFFFFFFFFuLL)
    v22 = -1;
  v23 = v22 - 1;
  v24 = *(_QWORD *)(v21 + 8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  v25 = v24 - 1;
  if ((v23 & 0x80000000) == 0)
  {
    if (v25 < 0)
    {
      swift_weakTakeInit();
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((v25 & 0x80000000) == 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
LABEL_10:
    v26 = *(_OWORD *)v21;
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
    *(_OWORD *)v20 = v26;
    goto LABEL_11;
  }
  swift_weakTakeAssign();
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_release();
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  swift_release();
LABEL_11:
  *(_BYTE *)(v20 + 24) = *(_BYTE *)(v21 + 24);
  v27 = (uint64_t *)(((unint64_t)v11 + 119) & 0xFFFFFFFFFFFFFFF8);
  v28 = (unint64_t *)(((unint64_t)v12 + 119) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)*v27 >= 0xFFFFFFFF)
    LODWORD(v29) = -1;
  else
    v29 = *v27;
  v30 = *v28;
  if ((int)v29 - 1 < 0)
  {
    LODWORD(v31) = -1;
    if (v30 < 0xFFFFFFFF)
      v31 = *v28;
    if ((int)v31 - 1 < 0)
    {
      *v27 = v30;
      swift_release();
      return a1;
    }
    swift_release();
    v30 = *v28;
  }
  *v27 = v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 119) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18737998C + 4 * byte_187C28135[v10]))();
  }
}

void storeEnumTagSinglePayload for UpdateViewDestinationViewModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 119) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 119) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 119) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187379B1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187379B8CLL);
}

void sub_187379B24(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187379B2CLL);
  JUMPOUT(0x187379B8CLL);
}

void sub_187379B40()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187379B8CLL);
}

void sub_187379B48()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187379B8CLL);
}

void sub_187379B50(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x187379B5CLL);
    if (a2 < 0)
      JUMPOUT(0x187379B80);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x187379B8CLL);
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateViewDestinationViewModifier<A>()
{
  return &protocol witness table for UpdateViewDestinationViewModifier<A>;
}

void base witness table accessor for _AttributeBody in UpdateViewDestinationRequestProcessor<A, B>.PreferenceDebouncer()
{
  JUMPOUT(0x18D75FFDCLL);
}

double _s7SwiftUI17NavigationRequestVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x1FFFFFFFELL;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t outlined init with take of NavigationRequest.KeyKind(uint64_t a1, uint64_t a2)
{
  __swift_memcpy48_8(a2, a1);
  return a2;
}

uint64_t sub_187379C20()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 28), *(_BYTE *)(v1 + 36), *(_BYTE *)(v1 + 37), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for implicit closure #1 in static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)(*(unsigned int *)(v0 + 32), *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateViewDestinationViewModifier.RequestWriter);
}

uint64_t destroy for UpdateViewDestinationViewModifier.RequestWriter(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 88);
  if (v1 != 255)
    return outlined consume of NavigationRequest.Action(*(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), *(_QWORD *)(result + 64), *(_QWORD *)(result + 72), *(_QWORD *)(result + 80), v1);
  return result;
}

uint64_t initializeWithCopy for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if (v3 == 255)
  {
    v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v13;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    outlined copy of NavigationRequest.Action(v4, v5, v6, v7, v8, v9, v10, v11, v3);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    *(_BYTE *)(a1 + 88) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v6 == 255)
    {
      *(_OWORD *)v4 = *(_OWORD *)v5;
      v35 = *(_OWORD *)(a2 + 40);
      v36 = *(_OWORD *)(a2 + 56);
      v37 = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_OWORD *)(a1 + 56) = v36;
      *(_OWORD *)(a1 + 72) = v37;
      *(_OWORD *)(a1 + 40) = v35;
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = *(_QWORD *)(a2 + 40);
      v27 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 56);
      v29 = *(_QWORD *)(a2 + 64);
      v30 = *(_QWORD *)(a2 + 72);
      v31 = *(_QWORD *)(a2 + 80);
      outlined copy of NavigationRequest.Action(v24, v25, v26, v27, v28, v29, v30, v31, v6);
      *(_QWORD *)(a1 + 24) = v24;
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v28;
      *(_QWORD *)(a1 + 64) = v29;
      *(_QWORD *)(a1 + 72) = v30;
      *(_QWORD *)(a1 + 80) = v31;
      *(_BYTE *)(a1 + 88) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 24);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    v33 = *(_OWORD *)(v5 + 32);
    v32 = *(_OWORD *)(v5 + 48);
    v34 = *(_OWORD *)(v5 + 16);
    *(_BYTE *)(v4 + 64) = *(_BYTE *)(v5 + 64);
    *(_OWORD *)(v4 + 32) = v33;
    *(_OWORD *)(v4 + 48) = v32;
    *(_OWORD *)(v4 + 16) = v34;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 72);
    v14 = *(_QWORD *)(a2 + 80);
    outlined copy of NavigationRequest.Action(v7, v8, v9, v10, v11, v12, v13, v14, v6);
    v15 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 64);
    v21 = *(_QWORD *)(a1 + 72);
    v22 = *(_QWORD *)(a1 + 80);
    v23 = *(_BYTE *)(a1 + 88);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v14;
    *(_BYTE *)(a1 + 88) = v6;
    outlined consume of NavigationRequest.Action(v15, v16, v17, v18, v19, v20, v21, v22, v23);
  }
  return a1;
}

uint64_t assignWithTake for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = *(unsigned __int8 *)(a1 + 88);
  if (v6 == 255)
    goto LABEL_5;
  v7 = *(unsigned __int8 *)(a2 + 88);
  if (v7 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 24);
LABEL_5:
    v16 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v16;
    *(_BYTE *)(v4 + 64) = *(_BYTE *)(v5 + 64);
    v17 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v17;
    return a1;
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v7;
  outlined consume of NavigationRequest.Action(v8, v9, v10, v11, v12, v13, v14, v15, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xE9 && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 233);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 <= 0x16)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewDestinationViewModifier.RequestWriter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE8)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 233;
    if (a3 >= 0xE9)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xE9)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 88) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewDestinationKind()
{
  return &type metadata for ViewDestinationKind;
}

void base witness table accessor for _AttributeBody in UpdateViewDestinationViewModifier<A>.RequestWriter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  outlined consume of NavigationRequest.Action?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of NavigationRequest.Action?(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_18737A178()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 152) & 0xFFFFFFFFFFFFFFFELL;
  if (v1 != 0x1FFFFFFFCLL)
  {
    if (*(_QWORD *)(v0 + 32) != 1)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
      v1 = *(_QWORD *)(v0 + 152) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v1 != 0x1FFFFFFFELL)
    {
      outlined consume of NavigationRequest.Action(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
      swift_release();
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UpdateViewDestinationViewModifier.RequestWriter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[160];

  v1 = *(_QWORD *)(v0 + 16);
  outlined init with copy of SwiftUIAnySortComparator?(v0 + 24, (uint64_t)v3, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  return specialized Dictionary.subscript.setter((uint64_t)v3, v1);
}

_QWORD *outlined release of NavigationRequest?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t outlined copy of NavigationRequest?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a14 >> 1 != 0xFFFFFFFF)
  {
    outlined copy of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in UpdateViewDestinationViewModifier.request.getter()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  return MEMORY[0x18D75B9C8]();
}

uint64_t sub_18737A37C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t View.aspectRatio(_:contentMode:)(char a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v6;
  char v7;
  char v8;

  v6 = a4 / a5;
  v7 = 0;
  v8 = a1 & 1;
  return MEMORY[0x18D75B4AC](&v6, a2, MEMORY[0x1E0CE45F8], a3);
}

uint64_t View.scaledToFit()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = 0;
  v4 = 1;
  return MEMORY[0x18D75B4AC](&v3, a1, MEMORY[0x1E0CE45F8], a2);
}

uint64_t View.scaledToFill()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = 0;
  v4 = 257;
  return MEMORY[0x18D75B4AC](&v3, a1, MEMORY[0x1E0CE45F8], a2);
}

uint64_t sub_18737A460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CE45E8];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t key path getter for _CALayerView.update : <A>_CALayerView<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(a3 + a2 - 8);
  v7 = *a1;
  v6 = a1[1];
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> ();
  a4[1] = v8;
  return swift_retain();
}

uint64_t key path setter for _CALayerView.update : <A>_CALayerView<A>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((_QWORD *)v8 + 2) = v5;
  *((_QWORD *)v8 + 3) = v7;
  *((_QWORD *)v8 + 4) = v6;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  a2[1] = v8;
  return result;
}

uint64_t _CALayerView.update.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _CALayerView.update.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_CALayerView.update.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _CALayerView<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CALayerView<A>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _CALayerView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CALayerView<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t static _CALayerView.requiresMainThread.getter()
{
  return 1;
}

uint64_t sub_18737A678()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance _CALayerView<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CALayerView<A>);
  return RendererLeafView.contains(points:size:)();
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _CALayerView<A>@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  ContentResponder.contentPath(size:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance _CALayerView<A>@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  ContentResponder.contentPath(size:kind:)();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance _CALayerView<A>(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
}

uint64_t _CALayerView<>.init(onUpdate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void base witness table accessor for ContentResponder in _CALayerView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PrimitiveView in _CALayerView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for UnaryView in _CALayerView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for AnyViewFactory in _CALayerView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for View in _CALayerView<A>()
{
  return &protocol witness table for _CALayerView<A>;
}

uint64_t sub_18737A7EC()
{
  return 8;
}

_QWORD *sub_18737A7F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_18737A804()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 24))(*a1);
}

uint64_t AppStorage.location.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AppStorage.location.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

char *UserDefaultLocation.__allocating_init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  return UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t AppStorage.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.getValue(forReading:)(1, a1);
  return swift_release();
}

uint64_t AppStorage.wrappedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized AppStorage.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*AppStorage.wrappedValue.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  *v6 = a2;
  v6[1] = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v6[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v6[3] = malloc(v8);
  v9 = malloc(v8);
  v6[4] = v9;
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.getValue(forReading:)(1, (uint64_t)v9);
  swift_release();
  return AppStorage.wrappedValue.modify;
}

void AppStorage.wrappedValue.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    UserDefaultLocation.canonicalLocation.getter();
    UserDefaultLocation.set(_:transaction:)();
    swift_release();
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    UserDefaultLocation.canonicalLocation.getter();
    UserDefaultLocation.set(_:transaction:)();
    swift_release();
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t AppStorage.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.getValue(forReading:)(0, (uint64_t)v4);
  swift_release();
  v7 = type metadata accessor for UserDefaultLocation(255, a2, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UserDefaultLocation<A>, v7);
  type metadata accessor for LocationBox();
  v9[1] = UserDefaultLocation.canonicalLocation.getter();
  swift_allocObject();
  LocationBox.init(_:)();
  return Binding.init(value:location:)();
}

void static AppStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized static AppStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance AppStorage<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized static AppStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16));
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1E1AB53C8, (uint64_t)&protocol witness table for BoolTransform, a4, a1, 0);
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1E1ABF380, (uint64_t)&protocol witness table for IntegerTransform, a4, a1, 0);
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1E1ABAD50, (uint64_t)&protocol witness table for DoubleTransform, a3, 0, a4);
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a3, a4, (uint64_t)&unk_1E1ABD318, (uint64_t)&protocol witness table for StringTransform, a5, a1, a2, 0);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = MEMORY[0x1E0CB0338];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PropertyListTransform<Data>, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PropertyListTransform);
  v12 = v11;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<Data>, v10, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a3, a4, v12, (uint64_t)&protocol witness table for PropertyListTransform<A>, a5, a1, a2, 0, 0xF000000000000000);
}

_QWORD *AppStorage.init<A>(wrappedValue:_:store:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = type metadata accessor for URL();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v23 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v19((char *)&v23 - v17, (uint64_t)a1, v8, v16);
  ((void (*)(char *, char *, uint64_t))v19)(v13, v18, v8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UserDefaultLocation<URL>, v9, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  v20 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1E1AB4C30, (uint64_t)&protocol witness table for URLTransform, a4, (uint64_t)v13, 0, v9);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v18, v8);
  v21(a1, v8);
  return v20;
}

{
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  v7 = type metadata accessor for Date();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v23 - v15;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PropertyListTransform<Date>, v8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19(v16, (uint64_t)a1, v7);
  v19(v12, (uint64_t)v16, v7);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UserDefaultLocation<Date>, v8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  v20 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, v18, (uint64_t)&protocol witness table for PropertyListTransform<A>, v24, (uint64_t)v12, 0, v8);
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v16, v7);
  v21(a1, v7);
  return v20;
}

void AppStorage.init<A>(wrappedValue:_:store:)()
{
  AppStorage.init<A>(wrappedValue:_:store:)();
}

{
  AppStorage.init<A>(wrappedValue:_:store:)();
}

{
  type metadata accessor for RawRepresentableTransform();
}

char *sub_18737B250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v6 = specialized AppStorage.init(key:transform:store:defaultValue:)(v4, v3, a1, (uint64_t)&protocol witness table for RawRepresentableTransform<A, B>, v2, v5, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5, v1);
  return v6;
}

char *AppStorage<A>.init(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  char *v13;

  v12 = type metadata accessor for JSONCodableTransform(0, a5, a6, a7);
  v13 = specialized AppStorage.init(key:transform:store:defaultValue:)(a2, a3, v12, (uint64_t)&protocol witness table for JSONCodableTransform<A>, a4, a1, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v13;
}

uint64_t AppStorage<A>.init<>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1E1AB53C8, (uint64_t)&protocol witness table for BoolTransform, a3, 2, 0, 3);
}

{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1E1ABF380, (uint64_t)&protocol witness table for IntegerTransform, a3, 0, 1, 0);
}

{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E0DEB070]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1E1ABAD50, (uint64_t)&protocol witness table for DoubleTransform, a3, 0, 1, 0);
}

{
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1E1ABD318, (uint64_t)&protocol witness table for StringTransform, a3, 0, 0, 0, 1);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = MEMORY[0x1E0CB0338];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PropertyListTransform<Data>, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PropertyListTransform);
  v8 = v7;
  type metadata accessor for UserDefaultLocation<Data?>(0, &lazy cache variable for type metadata for UserDefaultLocation<Data?>, (unint64_t *)&lazy cache variable for type metadata for Data?, v6);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, v8, (uint64_t)&protocol witness table for PropertyListTransform<A>, a3, 0, 0xF000000000000000, 0, 0xB000000000000000);
}

_QWORD *AppStorage<A>.init<>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - v12;
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UserDefaultLocation<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  v15 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1E1AB4C30, (uint64_t)&protocol witness table for URLTransform, a3, (uint64_t)v9, 0, (uint64_t (*)(_QWORD))type metadata accessor for URL?, (void (*)(uint64_t, char *))outlined init with take of URL?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  return v15;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v19 - v12;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PropertyListTransform<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
  v15 = v14;
  v16 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UserDefaultLocation<Date?>, (uint64_t (*)(uint64_t))type metadata accessor for Date?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  v17 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, v15, (uint64_t)&protocol witness table for PropertyListTransform<A>, a3, (uint64_t)v9, 0, (uint64_t (*)(_QWORD))type metadata accessor for Date?, (void (*)(uint64_t, char *))outlined init with take of Date?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  return v17;
}

void AppStorage.init<A>(_:store:)()
{
  AppStorage.init<A>(_:store:)();
}

{
  AppStorage.init<A>(_:store:)();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for RawRepresentableTransform();
}

char *sub_18737B9A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v6, 1, 1, v1);
  v9 = specialized AppStorage.init(key:transform:store:defaultValue:)(v4, v3, a1, (uint64_t)&protocol witness table for RawRepresentableTransform<A, B>, v2, v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v5);
  return v9;
}

char *AppStorage<A>.init<A>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v20 - v15;
  v17 = type metadata accessor for JSONCodableTransform(0, a4, a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v16, 1, 1, a4);
  v18 = specialized AppStorage.init(key:transform:store:defaultValue:)(a1, a2, v17, (uint64_t)&protocol witness table for JSONCodableTransform<A>, a3, (uint64_t)v16, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return v18;
}

uint64_t AppStorage.objectWillChange.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = UserDefaultLocation.canonicalLocation.getter();
  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_retain();
  swift_release();
  return v1;
}

uint64_t key path setter for AppStorage.objectWillChange : <A>AppStorage<A>()
{
  uint64_t v0;

  v0 = swift_retain();
  return AppStorage.objectWillChange.setter(v0);
}

uint64_t AppStorage.objectWillChange.setter(uint64_t a1)
{
  UserDefaultLocation.canonicalLocation.getter();
  specialized UserDefaultLocation.observableObjectPublisher.setter(a1);
  swift_release();
  return swift_release();
}

uint64_t (*AppStorage.objectWillChange.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = AppStorage.objectWillChange.getter();
  return AppStorage.objectWillChange.modify;
}

uint64_t AppStorage.objectWillChange.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return AppStorage.objectWillChange.setter(*a1);
  v2 = swift_retain();
  AppStorage.objectWillChange.setter(v2);
  return swift_release();
}

uint64_t protocol witness for _ObservableObjectProperty.objectWillChange.getter in conformance AppStorage<A>()
{
  return AppStorage.objectWillChange.getter();
}

uint64_t (*protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance AppStorage<A>(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;

  a1[1] = v2;
  a1[2] = a2;
  *a1 = AppStorage.objectWillChange.getter();
  return protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance AppStorage<A>;
}

uint64_t protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance AppStorage<A>(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return AppStorage.objectWillChange.setter(*a1);
  v2 = swift_retain();
  AppStorage.objectWillChange.setter(v2);
  return swift_release();
}

uint64_t View.defaultAppStorage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultAppStorage(_:)(a1, a2, a3, (void (*)(void))MEMORY[0x1E0CE6DB0]);
}

uint64_t EnvironmentValues.defaultAppStorageDefaults.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.defaultAppStorageDefaults : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultAppStorageDefaults.getter();
  *a1 = result;
  return result;
}

void key path setter for EnvironmentValues.defaultAppStorageDefaults : EnvironmentValues(id *a1)
{
  id v1;

  v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);

}

uint64_t EnvironmentValues.defaultAppStorageDefaults.setter(void *a1)
{
  uint64_t v1;
  id v3;

  type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
  v3 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {

  }
  return swift_release();
}

uint64_t Scene.defaultAppStorage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultAppStorage(_:)(a1, a2, a3, (void (*)(void))Scene.environment<A>(_:_:));
}

uint64_t View.defaultAppStorage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_getKeyPath();
  a4();
  return swift_release();
}

void (*EnvironmentValues.defaultAppStorageDefaults.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[2] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *a1 = a1[1];
  return EnvironmentValues.defaultAppStorageDefaults.modify;
}

void EnvironmentValues.defaultAppStorageDefaults.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(id *)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
  v6 = v5;
  v7 = v6;
  if ((a2 & 1) != 0)
  {
    v8 = v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
}

id protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultAppStorageDefaultsKey@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DefaultAppStorageDefaultsKey()
{
  type metadata accessor for NSUserDefaults();
  return static NSObject.== infix(_:_:)() & 1;
}

double static PropertyListTransform.readValue(from:key:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  void *v6;
  id v7;
  double result;

  v6 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v7 = objc_msgSend(a1, sel_objectForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t static PropertyListTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  void *v23;
  uint64_t v24;
  _BYTE v26[32];

  v10 = type metadata accessor for Optional();
  v11 = MEMORY[0x1E0DEB940];
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v26[-v18];
  outlined init with copy of Any?(a1, (uint64_t)v26);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))v11);
  v20 = swift_dynamicCast();
  v21 = *(_QWORD *)(a5 - 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, v20 ^ 1u, 1, a5);
  v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, a5) == 1)
  {
    v23 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v23);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v15, v19, v10);
    if (v22(v15, 1, a5) == 1)
    {
      v24 = 0;
    }
    else
    {
      v24 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v15, a5);
    }
    v23 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v24, v23);
    swift_unknownObjectRelease();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v19, v10);
}

double protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance PropertyListTransform<A>@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return static PropertyListTransform.readValue(from:key:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance PropertyListTransform<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static PropertyListTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

double specialized static ScalarUserDefaultsValueTransform.readValue(from:key:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  double result;
  _OWORD v13[2];

  v8 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v9 = objc_msgSend(a1, sel_objectForKey_, v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v13);
    *(_QWORD *)(a4 + 24) = MEMORY[0x1E0DEAFA0];
    v10 = (void *)MEMORY[0x18D75CC88](a2, a3);
    v11 = objc_msgSend(a1, sel_BOOLForKey_, v10);

    *(_BYTE *)a4 = v11;
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    outlined destroy of Any?((uint64_t)v13);
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

void specialized static ScalarUserDefaultsValueTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  v8 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v9 = objc_msgSend(a1, sel_objectForKey_, v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v13);
    a4[3] = MEMORY[0x1E0DEB070];
    v10 = (void *)MEMORY[0x18D75CC88](a2, a3);
    objc_msgSend(a1, sel_doubleForKey_, v10);
    v12 = v11;

  }
  else
  {
    memset(v13, 0, sizeof(v13));
    outlined destroy of Any?((uint64_t)v13);
    a4[1] = 0;
    a4[2] = 0;
    v12 = 0;
    a4[3] = 0;
  }
  *a4 = v12;
}

{
  void *v8;
  id v9;
  void *v10;
  id v11;
  _OWORD v12[2];

  v8 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v9 = objc_msgSend(a1, sel_objectForKey_, v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v12);
    a4[3] = MEMORY[0x1E0DEB418];
    v10 = (void *)MEMORY[0x18D75CC88](a2, a3);
    v11 = objc_msgSend(a1, sel_integerForKey_, v10);

  }
  else
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    v11 = 0;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  *a4 = v11;
}

void specialized static ScalarUserDefaultsValueTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  char v9;
  _BYTE v10[32];

  outlined init with copy of Any?(a1, (uint64_t)v10);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast())
  {
    v10[0] = v9 & 1;
    v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v7, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
  }

}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];

  outlined init with copy of Any?(a1, (uint64_t)v10);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast())
  {
    v10[0] = v9;
    v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v7, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
  }

}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];

  outlined init with copy of Any?(a1, (uint64_t)v10);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast())
  {
    v10[0] = v9;
    v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v7, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
  }

}

double protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance StringTransform@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v6 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v7 = objc_msgSend(a1, sel_stringForKey_, v6);

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    *(_QWORD *)(a4 + 24) = MEMORY[0x1E0DEA968];
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v10;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

void static JSONCodableTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v8 = (void *)MEMORY[0x18D75CC88](a2, a3);
  v9 = objc_msgSend(a1, sel_dataForKey_, v8);

  if (v9)
  {
    v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(_QWORD *)(a5 + 24) = a4;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    outlined consume of Data._Representation(v10, v12);
  }
  else
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
}

uint64_t static JSONCodableTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Class isa;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _BYTE v30[32];

  v28 = a4;
  v29 = a2;
  v8 = type metadata accessor for Optional();
  v9 = MEMORY[0x1E0DEB940];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v27 - v12;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v30);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v19)
  {
    v20(v13, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a5);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v23 = v22;
    outlined copy of Data._Representation(v21, v22);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v21, v23);
    v25 = (void *)MEMORY[0x18D75CC88](a3, v28);
    objc_msgSend(v29, sel_setObject_forKey_, isa, v25);
    swift_release();
    swift_unknownObjectRelease();

    outlined consume of Data?(v21, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a5);
  }
  else
  {
    v20(v13, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  }
}

void protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance JSONCodableTransform<A>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static JSONCodableTransform.readValue(from:key:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

uint64_t protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance JSONCodableTransform<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static JSONCodableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

uint64_t static URLTransform.readValue(from:key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v23 - v15;
  v17 = (void *)MEMORY[0x18D75CC88](a2, a3, v14);
  v18 = objc_msgSend(a1, sel_URLForKey_, v17);

  if (v18)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = type metadata accessor for URL();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 0, 1, v19);
  }
  else
  {
    v19 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  }
  outlined init with take of URL?((uint64_t)v11, (uint64_t)v16);
  type metadata accessor for URL();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19) == 1)
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a4 + 24) = v19;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v20 + 32))(boxed_opaque_existential_1, v16, v19);
  }
  return result;
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;

  v7 = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<ToolbarLabelStyle>, (uint64_t)&type metadata for ToolbarLabelStyle, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1E1AF0B08, (uint64_t)&protocol witness table for ToolbarLabelStyleTransform, a4, v7, 0, 4);
}

uint64_t specialized static RawRepresentableTransform.readValue(from:key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;

  specialized static ScalarUserDefaultsValueTransform.readValue(from:key:)(a1, a2, a3, &v6);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v9 = result ^ 1;
    if ((unint64_t)(v8 - 5) > 3)
    {
      v6 = 0u;
      v7 = 0u;
    }
    else
    {
      *((_QWORD *)&v7 + 1) = &type metadata for ToolbarLabelStyle.Role;
      LOBYTE(v6) = v8 - 5;
    }
    return outlined init with take of Any?((uint64_t)&v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t static RawRepresentableTransform.readValue(from:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];

  v26 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a7 + 8))(v39, a1, a2, a3, a5, a7, v18);
  v21 = MEMORY[0x1E0DEE9B8] + 8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v20, v22 ^ 1u, 1, AssociatedTypeWitness);
  v35 = a4;
  v36 = a5;
  v37 = a6;
  v38 = a7;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v32 = partial apply for closure #1 in static RawRepresentableTransform.readValue(from:key:);
  v33 = &v34;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?), (uint64_t)v27, MEMORY[0x1E0DEDCE8], v21, v23, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v20, v16);
}

uint64_t closure #1 in static RawRepresentableTransform.readValue(from:key:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v8 - v6, a1, v4);
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

uint64_t specialized static RawRepresentableTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;

  outlined init with copy of Any?(a1, (uint64_t)&v9);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (swift_dynamicCast() && v8 != 4)
  {
    *((_QWORD *)&v10 + 1) = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v9 = v8 + 5;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  specialized static ScalarUserDefaultsValueTransform.writeValue(_:to:key:)((uint64_t)&v9, a2, a3, a4);
  return outlined destroy of Any?((uint64_t)&v9);
}

uint64_t static RawRepresentableTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v26 = a7;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v12 = type metadata accessor for Optional();
  v13 = MEMORY[0x1E0DEB940];
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v26 - v16;
  v18 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)&v30);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))v13);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v23)
  {
    v24(v17, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a5);
    *((_QWORD *)&v31 + 1) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
    dispatch thunk of RawRepresentable.rawValue.getter();
    (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(&v30, v27, v28, v29, a6, a8);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a5);
  }
  else
  {
    v24(v17, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
    v30 = 0u;
    v31 = 0u;
    (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(&v30, v27, v28, v29, a6, a8);
  }
  return outlined destroy of Any?((uint64_t)&v30);
}

uint64_t protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance RawRepresentableTransform<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  return static RawRepresentableTransform.readValue(from:key:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance RawRepresentableTransform<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return static RawRepresentableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5]);
}

double static ToolbarLabelStyleTransform.readValue(from:key:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char v6;
  __int128 v7;
  uint64_t v8;

  specialized static RawRepresentableTransform.readValue(from:key:)(a1, a2, a3, &v7);
  if (v8)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(_QWORD *)(a4 + 24) = &type metadata for ToolbarLabelStyle;
      *(_BYTE *)a4 = v6;
      return result;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v7);
  }
  result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t UserDefaultLocation.canonicalLocation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  if (*(_QWORD *)(v0 + v1))
    v0 = *(_QWORD *)(v0 + v1);
  else
    swift_retain();
  swift_retain();
  return v0;
}

void UserDefaultLocation.observableObjectPublisher.didset()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  objc_class *v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  BOOL v25;
  char *v26;
  char *v27;
  id v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;
  objc_super v33;

  v1 = *v0;
  v2 = *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 128));
  if (!v2)
  {
    v6 = *(_QWORD *)(v1 + 152);
    v7 = *(void **)((char *)v0 + v6);
    *(_QWORD *)((char *)v0 + v6) = 0;

    return;
  }
  v3 = *(void **)((char *)v0 + *(_QWORD *)(v1 + 152));
  if (v3)
  {
    v31[0] = *(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 128));
    v32 = 1;
    v4 = (uint64_t)v3 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
    swift_beginAccess();
    v5 = v3;
    swift_retain();
    outlined assign with take of UserDefaultObserver.Target((uint64_t)v31, v4);
    swift_endAccess();

    return;
  }
  v8 = (objc_class *)type metadata accessor for UserDefaultObserver();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v11 = &v9[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target];
  *(_QWORD *)v11 = v2;
  v11[16] = 1;
  v33.receiver = v9;
  v33.super_class = v8;
  swift_retain_n();
  v12 = objc_msgSendSuper2(&v33, sel_init);
  v13 = *(_QWORD *)(*v0 + 152);
  v14 = *(void **)((char *)v0 + v13);
  *(_QWORD *)((char *)v0 + v13) = v12;

  v15 = *(char **)((char *)v0 + *(_QWORD *)(*v0 + 152));
  if (!v15)
  {
    __break(1u);
    return;
  }
  v16 = UserDefaultLocation.store.getter();
  v18 = v0[2];
  v17 = v0[3];
  v19 = &v15[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  v20 = *(void **)&v15[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (!v20)
  {
    v27 = v15;
    goto LABEL_16;
  }
  v30 = v0[2];
  v22 = *((_QWORD *)v19 + 1);
  v21 = *((_QWORD *)v19 + 2);
  type metadata accessor for NSUserDefaults();
  v23 = v15;
  v24 = v20;
  swift_bridgeObjectRetain();
  if ((static NSObject.== infix(_:_:)() & 1) == 0
    || (v30 == v22 ? (v25 = v21 == v17) : (v25 = 0), !v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    UserDefaultObserver.unobserve(oldDefaults:key:)(v24, v22, v21);
    swift_bridgeObjectRelease();
    *(_QWORD *)(swift_allocObject() + 16) = v23;
    v26 = v23;
    static Update.enqueueAction(_:)();

    swift_release();
    v18 = v30;
LABEL_16:
    v31[0] = 46;
    v31[1] = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    {
      v28 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      objc_msgSend(v28, sel_addObserver_selector_name_object_, v15, sel_userDefaultsDidChange_, *MEMORY[0x1E0CB3420], v16);
    }
    else
    {
      v28 = (id)MEMORY[0x18D75CC88](v18, v17);
      objc_msgSend(v16, sel_addObserver_forKeyPath_options_context_, v15, v28, 0, &static UserDefaultObserver.observationContext);
    }

    v29 = *(void **)v19;
    *(_QWORD *)v19 = v16;
    *((_QWORD *)v19 + 1) = v18;
    *((_QWORD *)v19 + 2) = v17;
    v16 = v16;
    swift_bridgeObjectRetain();
    outlined consume of UserDefaultObserver.State(v29);

    goto LABEL_20;
  }

  swift_bridgeObjectRelease();
LABEL_20:

  swift_release();
}

uint64_t UserDefaultLocation.cachedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UserDefaultLocation.cachedValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

void UserDefaultLocation.defaultStore.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = a1;

}

void UserDefaultLocation.observer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = a1;

}

uint64_t UserDefaultLocation.wasRead.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_beginAccess();
  return *v1;
}

uint64_t UserDefaultLocation.wasRead.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 160));
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*UserDefaultLocation.wasRead.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t UserDefaultLocation.changeSignal.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 168));
}

uint64_t UserDefaultLocation.changeSignal.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 168);
  *(_QWORD *)v3 = result;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  return result;
}

id UserDefaultLocation.store.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  if (v1)
  {
    v2 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  }
  else
  {
    v2 = *(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
    v1 = 0;
  }
  v3 = v1;
  return v2;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 80) = 2;
  *(_QWORD *)(v7 + 88) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v7 + 96) = 0;
  *(_BYTE *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 108) = 0;
  *(_BYTE *)(v7 + 116) = 1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_BYTE *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a7;
  return v7;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  *(_QWORD *)(v7 + 96) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 116) = 0;
  *(_BYTE *)(v7 + 124) = 1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a7;
  return v7;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  *(_QWORD *)(v7 + 96) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 116) = 0;
  *(_BYTE *)(v7 + 124) = 1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(double *)(v7 + 48) = a7;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a6;
  return v7;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_BYTE *)(v8 + 132) = 1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 72) = a8;
  return v8;
}

_QWORD *specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD))
{
  _QWORD *v8;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 + 128)) = 0;
  v15 = (char *)v8 + *(_QWORD *)(*v8 + 136);
  v16 = a8(0);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v18 = *(_QWORD *)(*v8 + 144);
  *(_QWORD *)((char *)v8 + v18) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 + 152)) = 0;
  *((_BYTE *)v8 + *(_QWORD *)(*v8 + 160)) = 0;
  v19 = (char *)v8 + *(_QWORD *)(*v8 + 168);
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 + 112)) = a5;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))((char *)v8 + *(_QWORD *)(*v8 + 104), a6, v16);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 + 120)) = a7;
  return v8;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_WORD *)(v8 + 96) = 256;
  *(_QWORD *)(v8 + 104) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_BYTE *)(v8 + 132) = 1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a6;
  *(_BYTE *)(v8 + 56) = a7 & 1;
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 72) = a8;
  return v8;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = a9;
  *(_QWORD *)(v9 + 104) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 124) = 0;
  *(_BYTE *)(v9 + 132) = 1;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 48) = a6;
  *(_QWORD *)(v9 + 56) = a7;
  *(_QWORD *)(v9 + 64) = a5;
  *(_QWORD *)(v9 + 72) = a8;
  return v9;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 88) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 108) = 0;
  *(_BYTE *)(v8 + 116) = 1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_BYTE *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a7;
  return v8;
}

_QWORD *specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization, (void (*)(uint64_t, char *))outlined init with take of TabSidebarCustomization);
}

{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization, (void (*)(uint64_t, char *))outlined init with take of TabViewCustomization);
}

_QWORD *specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), void (*a9)(uint64_t, char *))
{
  _QWORD *v9;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 + 128)) = 0;
  v17 = (char *)v9 + *(_QWORD *)(*v9 + 136);
  v18 = a8(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = *(_QWORD *)(*v9 + 144);
  *(_QWORD *)((char *)v9 + v19) = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 + 152)) = 0;
  *((_BYTE *)v9 + *(_QWORD *)(*v9 + 160)) = 0;
  v20 = (char *)v9 + *(_QWORD *)(*v9 + 168);
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 + 112)) = a5;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  a9(a6, (char *)v9 + *(_QWORD *)(*v9 + 104));
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 + 120)) = a7;
  return v9;
}

char *UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v14 = *(_QWORD *)v7;
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 128)] = 0;
  v15 = *(_QWORD *)(v14 + 80);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(&v7[*(_QWORD *)(*(_QWORD *)v7 + 136)], 1, 1, v15);
  v17 = *(_QWORD *)(*(_QWORD *)v7 + 144);
  *(_QWORD *)&v7[v17] = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 152)] = 0;
  v7[*(_QWORD *)(*(_QWORD *)v7 + 160)] = 0;
  v18 = &v7[*(_QWORD *)(*(_QWORD *)v7 + 168)];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 112)] = a5;
  *((_QWORD *)v7 + 2) = a1;
  *((_QWORD *)v7 + 3) = a2;
  *((_QWORD *)v7 + 4) = a3;
  *((_QWORD *)v7 + 5) = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v7[*(_QWORD *)(*(_QWORD *)v7 + 104)], a6, v15);
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 120)] = a7;
  return v7;
}

char *UserDefaultLocation.copy()(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *((_QWORD *)v2 + 2);
  v8 = *((_QWORD *)v2 + 3);
  v9 = *((_QWORD *)v2 + 4);
  v10 = *((_QWORD *)v2 + 5);
  v11 = UserDefaultLocation.store.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, &v2[*(_QWORD *)(*(_QWORD *)v2 + 104)], v3);
  v14 = *(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 120)];
  if (!v14)
  {
    swift_retain();
    v14 = (uint64_t)v2;
  }
  type metadata accessor for UserDefaultLocation(0, v3, v12, v13);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  return UserDefaultLocation.init(key:transform:store:defaultValue:base:)(v7, v8, v9, v10, (uint64_t)v11, (uint64_t)v6, v14);
}

uint64_t UserDefaultLocation.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void (*v25)(uint64_t *__return_ptr, id, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[4];

  v3 = v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v7 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v33 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v33 - v17;
  type metadata accessor for GraphHost();
  if ((static GraphHost.isUpdating.getter() & 1) != 0 && (a1 & 1) != 0)
  {
    v19 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 160)];
    swift_beginAccess();
    *v19 = 1;
  }
  UserDefaultLocation.cachedValue.getter((uint64_t)v18);
  v20 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v6) == 1)
  {
    v33 = v10;
    v21 = a2;
    v22 = *((_QWORD *)v3 + 4);
    v23 = *((_QWORD *)v3 + 5);
    v24 = UserDefaultLocation.store.getter();
    v25 = *(void (**)(uint64_t *__return_ptr, id, _QWORD, _QWORD, uint64_t, uint64_t))(v23 + 8);
    v26 = v23;
    a2 = v21;
    v25(v36, v24, *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3), v22, v26);

    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v27 = swift_dynamicCast();
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v29 = v34;
    v30 = v35;
    if (v27)
    {
      v28(v14, 0, 1, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v21, v14, v6);
      result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v18, v30);
    }
    else
    {
      v28(v14, 1, 1, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v21, &v3[*(_QWORD *)(*(_QWORD *)v3 + 104)], v6);
      v32 = *(void (**)(char *, uint64_t))(v29 + 8);
      v32(v14, v30);
      result = ((uint64_t (*)(char *, uint64_t))v32)(v18, v30);
    }
    v10 = v33;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a2, v18, v6);
  }
  if ((v3[*(_QWORD *)(*(_QWORD *)v3 + 168) + 8] & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v10, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v10, 0, 1, v6);
    return UserDefaultLocation.cachedValue.setter((uint64_t)v10);
  }
  return result;
}

uint64_t UserDefaultLocation.get()@<X0>(uint64_t a1@<X8>)
{
  return UserDefaultLocation.getValue(forReading:)(0, a1);
}

uint64_t UserDefaultLocation.set(_:transaction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)))
  {
    swift_retain();
    ObservableObjectPublisher.send()();
    swift_release();
  }
  v1 = Transaction.current.getter();
  MEMORY[0x1E0C80A78](v1, v2);
  withTransaction<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in UserDefaultLocation.set(_:transaction:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, double);
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  id v15;
  uint64_t v17[4];

  v4 = *(_QWORD *)(*a1 + 80);
  v5 = type metadata accessor for Optional();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)v17 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v11((char *)v17 - v8, a2, v4, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v4);
  UserDefaultLocation.cachedValue.setter((uint64_t)v9);
  v12 = a1[4];
  v13 = a1[5];
  v17[3] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v11)(boxed_opaque_existential_1, a2, v4);
  v15 = UserDefaultLocation.store.getter();
  (*(void (**)(uint64_t *, id, _QWORD, _QWORD, uint64_t, uint64_t))(v13 + 16))(v17, v15, a1[2], a1[3], v12, v13);

  return outlined destroy of Any?((uint64_t)v17);
}

uint64_t UserDefaultLocation.update()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;

  v3 = *v1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(*v1 + 168) + 8) & 1) != 0
    || AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
  {
    v4 = (char *)v1 + *(_QWORD *)(v3 + 160);
    v5 = 1;
    swift_beginAccess();
    *v4 = 1;
  }
  else
  {
    AGGraphGetValue();
    v5 = v6 & 1;
  }
  UserDefaultLocation.getValue(forReading:)(0, a1);
  return v5;
}

BOOL static UserDefaultLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *UserDefaultLocation.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104), *(_QWORD *)(v1 + 80));

  swift_release();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);

  v4 = *(_QWORD *)(*v0 + 120);
  v5 = *(uint64_t *)((char *)v0 + v4);
  *(uint64_t *)((char *)v0 + v4) = 0;
  if (v5)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v6 = *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 120));
      swift_retain();
      swift_release();
      v5 = v6;
    }
    while (v6);
  }
  swift_release();
  return v0;
}

uint64_t UserDefaultLocation.__deallocating_deinit()
{
  UserDefaultLocation.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Location.wasRead.getter in conformance UserDefaultLocation<A>()
{
  return UserDefaultLocation.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance UserDefaultLocation<A>(char a1)
{
  return UserDefaultLocation.wasRead.setter(a1);
}

void (*protocol witness for Location.wasRead.modify in conformance UserDefaultLocation<A>(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = UserDefaultLocation.wasRead.modify();
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

uint64_t protocol witness for Location.get() in conformance UserDefaultLocation<A>@<X0>(uint64_t a1@<X8>)
{
  return UserDefaultLocation.get()(a1);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance UserDefaultLocation<A>()
{
  return UserDefaultLocation.set(_:transaction:)();
}

uint64_t protocol witness for Location.update() in conformance UserDefaultLocation<A>(uint64_t a1)
{
  return UserDefaultLocation.update()(a1) & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UserDefaultLocation<A>(uint64_t *a1, uint64_t *a2)
{
  return static UserDefaultLocation.== infix(_:_:)(*a1, *a2);
}

uint64_t UserDefaultPropertyBox.update(property:phase:)(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t WeakValue;
  uint64_t v27;
  char *v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v38;
  char **v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[8];
  char v44[8];
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[2];
  char v49;

  v41 = *(_QWORD *)(a3 + 16);
  v5 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v5, v6);
  v39 = a1;
  v40 = (char *)&v38 - v7;
  v8 = (_QWORD *)UserDefaultLocation.canonicalLocation.getter();
  v42 = v3;
  v9 = *(char **)(v3 + 8);
  v10 = *(_QWORD *)(AGGraphGetValue() + 8);
  swift_retain();
  swift_retain();
  type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  if (v10)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v11 = *(_QWORD *)(*v8 + 144);
  v12 = *(void **)((char *)v8 + v11);
  *(_QWORD *)((char *)v8 + v11) = v48[0];

  v13 = UserDefaultLocation.store.getter();
  v15 = v8[2];
  v14 = v8[3];
  v16 = &v9[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  v17 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (v17)
  {
    v19 = *((_QWORD *)v16 + 1);
    v18 = *((_QWORD *)v16 + 2);
    type metadata accessor for NSUserDefaults();
    swift_bridgeObjectRetain();
    outlined copy of UserDefaultObserver.State(v17);
    if ((static NSObject.== infix(_:_:)() & 1) != 0
      && (v15 == v19 && v18 == v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v42;
      goto LABEL_16;
    }
    UserDefaultObserver.unobserve(oldDefaults:key:)(v17, v19, v18);
    swift_bridgeObjectRelease();
    *(_QWORD *)(swift_allocObject() + 16) = v9;
    v21 = v9;
    static Update.enqueueAction(_:)();

    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v48[0] = v15;
  v48[1] = v14;
  v46 = 46;
  v47 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v22 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v22, sel_addObserver_selector_name_object_, v9, sel_userDefaultsDidChange_, *MEMORY[0x1E0CB3420], v13);
  }
  else
  {
    v22 = (id)MEMORY[0x18D75CC88](v15, v14);
    objc_msgSend(v13, sel_addObserver_forKeyPath_options_context_, v9, v22, 0, &static UserDefaultObserver.observationContext);
  }
  v20 = v42;

  v23 = *(void **)v16;
  *(_QWORD *)v16 = v13;
  *((_QWORD *)v16 + 1) = v15;
  *((_QWORD *)v16 + 2) = v14;
  outlined consume of UserDefaultObserver.State(v23);
LABEL_16:
  v24 = *(_QWORD *)(v20 + 8) + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
  swift_beginAccess();
  outlined init with copy of UserDefaultObserver.Target(v24, (uint64_t)v48);
  if ((v49 & 1) != 0)
  {
    outlined destroy of UserDefaultObserver.Target((uint64_t)v48);
    v25 = 0;
  }
  else
  {
    outlined init with take of UserDefaultObserver.Target.GraphAttribute((uint64_t)v48, (uint64_t)v43);
    outlined destroy of weak AnyGestureResponder?((uint64_t)v43);
    WeakValue = AGGraphGetWeakValue();
    v25 = 0;
    if (WeakValue && (v27 & 1) != 0)
    {
      if ((*(_BYTE *)(v20 + 16) & 1) != 0)
      {
        *(_BYTE *)(v20 + 16) = 0;
      }
      else
      {
        v28 = UserDefaultLocation.copy()(WeakValue, v27);
        v29 = v39;
        swift_release();
        *v29 = v28;
      }
      v30 = (uint64_t)v40;
      v25 = 1;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1);
      UserDefaultLocation.cachedValue.setter(v30);
    }
  }
  v31 = *(_QWORD *)(v20 + 8) + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
  swift_beginAccess();
  outlined init with copy of UserDefaultObserver.Target(v31, (uint64_t)v48);
  v32 = v49;
  if ((v49 & 1) != 0)
  {
    outlined destroy of UserDefaultObserver.Target((uint64_t)v48);
    v33 = 0;
  }
  else
  {
    outlined init with take of UserDefaultObserver.Target.GraphAttribute((uint64_t)v48, (uint64_t)v44);
    v33 = v45;
    outlined destroy of weak AnyGestureResponder?((uint64_t)v44);
  }
  v34 = (char *)v8 + *(_QWORD *)(*v8 + 168);
  *(_QWORD *)v34 = v33;
  v34[8] = v32;
  if (v25)
  {
    v35 = (unsigned __int8 *)v8 + *(_QWORD *)(*v8 + 160);
    swift_beginAccess();
    v36 = *v35;
  }
  else
  {
    v36 = 0;
  }
  swift_release();
  return v36;
}

void UserDefaultPropertyBox.reset()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v2 = a2 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state;
  v3 = *(void **)(a2 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state);
  if (v3)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
    v6 = v3;
    swift_bridgeObjectRetain();
    UserDefaultObserver.unobserve(oldDefaults:key:)(v6, v5, v4);

    swift_bridgeObjectRelease();
  }
}

void protocol witness for DynamicPropertyBox.reset() in conformance UserDefaultPropertyBox<A>()
{
  unsigned int *v0;

  UserDefaultPropertyBox.reset()(*v0, *((_QWORD *)v0 + 1));
}

uint64_t closure #1 in closure #1 in UserDefaultObserver.Target.GraphAttribute.send()(uint64_t result)
{
  if (result)
  {
    static Transaction.current.getter();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    return swift_release();
  }
  return result;
}

uint64_t UserDefaultObserver.Target.send()()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  outlined init with copy of UserDefaultObserver.Target(v0, (uint64_t)v6);
  if ((v7 & 1) != 0)
  {
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  else
  {
    outlined init with take of UserDefaultObserver.Target.GraphAttribute((uint64_t)v6, (uint64_t)v4);
    Strong = swift_weakLoadStrong();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = Strong;
    *(_QWORD *)(v3 + 24) = v5;
    swift_retain();
    onMainThread(do:)();
    swift_release();
    swift_release();
    return outlined destroy of weak AnyGestureResponder?((uint64_t)v4);
  }
}

void *UserDefaultObserver.unobserve(oldDefaults:key:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  _QWORD *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;

  v4 = v3;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    v8 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter, 46, 0xE100000000000000, a2, a3);
    objc_msgSend(v8, sel_removeObserver_name_object_, v4, *MEMORY[0x1E0CB3420], a1, v12, v13, v15, v17);
  }
  else
  {
    v8 = (id)MEMORY[0x18D75CC88](a2, a3);
    objc_msgSend(a1, sel_removeObserver_forKeyPath_context_, v4, v8, &static UserDefaultObserver.observationContext, 46, 0xE100000000000000, a2, a3);
  }

  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state);
  v10 = *(void **)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  return outlined consume of UserDefaultObserver.State(v10);
}

id UserDefaultObserver.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = &v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  v3 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (v3)
  {
    v5 = *((_QWORD *)v2 + 1);
    v4 = *((_QWORD *)v2 + 2);
    v6 = v3;
    swift_bridgeObjectRetain();
    UserDefaultObserver.unobserve(oldDefaults:key:)(v6, v5, v4);

    swift_bridgeObjectRelease();
  }
  v8.receiver = v0;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_dealloc);
}

void UserDefaultObserver.userDefaultsDidChange(_:)()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  id v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t v18;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  v3 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (v3)
  {
    v5 = *((_QWORD *)v2 + 1);
    v4 = *((_QWORD *)v2 + 2);
    outlined copy of UserDefaultObserver.State(v3);
    v6 = v3;
    Notification.object.getter();
    v7 = v18;
    if (v18)
    {
      v8 = __swift_project_boxed_opaque_existential_1(v17, v18);
      v9 = *(_QWORD *)(v7 - 8);
      v10 = MEMORY[0x1E0C80A78](v8, v8);
      v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v9 + 16))(v12, v10);
      v13 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

      swift_unknownObjectRelease();
      if ((id)v13 == v6)
      {
        v17[0] = v5;
        v17[1] = v4;
        v16[0] = 46;
        v16[1] = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v14 = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
        {
          *(_QWORD *)(swift_allocObject() + 16) = v1;
          v15 = v1;
          static Update.enqueueAction(_:)();
          swift_release();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t closure #1 in UserDefaultObserver.noteDefaultChange()(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[24];

  v1 = a1 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
  swift_beginAccess();
  outlined init with copy of UserDefaultObserver.Target(v1, (uint64_t)v3);
  UserDefaultObserver.Target.send()();
  return outlined destroy of UserDefaultObserver.Target((uint64_t)v3);
}

char *specialized AppStorage.init(key:transform:store:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v14 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UserDefaultLocation(0, v19, v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a6, a7);
  swift_allocObject();
  return UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, (uint64_t)v16, 0);
}

uint64_t specialized AppStorage.wrappedValue.setter()
{
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.set(_:transaction:)();
  return swift_release();
}

uint64_t type metadata accessor for UserDefaultLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultLocation);
}

uint64_t specialized UserDefaultPropertyBox.init(host:environment:signal:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v5;
  objc_class *v6;
  char *v7;
  char *v8;
  objc_super v10;
  char v11[8];
  int v12;
  int v13;
  char v14;

  v3 = a3;
  v5 = HIDWORD(a3);
  v6 = (objc_class *)type metadata accessor for UserDefaultObserver();
  v7 = (char *)objc_allocWithZone(v6);
  v8 = &v7[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  swift_weakInit();
  v12 = v3;
  v13 = v5;
  v14 = 0;
  outlined init with take of UserDefaultObserver.Target((uint64_t)v11, (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target]);
  v10.receiver = v7;
  v10.super_class = v6;
  objc_msgSendSuper2(&v10, sel_init);
  return a2;
}

void specialized static AppStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for GraphHost();
  v5 = MEMORY[0x18D75C118]();
  v6 = _GraphInputs.environment.getter();
  v7 = AGCreateWeakAttribute();
  specialized UserDefaultPropertyBox.init(host:environment:signal:)(v5, v6, v7);
  v9 = v8;
  swift_release();
  v12 = type metadata accessor for UserDefaultPropertyBox(0, a4, v10, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UserDefaultPropertyBox<A>, v12);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  type metadata accessor for AppStorage(0, a4, v13, v14);
  static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();

}

void type metadata accessor for RawRepresentableTransform()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for UserDefaultLocation<Data?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v9 = type metadata accessor for UserDefaultLocation(a1, v6, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void specialized UserDefaultLocation.observableObjectPublisher.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128)) = a1;
  swift_retain();
  swift_release();
  UserDefaultLocation.observableObjectPublisher.didset();
}

uint64_t sub_187380070@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultAppStorageDefaults.getter();
  *a1 = result;
  return result;
}

void sub_1873800A8(id *a1)
{
  id v1;

  v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);

}

void type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
  }
}

uint64_t partial apply for closure #1 in UserDefaultLocation.set(_:transaction:)()
{
  uint64_t v0;

  return closure #1 in UserDefaultLocation.set(_:transaction:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void base witness table accessor for Equatable in UserDefaultLocation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187380164@<X0>(uint64_t a1@<X8>)
{
  return AppStorage.wrappedValue.getter(a1);
}

uint64_t sub_18738016C()
{
  return specialized AppStorage.wrappedValue.setter();
}

uint64_t sub_18738017C()
{
  return 8;
}

_QWORD *sub_187380188(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_187380194@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AppStorage.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1873801C0()
{
  return 8;
}

uint64_t sub_1873801CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = UserDefaultLocation.wasRead.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1873801F8(char *a1)
{
  return UserDefaultLocation.wasRead.setter(*a1);
}

uint64_t sub_18738021C()
{
  return 8;
}

uint64_t type metadata accessor for AppStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStorage);
}

uint64_t type metadata completion function for UserDefaultLocation()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return v0;
}

uint64_t method lookup function for UserDefaultLocation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UserDefaultLocation.wasRead.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of UserDefaultLocation.wasRead.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of UserDefaultLocation.wasRead.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of UserDefaultLocation.get()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of UserDefaultLocation.set(_:transaction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of UserDefaultLocation.update()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t type metadata accessor for UserDefaultObserver()
{
  return objc_opt_self();
}

uint64_t sub_187380388(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<NSUserDefaults>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NSUserDefaults> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<NSUserDefaults>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<NSUserDefaults>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NSUserDefaults>, (uint64_t (*)(uint64_t))type metadata accessor for NSUserDefaults, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
}

unint64_t type metadata accessor for NSUserDefaults()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  }
  return result;
}

uint64_t sub_187380460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<NSUserDefaults>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t destroy for UserDefaultObserver.Target(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return swift_release();
  else
    return swift_weakDestroy();
}

uint64_t initializeWithCopy for UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char v5;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
    v5 = 1;
  }
  else
  {
    swift_weakCopyInit();
    v5 = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_release();
    else
      swift_weakDestroy();
    v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 16) = 1;
      swift_retain();
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = 0;
    }
  }
  return a1;
}

uint64_t initializeWithTake for UserDefaultObserver.Target(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  char v4;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    v4 = 1;
  }
  else
  {
    result = swift_weakTakeInit();
    v4 = 0;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  }
  *(_BYTE *)(result + 16) = v4;
  return result;
}

uint64_t assignWithTake for UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_release();
    else
      swift_weakDestroy();
    v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      swift_weakTakeInit();
      v6 = 0;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + 16) = v6;
  }
  return a1;
}

void *type metadata accessor for UserDefaultObserver.Target()
{
  return &unk_1E1AD1188;
}

id *destroy for UserDefaultObserver.State(id *result)
{
  if ((unint64_t)*result >= 0xFFFFFFFF)
  {

    return (id *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UserDefaultObserver.State(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for UserDefaultObserver.State(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  __int128 v8;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      v7 = v5;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v8 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v8;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UserDefaultObserver.State(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDefaultObserver.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UserDefaultObserver.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for UserDefaultObserver.State(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

void *type metadata accessor for UserDefaultObserver.State()
{
  return &unk_1E1AD1078;
}

void *type metadata accessor for ToolbarLabelStyleTransform()
{
  return &unk_1E1AF0B08;
}

ValueMetadata *type metadata accessor for DefaultAppStorageDefaultsKey()
{
  return &type metadata for DefaultAppStorageDefaultsKey;
}

void *type metadata accessor for URLTransform()
{
  return &unk_1E1AB4C30;
}

void *type metadata accessor for StringTransform()
{
  return &unk_1E1ABD318;
}

void *type metadata accessor for DoubleTransform()
{
  return &unk_1E1ABAD50;
}

void *type metadata accessor for IntegerTransform()
{
  return &unk_1E1ABF380;
}

void *type metadata accessor for BoolTransform()
{
  return &unk_1E1AB53C8;
}

void specialized static StringTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  _BYTE v9[24];
  uint64_t v10;

  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
    goto LABEL_6;
  }
  v7 = (void *)MEMORY[0x18D75CC88]();
  swift_bridgeObjectRelease();
  v8 = (void *)MEMORY[0x18D75CC88](a3, a4);
  objc_msgSend(a2, sel_setObject_forKey_, v7, v8);

LABEL_6:
}

void specialized static URLTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  NSURL *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _BYTE v23[24];
  uint64_t v24;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = &v23[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any?(a1, (uint64_t)v23);
  if (v24)
  {
    v17 = swift_dynamicCast();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, v17 ^ 1u, 1, v12);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v16, v11, v12);
      URL._bridgeToObjectiveC()(v18);
      v20 = v19;
      v21 = (void *)MEMORY[0x18D75CC88](a3, a4);
      objc_msgSend(a2, sel_setURL_forKey_, v20, v21);

      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v23);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  v22 = (void *)MEMORY[0x18D75CC88](a3, a4);
  objc_msgSend(a2, sel_removeObjectForKey_, v22);

}

uint64_t partial apply for closure #1 in static RawRepresentableTransform.readValue(from:key:)(uint64_t a1)
{
  return closure #1 in static RawRepresentableTransform.readValue(from:key:)(a1);
}

uint64_t specialized static ToolbarLabelStyleTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  __int128 v9;
  __int128 v10;

  outlined init with copy of Any?(a1, (uint64_t)&v9);
  if (!*((_QWORD *)&v10 + 1))
  {
    outlined destroy of Any?((uint64_t)&v9);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v9 = 0u;
    v10 = 0u;
    goto LABEL_6;
  }
  *((_QWORD *)&v10 + 1) = &type metadata for ToolbarLabelStyle.Role;
  LOBYTE(v9) = v8;
LABEL_6:
  specialized static RawRepresentableTransform.writeValue(_:to:key:)((uint64_t)&v9, a2, a3, a4);
  return outlined destroy of Any?((uint64_t)&v9);
}

void *outlined copy of UserDefaultObserver.State(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_187380E08()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UserDefaultObserver.noteDefaultChange()()
{
  uint64_t v0;

  return closure #1 in UserDefaultObserver.noteDefaultChange()(*(_QWORD *)(v0 + 16));
}

uint64_t outlined init with copy of UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UserDefaultObserver.Target(a2, a1);
  return a2;
}

uint64_t outlined destroy of UserDefaultObserver.Target(uint64_t a1)
{
  destroy for UserDefaultObserver.Target(a1);
  return a1;
}

uint64_t outlined init with take of UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  swift_weakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_187380ECC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UserDefaultObserver.Target.GraphAttribute.send()()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in UserDefaultObserver.Target.GraphAttribute.send()()
{
  uint64_t v0;

  return closure #1 in closure #1 in UserDefaultObserver.Target.GraphAttribute.send()(*(_QWORD *)(v0 + 16));
}

void specialized UserDefaultObserver.observeValue(forKeyPath:of:change:context:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v4;
  char *v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  id v19;
  char v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;

  if (a4)
  {
    if (a4 == &static UserDefaultObserver.observationContext)
    {
      v5 = &v4[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
      v6 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
      if (v6)
      {
        v10 = *((_QWORD *)v5 + 1);
        v9 = *((_QWORD *)v5 + 2);
        outlined init with copy of Any?(a3, (uint64_t)v24);
        v11 = v25;
        if (v25)
        {
          v12 = __swift_project_boxed_opaque_existential_1(v24, v25);
          v13 = *(_QWORD *)(v11 - 8);
          v14 = MEMORY[0x1E0C80A78](v12, v12);
          v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v13 + 16))(v16, v14);
          outlined copy of UserDefaultObserver.State(v6);
          v17 = v6;
          v18 = _bridgeAnythingToObjectiveC<A>(_:)();
          v23 = v10;
          v19 = (id)v18;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);

          swift_unknownObjectRelease();
          if (v19 == v17 && a2)
          {
            if (v23 == a1 && v9 == a2)
            {
              swift_bridgeObjectRelease();
LABEL_14:
              *(_QWORD *)(swift_allocObject() + 16) = v4;
              v21 = v4;
              static Update.enqueueAction(_:)();
              swift_release();
              goto LABEL_7;
            }
            v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v20 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
LABEL_7:

        }
      }
    }
  }
}

void *outlined consume of UserDefaultObserver.State(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of TabViewCustomization(uint64_t a1, uint64_t a2)
{
  return outlined init with take of TableCellFormula(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
}

uint64_t outlined init with take of TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  return outlined init with take of TableCellFormula(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for TabSidebarCustomization);
}

uint64_t outlined assign with take of UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  assignWithTake for UserDefaultObserver.Target(a2, a1);
  return a2;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  return outlined init with take of TableCellFormula(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
}

uint64_t type metadata accessor for UserDefaultPropertyBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultPropertyBox);
}

uint64_t outlined init with take of UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  initializeWithTake for UserDefaultObserver.Target(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for UserDefaultPropertyBox(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = v3;
  return a1;
}

void destroy for UserDefaultPropertyBox(uint64_t a1)
{

}

uint64_t assignWithCopy for UserDefaultPropertyBox(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for UserDefaultPropertyBox(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t initializeWithCopy for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t initializeWithTake for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_weakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

double assignWithTake for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = swift_weakTakeAssign();
  result = *(double *)(a2 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

void *type metadata accessor for UserDefaultObserver.Target.GraphAttribute()
{
  return &unk_1E1AD1108;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in UserDefaultPropertyBox<A>()
{
  return &protocol witness table for AppStorage<A>;
}

ValueMetadata *type metadata accessor for _NavigationDestinationCollection()
{
  return &type metadata for _NavigationDestinationCollection;
}

ValueMetadata *type metadata accessor for NavigationDestinationOutputs()
{
  return &type metadata for NavigationDestinationOutputs;
}

ValueMetadata *type metadata accessor for NavigationDestinationInputs()
{
  return &type metadata for NavigationDestinationInputs;
}

ValueMetadata *type metadata accessor for NavigationDestinationKey()
{
  return &type metadata for NavigationDestinationKey;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationDestinationKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static NavigationDestinationKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[104];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[56];
  uint64_t v21;
  uint64_t v22;

  outlined init with copy of EnumeratedSequence<_VariadicView_Children>(v2, (uint64_t)v20);
  v21 = 0;
  v22 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    v6 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      result = _VariadicView_Children.endIndex.getter();
      if (v6 < 0 || v6 >= result)
        break;
      v21 = v6 + 1;
      v16 = *(_OWORD *)&v13[32];
      v17 = *(_OWORD *)&v13[48];
      v18 = *(_OWORD *)&v13[64];
      v19 = *(_OWORD *)&v13[80];
      v14 = *(_OWORD *)v13;
      v15 = *(_OWORD *)&v13[16];
      v8 = v22;
      if (__OFADD__(v22, 1))
        goto LABEL_13;
      ++v22;
      *(_OWORD *)&v13[40] = v16;
      *(_OWORD *)&v13[56] = v17;
      *(_OWORD *)&v13[72] = v18;
      *(_OWORD *)&v13[88] = v19;
      *(_OWORD *)&v13[8] = v14;
      *(_OWORD *)&v13[24] = v15;
      *(_QWORD *)v13 = v8;
      v9 = a1(v13);
      if (v3)
      {
        outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)v13);
        return outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v20, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC48]);
      }
      if ((v9 & 1) != 0)
      {
        result = outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v20, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC48]);
        v10 = *(_OWORD *)&v13[80];
        *(_OWORD *)(a2 + 64) = *(_OWORD *)&v13[64];
        *(_OWORD *)(a2 + 80) = v10;
        *(_QWORD *)(a2 + 96) = *(_QWORD *)&v13[96];
        v11 = *(_OWORD *)&v13[16];
        *(_OWORD *)a2 = *(_OWORD *)v13;
        *(_OWORD *)(a2 + 16) = v11;
        v12 = *(_OWORD *)&v13[48];
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v13[32];
        *(_OWORD *)(a2 + 48) = v12;
        return result;
      }
      outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)v13);
      v6 = v21;
      if (v6 == _VariadicView_Children.endIndex.getter())
        goto LABEL_9;
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_9:
    result = outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v20, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC48]);
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  id v29;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UISceneSession and conformance NSObject, &lazy cache variable for type metadata for UISceneSession);
    Set.Iterator.init(_cocoa:)();
    v5 = v24;
    v23 = v25;
    v7 = v26;
    v8 = v27;
    v9 = v28;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v23 = a3 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v7 = v11;
    v8 = 0;
  }
  v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_36;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v14 = v29;
  swift_unknownObjectRelease();
  v15 = v8;
  v16 = v9;
  if (!v14)
    goto LABEL_36;
  while (1)
  {
    v29 = v14;
    v20 = a1(&v29);
    if (v4)
    {

      goto LABEL_36;
    }
    if ((v20 & 1) != 0)
      goto LABEL_36;

    v8 = v15;
    v9 = v16;
    if (v5 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v9)
      break;
    v16 = (v9 - 1) & v9;
    v17 = __clz(__rbit64(v9)) | (v8 << 6);
    v15 = v8;
LABEL_24:
    v14 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    if (!v14)
      goto LABEL_36;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    v16 = (v18 - 1) & v18;
    v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  v19 = v8 + 2;
  if (v8 + 2 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
    goto LABEL_22;
  v19 = v8 + 3;
  if (v8 + 3 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
    goto LABEL_22;
  v19 = v8 + 4;
  if (v8 + 4 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    v15 = v19;
    goto LABEL_23;
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v15);
  if (v18)
    goto LABEL_23;
  v21 = v8 + 6;
  while (v22 != v21)
  {
    v18 = *(_QWORD *)(v23 + 8 * v21++);
    if (v18)
    {
      v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
}

uint64_t specialized Sequence.first(where:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t *);
  uint64_t v8;

  if (a3 == a4)
  {
    return 0;
  }
  else
  {
    v5 = a3;
    if (a4 >= a3)
    {
      v7 = (uint64_t (*)(uint64_t *))result;
      while (v5 < a4)
      {
        v8 = v5;
        result = v7(&v8);
        if (v4 || (result & 1) != 0)
          return v5;
        if (a4 == ++v5)
          return 0;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Binding.projecting<A>(_:)(uint64_t a1)
{
  _BYTE v2[56];
  uint64_t v3;
  _QWORD v4[13];

  v4[12] = a1;
  outlined init with copy of _VariadicView_Children(a1 + 16, (uint64_t)v2);
  specialized Sequence.first(where:)((uint64_t (*)(_BYTE *))partial apply for closure #1 in ChildIndexProjection.get(base:), (uint64_t)&v3);
  outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v2, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC58]);
  if (v4[3])
    outlined destroy of _VariadicView_Children.Element((uint64_t)v4);
  else
    outlined destroy of (offset: Int, element: _VariadicView_Children.Element)?((uint64_t)&v3);
  type metadata accessor for ChildIndexProjection();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ChildIndexProjection and conformance ChildIndexProjection, (uint64_t (*)(uint64_t))type metadata accessor for ChildIndexProjection, (uint64_t)&protocol conformance descriptor for ChildIndexProjection);
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  return swift_retain();
}

uint64_t specialized Binding.projecting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16))
    specialized __RawDictionaryStorage.find<A>(_:)(a4);
  swift_endAccess();
  type metadata accessor for ItemIndexTabsOnlyIndexProjection();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection, (uint64_t (*)(uint64_t))type metadata accessor for ItemIndexTabsOnlyIndexProjection, (uint64_t)&protocol conformance descriptor for ItemIndexTabsOnlyIndexProjection);
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  return swift_retain();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d154UI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B7LL2of5using13customization11environment11coordinatorySo18_UITabb11GroupC_AA12f26ItemGroupVAA7BindingVyAA20f47ViewCustomizationVGSgAA17EnvironmentValuesVAA24f33ViewCoordinator_PhoneCyqd__GtAA26f34ViewCoordinatorStrategyRd__lFSSAA8fG56Ocfu3_33_9ed0a70f676a1ab0b2fbeb64a187c970A0_SSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  _BYTE __dst[264];
  _BYTE __src[264];
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v21 = &v19;
    do
    {
      outlined init with copy of TabEntry(v4, (uint64_t)__src);
      if ((*(_BYTE *)v21 & 1) != 0)
      {
        memcpy(__dst, __src, sizeof(__dst));
        v5 = *(_QWORD *)&__dst[24];
        v6 = *(_QWORD *)&__dst[32];
        outlined copy of TabCustomizationID.Base();
        outlined destroy of TabItemGroup((uint64_t)__dst);
      }
      else
      {
        *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
        *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
        *(_QWORD *)&__dst[96] = *(_QWORD *)&__src[96];
        *(_OWORD *)__dst = *(_OWORD *)__src;
        *(_OWORD *)&__dst[16] = *(_OWORD *)&__src[16];
        *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
        *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
        v5 = dispatch thunk of CustomStringConvertible.description.getter();
        v6 = v7;
        v8 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v8 != -1)
          swift_once();
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        outlined consume of TabCustomizationID?(v13, v14, v15);
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
            && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
          {
            ViewTraitCollection.value<A>(for:defaultValue:)();
            outlined copy of TabCustomizationID?(v13, v14, v15);
            outlined consume of TabCustomizationID?(v13, v14, v15);
            swift_bridgeObjectRelease();
            if (v15 != 255)
            {
              swift_bridgeObjectRelease();
              v5 = v13;
              v6 = v14;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for searchPlatformIdentifier != -1)
            swift_once();
          v5 = static TabItem.searchPlatformIdentifier;
          v6 = *(_QWORD *)algn_1EDF00098;
          swift_bridgeObjectRetain();
        }
        outlined destroy of TabItem((uint64_t)__dst);
      }
      v2 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v20;
      }
      v10 = *(_QWORD *)(v2 + 16);
      v9 = *(_QWORD *)(v2 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
        v2 = v20;
      }
      *(_QWORD *)(v2 + 16) = v10 + 1;
      v11 = v2 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v5;
      *(_QWORD *)(v11 + 40) = v6;
      v4 += 272;
      --v1;
    }
    while (v1);
  }
  return v2;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6_UITabCG_SSs5NeverOTg50157_s7SwiftUI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B7LL2of5using13customization11environment11coordinatorySo18_dB223GroupC_AA12TabItemGroupVAA7BindingVyAA20TabViewCustomizationVGSgAA17EnvironmentValuesVAA24TabViewCoordinator_PhoneCyqd__GtAA26TabViewCoordinatorStrategyRd__lFSSSo01_Y0Ccfu2_33_3d754e018c1b0ac695a0c02c1b628b04A0_SSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return (char *)v3;
    v15 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x18D75E3BC](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel__identifier);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v13 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      ++v5;
      *(_QWORD *)(v15 + 16) = v13 + 1;
      v14 = v15 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_Sis5NeverOTg503_s7d18UI21UIKitAdaptablef146View33_BC84A4987A84428C24F1F51C778C096CLLV27dismissPresentationIfNeeded11coordinatoryAA0eF17Coordinator_PhoneCyAA08AdaptiveeF8StrategyVG_tFSiAA0E5G54Ocfu_33_88b05e132e72830fd289708f1134f08dAMSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = a1 + 32;
    do
    {
      v5 = TabEntry.presentationCount.getter();
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 272;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16UIViewControllerC_7SwiftUI8TabEntryOtG_AGs5NeverOTg506_sSo16de2C7f3UI8hi19OABIggno_AB_AEtABs5J233OIegnrzr_TR03_s7c18UI21UIKitAdaptablee112View33_BC84A4987A84428C24F1F51C778C096CLLV03setF11Controllers2on03allfP04tabs8selected11environmentySo18UITabBarb9C_SaySo06a12X0CGSayAA0E5F41OGSiAA17EnvironmentValuesVtFA2N_AQtXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  id *v4;
  id v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = (id *)(a1 + 32);
    do
    {
      v5 = *v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 35;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;
  unsigned __int8 v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[264];
  _BYTE __src[273];
  _BYTE __dst[280];
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v27 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_31;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v5 = v28 + 32;
      v6 = MEMORY[0x1E0DEE9D8];
      v16 = v3;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)MEMORY[0x18D75E3BC](v4, a1);
LABEL_9:
        v8 = v7;
        v9 = *(_QWORD *)(v28 + 16);
        if (v4 == v9)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return v6;
        }
        if (v4 >= v9)
          goto LABEL_30;
        *(_QWORD *)__src = v7;
        outlined init with copy of TabEntry(v5, (uint64_t)&__src[8]);
        memcpy(__dst, __src, 0x111uLL);
        outlined init with copy of TabEntry((uint64_t)&__dst[8], (uint64_t)__src);
        if ((__src[264] & 1) != 0)
        {
          memcpy(v24, __src, sizeof(v24));
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v24[48], (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
          if (!v23)
          {
            outlined destroy of TabItemGroup((uint64_t)v24);
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_22:
            memcpy(__src, __dst, sizeof(__src));
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
            v6 = v27;
            v14 = *(_QWORD *)(v27 + 16);
            v13 = *(_QWORD *)(v27 + 24);
            if (v14 >= v13 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1);
              v6 = v27;
            }
            *(_QWORD *)(v6 + 16) = v14 + 1;
            memcpy((void *)(v6 + 280 * v14 + 32), __src, 0x111uLL);
            goto LABEL_5;
          }
          v10 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v10 != -1)
            swift_once();
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          outlined consume of TabCustomizationID?(v18, *((uint64_t *)&v18 + 1), v19);
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v24);
          outlined destroy of TabItem((uint64_t)v20);
          if ((v17 & 1) == 0)
            goto LABEL_22;
        }
        else
        {
          *(_OWORD *)&v24[64] = *(_OWORD *)&__src[64];
          *(_OWORD *)&v24[80] = *(_OWORD *)&__src[80];
          *(_QWORD *)&v24[96] = *(_QWORD *)&__src[96];
          *(_OWORD *)v24 = *(_OWORD *)__src;
          *(_OWORD *)&v24[16] = *(_OWORD *)&__src[16];
          *(_OWORD *)&v24[32] = *(_OWORD *)&__src[32];
          *(_OWORD *)&v24[48] = *(_OWORD *)&__src[48];
          v11 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v11 != -1)
            swift_once();
          v17 = HIBYTE(static TabOptions.TraitKey.defaultValue);
          v18 = *(_OWORD *)&qword_1EDF00118;
          v19 = word_1EDF00128;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          v12 = v20[1];
          outlined consume of TabCustomizationID?(v21, v22, v23);
          swift_bridgeObjectRelease();
          outlined destroy of TabItem((uint64_t)v24);
          if ((v12 & 1) == 0)
            goto LABEL_22;
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (UIViewController, TabEntry));
LABEL_5:
        ++v4;
        v5 += 272;
        if (v16 == v4)
          goto LABEL_33;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v3)
        goto LABEL_32;
    }
    v7 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
LABEL_32:
  v6 = MEMORY[0x1E0DEE9D8];
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6 & 1;
  return result;
}

uint64_t specialized TabViewCoordinator_Phone.updateSearchIndex<A>(tabs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  BOOL v15;
  const void *v16;
  unint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  __int16 v28;
  __int128 v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  _OWORD v35[6];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;

  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + direct field offset for TabViewCoordinator_Phone.searchState;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v7, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  v9 = 1;
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  if ((_DWORD)v7 == 1)
  {
    v11 = 0;
LABEL_19:
    v20 = v1 + direct field offset for TabViewCoordinator_Phone.searchIndex;
    *(_QWORD *)v20 = v11;
    *(_BYTE *)(v20 + 8) = v9;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v22 = v1;
    v23 = (char *)v35 + 8;
    v24 = (char *)&v37 + 8;
    v25 = a1 + 32;
    v26 = (char *)&v53 + 8;
    v27 = &v56;
    v21 = a1;
    result = swift_bridgeObjectRetain();
    v13 = 0;
    v14 = &lazy cache variable for type metadata for (offset: Int, element: TabEntry)?;
    v15 = v12 == 0;
    if (v12)
      goto LABEL_7;
LABEL_6:
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v13 = v12;
    v54 = -1;
    while (1)
    {
      outlined init with take of Binding<SearchFieldState>((uint64_t)&v37, (uint64_t)&v55, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry), (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
      v9 = v57 == 255;
      if (v57 == 255)
      {
        result = swift_bridgeObjectRelease();
        v11 = 0;
LABEL_18:
        v1 = v22;
        goto LABEL_19;
      }
      v11 = v55;
      outlined init with take of TabEntry(v27, &v37);
      if ((*v26 & 1) != 0)
      {
        result = outlined destroy of TabEntry((uint64_t)&v37);
        v15 = v13 >= v12;
        if (v13 == v12)
          goto LABEL_6;
      }
      else
      {
        v17 = v14;
        v35[5] = v42;
        v36 = v43;
        v35[0] = v37;
        v35[1] = v38;
        v35[3] = v40;
        v35[4] = v41;
        v35[2] = v39;
        v34 = *((_QWORD *)&v42 + 1);
        v18 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v18 != -1)
          swift_once();
        v28 = static TabOptions.TraitKey.defaultValue;
        v29 = *(_OWORD *)&qword_1EDF00118;
        v30 = word_1EDF00128;
        v31 = byte_1EDF0012A;
        v32 = qword_1EDF00130;
        v33 = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        v19 = BYTE9(v39);
        outlined consume of TabCustomizationID?(*((uint64_t *)&v37 + 1), v38, BYTE8(v38));
        swift_bridgeObjectRelease();
        result = outlined destroy of TabItem((uint64_t)v35);
        if ((v19 & 1) == 0)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        v14 = v17;
        v15 = v13 >= v12;
        if (v13 == v12)
          goto LABEL_6;
      }
LABEL_7:
      if (v15)
        break;
      v16 = v23;
      outlined init with copy of TabEntry(v25 + 272 * v13, (uint64_t)v23);
      *(_QWORD *)&v37 = v13;
      outlined init with take of TabEntry(v16, v24);
      ++v13;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized TabViewCoordinator_Phone.cacheChild(_:childID:for:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = v5;
  v48 = a1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v15 = type metadata accessor for Logger();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v47 = a2;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v46 = a4;
      v20 = v19;
      v44 = swift_slowAlloc();
      v51 = v44;
      *(_DWORD *)v20 = 136315394;
      v45 = v6;
      swift_bridgeObjectRetain();
      v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, a3, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, a5, &v51);
      v6 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v17, v18, "Caching child id %s in group id %s", (uint8_t *)v20, 0x16u);
      v21 = v44;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v21, -1, -1);
      v22 = v20;
      a4 = v46;
      MEMORY[0x18D760108](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    a2 = v47;
  }
  v23 = (uint64_t *)(v6 + direct field offset for TabViewCoordinator_Phone.groupHostCache);
  swift_beginAccess();
  v24 = *v23;
  v25 = *(_QWORD *)(*v23 + 16);
  swift_bridgeObjectRetain();
  if (v25 && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v27 & 1) != 0))
  {
    v28 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 32 * v26);
    v29 = *v28;
    v30 = v28[1];
    v32 = v28[2];
    v31 = v28[3];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
    v32 = v33;
    v31 = v34;
    swift_bridgeObjectRelease();
    v29 = 10;
  }
  v51 = v29;
  v52 = v30;
  v53 = v32;
  v54 = v31;
  swift_endAccess();
  v35 = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRetain();
  v36 = v48;
  if (v29 <= v35)
    TabItemGroup.HostCache.removeOldestKey()();
  specialized OrderedDictionary.subscript.setter(v36, a2, a3);
  v37 = v51;
  v38 = v52;
  v39 = v53;
  v40 = v54;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v49 = *v23;
  *v23 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, v38, v39, v40, a4, a5, isUniquelyReferenced_nonNull_native);
  *v23 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  return swift_release();
}

void specialized TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v7 = MEMORY[0x18D760234](v4 + direct field offset for TabViewCoordinator_Phone.popoverBridge);
  if (v7)
  {
    v8 = (char *)v7;
    if (a3)
      swift_unknownObjectWeakAssign();
    swift_unknownObjectWeakAssign();
    PreferenceList.init()();
    v9 = swift_allocObject();
    v10 = direct field offset for TabViewCoordinator_Phone.nextPopoverSeed;
    v11 = *(_DWORD *)(v4 + direct field offset for TabViewCoordinator_Phone.nextPopoverSeed);
    *(_QWORD *)(v9 + 16) = a1;
    v17 = v9;
    LODWORD(v18) = v11;
    swift_bridgeObjectRetain();
    PreferenceList.modifyValue<A>(for:transform:)();
    swift_release();
    ++*(_DWORD *)(v4 + v10);
    v12 = (void *)MEMORY[0x18D760234](&v8[direct field offset for UIKitInspectorV3Bridge.presenterOverride]);
    if (v12
      && (v13 = v12,
          v14 = objc_msgSend(v12, sel_parentViewController, partial apply for closure #1 in TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:), v17, v18), v14, v13, v14))
    {
      v15 = swift_retain();
      specialized UIKitInspectorV3Bridge.preferencesDidChange(_:)(v15);
      swift_release_n();
    }
    else
    {
      v16 = *(_QWORD *)&v8[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences];
      *(_QWORD *)&v8[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences] = v19;
      outlined consume of Transaction?(v16);
    }

  }
}

uint64_t specialized static TabViewCoordinatorStrategy.badgeValue(environment:badgeLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v8 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CAF4C0]);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = 0;
  if (a5 >> 1 != 0xFFFFFFFF)
  {
    if ((a5 & 0x8000000000000000) != 0)
    {
      v15 = a5 & 1;
      outlined copy of Text.Storage(a3, a4, v15);
      swift_bridgeObjectRetain();
    }
    else
    {
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Int and conformance Int();
      IntegerFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
      a3 = Text.init<A>(_:format:)();
      a4 = v13;
      v15 = v14 & 1;
    }
    v12 = Text.resolveString(in:with:idiom:)();
    outlined consume of Text.Storage(a3, a4, v15);
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t specialized Array.init(repeating:count:)(void *a1, uint64_t a2)
{
  return specialized Array.init(repeating:count:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for UIViewController?, (unint64_t *)&lazy cache variable for type metadata for UIViewController, 0x1E0DC3F20);
}

uint64_t specialized Array.init(repeating:count:)(void *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t result;
  _QWORD *v13;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      type metadata accessor for FallbackDelegateBox<NSObject>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v7 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v7[2] = a2;
      v13 = v7;
      v7[4] = a1;
      if (a2 != 1)
      {
        v7[5] = a1;
        v8 = a2 - 2;
        if (v8)
        {
          v9 = v7 + 6;
          do
          {
            *v9++ = a1;
            v10 = a1;
            --v8;
          }
          while (v8);
        }
        v11 = a1;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];

    }
    specialized Array._endMutation()();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  id v18;

  v4 = v3;
  v8 = *v4;
  v9 = (_QWORD *)v4[1];
  swift_retain();
  swift_retain();
  v10 = specialized OrderedSet._find(_:)(a2, a3, v8, v9);
  v12 = v11;
  v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) != 0)
  {
    if (!a1)
      return swift_bridgeObjectRelease();
    v18 = a1;
    specialized OrderedSet._appendNew(_:in:)(a2, a3);
    v16 = v18;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_10;
  }
  if (!a1)
  {
    specialized OrderedSet._removeExistingMember(at:in:)(v10, v14);
    swift_bridgeObjectRelease();
    v16 = (id)specialized ContiguousArray.remove(at:)(v10);
    goto LABEL_12;
  }
  v15 = v4[2];
  v16 = a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  v4[2] = v15;
  if ((result & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(_QWORD *)(v15 + 16))
  {
    objc_storeStrong((id *)(v15 + 8 * v10 + 32), a1);
LABEL_10:
    specialized ContiguousArray._endMutation()();

LABEL_12:
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void static SidebarAdaptableTabViewStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18738352C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v17 = *(_OWORD *)(v1 + 56);
  v18 = *(_OWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 72);
  _GraphValue.value.getter();
  v11 = type metadata accessor for AdaptableTabView(255, v3, v2, v10);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v2, v12);
  v13 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for SidebarAdaptableTabViewStyle.Body(0, v3, v2, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarAdaptableTabViewStyle.Body<A>, v15);
  _GraphValue.init<A>(_:)();
  v20 = v5;
  v21 = v6;
  v22 = v0;
  v23 = v7;
  v24 = v8;
  v25 = v18;
  v26 = v17;
  v27 = v9;
  v28 = v4;
  v19[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v11);
  v19[1] = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v13, v19);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for AdaptableTabView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdaptableTabView);
}

unint64_t lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInAdaptableTabViewContextInput, &type metadata for IsInAdaptableTabViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInAdaptableTabViewContextInput, &type metadata for IsInAdaptableTabViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInAdaptableTabViewContextInput, &type metadata for IsInAdaptableTabViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInAdaptableTabViewContextInput, &type metadata for IsInAdaptableTabViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInAdaptableTabViewContextInput, &type metadata for IsInAdaptableTabViewContextInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

uint64_t type metadata accessor for SidebarAdaptableTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SidebarAdaptableTabViewStyle.Body);
}

void static SidebarAdaptableTabViewStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_1873837A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  _GraphValue.value.getter();
  v10 = type metadata accessor for AdaptableTabView(255, v3, v2, v9);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v2, v11);
  v12 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for SidebarAdaptableTabViewStyle.Body(0, v3, v2, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarAdaptableTabViewStyle.Body<A>, v14);
  _GraphValue.init<A>(_:)();
  v21 = v0;
  v22 = v4;
  v23 = v5;
  v24 = v7;
  v25 = v8;
  v26 = v19;
  v27 = v18;
  v28 = v17;
  v29 = v6;
  v30 = v16;
  v20[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v10);
  v20[1] = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void SidebarAdaptableTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187383964(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void SidebarAdaptableTabViewStyle.Body.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;

  v9 = a3;
  type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v5);
  v7 = (char *)&v7 - v6;
  v10 = &type metadata for SidebarAdaptableTabViewStyle;
  v11 = a1;
  v12 = &protocol witness table for SidebarAdaptableTabViewStyle;
  v13 = a2;
  type metadata accessor for _TabViewValue();
}

void sub_187383A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = type metadata accessor for AdaptableTabView(0, v10, v9, v14);
  *(_QWORD *)(v11 - 240) = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v11 - 256) = (char *)&a9 - v17;
  *(_QWORD *)(v11 - 248) = type metadata accessor for TabViewStyleConfiguration.Content(255, v10, v9, v18);
  v19 = type metadata accessor for _VariadicView.Tree();
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v11 - 232) = v19;
  *(_QWORD *)(v11 - 224) = v20;
  MEMORY[0x1E0C80A78](v19, v21);
  SidebarAdaptableTabViewStyle.Body.base.getter();
}

void sub_187383B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v2, v1, *(_QWORD *)(v5 - 264));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  SidebarAdaptableTabViewStyle.Body.base.getter();
}

uint64_t sub_187383B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v12 = v6 + *(int *)(type metadata accessor for TabViewStyleConfiguration(0, v7, v5, a4) + 36);
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_BYTE *)(v12 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)v12, v14);
  v9(v6, v4);
  *(_QWORD *)(v11 - 120) = swift_getKeyPath();
  *(_BYTE *)(v11 - 112) = 0;
  *(_QWORD *)(v11 - 136) = swift_getKeyPath();
  *(_BYTE *)(v11 - 128) = 0;
  KeyPath = swift_getKeyPath();
  v17 = swift_getKeyPath();
  AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 120, (uint64_t *)(v11 - 136), KeyPath, 0, 0, 0, v17, 0, *(_QWORD *)(v11 - 256), 0, 0, *(_QWORD *)(v11 - 272), v13, v14, v15, 1, v7, v5);
  *(_QWORD *)(v11 - 192) = v7;
  *(_QWORD *)(v11 - 184) = v5;
  *(_DWORD *)(v11 - 176) = v8;
  v18 = *(_QWORD *)(v11 - 240);
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v11 - 160) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v18);
  *(_QWORD *)(v11 - 152) = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  v19 = *(_QWORD *)(v11 - 232);
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v19, v11 - 160);
  v21 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  View.input<A>(_:)((uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v19, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v20, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 224) + 8))(v10, v19);
}

uint64_t default argument 0 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t default argument 1 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _BYTE v28[40];

  v19 = *(_BYTE *)(a1 + 8);
  v20 = *a2;
  v21 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a9 = *(_QWORD *)a1;
  *(_BYTE *)(a9 + 8) = v19;
  *(_QWORD *)(a9 + 16) = v20;
  *(_BYTE *)(a9 + 24) = v21;
  *(_QWORD *)(a9 + 32) = a3;
  *(_QWORD *)(a9 + 40) = a4;
  *(_QWORD *)(a9 + 48) = a5;
  *(_BYTE *)(a9 + 56) = a6 & 1;
  *(_QWORD *)(a9 + 64) = a7;
  *(_QWORD *)(a9 + 72) = a8;
  *(_BYTE *)(a9 + 80) = a10;
  *(_BYTE *)(a9 + 81) = a11 & 1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v28, a9 + 88);
  *(_QWORD *)(a9 + 128) = 0;
  outlined destroy of AnyHashable((uint64_t)v28);
  *(_BYTE *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 144) = 0;
  v23 = (int *)type metadata accessor for AdaptableTabView(0, a17, a18, v22);
  v24 = a9 + v23[14];
  type metadata accessor for Binding();
  v25 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a12, v25);
  v27 = a9 + v23[15];
  *(_QWORD *)v27 = a13;
  *(_QWORD *)(v27 + 8) = a14;
  *(_BYTE *)(v27 + 16) = a15;
  *(_BYTE *)(a9 + v23[16]) = a16;
  return result;
}

void closure #1 in SidebarAdaptableTabViewStyle.Body.value.getter()
{
  type metadata accessor for _TabViewValue();
}

void sub_187383F0C(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  SidebarAdaptableTabViewStyle.Body.base.getter();
}

uint64_t sub_187383F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v7 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for TabViewStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, v2);
}

uint64_t AdaptableTabView.defaultPlacement.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, a1);
  return outlined consume of Environment<Bool>.Content(v3, v4);
}

uint64_t AdaptableTabView.contentMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, a1);
  return outlined consume of Environment<Bool>.Content(v3, v4);
}

uint64_t AdaptableTabView.accessoryViewConfiguration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_BYTE *)(v0 + 56);
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v1, v2, v3, v4);
  v5 = specialized Environment.wrappedValue.getter(v1, v2, v3, v4);
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(v1, v2, v3, v4);
  return v5;
}

uint64_t AdaptableTabView.clientSidebarVisibility.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(unsigned __int8 *)(v0 + 80);
  v4 = *(unsigned __int8 *)(v0 + 81);
  outlined copy of Environment<Binding<Visibility>?>.Content(v1, v2, v3, v4);
  v5 = specialized Environment.wrappedValue.getter(v1, v2, v3 | (v4 << 8));
  outlined consume of Environment<Binding<Visibility>?>.Content(v1, v2, v3, v4);
  return v5;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SidebarAdaptableTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for AdaptableTabView(255, v4, v5, a2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v4, v5, v6);
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v7 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance SidebarAdaptableTabViewStyle.Body<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  SidebarAdaptableTabViewStyle.Body.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for SidebarAdaptableTabViewStyle()
{
  return &type metadata for SidebarAdaptableTabViewStyle;
}

uint64_t type metadata completion function for AdaptableTabView()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AdaptableTabView(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t __n;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  v10 = v6 & 0x100000;
  if (v7 > 7 || v10 != 0 || ((v9 + 7 + (v8 & (v7 + 152))) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + (v8 & (v7 + 16));
    swift_retain();
    return a1;
  }
  __n = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64);
  v49 = v9 + 7;
  v50 = *(_QWORD *)(a3 + 16);
  v48 = *(_DWORD *)(v5 + 84);
  v14 = *(_QWORD *)a2;
  v15 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v15);
  *(_QWORD *)a1 = v14;
  *(_BYTE *)(a1 + 8) = v15;
  v16 = a1 & 0xFFFFFFFFFFFFFFF8;
  v17 = a2 & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v14) = *(_BYTE *)(v17 + 24);
  outlined copy of Environment<Bool>.Content(v18, v14);
  *(_QWORD *)(v16 + 16) = v18;
  *(_BYTE *)(v16 + 24) = v14;
  v19 = *(_QWORD *)(v17 + 32);
  v20 = *(_QWORD *)(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v22 = *(_BYTE *)(v17 + 56);
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v19, v20, v21, v22);
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 48) = v21;
  *(_BYTE *)(v16 + 56) = v22;
  v23 = *(_QWORD *)(v17 + 64);
  v24 = *(_QWORD *)(v17 + 72);
  LOBYTE(v21) = *(_BYTE *)(v17 + 81);
  v25 = *(_BYTE *)(v17 + 80);
  outlined copy of Environment<Binding<Visibility>?>.Content(v23, v24, v25, v21);
  *(_QWORD *)(v16 + 64) = v23;
  *(_QWORD *)(v16 + 72) = v24;
  *(_BYTE *)(v16 + 80) = v25;
  *(_BYTE *)(v16 + 81) = v21;
  v26 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 89) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)((v17 + 89) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[3];
  v26[3] = v28;
  v26[4] = v27[4];
  (**(void (***)(_QWORD *, _QWORD *))(v28 - 8))(v26, v27);
  v26[5] = v27[5];
  v29 = ((unint64_t)v26 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v27 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v29 = *(_BYTE *)v30;
  *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
  v31 = (_QWORD *)(v8 & (v29 + 23));
  v32 = (_QWORD *)(v8 & (v30 + 23));
  v33 = (uint64_t *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  if ((v48 & 0x80000000) == 0)
  {
    v34 = *v33;
    if ((unint64_t)*v33 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v35 = v50;
    v36 = ~v7;
    if ((_DWORD)v34 != -1)
      goto LABEL_14;
LABEL_16:
    *v31 = *v32;
    v38 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v38 = *v33;
    v39 = v7 + 8;
    v40 = ((unint64_t)v38 + v7 + 8) & v36;
    v41 = ((unint64_t)v33 + v39) & v36;
    v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v42(v40, v41, v35);
    goto LABEL_17;
  }
  v35 = v50;
  v37 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v33 + v7 + 8) & ~v7);
  v36 = ~v7;
  if (!v37)
    goto LABEL_16;
LABEL_14:
  memcpy(v31, v32, __n);
LABEL_17:
  v43 = ((unint64_t)v31 + v49) & 0xFFFFFFFFFFFFFFF8;
  v44 = ((unint64_t)v32 + v49) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v44 + 8) < 0xFFFFFFFFuLL)
  {
    v45 = *(_OWORD *)v44;
    *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
    *(_OWORD *)v43 = v45;
  }
  else
  {
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *(_QWORD *)(v43 + 8) = *(_QWORD *)(v44 + 8);
    *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
    swift_retain();
    swift_retain();
  }
  *(_BYTE *)(v43 + 17) = *(_BYTE *)(v44 + 17);
  return a1;
}

uint64_t outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined copy of Environment<Binding<Visibility>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  else
    return swift_retain();
}

uint64_t destroy for AdaptableTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v3 = a1;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_BYTE *)(v3 + 56));
  outlined consume of Environment<Binding<Visibility>?>.Content(*(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 80), *(_BYTE *)(v3 + 81));
  v4 = (v3 + 89) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);
  swift_release();
  v5 = (v4 + 55) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7) + 16) & ~(v8 | 7);
  v10 = ~v8;
  v11 = v8 + 16;
  v12 = *(_QWORD *)(v7 + 64);
  v13 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v13 + v8 + 8) & v10);
    v16 = v11 & ~v8;
    if (!(_DWORD)result)
    {
LABEL_5:
      swift_release();
      swift_release();
      result = (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v13 + v8 + 8) & v10, v6);
    }
  }
  else
  {
    v14 = *v13;
    if ((unint64_t)*v13 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    result = (v14 + 1);
    v16 = v11 & ~v8;
    if ((_DWORD)v14 == -1)
      goto LABEL_5;
  }
  if (*(_QWORD *)(((v12 + v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = swift_release();
  if ((a4 & 1) != 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Environment<Binding<Visibility>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined consume of Binding<NavigationSplitViewColumn>?(a1, a2);
  else
    return swift_release();
}

uint64_t initializeWithCopy for AdaptableTabView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  size_t v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, unint64_t, uint64_t);
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t result;
  uint64_t v46;
  _QWORD *__dst;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v46 = a1;
  a1 &= 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(_BYTE *)(v8 + 24);
  outlined copy of Environment<Bool>.Content(v9, v6);
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 24) = v6;
  v10 = *(_QWORD *)(v8 + 32);
  v11 = *(_QWORD *)(v8 + 40);
  v12 = *(_QWORD *)(v8 + 48);
  v13 = *(_BYTE *)(v8 + 56);
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v10, v11, v12, v13);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v13;
  v14 = *(_QWORD *)(v8 + 64);
  v15 = *(_QWORD *)(v8 + 72);
  LOBYTE(v12) = *(_BYTE *)(v8 + 81);
  v16 = *(_BYTE *)(v8 + 80);
  outlined copy of Environment<Binding<Visibility>?>.Content(v14, v15, v16, v12);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 80) = v16;
  *(_BYTE *)(a1 + 81) = v12;
  v17 = (_QWORD *)((a1 + 89) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v8 + 89) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[3];
  v17[3] = v19;
  v17[4] = v18[4];
  (**(void (***)(_QWORD *, _QWORD *))(v19 - 8))(v17, v18);
  v17[5] = v18[5];
  v20 = ((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  v22 = *(_QWORD *)(a3 + 16);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int *)(v23 + 84);
  v25 = *(_DWORD *)(v23 + 80);
  v26 = *(_DWORD *)(v23 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (_QWORD *)((v25 + 16 + v20) & v26);
  v27 = (_QWORD *)((v25 + 16 + v21) & v26);
  v28 = ~v25;
  v29 = (v25 + 16) & ~v25;
  v30 = *(_QWORD *)(v23 + 64);
  v31 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  if ((v24 & 0x80000000) != 0)
  {
    v35 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(((unint64_t)v31 + v25 + 8) & v28, v24, v22);
    v33 = v29 + v30;
    if (v35)
    {
LABEL_5:
      v34 = __dst;
      memcpy(__dst, v27, v33);
      goto LABEL_8;
    }
  }
  else
  {
    v32 = *v31;
    if ((unint64_t)*v31 >= 0xFFFFFFFF)
      LODWORD(v32) = -1;
    v33 = v29 + v30;
    if ((_DWORD)v32 != -1)
      goto LABEL_5;
  }
  v34 = __dst;
  *__dst = *v27;
  v36 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  v37 = v22;
  *v36 = *v31;
  v38 = v25 + 8;
  v39 = ((unint64_t)v36 + v25 + 8) & v28;
  v40 = ((unint64_t)v31 + v38) & v28;
  v41 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
  swift_retain();
  swift_retain();
  v41(v39, v40, v37);
LABEL_8:
  v42 = ((unint64_t)v34 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v43 + 8) < 0xFFFFFFFFuLL)
  {
    v44 = *(_OWORD *)v43;
    *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
    *(_OWORD *)v42 = v44;
  }
  else
  {
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
    *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
    swift_retain();
    swift_retain();
  }
  result = v46;
  *(_BYTE *)(v42 + 17) = *(_BYTE *)(v43 + 17);
  return result;
}

uint64_t assignWithCopy for AdaptableTabView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t (*v48)(unint64_t, uint64_t, uint64_t);
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(unint64_t, uint64_t, uint64_t);
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t result;
  int v59;
  size_t v60;
  uint64_t v61;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v61 = a1;
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(_BYTE *)(v11 + 24);
  outlined copy of Environment<Bool>.Content(v12, v6);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_BYTE *)(v10 + 24);
  *(_QWORD *)(v10 + 16) = v12;
  *(_BYTE *)(v10 + 24) = v6;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_QWORD *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 40);
  v17 = *(_QWORD *)(v11 + 48);
  v18 = *(_BYTE *)(v11 + 56);
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v15, v16, v17, v18);
  v19 = *(_QWORD *)(v10 + 32);
  v20 = *(_QWORD *)(v10 + 40);
  v21 = *(_QWORD *)(v10 + 48);
  v22 = *(_BYTE *)(v10 + 56);
  *(_QWORD *)(v10 + 32) = v15;
  *(_QWORD *)(v10 + 40) = v16;
  *(_QWORD *)(v10 + 48) = v17;
  *(_BYTE *)(v10 + 56) = v18;
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(v19, v20, v21, v22);
  v23 = *(_QWORD *)(v11 + 64);
  v24 = *(_QWORD *)(v11 + 72);
  LOBYTE(v17) = *(_BYTE *)(v11 + 81);
  v25 = *(_BYTE *)(v11 + 80);
  outlined copy of Environment<Binding<Visibility>?>.Content(v23, v24, v25, v17);
  v26 = *(_QWORD *)(v10 + 64);
  v27 = *(_QWORD *)(v10 + 72);
  v28 = *(_BYTE *)(v10 + 81);
  *(_QWORD *)(v10 + 64) = v23;
  *(_QWORD *)(v10 + 72) = v24;
  v29 = *(unsigned __int8 *)(v10 + 80);
  *(_BYTE *)(v10 + 80) = v25;
  *(_BYTE *)(v10 + 81) = v17;
  outlined consume of Environment<Binding<Visibility>?>.Content(v26, v27, v29, v28);
  v30 = (uint64_t *)((v10 + 89) & 0xFFFFFFFFFFFFFFF8);
  v31 = (uint64_t *)((v11 + 89) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v30, v31);
  v30[5] = v31[5];
  swift_retain();
  swift_release();
  v32 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  swift_retain();
  swift_release();
  v34 = *(_QWORD *)(a3 + 16);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned int *)(v35 + 84);
  v37 = *(_DWORD *)(v35 + 80);
  v38 = *(_DWORD *)(v35 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v39 = (_QWORD *)((v37 + 16 + v32) & v38);
  v40 = (_QWORD *)((v37 + 16 + v33) & v38);
  v41 = ~v37;
  v42 = *(_QWORD *)(v35 + 64);
  v43 = ((v37 + 16) & ~v37) + v42;
  v44 = (_QWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v36 & 0x80000000) == 0)
  {
    v45 = (uint64_t *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    v46 = *v45;
    if ((unint64_t)*v45 >= 0xFFFFFFFF)
      LODWORD(v46) = -1;
    v47 = v46 + 1;
    if (*v44 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v47)
      goto LABEL_9;
    *v39 = *v40;
    *v44 = *v45;
    v49 = (unint64_t)v44 + v37 + 8;
    v50 = v34;
    v51 = v49 & v41;
    v52 = ((unint64_t)v45 + v37 + 8) & v41;
    v53 = *(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 16);
    swift_retain();
    swift_retain();
    v53(v51, v52, v50);
    goto LABEL_12;
  }
  v60 = ((v37 + 16) & ~v37) + v42;
  v48 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v35 + 48);
  v59 = v48(((unint64_t)v44 + v37 + 8) & ~v37, v36, v34);
  v45 = (uint64_t *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  v41 = ~v37;
  v47 = v48(((unint64_t)v45 + v37 + 8) & ~v37, v36, v34);
  v43 = v60;
  if (v59)
    goto LABEL_8;
LABEL_5:
  if (v47)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v35 + 8))(((unint64_t)v44 + v37 + 8) & v41, v34);
LABEL_9:
    memcpy(v39, v40, v43);
    goto LABEL_12;
  }
  *v39 = *v40;
  swift_retain();
  swift_release();
  *v44 = *v45;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 24))(((unint64_t)v44 + v37 + 8) & v41, ((unint64_t)v45 + v37 + 8) & v41, v34);
LABEL_12:
  v54 = ((unint64_t)v39 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((unint64_t)v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_QWORD *)(v55 + 8);
  if (*(_QWORD *)(v54 + 8) < 0xFFFFFFFFuLL)
  {
    if (v56 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
      *(_BYTE *)(v54 + 16) = *(_BYTE *)(v55 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_19;
    }
LABEL_18:
    v57 = *(_OWORD *)v55;
    *(_BYTE *)(v54 + 16) = *(_BYTE *)(v55 + 16);
    *(_OWORD *)v54 = v57;
    goto LABEL_19;
  }
  if (v56 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_18;
  }
  *(_QWORD *)v54 = *(_QWORD *)v55;
  swift_retain();
  swift_release();
  *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v54 + 16) = *(_BYTE *)(v55 + 16);
LABEL_19:
  result = v61;
  *(_BYTE *)(v54 + 17) = *(_BYTE *)(v55 + 17);
  return result;
}

uint64_t initializeWithTake for AdaptableTabView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v4 + 41) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 41);
  *(_OWORD *)(v4 + 32) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  *(_WORD *)(v4 + 80) = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 80);
  *(_OWORD *)(v4 + 64) = v7;
  v8 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 89) & 0xFFFFFFFFFFFFFFF8);
  v9 = (__int128 *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 89) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  v11 = v9[2];
  v8[1] = v9[1];
  v8[2] = v11;
  *v8 = v10;
  v12 = (_OWORD *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v9 + 55) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = (_QWORD *)(((unint64_t)v12 + v16 + 16) & v17);
  v19 = (_QWORD *)(((unint64_t)v13 + v16 + 16) & v17);
  v20 = ~v16;
  v21 = (v16 + 16) & ~v16;
  v22 = *(_QWORD *)(v15 + 64);
  v23 = (uint64_t *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v15 + 84) & 0x80000000) == 0)
  {
    v24 = *v23;
    if ((unint64_t)*v23 >= 0xFFFFFFFF)
      LODWORD(v24) = -1;
    v25 = v21 + v22;
    if ((_DWORD)v24 != -1)
      goto LABEL_5;
LABEL_7:
    *v18 = *v19;
    v26 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(((unint64_t)v26 + v16 + 8) & v20, ((unint64_t)v23 + v16 + 8) & v20, v14);
    goto LABEL_8;
  }
  v25 = v21 + v22;
  if (!(*(unsigned int (**)(unint64_t))(v15 + 48))(((unint64_t)v23 + v16 + 8) & v20))
    goto LABEL_7;
LABEL_5:
  memcpy(v18, v19, v25);
LABEL_8:
  v27 = ((unint64_t)v18 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v19 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_OWORD *)v28;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  *(_OWORD *)v27 = v29;
  *(_BYTE *)(v27 + 17) = *(_BYTE *)(v28 + 17);
  return a1;
}

uint64_t *assignWithTake for AdaptableTabView(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)(unint64_t, uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  int v53;
  size_t v54;
  uint64_t *v55;
  uint64_t v56;

  v5 = a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *a1;
  v9 = *((_BYTE *)v5 + 8);
  *v5 = v6;
  *((_BYTE *)v5 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = (unint64_t)v5 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v13 = *(_QWORD *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  v14 = *(_BYTE *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v10 + 24) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  v16 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v17 = *(_QWORD *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 32);
  v18 = *(_QWORD *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 40);
  v19 = *(_QWORD *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 48);
  v20 = *(_BYTE *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_QWORD *)(v10 + 48) = v15;
  *(_BYTE *)(v10 + 56) = v16;
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(v17, v18, v19, v20);
  v21 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 80);
  v22 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 81);
  v23 = *(_QWORD *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 64);
  v24 = *(_QWORD *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 72);
  v25 = *(_BYTE *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 81);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  v26 = *(unsigned __int8 *)(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 80);
  *(_BYTE *)(v10 + 80) = v21;
  *(_BYTE *)(v10 + 81) = v22;
  outlined consume of Environment<Binding<Visibility>?>.Content(v23, v24, v26, v25);
  v27 = (((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 89) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v11 + 89) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v27);
  v29 = *(_OWORD *)v28;
  v30 = *(_OWORD *)(v28 + 16);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  *(_OWORD *)v27 = v29;
  *(_OWORD *)(v27 + 16) = v30;
  *(_QWORD *)(v27 + 40) = *(_QWORD *)(v28 + 40);
  swift_release();
  v31 = (v27 + 55) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v28 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  swift_release();
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned int *)(v34 + 84);
  v36 = *(_DWORD *)(v34 + 80);
  v37 = *(_DWORD *)(v34 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v38 = (_QWORD *)((v36 + 16 + v31) & v37);
  v39 = (_QWORD *)((v36 + 16 + v32) & v37);
  v40 = *(_QWORD *)(v34 + 64);
  v41 = ((v36 + 16) & ~v36) + v40;
  v42 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  v56 = ~v36;
  if ((v35 & 0x80000000) == 0)
  {
    v43 = v33;
    v44 = (uint64_t *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
    v45 = *v44;
    if ((unint64_t)*v44 >= 0xFFFFFFFF)
      LODWORD(v45) = -1;
    v46 = v45 + 1;
    if (*v42 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v46)
      goto LABEL_9;
    *v38 = *v39;
    *v42 = *v44;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v34 + 32))(((unint64_t)v42 + v36 + 8) & v56, ((unint64_t)v44 + v36 + 8) & v56, v43);
    goto LABEL_12;
  }
  v54 = ((v36 + 16) & ~v36) + v40;
  v55 = v5;
  v47 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v34 + 48);
  v53 = v47(((unint64_t)v42 + v36 + 8) & ~v36, v35, v33);
  v44 = (uint64_t *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  v41 = v54;
  v48 = v35;
  v43 = v33;
  v46 = v47(((unint64_t)v44 + v36 + 8) & ~v36, v48, v33);
  v5 = v55;
  if (v53)
    goto LABEL_8;
LABEL_5:
  if (v46)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v34 + 8))(((unint64_t)v42 + v36 + 8) & v56, v43);
LABEL_9:
    memcpy(v38, v39, v41);
    goto LABEL_12;
  }
  *v38 = *v39;
  swift_release();
  *v42 = *v44;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v34 + 40))(((unint64_t)v42 + v36 + 8) & v56, ((unint64_t)v44 + v36 + 8) & v56, v43);
LABEL_12:
  v49 = ((unint64_t)v38 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = ((unint64_t)v39 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v49 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_16:
    v51 = *(_OWORD *)v50;
    *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
    *(_OWORD *)v49 = v51;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v50 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    goto LABEL_16;
  }
  *(_QWORD *)v49 = *(_QWORD *)v50;
  swift_release();
  *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
  swift_release();
  *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
LABEL_17:
  *(_BYTE *)(v49 + 17) = *(_BYTE *)(v50 + 17);
  return v5;
}

uint64_t getEnumTagSinglePayload for AdaptableTabView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = v6 - 1;
  if ((v6 - 1) <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v6 - 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  if (v8 < a2)
  {
    v11 = (a2 - v8 + 0xFFFF) >> (8
                               * (((*(_BYTE *)(v4 + 64) + ((v9 + 16) & ~(_BYTE)v9) + ((v9 - 104) & ~(_BYTE)v10) + 7) & 0xF8)
                                + 18));
    if (((*(_DWORD *)(v4 + 64) + (((_DWORD)v9 + 16) & ~(_DWORD)v9) + (((_DWORD)v9 + 152) & ~(_DWORD)v10) + 7) & 0xFFFFFFF8)
       + 18 <= 3)
      v12 = v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X17 }
  }
  v16 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 89) & 0xFFFFFFFFFFFFFFF8;
  if (v7 < 0)
  {
    v18 = (unint64_t *)((((((v16 + 55) & 0xFFFFFFFFFFFFFFF8) + v10 + 16) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v20 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v9 + 8) & ~v9);
    }
    else
    {
      v19 = *v18;
      if (v19 >= 0xFFFFFFFF)
        LODWORD(v19) = -1;
      v20 = v19 + 1;
    }
    if (v20 >= 2)
      return v20 - 1;
    else
      return 0;
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    return (v17 + 1);
  }
}

void storeEnumTagSinglePayload for AdaptableTabView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if ((v6 - 1) <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 152) & ~(v8 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v7 >= a3)
  {
    v12 = 0u;
    if (v7 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v7 + 0xFFFF) >> (8
                                  * (((((v8 + 16) & ~(_BYTE)v8) + *(_BYTE *)(v5 + 64) + ((v8 - 104) & ~(v8 | 7)) + 7) & 0xF8)
                                   + 18)))
          + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_20:
      __asm { BR              X0 }
  }
  v13 = ~v7 + a2;
  bzero(a1, ((((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 152) & ~(v8 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v9 > 3)
    *a1 = v13;
  else
    *(_WORD *)a1 = v13;
  __asm { BR              X11 }
}

void sub_18738572C(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x187385800);
}

void sub_187385734(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18738573CLL);
  JUMPOUT(0x187385800);
}

void sub_18738575C(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x187385800);
}

void sub_187385764(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x187385800);
}

void sub_18738576C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (v2 < 0)
      JUMPOUT(0x187385778);
    if (a2 < 0)
      JUMPOUT(0x1873857E8);
    *(_QWORD *)((((v3 & 0xFFFFFFFFFFFFFFF8) + 89) & 0xFFFFFFFFFFFFFFF8) + 24) = (a2 - 1);
  }
  JUMPOUT(0x187385800);
}

void sub_187385874()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x187385800);
}

void sub_18738589C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187385800);
}

void sub_1873858AC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187385800);
}

void sub_1873858B4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187385800);
}

uint64_t instantiation function for generic protocol witness table for AdaptableTabView<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in AdaptableTabView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

double AdaptableTabView.body(children:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  uint64_t KeyPath;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  double result;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[6];
  __n128 v88[2];
  __int128 v89;
  uint64_t v90;
  char v91;
  char v92;
  _OWORD v93[3];
  uint64_t v94;
  _QWORD v95[2];
  unsigned __int8 v96;
  _QWORD v97[3];
  unsigned __int8 v98;

  v85 = a3;
  v74 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E0CE1160]);
  MEMORY[0x1E0C80A78](v6, v7);
  v84 = (uint64_t *)((char *)&v73 - v8);
  v75 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v73 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v80 = (char *)&v73 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v73 - v17;
  v19 = *(_QWORD *)(a2 + 16);
  type metadata accessor for Binding();
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v73 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v73 - v24, v3 + *(int *)(a2 + 56), v20, v23);
  v26 = *(_QWORD *)(a2 + 24);
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v88);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v19;
  *(_QWORD *)(v27 + 24) = v26;
  v28 = v88[1];
  *(__n128 *)(v27 + 32) = v88[0];
  *(__n128 *)(v27 + 48) = v28;
  *(_OWORD *)(v27 + 64) = v89;
  *(_QWORD *)(v27 + 80) = v90;
  v82 = v26;
  v83 = v19;
  v87[2] = v19;
  v87[3] = v26;
  v87[4] = partial apply for implicit closure #2 in implicit closure #1 in PageViewWrapper.selectedIndex.getter;
  v87[5] = v27;
  type metadata accessor for Binding<Int?>();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))_s7SwiftUI7BindingVyxGACySiSgGIgno_AdFs5NeverOIegnrzr_SHRzlTRTA_0, (uint64_t)v87, MEMORY[0x1E0DEDCE8], v29, v30, (uint64_t)v97);
  v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32 = v18;
  v31(v25, v20);
  v33 = v75;
  swift_release();
  v34 = v97[0];
  v35 = v97[1];
  v36 = v97[2];
  v37 = v98;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v39 = v74;
  v38(v32, v86, a2);
  outlined init with copy of _VariadicView_Children(v39, (uint64_t)v88);
  if (v35)
  {
    v76 = v37;
    v77 = v36;
    v79 = v35;
    v81 = v34;
  }
  else
  {
    v40 = MEMORY[0x1E0DEC198];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    outlined init with copy of _VariadicView_Children((uint64_t)v88, (uint64_t)v93);
    type metadata accessor for ChildIndexProjection();
    v41 = swift_allocObject();
    v42 = v93[1];
    v43 = v93[2];
    *(_OWORD *)(v41 + 16) = v93[0];
    *(_OWORD *)(v41 + 32) = v42;
    *(_OWORD *)(v41 + 48) = v43;
    *(_QWORD *)(v41 + 64) = v94;
    v81 = specialized Binding.projecting<A>(_:)(v41);
    v79 = v44;
    v77 = v45;
    v76 = v46;
    swift_release();
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v95, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyHashable>, v40, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  outlined destroy of _VariadicView_Children((uint64_t)v88);
  v47 = *(void (**)(char *, uint64_t))(v33 + 8);
  v47(v32, a2);
  v48 = v86;
  v49 = AdaptableTabView.clientSidebarVisibility.getter();
  v51 = v50;
  v53 = v52;
  v54 = (uint64_t)v80;
  v38(v80, v48, a2);
  v78 = a2;
  if (v51)
  {
    LODWORD(v75) = v53;
LABEL_8:
    v47((char *)v54, a2);
    goto LABEL_9;
  }
  v55 = v54 + *(int *)(a2 + 60);
  v49 = *(_QWORD *)v55;
  v51 = *(_QWORD *)(v55 + 8);
  v56 = *(unsigned __int8 *)(v55 + 16);
  v57 = v73;
  v38(v73, v54, a2);
  if (v51)
  {
    LODWORD(v75) = v56;
    swift_retain();
    swift_retain();
    v47(v57, a2);
    goto LABEL_8;
  }
  v72 = *((_QWORD *)v57 + 18);
  LOBYTE(v93[0]) = v57[136];
  *((_QWORD *)&v93[0] + 1) = v72;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v47(v57, a2);
  v47((char *)v54, a2);
  v49 = v95[0];
  v51 = v95[1];
  LODWORD(v75) = v96;
LABEL_9:
  outlined init with copy of _VariadicView_Children(v39, (uint64_t)v95);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)&v93[0] = 0;
  v59 = v81;
  swift_retain();
  swift_retain();
  BindingOperations.NilCoalescing.init(defaultValue:)();
  v60 = v88[0];
  v88[0].n128_u64[0] = KeyPath;
  *(__n128 *)((char *)v88 + 8) = v60;
  v61 = v60.n128_u64[0];
  if ((v76 & 1) == 0)
    v61 = v77;
  v80 = (char *)v61;
  type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>, MEMORY[0x1E0CE41C8]);
  swift_retain();
  v77 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release_n();
  v62 = v86;
  AdaptableTabView.defaultPlacement.getter(v88);
  v63 = v88[0].n128_u8[0];
  swift_retain();
  swift_retain();
  v64 = AdaptableTabView.accessoryViewConfiguration.getter();
  v66 = v65;
  v68 = v67;
  AdaptableTabView.contentMode.getter(v93);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v69 = *(_BYTE *)(v62 + *(int *)(v78 + 64));
  v88[0].n128_u8[0] = v63;
  v88[0].n128_u64[1] = v49;
  v88[1].n128_u64[0] = v51;
  v88[1].n128_u8[8] = v75;
  *(_QWORD *)&v89 = v64;
  *((_QWORD *)&v89 + 1) = v66;
  v90 = v68;
  v91 = v93[0];
  v92 = v69;
  v70 = v84;
  default argument 0 of AdaptableTabView.BodyContent.init(customization:sizeClass:children:selectedIndex:sidebarConfiguration:)(v84);
  *(_QWORD *)&v93[0] = swift_getKeyPath();
  BYTE8(v93[0]) = 0;
  *(_QWORD *)&result = AdaptableTabView.BodyContent.init(customization:sizeClass:children:selectedIndex:sidebarConfiguration:)((uint64_t)v70, (uint64_t *)v93, (uint64_t)v95, v59, v77, (uint64_t)v80, v88, v83, v85, v82).n128_u64[0];
  return result;
}

uint64_t default argument 0 of AdaptableTabView.BodyContent.init(customization:sizeClass:children:selectedIndex:sidebarConfiguration:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0);
  return swift_storeEnumTagMultiPayload();
}

__n128 AdaptableTabView.BodyContent.init(customization:sizeClass:children:selectedIndex:sidebarConfiguration:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __n128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  __n128 *v25;
  __n128 result;
  unsigned __int16 v27;
  unint64_t v28;
  __n128 v29;

  v13 = *a2;
  v14 = *((_BYTE *)a2 + 8);
  v15 = a7->n128_u8[0];
  v16 = a7->n128_u64[1];
  v17 = a7[1].n128_u64[0];
  v18 = a7[1].n128_u8[8];
  v29 = a7[2];
  v28 = a7[3].n128_u64[0];
  v27 = a7[3].n128_u16[4];
  outlined init with take of Binding<SearchFieldState>(a1, a9, (uint64_t)&lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t)type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E0CE1160], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v20 = (int *)type metadata accessor for AdaptableTabView.BodyContent(0, a8, a10, v19);
  v21 = a9 + v20[9];
  *(_QWORD *)v21 = v13;
  *(_BYTE *)(v21 + 8) = v14;
  v22 = a9 + v20[10];
  v23 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v22 = *(_OWORD *)a3;
  *(_OWORD *)(v22 + 16) = v23;
  *(_OWORD *)(v22 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v22 + 48) = *(_QWORD *)(a3 + 48);
  v24 = (_QWORD *)(a9 + v20[11]);
  *v24 = a4;
  v24[1] = a5;
  v24[2] = a6;
  v25 = (__n128 *)(a9 + v20[12]);
  v25->n128_u8[0] = v15;
  v25->n128_u64[1] = v16;
  v25[1].n128_u64[0] = v17;
  v25[1].n128_u8[8] = v18;
  result = v29;
  v25[2] = v29;
  v25[3].n128_u64[0] = v28;
  v25[3].n128_u16[4] = v27;
  return result;
}

uint64_t AdaptableTabView.BodyContent.sizeClass.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = *(_QWORD *)v4;
  v6 = *(_BYTE *)(v4 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v4, v6);
  specialized Environment.wrappedValue.getter(v5, v6, a2);
  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance AdaptableTabView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void base witness table accessor for _AttributeBody in SidebarAdaptableTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t AdaptableTabView.BodyContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for AdaptableTabView.BodyContent(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  AdaptableTabView.BodyContent.representable(onlyTabs:)(1, v4, a3);
  v5 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>();
  return AdaptableTabView.BodyContent.representable(onlyTabs:)(0, v4, a3 + *(int *)(v5 + 52));
}

uint64_t AdaptableTabView.BodyContent.representable(onlyTabs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[12];
  int v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  _OWORD v64[6];
  _QWORD v65[12];
  _OWORD v66[12];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  LODWORD(v58) = a1;
  v6 = type metadata accessor for UIKitAdaptableTabView();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = a2;
  v60 = v3;
  v14 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    result = _VariadicView_Children.endIndex.getter();
    if (v14 < 0 || result < v14)
      goto LABEL_18;
    v54 = (int *)v6;
    v55 = v9;
    v56 = v13;
    v57 = a3;
    v16 = MEMORY[0x1E0DEE9D8];
    if (!v14)
    {
LABEL_15:
      v27 = v58 & 1;
      v29 = v59;
      v28 = v60;
      AdaptableTabView.BodyContent.parseChildren(items:onlyTabs:)(v16, v58 & 1, v59, (uint64_t *)&v67);
      v58 = *((_QWORD *)&v67 + 1);
      v53 = v67;
      v30 = v68;
      v51 = v69;
      v52 = static AdaptableTabView.makeSelectionCache(items:selectionValueOnlyIncludesTabs:processedTabs:)(v16, v27, v67, *(_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 24));
      swift_bridgeObjectRelease();
      v31 = (unsigned __int8 *)(v28 + *(int *)(v29 + 48));
      v50 = *v31;
      v32 = *((_QWORD *)v31 + 1);
      v34 = *((_QWORD *)v31 + 4);
      v35 = *((_QWORD *)v31 + 5);
      v36 = *((_QWORD *)v31 + 6);
      v47 = *((_QWORD *)v31 + 2);
      v33 = v47;
      v48 = v36;
      LODWORD(v59) = *((unsigned __int16 *)v31 + 28);
      v38 = v54;
      v37 = (uint64_t)v55;
      v49 = &v55[v54[6]];
      v46 = v31[24];
      swift_retain();
      swift_retain();
      outlined copy of Binding<NavigationSplitViewColumn>?(v32, v33);
      v39 = v48;
      outlined copy of TabSidebarAccessoryViewConfiguration?(v34);
      specialized Environment.wrappedValue.getter((uint64_t)v49);
      *(_OWORD *)v37 = v30;
      *(_QWORD *)(v37 + 16) = v51;
      *(_BYTE *)(v37 + 24) = v50;
      v40 = v47;
      *(_QWORD *)(v37 + 32) = v32;
      *(_QWORD *)(v37 + 40) = v40;
      *(_BYTE *)(v37 + 48) = v46;
      *(_QWORD *)(v37 + 56) = v34;
      *(_QWORD *)(v37 + 64) = v35;
      *(_QWORD *)(v37 + 72) = v39;
      *(_WORD *)(v37 + 80) = v59;
      *(_QWORD *)(v37 + v38[7]) = v53;
      *(_QWORD *)(v37 + v38[8]) = v58;
      *(_QWORD *)(v37 + v38[9]) = v52;
      v41 = (uint64_t)v56;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for UIKitAdaptableTabView);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, (uint64_t (*)(_QWORD))type metadata accessor for UIKitAdaptableTabView);
      LOBYTE(v34) = static Edge.Set.all.getter();
      swift_release();
      swift_release();
      v42 = v57;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v41, v57, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
      type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
      v44 = v42 + *(int *)(v43 + 36);
      *(_QWORD *)v44 = -1;
      *(_BYTE *)(v44 + 8) = v34;
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
    }
    v74 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v17 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v66[2] = v66[8];
      v66[3] = v66[9];
      v66[4] = v66[10];
      v66[5] = v66[11];
      v66[0] = v66[6];
      v66[1] = v66[7];
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v66, (uint64_t)v65);
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v65, (uint64_t)v64);
      v63 = v65[11];
      v61 = 0;
      v62 = 1;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      if (BYTE8(v67) == 1)
        v18 = AGMakeUniqueID();
      else
        v18 = v67;
      outlined destroy of _VariadicView_Children.Element((uint64_t)v65);
      v73 = v18;
      v71 = v64[4];
      v72 = v64[5];
      v67 = v64[0];
      v68 = v64[1];
      v69 = v64[2];
      v70 = v64[3];
      outlined destroy of _VariadicView_Children.Element((uint64_t)v66);
      v16 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v74;
      }
      v20 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1);
        v16 = v74;
      }
      *(_QWORD *)(v16 + 16) = v20 + 1;
      v21 = v16 + 104 * v20;
      v22 = v67;
      v23 = v69;
      *(_OWORD *)(v21 + 48) = v68;
      *(_OWORD *)(v21 + 64) = v23;
      *(_OWORD *)(v21 + 32) = v22;
      v24 = v70;
      v25 = v71;
      v26 = v72;
      *(_QWORD *)(v21 + 128) = v73;
      *(_OWORD *)(v21 + 96) = v25;
      *(_OWORD *)(v21 + 112) = v26;
      *(_OWORD *)(v21 + 80) = v24;
      result = _VariadicView_Children.endIndex.getter();
      if (v17 >= result)
        break;
      if (v14 == ++v17)
        goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t AdaptableTabView.BodyContent.parseChildren(items:onlyTabs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;

  v5 = v4;
  v7 = a2;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v10 + 16))(v13, v5, v11);
  if ((v7 & 1) == 0)
  {
    AdaptableTabView.BodyContent.sizeClass.getter(a3, &v32);
    v14 = v32;
    if (v32 == 2)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
      if ((v14 & 1) == 0)
        goto LABEL_6;
    }
    v15 = (uint64_t)static AdaptableTabView.makeTabGroups(_:)(a1, *(NSObject **)(a3 + 16), *(_QWORD *)(a3 + 24));
    v17 = v29;
    v30 = (uint64_t *)(v5 + *(int *)(a3 + 44));
    v23 = *v30;
    v25 = v30[1];
    v27 = v30[2];
    swift_retain();
    result = swift_retain();
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
LABEL_6:
  v15 = static AdaptableTabView.extractTabs(_:)(a1);
  v17 = v16;
  v18 = (uint64_t *)(v5 + *(int *)(a3 + 44));
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[2];
  type metadata accessor for ItemIndexTabsOnlyIndexProjection();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v22 = specialized ItemIndexTabsOnlyIndexProjection.init(_:)(a1);
  swift_bridgeObjectRelease();
  v23 = specialized Binding.projecting<A>(_:)(v22, v19, v20, v21);
  v25 = v24;
  v27 = v26;
  swift_release();
  swift_release();
  result = swift_release();
LABEL_8:
  *a4 = v15;
  a4[1] = v17;
  a4[2] = v23;
  a4[3] = v25;
  a4[4] = v27;
  return result;
}

id UIKitAdaptableTabView.makeUIViewController(context:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  v2 = *a1;
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitTabBarController()), sel_init);
  objc_msgSend(v3, sel_setDelegate_, v2);
  v4 = objc_msgSend(v3, sel__uip_sidebar);
  objc_msgSend(v4, sel__setDelegate_, v2);

  objc_msgSend(v3, sel__uip_setPreferredSidebarMode_, qword_187C29080[*(char *)(v1 + 81)]);
  swift_unknownObjectWeakAssign();
  return v3;
}

void UIKitAdaptableTabView.updateUIViewController(_:context:)(void *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  id v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint8_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Class isa;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;

  v3 = v2;
  v6 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1E0C80A78](v6, v7);
  v109 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v123 = (uint64_t)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v122 = v12;
  v121 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v108 = (uint64_t)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v15, v16);
  v110 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v111 = (char *)&v107 - v20;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v117 = (char *)&v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a2;
  v126 = a2[1];
  v26 = a2[2];
  v25 = a2[3];
  v27 = (uint64_t *)(v24 + direct field offset for TabViewCoordinator_Phone.viewControllers);
  swift_beginAccess();
  v125 = v27;
  v28 = *v27;
  v133 = v26;
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    v128 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v128 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v131 = (int *)type metadata accessor for UIKitAdaptableTabView();
  v129 = v131[7];
  v29 = *(_QWORD *)((char *)v3 + v129);
  v127 = *(_QWORD *)(v29 + 16);
  v30 = *v3;
  v31 = v3[1];
  v32 = v3[2];
  *(_QWORD *)&v137 = *v3;
  *((_QWORD *)&v137 + 1) = v31;
  v138 = v32;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v34 = v33;
  MEMORY[0x18D75B9C8](&v135);
  v120 = v135;
  v132 = v24;
  v35 = v24 + direct field offset for TabViewCoordinator_Phone.selected;
  v36 = *(_QWORD *)(v35 + 16);
  v137 = *(_OWORD *)v35;
  v138 = v36;
  v124 = v34;
  MEMORY[0x18D75B9C8](&v135, v34);
  v119 = v135;
  v37 = objc_msgSend(a1, sel_selectedIndex);
  v38 = NSNotFound.getter();
  v130 = a1;
  if (v37 == (id)v38)
  {
    v118 = 0;
  }
  else
  {
    v39 = objc_msgSend(a1, sel_selectedIndex);
    *(_QWORD *)&v137 = v133;
    *((_QWORD *)&v137 + 1) = v25;
    EnvironmentValues.horizontalSizeClass.getter();
    v40 = (v135 & 1) != 0 || v135 == 2;
    v41 = 7;
    if (!v40)
      v41 = 4;
    v42 = v41 < (uint64_t)v39;
    a1 = v130;
    v43 = !v42;
    v118 = v43;
  }
  v116 = v3;
  v44 = objc_msgSend(a1, sel_tabBar);
  v115 = v25;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>, (uint64_t)&type metadata for SpringLoadingBehavior.Key, (uint64_t)&protocol witness table for SpringLoadingBehavior.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v25)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  objc_msgSend(v44, sel_setSpringLoaded_, v137 != 2);

  *(_QWORD *)v35 = v30;
  *(_QWORD *)(v35 + 8) = v31;
  *(_QWORD *)(v35 + 16) = v32;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v45 = v132;
  *(_QWORD *)(v132 + direct field offset for TabViewCoordinator_Phone.tabs) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = v131;
  v47 = v116;
  *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.tabCache) = *(_QWORD *)((char *)v116 + v131[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48 = *(_QWORD *)((char *)v47 + v46[9]);
  v49 = (_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.selectionCache);
  swift_beginAccess();
  *v49 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = *((unsigned __int8 *)v47 + 24);
  v51 = v47[4];
  v52 = v47[5];
  v53 = v47[7];
  v54 = v47[8];
  v55 = v47[9];
  v56 = *((unsigned __int8 *)v47 + 48);
  v57 = *((_WORD *)v47 + 40);
  v58 = v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration;
  v59 = *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration);
  v60 = *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 8);
  v61 = *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 16);
  v114 = *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 24);
  v62 = *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 32);
  v113 = *(_QWORD *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 40);
  v112 = *(unsigned __int16 *)(v45 + direct field offset for TabViewCoordinator_Phone.sidebarConfiguration + 56);
  *(_QWORD *)v58 = v50;
  *(_QWORD *)(v58 + 8) = v51;
  *(_QWORD *)(v58 + 16) = v52;
  *(_QWORD *)(v58 + 24) = v56;
  *(_QWORD *)(v58 + 32) = v53;
  *(_QWORD *)(v58 + 40) = v54;
  *(_QWORD *)(v58 + 48) = v55;
  *(_WORD *)(v58 + 56) = v57;
  outlined copy of Binding<NavigationSplitViewColumn>?(v51, v52);
  v63 = (__int128 *)v47;
  outlined copy of TabSidebarAccessoryViewConfiguration?(v53);
  outlined consume of TabSidebarConfiguration?(v59, v60, v61, v114, v62);
  v64 = (uint64_t)v47 + v131[6];
  v65 = v45 + direct field offset for TabViewCoordinator_Phone.customization;
  swift_beginAccess();
  outlined assign with copy of Binding<TabViewCustomization>?(v64, v65);
  swift_endAccess();
  v66 = v115;
  if (v115)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>();
    v67 = v133;
    swift_retain_n();
    swift_retain_n();
    v68 = (uint64_t)v117;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>();
    v67 = v133;
    swift_retain_n();
    v68 = (uint64_t)v117;
    PropertyList.subscript.getter();
  }
  v69 = v130;
  v70 = v126;
  swift_release_n();
  v71 = v45 + direct field offset for TabViewCoordinator_Phone.searchState;
  swift_beginAccess();
  outlined assign with take of Binding<SearchFieldState>?(v68, v71);
  swift_endAccess();
  UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(v45, v64, v70);
  if (v128 != v127)
  {
    v72 = (uint64_t)v111;
    static Log.tabView.getter();
    v73 = type metadata accessor for Logger();
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v72, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      v79 = Logger.logObject.getter();
      v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v81 = 0;
        _os_log_impl(&dword_186E48000, v79, v80, "Building the tabview", v81, 2u);
        v82 = v81;
        v72 = (uint64_t)v111;
        MEMORY[0x18D760108](v82, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
      v69 = v130;
      v70 = v126;
    }
    v83 = *(_QWORD *)((char *)v63 + v129);
    v84 = *((_QWORD *)v63 + 2);
    v135 = *v63;
    v136 = v84;
    swift_bridgeObjectRetain();
    MEMORY[0x18D75B9C8](&v134, v124);
    v85 = v134;
    swift_retain();
    swift_retain();
    specialized static TabViewCoordinatorStrategy.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:coordinator:)(v83, v85, v67, v66, v70, v132);
LABEL_36:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_37;
  }
  if ((unint64_t)*v125 >> 62)
  {
    swift_bridgeObjectRetain();
    v75 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v75 = *(_QWORD *)((*v125 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v76 = (uint64_t)v110;
  if (v75)
  {
    static Log.tabView.getter();
    v77 = type metadata accessor for Logger();
    v78 = *(_QWORD *)(v77 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      v86 = Logger.logObject.getter();
      v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v88 = 0;
        _os_log_impl(&dword_186E48000, v86, v87, "Updating tabview hosts", v88, 2u);
        v89 = v88;
        v76 = (uint64_t)v110;
        MEMORY[0x18D760108](v89, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
      v69 = v130;
      v70 = v126;
    }
    v90 = *(_QWORD *)((char *)v63 + v129);
    v91 = v125;
    swift_beginAccess();
    UIKitAdaptableTabView.rearrangeHosts(_:toMatch:)((uint64_t)v91, v90);
    swift_endAccess();
    v92 = *v91;
    v93 = *((_QWORD *)v63 + 2);
    v135 = *v63;
    v136 = v93;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75B9C8](&v134, v124);
    v94 = v134;
    swift_retain();
    swift_retain();
    specialized static AdaptiveTabViewStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:)(v92, v90, v94, v67, v66, v70, v132);
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
LABEL_37:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v69, sel_setCustomizableViewControllers_, isa);

  v96 = v123;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v64, v123, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  v97 = v122;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v96, 1, v122) == 1)
  {
    v98 = type metadata accessor for Binding<TabViewCustomization>?;
    v99 = v96;
  }
  else
  {
    v100 = v108;
    outlined init with take of TableCellFormula(v96, v108, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    v101 = (uint64_t)v109;
    MEMORY[0x18D75B9C8](v97);
    TabViewCustomization.validateCustomization(entries:)(*(Swift::OpaquePointer *)((char *)v63 + v129));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v101, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    v99 = v100;
    v98 = type metadata accessor for Binding<TabViewCustomization>;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v99, (uint64_t (*)(_QWORD))v98);
  UIKitAdaptableTabView.dismissPresentationIfNeeded(coordinator:)();
  v102 = v118;
  if (v120 != v119)
    v102 = 1;
  if ((v102 & 1) != 0 || v128 != v127)
  {
    v103 = *v125;
    v104 = *(_QWORD *)((char *)v63 + v129);
    v105 = *((_QWORD *)v63 + 2);
    v135 = *v63;
    v136 = v105;
    swift_bridgeObjectRetain();
    MEMORY[0x18D75B9C8](&v134, v124);
    v106 = v134;
    *(_QWORD *)&v135 = v67;
    *((_QWORD *)&v135 + 1) = v66;
    swift_retain();
    swift_retain();
    UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(v69, v103, v104, v106, (uint64_t *)&v135);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t UIKitAdaptableTabView.rearrangeHosts(_:toMatch:)(uint64_t isUniquelyReferenced_nonNull_native, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _BYTE *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  _QWORD *v34;
  BOOL v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  unint64_t v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  os_log_type_t v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  id v66;
  id v67;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v69;
  uint64_t v70;
  id v71;
  int v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t result;
  __int128 v85;
  int v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t i;
  _QWORD *v90;
  uint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t *v94;
  _BYTE *v95;
  unint64_t v96;
  _BYTE v97[264];
  _BYTE v98[264];
  uint64_t v99;
  _QWORD v100[34];
  char v101;
  _QWORD *v102;
  _BYTE v103[288];

  v87 = a2;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (unint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
  if (*(_QWORD *)isUniquelyReferenced_nonNull_native >> 62)
    goto LABEL_25;
  v8 = *(_BYTE **)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v88 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  for (i = v6; v8; i = v6)
  {
    v93 = v7;
    v94 = (uint64_t *)(v7 & 0xC000000000000001);
    v9 = 4;
    v92 = v8;
    while (1)
    {
      v10 = v9 - 4;
      v11 = v94 ? (id)MEMORY[0x18D75E3BC](v9 - 4, v7) : *(id *)(v7 + 8 * v9);
      isUniquelyReferenced_nonNull_native = (uint64_t)v11;
      v12 = (_BYTE *)(v9 - 3);
      if (__OFADD__(v10, 1))
        break;
      v13 = objc_msgSend(v11, sel__uip_tabElement);
      if (v13)
      {
        v14 = v13;
        v95 = (_BYTE *)isUniquelyReferenced_nonNull_native;
        v15 = objc_msgSend(v13, sel__identifier);

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = v17;

        v19 = v96;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v102 = (_QWORD *)v19;
        v6 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
        v21 = *(_QWORD *)(v19 + 16);
        v22 = (v20 & 1) == 0;
        v23 = v21 + v22;
        if (__OFADD__(v21, v22))
          goto LABEL_23;
        v7 = v20;
        if (*(_QWORD *)(v19 + 24) >= v23)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
          v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
          if ((v7 & 1) != (v25 & 1))
            goto LABEL_88;
          v6 = v24;
        }
        v26 = v102;
        v96 = (unint64_t)v102;
        if ((v7 & 1) != 0)
        {
          *(_QWORD *)(v102[7] + 8 * v6) = v10;
        }
        else
        {
          v102[(v6 >> 6) + 8] |= 1 << v6;
          v27 = (uint64_t *)(v26[6] + 16 * v6);
          *v27 = v16;
          v27[1] = v18;
          *(_QWORD *)(v26[7] + 8 * v6) = v10;
          v28 = v26[2];
          v29 = __OFADD__(v28, 1);
          v30 = v28 + 1;
          if (v29)
            goto LABEL_24;
          v26[2] = v30;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = v92;
        v7 = v93;
      }
      else
      {

      }
      ++v9;
      if (v12 == v8)
        goto LABEL_26;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
    v8 = (_BYTE *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v88 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v87 + 16);
  v91 = v87 + 32;
  v92 = &v98[8];
  v90 = &v100[1];
  v94 = &v99;
  v95 = v103;
  swift_bridgeObjectRetain();
  v32 = 0;
  *(_QWORD *)&v33 = 134218752;
  v85 = v33;
  v34 = v88;
  v93 = v31;
  v35 = v31 == 0;
  if (v31)
    goto LABEL_31;
LABEL_30:
  memset(v100, 0, sizeof(v100));
  v32 = v31;
  v101 = -1;
  while (1)
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v100, (uint64_t)&v102, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry)?, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TabEntry), (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
    if (v103[264] == 255)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v37 = (unint64_t)v102;
    outlined init with take of TabEntry(v95, v100);
    v38 = *v34;
    if ((*v34 & 0xC000000000000001) != 0)
    {
      v39 = (id)MEMORY[0x18D75E3BC](v37);
      goto LABEL_38;
    }
    if ((v37 & 0x8000000000000000) != 0)
      break;
    if (v37 >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_80;
    v39 = *(id *)(v38 + 8 * v37 + 32);
LABEL_38:
    v40 = v39;
    v41 = objc_msgSend(v39, sel__uip_tabElement, (_QWORD)v85, *((_QWORD *)&v85 + 1));

    if (!v41)
      goto LABEL_29;
    v42 = v32;
    v43 = v34;
    v44 = objc_msgSend(v41, sel__identifier);

    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v47 = v46;

    outlined init with copy of TabEntry((uint64_t)v100, (uint64_t)v98);
    if ((*(_BYTE *)v94 & 1) != 0)
    {
      memcpy(v97, v98, sizeof(v97));
      v48 = *(_QWORD *)&v97[24];
      v49 = *(_QWORD *)&v97[32];
      outlined copy of TabCustomizationID.Base();
      outlined destroy of TabItemGroup((uint64_t)v97);
      if (v48 != v45)
        goto LABEL_45;
    }
    else
    {
      *(_OWORD *)&v97[64] = *(_OWORD *)&v98[64];
      *(_OWORD *)&v97[80] = *(_OWORD *)&v98[80];
      *(_QWORD *)&v97[96] = *(_QWORD *)&v98[96];
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *(_OWORD *)&v97[16] = *(_OWORD *)&v98[16];
      *(_OWORD *)&v97[32] = *(_OWORD *)&v98[32];
      *(_OWORD *)&v97[48] = *(_OWORD *)&v98[48];
      v48 = TabItem.platformIdentifier.getter();
      v49 = v50;
      outlined destroy of TabItem((uint64_t)v97);
      if (v48 != v45)
        goto LABEL_45;
    }
    if (v49 == v47)
    {
      swift_bridgeObjectRelease();
      v34 = v43;
      goto LABEL_46;
    }
LABEL_45:
    v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v34 = v43;
    if ((v51 & 1) == 0)
    {
      v52 = v96;
      v32 = v42;
      if (*(_QWORD *)(v96 + 16))
      {
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
        if ((v54 & 1) != 0)
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
          swift_bridgeObjectRelease();
          v56 = i;
          static Log.tabView.getter();
          v57 = type metadata accessor for Logger();
          v58 = *(_QWORD *)(v57 - 8);
          v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57);
          v31 = v93;
          if (v59 == 1)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
          }
          else
          {
            v60 = Logger.logObject.getter();
            v61 = static os_log_type_t.default.getter();
            v62 = v61;
            if (os_log_type_enabled(v60, v61))
            {
              v63 = (_DWORD *)swift_slowAlloc();
              v86 = v62;
              v64 = v63;
              *v63 = v85;
              *(_QWORD *)v98 = v55;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *((_WORD *)v64 + 6) = 2048;
              *(_QWORD *)v98 = v37;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *((_WORD *)v64 + 11) = 2048;
              *(_QWORD *)v98 = v37;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *((_WORD *)v64 + 16) = 2048;
              *(_QWORD *)v98 = v55;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_186E48000, v60, (os_log_type_t)v86, "Swapping host from idx %ld to %ld,\nmoving other host at %ld to %ld to\nget it out of the way", (uint8_t *)v64, 0x2Au);
              MEMORY[0x18D760108](v64, -1, -1);
            }

            (*(void (**)(unint64_t, uint64_t))(v58 + 8))(i, v57);
          }
          v34 = v88;
          v65 = *v88;
          if ((*v88 & 0xC000000000000001) != 0)
          {
            v66 = (id)MEMORY[0x18D75E3BC](v37, *v88);
            v65 = *v34;
            if ((*v34 & 0xC000000000000001) == 0)
              goto LABEL_59;
          }
          else
          {
            if ((v37 & 0x8000000000000000) != 0)
              goto LABEL_82;
            if (v37 >= *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_83;
            v66 = *(id *)(v65 + 8 * v37 + 32);
            if ((v65 & 0xC000000000000001) == 0)
            {
LABEL_59:
              if ((v55 & 0x8000000000000000) != 0)
                goto LABEL_84;
              if (v55 >= *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_86;
              v67 = *(id *)(v65 + 8 * v55 + 32);
LABEL_62:
              isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *v34 = v65;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v65 < 0 || (v65 & 0x4000000000000000) != 0)
                specialized _ArrayBuffer._consumeAndCreateNew()(v65);
              v69 = *(void **)((v65 & 0xFFFFFFFFFFFFFF8) + 8 * v37 + 0x20);
              *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 8 * v37 + 0x20) = v67;

              specialized Array._endMutation()();
              v70 = *v34;
              v71 = v66;
              v72 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *v34 = v70;
              if (!v72 || v70 < 0 || (v70 & 0x4000000000000000) != 0)
                specialized _ArrayBuffer._consumeAndCreateNew()(v70);
              if ((v55 & 0x8000000000000000) != 0)
                goto LABEL_85;
              if (v55 >= *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_87;
              v73 = *(void **)((v70 & 0xFFFFFFFFFFFFFF8) + 8 * v55 + 0x20);
              *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFF8) + 8 * v55 + 0x20) = v71;

              specialized Array._endMutation()();
              v74 = objc_msgSend(v71, sel__uip_tabElement);
              if (v74)
              {
                v75 = v74;
                v76 = objc_msgSend(v74, sel__identifier);
                v77 = v34;
                v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v80 = v79;

                v81 = v96;
                v82 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)v98 = v81;
                v83 = v78;
                v34 = v77;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, v83, v80, v82);
                v96 = *(_QWORD *)v98;

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {

              }
LABEL_29:
              outlined destroy of TabEntry((uint64_t)v100);
              v35 = v32 >= v31;
              if (v32 == v31)
                goto LABEL_30;
              goto LABEL_31;
            }
          }
          v67 = (id)MEMORY[0x18D75E3BC](v55, v65);
          v65 = *v34;
          goto LABEL_62;
        }
      }
      swift_bridgeObjectRelease();
      v31 = v93;
      goto LABEL_29;
    }
LABEL_46:
    outlined destroy of TabEntry((uint64_t)v100);
    swift_bridgeObjectRelease();
    v31 = v93;
    v32 = v42;
    v35 = v42 >= v93;
    if (v42 == v93)
      goto LABEL_30;
LABEL_31:
    if (v35)
      goto LABEL_81;
    v36 = v92;
    outlined init with copy of TabEntry(v91 + 272 * v32, (uint64_t)v92);
    v100[0] = v32;
    outlined init with take of TabEntry(v36, v90);
    ++v32;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void UIKitAdaptableTabView.dismissPresentationIfNeeded(coordinator:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  type metadata accessor for UIKitAdaptableTabView();
  v0 = swift_bridgeObjectRetain();
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_Sis5NeverOTg503_s7d18UI21UIKitAdaptablef146View33_BC84A4987A84428C24F1F51C778C096CLLV27dismissPresentationIfNeeded11coordinatoryAA0eF17Coordinator_PhoneCyAA08AdaptiveeF8StrategyVG_tFSiAA0E5G54Ocfu_33_88b05e132e72830fd289708f1134f08dAMSiTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v1 + 8 * v3 + 32);
      v6 = __OFADD__(v4, v5);
      v4 += v5;
      if (v6)
      {
        __break(1u);
        return;
      }
      ++v3;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
    if (!v4)
      goto LABEL_9;
    if (v4 >= 2)
      MEMORY[0x18D75AC90](0xD00000000000008FLL, 0x8000000187BDE460);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_9:
    specialized TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(MEMORY[0x1E0DEE9D8], 0, 0);
  }
}

uint64_t UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  id v32;
  id v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD __src[33];
  char v38;
  _BYTE __dst[272];

  v10 = *a5;
  v11 = a5[1];
  result = type metadata accessor for UIKitAdaptableTabView();
  v13 = *(_QWORD *)(v5 + *(int *)(result + 36));
  if (!*(_QWORD *)(v13 + 16))
    return result;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v14 & 1) == 0)
    return result;
  v15 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 32 * result);
  v17 = *v15;
  v16 = v15[1];
  v18 = v15[3];
  v36 = v15[2];
  if ((a2 & 0xC000000000000001) == 0)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v16 < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v19 = *(void **)(a2 + 8 * v16 + 32);
      swift_bridgeObjectRetain();
      v20 = v19;
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v20 = (id)MEMORY[0x18D75E3BC](v16, a2);
LABEL_7:
  v21 = v20;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v22 = swift_dynamicCastClass();
  if (!v22)
  {
LABEL_19:
    swift_getObjectType();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v23 = (void *)v22;
  if ((v16 & 0x8000000000000000) != 0 || v16 >= *(_QWORD *)(a3 + 16))
  {
    v26 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with copy of TabEntry(a3 + 272 * v16 + 32, (uint64_t)__src);
    if ((v38 & 1) != 0)
    {
      memcpy(__dst, __src, 0x108uLL);
      v24 = v21;
      v35 = v17;
      v25 = objc_msgSend(v23, sel__uip_tabElement);
      TabItemGroup.updateChildSelection(in:selectedID:)((uint64_t)v25, v36, v18);

      v17 = v35;
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
    }
    else
    {
      v33 = v21;
      swift_bridgeObjectRelease();
      outlined destroy of TabEntry((uint64_t)__src);
    }
  }
  swift_bridgeObjectRetain();
  v27 = swift_bridgeObjectRetain();
  v28 = specialized Sequence.filter(_:)(v27, a3);
  v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16UIViewControllerC_7SwiftUI8TabEntryOtG_AGs5NeverOTg506_sSo16de2C7f3UI8hi19OABIggno_AB_AEtABs5J233OIegnrzr_TR03_s7c18UI21UIKitAdaptablee112View33_BC84A4987A84428C24F1F51C778C096CLLV03setF11Controllers2on03allfP04tabs8selected11environmentySo18UITabBarb9C_SaySo06a12X0CGSayAA0E5F41OGSiAA17EnvironmentValuesVtFA2N_AQtXEfU0_Tf3nnnpf_nTf1cn_n(v28);
  swift_bridgeObjectRelease();
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = a1;
  v30[3] = v29;
  v30[4] = v17;
  v30[5] = v23;
  v30[6] = v10;
  v30[7] = v11;
  swift_retain();
  v31 = v21;
  v32 = a1;
  swift_retain();
  static Update.enqueueAction(_:)();

  return swift_release();
}

void closure #3 in UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(void *a1, uint64_t a2, id a3, char *a4, uint64_t a5, uint64_t a6)
{
  Class isa;
  __int128 v12;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setViewControllers_, isa);

  if (objc_msgSend(a1, sel_selectedIndex) != a3)
    objc_msgSend(a1, sel_setSelectedIndex_, a3);
  *(_QWORD *)&v12 = a5;
  *((_QWORD *)&v12 + 1) = a6;
  UITabBarController.updateColorScheme(selectedHostVC:environment:)(a4, &v12);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance UIKitAdaptableTabView@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  Class v18;
  id v19;
  id v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[7];
  __int16 v27;

  v23 = a1;
  v25 = a2;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v2;
  v8 = *(_QWORD *)(v2 + 8);
  v24 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 32);
  v10 = *(_QWORD *)(v2 + 40);
  v12 = *(_QWORD *)(v2 + 56);
  v11 = *(_QWORD *)(v2 + 64);
  v13 = *(_QWORD *)(v2 + 72);
  v14 = *(unsigned __int8 *)(v2 + 48);
  v15 = *(_WORD *)(v2 + 80);
  v26[0] = *(unsigned __int8 *)(v2 + 24);
  v26[1] = v9;
  v26[2] = v10;
  v26[3] = v14;
  v26[4] = v12;
  v26[5] = v11;
  v26[6] = v13;
  v16 = v2 + *(int *)(v23 + 24);
  v27 = v15;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v16, (uint64_t)v6, v17);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TabViewCoordinator_Phone<AdaptiveTabViewStrategy>, (uint64_t)&type metadata for AdaptiveTabViewStrategy, (uint64_t)&protocol witness table for AdaptiveTabViewStrategy, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TabViewCoordinator_Phone);
  v19 = objc_allocWithZone(v18);
  swift_retain();
  swift_retain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v9, v10);
  outlined copy of TabSidebarAccessoryViewConfiguration?(v12);
  v20 = specialized TabViewCoordinator_Phone.init(selected:sidebarConfiguration:customization:tabs:)(v7, v8, v24, (uint64_t)v26, (uint64_t)v6, MEMORY[0x1E0DEE9D8]);
  swift_release();
  result = swift_release();
  *v25 = v20;
  return result;
}

void protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance UIKitAdaptableTabView(uint64_t a1@<X8>)
{
  UITabBarController.identifiedViewTree.getter(a1);
}

uint64_t specialized static AdaptiveTabViewStrategy.host<A>(tab:tabs:searchAdjustment:selected:environment:coordinator:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  void *v29;
  Class v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  _OWORD v46[17];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _BYTE v54[264];
  char v55;
  _OWORD v56[6];
  uint64_t v57;

  v45 = (void *)a6;
  LODWORD(v10) = a3;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a7 + direct field offset for TabViewCoordinator_Phone.tabCache);
  if (!v17)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with copy of TabEntry(a1, (uint64_t)v54);
  if ((v55 & 1) != 0)
  {
    memcpy(v46, v54, 0x108uLL);
    v18 = (uint64_t *)(a7 + direct field offset for TabViewCoordinator_Phone.selectionCache);
    swift_beginAccess();
    v19 = *v18;
    v44 = v10;
    v43 = a2;
    if (v19)
    {
      if (*(_QWORD *)(v19 + 16))
      {
        v20 = a5;
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
        if ((v22 & 1) != 0)
        {
          v23 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 32 * v21);
          v24 = v23[1];
          v10 = v23[2];
          v25 = v23[3];
          swift_bridgeObjectRetain();
LABEL_11:
          swift_endAccess();
          swift_bridgeObjectRetain();
          v26 = v24;
          a5 = v20;
          specialized static AdaptiveTabViewStrategy.visibleTab<A>(in:selectionInfo:tabCache:tabs:environment:)(v46, v26, v10, v25, v17, v43, v20, (uint64_t)&v47, (uint64_t)v45);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v46);
          LOBYTE(v10) = v44;
          goto LABEL_12;
        }
      }
      else
      {
        v20 = a5;
      }
    }
    else
    {
      v20 = a5;
    }
    v24 = 0;
    v10 = 0;
    v25 = 0;
    goto LABEL_11;
  }
  v51 = *(_OWORD *)&v54[64];
  v52 = *(_OWORD *)&v54[80];
  v53 = *(_QWORD *)&v54[96];
  v47 = *(_OWORD *)v54;
  v48 = *(_OWORD *)&v54[16];
  v49 = *(_OWORD *)&v54[32];
  v50 = *(_OWORD *)&v54[48];
LABEL_12:
  v56[4] = v51;
  v56[5] = v52;
  v57 = v53;
  v56[0] = v47;
  v56[1] = v48;
  v56[2] = v49;
  v56[3] = v50;
  outlined init with copy of TabEntry(a1, (uint64_t)v54);
  if (v55 == 1)
  {
    memcpy(v46, v54, 0x108uLL);
    v27 = specialized static AdaptiveTabViewStrategy.host(for:child:searchAdjustment:)((uint64_t)v46, (uint64_t)v56, v10);
    v29 = v28;
    outlined destroy of TabItemGroup((uint64_t)v46);
  }
  else
  {
    outlined init with copy of TabItem((uint64_t)v56, (uint64_t)v46);
    BYTE8(v46[6]) = 0;
    BYTE9(v46[6]) = v10;
    outlined init with copy of TabItem.RootView((uint64_t)v46, (uint64_t)&v47);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    v31 = objc_allocWithZone(v30);
    v27 = specialized UIHostingController.init(rootView:)((uint64_t)&v47);
    outlined destroy of TabItem.RootView((uint64_t)v46);
    outlined destroy of TabEntry((uint64_t)v54);
    v29 = 0;
  }
  v32 = (uint64_t)v45;
  v33 = a7 + direct field offset for TabViewCoordinator_Phone.customization;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v33, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  outlined init with copy of TabEntry(a1, (uint64_t)v54);
  if ((v55 & 1) != 0)
  {
    memcpy(v46, v54, 0x108uLL);
    specialized UIHostingController.updateTabGroupCreatingIfNeeded<A>(using:customization:environment:coordinator:)((uint64_t)v46, (uint64_t)v16, a5, v32, a7);
    outlined destroy of TabItemGroup((uint64_t)v46);
  }
  else
  {
    v46[4] = *(_OWORD *)&v54[64];
    v46[5] = *(_OWORD *)&v54[80];
    *(_QWORD *)&v46[6] = *(_QWORD *)&v54[96];
    v46[0] = *(_OWORD *)v54;
    v46[1] = *(_OWORD *)&v54[16];
    v46[2] = *(_OWORD *)&v54[32];
    v46[3] = *(_OWORD *)&v54[48];
    specialized UIHostingController.updateTabElementCreatingIfNeeded<A>(using:customization:environment:coordinator:)((uint64_t)v46, (uint64_t)v16, a5, v32);
    outlined destroy of TabItem((uint64_t)v46);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  if (v29)
  {
    v34 = v29;
    v45 = v29;
    v35 = v34;
    v36 = TabItem.platformIdentifier.getter();
    v38 = v37;
    v39 = TabEntry.platformIdentifier.getter();
    specialized TabViewCoordinator_Phone.cacheChild(_:childID:for:)(v35, v36, v38, v39, v40);

    v29 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  specialized UIHostingController<>.updateTabEnvironment<A>(environment:coordinator:)();

  outlined destroy of TabItem((uint64_t)v56);
  return (uint64_t)v27;
}

uint64_t static AdaptiveTabViewStrategy.host<A>(tab:tabs:searchAdjustment:selected:environment:coordinator:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  Class v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  void *v47;
  _OWORD v48[17];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[264];
  char v57;
  __int128 v58[6];
  uint64_t v59;

  v46 = a8;
  LODWORD(v12) = a3;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a6 + direct field offset for TabViewCoordinator_Phone.tabCache);
  if (!v19)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v20 = *a5;
  v21 = (uint64_t)a5[1];
  v47 = v20;
  outlined init with copy of TabEntry(a1, (uint64_t)v56);
  if (v57 == 1)
  {
    v44[1] = a7;
    memcpy(v48, v56, 0x108uLL);
    v22 = (uint64_t *)(a6 + direct field offset for TabViewCoordinator_Phone.selectionCache);
    swift_beginAccess();
    v23 = *v22;
    v45 = v12;
    v44[2] = a2;
    if (v23)
    {
      if (*(_QWORD *)(v23 + 16))
      {
        v24 = v21;
        v25 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
        if ((v26 & 1) != 0)
        {
          v27 = *(_QWORD *)(v23 + 56) + 32 * v25;
          v28 = *(_QWORD *)(v27 + 16);
          v12 = *(_QWORD *)(v27 + 24);
          swift_bridgeObjectRetain();
LABEL_11:
          swift_endAccess();
          *(_QWORD *)&v58[0] = v47;
          *((_QWORD *)&v58[0] + 1) = v24;
          swift_bridgeObjectRetain();
          v21 = v24;
          static AdaptiveTabViewStrategy.visibleTab<A>(in:selectionInfo:tabCache:tabs:environment:)(v48, v28, v12, v19, v58, (uint64_t)&v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v48);
          LOBYTE(v12) = v45;
          goto LABEL_12;
        }
      }
      else
      {
        v24 = v21;
      }
    }
    else
    {
      v24 = v21;
    }
    v28 = 0;
    v12 = 0;
    goto LABEL_11;
  }
  v53 = *(_OWORD *)&v56[64];
  v54 = *(_OWORD *)&v56[80];
  v55 = *(_QWORD *)&v56[96];
  v49 = *(_OWORD *)v56;
  v50 = *(_OWORD *)&v56[16];
  v51 = *(_OWORD *)&v56[32];
  v52 = *(_OWORD *)&v56[48];
LABEL_12:
  v58[4] = v53;
  v58[5] = v54;
  v59 = v55;
  v58[0] = v49;
  v58[1] = v50;
  v58[2] = v51;
  v58[3] = v52;
  outlined init with copy of TabEntry(a1, (uint64_t)v56);
  if (v57 == 1)
  {
    memcpy(v48, v56, 0x108uLL);
    v29 = specialized static AdaptiveTabViewStrategy.host(for:child:searchAdjustment:)((uint64_t)v48, (uint64_t)v58, v12);
    v31 = v30;
    outlined destroy of TabItemGroup((uint64_t)v48);
  }
  else
  {
    outlined init with copy of TabItem((uint64_t)v58, (uint64_t)v48);
    BYTE8(v48[6]) = 0;
    BYTE9(v48[6]) = v12;
    outlined init with copy of TabItem.RootView((uint64_t)v48, (uint64_t)&v49);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    v33 = objc_allocWithZone(v32);
    v29 = specialized UIHostingController.init(rootView:)((uint64_t)&v49);
    outlined destroy of TabItem.RootView((uint64_t)v48);
    outlined destroy of TabEntry((uint64_t)v56);
    v31 = 0;
  }
  v34 = (uint64_t)v47;
  v35 = a6 + direct field offset for TabViewCoordinator_Phone.customization;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v35, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  outlined init with copy of TabEntry(a1, (uint64_t)v56);
  if ((v57 & 1) != 0)
  {
    memcpy(v48, v56, 0x108uLL);
    specialized UIHostingController.updateTabGroupCreatingIfNeeded<A>(using:customization:environment:coordinator:)((uint64_t)v48, (uint64_t)v18, v34, v21, a6);
    outlined destroy of TabItemGroup((uint64_t)v48);
  }
  else
  {
    v48[4] = *(_OWORD *)&v56[64];
    v48[5] = *(_OWORD *)&v56[80];
    *(_QWORD *)&v48[6] = *(_QWORD *)&v56[96];
    v48[0] = *(_OWORD *)v56;
    v48[1] = *(_OWORD *)&v56[16];
    v48[2] = *(_OWORD *)&v56[32];
    v48[3] = *(_OWORD *)&v56[48];
    specialized UIHostingController.updateTabElementCreatingIfNeeded<A>(using:customization:environment:coordinator:)((uint64_t)v48, (uint64_t)v18, v34, v21);
    outlined destroy of TabItem((uint64_t)v48);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  if (v31)
  {
    v36 = v31;
    v47 = v31;
    v37 = v36;
    v38 = TabItem.platformIdentifier.getter();
    v40 = v39;
    v41 = TabEntry.platformIdentifier.getter();
    specialized TabViewCoordinator_Phone.cacheChild(_:childID:for:)(v37, v38, v40, v41, v42);

    v31 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  specialized UIHostingController<>.updateTabEnvironment<A>(environment:coordinator:)();

  outlined destroy of TabItem((uint64_t)v58);
  return (uint64_t)v29;
}

uint64_t specialized static AdaptiveTabViewStrategy.visibleTab<A>(in:selectionInfo:tabCache:tabs:environment:)@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t (*v19)(void);
  __int128 v20;
  _QWORD __src[33];
  char v22;
  _BYTE __dst[264];
  _BYTE v24[96];
  uint64_t v25;

  if (!a4)
  {
    if (*(_QWORD *)(*a1 + 16))
      return outlined init with copy of TabItem(*a1 + 32, a8);
LABEL_18:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  if ((a2 & 0x8000000000000000) == 0 && *(_QWORD *)(a6 + 16) > a2)
  {
    outlined init with copy of TabEntry(a6 + 272 * a2 + 32, (uint64_t)__src);
    if ((v22 & 1) != 0)
    {
      memcpy(__dst, __src, sizeof(__dst));
      if (*(_QWORD *)&__dst[24] == a1[3] && *(_QWORD *)&__dst[32] == a1[4]
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        *(_QWORD *)&v20 = a7;
        *((_QWORD *)&v20 + 1) = a9;
        static AdaptiveTabViewStrategy.visibleTab(in:selectedID:tabCache:environment:)((uint64_t)a1, a3, a4, a5, &v20, (uint64_t)__src);
        outlined destroy of TabItemGroup((uint64_t)__dst);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined init with take of Image.Resolved?((uint64_t)__src, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      }
      else
      {
        outlined destroy of TabItemGroup((uint64_t)__dst);
      }
    }
    else
    {
      outlined destroy of TabEntry((uint64_t)__src);
    }
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v24, (uint64_t)__dst, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  outlined init with copy of TabItemGroup((uint64_t)a1, (uint64_t)__src);
  if (*(_QWORD *)&__dst[24])
  {
    outlined destroy of TabItemGroup((uint64_t)__src);
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v16 = *(_OWORD *)&__dst[80];
    *(_OWORD *)(a8 + 64) = *(_OWORD *)&__dst[64];
    *(_OWORD *)(a8 + 80) = v16;
    *(_QWORD *)(a8 + 96) = *(_QWORD *)&__dst[96];
    v17 = *(_OWORD *)&__dst[16];
    *(_OWORD *)a8 = *(_OWORD *)__dst;
    *(_OWORD *)(a8 + 16) = v17;
    v18 = *(_OWORD *)&__dst[48];
    *(_OWORD *)(a8 + 32) = *(_OWORD *)&__dst[32];
    *(_OWORD *)(a8 + 48) = v18;
    return result;
  }
  if (!*(_QWORD *)(__src[0] + 16))
    goto LABEL_18;
  outlined init with copy of TabItem(__src[0] + 32, a8);
  outlined destroy of TabItemGroup((uint64_t)__src);
  v19 = MEMORY[0x1E0DEB940];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)__dst, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v19);
}

uint64_t static AdaptiveTabViewStrategy.visibleTab<A>(in:selectionInfo:tabCache:tabs:environment:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, __int128 *a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t (*v21)(void);
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[33];
  _BYTE v29[264];
  unsigned __int8 v30;
  _QWORD v31[34];
  _OWORD v32[6];
  uint64_t v33;

  v23 = a2;
  v24 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v15 = (char *)&v22 - v14;
  if (!a3)
  {
    if (*(_QWORD *)(*a1 + 16))
      return outlined init with copy of TabItem(*a1 + 32, a6);
LABEL_19:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v25 = v13;
  v26 = v12;
  v22 = *a5;
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  Collection.index(atOffset:)();
  Collection.subscript.getter();
  if (v30 == 255)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  else
  {
    outlined init with take of TabEntry(v29, v31);
    outlined init with copy of TabEntry((uint64_t)v31, (uint64_t)v29);
    if ((v30 & 1) != 0)
    {
      memcpy(v28, v29, sizeof(v28));
      if (v28[3] == a1[3] && v28[4] == a1[4] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v27 = v22;
        static AdaptiveTabViewStrategy.visibleTab(in:selectedID:tabCache:environment:)((uint64_t)a1, v23, a3, v24, &v27, (uint64_t)v29);
        outlined destroy of TabItemGroup((uint64_t)v28);
        outlined destroy of TabEntry((uint64_t)v31);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined init with take of Image.Resolved?((uint64_t)v29, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
        goto LABEL_13;
      }
      outlined destroy of TabItemGroup((uint64_t)v28);
      v17 = v31;
    }
    else
    {
      outlined destroy of TabEntry((uint64_t)v31);
      v17 = v29;
    }
    outlined destroy of TabEntry((uint64_t)v17);
  }
LABEL_13:
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v32, (uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  outlined init with copy of TabItemGroup((uint64_t)a1, (uint64_t)v31);
  if (*(_QWORD *)&v29[24])
  {
    outlined destroy of TabItemGroup((uint64_t)v31);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v26);
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v18 = *(_OWORD *)&v29[80];
    *(_OWORD *)(a6 + 64) = *(_OWORD *)&v29[64];
    *(_OWORD *)(a6 + 80) = v18;
    *(_QWORD *)(a6 + 96) = *(_QWORD *)&v29[96];
    v19 = *(_OWORD *)&v29[16];
    *(_OWORD *)a6 = *(_OWORD *)v29;
    *(_OWORD *)(a6 + 16) = v19;
    v20 = *(_OWORD *)&v29[48];
    *(_OWORD *)(a6 + 32) = *(_OWORD *)&v29[32];
    *(_OWORD *)(a6 + 48) = v20;
    return result;
  }
  if (!*(_QWORD *)(v31[0] + 16))
    goto LABEL_19;
  outlined init with copy of TabItem(v31[0] + 32, a6);
  outlined destroy of TabItemGroup((uint64_t)v31);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v26);
  v21 = MEMORY[0x1E0DEB940];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v21);
}

void specialized UIHostingController<>.updateTabEnvironment<A>(environment:coordinator:)()
{
  char *v0;
  id v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, sel_traitCollection);
  objc_msgSend(v1, sel_userInterfaceIdiom);

  EnvironmentValues.horizontalSizeClass.getter();
  EnvironmentValues.init()();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.TabBarPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.TabBarPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v7)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>, (uint64_t)&type metadata for EnvironmentValues.IsTabBarShowingSectionsKey, (uint64_t)&protocol witness table for EnvironmentValues.IsTabBarShowingSectionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v7)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v2 = *(_QWORD **)&v0[direct field offset for UIHostingController.host];
  v3 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x120));
  swift_beginAccess();
  v4 = *v3;
  *v3 = v6;
  v3[1] = v7;
  swift_retain();
  v5 = v2;
  swift_retain();
  outlined consume of EnvironmentValues?(v4);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  swift_release();
  swift_release();

}

uint64_t static AdaptiveTabViewStrategy.visibleTab(in:selectedID:tabCache:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  unint64_t *v21;
  ValueMetadata *v22;
  uint64_t (*v23)(void);
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = *a5;
  EnvironmentValues.horizontalSizeClass.getter();
  if (v57 != 2 && (v57 & 1) == 0)
  {
    outlined init with copy of SwiftUIAnySortComparator?(a1 + 152, (uint64_t)&v75, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (*((_QWORD *)&v76 + 1))
    {
      v61 = v79;
      v62 = v80;
      *(_QWORD *)&v63 = v81;
      v57 = v75;
      v58 = v76;
      v59 = v77;
      v60 = v78;
      static Log.tabView.getter();
      v16 = type metadata accessor for Logger();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
      {
        result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      }
      else
      {
        outlined init with copy of TabItem((uint64_t)&v57, (uint64_t)&v50);
        outlined init with copy of TabItemGroup(a1, (uint64_t)&v75);
        v30 = Logger.logObject.getter();
        v31 = static os_log_type_t.default.getter();
        v32 = v31;
        if (os_log_type_enabled(v30, v31))
        {
          v33 = swift_slowAlloc();
          v47 = v17;
          v34 = v33;
          v46 = swift_slowAlloc();
          v49 = v46;
          *(_DWORD *)v34 = 136315394;
          v45 = v30;
          v35 = TabItem.platformIdentifier.getter();
          v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of TabItem((uint64_t)&v50);
          *(_WORD *)(v34 + 12) = 2080;
          v37 = *((_QWORD *)&v76 + 1);
          v38 = v77;
          HIDWORD(v44) = v32;
          outlined copy of TabCustomizationID.Base();
          v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of TabCustomizationID.Base();
          outlined destroy of TabItemGroup((uint64_t)&v75);
          v39 = v45;
          _os_log_impl(&dword_186E48000, v45, BYTE4(v44), "Using compact tab '%s' for group '%s'", (uint8_t *)v34, 0x16u);
          v40 = v46;
          swift_arrayDestroy();
          MEMORY[0x18D760108](v40, -1, -1);
          v41 = v34;
          v17 = v47;
          MEMORY[0x18D760108](v41, -1, -1);

        }
        else
        {

          outlined destroy of TabItem((uint64_t)&v50);
          outlined destroy of TabItemGroup((uint64_t)&v75);
        }
        result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v16);
      }
      v42 = v62;
      *(_OWORD *)(a6 + 64) = v61;
      *(_OWORD *)(a6 + 80) = v42;
      *(_QWORD *)(a6 + 96) = v63;
      v43 = v58;
      *(_OWORD *)a6 = v57;
      *(_OWORD *)(a6 + 16) = v43;
      v29 = v59;
      v28 = v60;
      goto LABEL_25;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v75, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  if (!*(_QWORD *)(a4 + 16))
  {
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v74 = -1;
LABEL_15:
    v21 = (unint64_t *)&lazy cache variable for type metadata for TabEntry?;
    v22 = &type metadata for TabEntry;
    v23 = MEMORY[0x1E0DEB940];
    v24 = &v57;
LABEL_19:
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, v21, (uint64_t)v22, (uint64_t (*)(_QWORD, uint64_t))v23);
    *(_QWORD *)(a6 + 96) = 0;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return result;
  }
  swift_bridgeObjectRetain();
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) != 0)
  {
    outlined init with copy of TabEntry(*(_QWORD *)(a4 + 56) + 272 * v19, (uint64_t)&v57);
  }
  else
  {
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v74 = -1;
  }
  swift_bridgeObjectRelease();
  if (v74 == 255)
    goto LABEL_15;
  outlined init with take of TabEntry(&v57, &v75);
  outlined init with copy of TabEntry((uint64_t)&v75, (uint64_t)&v57);
  if (v74 == 1)
  {
    outlined destroy of TabEntry((uint64_t)&v57);
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0;
    outlined destroy of TabEntry((uint64_t)&v75);
LABEL_18:
    v21 = (unint64_t *)&lazy cache variable for type metadata for TabItem?;
    v22 = &type metadata for TabItem;
    v23 = MEMORY[0x1E0DEB940];
    v24 = &v50;
    goto LABEL_19;
  }
  v54 = v61;
  v55 = v62;
  v56 = v63;
  v50 = v57;
  v51 = v58;
  v52 = v59;
  v53 = v60;
  v25 = *((_QWORD *)&v58 + 1);
  result = outlined destroy of TabEntry((uint64_t)&v75);
  if (!v25)
    goto LABEL_18;
  v26 = v55;
  *(_OWORD *)(a6 + 64) = v54;
  *(_OWORD *)(a6 + 80) = v26;
  *(_QWORD *)(a6 + 96) = v56;
  v27 = v51;
  *(_OWORD *)a6 = v50;
  *(_OWORD *)(a6 + 16) = v27;
  v29 = v52;
  v28 = v53;
LABEL_25:
  *(_OWORD *)(a6 + 32) = v29;
  *(_OWORD *)(a6 + 48) = v28;
  return result;
}

void specialized static AdaptiveTabViewStrategy.removeHosts<A>(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v5 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    v7 = a3;
    v9 = direct field offset for TabViewCoordinator_Phone.groupHostCache;
    swift_unknownObjectRetain();
    if (v5 <= v7)
    {
LABEL_20:
      __break(1u);
      return;
    }
    v10 = (uint64_t *)(a5 + v9);
    v11 = v5 - 1;
    v12 = &selRef_setSensitive_;
    v13 = v7;
    v34 = a2;
    v35 = v7;
    v32 = v5 - 1;
    v33 = v5;
    v36 = v10;
    while (1)
    {
      v14 = *(id *)(a2 + 8 * v13);
      v15 = objc_msgSend(v14, v12[418]);
      if (!v15)
        break;
      v16 = v15;
      objc_opt_self();
      v17 = (void *)swift_dynamicCastObjCClass();
      if (!v17)
      {

LABEL_14:
        if (v11 == v13)
          goto LABEL_18;
        goto LABEL_15;
      }
      v18 = objc_msgSend(v17, sel__identifier);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      swift_beginAccess();
      swift_bridgeObjectRetain();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v21);
      v24 = v23;
      swift_bridgeObjectRelease();
      v25 = 0;
      v26 = 0;
      v27 = 0;
      if ((v24 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v29 = *v36;
        v37 = *v36;
        *v36 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v29 = v37;
        }
        swift_bridgeObjectRelease();
        v30 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 32 * v22);
        v25 = *v30;
        v26 = v30[1];
        v27 = v30[2];
        specialized _NativeDictionary._delete(at:)(v22, v29);
        *v36 = v29;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_bridgeObjectRelease();

      outlined consume of TabItemGroup.HostCache?(v25, v26, v27);
      v11 = v32;
      v5 = v33;
      a2 = v34;
      v7 = v35;
      v12 = &selRef_setSensitive_;
      if (v32 == v13)
      {
LABEL_18:
        swift_unknownObjectRelease();
        return;
      }
LABEL_15:
      v31 = v13 + 1;
      if (v13 + 1 >= v7)
      {
        ++v13;
        if (v31 < v5)
          continue;
      }
      goto LABEL_20;
    }
    v16 = v14;
    goto LABEL_14;
  }
}

uint64_t static AdaptiveTabViewStrategy.removeHosts<A>(_:coordinator:)()
{
  return Sequence.forEach(_:)();
}

void closure #1 in static AdaptiveTabViewStrategy.removeHosts<A>(_:coordinator:)(id *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = objc_msgSend(*a1, sel__uip_tabElement);
  if (v1)
  {
    v2 = v1;
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = objc_msgSend(v3, sel__identifier);
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      swift_beginAccess();
      v8 = specialized Dictionary._Variant.removeValue(forKey:)(v5, v7);
      v10 = v9;
      v12 = v11;
      swift_endAccess();

      outlined consume of TabItemGroup.HostCache?(v8, v10, v12);
      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t specialized static AdaptiveTabViewStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  BOOL v33;
  unint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  _QWORD v86[2];
  uint64_t *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  _BYTE *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _BYTE *v119;
  uint64_t v120;
  __int128 v121;
  __int16 v122;
  char v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int16 v129;
  char v130;
  uint64_t v131;
  __int16 v132;
  _BYTE v133[264];
  uint64_t v134;
  _BYTE v135[264];
  uint64_t v136;
  uint64_t v137;
  _BYTE v138[273];
  _QWORD v139[42];
  uint64_t v140;
  void *v141;
  uint64_t v142;

  v99 = a6;
  v111 = a4;
  v112 = a5;
  v101 = a2;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v98 = (uint64_t)v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v116 = (uint64_t)v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v16, v17);
  v110 = (char *)v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t *)(a7 + direct field offset for TabViewCoordinator_Phone.selectionCache);
  swift_beginAccess();
  v20 = *v19;
  if (!v20)
    goto LABEL_80;
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_80;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v22 & 1) == 0)
    goto LABEL_80;
  v23 = (_QWORD *)(*(_QWORD *)(v20 + 56) + 32 * v21);
  v108 = v23[1];
  v24 = v23[3];
  v97 = v23[2];
  swift_endAccess();
  v25 = a7 + direct field offset for TabViewCoordinator_Phone.customization;
  v26 = a7 + direct field offset for TabViewCoordinator_Phone.searchState;
  v92 = a7 + direct field offset for TabViewCoordinator_Phone.searchIndex;
  v102 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = v101;
  swift_bridgeObjectRetain();
  v107 = v25;
  swift_beginAccess();
  v96 = v26;
  swift_beginAccess();
  v105 = 0;
  LOBYTE(v29) = 0;
  v30 = 0;
  v109 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0)
    v31 = a1;
  else
    v31 = a1 & 0xFFFFFFFFFFFFFF8;
  v93 = a1 + 32;
  v94 = a1 & 0xC000000000000001;
  v88 = &v138[8];
  v89 = v27 + 32;
  v86[1] = v31;
  v87 = &v137;
  v113 = &v142;
  v114 = &v139[1];
  v119 = &v138[264];
  v103 = &v134;
  v104 = &v133[48];
  *(_QWORD *)&v28 = 136315138;
  v91 = v28;
  v90 = MEMORY[0x1E0DEE9B8] + 8;
  v106 = a7;
  v100 = a1;
  while (1)
  {
    if ((v29 & 1) != 0)
      goto LABEL_18;
    if ((unint64_t)a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v84 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v30 == v84)
        goto LABEL_18;
    }
    else if (v30 == *(_QWORD *)(v109 + 16))
    {
      goto LABEL_18;
    }
    if (!v94)
      break;
    v32 = (id)MEMORY[0x18D75E3BC](v30, a1);
    v33 = __OFADD__(v30++, 1);
    if (v33)
      goto LABEL_75;
LABEL_16:
    v34 = *(_QWORD *)(v101 + 16);
    if (v105 != v34)
    {
      if (v105 >= v34)
        goto LABEL_79;
      v50 = v105;
      v51 = v105 + 1;
      *(_QWORD *)v138 = v32;
      outlined init with copy of TabEntry(v89 + 272 * v105, (uint64_t)v88);
      v52 = v87;
      memcpy(v87, v138, 0x111uLL);
      v139[0] = v50;
      memcpy(v114, v52, 0x111uLL);
      LODWORD(v29) = 0;
      v105 = v51;
      goto LABEL_19;
    }

LABEL_18:
    memset(v139, 0, 281);
    LODWORD(v29) = 1;
LABEL_19:
    outlined init with take of Binding<SearchFieldState>((uint64_t)v139, (uint64_t)&v140, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry))?, (uint64_t)type metadata accessor for (offset: Int, element: (UIViewController, TabEntry)), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v35 = v141;
    if (!v141)
      goto LABEL_76;
    v117 = v140;
    v139[0] = v141;
    v36 = v114;
    outlined init with take of TabEntry(v113, v114);
    outlined init with take of TabEntry(v36, &v136);
    outlined init with copy of TabEntry((uint64_t)&v136, (uint64_t)v138);
    if ((*v119 & 1) != 0)
    {
      memcpy(v133, v138, sizeof(v133));
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v104, (uint64_t)v135, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      if (!*(_QWORD *)&v135[24])
      {
        outlined destroy of TabItemGroup((uint64_t)v133);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v135, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        goto LABEL_31;
      }
      v126 = *(_QWORD *)&v135[88];
      v37 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v37 != -1)
        swift_once();
      LOWORD(v120) = static TabOptions.TraitKey.defaultValue;
      v121 = *(_OWORD *)&qword_1EDF00118;
      v122 = word_1EDF00128;
      v123 = byte_1EDF0012A;
      v124 = qword_1EDF00130;
      v125 = word_1EDF00138;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v38 = BYTE1(v127);
      outlined consume of TabCustomizationID?(v128, *((uint64_t *)&v128 + 1), v129);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)v133);
      outlined destroy of TabItem((uint64_t)v135);
      if ((v38 & 1) != 0)
        goto LABEL_8;
LABEL_31:
      v41 = (uint64_t)v110;
      static Log.tabView.getter();
      v42 = type metadata accessor for Logger();
      v43 = *(_QWORD *)(v42 - 8);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42);
      v115 = v30;
      v118 = (int)v29;
      if (v44 == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      }
      else
      {
        outlined init with copy of TabEntry((uint64_t)&v136, (uint64_t)v138);
        v45 = Logger.logObject.getter();
        v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc();
          v95 = swift_slowAlloc();
          v127 = v95;
          *(_DWORD *)v47 = v91;
          outlined init with copy of TabEntry((uint64_t)v138, (uint64_t)v133);
          if ((*(_BYTE *)v103 & 1) != 0)
          {
            memcpy(v135, v133, sizeof(v135));
            v48 = *(_QWORD *)&v135[24];
            v49 = *(_QWORD *)&v135[32];
            outlined copy of TabCustomizationID.Base();
            outlined destroy of TabItemGroup((uint64_t)v135);
          }
          else
          {
            *(_OWORD *)&v135[64] = *(_OWORD *)&v133[64];
            *(_OWORD *)&v135[80] = *(_OWORD *)&v133[80];
            *(_QWORD *)&v135[96] = *(_QWORD *)&v133[96];
            *(_OWORD *)v135 = *(_OWORD *)v133;
            *(_OWORD *)&v135[16] = *(_OWORD *)&v133[16];
            *(_OWORD *)&v135[32] = *(_OWORD *)&v133[32];
            *(_OWORD *)&v135[48] = *(_OWORD *)&v133[48];
            v48 = TabItem.platformIdentifier.getter();
            v49 = v53;
            outlined destroy of TabItem((uint64_t)v135);
          }
          *(_QWORD *)(v47 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v127);
          swift_bridgeObjectRelease();
          outlined destroy of TabEntry((uint64_t)v138);
          _os_log_impl(&dword_186E48000, v45, v46, "Updating tab %s", (uint8_t *)v47, 0xCu);
          v54 = v95;
          swift_arrayDestroy();
          MEMORY[0x18D760108](v54, -1, -1);
          MEMORY[0x18D760108](v47, -1, -1);

          a7 = v106;
        }
        else
        {

          outlined destroy of TabEntry((uint64_t)v138);
        }
        (*(void (**)(char *, uint64_t))(v43 + 8))(v110, v42);
        a1 = v100;
        LOBYTE(v29) = v118;
      }
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      v55 = (void *)swift_dynamicCastClassUnconditional();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v107, v116, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
      outlined init with copy of TabEntry((uint64_t)&v136, (uint64_t)v138);
      if ((*v119 & 1) != 0)
      {
        memcpy(v135, v138, sizeof(v135));
        v56 = v35;
        v57 = objc_msgSend(v55, sel__uip_tabElement);
        if (v57)
        {
          v58 = v57;
          objc_opt_self();
          v59 = (void *)swift_dynamicCastObjCClass();
          if (v59)
          {
            v60 = v59;
            v61 = objc_msgSend(v59, sel__identifier);
            v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v64 = v63;

            if (v62 == *(_QWORD *)&v135[24] && *(_QWORD *)&v135[32] == v64)
            {
              swift_bridgeObjectRelease();
              LOBYTE(v29) = v118;
LABEL_61:
              v78 = v116;
              a7 = v106;
              specialized UIHostingController.updateGroup<A>(_:using:customization:environment:coordinator:)(v60, (uint64_t)v135, v116, v111, v112, v106);

              outlined destroy of TabItemGroup((uint64_t)v135);
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
              v76 = v117;
              goto LABEL_62;
            }
            v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            LOBYTE(v29) = v118;
            if ((v77 & 1) != 0)
              goto LABEL_61;
          }

          a7 = v106;
        }
        outlined init with copy of TabItemGroup((uint64_t)v135, (uint64_t)v133);
        *(_BYTE *)v103 = 1;
        specialized UIHostingController.createBridgedTab<A>(using:coordinator:)((uint64_t)v133, a7);
        outlined destroy of TabEntry((uint64_t)v133);
        objc_opt_self();
        v60 = (void *)swift_dynamicCastObjCClassUnconditional();
        objc_msgSend(v55, sel__uip_setTabElement_, v60);
        goto LABEL_61;
      }
      *(_OWORD *)&v133[64] = *(_OWORD *)&v138[64];
      *(_OWORD *)&v133[80] = *(_OWORD *)&v138[80];
      *(_QWORD *)&v133[96] = *(_QWORD *)&v138[96];
      *(_OWORD *)v133 = *(_OWORD *)v138;
      *(_OWORD *)&v133[16] = *(_OWORD *)&v138[16];
      *(_OWORD *)&v133[32] = *(_OWORD *)&v138[32];
      *(_OWORD *)&v133[48] = *(_OWORD *)&v138[48];
      v65 = v35;
      v66 = objc_msgSend(v55, sel__uip_tabElement);
      if (!v66)
        goto LABEL_54;
      v29 = v66;
      v67 = objc_msgSend(v66, sel__identifier);
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v70 = v69;

      if (v68 == TabItem.platformIdentifier.getter() && v70 == v71)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0)
        {

LABEL_54:
          v29 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v133);
          objc_opt_self();
          v73 = (void *)swift_dynamicCastObjCClass();
          if (v73)
            v74 = v29;
          objc_msgSend(v55, sel__uip_setTabElement_, v73);

        }
      }
      v75 = v116;
      v76 = v117;
      specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(v29, (uint64_t)v133, v116, v111, v112);

      outlined destroy of TabItem((uint64_t)v133);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
      LOBYTE(v29) = v118;
LABEL_62:
      if (v76 == v108)
      {
        v79 = v98;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v96, v98, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
        type metadata accessor for Binding<SearchFieldState>(0);
        v81 = 1;
        v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 48))(v79, 1, v80);
        LOBYTE(v29) = v118;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
        if (v82 != 1)
        {
          if ((*(_BYTE *)(v92 + 8) & 1) != 0)
          {
            v81 = 2;
          }
          else if (*(_QWORD *)v92 == v108)
          {
            v81 = 2;
          }
          else
          {
            v81 = 1;
          }
        }
        *(_QWORD *)v138 = v111;
        *(_QWORD *)&v138[8] = v112;
        v83 = v102;
        swift_bridgeObjectRetain();
        specialized static AdaptiveTabViewStrategy.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:coordinator:)((uint64_t)v55, (uint64_t)&v136, v81, v97, v83, (uint64_t *)v138, v99, a7);

        swift_bridgeObjectRelease();
        outlined destroy of TabEntry((uint64_t)&v136);
        v30 = v115;
      }
      else
      {
        outlined destroy of TabEntry((uint64_t)&v136);

        v30 = v115;
      }
    }
    else
    {
      *(_OWORD *)&v133[64] = *(_OWORD *)&v138[64];
      *(_OWORD *)&v133[80] = *(_OWORD *)&v138[80];
      *(_QWORD *)&v133[96] = *(_QWORD *)&v138[96];
      *(_OWORD *)v133 = *(_OWORD *)v138;
      *(_OWORD *)&v133[16] = *(_OWORD *)&v138[16];
      *(_OWORD *)&v133[32] = *(_OWORD *)&v138[32];
      *(_OWORD *)&v133[48] = *(_OWORD *)&v138[48];
      v120 = *(_QWORD *)&v138[88];
      v39 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v39 != -1)
        swift_once();
      LOWORD(v127) = static TabOptions.TraitKey.defaultValue;
      v128 = *(_OWORD *)&qword_1EDF00118;
      v129 = word_1EDF00128;
      v130 = byte_1EDF0012A;
      v131 = qword_1EDF00130;
      v132 = word_1EDF00138;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v40 = v135[1];
      outlined consume of TabCustomizationID?(*(uint64_t *)&v135[8], *(uint64_t *)&v135[16], v135[24]);
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)v133);
      if (v40 != 1)
        goto LABEL_31;
LABEL_8:
      outlined destroy of TabEntry((uint64_t)&v136);

    }
  }
  if ((v30 & 0x8000000000000000) == 0)
  {
    if (v30 >= *(_QWORD *)(v109 + 16))
      goto LABEL_78;
    v32 = *(id *)(v93 + 8 * v30);
    v33 = __OFADD__(v30++, 1);
    if (v33)
    {
LABEL_75:
      __break(1u);
LABEL_76:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AdaptiveTabViewStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  __int128 v125;
  __int16 v126;
  char v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int16 v133;
  char v134;
  uint64_t v135;
  __int16 v136;
  _BYTE v137[264];
  uint64_t v138;
  _BYTE v139[264];
  uint64_t v140;
  _BYTE v141[280];
  _BYTE v142[273];
  _QWORD v143[43];
  uint64_t v144;
  void *v145;
  uint64_t v146;
  char v147;

  v97 = a7;
  v92 = a2;
  v93 = a6;
  v89 = a5;
  v90 = a1;
  v100 = a3;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v104 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v121 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = a13;
  v25 = (uint64_t *)(a13 + direct field offset for TabViewCoordinator_Phone.selectionCache);
  swift_beginAccess();
  v26 = *v25;
  if (!v26)
    goto LABEL_72;
  if (!*(_QWORD *)(v26 + 16))
    goto LABEL_72;
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(a9);
  if ((v28 & 1) == 0)
    goto LABEL_72;
  v103 = a12;
  v115 = a11;
  v114 = a10;
  v29 = (_QWORD *)(*(_QWORD *)(v26 + 56) + 32 * v27);
  v112 = v29[1];
  v30 = v29[3];
  v102 = v29[2];
  swift_endAccess();
  v147 = 0;
  v31 = v119 + direct field offset for TabViewCoordinator_Phone.customization;
  v32 = v119 + direct field offset for TabViewCoordinator_Phone.searchState;
  v96 = v119 + direct field offset for TabViewCoordinator_Phone.searchIndex;
  v105 = v30;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v111 = v31;
  swift_beginAccess();
  v101 = v32;
  swift_beginAccess();
  v98 = 0;
  v113 = a4 >> 1;
  v91 = &v142[8];
  v33 = v141;
  v117 = &v146;
  v118 = &v143[1];
  v123 = &v142[264];
  v108 = a8 >> 1;
  v109 = &v137[48];
  v106 = &v138;
  *(_QWORD *)&v34 = 136315138;
  v95 = v34;
  v94 = MEMORY[0x1E0DEE9B8] + 8;
  v35 = v100;
  v107 = v97;
  v116 = v24;
  v110 = v141;
  while ((v147 & 1) != 0)
  {
LABEL_12:
    memset(v143, 0, 281);
LABEL_13:
    outlined init with take of Binding<SearchFieldState>((uint64_t)v143, (uint64_t)&v144, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry))?, (uint64_t)type metadata accessor for (offset: Int, element: (UIViewController, TabEntry)), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v37 = v145;
    if (!v145)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    v122 = v144;
    v143[0] = v145;
    v38 = v118;
    outlined init with take of TabEntry(v117, v118);
    outlined init with take of TabEntry(v38, &v140);
    outlined init with copy of TabEntry((uint64_t)&v140, (uint64_t)v142);
    if ((*v123 & 1) != 0)
    {
      memcpy(v137, v142, sizeof(v137));
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v109, (uint64_t)v139, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      if (!*(_QWORD *)&v139[24])
      {
        outlined destroy of TabItemGroup((uint64_t)v137);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v139, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        goto LABEL_25;
      }
      v130 = *(_QWORD *)&v139[88];
      v39 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v39 != -1)
        swift_once();
      LOWORD(v124) = static TabOptions.TraitKey.defaultValue;
      v125 = *(_OWORD *)&qword_1EDF00118;
      v126 = word_1EDF00128;
      v127 = byte_1EDF0012A;
      v128 = qword_1EDF00130;
      v129 = word_1EDF00138;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v40 = BYTE1(v131);
      outlined consume of TabCustomizationID?(v132, *((uint64_t *)&v132 + 1), v133);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)v137);
      outlined destroy of TabItem((uint64_t)v139);
      if ((v40 & 1) != 0)
        goto LABEL_5;
LABEL_25:
      static Log.tabView.getter();
      v43 = type metadata accessor for Logger();
      v44 = *(_QWORD *)(v43 - 8);
      v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v24, 1, v43);
      v120 = v35;
      if (v45 == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      }
      else
      {
        outlined init with copy of TabEntry((uint64_t)&v140, (uint64_t)v142);
        v46 = Logger.logObject.getter();
        v47 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v46, v47))
        {
          v48 = swift_slowAlloc();
          v99 = swift_slowAlloc();
          v131 = v99;
          *(_DWORD *)v48 = v95;
          outlined init with copy of TabEntry((uint64_t)v142, (uint64_t)v137);
          if ((*(_BYTE *)v106 & 1) != 0)
          {
            memcpy(v139, v137, sizeof(v139));
            v49 = *(_QWORD *)&v139[24];
            v50 = *(_QWORD *)&v139[32];
            outlined copy of TabCustomizationID.Base();
            outlined destroy of TabItemGroup((uint64_t)v139);
          }
          else
          {
            *(_OWORD *)&v139[64] = *(_OWORD *)&v137[64];
            *(_OWORD *)&v139[80] = *(_OWORD *)&v137[80];
            *(_QWORD *)&v139[96] = *(_QWORD *)&v137[96];
            *(_OWORD *)v139 = *(_OWORD *)v137;
            *(_OWORD *)&v139[16] = *(_OWORD *)&v137[16];
            *(_OWORD *)&v139[32] = *(_OWORD *)&v137[32];
            *(_OWORD *)&v139[48] = *(_OWORD *)&v137[48];
            v49 = TabItem.platformIdentifier.getter();
            v50 = v56;
            outlined destroy of TabItem((uint64_t)v139);
          }
          *(_QWORD *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v131);
          swift_bridgeObjectRelease();
          outlined destroy of TabEntry((uint64_t)v142);
          _os_log_impl(&dword_186E48000, v46, v47, "Updating tab %s", (uint8_t *)v48, 0xCu);
          v57 = v99;
          swift_arrayDestroy();
          MEMORY[0x18D760108](v57, -1, -1);
          MEMORY[0x18D760108](v48, -1, -1);

        }
        else
        {

          outlined destroy of TabEntry((uint64_t)v142);
        }
        (*(void (**)(char *, uint64_t))(v44 + 8))(v116, v43);
      }
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      v58 = (void *)swift_dynamicCastClassUnconditional();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v111, v121, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
      outlined init with copy of TabEntry((uint64_t)&v140, (uint64_t)v142);
      if ((*v123 & 1) == 0)
      {
        *(_OWORD *)&v137[64] = *(_OWORD *)&v142[64];
        *(_OWORD *)&v137[80] = *(_OWORD *)&v142[80];
        *(_QWORD *)&v137[96] = *(_QWORD *)&v142[96];
        *(_OWORD *)v137 = *(_OWORD *)v142;
        *(_OWORD *)&v137[16] = *(_OWORD *)&v142[16];
        *(_OWORD *)&v137[32] = *(_OWORD *)&v142[32];
        *(_OWORD *)&v137[48] = *(_OWORD *)&v142[48];
        v68 = v37;
        v69 = objc_msgSend(v58, sel__uip_tabElement, v89, v90);
        if (v69)
        {
          v70 = v69;
          v71 = objc_msgSend(v69, sel__identifier);
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v74 = v73;

          if (v72 == TabItem.platformIdentifier.getter() && v74 == v75)
          {
            swift_bridgeObjectRelease_n();
LABEL_58:
            v81 = v121;
            specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(v70, (uint64_t)v137, v121, v114, v115);

            outlined destroy of TabItem((uint64_t)v137);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v81, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
            goto LABEL_59;
          }
          v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) != 0)
            goto LABEL_58;

        }
        v70 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v137);
        objc_opt_self();
        v79 = (void *)swift_dynamicCastObjCClass();
        if (v79)
          v80 = v70;
        objc_msgSend(v58, sel__uip_setTabElement_, v79);

        goto LABEL_58;
      }
      memcpy(v139, v142, sizeof(v139));
      v59 = v37;
      v60 = objc_msgSend(v58, sel__uip_tabElement);
      if (!v60)
        goto LABEL_52;
      v61 = v60;
      objc_opt_self();
      v62 = (void *)swift_dynamicCastObjCClass();
      if (!v62)
        goto LABEL_51;
      v63 = v62;
      v64 = objc_msgSend(v62, sel__identifier);
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v67 = v66;

      if (v65 == *(_QWORD *)&v139[24] && *(_QWORD *)&v139[32] == v67)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0)
        {
LABEL_51:

LABEL_52:
          outlined init with copy of TabItemGroup((uint64_t)v139, (uint64_t)v137);
          *(_BYTE *)v106 = 1;
          specialized UIHostingController.createBridgedTab<A>(using:coordinator:)((uint64_t)v137, v119);
          outlined destroy of TabEntry((uint64_t)v137);
          objc_opt_self();
          v63 = (void *)swift_dynamicCastObjCClassUnconditional();
          objc_msgSend(v58, sel__uip_setTabElement_, v63);
        }
      }
      v78 = v121;
      specialized UIHostingController.updateGroup<A>(_:using:customization:environment:coordinator:)(v63, (uint64_t)v139, v121, v114, v115, v119);

      outlined destroy of TabItemGroup((uint64_t)v139);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
LABEL_59:
      v24 = v116;
      if (v122 == v112)
      {
        v82 = v116;
        v83 = v104;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v101, v104, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
        type metadata accessor for Binding<SearchFieldState>(0);
        v85 = 1;
        v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 48))(v83, 1, v84);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v83, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
        v35 = v120;
        if (v86 != 1)
        {
          if ((*(_BYTE *)(v96 + 8) & 1) != 0)
          {
            v85 = 2;
          }
          else if (*(_QWORD *)v96 == v112)
          {
            v85 = 2;
          }
          else
          {
            v85 = 1;
          }
        }
        *(_QWORD *)v142 = v114;
        *(_QWORD *)&v142[8] = v115;
        v87 = v105;
        swift_bridgeObjectRetain();
        specialized static AdaptiveTabViewStrategy.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:coordinator:)((uint64_t)v58, (uint64_t)&v140, v85, v102, v87, (uint64_t *)v142, v103, v119);

        swift_bridgeObjectRelease();
        outlined destroy of TabEntry((uint64_t)&v140);
        v33 = v110;
        v24 = v82;
      }
      else
      {
        outlined destroy of TabEntry((uint64_t)&v140);

        v33 = v110;
        v35 = v120;
      }
    }
    else
    {
      *(_OWORD *)&v137[64] = *(_OWORD *)&v142[64];
      *(_OWORD *)&v137[80] = *(_OWORD *)&v142[80];
      *(_QWORD *)&v137[96] = *(_QWORD *)&v142[96];
      *(_OWORD *)v137 = *(_OWORD *)v142;
      *(_OWORD *)&v137[16] = *(_OWORD *)&v142[16];
      *(_OWORD *)&v137[32] = *(_OWORD *)&v142[32];
      *(_OWORD *)&v137[48] = *(_OWORD *)&v142[48];
      v124 = *(_QWORD *)&v142[88];
      v41 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v41 != -1)
        swift_once();
      LOWORD(v131) = static TabOptions.TraitKey.defaultValue;
      v132 = *(_OWORD *)&qword_1EDF00118;
      v133 = word_1EDF00128;
      v134 = byte_1EDF0012A;
      v135 = qword_1EDF00130;
      v136 = word_1EDF00138;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      v42 = v139[1];
      outlined consume of TabCustomizationID?(*(uint64_t *)&v139[8], *(uint64_t *)&v139[16], v139[24]);
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)v137);
      if (v42 != 1)
        goto LABEL_25;
LABEL_5:
      outlined destroy of TabEntry((uint64_t)&v140);

    }
  }
  v36 = v113;
  if (v35 == v113)
  {
LABEL_11:
    v147 = 1;
    v35 = v36;
    goto LABEL_12;
  }
  if (v35 >= v100 && v35 < v113)
  {
    v36 = v35 + 1;
    if (v107 != v108)
    {
      if (v107 < v97)
        goto LABEL_70;
      v51 = v107;
      if (v107 >= v108)
        goto LABEL_70;
      v52 = *(void **)(v92 + 8 * v35);
      *(_QWORD *)v142 = v52;
      outlined init with copy of TabEntry(v93 + 272 * v107, (uint64_t)v91);
      memcpy(v33, v142, 0x111uLL);
      v53 = v51;
      v54 = v98 + 1;
      if (__OFADD__(v98, 1))
        goto LABEL_71;
      v107 = v53 + 1;
      v143[0] = v98;
      memcpy(v118, v33, 0x111uLL);
      v55 = v52;
      ++v35;
      v98 = v54;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static AdaptiveTabViewStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t (*v49)(void);
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t *v66;
  id v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t result;
  _QWORD v96[2];
  __int128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int16 v121;
  char v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int16 v128;
  char v129;
  uint64_t v130;
  __int16 v131;
  _BYTE v132[264];
  uint64_t v133;
  _OWORD v134[17];
  _BYTE v135[264];
  uint64_t v136;
  _BYTE v137[272];
  void *v138;
  uint64_t v139;
  uint64_t *v140;
  void *v141;
  _QWORD v142[36];

  v103 = a5;
  v110 = (uint64_t *)a3;
  v111 = a2;
  v109 = a1;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v102 = (uint64_t)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v118 = (uint64_t)v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v20, v21);
  v108 = (char *)v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a9 + 8) + 8) + 8);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a10 + 8) + 8) + 8);
  v114 = a7;
  v115 = a8;
  v140 = a7;
  v141 = a8;
  v107 = v23;
  v142[0] = v23;
  v142[1] = v24;
  v25 = type metadata accessor for Zip2Sequence();
  v26 = *(_QWORD *)(v25 - 8);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v30 = (char *)v96 - v29;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC3A0], v25, v28);
  v31 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x1E0C80A78](v31, v32);
  v117 = type metadata accessor for EnumeratedSequence.Iterator();
  v96[0] = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117, v33);
  v116 = (char *)v96 - v34;
  v35 = *a4;
  v112 = a4[1];
  v113 = v35;
  v106 = a6;
  v36 = (uint64_t *)(a6 + direct field offset for TabViewCoordinator_Phone.selectionCache);
  swift_beginAccess();
  v37 = *v36;
  if (v37
    && *(_QWORD *)(v37 + 16)
    && (v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v110), (v39 & 1) != 0))
  {
    v40 = (_QWORD *)(*(_QWORD *)(v37 + 56) + 32 * v38);
    v110 = (uint64_t *)v40[1];
    v41 = v40[3];
    v101 = v40[2];
    swift_endAccess();
    v105 = v41;
    swift_bridgeObjectRetain();
    zip<A, B>(_:_:)();
    Sequence.enumerated()();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v25);
    EnumeratedSequence.makeIterator()();
    v42 = v106;
    v43 = v106 + direct field offset for TabViewCoordinator_Phone.searchState;
    v44 = direct field offset for TabViewCoordinator_Phone.searchIndex;
    v109 = v106 + direct field offset for TabViewCoordinator_Phone.customization;
    swift_beginAccess();
    v100 = v43;
    swift_beginAccess();
    EnumeratedSequence.Iterator.next()();
    outlined init with take of Binding<SearchFieldState>((uint64_t)&v138, (uint64_t)&v140, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry))?, (uint64_t)type metadata accessor for (offset: Int, element: (UIViewController, TabEntry)), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v46 = v141;
    v47 = (uint64_t)v108;
    if (v141)
    {
      v98 = v42 + v44;
      v114 = &v139;
      v115 = v142;
      v48 = &v136;
      v107 = &v132[48];
      v104 = &v133;
      v49 = MEMORY[0x1E0DEB940];
      *(_QWORD *)&v45 = 136315138;
      v97 = v45;
      v96[1] = MEMORY[0x1E0DEE9B8] + 8;
      v111 = &v136;
      do
      {
        v50 = v140;
        v138 = v46;
        v51 = v114;
        outlined init with take of TabEntry(v115, v114);
        outlined init with take of TabEntry(v51, v137);
        outlined init with copy of TabEntry((uint64_t)v137, (uint64_t)v135);
        if ((*(_BYTE *)v48 & 1) != 0)
        {
          memcpy(v132, v135, sizeof(v132));
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v107, (uint64_t)v134, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
          if (!*((_QWORD *)&v134[1] + 1))
          {
            outlined destroy of TabItemGroup((uint64_t)v132);
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v134, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v49);
LABEL_19:
            static Log.tabView.getter();
            v56 = type metadata accessor for Logger();
            v57 = *(_QWORD *)(v56 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v47, 1, v56) == 1)
            {
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
            }
            else
            {
              outlined init with copy of TabEntry((uint64_t)v137, (uint64_t)v135);
              v58 = Logger.logObject.getter();
              v59 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v58, v59))
              {
                v99 = v50;
                v60 = swift_slowAlloc();
                v61 = swift_slowAlloc();
                v126 = v61;
                *(_DWORD *)v60 = v97;
                outlined init with copy of TabEntry((uint64_t)v135, (uint64_t)v132);
                if ((*(_BYTE *)v104 & 1) != 0)
                {
                  memcpy(v134, v132, 0x108uLL);
                  v62 = *((_QWORD *)&v134[1] + 1);
                  v63 = *(_QWORD *)&v134[2];
                  outlined copy of TabCustomizationID.Base();
                  outlined destroy of TabItemGroup((uint64_t)v134);
                }
                else
                {
                  v134[4] = *(_OWORD *)&v132[64];
                  v134[5] = *(_OWORD *)&v132[80];
                  *(_QWORD *)&v134[6] = *(_QWORD *)&v132[96];
                  v134[0] = *(_OWORD *)v132;
                  v134[1] = *(_OWORD *)&v132[16];
                  v134[2] = *(_OWORD *)&v132[32];
                  v134[3] = *(_OWORD *)&v132[48];
                  v62 = TabItem.platformIdentifier.getter();
                  v63 = v64;
                  outlined destroy of TabItem((uint64_t)v134);
                }
                *(_QWORD *)(v60 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v126);
                swift_bridgeObjectRelease();
                outlined destroy of TabEntry((uint64_t)v135);
                _os_log_impl(&dword_186E48000, v58, v59, "Updating tab %s", (uint8_t *)v60, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x18D760108](v61, -1, -1);
                MEMORY[0x18D760108](v60, -1, -1);

                v47 = (uint64_t)v108;
                v50 = v99;
              }
              else
              {

                outlined destroy of TabEntry((uint64_t)v135);
              }
              (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v47, v56);
              v42 = v106;
              v48 = v111;
            }
            type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
            v65 = (void *)swift_dynamicCastClassUnconditional();
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v109, v118, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
            outlined init with copy of TabEntry((uint64_t)v137, (uint64_t)v135);
            if ((*(_BYTE *)v48 & 1) != 0)
            {
              v66 = v50;
              memcpy(v134, v135, 0x108uLL);
              v67 = v46;
              v68 = objc_msgSend(v65, sel__uip_tabElement);
              if (!v68)
                goto LABEL_41;
              v69 = v68;
              objc_opt_self();
              v70 = (void *)swift_dynamicCastObjCClass();
              if (!v70)
                goto LABEL_40;
              v71 = v70;
              v72 = objc_msgSend(v70, sel__identifier);
              v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v75 = v74;

              if (*(_OWORD *)((char *)&v134[1] + 8) == __PAIR128__(v75, v73))
              {
                swift_bridgeObjectRelease();
                v47 = (uint64_t)v108;
                v48 = v111;
                goto LABEL_42;
              }
              v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              v47 = (uint64_t)v108;
              v48 = v111;
              if ((v85 & 1) == 0)
              {
LABEL_40:

LABEL_41:
                outlined init with copy of TabItemGroup((uint64_t)v134, (uint64_t)v132);
                *(_BYTE *)v104 = 1;
                specialized UIHostingController.createBridgedTab<A>(using:coordinator:)((uint64_t)v132, v42);
                outlined destroy of TabEntry((uint64_t)v132);
                objc_opt_self();
                v71 = (void *)swift_dynamicCastObjCClassUnconditional();
                objc_msgSend(v65, sel__uip_setTabElement_, v71);
              }
LABEL_42:
              v86 = v118;
              specialized UIHostingController.updateGroup<A>(_:using:customization:environment:coordinator:)(v71, (uint64_t)v134, v118, v113, v112, v42);

              outlined destroy of TabItemGroup((uint64_t)v134);
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v86, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
              v50 = v66;
LABEL_48:
              if (v50 == v110)
              {
                v90 = v102;
                outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v100, v102, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
                type metadata accessor for Binding<SearchFieldState>(0);
                v92 = 1;
                v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v90, 1, v91);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v90, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
                if (v93 != 1)
                {
                  if ((*(_BYTE *)(v98 + 8) & 1) != 0)
                  {
                    v92 = 2;
                  }
                  else if (*(uint64_t **)v98 == v110)
                  {
                    v92 = 2;
                  }
                  else
                  {
                    v92 = 1;
                  }
                }
                *(_QWORD *)v135 = v113;
                *(_QWORD *)&v135[8] = v112;
                v94 = v105;
                swift_bridgeObjectRetain();
                specialized static AdaptiveTabViewStrategy.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:coordinator:)((uint64_t)v65, (uint64_t)v137, v92, v101, v94, (uint64_t *)v135, v103, v42);

                swift_bridgeObjectRelease();
                outlined destroy of TabEntry((uint64_t)v137);
              }
              else
              {
                outlined destroy of TabEntry((uint64_t)v137);

              }
              v49 = MEMORY[0x1E0DEB940];
              goto LABEL_7;
            }
            *(_OWORD *)&v132[64] = *(_OWORD *)&v135[64];
            *(_OWORD *)&v132[80] = *(_OWORD *)&v135[80];
            *(_QWORD *)&v132[96] = *(_QWORD *)&v135[96];
            *(_OWORD *)v132 = *(_OWORD *)v135;
            *(_OWORD *)&v132[16] = *(_OWORD *)&v135[16];
            *(_OWORD *)&v132[32] = *(_OWORD *)&v135[32];
            *(_OWORD *)&v132[48] = *(_OWORD *)&v135[48];
            v76 = v46;
            v77 = objc_msgSend(v65, sel__uip_tabElement);
            if (v77)
            {
              v78 = v77;
              v79 = objc_msgSend(v77, sel__identifier);
              v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v82 = v81;

              if (v80 == TabItem.platformIdentifier.getter() && v82 == v83)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_38;
              }
              v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v84 & 1) != 0)
              {
LABEL_38:
                v47 = (uint64_t)v108;
LABEL_47:
                v89 = v118;
                specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(v78, (uint64_t)v132, v118, v113, v112);

                outlined destroy of TabItem((uint64_t)v132);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v89, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
                v48 = v111;
                goto LABEL_48;
              }

              v47 = (uint64_t)v108;
            }
            v78 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v132);
            objc_opt_self();
            v87 = (void *)swift_dynamicCastObjCClass();
            if (v87)
              v88 = v78;
            objc_msgSend(v65, sel__uip_setTabElement_, v87);

            goto LABEL_47;
          }
          v125 = *((_QWORD *)&v134[5] + 1);
          v52 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v52 != -1)
            swift_once();
          LOWORD(v119) = static TabOptions.TraitKey.defaultValue;
          v120 = *(_OWORD *)&qword_1EDF00118;
          v121 = word_1EDF00128;
          v122 = byte_1EDF0012A;
          v123 = qword_1EDF00130;
          v124 = word_1EDF00138;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          v53 = BYTE1(v126);
          outlined consume of TabCustomizationID?(v127, *((uint64_t *)&v127 + 1), v128);
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v132);
          outlined destroy of TabItem((uint64_t)v134);
          if ((v53 & 1) == 0)
            goto LABEL_19;
        }
        else
        {
          *(_OWORD *)&v132[64] = *(_OWORD *)&v135[64];
          *(_OWORD *)&v132[80] = *(_OWORD *)&v135[80];
          *(_QWORD *)&v132[96] = *(_QWORD *)&v135[96];
          *(_OWORD *)v132 = *(_OWORD *)v135;
          *(_OWORD *)&v132[16] = *(_OWORD *)&v135[16];
          *(_OWORD *)&v132[32] = *(_OWORD *)&v135[32];
          *(_OWORD *)&v132[48] = *(_OWORD *)&v135[48];
          v119 = *(_QWORD *)&v135[88];
          v54 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v54 != -1)
            swift_once();
          LOWORD(v126) = static TabOptions.TraitKey.defaultValue;
          v127 = *(_OWORD *)&qword_1EDF00118;
          v128 = word_1EDF00128;
          v129 = byte_1EDF0012A;
          v130 = qword_1EDF00130;
          v131 = word_1EDF00138;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          v55 = BYTE1(v134[0]);
          outlined consume of TabCustomizationID?(*((uint64_t *)&v134[0] + 1), *(uint64_t *)&v134[1], BYTE8(v134[1]));
          swift_bridgeObjectRelease();
          outlined destroy of TabItem((uint64_t)v132);
          if ((v55 & 1) == 0)
            goto LABEL_19;
        }
        outlined destroy of TabEntry((uint64_t)v137);

LABEL_7:
        EnumeratedSequence.Iterator.next()();
        outlined init with take of Binding<SearchFieldState>((uint64_t)&v138, (uint64_t)&v140, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: (UIViewController, TabEntry))?, (uint64_t)type metadata accessor for (offset: Int, element: (UIViewController, TabEntry)), (uint64_t)v49, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        v46 = v141;
      }
      while (v141);
    }
    (*(void (**)(char *, uint64_t))(v96[0] + 8))(v116, v117);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_endAccess();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized UIHostingController<>.setChildRootViewCreatingHostIfNeeded<A>(_:childID:transaction:coordinator:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  char v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Class v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  unint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  _QWORD v65[3];
  uint64_t v66;
  NSObject *v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78[13];
  __int16 v79;

  v6 = v5;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v65 - v19;
  v21 = objc_msgSend(v6, sel__uip_tabElement, v18);
  if (!v21)
    goto LABEL_11;
  v22 = v21;
  objc_opt_self();
  v23 = (void *)swift_dynamicCastObjCClass();
  if (!v23)
  {

LABEL_11:
    v76 = *(id *)&v6[direct field offset for UIHostingController.host];
    specialized _UIHostingView.setRootView(_:transaction:)(a1);

    return;
  }
  v72 = v6;
  v75 = a2;
  v76 = a3;
  v24 = objc_msgSend(v23, sel__identifier);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  v73 = a5;
  v28 = (uint64_t *)(a5 + direct field offset for TabViewCoordinator_Phone.groupHostCache);
  swift_beginAccess();
  v29 = *v28;
  swift_bridgeObjectRetain();
  v74 = v25;
  specialized Dictionary.subscript.getter(v25, v27, v29);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_bridgeObjectRelease();
  if (!v33)
  {
    v71 = a4;
    swift_endAccess();
LABEL_15:
    v44 = (unint64_t)v76;
    goto LABEL_16;
  }
  swift_endAccess();
  v36 = (int64_t)v76;
  swift_bridgeObjectRetain();
  v37 = specialized OrderedSet._find(_:)(v75, v36, v31, v33);
  if ((v38 & 1) != 0)
  {
    v71 = a4;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v44 = v36;
LABEL_16:
    static Log.tabView.getter();
    v45 = type metadata accessor for Logger();
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v15, 1, v45) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.default.getter();
      v49 = v48;
      if (os_log_type_enabled(v47, v48))
      {
        v50 = swift_slowAlloc();
        v70 = swift_slowAlloc();
        v78[0] = v70;
        *(_DWORD *)v50 = 136315394;
        swift_bridgeObjectRetain();
        v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, (unint64_t)v76, v78);
        LODWORD(v69) = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v50 + 12) = 2080;
        swift_bridgeObjectRetain();
        v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v27, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_186E48000, v47, (os_log_type_t)v69, "Making new VC for child '%s' in group '%s'", (uint8_t *)v50, 0x16u);
        v51 = v70;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v51, -1, -1);
        v52 = v50;
        v44 = (unint64_t)v76;
        MEMORY[0x18D760108](v52, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v45);
    }
    outlined init with copy of TabItem.RootView(a1, (uint64_t)v78);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    v54 = objc_allocWithZone(v53);
    v41 = specialized UIHostingController.init(rootView:)((uint64_t)v78);
    specialized TabViewCoordinator_Phone.cacheChild(_:childID:for:)(v41, v75, v44, v74, v27);

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v69 = v33;
  v70 = v31;
  if ((v37 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v37 < *(_QWORD *)(v35 + 16))
  {
    v39 = *(id *)(v35 + 8 * v37 + 32);
    swift_bridgeObjectRelease();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    v40 = swift_dynamicCastClass();
    if (v40)
    {
      v41 = (id)v40;
      static Log.tabView.getter();
      v42 = type metadata accessor for Logger();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v20, 1, v42) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      }
      else
      {
        v71 = v43;
        swift_bridgeObjectRetain_n();
        v58 = (unint64_t)v76;
        swift_bridgeObjectRetain_n();
        v59 = Logger.logObject.getter();
        v60 = static os_log_type_t.default.getter();
        v68 = v60;
        if (os_log_type_enabled(v59, v60))
        {
          v61 = swift_slowAlloc();
          v67 = v59;
          v62 = v61;
          v66 = swift_slowAlloc();
          v78[0] = v66;
          *(_DWORD *)v62 = 136315394;
          v65[1] = v62 + 4;
          swift_bridgeObjectRetain();
          v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v58, v78);
          v65[2] = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v62 + 12) = 2080;
          swift_bridgeObjectRetain();
          v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v27, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_186E48000, v67, (os_log_type_t)v68, "Using cached VC for child '%s' in group '%s'", (uint8_t *)v62, 0x16u);
          v63 = v66;
          swift_arrayDestroy();
          MEMORY[0x18D760108](v63, -1, -1);
          MEMORY[0x18D760108](v62, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

        }
        (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v42);
      }
      v64 = v39;
      specialized TabViewCoordinator_Phone.didUseChild(_:childID:for:)(v75, (uint64_t)v76, v74, v27);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_release();
LABEL_23:
      v78[0] = (uint64_t)v41;
      v79 = 1;
      v55 = *(void **)&v72[direct field offset for UIHostingController.host];
      v56 = v41;
      v57 = v55;
      specialized _UIHostingView.setRootView(_:transaction:)((uint64_t)v78);

      outlined destroy of TabItem.RootView((uint64_t)v78);
      return;
    }
    v71 = a4;

    swift_release();
    swift_release();
    swift_release();
    goto LABEL_15;
  }
  __break(1u);
}

void specialized UIHostingController.updateTabElementCreatingIfNeeded<A>(using:customization:environment:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;

  v5 = v4;
  v10 = objc_msgSend(v5, sel__uip_tabElement);
  if (!v10)
    goto LABEL_8;
  v21 = v10;
  v11 = objc_msgSend(v10, sel__identifier);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  if (v12 == TabItem.platformIdentifier.getter() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
LABEL_12:
    v18 = v21;
    goto LABEL_13;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v21;
  if ((v17 & 1) == 0)
  {

LABEL_8:
    v21 = specialized UIHostingController.createBridgedTab(using:)(a1);
    objc_opt_self();
    v19 = (void *)swift_dynamicCastObjCClass();
    if (v19)
      v20 = v21;
    objc_msgSend(v5, sel__uip_setTabElement_, v19);

    goto LABEL_12;
  }
LABEL_13:
  v22 = v18;
  specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(v18, a1, a2, a3, a4);

}

void specialized UIHostingController.updateTabGroupCreatingIfNeeded<A>(using:customization:environment:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  _BYTE v22[280];

  v11 = objc_msgSend(v5, sel__uip_tabElement);
  if (!v11)
    goto LABEL_9;
  v12 = v11;
  objc_opt_self();
  v13 = (void *)swift_dynamicCastObjCClass();
  if (!v13)
    goto LABEL_8;
  v14 = v13;
  v21 = a4;
  v15 = objc_msgSend(v13, sel__identifier);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  if (v16 == *(_QWORD *)(a1 + 24) && *(_QWORD *)(a1 + 32) == v18)
  {
    swift_bridgeObjectRelease();
    a4 = v21;
    goto LABEL_11;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  a4 = v21;
  if ((v20 & 1) == 0)
  {
LABEL_8:

LABEL_9:
    outlined init with copy of TabItemGroup(a1, (uint64_t)v22);
    v22[264] = 1;
    specialized UIHostingController.createBridgedTab<A>(using:coordinator:)((uint64_t)v22, a5);
    outlined destroy of TabEntry((uint64_t)v22);
    objc_opt_self();
    v14 = (void *)swift_dynamicCastObjCClassUnconditional();
    objc_msgSend(v5, sel__uip_setTabElement_, v14);
  }
LABEL_11:
  specialized UIHostingController.updateGroup<A>(_:using:customization:environment:coordinator:)(v14, a1, a2, a3, a4, a5);

}

uint64_t static AdaptiveTabViewStrategy.updatedSelection(didSelect:viewController:selectionCache:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v12 = a2;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v31 = a1;
      v32 = a2;
      v33 = a3;
      v15 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v36 = v30;
      *(_DWORD *)v15 = 136315138;
      v16 = objc_msgSend(v12, sel__uip_tabElement);
      v17 = v16;
      if (v16)
      {
        v18 = objc_msgSend(v16, sel_title);

        v17 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v20 = v19;

      }
      else
      {
        v20 = 0;
      }
      v34 = (uint64_t)v17;
      v35 = v20;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v21 = String.init<A>(describing:)();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v13, v14, "UITabBarController, didSelect viewController. Element:\n%s", v15, 0xCu);
      v23 = v30;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v23, -1, -1);
      MEMORY[0x18D760108](v15, -1, -1);

      a2 = v32;
      a3 = v33;
      a1 = v31;
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  v24 = objc_msgSend(a1, sel_selectedIndex);
  if (v24 == (id)NSNotFound.getter())
    return 0;
  v26 = objc_msgSend(a2, sel__uip_tabElement);
  static AdaptiveTabViewStrategy.getIndex(selectedElement:selectionCache:)(v26, a3);
  v25 = v27;

  return v25;
}

void static AdaptiveTabViewStrategy.getIndex(selectedElement:selectionCache:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  BOOL v20;

  if (!a2)
    return;
  v3 = a1;
  if (a1)
  {
    swift_bridgeObjectRetain();
    v3 = static AdaptiveTabViewStrategy.findRootSelectedElement(_:)(v3);
    v4 = objc_msgSend(v3, sel__identifier);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    swift_bridgeObjectRetain();
    v5 = 0;
    v7 = 0;
  }
  v8 = 0;
  v9 = a2 + 64;
  v10 = 1 << *(_BYTE *)(a2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    while (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v8 << 6);
      if (v7)
      {
LABEL_25:
        v19 = *(_QWORD *)(a2 + 56) + 32 * v15;
        v20 = *(_QWORD *)(v19 + 16) == v5 && v7 == *(_QWORD *)(v19 + 24);
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {

          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v13)
      goto LABEL_31;
    v17 = *(_QWORD *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_31;
      v17 = *(_QWORD *)(v9 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_31;
        v17 = *(_QWORD *)(v9 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_24:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
    if (v7)
      goto LABEL_25;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
  {
LABEL_31:

    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v13)
      goto LABEL_31;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
LABEL_34:
  __break(1u);
}

id static AdaptiveTabViewStrategy.swipeActionsConfiguration(for:edge:tabCache:)(void *a1, char a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t (*v27)(void);
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  _QWORD v35[13];
  uint64_t v36[13];

  LODWORD(v5) = a2 & 1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v12 = a1;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      v16 = swift_slowAlloc();
      v32 = a1;
      v17 = v16;
      v31 = swift_slowAlloc();
      v36[0] = v31;
      *(_DWORD *)v17 = 136315394;
      v33 = a3;
      LOBYTE(v35[0]) = (_BYTE)v5;
      v30 = v15;
      v18 = String.init<A>(describing:)();
      v34 = (int)v5;
      v35[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      v29[1] = v17 + 14;
      v5 = objc_msgSend(v12, sel_title);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;

      LOBYTE(v5) = v34;
      v23 = v20;
      a3 = v33;
      v35[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v13, (os_log_type_t)v30, "%s swipeActionsConfiguration tab: %s", (uint8_t *)v17, 0x16u);
      v24 = v31;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v24, -1, -1);
      v25 = v17;
      a1 = v32;
      MEMORY[0x18D760108](v25, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  static AdaptiveTabViewStrategy.getElement(for:tabCache:)(a1, a3, (uint64_t)v36);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v36, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (v35[3])
  {
    v26 = TabItem.swipeActionsConfiguration(for:)((char)v5);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of TabItem((uint64_t)v35);
  }
  else
  {
    v27 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v27);
    return 0;
  }
  return v26;
}

__n128 static AdaptiveTabViewStrategy.getElement(for:tabCache:)@<Q0>(id a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __n128 result;
  id v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  __int128 v18;
  __int128 v19;
  _BYTE __dst[264];
  _BYTE __src[264];
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;

  v3 = a1;
  if (a1)
  {
    v6 = objc_msgSend(a1, sel__identifier);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    if (a2)
    {
      if (*(_QWORD *)(a2 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9), (v11 & 1) != 0))
      {
        outlined init with copy of TabEntry(*(_QWORD *)(a2 + 56) + 272 * v10, (uint64_t)__src);
        swift_bridgeObjectRelease();
        if (v22 != 255)
        {
          outlined init with take of TabEntry(__src, &v23);
          outlined init with take of TabEntry(&v23, __src);
          if ((v22 & 1) != 0)
          {
            memcpy(__dst, __src, sizeof(__dst));
            outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&__dst[48], a3, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
            outlined destroy of TabItemGroup((uint64_t)__dst);
          }
          else
          {
            v18 = *(_OWORD *)&__src[80];
            *(_OWORD *)(a3 + 64) = *(_OWORD *)&__src[64];
            *(_OWORD *)(a3 + 80) = v18;
            *(_QWORD *)(a3 + 96) = *(_QWORD *)&__src[96];
            v19 = *(_OWORD *)&__src[16];
            *(_OWORD *)a3 = *(_OWORD *)__src;
            *(_OWORD *)(a3 + 16) = v19;
            result = *(__n128 *)&__src[48];
            *(_OWORD *)(a3 + 32) = *(_OWORD *)&__src[32];
            *(__n128 *)(a3 + 48) = result;
          }
          return result;
        }
      }
      else
      {
        memset(__src, 0, sizeof(__src));
        v22 = -1;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      memset(__src, 0, sizeof(__src));
      v22 = -1;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v23 = 0xD00000000000001FLL;
  v24 = 0x8000000187BDE530;
  if (v3)
  {
    v13 = objc_msgSend(v3, sel_title);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = v15;

  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)__src = v14;
  *(_QWORD *)&__src[8] = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v16._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 39;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  MEMORY[0x18D75AC90](v23, v24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 96) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

unint64_t static AdaptiveTabViewStrategy.contextMenu(for:tabCache:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[13];
  uint64_t v29[14];

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v10 = a1;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v27 = a2;
      v13 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v29[0] = v25;
      v24 = v13;
      *(_DWORD *)v13 = 136315138;
      v14 = objc_msgSend(v10, sel_title, v13 + 4);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = a1;
      v17 = v16;

      a2 = v27;
      v28[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a1 = v26;
      swift_bridgeObjectRelease();
      v18 = v24;
      _os_log_impl(&dword_186E48000, v11, v12, "contextMenu: forTab: %s", v24, 0xCu);
      v19 = v25;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v19, -1, -1);
      MEMORY[0x18D760108](v18, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  static AdaptiveTabViewStrategy.getElement(for:tabCache:)(a1, a2, (uint64_t)v29);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v29, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (v28[3])
  {
    v20 = (unint64_t)TabItem.menuConfiguration()();
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of TabItem((uint64_t)v28);
  }
  else
  {
    v21 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))v21);
    return 0;
  }
  return v20;
}

uint64_t static AdaptiveTabViewStrategy.acceptDropItems(from:onto:tabCache:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v29[3];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[6];
  uint64_t v40;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_186E48000, v11, v12, "acceptDropItems:fromSession:", v13, 2u);
      MEMORY[0x18D760108](v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  static AdaptiveTabViewStrategy.getElement(for:tabCache:)(a2, a3, (uint64_t)&v32);
  if (!*((_QWORD *)&v33 + 1))
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v32, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v39[4] = v36;
  v39[5] = v37;
  v40 = v38;
  v39[0] = v32;
  v39[1] = v33;
  v39[2] = v34;
  v39[3] = v35;
  v14 = *((_QWORD *)&v37 + 1);
  v31 = *((_QWORD *)&v37 + 1);
  v30 = 0u;
  memset(&v29[1], 0, 32);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v15 = v32;
  if ((_QWORD)v32)
  {
    v16 = *((_QWORD *)&v32 + 1);
    v17 = v33;
    v18 = BYTE8(v33);
    v29[0] = v34;
    swift_getObjectType();
    v19 = UIDropSession.itemProviders(for:)(v15);
    v31 = v14;
    v20 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v20 != -1)
      swift_once();
    LOWORD(v29[1]) = static TabOptions.TraitKey.defaultValue;
    *(_OWORD *)((char *)&v29[1] + 8) = *(_OWORD *)&qword_1EDF00118;
    WORD4(v29[2]) = word_1EDF00128;
    BYTE10(v29[2]) = byte_1EDF0012A;
    *(_QWORD *)&v30 = qword_1EDF00130;
    WORD4(v30) = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v21 = *((_QWORD *)&v32 + 1);
    v22 = v33;
    v23 = BYTE8(v33);
    outlined copy of TabCustomizationID?(*((uint64_t *)&v32 + 1), v33, BYTE8(v33));
    outlined consume of TabCustomizationID?(v21, v22, v23);
    swift_bridgeObjectRelease();
    if (v23 == 255)
      v24 = 0;
    else
      v24 = v21;
    if (v23 == 255)
      v25 = 0;
    else
      v25 = v22;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v15;
    *(_QWORD *)(v26 + 24) = v16;
    *(_QWORD *)(v26 + 32) = v17;
    *(_BYTE *)(v26 + 40) = v18;
    *(_DWORD *)(v26 + 41) = v32;
    *(_DWORD *)(v26 + 44) = *(_DWORD *)((char *)&v32 + 3);
    v27 = *((_QWORD *)&v29[0] + 1);
    *(_QWORD *)(v26 + 48) = *(_QWORD *)&v29[0];
    *(_QWORD *)(v26 + 56) = v27;
    *(_QWORD *)(v26 + 64) = v24;
    *(_QWORD *)(v26 + 72) = v25;
    *(_QWORD *)(v26 + 80) = v19;
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(v16, v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Binding<NavigationSplitViewColumn>?(v16, v17);
    swift_release();
  }
  return outlined destroy of TabItem((uint64_t)v39);
}

uint64_t static AdaptiveTabViewStrategy.updateTargeting(_:for:tabCache:)(char a1, id a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;

  static AdaptiveTabViewStrategy.getElement(for:tabCache:)(a2, a3, (uint64_t)&v7);
  if (!*((_QWORD *)&v8 + 1))
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v14[4] = v11;
  v14[5] = v12;
  v15 = v13;
  v14[0] = v7;
  v14[1] = v8;
  v14[2] = v9;
  v14[3] = v10;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((_QWORD)v7)
  {
    v4 = v8;
    if ((_QWORD)v8)
    {
      v5 = *((_QWORD *)&v7 + 1);
      LOBYTE(v7) = a1 & 1;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return outlined destroy of TabItem((uint64_t)v14);
}

id static AdaptiveTabViewStrategy.findRootSelectedElement(_:)(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = a1;
    v4 = objc_msgSend(v2, sel__selectedElement);
    if (v4)
    {
      v5 = v4;
      v6 = static AdaptiveTabViewStrategy.findRootSelectedElement(_:)();

      return (id)v6;
    }

  }
  return a1;
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:) in conformance AdaptiveTabViewStrategy(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  return static AdaptiveTabViewStrategy.updateHosts<A, B>(_:tabs:selected:environment:transaction:coordinator:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.updatedSelection(didSelect:viewController:selectionCache:) in conformance AdaptiveTabViewStrategy(void *a1, void *a2, uint64_t a3)
{
  return static AdaptiveTabViewStrategy.updatedSelection(didSelect:viewController:selectionCache:)(a1, a2, a3);
}

void protocol witness for static TabViewCoordinatorStrategy.updatedSelection(didSelect:element:selectionCache:) in conformance AdaptiveTabViewStrategy(uint64_t a1, void *a2, uint64_t a3)
{
  specialized static AdaptiveTabViewStrategy.updatedSelection(didSelect:element:selectionCache:)(a2, a3);
}

id protocol witness for static TabViewCoordinatorStrategy.swipeActionsConfiguration(for:edge:tabCache:) in conformance AdaptiveTabViewStrategy(void *a1, char a2, uint64_t a3)
{
  return static AdaptiveTabViewStrategy.swipeActionsConfiguration(for:edge:tabCache:)(a1, a2 & 1, a3);
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.operationToAcceptDropItems(from:onto:tabCache:) in conformance AdaptiveTabViewStrategy(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized static AdaptiveTabViewStrategy.operationToAcceptDropItems(from:onto:tabCache:)(a2, a3);
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.dropEntered(_:in:tabCache:) in conformance AdaptiveTabViewStrategy(id a1, uint64_t a2, uint64_t a3)
{
  return static AdaptiveTabViewStrategy.updateTargeting(_:for:tabCache:)(1, a1, a3);
}

uint64_t protocol witness for static TabViewCoordinatorStrategy.dropExited(_:in:tabCache:) in conformance AdaptiveTabViewStrategy(id a1, uint64_t a2, uint64_t a3)
{
  return static AdaptiveTabViewStrategy.updateTargeting(_:for:tabCache:)(0, a1, a3);
}

uint64_t specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v6 = v5;
  v8 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CAF4C0]);
  MEMORY[0x1E0C80A78](v10, v11);
  v40 = a2;
  v12 = *(_QWORD *)(a2 + 88);
  v44 = v12;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v13 = 0;
  v14 = 0;
  if (v49 >> 1 != 0xFFFFFFFF)
  {
    v15 = v48;
    v37 = v48;
    v38 = v47;
    if ((v49 & 0x8000000000000000) != 0)
    {
      v19 = v49 & 1;
      outlined copy of Text.Storage(v47, v48, v49 & 1);
      swift_bridgeObjectRetain();
      v16 = v47;
    }
    else
    {
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Int and conformance Int();
      IntegerFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
      v16 = Text.init<A>(_:format:)();
      v15 = v17;
      v19 = v18 & 1;
    }
    v47 = a4;
    v48 = a5;
    v44 = 0;
    v13 = Text.resolveString(in:with:idiom:)();
    v14 = v20;
    outlined consume of Text.Storage(v16, v15, v19);
    swift_bridgeObjectRelease();
    outlined consume of BadgeLabel?(v38, v37, v49);
  }
  v21 = objc_msgSend(a1, sel__badgeValue, v37, v38);
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

    v26 = a5;
    if (!v14)
    {
      v27 = a3;
      if (!v25)
        goto LABEL_20;
      v28 = 0;
      goto LABEL_19;
    }
    v27 = a3;
    if (v25)
    {
      if (v13 == v23 && v14 == v25)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
LABEL_18:
    v28 = (void *)MEMORY[0x18D75CC88](v13, v14);
LABEL_19:
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel__setBadgeValue_, v28);

    goto LABEL_20;
  }
  v27 = a3;
  v26 = a5;
  if (v14)
    goto LABEL_18;
LABEL_20:
  v30 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v30 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  PlatformItem.applyAccessibilityProperties(on:item:)(a1);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>, (uint64_t)&type metadata for SpringLoadingBehavior.Key, (uint64_t)&protocol witness table for SpringLoadingBehavior.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v26)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  LOBYTE(v46) = v12;
  TabItem.resolvedSpringLoadingBehavior(environmentBehavior:)((SwiftUI::SpringLoadingBehavior)&v46);
  if ((v44 != 2) != objc_msgSend(a1, sel_isSpringLoaded))
    objc_msgSend(a1, sel_setSpringLoaded_, v44 != 2);
  specialized UIHostingController.updateCustomizationProperties(on:using:customization:)(a1, v40, v27);
  v31 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v31 != -1)
    swift_once();
  v46 = static TabPopoverPresentationsKey.defaultValue;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease();
  if (v32)
  {
    v46 = static TabPopoverPresentationsKey.defaultValue;
    v33 = v6;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v34 = v33;
    specialized TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(v12, (uint64_t)a1, (uint64_t)v33);
    swift_bridgeObjectRelease();

  }
  v46 = v12;
  v35 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v35 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(0, 0x1FFFFFFFELL, 0);
  swift_bridgeObjectRelease();
  if (v45 == 1)
    specialized UIHostingController.updateTitleImage(on:using:)(a1, (uint64_t)&v47);
  return outlined destroy of PlatformItem((uint64_t)&v47);
}

void specialized UIHostingController.updateGroup<A>(_:using:customization:environment:coordinator:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[6];
  uint64_t v25;

  outlined init with copy of SwiftUIAnySortComparator?(a2 + 48, (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (*((_QWORD *)&v18 + 1))
  {
    v24[4] = v21;
    v24[5] = v22;
    v25 = v23;
    v24[0] = v17;
    v24[1] = v18;
    v24[2] = v19;
    v24[3] = v20;
    specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(a1, (uint64_t)v24, a3, a4, a5);
    outlined destroy of TabItem((uint64_t)v24);
  }
  else
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  v12 = TabItemGroup.sidebarReorderable.getter();
  if (v12 != objc_msgSend(a1, sel__allowsReordering))
    objc_msgSend(a1, sel__setAllowsReordering_, TabItemGroup.sidebarReorderable.getter());
  specialized UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(a1, a2, a3, a4, a5, a6);
  v13 = objc_msgSend(a1, sel__selectedElement);

  if (!v13)
  {
    v14 = objc_msgSend(a1, sel__children);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v17 = v15;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElement);
    type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E0DC4430, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [_UITab] and conformance [A]();
    Sequence.first<A>(ofType:)();
    swift_bridgeObjectRelease();
    v16 = *(void **)&v24[0];
    objc_msgSend(a1, sel__setSelectedElement_, *(_QWORD *)&v24[0]);

  }
}

uint64_t specialized UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  os_log_t v62;
  unsigned __int8 *v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD **v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  unsigned __int8 *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  Swift::Int v109;
  uint64_t v110;
  char v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  os_log_t v130;
  uint64_t v131;
  int v132;
  uint8_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  NSObject *v138;
  uint64_t v139;
  id v140;
  unint64_t v141;
  void *v142;
  char *v143;
  NSObject *v144;
  int v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  char **v174;
  uint64_t v175;
  NSObject *v177;
  os_log_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  unint64_t v190;
  id v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t i;
  void *v198;
  id v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  id v204;
  void *v205;
  uint64_t v206;
  char *v207;
  id v208;
  char v209;
  char *v210;
  void *v211;
  id v212;
  Class isa;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  _QWORD *v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  Swift::Int v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  int v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  NSObject *v243;
  NSObject *v244;
  uint8_t *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  id v262;
  id v263;
  uint64_t v264;
  uint64_t v265;
  Class v266;
  id v267;
  unint64_t v268;
  NSObject *v269;
  NSObject *v270;
  uint64_t v271;
  id j;
  void *v273;
  char *v274;
  os_log_t v275;
  unsigned __int8 v276;
  unint64_t v277;
  uint64_t v278;
  void *v279;
  id v280;
  id v281;
  int v282;
  id v283;
  uint8_t *v284;
  id v285;
  uint64_t v286;
  void *v287;
  uint64_t v289;
  void (*v290)(uint64_t);
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  Swift::Int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  Class v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  NSObject *v315;
  os_log_t v316;
  uint8_t *v317;
  unint64_t v318;
  os_log_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  os_log_t v330;
  uint64_t v331;
  Swift::String v332;
  Swift::String v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  _QWORD *v342;
  Swift::Int v343;
  id v344;
  __int128 *v345;
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint8_t *v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  char *v359;
  uint64_t *v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _OWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  NSObject *v376;
  char *v377;
  unsigned __int8 *v378;
  uint64_t v379;
  uint64_t (*v380)(_OWORD *, uint64_t, uint64_t);
  _OWORD *v381;
  os_log_t v382;
  char *v383;
  unsigned __int8 *v384;
  char *v385;
  uint64_t v386;
  uint8_t *v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  __int16 v393;
  uint64_t v394;
  uint64_t v395[3];
  _OWORD v396[17];
  _OWORD v397[17];
  _BYTE v398[264];
  uint64_t v399[35];
  uint64_t v400;
  __int128 v401;
  __int16 v402;
  char v403;
  uint64_t v404;
  __int16 v405;
  uint64_t v406;
  uint64_t v407;
  _BYTE v408[264];
  unsigned __int8 v409;
  uint64_t v410;

  v367 = a6;
  v351 = a4;
  v352 = a5;
  v353 = a3;
  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v334 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TabViewCustomization();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v340 = (char *)&v334 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v334 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v341 = (uint64_t)&v334 - v22;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v23, v24);
  v375 = (char *)&v334 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v383 = (char *)&v334 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v339 = (char *)&v334 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (_OWORD *)((char *)&v334 - v34);
  static Log.tabView.getter();
  v36 = type metadata accessor for Logger();
  v368 = *(_QWORD *)(v36 - 8);
  v380 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v368 + 48);
  v37 = v380(v35, 1, v36);
  v386 = v36;
  v379 = a2;
  v344 = a1;
  v337 = v12;
  v338 = v11;
  v335 = v19;
  v336 = v13;
  if (v37 == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    outlined init with copy of TabItemGroup(a2, (uint64_t)v396);
    outlined init with copy of TabItemGroup(a2, (uint64_t)v398);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      LODWORD(v385) = v39;
      v388 = (uint64_t)v38;
      v40 = swift_slowAlloc();
      v384 = (unsigned __int8 *)swift_slowAlloc();
      v395[0] = (uint64_t)v384;
      *(_DWORD *)v40 = 136315394;
      v41 = *((_QWORD *)&v396[1] + 1);
      v42 = *(_QWORD *)&v396[2];
      outlined copy of TabCustomizationID.Base();
      v399[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v395);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of TabCustomizationID.Base();
      outlined destroy of TabItemGroup((uint64_t)v396);
      v387 = (uint8_t *)v40;
      *(_WORD *)(v40 + 12) = 2080;
      v43 = TabItemGroup.allChildEntries.getter();
      v44 = *(_QWORD *)(v43 + 16);
      if (v44)
      {
        v381 = v35;
        v394 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
        v378 = (unsigned __int8 *)v43;
        v45 = v43 + 32;
        v46 = &v409;
        v382 = (os_log_t)&v409;
        do
        {
          outlined init with copy of TabEntry(v45, (uint64_t)v399);
          outlined init with copy of TabEntry((uint64_t)v399, (uint64_t)v408);
          if ((*v46 & 1) != 0)
          {
            memcpy(v397, v408, 0x108uLL);
            v47 = *((_QWORD *)&v397[1] + 1);
            v48 = *(_QWORD *)&v397[2];
            outlined copy of TabCustomizationID.Base();
            outlined destroy of TabItemGroup((uint64_t)v397);
          }
          else
          {
            v397[4] = *(_OWORD *)&v408[64];
            v397[5] = *(_OWORD *)&v408[80];
            *(_QWORD *)&v397[6] = *(_QWORD *)&v408[96];
            v397[0] = *(_OWORD *)v408;
            v397[1] = *(_OWORD *)&v408[16];
            v397[2] = *(_OWORD *)&v408[32];
            v397[3] = *(_OWORD *)&v408[48];
            v400 = *(_QWORD *)&v408[96];
            v47 = dispatch thunk of CustomStringConvertible.description.getter();
            v48 = v51;
            v52 = *((_QWORD *)&v397[5] + 1);
            v410 = *((_QWORD *)&v397[5] + 1);
            v53 = one-time initialization token for defaultValue;
            swift_bridgeObjectRetain();
            if (v53 != -1)
              swift_once();
            LOWORD(v389) = static TabOptions.TraitKey.defaultValue;
            v390 = *(_OWORD *)&qword_1EDF00118;
            LOWORD(v391) = word_1EDF00128;
            BYTE2(v391) = byte_1EDF0012A;
            v392 = qword_1EDF00130;
            v393 = word_1EDF00138;
            ViewTraitCollection.value<A>(for:defaultValue:)();
            swift_bridgeObjectRelease();
            v54 = v405;
            outlined consume of TabCustomizationID?(v401, *((uint64_t *)&v401 + 1), v402);
            swift_bridgeObjectRelease();
            if ((v54 & 1) != 0)
            {
              v400 = v52;
              if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
                && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
              {
                v410 = v52;
                LOWORD(v389) = static TabOptions.TraitKey.defaultValue;
                v390 = *(_OWORD *)&qword_1EDF00118;
                LOWORD(v391) = word_1EDF00128;
                BYTE2(v391) = byte_1EDF0012A;
                v392 = qword_1EDF00130;
                v393 = word_1EDF00138;
                ViewTraitCollection.value<A>(for:defaultValue:)();
                v55 = v401;
                v56 = v402;
                outlined copy of TabCustomizationID?(v401, *((uint64_t *)&v401 + 1), v402);
                outlined consume of TabCustomizationID?(v55, *((uint64_t *)&v55 + 1), v56);
                swift_bridgeObjectRelease();
                if (v56 != 255)
                {
                  swift_bridgeObjectRelease();
                  v48 = *((_QWORD *)&v55 + 1);
                  v47 = v55;
                }
                v46 = (unsigned __int8 *)v382;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              if (one-time initialization token for searchPlatformIdentifier != -1)
                swift_once();
              v47 = static TabItem.searchPlatformIdentifier;
              v48 = *(_QWORD *)algn_1EDF00098;
              swift_bridgeObjectRetain();
            }
            outlined destroy of TabItem((uint64_t)v397);
          }
          outlined destroy of TabEntry((uint64_t)v399);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v49 = *(_QWORD *)(v394 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
          v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47, v48);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v50);
          v45 += 272;
          --v44;
        }
        while (v44);
        swift_bridgeObjectRelease();
        v57 = v394;
        v35 = v381;
      }
      else
      {
        swift_bridgeObjectRelease();
        v57 = MEMORY[0x1E0DEE9D8];
      }
      v58 = v387;
      v399[0] = v57;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v59 = BidirectionalCollection<>.joined(separator:)();
      v61 = v60;
      swift_bridgeObjectRelease();
      v399[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, v395);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)v398);
      v62 = (os_log_t)v388;
      _os_log_impl(&dword_186E48000, (os_log_t)v388, (os_log_type_t)v385, "Resolved children of group %s:\n%s", v58, 0x16u);
      v63 = v384;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v63, -1, -1);
      MEMORY[0x18D760108](v58, -1, -1);

      a1 = v344;
    }
    else
    {

      outlined destroy of TabItemGroup((uint64_t)v396);
      outlined destroy of TabItemGroup((uint64_t)v398);
    }
    (*(void (**)(_OWORD *, uint64_t))(v368 + 8))(v35, v386);
  }
  v64 = objc_msgSend(a1, sel__children);
  v65 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
  v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v67 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6_UITabCG_SSs5NeverOTg50157_s7SwiftUI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B72of5using13customization11environment11coordinatorySo18_dB223GroupC_AA12TabItemGroupVAA7BindingVyAA20TabViewCustomizationVGSgAA17EnvironmentValuesVAA24TabViewCoordinator_PhoneCyqd__GtAA26TabViewCoordinatorStrategyRd__lFSSSo01_Y0Ccfu2_33_3d754e018c1b0ac695a0c02c1b628b04A0_SSTf3nnnpk_nTf1cn_n(v66);
  swift_bridgeObjectRelease();
  v68 = v379;
  v69 = TabItemGroup.allChildEntries.getter();
  v70 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d154UI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B72of5using13customization11environment11coordinatorySo18_UITabb11GroupC_AA12f26ItemGroupVAA7BindingVyAA20f47ViewCustomizationVGSgAA17EnvironmentValuesVAA24f33ViewCoordinator_PhoneCyqd__GtAA26f34ViewCoordinatorStrategyRd__lFSSAA8fG56Ocfu3_33_9ed0a70f676a1ab0b2fbeb64a187c970A0_SSTf3nnnpk_nTf1cn_n(v69);
  v334 = 0;
  swift_bridgeObjectRelease();
  v399[0] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v67, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v356 = v399[0];
  v71 = objc_msgSend(a1, sel__children);
  v347 = v65;
  v72 = v68;
  v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v74 = *(_QWORD *)(TabItemGroup.allChildEntries.getter() + 16);
  swift_bridgeObjectRelease();
  v75 = specialized Array.init(repeating:count:)(0, v74, &lazy cache variable for type metadata for _UITab?, &lazy cache variable for type metadata for _UITab, 0x1E0DC4430);
  v410 = v75;
  v76 = *(_QWORD *)(v72 + 24);
  v77 = *(_QWORD *)(v72 + 32);
  v78 = (_QWORD **)(v367 + direct field offset for TabViewCoordinator_Phone.groupHostCache);
  swift_beginAccess();
  v342 = v78;
  v79 = (char *)*v78;
  outlined copy of TabCustomizationID.Base();
  v389 = specialized Dictionary.subscript.getter(v76, v77, (uint64_t)v79);
  *(_QWORD *)&v390 = v80;
  *((_QWORD *)&v390 + 1) = v81;
  v391 = v82;
  swift_endAccess();
  v83 = v356;
  outlined consume of TabCustomizationID.Base();
  v355 = *(uint8_t **)(v83 + 16);
  if (!v355)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_215:
    swift_bridgeObjectRelease();
    v399[0] = MEMORY[0x1E0DEE9D8];
    v196 = *(_QWORD *)(v75 + 16);
    if (v196)
    {
      swift_bridgeObjectRetain_n();
      for (i = 0; i != v196; ++i)
      {
        v198 = *(void **)(v75 + 8 * i + 32);
        if (v198)
        {
          v199 = v198;
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((v399[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v399[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v86 = v399[0];
    }
    else
    {
      swift_bridgeObjectRetain();
      v86 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v200 = (char *)objc_msgSend(v344, sel__selectedElement);
    v79 = v200;
    if (v86 >> 62)
      goto LABEL_260;
    v201 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
    v202 = v200;
    swift_bridgeObjectRetain();
    v383 = v79;
    if (v201)
      goto LABEL_226;
    goto LABEL_261;
  }
  v84 = 0;
  v359 = (char *)&v390 + 8;
  v360 = &v391;
  v354 = v83 + 32;
  v85 = &v409;
  v366 = &v396[3];
  v349 = v73 & 0xC000000000000001;
  v350 = v73;
  v348 = v73 + 32;
  v345 = &v390;
  v346 = v408;
  v377 = v67 + 32;
  v361 = xmmword_187C05380;
  v358 = xmmword_187C290A0;
  v357 = MEMORY[0x1E0DEE9B8] + 8;
  v86 = (unint64_t)v383;
  v87 = v67;
  v384 = (unsigned __int8 *)v67;
  v378 = &v409;
  while (1)
  {
    if ((unint64_t)v84 >= *(_QWORD *)(v356 + 16))
      goto LABEL_248;
    v88 = v354 + 40 * (_QWORD)v84;
    v89 = *(_QWORD *)v88;
    v90 = *(_OWORD **)(v88 + 8);
    v91 = *(unsigned __int8 *)(v88 + 32);
    v387 = v84;
    v381 = v90;
    if (!v91)
    {
      if ((_OWORD *)v89 == v90)
        goto LABEL_32;
      if ((uint64_t)v90 < v89)
        goto LABEL_257;
      while (1)
      {
        if (v89 >= (uint64_t)v90)
        {
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
          goto LABEL_252;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v89, 1, v87);
        v143 = &v377[16 * v89];
        v144 = *(NSObject **)v143;
        v79 = (char *)*((_QWORD *)v143 + 1);
        swift_bridgeObjectRetain();
        static Log.tabView.getter();
        v145 = v380((_OWORD *)v86, 1, v386);
        v388 = v89;
        v385 = v79;
        v382 = v144;
        if (v145 == 1)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v86, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
        }
        else
        {
          v146 = swift_allocObject();
          *(_QWORD *)(v146 + 16) = v144;
          *(_QWORD *)(v146 + 24) = v79;
          swift_bridgeObjectRetain_n();
          v147 = Logger.logObject.getter();
          v148 = static os_log_type_t.default.getter();
          v149 = swift_allocObject();
          *(_BYTE *)(v149 + 16) = 32;
          v150 = swift_allocObject();
          *(_BYTE *)(v150 + 16) = 8;
          v151 = swift_allocObject();
          *(_QWORD *)(v151 + 16) = partial apply for implicit closure #2 in ScrollActionDispatcher.updateValue();
          *(_QWORD *)(v151 + 24) = v146;
          v152 = swift_allocObject();
          *(_QWORD *)(v152 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
          *(_QWORD *)(v152 + 24) = v151;
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v153 = swift_allocObject();
          *(_OWORD *)(v153 + 16) = v361;
          *(_QWORD *)(v153 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(_QWORD *)(v153 + 40) = v149;
          *(_QWORD *)(v153 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(_QWORD *)(v153 + 56) = v150;
          *(_QWORD *)(v153 + 64) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(_QWORD *)(v153 + 72) = v152;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          v376 = v147;
          if (os_log_type_enabled(v147, v148))
          {
            v154 = swift_slowAlloc();
            v155 = swift_slowAlloc();
            v399[0] = v155;
            *(_WORD *)v154 = 258;
            *(_BYTE *)(v154 + 2) = 32;
            swift_release();
            *(_BYTE *)(v154 + 3) = 8;
            swift_release();
            v79 = v385;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v154 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v144, (unint64_t)v79, v399);
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease_n();
            v156 = v376;
            _os_log_impl(&dword_186E48000, v376, v148, "Removing VC for cached child '%s'", (uint8_t *)v154, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x18D760108](v155, -1, -1);
            MEMORY[0x18D760108](v154, -1, -1);

          }
          else
          {
            v157 = (uint64_t)v385;
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            v79 = (char *)v157;
          }
          v86 = (unint64_t)v383;
          (*(void (**)(char *, uint64_t))(v368 + 8))(v383, v386);
          v72 = v379;
          v89 = v388;
          v90 = v381;
        }
        v85 = v378;
        v158 = *((_QWORD *)&v390 + 1);
        if (*((_QWORD *)&v390 + 1))
        {
          v79 = (char *)v390;
          v159 = *(_QWORD *)(*((_QWORD *)&v390 + 1) + 16);
          if ((_QWORD)v390)
          {
            swift_retain();
            v109 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v382, (uint64_t)v385, v158 + 32, v159, (_QWORD *)v79 + 2);
            v161 = v160;
            v163 = v162;
            swift_release();
            if ((v161 & 1) == 0)
            {
              v164 = *(_QWORD *)(v158 + 16);
              swift_beginAccess();
              if ((*((_QWORD *)v79 + 2) & 0x3FLL) == (*((_QWORD *)v79 + 3) & 0x3FLL))
              {
                if (!v164)
                  goto LABEL_123;
              }
              else if (v164 <= static _HashTable.minimumCapacity(forScale:)())
              {
                goto LABEL_123;
              }
              if ((swift_isUniquelyReferenced_native() & 1) == 0)
              {
                v165 = _HashTable.copy()();
                swift_release();
                *(_QWORD *)&v390 = v165;
                v79 = (char *)v165;
                if (!v165)
                  goto LABEL_353;
              }
              v86 = (unint64_t)(v79 + 16);
              swift_retain();
              specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v163, (_QWORD *)v79 + 2, (uint64_t)(v79 + 32), (uint64_t)v345);
              if (__OFADD__(v109, 1))
                goto LABEL_253;
              if (v109 + 1 < v109)
                goto LABEL_254;
              v166 = *((_QWORD *)&v390 + 1);
              swift_retain();
              specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v109, v109 + 1, v166, (_QWORD *)v79 + 2);
              swift_release();
              swift_release();
              specialized ContiguousArray.remove(at:)(v109);
              v87 = v384;
              goto LABEL_133;
            }
            swift_bridgeObjectRelease();
            v86 = (unint64_t)v383;
            v87 = v384;
LABEL_135:
            v89 = v388;
            v72 = v379;
            v90 = v381;
            goto LABEL_95;
          }
          if (v159)
          {
            v79 = v385;
            if (*(os_log_t *)(*((_QWORD *)&v390 + 1) + 32) == v382
              && *(char **)(*((_QWORD *)&v390 + 1) + 40) == v385
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              v109 = 0;
              goto LABEL_114;
            }
            if (v159 != 1)
            {
              if (*(os_log_t *)(v158 + 48) == v382 && *(char **)(v158 + 56) == v79
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                v109 = 1;
                goto LABEL_114;
              }
              if (v159 != 2)
              {
                if (*(os_log_t *)(v158 + 64) == v382 && *(char **)(v158 + 72) == v79
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  v109 = 2;
                  goto LABEL_114;
                }
                if (v159 != 3)
                {
                  if (*(os_log_t *)(v158 + 80) == v382 && *(char **)(v158 + 88) == v79
                    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    v109 = 3;
                    goto LABEL_114;
                  }
                  if (v159 != 4)
                  {
                    if (*(os_log_t *)(v158 + 96) == v382 && *(char **)(v158 + 104) == v79
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      v109 = 4;
                      goto LABEL_114;
                    }
                    if (v159 != 5)
                    {
                      if (*(os_log_t *)(v158 + 112) == v382 && *(char **)(v158 + 120) == v79
                        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        v109 = 5;
                      }
                      else
                      {
                        v174 = (char **)(v158 + 136);
                        v175 = 6;
                        while (1)
                        {
                          if (v159 == v175)
                          {
                            v86 = (unint64_t)v383;
                            v89 = v388;
                            v72 = v379;
                            v90 = v381;
                            goto LABEL_94;
                          }
                          if (*(v174 - 1) == (char *)v382 && *v174 == v79)
                            break;
                          v109 = v175++;
                          v174 += 2;
                          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            goto LABEL_114;
                        }
                        v109 = v175;
                      }
LABEL_114:
                      if (*(_QWORD *)(v158 + 16))
                      {
                        specialized ContiguousArray.remove(at:)(v109);
                        v87 = v384;
                        goto LABEL_134;
                      }
LABEL_123:
                      v87 = v384;
                      specialized ContiguousArray.remove(at:)(v109);
                      v167 = v390;
                      if ((_QWORD)v390)
                      {
                        swift_beginAccess();
                        v168 = *(_QWORD *)(v167 + 24) & 0x3FLL;
                        v169 = *(_QWORD *)(*((_QWORD *)&v167 + 1) + 16);
                        if (v168)
                        {
LABEL_129:
                          v170 = MEMORY[0x18D754F48](v169);
                          if (v168 <= v170)
                            v171 = v170;
                          else
                            v171 = v168;
                          v172 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(*((Swift::Int *)&v167 + 1), v171, 0, v168);
                          swift_release();
                          *(_QWORD *)&v390 = v172;
                          goto LABEL_133;
                        }
                      }
                      else
                      {
                        v168 = 0;
                        v169 = *(_QWORD *)(*((_QWORD *)&v390 + 1) + 16);
                      }
                      if (v169 >= 0x10)
                        goto LABEL_129;
                      swift_release();
                      *(_QWORD *)&v390 = 0;
LABEL_133:
                      v79 = v385;
LABEL_134:
                      swift_bridgeObjectRelease();
                      v173 = (void *)specialized ContiguousArray.remove(at:)(v109);
                      swift_bridgeObjectRelease();

                      v86 = (unint64_t)v383;
                      goto LABEL_135;
                    }
                  }
                }
              }
            }
          }
          else
          {
            v79 = v385;
          }
        }
LABEL_94:
        swift_bridgeObjectRelease();
        v87 = v384;
LABEL_95:
        ++v89;
        v84 = v387;
        if ((_OWORD *)v89 == v90)
          goto LABEL_32;
      }
    }
    if (v91 == 1)
      break;
    v178 = *(os_log_t *)(v88 + 16);
    v177 = *(NSObject **)(v88 + 24);
    LOBYTE(v406) = 0;
    if ((_OWORD *)v89 != v90)
    {
      if ((uint64_t)v90 < v89)
        goto LABEL_256;
      if (v89 >= (uint64_t)v90)
        goto LABEL_258;
      if (v178 != v177)
      {
        if ((uint64_t)v177 < (uint64_t)v178)
          goto LABEL_259;
        v385 = (char *)v90 - 1;
        v86 = v89;
        v382 = v177;
        v388 = v89;
        do
        {
          if (v178 == v177)
            goto LABEL_245;
          v179 = *(_QWORD *)(v72 + 8);
          v79 = *(char **)(v72 + 16);
          v180 = specialized Array.count.getter(v79);
          if (v180)
          {
            v181 = v180;
            *(_QWORD *)v398 = specialized ContiguousArray.init()();
            swift_bridgeObjectRetain();
            specialized ContiguousArray.reserveCapacity(_:)(v181);
            if (v181 < 0)
              goto LABEL_249;
            v182 = (uint64_t)(v79 + 32);
            do
            {
              outlined init with copy of TabItem(v182, (uint64_t)v396);
              outlined init with copy of TabItem((uint64_t)v396, (uint64_t)v408);
              *v85 = 0;
              outlined destroy of TabItem((uint64_t)v396);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              v183 = *(_QWORD *)(*(_QWORD *)v398 + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v183);
              v184 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v183, v408);
              destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v184);
              v182 += 104;
              --v181;
            }
            while (v181);
            swift_bridgeObjectRelease();
            v79 = *(char **)v398;
            v72 = v379;
            v90 = v381;
          }
          else
          {
            v79 = (char *)specialized static Array._allocateUninitialized(_:)(0);
          }
          *(_QWORD *)v408 = v179;
          swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)((uint64_t)v79);
          v185 = *(_QWORD *)v408;
          v87 = v384;
          if (((unint64_t)v178 & 0x8000000000000000) != 0
            || (uint64_t)v178 >= specialized Array.count.getter(*(_QWORD *)v408))
          {
            memset(v408, 0, sizeof(v408));
            v409 = -1;
          }
          else
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v178, 1, v185);
            outlined init with copy of TabEntry(v185 + 272 * (_QWORD)v178 + 32, (uint64_t)v408);
          }
          swift_bridgeObjectRelease();
          if (v409 == 255)
          {
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v408, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            v399[0] = 0;
            v399[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            swift_bridgeObjectRelease();
            v399[0] = 0xD000000000000021;
            v399[1] = 0x8000000187BDE3D0;
            *(_QWORD *)v408 = v178;
            v333._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v333);
            swift_bridgeObjectRelease();
            goto LABEL_356;
          }
          outlined init with take of TabEntry(v408, v399);
          outlined init with copy of TabEntry((uint64_t)v399, (uint64_t)v408);
          if ((*v85 & 1) != 0)
          {
            memcpy(v396, v408, 0x108uLL);
            outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v366, (uint64_t)v398, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
            if (*(_QWORD *)&v398[24])
            {
              v407 = *(_QWORD *)&v398[88];
              v186 = one-time initialization token for defaultValue;
              swift_bridgeObjectRetain();
              if (v186 != -1)
                swift_once();
              LOWORD(v400) = static TabOptions.TraitKey.defaultValue;
              v401 = *(_OWORD *)&qword_1EDF00118;
              v402 = word_1EDF00128;
              v403 = byte_1EDF0012A;
              v404 = qword_1EDF00130;
              v405 = word_1EDF00138;
              ViewTraitCollection.value<A>(for:defaultValue:)();
              swift_bridgeObjectRelease();
              v187 = BYTE1(v397[0]);
              outlined consume of TabCustomizationID?(*((uint64_t *)&v397[0] + 1), *(uint64_t *)&v397[1], BYTE8(v397[1]));
              swift_bridgeObjectRelease();
              outlined destroy of TabItemGroup((uint64_t)v396);
              outlined destroy of TabItem((uint64_t)v398);
              if ((v187 & 1) != 0)
                goto LABEL_206;
            }
            else
            {
              outlined destroy of TabItemGroup((uint64_t)v396);
              outlined destroy of AccessibilityScrollableContext?((uint64_t)v398, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            }
          }
          else
          {
            v396[4] = *(_OWORD *)&v408[64];
            v396[5] = *(_OWORD *)&v408[80];
            *(_QWORD *)&v396[6] = *(_QWORD *)&v408[96];
            v396[0] = *(_OWORD *)v408;
            v396[1] = *(_OWORD *)&v408[16];
            v396[2] = *(_OWORD *)&v408[32];
            v396[3] = *(_OWORD *)&v408[48];
            v400 = *(_QWORD *)&v408[88];
            v188 = one-time initialization token for defaultValue;
            swift_bridgeObjectRetain();
            if (v188 != -1)
              swift_once();
            LOWORD(v397[0]) = static TabOptions.TraitKey.defaultValue;
            *(_OWORD *)((char *)v397 + 8) = *(_OWORD *)&qword_1EDF00118;
            WORD4(v397[1]) = word_1EDF00128;
            BYTE10(v397[1]) = byte_1EDF0012A;
            *(_QWORD *)&v397[2] = qword_1EDF00130;
            WORD4(v397[2]) = word_1EDF00138;
            ViewTraitCollection.value<A>(for:defaultValue:)();
            swift_bridgeObjectRelease();
            v189 = v398[1];
            outlined consume of TabCustomizationID?(*(uint64_t *)&v398[8], *(uint64_t *)&v398[16], v398[24]);
            swift_bridgeObjectRelease();
            outlined destroy of TabItem((uint64_t)v396);
            if ((v189 & 1) != 0)
              goto LABEL_206;
          }
          v190 = v349;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v86, v349 == 0, v350);
          if (v190)
            v191 = (id)MEMORY[0x18D75E3BC](v86, v350);
          else
            v191 = *(id *)(v348 + 8 * v86);
          v192 = v191;
          v193 = v410;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized _ArrayBuffer._consumeAndCreateNew()(v193);
          if (((unint64_t)v178 & 0x8000000000000000) != 0)
            goto LABEL_250;
          if (*(_QWORD *)(v193 + 16) <= (unint64_t)v178)
            goto LABEL_251;
          v194 = v193 + 8 * (_QWORD)v178;
          v195 = *(void **)(v194 + 32);
          *(_QWORD *)(v194 + 32) = v192;

          specialized Array._endMutation()();
LABEL_206:
          outlined destroy of TabEntry((uint64_t)v399);
          if ((v406 & 1) != 0)
          {
            v84 = v387;
            break;
          }
          v84 = v387;
          if ((_OWORD *)(v86 + 1) == v90)
            break;
          if ((uint64_t)(v86 + 1) < v388)
            goto LABEL_246;
          if ((char *)v86 == v385)
            goto LABEL_247;
          v178 = (os_log_t)((char *)v178 + 1);
          ++v86;
          v177 = v382;
        }
        while (v178 != v382);
      }
    }
    v86 = (unint64_t)v383;
LABEL_32:
    if (++v84 == v355)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v75 = v410;
      goto LABEL_215;
    }
  }
  if ((_OWORD *)v89 == v90)
    goto LABEL_32;
  if ((uint64_t)v90 >= v89)
  {
    while (1)
    {
      if (v89 >= (uint64_t)v90)
        goto LABEL_237;
      v388 = v89;
      v86 = *(_QWORD *)(v72 + 8);
      v92 = *(_QWORD *)(v72 + 16);
      v93 = specialized Array.count.getter(v92);
      if (v93)
      {
        v94 = v93;
        *(_QWORD *)v398 = specialized ContiguousArray.init()();
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)(v94);
        if (v94 < 0)
          goto LABEL_240;
        v79 = (char *)(v92 + 32);
        do
        {
          outlined init with copy of TabItem((uint64_t)v79, (uint64_t)v396);
          outlined init with copy of TabItem((uint64_t)v396, (uint64_t)v408);
          *v85 = 0;
          outlined destroy of TabItem((uint64_t)v396);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v95 = *(_QWORD *)(*(_QWORD *)v398 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v95);
          v96 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v95, v408);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v96);
          v79 += 104;
          --v94;
        }
        while (v94);
        swift_bridgeObjectRelease();
        v97 = *(_QWORD *)v398;
        v87 = v384;
      }
      else
      {
        v97 = specialized static Array._allocateUninitialized(_:)(0);
      }
      v98 = specialized Array.count.getter(v97);
      v99 = specialized Array.count.getter(v86);
      v100 = v99 + v98;
      if (__OFADD__(v99, v98))
        goto LABEL_238;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v408 = v86;
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v102 = *(_QWORD *)(v86 + 24) >> 1, v102 < v100))
      {
        if (*(_QWORD *)(v86 + 16) <= v100)
          v103 = v100;
        else
          v103 = *(_QWORD *)(v86 + 16);
        v86 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v103, 1, (char *)v86);
        *(_QWORD *)v408 = v86;
        v102 = *(_QWORD *)(v86 + 24) >> 1;
      }
      v79 = *(char **)(v86 + 16);
      v104 = v102 - (_QWORD)v79;
      if (specialized Array.count.getter(v97))
      {
        if (v104 < v98)
          goto LABEL_241;
        swift_arrayInitWithCopy();
        if (v98 >= 1)
        {
          v105 = *(_QWORD *)(v86 + 16);
          v106 = __OFADD__(v105, v98);
          v107 = v105 + v98;
          if (v106)
            goto LABEL_244;
          *(_QWORD *)(v86 + 16) = v107;
        }
      }
      else
      {
        if (v98 > 0)
          goto LABEL_239;
        v98 = 0;
      }
      v108 = swift_bridgeObjectRelease();
      if (v98 != v104)
      {
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v108);
        v86 = *(_QWORD *)v408;
      }
      v109 = v388;
      if (v388 < 0 || v109 >= specialized Array.count.getter(v86))
      {
        memset(v408, 0, sizeof(v408));
        v409 = -1;
      }
      else
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v109, 1, v86);
        outlined init with copy of TabEntry(v86 + 272 * v109 + 32, (uint64_t)v408);
      }
      swift_bridgeObjectRelease();
      if (v409 == 255)
        goto LABEL_354;
      outlined init with take of TabEntry(v408, v399);
      outlined init with copy of TabEntry((uint64_t)v399, (uint64_t)v408);
      if ((*v85 & 1) == 0)
        break;
      memcpy(v396, v408, 0x108uLL);
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v366, (uint64_t)v398, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      if (*(_QWORD *)&v398[24])
      {
        v407 = *(_QWORD *)&v398[88];
        v110 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v110 != -1)
          swift_once();
        LOWORD(v400) = static TabOptions.TraitKey.defaultValue;
        v401 = *(_OWORD *)&qword_1EDF00118;
        v402 = word_1EDF00128;
        v403 = byte_1EDF0012A;
        v404 = qword_1EDF00130;
        v405 = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        v111 = BYTE1(v397[0]);
        outlined consume of TabCustomizationID?(*((uint64_t *)&v397[0] + 1), *(uint64_t *)&v397[1], BYTE8(v397[1]));
        swift_bridgeObjectRelease();
        outlined destroy of TabItemGroup((uint64_t)v396);
        v112 = v398;
        goto LABEL_76;
      }
      outlined destroy of TabItemGroup((uint64_t)v396);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v398, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_79:
      v114 = (uint64_t)v375;
      static Log.tabView.getter();
      if (v380((_OWORD *)v114, 1, v386) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v114, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      }
      else
      {
        v115 = swift_allocObject();
        *(_QWORD *)(v115 + 16) = v109;
        v116 = v115;
        v373 = v115;
        outlined init with copy of TabItemGroup(v72, (uint64_t)v398);
        outlined init with copy of TabItemGroup((uint64_t)v398, (uint64_t)v397);
        v117 = swift_allocObject();
        v374 = v117;
        memcpy((void *)(v117 + 16), v398, 0x108uLL);
        outlined init with copy of TabEntry((uint64_t)v399, (uint64_t)v408);
        outlined init with copy of TabEntry((uint64_t)v408, (uint64_t)v396);
        v385 = (char *)swift_allocObject();
        outlined init with take of TabEntry(v408, v385 + 16);
        v376 = Logger.logObject.getter();
        LODWORD(v362) = static os_log_type_t.default.getter();
        v118 = swift_allocObject();
        *(_BYTE *)(v118 + 16) = 0;
        v79 = (char *)swift_allocObject();
        v79[16] = 8;
        v119 = swift_allocObject();
        *(_QWORD *)(v119 + 16) = partial apply for implicit closure #8 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:);
        *(_QWORD *)(v119 + 24) = v116;
        v120 = v119;
        v372 = v119;
        v121 = swift_allocObject();
        *(_QWORD *)(v121 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *(_QWORD *)(v121 + 24) = v120;
        v371 = swift_allocObject();
        *(_BYTE *)(v371 + 16) = 32;
        v370 = swift_allocObject();
        *(_BYTE *)(v370 + 16) = 8;
        v122 = swift_allocObject();
        *(_QWORD *)(v122 + 16) = partial apply for implicit closure #9 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:);
        *(_QWORD *)(v122 + 24) = v117;
        v123 = swift_allocObject();
        *(_QWORD *)(v123 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
        *(_QWORD *)(v123 + 24) = v122;
        v382 = (os_log_t)swift_allocObject();
        LOBYTE(v382[2].isa) = 32;
        v369 = swift_allocObject();
        *(_BYTE *)(v369 + 16) = 8;
        v124 = swift_allocObject();
        v125 = (uint64_t)v385;
        *(_QWORD *)(v124 + 16) = partial apply for implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:);
        *(_QWORD *)(v124 + 24) = v125;
        v126 = swift_allocObject();
        *(_QWORD *)(v126 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
        *(_QWORD *)(v126 + 24) = v124;
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v127 = swift_allocObject();
        *(_OWORD *)(v127 + 16) = v358;
        *(_QWORD *)(v127 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 40) = v118;
        *(_QWORD *)(v127 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 56) = v79;
        *(_QWORD *)(v127 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        *(_QWORD *)(v127 + 72) = v121;
        v128 = v371;
        *(_QWORD *)(v127 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 88) = v128;
        v129 = v370;
        *(_QWORD *)(v127 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 104) = v129;
        *(_QWORD *)(v127 + 112) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 120) = v123;
        v130 = v382;
        *(_QWORD *)(v127 + 128) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 136) = v130;
        v131 = v369;
        *(_QWORD *)(v127 + 144) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 152) = v131;
        *(_QWORD *)(v127 + 160) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(_QWORD *)(v127 + 168) = v126;
        swift_retain();
        swift_retain();
        swift_retain();
        v364 = v122;
        swift_retain();
        swift_retain();
        v365 = v124;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v363 = v123;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        v132 = v362;
        if (os_log_type_enabled(v376, (os_log_type_t)v362))
        {
          v133 = (uint8_t *)swift_slowAlloc();
          v362 = swift_slowAlloc();
          v400 = v362;
          *(_WORD *)v133 = 770;
          v133[2] = 0;
          swift_release();
          v133[3] = 8;
          swift_release();
          swift_release();
          v407 = v388;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v133[12] = 32;
          swift_release();
          v133[13] = 8;
          swift_release();
          v134 = *((_QWORD *)&v397[1] + 1);
          LODWORD(v373) = v132;
          v135 = *(_QWORD *)&v397[2];
          v79 = (char *)(v133 + 14);
          outlined copy of TabCustomizationID.Base();
          v407 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, &v400);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of TabCustomizationID.Base();
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of TabItemGroup((uint64_t)v397);
          v133[22] = 32;
          swift_release();
          v133[23] = 8;
          swift_release();
          v136 = TabEntry.platformIdentifier.getter();
          v407 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, &v400);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          outlined destroy of TabEntry((uint64_t)v396);
          v138 = v376;
          _os_log_impl(&dword_186E48000, v376, (os_log_type_t)v373, "Inserting UITab child @ idx %ld into group\n%s; id %s",
            v133,
            0x20u);
          v139 = v362;
          swift_arrayDestroy();
          MEMORY[0x18D760108](v139, -1, -1);
          MEMORY[0x18D760108](v133, -1, -1);

        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          swift_release();
          swift_release();
          outlined destroy of TabItemGroup((uint64_t)v397);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of TabEntry((uint64_t)v396);
        }
        (*(void (**)(char *, uint64_t))(v368 + 8))(v375, v386);
        v85 = v378;
        v72 = v379;
        v87 = v384;
        v109 = v388;
        v90 = v381;
      }
      v140 = specialized UIHostingController.createBridgedTab<A>(using:coordinator:)((uint64_t)v399, v367);
      v86 = v410;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v86);
      if (v109 < 0)
        goto LABEL_242;
      if (*(_QWORD *)(v86 + 16) <= (unint64_t)v109)
        goto LABEL_243;
      v141 = v86 + 8 * v109;
      v142 = *(void **)(v141 + 32);
      *(_QWORD *)(v141 + 32) = v140;

      specialized Array._endMutation()();
LABEL_39:
      v89 = v109 + 1;
      outlined destroy of TabEntry((uint64_t)v399);
      v86 = (unint64_t)v383;
      v84 = v387;
      if ((_OWORD *)v89 == v90)
        goto LABEL_32;
    }
    v396[4] = *(_OWORD *)&v408[64];
    v396[5] = *(_OWORD *)&v408[80];
    *(_QWORD *)&v396[6] = *(_QWORD *)&v408[96];
    v396[0] = *(_OWORD *)v408;
    v396[1] = *(_OWORD *)&v408[16];
    v396[2] = *(_OWORD *)&v408[32];
    v396[3] = *(_OWORD *)&v408[48];
    v400 = *(_QWORD *)&v408[88];
    v113 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v113 != -1)
      swift_once();
    LOWORD(v397[0]) = static TabOptions.TraitKey.defaultValue;
    *(_OWORD *)((char *)v397 + 8) = *(_OWORD *)&qword_1EDF00118;
    WORD4(v397[1]) = word_1EDF00128;
    BYTE10(v397[1]) = byte_1EDF0012A;
    *(_QWORD *)&v397[2] = qword_1EDF00130;
    WORD4(v397[2]) = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v111 = v398[1];
    outlined consume of TabCustomizationID?(*(uint64_t *)&v398[8], *(uint64_t *)&v398[16], v398[24]);
    swift_bridgeObjectRelease();
    v112 = v396;
LABEL_76:
    outlined destroy of TabItem((uint64_t)v112);
    if ((v111 & 1) != 0)
      goto LABEL_39;
    goto LABEL_79;
  }
  while (1)
  {
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    v210 = v79;
    swift_bridgeObjectRetain();
    v201 = _CocoaArrayWrapper.endIndex.getter();
    v383 = v79;
    if (!v201)
      break;
LABEL_226:
    v203 = 4;
    while (1)
    {
      v204 = (v86 & 0xC000000000000001) != 0
           ? (id)MEMORY[0x18D75E3BC](v203 - 4, v86)
           : *(id *)(v86 + 8 * v203);
      v205 = v204;
      v206 = v203 - 3;
      if (__OFADD__(v203 - 4, 1))
        break;
      if (v79)
      {
        v207 = v79;
        v208 = v205;
        v209 = static NSObject.== infix(_:_:)();

        v79 = v383;
        if ((v209 & 1) != 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_263;
        }
      }
      else
      {

      }
      ++v203;
      if (v206 == v201)
        goto LABEL_261;
    }
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
  }
LABEL_261:

  swift_bridgeObjectRelease();
  if (v79)
  {
    *(_QWORD *)v408 = v86;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElement);
    type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E0DC4430, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [_UITab] and conformance [A]();
    swift_bridgeObjectRetain();
    Sequence.first<A>(ofType:)();
    v211 = (void *)v399[0];
    v212 = v344;
    objc_msgSend(v344, sel__setSelectedElement_, v399[0]);
    swift_bridgeObjectRelease();

  }
  else
  {
LABEL_263:
    v212 = v344;
  }
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v212, sel__setChildren_, isa);

  v214 = *(_QWORD *)(v72 + 24);
  v215 = *(_QWORD *)(v72 + 32);
  v216 = v389;
  v218 = v390;
  v217 = v391;
  v219 = v342;
  swift_beginAccess();
  outlined copy of TabCustomizationID.Base();
  if (*((_QWORD *)&v218 + 1))
  {
    outlined copy of TabItemGroup.HostCache?(v216, v218, *((uint64_t *)&v218 + 1));
    v220 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v408 = *v219;
    *v219 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v216, v218, *((uint64_t *)&v218 + 1), v217, v214, v215, v220);
    *v219 = *(_QWORD *)v408;
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
  }
  else
  {
    v221 = specialized Dictionary._Variant.removeValue(forKey:)(v214, v215);
    v223 = v222;
    v225 = v224;
    outlined consume of TabCustomizationID.Base();
    outlined consume of TabItemGroup.HostCache?(v221, v223, v225);
  }
  swift_endAccess();
  v226 = TabItemGroup.allChildEntries.getter();
  v227 = specialized ContiguousArray.init()();
  v407 = v227;
  v228 = specialized Array.count.getter(v226);
  if (v228)
  {
    v229 = v228;
    v109 = 0;
    v230 = v226 + 32;
    v388 = (uint64_t)&v396[3];
    while (1)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v109, 1, v226);
      v233 = v109 + 1;
      if (__OFADD__(v109, 1))
      {
        __break(1u);
LABEL_349:
        __break(1u);
LABEL_350:
        __break(1u);
LABEL_351:
        __break(1u);
LABEL_352:
        __break(1u);
LABEL_353:
        __break(1u);
LABEL_354:
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v408, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v399[0] = 0;
        v399[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        v399[0] = 0xD000000000000021;
        v399[1] = 0x8000000187BDE3D0;
        *(_QWORD *)v408 = v109;
        v332._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v332);
        swift_bridgeObjectRelease();
        while (1)
        {
LABEL_356:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      outlined init with copy of TabEntry(v230, (uint64_t)v399);
      outlined init with copy of TabEntry((uint64_t)v399, (uint64_t)v408);
      if ((v409 & 1) != 0)
      {
        memcpy(v396, v408, 0x108uLL);
        outlined init with copy of SwiftUIAnySortComparator?(v388, (uint64_t)v398, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
        if (*(_QWORD *)&v398[24])
        {
          v406 = *(_QWORD *)&v398[88];
          v234 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v234 != -1)
            swift_once();
          LOWORD(v400) = static TabOptions.TraitKey.defaultValue;
          v401 = *(_OWORD *)&qword_1EDF00118;
          v402 = word_1EDF00128;
          v403 = byte_1EDF0012A;
          v404 = qword_1EDF00130;
          v405 = word_1EDF00138;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          v235 = BYTE1(v397[0]);
          outlined consume of TabCustomizationID?(*((uint64_t *)&v397[0] + 1), *(uint64_t *)&v397[1], BYTE8(v397[1]));
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v396);
          outlined destroy of TabItem((uint64_t)v398);
          if ((v235 & 1) != 0)
            goto LABEL_282;
        }
        else
        {
          outlined destroy of TabItemGroup((uint64_t)v396);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v398, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        }
      }
      else
      {
        v396[4] = *(_OWORD *)&v408[64];
        v396[5] = *(_OWORD *)&v408[80];
        *(_QWORD *)&v396[6] = *(_QWORD *)&v408[96];
        v396[0] = *(_OWORD *)v408;
        v396[1] = *(_OWORD *)&v408[16];
        v396[2] = *(_OWORD *)&v408[32];
        v396[3] = *(_OWORD *)&v408[48];
        v400 = *(_QWORD *)&v408[88];
        v236 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v236 != -1)
          swift_once();
        LOWORD(v397[0]) = static TabOptions.TraitKey.defaultValue;
        *(_OWORD *)((char *)v397 + 8) = *(_OWORD *)&qword_1EDF00118;
        WORD4(v397[1]) = word_1EDF00128;
        BYTE10(v397[1]) = byte_1EDF0012A;
        *(_QWORD *)&v397[2] = qword_1EDF00130;
        WORD4(v397[2]) = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        v237 = v398[1];
        outlined consume of TabCustomizationID?(*(uint64_t *)&v398[8], *(uint64_t *)&v398[16], v398[24]);
        swift_bridgeObjectRelease();
        outlined destroy of TabItem((uint64_t)v396);
        if (v237 == 1)
        {
LABEL_282:
          outlined destroy of TabEntry((uint64_t)v399);
          goto LABEL_271;
        }
      }
      outlined init with take of TabEntry(v399, v408);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v231 = *(_QWORD *)(v407 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v231);
      v232 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v231, v408);
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v232);
LABEL_271:
      ++v109;
      v230 += 272;
      if (v233 == v229)
      {
        v227 = v407;
        v72 = v379;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v238 = objc_msgSend(v344, sel__identifier);
  v239 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v241 = v240;

  v242 = v341;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v353, v341, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  type metadata accessor for Binding<TabViewCustomization>(0);
  v244 = v243;
  v245 = (uint8_t *)*((_QWORD *)v243[-1].isa + 6);
  v246 = ((uint64_t (*)(uint64_t, uint64_t, NSObject *))v245)(v242, 1, v243);
  v247 = v386;
  v378 = (unsigned __int8 *)v227;
  if (v246 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v242, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
    v109 = v343;
    goto LABEL_301;
  }
  v248 = (uint64_t)v340;
  MEMORY[0x18D75B9C8](v244);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v242, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
  v249 = TabViewCustomization.subscript.getter(v239, v241);
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v248, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
  v109 = v343;
  if (!v249 || (v250 = specialized Array.count.getter(v249), swift_bridgeObjectRelease(), !v250))
  {
LABEL_301:
    swift_bridgeObjectRelease();
    v262 = v344;
    v263 = objc_msgSend(v344, sel__displayOrder);
    v264 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v265 = specialized Array.count.getter(v264);
    swift_bridgeObjectRelease();
    if (v265 >= 1)
    {
      specialized static Array._allocateUninitialized(_:)(0);
      v266 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v262, sel__setDisplayOrder_, v266);

    }
    goto LABEL_303;
  }
  v251 = specialized Array.count.getter(v227);
  if (v251)
  {
    v252 = v251;
    v387 = v245;
    v388 = (uint64_t)v244;
    v400 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v252);
    if (v252 < 0)
      goto LABEL_350;
    v253 = v227 + 32;
    do
    {
      outlined init with copy of TabEntry(v253, (uint64_t)v399);
      outlined init with copy of TabEntry((uint64_t)v399, (uint64_t)v408);
      if ((v409 & 1) != 0)
      {
        memcpy(v396, v408, 0x108uLL);
        v254 = *((_QWORD *)&v396[1] + 1);
        v255 = *(_QWORD *)&v396[2];
        v256 = BYTE8(v396[2]);
        outlined copy of TabCustomizationID.Base();
        outlined destroy of TabItemGroup((uint64_t)v396);
      }
      else
      {
        v396[4] = *(_OWORD *)&v408[64];
        v396[5] = *(_OWORD *)&v408[80];
        *(_QWORD *)&v396[6] = *(_QWORD *)&v408[96];
        v396[0] = *(_OWORD *)v408;
        v396[1] = *(_OWORD *)&v408[16];
        v396[2] = *(_OWORD *)&v408[32];
        v396[3] = *(_OWORD *)&v408[48];
        if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0)
          goto LABEL_299;
        v407 = *((_QWORD *)&v396[5] + 1);
        v259 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v259 != -1)
          swift_once();
        LOWORD(v397[0]) = static TabOptions.TraitKey.defaultValue;
        *(_OWORD *)((char *)v397 + 8) = *(_OWORD *)&qword_1EDF00118;
        WORD4(v397[1]) = word_1EDF00128;
        BYTE10(v397[1]) = byte_1EDF0012A;
        *(_QWORD *)&v397[2] = qword_1EDF00130;
        WORD4(v397[2]) = word_1EDF00138;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        v254 = *(_QWORD *)&v398[8];
        v255 = *(_QWORD *)&v398[16];
        v260 = v398[24];
        outlined copy of TabCustomizationID?(*(uint64_t *)&v398[8], *(uint64_t *)&v398[16], v398[24]);
        outlined consume of TabCustomizationID?(v254, v255, v260);
        swift_bridgeObjectRelease();
        if (v260 == 255)
        {
LABEL_299:
          v254 = TabItem.platformIdentifier.getter();
          v255 = v261;
          v256 = 1;
        }
        else
        {
          v256 = v260 & 1;
        }
        outlined destroy of TabItem((uint64_t)v396);
      }
      outlined destroy of TabEntry((uint64_t)v399);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v257 = *(_QWORD *)(v400 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v257);
      v258 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v257, v254, v255, v256);
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v258);
      v253 += 272;
      --v252;
    }
    while (v252);
    v289 = v400;
    v247 = v386;
    v245 = v387;
    v72 = v379;
    v244 = v388;
  }
  else
  {
    v289 = specialized static Array._allocateUninitialized(_:)(0);
  }
  v290 = type metadata accessor for Binding<TabViewCustomization>?;
  v291 = (uint64_t)v335;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v353, (uint64_t)v335, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
  v292 = 1;
  v293 = ((uint64_t (*)(uint64_t, uint64_t, NSObject *))v245)(v291, 1, v244);
  v294 = (uint64_t)v338;
  if (v293 != 1)
  {
    MEMORY[0x18D75B9C8](v244);
    v292 = 0;
    v290 = type metadata accessor for Binding<TabViewCustomization>;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v291, (uint64_t (*)(_QWORD))v290);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v336 + 56))(v294, v292, 1, v337);
  v109 = specialized static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)(v289, v294, *(_QWORD *)(v72 + 24), *(_QWORD *)(v72 + 32), *(unsigned __int8 *)(v72 + 40), 1, (uint64_t)closure #5 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:), 0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v294, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
  swift_bridgeObjectRelease();
  v295 = specialized Array.count.getter(v109);
  v388 = v109;
  if (v295)
  {
    v399[0] = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v295);
    if (v295 < 0)
      goto LABEL_351;
    v296 = v109 + 48;
    v297 = v295;
    do
    {
      v298 = *(_QWORD *)(v296 - 16);
      v299 = *(_QWORD *)(v296 - 8);
      v296 += 24;
      outlined copy of TabCustomizationID.Base();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v300 = *(_QWORD *)(v399[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v300);
      v301 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v300, v298, v299);
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v301);
      --v297;
    }
    while (v297);
    v109 = v388;
  }
  else
  {
    specialized static Array._allocateUninitialized(_:)(0);
  }
  swift_bridgeObjectRelease();
  v302 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v344, sel__setDisplayOrder_, v302);

  v303 = (uint64_t)v339;
  static Log.tabView.getter();
  if (v380((_OWORD *)v303, 1, v247) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v303, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    v109 = v343;
    v262 = v344;
    v227 = (uint64_t)v378;
  }
  else
  {
    outlined init with copy of TabItemGroup(v72, (uint64_t)v399);
    outlined init with copy of TabItemGroup((uint64_t)v399, (uint64_t)v408);
    v304 = swift_allocObject();
    v387 = (uint8_t *)v304;
    memcpy((void *)(v304 + 16), v399, 0x108uLL);
    v305 = swift_allocObject();
    *(_QWORD *)(v305 + 16) = v109;
    v385 = (char *)v305;
    swift_bridgeObjectRetain();
    v382 = (os_log_t)Logger.logObject.getter();
    LODWORD(v381) = static os_log_type_t.default.getter();
    v306 = swift_allocObject();
    *(_BYTE *)(v306 + 16) = 32;
    v307 = v306;
    v384 = (unsigned __int8 *)v306;
    v376 = swift_allocObject();
    LOBYTE(v376[2].isa) = 8;
    v308 = swift_allocObject();
    *(_QWORD *)(v308 + 16) = partial apply for implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:);
    *(_QWORD *)(v308 + 24) = v304;
    v309 = swift_allocObject();
    *(_QWORD *)(v309 + 16) = partial apply for thunk for @callee_guaranteed () -> ();
    *(_QWORD *)(v309 + 24) = v308;
    v310 = swift_allocObject();
    *(_BYTE *)(v310 + 16) = 32;
    v311 = swift_allocObject();
    *(_BYTE *)(v311 + 16) = 8;
    v312 = swift_allocObject();
    *(_QWORD *)(v312 + 16) = partial apply for implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:);
    *(_QWORD *)(v312 + 24) = v305;
    v313 = swift_allocObject();
    *(_QWORD *)(v313 + 16) = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    *(_QWORD *)(v313 + 24) = v312;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v314 = swift_allocObject();
    *(_OWORD *)(v314 + 16) = xmmword_187C290B0;
    *(_QWORD *)(v314 + 32) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v314 + 40) = v307;
    v315 = v376;
    *(_QWORD *)(v314 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(_QWORD *)(v314 + 56) = v315;
    *(_QWORD *)(v314 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v314 + 72) = v309;
    *(_QWORD *)(v314 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(_QWORD *)(v314 + 88) = v310;
    *(_QWORD *)(v314 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(_QWORD *)(v314 + 104) = v311;
    *(_QWORD *)(v314 + 112) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(_QWORD *)(v314 + 120) = v313;
    swift_retain();
    v377 = (char *)v308;
    swift_retain();
    swift_retain();
    v375 = (char *)v312;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v380 = (uint64_t (*)(_OWORD *, uint64_t, uint64_t))v310;
    swift_retain();
    v379 = v311;
    swift_retain();
    swift_retain();
    v316 = v382;
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v316, (os_log_type_t)v381))
    {
      v374 = v313;
      v317 = (uint8_t *)swift_slowAlloc();
      v373 = swift_slowAlloc();
      *(_QWORD *)&v396[0] = v373;
      *(_WORD *)v317 = 514;
      v317[2] = 32;
      swift_release();
      v317[3] = 8;
      swift_release();
      v109 = *(_QWORD *)&v408[24];
      v318 = *(_QWORD *)&v408[32];
      outlined copy of TabCustomizationID.Base();
      *(_QWORD *)v398 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v318, (uint64_t *)v396);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of TabCustomizationID.Base();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of TabItemGroup((uint64_t)v408);
      v317[12] = 32;
      swift_release();
      v317[13] = 8;
      swift_release();
      if (v295)
      {
        *(_QWORD *)v398 = specialized ContiguousArray.init()();
        specialized ContiguousArray.reserveCapacity(_:)(v295);
        if (v295 < 0)
          goto LABEL_352;
        v319 = (os_log_t)(v388 + 48);
        v320 = v386;
        do
        {
          v321 = (uint64_t)v319[-2].isa;
          v322 = (uint64_t)v319[-1].isa;
          v319 += 3;
          outlined copy of TabCustomizationID.Base();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v323 = *(_QWORD *)(*(_QWORD *)v398 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v323);
          v324 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v323, v321, v322);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v324);
          --v295;
        }
        while (v295);
        v325 = *(_QWORD *)v398;
      }
      else
      {
        v325 = specialized static Array._allocateUninitialized(_:)(0);
        v320 = v386;
      }
      *(_QWORD *)v398 = v325;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v327 = BidirectionalCollection<>.joined(separator:)();
      v329 = v328;
      swift_bridgeObjectRelease();
      *(_QWORD *)v398 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v327, v329, (uint64_t *)v396);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v330 = v382;
      _os_log_impl(&dword_186E48000, v382, (os_log_type_t)v381, "Set display order of group %s:\n%s", v317, 0x16u);
      v331 = v373;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v331, -1, -1);
      MEMORY[0x18D760108](v317, -1, -1);

      v326 = v339;
      v227 = (uint64_t)v378;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      outlined destroy of TabItemGroup((uint64_t)v408);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v320 = v386;
      v227 = (uint64_t)v378;
      v326 = v339;
    }
    (*(void (**)(char *, uint64_t))(v368 + 8))(v326, v320);
    v109 = v343;
    v262 = v344;
  }
LABEL_303:
  v267 = objc_msgSend(v262, sel__children);
  v268 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v386 = specialized Array._getCount()(v268);
  if (v386)
  {
    v269 = specialized Array.count.getter(v227);
    v270 = 0;
    v271 = v227 + 32;
    v388 = (uint64_t)&v399[1];
    v384 = &v409;
    v385 = (char *)(v268 & 0xC000000000000001);
    v381 = &v396[3];
    v382 = v269;
    if ((v268 & 0xC000000000000001) == 0)
      goto LABEL_306;
LABEL_305:
    for (j = (id)MEMORY[0x18D75E3BC](v270, v268); ; j = *(id *)(v268 + 8 * (_QWORD)v270 + 32))
    {
      v273 = j;
      v274 = (char *)&v270->isa + 1;
      if (__OFADD__(v270, 1))
        goto LABEL_349;
      if (v269 == v270)
      {
        swift_release();
        swift_bridgeObjectRelease();

        goto LABEL_325;
      }
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v270, 1, v227);
      v399[0] = (uint64_t)v273;
      v275 = (os_log_t)v388;
      outlined init with copy of TabEntry(v271, v388);
      outlined init with copy of TabEntry((uint64_t)v275, (uint64_t)v408);
      v276 = *v384;
      v387 = (uint8_t *)v271;
      if ((v276 & 1) == 0)
        break;
      v277 = v268;
      memcpy(v396, v408, 0x108uLL);
      objc_opt_self();
      v278 = swift_dynamicCastObjCClass();
      if (!v278)
        goto LABEL_356;
      v279 = (void *)v278;
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v381, (uint64_t)v397, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      if (*((_QWORD *)&v397[1] + 1))
      {
        *(_OWORD *)&v398[64] = v397[4];
        *(_OWORD *)&v398[80] = v397[5];
        *(_QWORD *)&v398[96] = *(_QWORD *)&v397[6];
        *(_OWORD *)v398 = v397[0];
        *(_OWORD *)&v398[16] = v397[1];
        *(_OWORD *)&v398[48] = v397[3];
        *(_OWORD *)&v398[32] = v397[2];
        v280 = v273;
        specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(v279, (uint64_t)v398, v353, v351, v352);
        outlined destroy of TabItem((uint64_t)v398);
      }
      else
      {
        v281 = v273;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v397, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      }
      v282 = TabItemGroup.sidebarReorderable.getter();
      if (v282 != objc_msgSend(v279, sel__allowsReordering))
        objc_msgSend(v279, sel__setAllowsReordering_, TabItemGroup.sidebarReorderable.getter());
      specialized UIHostingController.updateChildrenCreatingIfNeeded<A>(of:using:customization:environment:coordinator:)(v279, v396, v353, v351, v352, v367);
      v283 = objc_msgSend(v279, sel__selectedElement);

      if (v283)
      {

        outlined destroy of TabItemGroup((uint64_t)v396);
        v268 = v277;
        v269 = v382;
LABEL_319:
        outlined destroy of TabEntry(v388);
        v284 = v387;
        if (v274 == (char *)v386)
          goto LABEL_323;
        goto LABEL_320;
      }
      v285 = objc_msgSend(v279, sel__children);
      v286 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(_QWORD *)&v397[0] = v286;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElement);
      type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E0DC4430, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      lazy protocol witness table accessor for type [_UITab] and conformance [A]();
      v109 = v343;
      Sequence.first<A>(ofType:)();
      v227 = (uint64_t)v378;
      swift_bridgeObjectRelease();
      v287 = *(void **)v398;
      objc_msgSend(v279, sel__setSelectedElement_, *(_QWORD *)v398);

      outlined destroy of TabItemGroup((uint64_t)v396);
      outlined destroy of TabEntry(v388);
      v268 = v277;
      v269 = v382;
      v284 = v387;
      if (v274 == (char *)v386)
        goto LABEL_323;
LABEL_320:
      v270 = ((char *)v270 + 1);
      v271 = (uint64_t)(v284 + 272);
      if (v385)
        goto LABEL_305;
LABEL_306:
      ;
    }
    v396[4] = *(_OWORD *)&v408[64];
    v396[5] = *(_OWORD *)&v408[80];
    *(_QWORD *)&v396[6] = *(_QWORD *)&v408[96];
    v396[0] = *(_OWORD *)v408;
    v396[1] = *(_OWORD *)&v408[16];
    v396[2] = *(_OWORD *)&v408[32];
    v396[3] = *(_OWORD *)&v408[48];
    specialized UIHostingController.updateProperties<A>(on:using:customization:environment:coordinator:)(v273, (uint64_t)v396, v353, v351, v352);
    outlined destroy of TabItem((uint64_t)v396);

    goto LABEL_319;
  }
LABEL_323:
  swift_release();
  swift_bridgeObjectRelease();
LABEL_325:

  return outlined consume of TabItemGroup.HostCache?(v389, v390, *((uint64_t *)&v390 + 1));
}

uint64_t specialized static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;

  v52 = a4;
  v53 = a8;
  v50 = a5;
  v51 = a3;
  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v49[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for TabViewCustomization();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = &v49[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = &v49[-v23];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v24, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    if ((a6 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)&v20[*(int *)(v16 + 24)] + 16);
      v28 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
      if (!v27)
      {
        v25 = (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization;
        v26 = (uint64_t)v24;
        goto LABEL_3;
      }
    }
    else
    {
      v28 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
    }
    MEMORY[0x1E0C80A78](v28, v29);
    v30 = v53;
    *(_QWORD *)&v49[-32] = a7;
    *(_QWORD *)&v49[-24] = v30;
    v49[-16] = a6 & 1;
    *(_QWORD *)&v49[-8] = v24;
    v31 = swift_bridgeObjectRetain();
    v32 = specialized Sequence.compactMap<A>(_:)(v31, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))partial apply for specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:), (uint64_t)&v49[-48]);
    swift_bridgeObjectRelease();
    v55 = v32;
    v33 = *(_QWORD *)&v24[*(int *)(v16 + 24)];
    if (*(_QWORD *)(v33 + 16))
    {
      v34 = v50 & 1;
      swift_bridgeObjectRetain();
      v36 = v51;
      v35 = v52;
      outlined copy of TabCustomizationID.Base();
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v35, v34);
      if ((v38 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined consume of TabCustomizationID.Base();
        v40 = v32[2];
        if (v40)
        {
LABEL_12:
          v54 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
          a1 = v54;
          v53 = v32;
          v41 = v32 + 7;
          do
          {
            v42 = *((_QWORD *)v41 - 2);
            v43 = *((_QWORD *)v41 - 1);
            v44 = *v41;
            outlined copy of TabCustomizationID.Base();
            v54 = a1;
            v46 = *(_QWORD *)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if (v46 >= v45 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1);
              a1 = v54;
            }
            *(_QWORD *)(a1 + 16) = v46 + 1;
            v47 = a1 + 24 * v46;
            *(_QWORD *)(v47 + 32) = v42;
            *(_QWORD *)(v47 + 40) = v43;
            *(_BYTE *)(v47 + 48) = v44;
            v41 += 56;
            --v40;
          }
          while (v40);
          swift_bridgeObjectRelease_n();
          goto LABEL_19;
        }
LABEL_18:
        swift_bridgeObjectRelease();
        a1 = MEMORY[0x1E0DEE9D8];
LABEL_19:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization);
        return a1;
      }
      v39 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v37);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined consume of TabCustomizationID.Base();
      specialized MutableCollection<>.sort(by:)(&v55, v39);
      swift_bridgeObjectRelease();
      v32 = v55;
    }
    v40 = v32[2];
    if (v40)
      goto LABEL_12;
    goto LABEL_18;
  }
  v25 = (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomization?;
  v26 = (uint64_t)v15;
LABEL_3:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, v25);
  swift_bridgeObjectRetain();
  return a1;
}

void specialized UIHostingController.updateTitleImage(on:using:)(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  char v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  char v38;
  id v39;
  void *v40;
  _BYTE v41[8];
  id v42;
  _BYTE v43[216];
  id v44[27];

  v3 = v2;
  outlined init with take of Image.Resolved?(a2 + 24, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  outlined init with take of Image.Resolved?((uint64_t)v43, (uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v44) == 1)
    goto LABEL_11;
  if (v44[0])
  {
    v5 = objc_msgSend(v44[0], sel_string);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v9 = objc_msgSend(a1, sel_title);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    if (v10 == v6 && v12 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v14 = (void *)MEMORY[0x18D75CC88](v6, v8);
        swift_bridgeObjectRelease();
        objc_msgSend(a1, sel_setTitle_, v14);

      }
    }
  }
  outlined init with take of Image.Resolved?((uint64_t)v43, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  if (!v42)
  {
LABEL_11:
    v16 = 0;
    v18 = 0;
  }
  else
  {
    v15 = objc_msgSend(v42, sel_string);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

  }
  v19 = objc_msgSend(a1, sel_subtitle);
  if (!v19)
  {
    if (!v18)
      goto LABEL_26;
LABEL_21:
    v26 = (void *)MEMORY[0x18D75CC88](v16, v18);
LABEL_23:
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setSubtitle_, v26);

    goto LABEL_26;
  }
  v20 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  if (!v18)
  {
    v26 = 0;
    goto LABEL_23;
  }
  if (v21 != v16 || v18 != v23)
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
      goto LABEL_25;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  v27 = (void *)PlatformItem.makeTabBarItemImage()();
  v28 = objc_msgSend(a1, sel_image);
  if (v28)
  {
    v29 = v28;
    if (v27)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      v30 = v27;
      v31 = v29;
      v32 = static NSObject.== infix(_:_:)();

      if ((v32 & 1) != 0)
        goto LABEL_34;
    }
    else
    {

    }
LABEL_33:
    objc_msgSend(a1, sel_setImage_, v27);
    goto LABEL_34;
  }
  if (v27)
    goto LABEL_33;
LABEL_34:
  v33 = objc_msgSend(v3, sel_tabBarItem);
  if (!v33)
  {

    __break(1u);
LABEL_46:

    __break(1u);
    return;
  }
  v34 = v33;
  v35 = objc_msgSend(v33, sel_image);

  if (v35)
  {
    if (v27)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      v36 = v27;
      v37 = v35;
      v38 = static NSObject.== infix(_:_:)();

      if ((v38 & 1) != 0)
        goto LABEL_44;
    }
    else
    {

    }
LABEL_42:
    v39 = objc_msgSend(v3, sel_tabBarItem);
    if (v39)
    {
      v40 = v39;
      objc_msgSend(v39, sel_setImage_, v27);

      v36 = v27;
LABEL_44:

      return;
    }
    goto LABEL_46;
  }
  if (v27)
    goto LABEL_42;
}

