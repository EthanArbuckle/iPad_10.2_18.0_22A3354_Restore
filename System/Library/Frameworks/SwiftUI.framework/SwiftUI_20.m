void type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>)
  {
    type metadata accessor for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>);
  }
}

void type metadata accessor for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>))
  {
    type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>));
  }
}

void type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    type metadata accessor for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>);
  }
}

uint64_t type metadata accessor for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate;
  if (!lazy protocol witness table cache variable for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CheckmarkAnimationPredicate, &unk_1E1AF22E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_QWORD *partial apply for closure #1 in CheckmarkToggleStyle.menuContent(configuration:)()
{
  uint64_t v0;

  return closure #2 in ResolvedToggleStyle.body.getter((_QWORD *)(v0 + 16));
}

_QWORD *outlined release of TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1[19];
  v6 = a1[18];
  v3 = a1[21];
  v4 = a1[20];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of SymbolEffect?(v6, v5, v4, v3);
  swift_release();
  return a1;
}

uint64_t outlined init with copy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187860320@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_187860370()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t outlined retain of CheckmarkToggleStyle(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v12 = *(_BYTE *)(a1 + 96);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<EdgeInsets>.Content(v4, v5, v6, v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  outlined copy of Environment<Bool>.Content(v13, v12);
  return a1;
}

uint64_t outlined release of CheckmarkToggleStyle(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v12 = *(_BYTE *)(a1 + 96);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<EdgeInsets>.Content(v4, v5, v6, v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v10);
  outlined consume of Environment<Bool>.Content(v13, v12);
  return a1;
}

_QWORD *outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[15];
  v5 = a1[14];
  v6 = a1[13];
  v3 = a1[16];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of SymbolEffect?(v6, v5, v2, v3);
  swift_retain();
  return a1;
}

_QWORD *outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[15];
  v5 = a1[14];
  v6 = a1[13];
  v3 = a1[16];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of SymbolEffect?(v6, v5, v2, v3);
  swift_release();
  return a1;
}

void *type metadata accessor for CheckmarkAnimationPredicate()
{
  return &unk_1E1AF22E8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>();
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
    v2[0] = lazy protocol witness table accessor for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>();
    v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Button<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>);
  }
  return result;
}

uint64_t specialized static CheckmarkAnimationPredicate.evaluate(inputs:)()
{
  char v0;

  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0
    || (_GraphInputs.interfaceIdiom.getter(), (AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0))
  {
    if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
      v0 = 1;
    else
      v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

uint64_t View.toolbar(removing:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &unk_1E1AE3D48, a3);
}

uint64_t sub_187860A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ToolbarRemovingModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t storeEnumTagSinglePayload for ToolbarRemovingModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187860ACC + 4 * byte_187C66095[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187860B00 + 4 * byte_187C66090[v4]))();
}

uint64_t sub_187860B00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187860B08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187860B10);
  return result;
}

uint64_t sub_187860B1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187860B24);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187860B28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187860B30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ToolbarRemovingModifier()
{
  return &unk_1E1AE3D48;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarRemovingModifier()
{
  return &protocol witness table for ToolbarRemovingModifier;
}

double static ToolbarRemovingModifier._makeView(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v10 = a2[5];
  v9 = a2[6];
  v11 = *((_DWORD *)a2 + 20);
  LODWORD(v20) = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ToolbarRemovingModifier>, (uint64_t)&unk_1E1AE3D48, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[8];
  v19 = a2[7];
  v15 = a2[9];
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<ToolbarDefaultItemKind?>();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  v16 = swift_release_n();
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v12;
  v24 = v13;
  v25 = v10;
  v26 = v9;
  v27 = v19;
  v28 = v14;
  v29 = v15;
  v30 = v11;
  a3(&v31, v16, &v20);
  v20 = v9;
  v21 = v19;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  v20 = v9;
  v21 = v19;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v31;
  result = v32;
  a4[1] = v32;
  return result;
}

uint64_t implicit closure #1 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t implicit closure #2 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != 2 && (a2 & 1) == 0 && a3 != 6 && a3 == 0)
  {
    v10 = v3;
    v11 = v4;
    return specialized Set._Variant.insert(_:)(&v9, 0);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarRemovingModifier.SidebarToggleRemover@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t (*v2)(void);
  char v3;
  uint64_t WeakValue;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))v2);
  WeakValue = AGGraphGetWeakValue();
  v5 = 6;
  if (WeakValue)
  {
    v6 = *(_QWORD *)(WeakValue + 8);
    if (v6 == 6)
      v5 = 6;
    else
      v5 = v6;
  }
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 17) = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter;
  *(_QWORD *)(result + 24) = v7;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ToolbarRemovingModifier.SidebarToggleRemover()
{
  lazy protocol witness table accessor for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover();
  return static AsyncAttribute.flags.getter();
}

uint64_t closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
  {
    if (*(_QWORD *)(result + 24) == 1)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = xmmword_187C662B0;
      *(_QWORD *)(result + 48) = 0;
    }
    *(_BYTE *)(result + 56) = 2;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarRemovingModifier.TitleRemover@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = *(_BYTE *)AGGraphGetValue();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v2;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = _s7SwiftUI23ToolbarRemovingModifier33_E54E8F0036C88C06FCE06176D1A5D36FLLV12TitleRemoverV5valueyyAA010NavigationO7StorageVSgzcvgyAJzcfU_TA_0;
  *(_QWORD *)(result + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ToolbarRemovingModifier.TitleRemover()
{
  lazy protocol witness table accessor for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover();
  return static AsyncAttribute.flags.getter();
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarRemovingModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for _GraphValue<ToolbarDefaultItemKind?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<ToolbarDefaultItemKind?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ToolbarDefaultItemKind?>);
  }
}

uint64_t partial apply for implicit closure #1 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)();
}

uint64_t partial apply for implicit closure #2 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static ToolbarRemovingModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarRemovingModifier.TitleRemover, &unk_1E1AE3CA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarRemovingModifier.TitleRemover, &unk_1E1AE3CA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.TitleRemover and conformance ToolbarRemovingModifier.TitleRemover);
  }
  return result;
}

uint64_t sub_1878612A8()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI23ToolbarRemovingModifier33_E54E8F0036C88C06FCE06176D1A5D36FLLV12TitleRemoverV5valueyyAA010NavigationO7StorageVSgzcvgyAJzcfU_TA_0(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    if (*(_QWORD *)(result + 24) == 1)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = xmmword_187C662B0;
      *(_QWORD *)(result + 48) = 0;
    }
    *(_BYTE *)(result + 56) = 2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarRemovingModifier.SidebarToggleRemover, &unk_1E1AE3CC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover;
  if (!lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarRemovingModifier.SidebarToggleRemover, &unk_1E1AE3CC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRemovingModifier.SidebarToggleRemover and conformance ToolbarRemovingModifier.SidebarToggleRemover);
  }
  return result;
}

uint64_t sub_187861334()
{
  return swift_deallocObject();
}

uint64_t sub_187861344()
{
  swift_release();
  return swift_deallocObject();
}

void *type metadata accessor for ToolbarRemovingModifier.SidebarToggleRemover()
{
  return &unk_1E1AE3CC8;
}

void *type metadata accessor for ToolbarRemovingModifier.TitleRemover()
{
  return &unk_1E1AE3CA0;
}

uint64_t PresentationOptionsPreference.sheetConfigurationChanged(from:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  char v4;
  int v5;
  int v6;
  BOOL v7;
  id v9;
  id v10;
  void *v12;
  double v13;
  char v14;
  double v15;
  char v16;
  double v17;
  char v18;
  double v19;
  char v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30[18];
  uint64_t v31[18];
  _QWORD v32[7];
  char v33;
  _QWORD v34[7];
  char v35;
  _QWORD v36[7];
  unsigned __int8 v37;
  _QWORD v38[7];
  unsigned __int8 v39;
  _QWORD v40[11];
  char v41;
  _QWORD v42[11];
  char v43;
  _QWORD v44[9];
  char v45;
  _QWORD v46[9];
  char v47;
  _QWORD v48[6];
  id v49;
  _QWORD v50[6];
  id v51;
  uint64_t v52;
  unsigned __int8 v53;
  _OWORD v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  _OWORD v61[7];
  _OWORD v62[3];

  outlined init with copy of PresentationOptionsPreference?(a1, (uint64_t)v54);
  if (*(_QWORD *)&v54[0])
  {
    v61[6] = v59;
    v62[0] = v60[0];
    *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v60 + 9);
    v61[2] = v55;
    v61[3] = v56;
    v61[4] = v57;
    v61[5] = v58;
    v61[0] = v54[0];
    v61[1] = v54[1];
    v2 = *(unsigned __int8 *)(v1 + 40);
    v3 = BYTE8(v55);
    if (v2 == 6)
    {
      if (BYTE8(v55) == 6)
      {
        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v54);
        outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)&v52);
        goto LABEL_9;
      }
    }
    else if (BYTE8(v55) != 6)
    {
      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v54);
      outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)&v52);
      if (v2 == v3)
      {
LABEL_9:
        v5 = BYTE9(v55);
        outlined destroy of PresentationOptionsPreference(v54);
        v6 = v53;
        v7 = v53 == 6;
        outlined destroy of PresentationOptionsPreference(&v52);
        if (v5 != 6)
          v7 = v6 != 6 && v5 == v6;
        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v50);
        outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v48);
        if (v7)
        {
          v9 = v51;
          v10 = v49;
          if (v51 == (id)2)
          {
            outlined copy of PresentationDimmingBehavior?(v49);
            outlined destroy of PresentationOptionsPreference(v48);
            outlined destroy of PresentationOptionsPreference(v50);
            if (v10 == (id)2)
              goto LABEL_39;
            goto LABEL_32;
          }
          if (v49 == (id)2)
          {
            outlined copy of Image.Location(v51);
            outlined destroy of PresentationOptionsPreference(v48);
            outlined destroy of PresentationOptionsPreference(v50);
            v10 = v9;
LABEL_32:
            v12 = v10;
LABEL_51:
            outlined consume of PresentationDimmingBehavior?(v12);
            goto LABEL_22;
          }
          if (v51)
          {
            if (v51 != (id)1)
            {
              if ((unint64_t)v49 >= 2)
              {
                v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v26 = v25;
                if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27)
                  v28 = 1;
                else
                  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
                outlined copy of PresentationDimmingBehavior?(v9);
                outlined copy of PresentationDimmingBehavior?(v10);
                outlined copy of PresentationDimmingBehavior?(v9);
                outlined copy of PresentationDimmingBehavior?(v10);
                outlined copy of PresentationDimmingBehavior?(v9);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of PresentationDimmingBehavior?(v10);
                outlined consume of PresentationDimmingBehavior?(v9);
                outlined consume of PresentationDimmingBehavior?(v10);
                outlined destroy of PresentationOptionsPreference(v48);
                outlined destroy of PresentationOptionsPreference(v50);
                outlined consume of PresentationDimmingBehavior?(v9);
                outlined consume of PresentationDimmingBehavior?(v9);
                outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v46);
                outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v44);
                if ((v28 & 1) != 0)
                {
LABEL_40:
                  v13 = *(double *)&v46[8];
                  v14 = v47;
                  outlined destroy of PresentationOptionsPreference(v46);
                  v15 = *(double *)&v44[8];
                  v16 = v45;
                  outlined destroy of PresentationOptionsPreference(v44);
                  if ((v14 & 1) == 0)
                    v16 = (v13 == v15) & ~v16;
                  outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v42);
                  outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v40);
                  if ((v16 & 1) != 0)
                  {
                    v17 = *(double *)&v42[10];
                    v18 = v43;
                    outlined destroy of PresentationOptionsPreference(v42);
                    v19 = *(double *)&v40[10];
                    v20 = v41;
                    outlined destroy of PresentationOptionsPreference(v40);
                    if ((v18 & 1) == 0)
                      v20 = (v17 == v19) & ~v20;
                    outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v38);
                    outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v36);
                    if ((v20 & 1) != 0)
                    {
                      v21 = v39;
                      outlined destroy of PresentationOptionsPreference(v38);
                      v22 = v37;
                      outlined destroy of PresentationOptionsPreference(v36);
                      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v34);
                      outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v32);
                      if ((v21 != 2) == (v22 != 2))
                      {
                        if (v35)
                          v23 = v35 == 1;
                        else
                          v23 = *(_QWORD *)(v34[0] + 16) > 1uLL;
                        if (v33)
                          v29 = v33 == 1;
                        else
                          v29 = *(_QWORD *)(v32[0] + 16) > 1uLL;
                        outlined destroy of PresentationOptionsPreference(v34);
                        outlined destroy of PresentationOptionsPreference(v32);
                        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v31);
                        outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v30);
                        if (v23 == v29)
                        {
                          v4 = specialized static Set.== infix(_:_:)(v31[0], v30[0]) ^ 1;
                          goto LABEL_28;
                        }
LABEL_27:
                        v4 = 1;
LABEL_28:
                        outlined destroy of PresentationOptionsPreference(v61);
                        outlined destroy of PresentationOptionsPreference(v31);
                        outlined destroy of PresentationOptionsPreference(v30);
                        return v4 & 1;
                      }
LABEL_26:
                      outlined destroy of PresentationOptionsPreference(v34);
                      outlined destroy of PresentationOptionsPreference(v32);
                      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v31);
                      outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v30);
                      goto LABEL_27;
                    }
LABEL_25:
                    outlined destroy of PresentationOptionsPreference(v36);
                    outlined destroy of PresentationOptionsPreference(v38);
                    outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v34);
                    outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v32);
                    goto LABEL_26;
                  }
LABEL_24:
                  outlined destroy of PresentationOptionsPreference(v40);
                  outlined destroy of PresentationOptionsPreference(v42);
                  outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v38);
                  outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v36);
                  goto LABEL_25;
                }
LABEL_23:
                outlined destroy of PresentationOptionsPreference(v44);
                outlined destroy of PresentationOptionsPreference(v46);
                outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v42);
                outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v40);
                goto LABEL_24;
              }
              goto LABEL_50;
            }
            if (v49 != (id)1)
            {
LABEL_50:
              outlined copy of PresentationDimmingBehavior?(v51);
              outlined copy of Image.Location(v9);
              outlined destroy of PresentationOptionsPreference(v48);
              outlined destroy of PresentationOptionsPreference(v50);
              outlined consume of PresentationDimmingBehavior?(v9);
              v12 = v9;
              goto LABEL_51;
            }
          }
          else if (v49)
          {
            goto LABEL_50;
          }
          outlined copy of PresentationDimmingBehavior?(v51);
          outlined copy of Image.Location(v9);
          outlined destroy of PresentationOptionsPreference(v48);
          outlined destroy of PresentationOptionsPreference(v50);
          outlined consume of PresentationDimmingBehavior?(v9);
          outlined consume of PresentationDimmingBehavior?(v9);
LABEL_39:
          outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v46);
          outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v44);
          goto LABEL_40;
        }
LABEL_21:
        outlined destroy of PresentationOptionsPreference(v48);
        outlined destroy of PresentationOptionsPreference(v50);
LABEL_22:
        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v46);
        outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v44);
        goto LABEL_23;
      }
LABEL_20:
      outlined destroy of PresentationOptionsPreference(&v52);
      outlined destroy of PresentationOptionsPreference(v54);
      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v50);
      outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)v48);
      goto LABEL_21;
    }
    outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v54);
    outlined init with copy of PresentationOptionsPreference((uint64_t)v61, (uint64_t)&v52);
    goto LABEL_20;
  }
  outlined destroy of PresentationOptionsPreference?((uint64_t)v54);
  v4 = 1;
  return v4 & 1;
}

uint64_t PresentationOptionsPreference.differenceMessage(from:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  Swift::String v5;
  int64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  char v52;
  char v53;
  uint64_t v54;
  Swift::String v55;
  void *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  int v66;
  int v67;
  Swift::String v68;
  uint64_t v69;
  unint64_t v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  unint64_t v74;
  Swift::String v75;
  int v76;
  _BOOL4 v77;
  int v78;
  uint64_t v79;
  Swift::String v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  Swift::String v84;
  Swift::String v85;
  void *v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;

  v2 = v1;
  v3 = a1;
  v4 = *v1;
  v102 = *a1;
  v101 = *v1;
  v100 = v1;
  if ((specialized static Set.== infix(_:_:)(*v1, *a1) & 1) == 0)
  {
    swift_beginAccess();
    v5._countAndFlagsBits = 0xD000000000000016;
    v5._object = (void *)0x8000000187BE9D30;
    String.append(_:)(v5);
    swift_endAccess();
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      v7 = specialized Set.startIndex.getter(v4);
      if (v7 < 0 || v7 >= 1 << *(_BYTE *)(v4 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(v4 + 56 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
      {
        if (*(_DWORD *)(v4 + 36) == v8)
          __asm { BR              X11 }
        goto LABEL_111;
      }
      __break(1u);
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }
    v2 = v1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v9 = BidirectionalCollection<>.joined(separator:)();
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 10;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    swift_endAccess();
    swift_beginAccess();
    v14._countAndFlagsBits = 0xD000000000000016;
    v14._object = (void *)0x8000000187BE9D30;
    String.append(_:)(v14);
    swift_endAccess();
    v15 = *(_QWORD *)(v102 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
      v16 = specialized Set.startIndex.getter(v102);
      if ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(v102 + 32))
      {
        if (((*(_QWORD *)(v102 + 56 + (((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        {
          if (*(_DWORD *)(v102 + 36) == v17)
            __asm { BR              X11 }
LABEL_114:
          __break(1u);
          JUMPOUT(0x187862D9CLL);
        }
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v18 = BidirectionalCollection<>.joined(separator:)();
    v20 = v19;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v21._countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 10;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_endAccess();
  }
  v23 = *((unsigned __int8 *)v2 + 40);
  v24 = *((unsigned __int8 *)v3 + 40);
  if ((_DWORD)v23 == 6)
  {
    v25 = v102;
    if ((_DWORD)v24 != 6)
    {
      swift_beginAccess();
      v26._countAndFlagsBits = 0xD00000000000002BLL;
      v26._object = (void *)0x8000000187BE9D50;
      String.append(_:)(v26);
      swift_endAccess();
      swift_beginAccess();
      v27._countAndFlagsBits = 0x6974616D6F747541;
      v27._object = (void *)0xE900000000000063;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 10;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      swift_endAccess();
      swift_beginAccess();
      v29._countAndFlagsBits = 0xD00000000000002BLL;
      v29._object = (void *)0x8000000187BE9D50;
      String.append(_:)(v29);
      swift_endAccess();
      __asm { BR              X9 }
    }
  }
  else
  {
    v25 = v102;
    if ((_DWORD)v24 == 6 || (_DWORD)v23 != (_DWORD)v24)
    {
      swift_beginAccess();
      v30._countAndFlagsBits = 0xD00000000000002BLL;
      v30._object = (void *)0x8000000187BE9D50;
      String.append(_:)(v30);
      swift_endAccess();
      __asm { BR              X9 }
    }
  }
  v31 = *((unsigned __int8 *)v2 + 41);
  v32 = *((unsigned __int8 *)v3 + 41);
  if ((_DWORD)v31 == 6)
  {
    if ((_DWORD)v32 != 6)
    {
      swift_beginAccess();
      v33._countAndFlagsBits = 0xD000000000000029;
      v33._object = (void *)0x8000000187BE9D80;
      String.append(_:)(v33);
      swift_endAccess();
      swift_beginAccess();
      v34._countAndFlagsBits = 0x6974616D6F747541;
      v34._object = (void *)0xE900000000000063;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 10;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      swift_endAccess();
      swift_beginAccess();
      v36._countAndFlagsBits = 0xD000000000000029;
      v36._object = (void *)0x8000000187BE9D80;
      String.append(_:)(v36);
      swift_endAccess();
      __asm { BR              X9 }
    }
  }
  else if ((_DWORD)v32 == 6 || (_DWORD)v31 != (_DWORD)v32)
  {
    swift_beginAccess();
    v37._countAndFlagsBits = 0xD000000000000029;
    v37._object = (void *)0x8000000187BE9D80;
    String.append(_:)(v37);
    swift_endAccess();
    __asm { BR              X9 }
  }
  v38 = (void *)v2[6];
  v39 = (void *)v3[6];
  if (v38 == (void *)2)
  {
    if (v39 == (void *)2)
      goto LABEL_50;
    goto LABEL_31;
  }
  if (v39 == (void *)2)
    goto LABEL_31;
  if (!v38)
  {
    if (!v39)
      goto LABEL_50;
    goto LABEL_31;
  }
  if (v38 == (void *)1)
  {
    if (v39 == (void *)1)
      goto LABEL_50;
    goto LABEL_31;
  }
  if ((unint64_t)v39 < 2)
    goto LABEL_31;
  v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v96 = v95;
  if (v94 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v96 == v97)
    v98 = 1;
  else
    v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of PresentationDimmingBehavior?(v38);
  outlined copy of PresentationDimmingBehavior?(v38);
  outlined copy of PresentationDimmingBehavior?(v39);
  outlined copy of PresentationDimmingBehavior?(v38);
  outlined copy of PresentationDimmingBehavior?(v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PresentationDimmingBehavior?(v39);
  outlined consume of PresentationDimmingBehavior?(v38);
  outlined consume of PresentationDimmingBehavior?(v39);
  outlined consume of PresentationDimmingBehavior?(v38);
  outlined consume of PresentationDimmingBehavior?(v38);
  v25 = v102;
  if ((v98 & 1) == 0)
  {
LABEL_31:
    swift_beginAccess();
    v40._countAndFlagsBits = 0xD000000000000023;
    v40._object = (void *)0x8000000187BE9DB0;
    String.append(_:)(v40);
    swift_endAccess();
    v41 = v2[6];
    if (!v41 || v41 == 2)
    {
      v43 = (void *)0xE800000000000000;
      v42 = 0x64656C6261736944;
    }
    else
    {
      if (v41 == 1)
        v42 = 0x64656C62616E45;
      else
        v42 = 0xD000000000000011;
      if (v41 == 1)
        v43 = (void *)0xE700000000000000;
      else
        v43 = (void *)0x8000000187BE9E50;
    }
    swift_beginAccess();
    v44._countAndFlagsBits = v42;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 10;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    swift_endAccess();
    swift_beginAccess();
    v46._countAndFlagsBits = 0xD000000000000023;
    v46._object = (void *)0x8000000187BE9DB0;
    String.append(_:)(v46);
    swift_endAccess();
    v47 = v3[6];
    if (!v47 || v47 == 2)
    {
      v49 = (void *)0xE800000000000000;
      v48 = 0x64656C6261736944;
    }
    else
    {
      if (v47 == 1)
        v48 = 0x64656C62616E45;
      else
        v48 = 0xD000000000000011;
      if (v47 == 1)
        v49 = (void *)0xE700000000000000;
      else
        v49 = (void *)0x8000000187BE9E50;
    }
    swift_beginAccess();
    v50._countAndFlagsBits = v48;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 10;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    swift_endAccess();
    v25 = v102;
  }
LABEL_50:
  v52 = *((_BYTE *)v2 + 72);
  v53 = *((_BYTE *)v3 + 72);
  if ((v52 & 1) != 0)
  {
    if ((v3[9] & 1) != 0)
      goto LABEL_62;
  }
  else if ((v3[9] & 1) == 0 && *((double *)v2 + 8) == *((double *)v3 + 8))
  {
    goto LABEL_62;
  }
  v54 = 0x746C7561666544;
  swift_beginAccess();
  v55._countAndFlagsBits = 0xD00000000000001ALL;
  v55._object = (void *)0x8000000187BE9DE0;
  String.append(_:)(v55);
  swift_endAccess();
  if ((v52 & 1) != 0)
  {
    v56 = (void *)0xE700000000000000;
    v57 = 0x746C7561666544;
  }
  else
  {
    v57 = Double.description.getter();
    v56 = v58;
  }
  swift_beginAccess();
  v59._countAndFlagsBits = v57;
  v59._object = v56;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 10;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  swift_endAccess();
  swift_beginAccess();
  v61._countAndFlagsBits = 0xD00000000000001ALL;
  v61._object = (void *)0x8000000187BE9DE0;
  String.append(_:)(v61);
  swift_endAccess();
  if ((v53 & 1) != 0)
  {
    v62 = (void *)0xE700000000000000;
  }
  else
  {
    v54 = Double.description.getter();
    v62 = v63;
  }
  v3 = a1;
  v2 = v100;
  swift_beginAccess();
  v64._countAndFlagsBits = v54;
  v64._object = v62;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v65._countAndFlagsBits = 10;
  v65._object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  swift_endAccess();
  v25 = v102;
LABEL_62:
  v66 = *((unsigned __int8 *)v2 + 57);
  v67 = *((unsigned __int8 *)v3 + 57);
  if (v67 == 2)
  {
    if (v66 == 2)
      goto LABEL_73;
  }
  else if (v66 != 2)
  {
    goto LABEL_73;
  }
  swift_beginAccess();
  v68._countAndFlagsBits = 0xD000000000000020;
  v68._object = (void *)0x8000000187BE9E00;
  String.append(_:)(v68);
  if (v66 == 1)
    v69 = 0x73657A69736552;
  else
    v69 = 0x736C6C6F726353;
  v70 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v69);
  swift_bridgeObjectRelease();
  v71._countAndFlagsBits = 10;
  v71._object = (void *)0xE100000000000000;
  String.append(_:)(v71);
  swift_endAccess();
  swift_beginAccess();
  v72._countAndFlagsBits = 0xD000000000000020;
  v72._object = (void *)0x8000000187BE9E00;
  String.append(_:)(v72);
  if (v67 == 1)
    v73 = 0x73657A69736552;
  else
    v73 = 0x736C6C6F726353;
  v74 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v73);
  swift_bridgeObjectRelease();
  v75._countAndFlagsBits = 10;
  v75._object = (void *)0xE100000000000000;
  String.append(_:)(v75);
  swift_endAccess();
  v25 = v102;
LABEL_73:
  v76 = *((unsigned __int8 *)v2 + 58);
  if (*((_BYTE *)v2 + 58))
  {
    if (v76 == 1)
    {
      v77 = 1;
      v78 = *((unsigned __int8 *)v3 + 58);
      if (*((_BYTE *)v3 + 58))
        goto LABEL_76;
LABEL_82:
      LOBYTE(v77) = v77 ^ (*(_QWORD *)(v25 + 16) < 2uLL);
      goto LABEL_83;
    }
    v77 = 0;
    v78 = *((unsigned __int8 *)v3 + 58);
    if (!*((_BYTE *)v3 + 58))
      goto LABEL_82;
  }
  else
  {
    v77 = *(_QWORD *)(v101 + 16) > 1uLL;
    v78 = *((unsigned __int8 *)v3 + 58);
    if (!*((_BYTE *)v3 + 58))
      goto LABEL_82;
  }
LABEL_76:
  if (v78 != 1)
  {
    if (!v77)
      goto LABEL_99;
LABEL_84:
    v79 = 0x656C6269736956;
    swift_beginAccess();
    v80._countAndFlagsBits = 0xD00000000000001BLL;
    v80._object = (void *)0x8000000187BE9E30;
    String.append(_:)(v80);
    if (v76)
    {
      if (v76 == 1)
      {
LABEL_86:
        v81 = 0xE700000000000000;
        v82 = 0x656C6269736956;
        goto LABEL_93;
      }
    }
    else if (*(_QWORD *)(v101 + 16) > 1uLL)
    {
      goto LABEL_86;
    }
    v81 = 0xE600000000000000;
    v82 = 0x6E6564646948;
LABEL_93:
    v83 = v81;
    String.append(_:)(*(Swift::String *)&v82);
    swift_bridgeObjectRelease();
    v84._countAndFlagsBits = 10;
    v84._object = (void *)0xE100000000000000;
    String.append(_:)(v84);
    swift_endAccess();
    swift_beginAccess();
    v85._countAndFlagsBits = 0xD00000000000001BLL;
    v85._object = (void *)0x8000000187BE9E30;
    String.append(_:)(v85);
    if (v78)
    {
      if (v78 == 1)
      {
LABEL_95:
        v86 = (void *)0xE700000000000000;
LABEL_98:
        v87._countAndFlagsBits = v79;
        v87._object = v86;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        v88._countAndFlagsBits = 10;
        v88._object = (void *)0xE100000000000000;
        String.append(_:)(v88);
        swift_endAccess();
        goto LABEL_99;
      }
    }
    else if (*(_QWORD *)(v102 + 16) > 1uLL)
    {
      goto LABEL_95;
    }
    v86 = (void *)0xE600000000000000;
    v79 = 0x6E6564646948;
    goto LABEL_98;
  }
LABEL_83:
  if (!v77)
    goto LABEL_84;
LABEL_99:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v89._countAndFlagsBits = 0xD00000000000001BLL;
  v89._object = (void *)0x8000000187BE9D10;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 2570;
  v90._object = (void *)0xE200000000000000;
  String.append(_:)(v90);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v91._countAndFlagsBits = 0xD00000000000001ELL;
  v91._object = (void *)0x8000000187BE9CF0;
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._countAndFlagsBits = 2570;
  v92._object = (void *)0xE200000000000000;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 10;
}

void PresentationDetent.Identifier.description.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_187862E70()
{
  Swift::String v0;

  v0._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x6E6F697463617246;
}

uint64_t PresentationAdaptation.Kind.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_187862F70 + 4 * byte_187C662C4[a1]))(0x6974616D6F747541, 0xE900000000000063);
}

uint64_t sub_187862F70()
{
  return 1701736270;
}

uint64_t sub_187862F80()
{
  return 0x7265766F706F50;
}

uint64_t sub_187862F98()
{
  return 0x7465656853;
}

unint64_t sub_187862FAC()
{
  return 0xD000000000000011;
}

unint64_t sub_187862FCC()
{
  return 0xD000000000000010;
}

void protocol witness for CustomStringConvertible.description.getter in conformance PresentationDetent.Identifier()
{
  uint64_t *v0;

  PresentationDetent.Identifier.description.getter(*v0, v0[1]);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationAdaptation.Kind()
{
  unsigned __int8 *v0;

  return PresentationAdaptation.Kind.description.getter(*v0);
}

uint64_t outlined init with copy of PresentationOptionsPreference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PresentationOptionsPreference?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for BarItemView(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for BarItemView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  id v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for BarItemView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for BarItemView(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v4 = *a2;
  v5 = a2[1];
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for BarItemView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for BarItemView()
{
  return &type metadata for BarItemView;
}

uint64_t associated type witness table accessor for View.Body : View in BarItemView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryVG_AJ2IDVs5NeverOTg503_s7d4UI13f115BridgeC11makeStorage33_558B6B1E48F37C8B0E16B128287879E0LL2in4from8strategyAA0C0O08LocationF0VAJ03BarS0O_SayAA0cF0V5H66VGxtFAR2IDVARcfu0_33_2e12c960fb4b0a3abd8a514624e1a4d3ArUTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v17;
    v4 = *(_QWORD *)(type metadata accessor for ToolbarStorage.Entry(0) - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      ToolbarStorage.Entry.id.getter();
      v8 = *(_QWORD *)(v17 + 16);
      v7 = *(_QWORD *)(v17 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v17 + 16) = v8 + 1;
      v9 = v17 + 88 * v8;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_BYTE *)(v9 + 112) = v16;
      *(_OWORD *)(v9 + 80) = v14;
      *(_OWORD *)(v9 + 96) = v15;
      *(_OWORD *)(v9 + 64) = v13;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryV_SitG_AJs5NeverOTg503_s7d4UI14fg2V5h21VSiAEIgnyr_AE_SitAEs5i128OIegnrzr_TR03_s7a4UI13c104BridgeC24findAndSortMatchingItems33_558B6B1E48F37C8B0E16B128287879E0LL2in10newStorage7contextSayAA0cU0l46E52VGAA0C0O11BarLocationO_AjO0X7ContextVtFA2L_P16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  uint64_t v18;

  v3 = type metadata accessor for ToolbarStorage.Entry(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v17[1] = v1;
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v18;
    type metadata accessor for (ToolbarStorage.Entry, Int)();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = *(_QWORD *)(v11 + 72);
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v12, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
      v18 = v9;
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v9 = v18;
      }
      *(_QWORD *)(v9 + 16) = v15 + 1;
      outlined init with take of TableCellFormula((uint64_t)v7, v9+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v15, type metadata accessor for ToolbarStorage.Entry);
      v12 += v13;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized Sequence.filter(_:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;

  v4 = a3;
  v19 = MEMORY[0x1E0DEE9D8];
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v16 = v4 & 0xFFFFFFFFFFFFFF8;
      v17 = v4 & 0xC000000000000001;
      v15 = v4;
      while (v17)
      {
        v9 = (id)MEMORY[0x18D75E3BC](v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v18 = v9;
        v12 = a2;
        v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(_QWORD *)(v16 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_19;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

void specialized Sequence.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v40 = a1;
  v41 = a2;
  v5 = type metadata accessor for ToolbarStorage.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v36 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v35 - v15;
  v17 = 0;
  v42 = a3;
  v18 = *(_QWORD *)(a3 + 64);
  v38 = a3 + 64;
  v19 = 1 << *(_BYTE *)(a3 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v37 = MEMORY[0x1E0DEE9D8];
  v43 = MEMORY[0x1E0DEE9D8];
  v21 = v20 & v18;
  v39 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v17 >= v39)
      goto LABEL_32;
    v25 = *(_QWORD *)(v38 + 8 * v17);
    if (!v25)
      break;
LABEL_18:
    v21 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v17 << 6);
LABEL_19:
    v27 = *(_QWORD *)(v6 + 72);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v42 + 56) + v27 * v23, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry);
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v16, type metadata accessor for ToolbarStorage.Entry);
    v28 = v40(v16);
    if (v3)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry);
      swift_release();
LABEL_32:
      swift_release();
      return;
    }
    if ((v28 & 1) != 0)
    {
      outlined init with take of TableCellFormula((uint64_t)v16, v36, type metadata accessor for ToolbarStorage.Entry);
      v29 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
      v30 = v43;
      v32 = *(_QWORD *)(v43 + 16);
      v31 = *(_QWORD *)(v43 + 24);
      v33 = v32 + 1;
      if (v32 >= v31 >> 1)
      {
        v37 = v32 + 1;
        v35 = v32;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v33 = v37;
        v32 = v35;
        v30 = v43;
      }
      *(_QWORD *)(v30 + 16) = v33;
      v34 = *(unsigned __int8 *)(v6 + 80);
      v37 = v30;
      outlined init with take of TableCellFormula(v36, v30 + ((v34 + 32) & ~v34) + v32 * v27, type metadata accessor for ToolbarStorage.Entry);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry);
    }
  }
  v26 = v17 + 1;
  if (v17 + 1 >= v39)
    goto LABEL_32;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v17 + 2;
  if (v17 + 2 >= v39)
    goto LABEL_32;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v17 + 3;
  if (v17 + 3 >= v39)
    goto LABEL_32;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v17 + 4;
  if (v17 + 4 >= v39)
    goto LABEL_32;
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
  {
LABEL_17:
    v17 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v17 >= v39)
      goto LABEL_32;
    v25 = *(_QWORD *)(v38 + 8 * v17);
    ++v26;
    if (v25)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
}

uint64_t specialized ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE v12[96];
  _OWORD v13[7];
  _QWORD v14[12];
  char v15[88];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;

  v3 = v2;
  v17 = MEMORY[0x1E0DEE9E8];
  v18 = 0;
  v19 = 0;
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v15);
  v5 = &v2[direct field offset for ToolbarBridge.lastEnvironment];
  swift_beginAccess();
  v6 = *((_QWORD *)v5 + 1);
  EnvironmentValues.horizontalSizeClass.getter();
  v15[80] = v12[0];
  v14[1] = v6;
  EnvironmentValues.verticalSizeClass.getter();
  swift_endAccess();
  v15[81] = v12[0];
  v14[0] = a1;
  PreferenceList.subscript.getter();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(*(uint64_t *)&v13[1], *((uint64_t *)&v13[1] + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = MEMORY[0x1E0DEE9D8];
  specialized Set.formUnion<A>(_:)(MEMORY[0x1E0DEE9D8]);
  swift_endAccess();
  swift_bridgeObjectRelease();
  v16 = v7;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v15, (uint64_t)v13);
  v8 = (uint64_t)v3 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v13, v8);
  swift_endAccess();
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v15, (uint64_t)v14);
  memset((char *)v13 + 8, 0, 96);
  *(_QWORD *)&v13[0] = v3;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v14, (uint64_t)v12);
  v9 = v3;
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v12, (uint64_t)v13 + 8);
  specialized closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((char *)v13, v9, a1, (uint64_t)&v17, v15);
  outlined destroy of EmptyToolbarStrategy((uint64_t)v13);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v14);
  v10 = v17;
  memset(v13, 0, 96);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v13, v8);
  swift_endAccess();
  outlined destroy of Toolbar.UpdateContext((uint64_t)v15);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized ToolbarStrategy.makeBarContext(storage:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v3;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  char v10;
  char v11;
  char v12;
  __int16 v13;
  char v14;
  _BYTE v15[88];
  uint64_t v16;
  _BYTE v17[97];
  BOOL v18;
  _BYTE v19[6];
  _BYTE v20[16];
  _BYTE v21[8];
  uint64_t v22;

  v6 = MEMORY[0x1E0DEA968];
  outlined init with take of Image.Resolved?(a1, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968]);
  outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for String?, v6);
  v18 = v22 != 0;
  *(_DWORD *)v19 = 0x1000000;
  *(_WORD *)&v19[4] = 1;
  v7 = *v3;
  if (*v3)
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(v3 + 1), (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v16)
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v15, (uint64_t)v17);
      v8 = v7;
      specialized closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)((uint64_t)v8, (uint64_t)v17, (uint64_t)&v18, a2);

      result = outlined destroy of Toolbar.UpdateContext((uint64_t)v17);
      v10 = v19[0];
      v11 = v19[1];
      v12 = v19[2];
      v13 = *(_WORD *)&v19[3];
      v14 = v19[5];
      *(_BYTE *)a3 = v18;
      *(_BYTE *)(a3 + 1) = v10;
      *(_BYTE *)(a3 + 2) = v11;
      *(_BYTE *)(a3 + 3) = v12;
      *(_WORD *)(a3 + 4) = v13;
      *(_BYTE *)(a3 + 6) = v14;
      return result;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  char v9;
  id v10;
  id v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _QWORD v41[6];
  _BYTE v42[64];

  *(_WORD *)(a3 + 4) = *(_WORD *)(a2 + 80);
  v7 = MEMORY[0x18D760234](a2 + 64);
  if (v7)
  {
    v8 = (void *)v7;
    if (UIViewController.hasOrWillHaveBackItem(overrides:)(a2))
    {
      v9 = 1;
LABEL_9:

      goto LABEL_10;
    }
    v10 = objc_msgSend(v8, sel_navigationItem);
    v11 = objc_msgSend(v10, sel_leftBarButtonItems);

    if (!v11)
    {
      v9 = 0;
      goto LABEL_9;
    }
    type metadata accessor for UIBarButtonItem();
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v13 = specialized Sequence.first(where:)(v12);
    swift_bridgeObjectRelease();

    if (v13)
    {
      v9 = 1;
      v8 = v13;
      goto LABEL_9;
    }
  }
  v9 = 0;
LABEL_10:
  *(_BYTE *)(a3 + 2) = v9;
  v41[0] = a4;
  PreferenceList.subscript.getter();
  v32 = a3;
  *(_BYTE *)(a3 + 1) = v42[0];
  v14 = swift_bridgeObjectRetain();
  v15 = specialized Sequence.compactMap<A>(_:)(v14);
  swift_bridgeObjectRelease();
  v16 = specialized Set.init<A>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease();
  v17 = v16 + 56;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v16 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_35;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v26 >= v21)
      goto LABEL_40;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v21)
        goto LABEL_40;
      v27 = *(_QWORD *)(v17 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v21)
          goto LABEL_40;
        v27 = *(_QWORD *)(v17 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v21)
            goto LABEL_40;
          v27 = *(_QWORD *)(v17 + 8 * v23);
          if (!v27)
          {
            v23 = v26 + 4;
            if (v26 + 4 >= v21)
              goto LABEL_40;
            v27 = *(_QWORD *)(v17 + 8 * v23);
            if (!v27)
            {
              v23 = v26 + 5;
              if (v26 + 5 >= v21)
                goto LABEL_40;
              v27 = *(_QWORD *)(v17 + 8 * v23);
              if (!v27)
                break;
            }
          }
        }
      }
    }
LABEL_34:
    v20 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_35:
    outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v16 + 48) + 48 * v25, (uint64_t)v42);
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v42, (uint64_t)v41);
    v37 = 6;
    v38 = 0u;
    v39 = 0u;
    v40 = 2;
    v29 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v41, (uint64_t)&v37);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v41, (uint64_t)&v37);
    if ((v29 & 1) != 0)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
LABEL_39:
      swift_release();
      result = swift_bridgeObjectRelease();
      v31 = 1;
LABEL_41:
      *(_BYTE *)(v32 + 3) = v31;
      return result;
    }
    v33 = 22;
    v34 = 0u;
    v35 = 0u;
    v36 = 2;
    v30 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v37, (uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    result = outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
    if ((v30 & 1) != 0)
      goto LABEL_39;
  }
  v28 = v26 + 6;
  if (v28 >= v21)
  {
LABEL_40:
    swift_release();
    result = swift_bridgeObjectRelease();
    v31 = 0;
    goto LABEL_41;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_34;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v21)
      goto LABEL_40;
    v27 = *(_QWORD *)(v17 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_34;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(char *a1, char *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  int v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[48];

  v43 = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.NavigationProperties?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.NavigationProperties?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v40 - v13;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, v9);
  v42 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v40 - v17;
  v19 = &a2[direct field offset for ToolbarBridge.adaptorTracker];
  swift_beginAccess();
  v20 = a2;
  specialized VersionSeedTracker.didChange(_:action:)(a3, v19, (uint64_t)v20, a4);
  swift_endAccess();

  v21 = *(_QWORD *)&v20[direct field offset for ToolbarBridge.navigationAdaptor];
  v22 = *(_QWORD *)(v21 + 16);
  v44 = a5;
  v45 = v11;
  if (!v22)
    goto LABEL_5;
  v40 = v14;
  v41 = a4;
  v23 = v21 + 32;
  swift_bridgeObjectRetain();
  v24 = 0;
  do
  {
    outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v23, (uint64_t)v50);
    outlined init with copy of TableColumnList((uint64_t)v50, (uint64_t)v47);
    outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v50);
    v25 = v48;
    v26 = v49;
    __swift_project_boxed_opaque_existential_1(v47, v48);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 8))(&v46, v25, v26);
    v24 |= v46;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    v23 += 48;
    --v22;
  }
  while (v22);
  result = swift_bridgeObjectRelease();
  v14 = v40;
  a4 = v41;
  if ((v24 & 2) == 0)
  {
LABEL_5:
    v28 = &v20[direct field offset for ToolbarBridge.searchTracker];
    swift_beginAccess();
    v47[0] = a3;
    PreferenceList.subscript.getter();
    v29 = *(_DWORD *)&v18[*(int *)(v42 + 28)];
    if (*(_DWORD *)v28 == -1 || v29 == -1 || *(_DWORD *)v28 != v29)
    {
      *(_DWORD *)v28 = v29;
      v32 = (uint64_t)&v20[direct field offset for ToolbarBridge.searchItem];
      swift_beginAccess();
      outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v18, v32, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
      swift_endAccess();
    }
    outlined destroy of Binding<AttributedString>((uint64_t)v18, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
    v33 = swift_endAccess();
    MEMORY[0x1E0C80A78](v33, v34);
    v35 = v43;
    *(&v40 - 6) = v20;
    *(&v40 - 5) = v35;
    v36 = v44;
    *(&v40 - 4) = (char *)a3;
    *(&v40 - 3) = v36;
    *(&v40 - 2) = (char *)a4;
    swift_beginAccess();
    specialized VersionSeedTracker.didChange(_:action:)(a3, (void (*)(_QWORD *))partial apply for specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
    swift_endAccess();
    v37 = &v20[direct field offset for ToolbarBridge.titleTracker];
    swift_beginAccess();
    v47[0] = a3;
    PreferenceList.subscript.getter();
    v38 = *(_DWORD *)&v14[*(int *)(v45 + 28)];
    if (*(_DWORD *)v37 == -1 || v38 == -1 || *(_DWORD *)v37 != v38)
    {
      *(_DWORD *)v37 = v38;
      v39 = (uint64_t)&v20[direct field offset for ToolbarBridge.navigationProperties];
      swift_beginAccess();
      outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v14, v39, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.NavigationProperties?);
      swift_endAccess();
      *(_BYTE *)(a4 + 10) = 0;
    }
    outlined destroy of Binding<AttributedString>((uint64_t)v14, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.NavigationProperties?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.NavigationProperties?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  __int128 v58;
  unint64_t *v59;
  uint64_t result;
  int v61;
  int v62;
  int v65;
  unint64_t v66;
  uint64_t v68;
  _BYTE v69[40];
  _BYTE v70[40];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  _OWORD v82[5];

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 48) & 1;
  v12 = a2 + direct field offset for ToolbarBridge.toolbarStorage;
  v13 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.toolbarStorage);
  v14 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 8);
  v15 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 16);
  v16 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 24);
  v17 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 32);
  v18 = *(_QWORD *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 40);
  v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v12 = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v9;
  *(_QWORD *)(v12 + 48) = v11;
  *(_QWORD *)(v12 + 56) = v10;
  outlined retain of ToolbarStorage(a1);
  v20 = v13;
  v21 = a2;
  outlined consume of ToolbarStorage?(v20, v14, v15, v16, v17, v18);
  specialized ToolbarStrategy.makeBarContext(storage:preferences:)(a1, a4, (uint64_t)&v75);
  v22 = v75;
  v23 = v79;
  v24 = v80;
  v25 = v81;
  v65 = v76;
  v26 = 256;
  if (!v76)
    v26 = 0;
  v27 = v26 | v75;
  v61 = v78;
  v62 = v77;
  v28 = 0x10000;
  if (!v77)
    v28 = 0;
  v29 = 0x1000000;
  if (!v78)
    v29 = 0;
  v30 = v27 | v28 | v29;
  v31 = v30 | ((unint64_t)v79 << 32) | ((unint64_t)v80 << 40);
  v32 = v81 != 0;
  v33 = v21 + direct field offset for ToolbarBridge.lastBarContext;
  *(_DWORD *)v33 = v30;
  *(_WORD *)(v33 + 4) = WORD2(v31);
  *(_BYTE *)(v33 + 6) = BYTE6(v31) | v32;
  outlined init with copy of Toolbar.UpdateContext(a5, (uint64_t)&v75);
  v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v35 = *(_OWORD *)(a1 + 16);
  v71 = *(_OWORD *)a1;
  v72 = v35;
  v36 = *(_OWORD *)(a1 + 48);
  v73 = *(_OWORD *)(a1 + 32);
  v74 = v36;
  outlined retain of ToolbarStorage(a1);
  ToolbarStorage.removeRequestedDefaultItems()();
  *(_QWORD *)&v82[0] = specialized static Toolbar.BarLocation.allCases.getter();
  v37 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v37);
  v38 = *(_QWORD *)(*(_QWORD *)&v82[0] + 16);
  if (v38)
  {
    v68 = v21;
    v39 = (uint64_t *)(v21 + direct field offset for ToolbarBridge.allowedLocations);
    v40 = v22;
    v41 = *(_QWORD *)&v82[0] + 32;
    swift_beginAccess();
    v42 = 0x1000000000000;
    if (!v25)
      v42 = 0;
    v43 = v42 | (v24 << 40) | (v23 << 32);
    v44 = 0x1000000;
    if (!v61)
      v44 = 0;
    v45 = 0x10000;
    if (!v62)
      v45 = 0;
    v46 = v44 | v45;
    v47 = 256;
    if (!v65)
      v47 = 0;
    v66 = v43 | v46 | v47 | v40;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v41, (uint64_t)v70);
      v48 = *v39;
      swift_bridgeObjectRetain();
      v49 = specialized Set.contains(_:)((uint64_t)v70, v48);
      swift_bridgeObjectRelease();
      if ((v49 & 1) != 0)
      {
        v82[0] = v71;
        v82[1] = v72;
        v82[2] = v73;
        v82[3] = v74;
        outlined retain of ToolbarStorage((uint64_t)v82);
        v50 = specialized ToolbarBridge.findAndSortMatchingItems(in:newStorage:context:)((uint64_t)v70, (uint64_t)v82, v66);
        outlined release of ToolbarStorage((uint64_t)v82);
        v51 = specialized ToolbarStrategy.makeEntries(in:from:)(v70, v50);
        v52 = specialized ToolbarBridge.makeStorage(in:from:strategy:)((uint64_t)v70, v51);
        v54 = v53;
        v56 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with copy of Toolbar.BarLocation((uint64_t)v70, (uint64_t)v69);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v52, v54, v56, (uint64_t)v69, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        outlined destroy of Toolbar.BarLocation((uint64_t)v69);
      }
      outlined destroy of Toolbar.BarLocation((uint64_t)v70);
      v41 += 40;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
    v21 = v68;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v58 = v72;
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v58, *((uint64_t *)&v58 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v59 = (unint64_t *)(v21 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  *v59 = v34;
  swift_bridgeObjectRelease();
  outlined destroy of Toolbar.UpdateContext((uint64_t)&v75);
  *(_QWORD *)a6 = MEMORY[0x1E0DEE9E8];
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(a6 + 8) = 1;
  return result;
}

char *specialized ToolbarBridge.makeStorage(in:from:strategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  int64_t *v47;
  int v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  char *isUniquelyReferenced_nonNull_native;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  BOOL v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  char v96;
  char v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  id v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  _BOOL8 v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  char *v121;
  id v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  _BOOL8 v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  id v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  unint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char v200[8];
  _QWORD v201[3];
  __int128 v202;
  char v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  char v209;

  v153 = a2;
  v157 = type metadata accessor for UUID();
  v156 = *(_QWORD *)(v157 - 8);
  MEMORY[0x1E0C80A78](v157, v4);
  v155 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v182, v6);
  v178 = (uint64_t)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v152 - v10;
  v12 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v174 = (uint64_t)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v173 = (uint64_t)&v152 - v17;
  v189 = type metadata accessor for ToolbarStorage.Entry(0);
  v192 = *(_QWORD *)(v189 - 8);
  MEMORY[0x1E0C80A78](v189, v18);
  v176 = (uint64_t)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v180 = (uint64_t)&v152 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v194 = (uint64_t)&v152 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v152 - v28;
  v190 = a1;
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v201);
  v30 = (uint64_t *)(v2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v31 = *v30;
  if (*(_QWORD *)(*v30 + 16) && (v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v201), (v33 & 1) != 0))
  {
    v34 = (uint64_t *)(*(_QWORD *)(v31 + 56) + 24 * v32);
    v36 = *v34;
    v35 = v34[1];
    v37 = v34[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v36 = MEMORY[0x1E0DEE9D8];
    v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v37 = specialized Dictionary.init(dictionaryLiteral:)(v36);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)v201);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = specialized Sequence.compactMap<A>(_:)(v36, v35);
  swift_bridgeObjectRelease();
  v170 = v37;
  swift_bridgeObjectRelease();
  v152 = v35;
  swift_bridgeObjectRelease();
  v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryVG_AJ2IDVs5NeverOTg503_s7d4UI13f115BridgeC11makeStorage33_558B6B1E48F37C8B0E16B128287879E02in4from8strategyAA0C0O08LocationF0VAJ03BarS0O_SayAA0cF0V5H66VGxtFAR2IDVARcfu0_33_2e12c960fb4b0a3abd8a514624e1a4d3ArUTf3nnnpk_nTf1cn_n(v153);
  v40 = MEMORY[0x1E0DEE9D8];
  v201[0] = MEMORY[0x1E0DEE9D8];
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = v201[0];
  memset(v201, 0, sizeof(v201));
  v202 = xmmword_187C304D0;
  v42 = specialized static Toolbar.BarLocation.== infix(_:_:)(v190, (uint64_t)v201);
  outlined destroy of Toolbar.BarLocation((uint64_t)v201);
  v43 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(v40);
  v161 = specialized Dictionary.init(dictionaryLiteral:)(v40);
  v44 = *(_QWORD *)(v41 + 16);
  if (v44)
  {
    v171 = v36;
    if ((v42 & 1) != 0)
      v45 = 0;
    else
      v45 = 2;
    v163 = v41 + 32;
    v191 = &v203;
    v162 = v44;
    v177 = v44 - 1;
    v164 = v41;
    swift_bridgeObjectRetain();
    v46 = 0;
    v195 = (char *)MEMORY[0x1E0DEE9D8];
    v188 = xmmword_187C39070;
    v172 = 0x8000000187BE9F30;
    v186 = v11;
    v187 = v29;
    do
    {
      if (v46 >= *(_QWORD *)(v164 + 16))
        goto LABEL_198;
      v47 = (int64_t *)(v163 + 40 * v46);
      v48 = *((unsigned __int8 *)v47 + 32);
      if (*((_BYTE *)v47 + 32))
      {
        v50 = *v47;
        v49 = v47[1];
        v193 = v49;
        if (v48 == 1)
        {
          if (v50 != v49)
          {
            if (v49 < v50)
              goto LABEL_202;
            if (v50 >= v49)
              goto LABEL_204;
            v181 = v46;
            v184 = v153
                 + ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80));
            v51 = *(_QWORD *)(v153 + 16);
            if (v50 > v51)
              v51 = v50;
            v185 = -(uint64_t)v51;
            v52 = -v50;
            v183 = -v49;
            v53 = 16 * v50;
            v175 = 1 - v49;
            while (2)
            {
              if (v50 >= v49)
              {
                __break(1u);
LABEL_186:
                __break(1u);
LABEL_187:
                __break(1u);
LABEL_188:
                __break(1u);
LABEL_189:
                __break(1u);
LABEL_190:
                __break(1u);
LABEL_191:
                __break(1u);
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
LABEL_198:
                __break(1u);
LABEL_199:
                __break(1u);
LABEL_200:
                __break(1u);
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
LABEL_203:
                __break(1u);
LABEL_204:
                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
LABEL_208:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x187865F5CLL);
              }
              v205 = 0;
              v206 = 0;
              v207 = 0;
              v208 = v188;
              outlined init with copy of Toolbar.BarLocation(v190, (uint64_t)v201);
              outlined init with copy of Toolbar.BarLocation((uint64_t)&v205, (uint64_t)v191);
              switch((uint64_t)v202)
              {
                case 0:
                  if (v204)
                    goto LABEL_57;
                  goto LABEL_60;
                case 1:
                  if (v204 == 1)
                    goto LABEL_60;
                  goto LABEL_57;
                case 2:
                  if (v204 == 2)
                    goto LABEL_60;
                  goto LABEL_57;
                case 3:
                  if (v204 == 3)
                    goto LABEL_60;
                  goto LABEL_57;
                case 4:
                  if (v204 == 4)
                    goto LABEL_60;
                  goto LABEL_57;
                case 5:
                  if (v204 == 5)
                    goto LABEL_60;
                  goto LABEL_57;
                case 6:
                  if (v204 == 6)
                    goto LABEL_60;
                  goto LABEL_57;
                case 7:
                  if (v204 == 7)
                    goto LABEL_60;
                  goto LABEL_57;
                case 8:
                  if (v204 == 8)
                    goto LABEL_60;
                  goto LABEL_57;
                case 9:
                  if (v204 == 9)
                    goto LABEL_60;
                  goto LABEL_57;
                case 10:
                  if (v204 != 10)
                    goto LABEL_57;
                  goto LABEL_60;
                case 11:
                  if (v204 == 11)
                    goto LABEL_60;
                  goto LABEL_57;
                case 12:
                  if (v204 == 12)
                    goto LABEL_60;
                  goto LABEL_57;
                case 13:
                  if (v204 == 13)
                    goto LABEL_60;
                  goto LABEL_57;
                case 14:
                  if (v204 == 14)
                    goto LABEL_60;
                  goto LABEL_57;
                default:
                  outlined init with copy of Toolbar.BarLocation((uint64_t)v201, (uint64_t)v200);
                  if (v204 < 0xF)
                  {
                    outlined destroy of AnyHashable((uint64_t)v200);
LABEL_57:
                    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v201, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
                    goto LABEL_58;
                  }
                  v54 = *((_OWORD *)v191 + 1);
                  v197 = *(_OWORD *)v191;
                  v198 = v54;
                  v199 = *((_QWORD *)v191 + 4);
                  v55 = MEMORY[0x18D75E284](v200, &v197);
                  outlined destroy of AnyHashable((uint64_t)&v197);
                  outlined destroy of AnyHashable((uint64_t)v200);
                  if ((v55 & 1) == 0)
                  {
                    outlined destroy of Toolbar.BarLocation((uint64_t)v201);
LABEL_58:
                    outlined destroy of Toolbar.BarLocation((uint64_t)&v205);
                    goto LABEL_65;
                  }
LABEL_60:
                  outlined destroy of Toolbar.BarLocation((uint64_t)v201);
                  outlined destroy of Toolbar.BarLocation((uint64_t)&v205);
                  if (v175 == v52)
                    v56 = 1;
                  else
                    v56 = v45;
                  if (v181 == v177)
                    v45 = v56;
LABEL_65:
                  if (v185 == v52)
                    goto LABEL_186;
                  v57 = *(_QWORD *)(v192 + 72);
                  v196 = v50;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v184 + v57 * v50, (uint64_t)v29, type metadata accessor for ToolbarStorage.Entry);
                  v29[*(int *)(v189 + 20)] = v45;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v11, type metadata accessor for ToolbarStorage.Entry.Kind);
                  if (swift_getEnumCaseMultiPayload())
                  {
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for ToolbarStorage.Entry.Kind);
                    v58 = v178;
                    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, v178, type metadata accessor for ToolbarStorage.Entry.Kind);
                    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, type metadata accessor for ToolbarStorage.Entry.Kind);
                    v60 = v195;
                    if (EnumCaseMultiPayload == 2)
                    {
                      v61 = 0xE600000000000000;
                      v62 = 0x686372616573;
                    }
                    else
                    {
                      MEMORY[0x18D75AC90](0xD000000000000014, v172);
                      v62 = 0;
                      v61 = 0xE000000000000000;
                    }
                  }
                  else
                  {
                    v179 = (uint64_t)v43;
                    v63 = v174;
                    outlined init with take of TableCellFormula((uint64_t)v11, v174, type metadata accessor for ToolbarStorage.Item);
                    v64 = v63;
                    v65 = v173;
                    outlined init with take of TableCellFormula(v64, v173, type metadata accessor for ToolbarStorage.Item);
                    v61 = *(_QWORD *)(v65 + 40);
                    v60 = v195;
                    if (v61)
                    {
                      v62 = *(_QWORD *)(v65 + 32);
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      v66 = v155;
                      UUID.init()();
                      v62 = UUID.uuidString.getter();
                      v61 = v67;
                      (*(void (**)(char *, uint64_t))(v156 + 8))(v66, v157);
                    }
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v65, type metadata accessor for ToolbarStorage.Item);
                    v43 = (_QWORD *)v179;
                  }
                  v68 = *((_QWORD *)v60 + 2);
                  if (v68 < v196)
                    goto LABEL_187;
                  swift_bridgeObjectRetain();
                  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
                  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v68 >= *((_QWORD *)v60 + 3) >> 1)
                    v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v68 + 1, 1, v60);
                  v70 = &v60[v53];
                  swift_arrayDestroy();
                  v71 = v52 + *((_QWORD *)v60 + 2);
                  if (v71 < 0)
                    goto LABEL_207;
                  memmove(v70 + 48, &v60[v53 + 32], 16 * v71);
                  v72 = *((_QWORD *)v60 + 2) + 1;
                  v195 = v60;
                  *((_QWORD *)v60 + 2) = v72;
                  *(_QWORD *)&v60[v53 + 32] = v62;
                  *((_QWORD *)v70 + 5) = v61;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, v194, type metadata accessor for ToolbarStorage.Entry);
                  swift_bridgeObjectRetain();
                  v73 = swift_isUniquelyReferenced_nonNull_native();
                  v201[0] = v43;
                  v75 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v61);
                  v76 = v43[2];
                  v77 = (v74 & 1) == 0;
                  v78 = v76 + v77;
                  if (__OFADD__(v76, v77))
                    goto LABEL_188;
                  v79 = v74;
                  if (v43[3] >= v78)
                  {
                    if ((v73 & 1) != 0)
                    {
                      v43 = (_QWORD *)v201[0];
                      if ((v74 & 1) != 0)
                        goto LABEL_22;
                    }
                    else
                    {
                      specialized _NativeDictionary.copy()();
                      v43 = (_QWORD *)v201[0];
                      if ((v79 & 1) != 0)
                        goto LABEL_22;
                    }
                  }
                  else
                  {
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, v73);
                    v80 = specialized __RawDictionaryStorage.find<A>(_:)(v62, v61);
                    if ((v79 & 1) != (v81 & 1))
                      goto LABEL_208;
                    v75 = v80;
                    v43 = (_QWORD *)v201[0];
                    if ((v79 & 1) != 0)
                    {
LABEL_22:
                      outlined assign with take of ToolbarStorage.Entry(v194, v43[7] + v75 * v57);
                      goto LABEL_23;
                    }
                  }
                  v43[(v75 >> 6) + 8] |= 1 << v75;
                  v82 = (uint64_t *)(v43[6] + 16 * v75);
                  *v82 = v62;
                  v82[1] = v61;
                  outlined init with take of TableCellFormula(v194, v43[7] + v75 * v57, type metadata accessor for ToolbarStorage.Entry);
                  v83 = v43[2];
                  v84 = __OFADD__(v83, 1);
                  v85 = v83 + 1;
                  if (v84)
                    goto LABEL_189;
                  v43[2] = v85;
                  swift_bridgeObjectRetain();
LABEL_23:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v29 = v187;
                  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v187, type metadata accessor for ToolbarStorage.Entry);
                  swift_bridgeObjectRelease();
                  --v52;
                  v53 += 16;
                  v50 = v196 + 1;
                  v45 = 2;
                  v11 = v186;
                  v49 = v193;
                  if (v183 != v52)
                    continue;
                  v46 = v181;
                  break;
              }
              break;
            }
          }
        }
        else
        {
          v87 = (_QWORD *)v47[2];
          v86 = (_QWORD *)v47[3];
          v179 = (uint64_t)v87;
          v209 = 0;
          if (v50 != v49)
          {
            if (v49 < v50)
              goto LABEL_203;
            if (v50 >= v49)
              goto LABEL_205;
            v88 = (uint64_t)v86 - v179;
            if (v86 != (_QWORD *)v179)
            {
              if ((uint64_t)v86 > v179)
              {
                v185 = 0;
                v89 = 0;
                v169 = v153
                     + ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80));
                v90 = *(_QWORD *)(v153 + 16);
                v166 = v49 - 1;
                v168 = v171 + 16 * v50;
                v91 = v90 >= v179;
                v92 = v90 - v179;
                if (!v91)
                  v92 = 0;
                v175 = v92;
                v93 = -v179;
                v167 = 16 * v179;
                v154 = v88 - 1;
                v181 = v46;
                v196 = v50;
                v165 = v88;
                while (1)
                {
                  if (v88 == v89)
                    goto LABEL_190;
                  v205 = 0;
                  v206 = 0;
                  v207 = 0;
                  v208 = v188;
                  outlined init with copy of Toolbar.BarLocation(v190, (uint64_t)v201);
                  outlined init with copy of Toolbar.BarLocation((uint64_t)&v205, (uint64_t)v191);
                  v94 = v170;
                  switch((uint64_t)v202)
                  {
                    case 0:
                      if (!v204)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 1:
                      if (v204 == 1)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 2:
                      if (v204 == 2)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 3:
                      if (v204 == 3)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 4:
                      if (v204 == 4)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 5:
                      if (v204 == 5)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 6:
                      if (v204 == 6)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 7:
                      if (v204 == 7)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 8:
                      if (v204 == 8)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 9:
                      if (v204 == 9)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 10:
                      if (v204 == 10)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 11:
                      if (v204 == 11)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 12:
                      if (v204 == 12)
                        goto LABEL_136;
                      goto LABEL_132;
                    case 13:
                      if (v204 != 13)
                        goto LABEL_132;
                      goto LABEL_136;
                    case 14:
                      if (v204 == 14)
                        goto LABEL_136;
                      goto LABEL_132;
                    default:
                      outlined init with copy of Toolbar.BarLocation((uint64_t)v201, (uint64_t)v200);
                      v94 = v170;
                      if (v204 < 0xF)
                      {
                        outlined destroy of AnyHashable((uint64_t)v200);
LABEL_132:
                        outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v201, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_133:
                        outlined destroy of Toolbar.BarLocation((uint64_t)&v205);
                        if (v50 < 0)
                          goto LABEL_191;
                        goto LABEL_142;
                      }
                      v95 = *((_OWORD *)v191 + 1);
                      v197 = *(_OWORD *)v191;
                      v198 = v95;
                      v199 = *((_QWORD *)v191 + 4);
                      v96 = MEMORY[0x18D75E284](v200, &v197);
                      outlined destroy of AnyHashable((uint64_t)&v197);
                      outlined destroy of AnyHashable((uint64_t)v200);
                      if ((v96 & 1) == 0)
                      {
                        outlined destroy of Toolbar.BarLocation((uint64_t)v201);
                        goto LABEL_133;
                      }
LABEL_136:
                      outlined destroy of Toolbar.BarLocation((uint64_t)v201);
                      outlined destroy of Toolbar.BarLocation((uint64_t)&v205);
                      if (v154 == v89)
                        v97 = 1;
                      else
                        v97 = v45;
                      if (v46 == v177)
                        v45 = v97;
                      if (v50 < 0)
                        goto LABEL_191;
LABEL_142:
                      v98 = v50 + v89;
                      if ((unint64_t)(v50 + v89) >= *(_QWORD *)(v171 + 16))
                        goto LABEL_192;
                      if (v175 == v89)
                        goto LABEL_193;
                      v184 = v93;
                      v99 = (char *)(v179 + v89);
                      v101 = *(_QWORD *)(v168 + v185 + 32);
                      v100 = *(_QWORD *)(v168 + v185 + 40);
                      v183 = *(_QWORD *)(v192 + 72);
                      v102 = v180;
                      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v169 + v183 * (v179 + v89), v180, type metadata accessor for ToolbarStorage.Entry);
                      *(_BYTE *)(v102 + *(int *)(v189 + 20)) = v45;
                      v103 = *(_QWORD *)(v94 + 16);
                      swift_bridgeObjectRetain();
                      if (v103)
                      {
                        swift_bridgeObjectRetain();
                        v104 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v100);
                        v105 = v101;
                        if ((v106 & 1) != 0)
                        {
                          v159 = v98;
                          v107 = *(_QWORD *)(v94 + 56) + 16 * v104;
                          v108 = *(_BYTE *)(v107 + 8);
                          v160 = *(id *)v107;
                          v109 = v160;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          v158 = v109;
                          v110 = v161;
                          v111 = swift_isUniquelyReferenced_nonNull_native();
                          v201[0] = v110;
                          v112 = v105;
                          v114 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v100);
                          v115 = *(_QWORD *)(v110 + 16);
                          v116 = (v113 & 1) == 0;
                          v117 = v115 + v116;
                          if (__OFADD__(v115, v116))
                            goto LABEL_200;
                          v118 = v113;
                          if (*(_QWORD *)(v110 + 24) >= v117)
                          {
                            if ((v111 & 1) == 0)
                              specialized _NativeDictionary.copy()();
                          }
                          else
                          {
                            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, v111);
                            v119 = specialized __RawDictionaryStorage.find<A>(_:)(v112, v100);
                            if ((v118 & 1) != (v120 & 1))
                              goto LABEL_208;
                            v114 = v119;
                          }
                          v122 = v160;
                          v123 = (_QWORD *)v201[0];
                          v161 = v201[0];
                          if ((v118 & 1) != 0)
                          {
                            v124 = *(_QWORD *)(v201[0] + 56) + 16 * v114;

                            *(_QWORD *)v124 = v122;
                            *(_BYTE *)(v124 + 8) = v108;
                            v105 = v112;
                          }
                          else
                          {
                            *(_QWORD *)(v201[0] + 8 * (v114 >> 6) + 64) |= 1 << v114;
                            v125 = (uint64_t *)(v123[6] + 16 * v114);
                            *v125 = v112;
                            v125[1] = v100;
                            v126 = v123[7] + 16 * v114;
                            *(_QWORD *)v126 = v122;
                            *(_BYTE *)(v126 + 8) = v108;
                            v127 = v123[2];
                            v84 = __OFADD__(v127, 1);
                            v128 = v127 + 1;
                            if (v84)
                              goto LABEL_201;
                            v105 = v112;
                            v123[2] = v128;
                            swift_bridgeObjectRetain();
                          }

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v121 = v195;
                          v98 = v159;
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                          v121 = v195;
                        }
                      }
                      else
                      {
                        v121 = v195;
                        v105 = v101;
                      }
                      v129 = *((_QWORD *)v121 + 2);
                      if (v129 < (unint64_t)v99)
                        goto LABEL_194;
                      swift_bridgeObjectRetain();
                      v130 = (char *)swift_isUniquelyReferenced_nonNull_native();
                      if (!(_DWORD)v130 || v129 >= *((_QWORD *)v121 + 3) >> 1)
                        v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v130, v129 + 1, 1, v121);
                      v131 = v184;
                      v132 = &v121[v167 + v185];
                      swift_arrayDestroy();
                      v133 = v131 + *((_QWORD *)v121 + 2);
                      if (v133 < 0)
                        goto LABEL_207;
                      memmove(v132 + 48, v132 + 32, 16 * v133);
                      v134 = *((_QWORD *)v121 + 2) + 1;
                      v195 = v121;
                      *((_QWORD *)v121 + 2) = v134;
                      *((_QWORD *)v132 + 4) = v105;
                      *((_QWORD *)v132 + 5) = v100;
                      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v180, v176, type metadata accessor for ToolbarStorage.Entry);
                      v135 = swift_isUniquelyReferenced_nonNull_native();
                      v201[0] = v43;
                      v136 = v105;
                      v138 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v100);
                      v139 = v43[2];
                      v140 = (v137 & 1) == 0;
                      v141 = v139 + v140;
                      if (__OFADD__(v139, v140))
                        goto LABEL_195;
                      v142 = v137;
                      if (v43[3] >= v141)
                      {
                        if ((v135 & 1) == 0)
                          specialized _NativeDictionary.copy()();
                      }
                      else
                      {
                        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v141, v135);
                        v143 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v100);
                        if ((v142 & 1) != (v144 & 1))
                          goto LABEL_208;
                        v138 = v143;
                      }
                      v145 = v183;
                      v43 = (_QWORD *)v201[0];
                      if ((v142 & 1) != 0)
                      {
                        outlined assign with take of ToolbarStorage.Entry(v176, *(_QWORD *)(v201[0] + 56) + v138 * v183);
                      }
                      else
                      {
                        *(_QWORD *)(v201[0] + 8 * (v138 >> 6) + 64) |= 1 << v138;
                        v146 = (uint64_t *)(v43[6] + 16 * v138);
                        *v146 = v136;
                        v146[1] = v100;
                        outlined init with take of TableCellFormula(v176, v43[7] + v138 * v145, type metadata accessor for ToolbarStorage.Entry);
                        v147 = v43[2];
                        v84 = __OFADD__(v147, 1);
                        v148 = v147 + 1;
                        if (v84)
                          goto LABEL_199;
                        v43[2] = v148;
                        swift_bridgeObjectRetain();
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v180, type metadata accessor for ToolbarStorage.Entry);
                      v45 = 2;
                      v29 = v187;
                      if ((v209 & 1) != 0 || (v149 = v98 + 1, v98 + 1 == v193))
                      {
                        v46 = v181;
                        goto LABEL_11;
                      }
                      v50 = v196;
                      v46 = v181;
                      if (v149 < v196)
                        goto LABEL_196;
                      if (v149 - 1 == v166)
                        goto LABEL_197;
                      ++v89;
                      v185 += 16;
                      v93 = v131 - 1;
                      v88 = v165;
                      if (v165 == v89)
                        goto LABEL_11;
                      break;
                  }
                }
              }
              goto LABEL_206;
            }
          }
LABEL_11:
          v11 = v186;
        }
      }
      ++v46;
    }
    while (v46 != v162);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v150 = v195;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v150 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v150;
}

void key path getter for ToolbarStorage.Entry.id : ToolbarStorage.Entry()
{
  ToolbarStorage.Entry.id.getter();
}

unint64_t specialized ToolbarBridge.entries(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v9);
  v2 = (uint64_t *)(v1 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v4 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    specialized Dictionary.init(dictionaryLiteral:)(v7);
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Toolbar.BarLocation((uint64_t)v9);
  return v6;
}

uint64_t specialized ToolbarStrategy.makeContent(entry:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v26;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v26 - v13;
  v15 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v26 - v21;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry.Kind);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (EnumCaseMultiPayload == 2)
    {
      return 0x686372616573;
    }
    else
    {
      MEMORY[0x18D75AC90](0xD000000000000014, 0x8000000187BE9F30);
      return 0;
    }
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v22, type metadata accessor for ToolbarStorage.Item);
    if (*((_QWORD *)v22 + 5))
    {
      v24 = *((_QWORD *)v22 + 4);
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()();
      v24 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for ToolbarStorage.Item);
  }
  return v24;
}

void static ToolbarReader._makeView(view:inputs:)()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void sub_187866390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  char v22;
  uint64_t (*v23)(_QWORD, uint64_t, uint64_t);
  char v24;
  char v25;
  char v26;

  *(_QWORD *)(v14 - 392) = a1;
  *(_QWORD *)(v14 - 400) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v14 - 408) = (char *)&a9 - v15;
  *(_DWORD *)(v14 - 360) = *v9;
  LODWORD(v15) = *(_DWORD *)(v10 + 8);
  v16 = *(_QWORD *)(v10 + 16);
  v17 = *(_QWORD *)(v10 + 40);
  v18 = *(_QWORD *)(v10 + 48);
  v19 = *(_DWORD *)(v10 + 80);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)v10;
  *(_QWORD *)(v11 + 48) = v16;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 24);
  *(_QWORD *)(v11 + 72) = v17;
  *(_QWORD *)(v11 + 80) = v18;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v10 + 56);
  *(_QWORD *)(v11 + 104) = *(_QWORD *)(v10 + 72);
  v20 = v13;
  *(_DWORD *)(v14 - 176) = v15;
  *(_DWORD *)(v14 - 104) = v19;
  v21 = MEMORY[0x1E0CE4070];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ToolbarKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v21);
  lazy protocol witness table accessor for type _AnyPreferenceKey<SearchKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  *(_QWORD *)(v14 - 344) = v12;
  if ((static ToolbarEdges.contains(_:)(0, v20, v12) & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
  }
  if ((static ToolbarEdges.contains(_:)(1, v20, *(_QWORD *)(v14 - 344)) & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<BottomBarAppearanceKey> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
  }
  PreferenceValueAttribute.init(source:)();
  v22 = *(_BYTE *)(v14 - 296);
  *(_QWORD *)(v14 - 216) = *(_QWORD *)(v14 - 304);
  *(_BYTE *)(v14 - 208) = v22;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  v23 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5CA0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E0CE5CA0]);
  lazy protocol witness table accessor for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>();
  *(_DWORD *)(v14 - 348) = Attribute.init<A>(body:value:flags:update:)();
  PreferenceValueAttribute.init(source:)();
  v24 = *(_BYTE *)(v14 - 296);
  *(_QWORD *)(v14 - 216) = *(_QWORD *)(v14 - 304);
  *(_BYTE *)(v14 - 208) = v24;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PreferenceValueAttribute<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, v23);
  lazy protocol witness table accessor for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>();
  *(_DWORD *)(v14 - 352) = Attribute.init<A>(body:value:flags:update:)();
  PreferenceValueAttribute.init(source:)();
  v25 = *(_BYTE *)(v14 - 296);
  *(_QWORD *)(v14 - 216) = *(_QWORD *)(v14 - 304);
  *(_BYTE *)(v14 - 208) = v25;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, v23);
  lazy protocol witness table accessor for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>();
  Attribute.init<A>(body:value:flags:update:)();
  PreferenceValueAttribute.init(source:)();
  v26 = *(_BYTE *)(v14 - 296);
  *(_QWORD *)(v14 - 216) = *(_QWORD *)(v14 - 304);
  *(_BYTE *)(v14 - 208) = v26;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PreferenceValueAttribute<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, v23);
  lazy protocol witness table accessor for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>();
  Attribute.init<A>(body:value:flags:update:)();
  ToolbarReader.ToolbarConfiguration.init()(*(_QWORD *)(v14 - 408));
}

void sub_187866864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v18 = *(_QWORD *)(v8 - 392);
  v9 = v18;
  v10 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)&v17, v18, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 400) + 8))(v7, v9);
  LODWORD(v9) = *(_DWORD *)(v8 - 304);
  *(_DWORD *)(v8 - 392) = v9;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C118]();
  UpdateCycleDetector.init()();
  v12 = *(_DWORD *)(v8 - 208);
  v13 = *(_BYTE *)(v8 - 204);
  *(_DWORD *)(v8 - 304) = v9;
  *(_DWORD *)(v8 - 300) = *(_DWORD *)(v8 - 348);
  *(_DWORD *)(v8 - 296) = *(_DWORD *)(v8 - 352);
  *(_DWORD *)(v8 - 412) = v4;
  *(_DWORD *)(v8 - 292) = v4;
  *(_DWORD *)(v8 - 408) = v5;
  *(_DWORD *)(v8 - 288) = v5;
  swift_weakInit();
  v14 = swift_release();
  *(_QWORD *)(v8 - 272) = *(_QWORD *)(v8 - 216);
  *(_DWORD *)(v8 - 264) = v12;
  *(_BYTE *)(v8 - 260) = v13;
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v8 - 216) = v3;
  *(_QWORD *)(v8 - 208) = v6;
  v16 = v8 - 216;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v8 - 344);
  *(_QWORD *)(v16 + 24) = v2;
  type metadata accessor for ToolbarReader.ApplyUpdatesToExternalTarget();
}

void sub_1878669DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v6 - 16) = a1;
  *(_QWORD *)(v6 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.ApplyUpdatesToExternalTarget, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7 - 304, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, v2, a1, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v7 - 304, a1);
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  *(_DWORD *)(v7 - 216) = *(_DWORD *)(v7 - 360);
  *(_QWORD *)(v7 - 304) = v3;
  *(_QWORD *)(v7 - 296) = v5;
  *(_QWORD *)(v7 - 288) = v4;
  *(_QWORD *)(v7 - 280) = v1;
  type metadata accessor for ToolbarReader();
}

void sub_187866AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for _GraphValue();
  v14 = _GraphValue.value.getter();
  *(_QWORD *)(v13 - 360) = &a9;
  *(_DWORD *)(v13 - 216) = *(_DWORD *)(v13 - 392);
  *(_DWORD *)(v13 - 212) = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v13 - 304) = v10;
  *(_QWORD *)(v13 - 296) = v12;
  *(_QWORD *)(v13 - 288) = v11;
  *(_QWORD *)(v13 - 280) = v9;
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

void sub_187866B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 32) = a1;
  *(_QWORD *)(v6 - 304) = v2;
  *(_QWORD *)(v6 - 296) = v4;
  *(_QWORD *)(v6 - 288) = v3;
  *(_QWORD *)(v6 - 280) = v1;
  type metadata accessor for ToolbarReader.MakePrimitiveReader();
}

void sub_187866B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  *(_QWORD *)(v3 - 24) = a1;
  *(_QWORD *)(v3 - 16) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.MakePrimitiveReader, a1);
  v6 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4 - 216, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, v1, a1, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  _GraphValue.init(_:)();
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_QWORD *)(v2 + 80);
  v11 = *(_DWORD *)(v4 - 176);
  v12 = *(_DWORD *)(v4 - 104);
  *(_QWORD *)(v4 - 304) = *(_QWORD *)(v2 + 32);
  *(_DWORD *)(v4 - 296) = v11;
  *(_QWORD *)(v4 - 360) = v8;
  *(_QWORD *)(v4 - 288) = v8;
  *(_OWORD *)(v4 - 280) = *(_OWORD *)(v2 + 56);
  *(_QWORD *)(v4 - 392) = v9;
  *(_QWORD *)(v4 - 264) = v9;
  *(_QWORD *)(v4 - 400) = v10;
  *(_QWORD *)(v4 - 256) = v10;
  *(_OWORD *)(v4 - 248) = *(_OWORD *)(v2 + 88);
  *(_QWORD *)(v4 - 232) = *(_QWORD *)(v2 + 104);
  *(_DWORD *)(v4 - 224) = v12;
  static ToolbarReader.PrimitiveReader._makeView(view:inputs:)();
}

uint64_t sub_187866C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(v2 - 216);
  v4 = *(_DWORD *)(v2 - 208);
  v5 = *(_DWORD *)(v2 - 204);
  *(_QWORD *)(v2 - 304) = v3;
  *(_DWORD *)(v2 - 296) = v4;
  *(_DWORD *)(v2 - 292) = v5;
  _ViewOutputs.subscript.getter();
  static PreferenceValueAttribute.setSource(_:of:)();
  *(_QWORD *)(v2 - 304) = v3;
  *(_DWORD *)(v2 - 296) = v4;
  *(_DWORD *)(v2 - 292) = v5;
  _ViewOutputs.subscript.getter();
  static PreferenceValueAttribute.setSource(_:of:)();
  if ((static ToolbarEdges.contains(_:)(0, v0, v1) & 1) != 0)
  {
    *(_QWORD *)(v2 - 304) = v3;
    *(_DWORD *)(v2 - 296) = v4;
    *(_DWORD *)(v2 - 292) = v5;
    _ViewOutputs.subscript.getter();
    static PreferenceValueAttribute.setSource(_:of:)();
  }
  if ((static ToolbarEdges.contains(_:)(1, v0, *(_QWORD *)(v2 - 344)) & 1) != 0)
  {
    *(_QWORD *)(v2 - 304) = v3;
    *(_DWORD *)(v2 - 296) = v4;
    *(_DWORD *)(v2 - 292) = v5;
    _ViewOutputs.subscript.getter();
    static PreferenceValueAttribute.setSource(_:of:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v7 = *(_QWORD *)(v2 - 368);
  *(_QWORD *)v7 = v3;
  *(_DWORD *)(v7 + 8) = v4;
  *(_DWORD *)(v7 + 12) = v5;
  return result;
}

void ToolbarReader.ToolbarConfiguration.init()(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static ToolbarKey.defaultValue + 1);
  v3 = qword_1ECE20150;
  v4 = unk_1ECE20158;
  v5 = qword_1ECE20160;
  v6 = unk_1ECE20168;
  v7 = byte_1ECE20170;
  v8 = qword_1ECE20178;
  *(_QWORD *)a1 = static ToolbarKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void ToolbarReader.ApplyUpdatesToExternalTarget.target.getter()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187867028(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t ToolbarReader.ApplyUpdatesToExternalTarget.search.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  type metadata accessor for ToolbarStorage.SearchItem?(0);
  Value = AGGraphGetValue();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, a1, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
}

void ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void sub_187867188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 - 392) = (char *)&a9 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v9 - 400) = v10;
  MEMORY[0x1E0C80A78](v11, v12);
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter();
}

void sub_1878671F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + *(int *)(v0 + 56));
  *(_QWORD *)(v3 - 376) = v2;
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain();
  v5(v1, v0);
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v6 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  *(_DWORD *)(v3 - 336) = specialized static Dictionary<>.== infix(_:_:)(v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter();
}

void sub_187867298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v1 + *(int *)(v0 + 60));
  swift_bridgeObjectRetain();
  v3(v1, v0);
  *(_QWORD *)(v4 - 408) = v2;
  v6 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  *(_DWORD *)(v4 - 332) = specialized static Dictionary<>.== infix(_:_:)(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter();
}

void sub_18786730C()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(_OWORD *, uint64_t);
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;

  v4 = v1[1];
  *(_OWORD *)(v3 - 192) = *v1;
  *(_OWORD *)(v3 - 176) = v4;
  v5 = v1[3];
  *(_OWORD *)(v3 - 160) = v1[2];
  *(_OWORD *)(v3 - 144) = v5;
  outlined retain of ToolbarStorage(v3 - 192);
  v2(v1, v0);
  Value = AGGraphGetValue();
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_QWORD *)(Value + 40);
  v9 = *(_BYTE *)(Value + 48);
  v10 = *(_QWORD *)(Value + 56);
  v11 = *(_OWORD *)(Value + 16);
  *(_OWORD *)(v3 - 320) = *(_OWORD *)Value;
  *(_OWORD *)(v3 - 304) = v11;
  *(_QWORD *)(v3 - 288) = v7;
  *(_QWORD *)(v3 - 280) = v8;
  *(_BYTE *)(v3 - 272) = v9;
  *(_QWORD *)(v3 - 264) = v10;
  outlined retain of ToolbarStorage(v3 - 320);
  ToolbarStorage.identityEquals(_:)((_QWORD *)(v3 - 320));
  outlined release of ToolbarStorage(v3 - 320);
  outlined release of ToolbarStorage(v3 - 192);
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter();
}

uint64_t sub_1878673BC()
{
  uint64_t v0;
  _OWORD *v1;
  char v2;
  uint64_t v3;
  void (*v4)(_OWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1 + *(int *)(v0 + 52), v3, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  *(_QWORD *)(v6 - 384) = v4;
  v4(v1, v0);
  ToolbarReader.ApplyUpdatesToExternalTarget.search.getter(v5);
  v7 = AGCompareValues();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v5, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v3, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  if ((v2 & 1) == 0 || !v7 || (*(_DWORD *)(v6 - 332) & 1) == 0 || (*(_DWORD *)(v6 - 336) & 1) == 0)
  {
    result = UpdateCycleDetector.dispatch(label:isDebug:)();
    if ((result & 1) != 0)
    {
      Value = AGGraphGetValue();
      v10 = *(_QWORD *)(Value + 32);
      v11 = *(_QWORD *)(Value + 40);
      v12 = *(_BYTE *)(Value + 48);
      v13 = *(_QWORD *)(Value + 56);
      v14 = *(_OWORD *)(Value + 16);
      *(_OWORD *)(v6 - 256) = *(_OWORD *)Value;
      *(_OWORD *)(v6 - 240) = v14;
      *(_QWORD *)(v6 - 224) = v10;
      *(_QWORD *)(v6 - 216) = v11;
      *(_BYTE *)(v6 - 208) = v12;
      *(_QWORD *)(v6 - 200) = v13;
      ToolbarReader.ApplyUpdatesToExternalTarget.search.getter(v3);
      AGGraphGetValue();
      AGGraphGetValue();
      v15 = *(_OWORD *)(v6 - 208);
      v1[2] = *(_OWORD *)(v6 - 224);
      v1[3] = v15;
      v16 = *(_OWORD *)(v6 - 240);
      *v1 = *(_OWORD *)(v6 - 256);
      v1[1] = v16;
      v17 = *(_QWORD *)(v6 - 360);
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v6 - 344);
      *(_QWORD *)(v6 - 120) = v17;
      v18 = *(_QWORD *)(v6 - 352);
      *(_QWORD *)(v6 - 112) = *(_QWORD *)(v6 - 368);
      *(_QWORD *)(v6 - 104) = v18;
      type metadata accessor for ToolbarReader.ToolbarConfiguration();
    }
  }
  return result;
}

uint64_t ToolbarStorage.identityEquals(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t (*v43)(uint64_t);
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t i;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[48];
  _BYTE v69[48];
  _BYTE v70[48];
  uint64_t v71;
  unsigned __int8 v72;
  _BYTE v73[40];
  uint64_t v74;
  _BYTE v75[40];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v79[24];
  _BYTE v80[24];
  _BYTE v81[8];
  uint64_t v82;
  _BYTE v83[8];
  uint64_t v84;

  v2 = v1;
  v66 = type metadata accessor for ToolbarStorage.Entry(0);
  v4 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v64 = (uint64_t)&v51 - v10;
  type metadata accessor for (ToolbarStorage.Entry?, ToolbarStorage.Entry?)();
  v63 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v65 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v67 = (uint64_t)&v51 - v20;
  v21 = v2[1];
  v22 = a1[1];
  if (v21)
  {
    if (!v22)
      return 0;
    if (*v2 != *a1 || v21 != v22)
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v23 & 1) == 0)
        return result;
    }
  }
  else if (v22)
  {
    return 0;
  }
  v59 = v17;
  outlined init with take of TableCellFormula((uint64_t)(v2 + 2), (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Int>?);
  outlined init with take of TableCellFormula((uint64_t)v80, (uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Int>?);
  v25 = v82;
  if (v82)
    swift_retain();
  outlined init with take of TableCellFormula((uint64_t)(a1 + 2), (uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Int>?);
  outlined init with take of TableCellFormula((uint64_t)v79, (uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Int>?);
  if (v84)
  {
    swift_retain();
    if (v25)
    {
      swift_retain();
      v26 = dispatch thunk of AnyLocation.isEqual(to:)();
      swift_release_n();
      swift_release();
      if ((v26 & 1) != 0)
        goto LABEL_15;
      return 0;
    }
LABEL_34:
    swift_release();
    return 0;
  }
  if (v25)
    goto LABEL_34;
LABEL_15:
  v27 = v2[5];
  v77 = a1[5];
  v78 = v27;
  v52 = v77;
  v53 = v27;
  v28 = *(_QWORD *)(v27 + 16);
  v58 = *(_QWORD *)(v77 + 16);
  outlined retain of [Text.Modifier]((uint64_t)&v78);
  result = outlined retain of [Text.Modifier]((uint64_t)&v77);
  v29 = 0;
  v30 = 0;
  v55 = &v74;
  v56 = &v76;
  v60 = &v71;
  v31 = type metadata accessor for ToolbarStorage.Entry;
  v57 = v7;
  for (i = v28; ; v28 = i)
  {
    v32 = (uint64_t)v59;
    if (v30 == v28)
    {
      v33 = v28;
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
      result = v34(v67, 1, 1, v66);
      goto LABEL_21;
    }
    if (v30 >= v28)
      break;
    v35 = v67;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v53+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v30, v67, v31);
    v33 = v30 + 1;
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    result = v34(v35, 0, 1, v66);
LABEL_21:
    v62 = v33;
    if (v29 == v58)
    {
      v36 = v4;
      v37 = 1;
      v61 = v58;
    }
    else
    {
      if (v29 >= v58)
        goto LABEL_46;
      v36 = v4;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v52+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v29, v32, v31);
      v37 = 0;
      v61 = v29 + 1;
    }
    v38 = v31;
    v39 = v66;
    v34(v32, v37, 1, v66);
    v40 = v65;
    v41 = v65 + *(int *)(v63 + 48);
    v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(v67, v65, &lazy cache variable for type metadata for ToolbarStorage.Entry?, v38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v43 = v38;
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(v32, v41, &lazy cache variable for type metadata for ToolbarStorage.Entry?, v38, v42);
    v4 = v36;
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    v45 = v44(v40, 1, v39);
    v46 = v44(v41, 1, v39);
    if (v45 == 1)
    {
      if (v46 == 1)
      {
        outlined release of _IncrementalLayout_Placements((uint64_t)&v77);
        outlined release of _IncrementalLayout_Placements((uint64_t)&v78);
        return 1;
      }
      outlined destroy of Binding<AttributedString>(v41, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      goto LABEL_42;
    }
    if (v46 == 1)
    {
      v50 = v65;
LABEL_41:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v50, type metadata accessor for ToolbarStorage.Entry);
LABEL_42:
      outlined release of _IncrementalLayout_Placements((uint64_t)&v77);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v78);
      return 0;
    }
    v31 = v43;
    outlined init with take of TableCellFormula(v65, v64, v43);
    v47 = (uint64_t)v57;
    outlined init with take of TableCellFormula(v41, (uint64_t)v57, v43);
    ToolbarStorage.Entry.id.getter();
    ToolbarStorage.Entry.id.getter();
    v48 = MEMORY[0x18D75E284](v75, v73);
    v29 = v61;
    v30 = v62;
    if ((v48 & 1) == 0)
      goto LABEL_40;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v56, (uint64_t)v70, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v55, (uint64_t)v60, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v70[40] == 255)
    {
      if (v72 != 255)
        goto LABEL_39;
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v70, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v70, (uint64_t)v69, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      if (v72 == 255)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v69);
LABEL_39:
        outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)((uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?), &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_40:
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v73);
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v75);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, type metadata accessor for ToolbarStorage.Entry);
        v50 = v64;
        goto LABEL_41;
      }
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v60, (uint64_t)v68);
      v49 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v69, (uint64_t)v68);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v68);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v69);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v70, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      if ((v49 & 1) == 0)
        goto LABEL_40;
    }
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v73);
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v75);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, v31);
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, v31);
  }
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

unint64_t implicit closure #5 in implicit closure #4 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()()
{
  return 0xD000000000000014;
}

void closure #1 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void sub_187867D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 96) = v3;
  *(_QWORD *)(v6 - 88) = v2;
  type metadata accessor for ToolbarReader.Mutation();
}

uint64_t sub_187867DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  *(_QWORD *)(v5 - 136) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (uint64_t *)((char *)&v9 - v6);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E0CFED28])
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v5 - 144), v4);
      ToolbarReader.Mutation.init(target:newValue:)(*(_QWORD *)(v5 - 128), v7);
    }
    return swift_release();
  }
  return result;
}

void ToolbarReader.Mutation.init(target:newValue:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for ToolbarReader.Mutation();
}

void sub_187867F4C()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187867F68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void ToolbarReader.Mutation.apply()()
{
  AGWeakAttributeGetAttribute();
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187868004()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ToolbarReader.Mutation.apply(), (uint64_t)&v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, v0, (uint64_t)&v3);
}

void closure #1 in ToolbarReader.Mutation.apply()()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void sub_1878680CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 120) = v5;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for ToolbarReader.Mutation();
}

uint64_t sub_187868110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v1 + *(int *)(a1 + 52), v4);
  *(_QWORD *)(v6 - 144) = v4;
  *(_DWORD *)(v6 - 136) = v3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), v6 - 160, v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v4);
}

uint64_t ToolbarReader.Mutation.combine<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v24;
  _OWORD v26[2];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v26 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v14, a1, a3, v18);
  v22 = swift_dynamicCast();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if ((v22 & 1) != 0)
  {
    v23(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v10, a2);
    v24 = *(_OWORD *)(a2 + 32);
    v26[0] = *(_OWORD *)(a2 + 16);
    v26[1] = v24;
    type metadata accessor for ToolbarReader.ToolbarConfiguration();
  }
  v23(v10, 1, 1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return 0;
}

uint64_t protocol witness for GraphMutation.combine<A>(with:) in conformance ToolbarReader<A, B>.Mutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ToolbarReader.Mutation.combine<A>(with:)(a1, a4, a2);
}

void static ToolbarReader.PrimitiveReader._makeView(view:inputs:)()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

void sub_18786848C()
{
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)();
}

void sub_1878684C0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 - 316) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v1 - 184) = v0;
  _GraphValue.value.getter();
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  if (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64))
    closure #2 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)();
  *(_DWORD *)(v1 - 332) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v1 - 184) = v0;
  _GraphValue.value.getter();
  closure #3 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)();
}

void sub_187868564()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 352) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v1 - 184) = v0;
  _GraphValue.value.getter();
  closure #4 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)();
}

void sub_1878685A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int OffsetAttribute2;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v8 - 336) = v6;
  *(_DWORD *)(v8 - 380) = OffsetAttribute2;
  *(_QWORD *)(v8 - 184) = v2;
  *(_DWORD *)(v8 - 300) = v7;
  *(_DWORD *)(v8 - 176) = v7;
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 232);
  v10 = *(_DWORD *)(v8 - 236);
  *(_QWORD *)(v8 - 360) = v3;
  v11 = *(_DWORD *)(v8 - 240);
  *(_DWORD *)(v8 - 160) = v10;
  *(_DWORD *)(v8 - 156) = v11;
  *(_QWORD *)(v8 - 368) = v4;
  v12 = *(_DWORD *)(v8 - 248);
  *(_DWORD *)(v8 - 152) = *(_DWORD *)(v8 - 244);
  *(_DWORD *)(v8 - 148) = v12;
  v13 = *(_QWORD *)(v8 - 256);
  *(_QWORD *)(v8 - 376) = v0;
  v14 = *(_QWORD *)(v8 - 272);
  *(_QWORD *)(v8 - 144) = v13;
  *(_QWORD *)(v8 - 136) = v14;
  *(_QWORD *)(v8 - 392) = v1;
  v15 = v14;
  v16 = *(_DWORD *)(v8 - 276);
  *(_DWORD *)(v8 - 128) = *(_DWORD *)(v8 - 260);
  *(_DWORD *)(v8 - 124) = v16;
  v17 = *(_DWORD *)(v8 - 280);
  LODWORD(v14) = *(_DWORD *)(v8 - 284);
  *(_DWORD *)(v8 - 120) = v17;
  *(_DWORD *)(v8 - 116) = v14;
  *(_QWORD *)(v8 - 344) = v5;
  v18 = v14;
  v19 = *(_DWORD *)(v8 - 288);
  v20 = *(_DWORD *)(v8 - 292);
  *(_DWORD *)(v8 - 112) = v19;
  *(_DWORD *)(v8 - 108) = v20;
  v21 = *(_DWORD *)(v8 - 296);
  *(_DWORD *)(v8 - 104) = v21;
  swift_getKeyPath();
  *(_QWORD *)(v8 - 328) = v2;
  *(_DWORD *)(v8 - 348) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)(v8 - 184) = v2;
  *(_DWORD *)(v8 - 176) = *(_DWORD *)(v8 - 300);
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 232);
  v22 = *(_DWORD *)(v8 - 240);
  *(_DWORD *)(v8 - 160) = *(_DWORD *)(v8 - 236);
  *(_DWORD *)(v8 - 156) = v22;
  v23 = *(_DWORD *)(v8 - 248);
  *(_DWORD *)(v8 - 152) = *(_DWORD *)(v8 - 244);
  *(_DWORD *)(v8 - 148) = v23;
  *(_QWORD *)(v8 - 144) = *(_QWORD *)(v8 - 256);
  *(_QWORD *)(v8 - 136) = v15;
  *(_DWORD *)(v8 - 128) = *(_DWORD *)(v8 - 260);
  *(_DWORD *)(v8 - 124) = v16;
  *(_DWORD *)(v8 - 120) = v17;
  *(_DWORD *)(v8 - 116) = v18;
  *(_DWORD *)(v8 - 112) = v19;
  *(_DWORD *)(v8 - 108) = v20;
  *(_DWORD *)(v8 - 104) = v21;
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  v24 = swift_release();
  v25 = *(_DWORD *)(v8 - 380);
  *(_DWORD *)(v8 - 216) = *(_DWORD *)(v8 - 352);
  *(_DWORD *)(v8 - 212) = v25;
  MEMORY[0x1E0C80A78](v24, v26);
  v27 = *(_QWORD *)(v8 - 392);
  *(_QWORD *)(v8 - 184) = *(_QWORD *)(v8 - 368);
  *(_QWORD *)(v8 - 176) = v27;
  v28 = *(_QWORD *)(v8 - 376);
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 360);
  *(_QWORD *)(v8 - 160) = v28;
  type metadata accessor for ToolbarReader.MakeAppearances();
}

void sub_187868788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)(v7 - 16) = a1;
  *(_QWORD *)(v7 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.MakeAppearances, a1);
  type metadata accessor for Attribute<[ToolbarPlacement.Role : ToolbarAppearanceConfiguration]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8 - 216, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, v2, a1, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  *(_DWORD *)(v8 - 352) = *(_DWORD *)(v8 - 184);
  *(_DWORD *)(v8 - 184) = *(_DWORD *)(v8 - 336);
  v12 = _GraphValue.value.getter();
  v13 = *(_DWORD *)(v8 - 332);
  *(_DWORD *)(v8 - 216) = *(_DWORD *)(v8 - 316);
  *(_DWORD *)(v8 - 212) = v13;
  *(_DWORD *)(v8 - 208) = *(_DWORD *)(v8 - 348);
  *(_DWORD *)(v8 - 204) = v4;
  *(_QWORD *)(v8 - 200) = 0;
  *(_DWORD *)(v8 - 192) = 0;
  MEMORY[0x1E0C80A78](v12, v14);
  *(_QWORD *)(v8 - 184) = v5;
  *(_QWORD *)(v8 - 176) = v3;
  *(_QWORD *)(v8 - 168) = v6;
  *(_QWORD *)(v8 - 160) = v1;
  type metadata accessor for ToolbarReader.UpdateToolbarBridge();
}

void sub_187868870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v15 - 16) = a1;
  *(_QWORD *)(v15 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.UpdateToolbarBridge, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ToolbarProxy.Value>, (uint64_t)&type metadata for ToolbarProxy.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v16 - 216, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, v12, a1, MEMORY[0x1E0DEDCE8], v18, MEMORY[0x1E0DEDD18], v19);

  v20 = *(_DWORD *)(v16 - 184);
  *(_DWORD *)(v16 - 216) = v10;
  *(_DWORD *)(v16 - 212) = v20;
  *(_DWORD *)(v16 - 208) = *(_DWORD *)(v16 - 352);
  MEMORY[0x1E0C80A78](v21, v22);
  *(&a9 - 4) = v11;
  *(_QWORD *)(v16 - 184) = v14;
  *(_QWORD *)(v16 - 176) = v11;
  *(_QWORD *)(v16 - 168) = v13;
  *(_QWORD *)(v16 - 160) = v9;
  type metadata accessor for ToolbarReader.MakeView();
}

uint64_t sub_187868934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)(v4 - 24) = a1;
  *(_QWORD *)(v4 - 16) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.MakeView, a1);
  v7 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5 - 216, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, v2, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  _GraphValue.init(_:)();
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(v5 - 328);
  *(_DWORD *)(v5 - 176) = *(_DWORD *)(v5 - 300);
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v5 - 232);
  v9 = *(_DWORD *)(v5 - 240);
  *(_DWORD *)(v5 - 160) = *(_DWORD *)(v5 - 236);
  *(_DWORD *)(v5 - 156) = v9;
  v10 = *(_DWORD *)(v5 - 248);
  *(_DWORD *)(v5 - 152) = *(_DWORD *)(v5 - 244);
  *(_DWORD *)(v5 - 148) = v10;
  v11 = *(_QWORD *)(v5 - 272);
  *(_QWORD *)(v5 - 144) = *(_QWORD *)(v5 - 256);
  *(_QWORD *)(v5 - 136) = v11;
  LODWORD(v11) = *(_DWORD *)(v5 - 276);
  *(_DWORD *)(v5 - 128) = *(_DWORD *)(v5 - 260);
  *(_DWORD *)(v5 - 124) = v11;
  LODWORD(v11) = *(_DWORD *)(v5 - 284);
  *(_DWORD *)(v5 - 120) = *(_DWORD *)(v5 - 280);
  *(_DWORD *)(v5 - 116) = v11;
  LODWORD(v11) = *(_DWORD *)(v5 - 292);
  *(_DWORD *)(v5 - 112) = *(_DWORD *)(v5 - 288);
  *(_DWORD *)(v5 - 108) = v11;
  *(_DWORD *)(v5 - 104) = *(_DWORD *)(v5 - 296);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 24))(v5 - 216, v5 - 184, v3, v1);
}

void closure #1 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

uint64_t sub_187868ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[14];

  v5[2] = a1;
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for ToolbarStorage, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v5[4];
}

void closure #2 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

uint64_t sub_187868B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v2 = v1 + *(int *)(a1 + 52);
  v8[2] = a1;
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[4];
}

void closure #3 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

uint64_t sub_187868BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v2 = v1 + *(int *)(a1 + 56);
  v8[2] = a1;
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[4];
}

void closure #4 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

uint64_t sub_187868CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  v2 = v1 + *(int *)(a1 + 60);
  v8[2] = a1;
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_18, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[4];
}

uint64_t key path getter for EnvironmentValues.toolbarUpdateContext : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void ToolbarReader.PrimitiveReader.init(toolbar:search:navigationBar:bottomBar:reader:)(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  v3 = a1[3];
  a2[2] = a1[2];
  a2[3] = v3;
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

void sub_187868EC8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  outlined init with take of TableCellFormula(v3, v4 + a1[13], (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  *(_QWORD *)(v4 + a1[14]) = v2;
  *(_QWORD *)(v4 + a1[15]) = v1;
  type metadata accessor for ToolbarReader();
}

uint64_t sub_187868F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void ToolbarReader.MakePrimitiveReader.configuration.getter()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187868F78(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void ToolbarReader.MakePrimitiveReader.reader.getter()
{
  type metadata accessor for ToolbarReader();
}

uint64_t sub_187868FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance ToolbarReader<A, B>.PrimitiveReader()
{
  static ToolbarReader.PrimitiveReader._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ToolbarReader<A, B>.PrimitiveReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.PrimitiveReader, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarReader<A, B>.PrimitiveReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for ToolbarReader<A, B>.PrimitiveReader);
}

void protocol witness for View.body.getter in conformance ToolbarReader<A, B>.PrimitiveReader(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.PrimitiveReader, a1);
  specialized PrimitiveView.body.getter();
}

void ToolbarReader.MakePrimitiveReader.value.getter()
{
  type metadata accessor for ToolbarReader();
}

void sub_18786911C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v13 - 168) = (char *)&a9 - v14;
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v13 - 152) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v13 - 144) = v11;
  *(_QWORD *)(v13 - 136) = v10;
  *(_QWORD *)(v13 - 128) = v9;
  *(_QWORD *)(v13 - 120) = v12;
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void sub_187869194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 - 176) = (char *)&a9 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  ToolbarReader.MakePrimitiveReader.configuration.getter();
}

void sub_187869238()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v4 = v1[1];
  *(_OWORD *)(v3 - 144) = *v1;
  *(_OWORD *)(v3 - 128) = v4;
  v5 = v1[3];
  *(_OWORD *)(v3 - 112) = v1[2];
  *(_OWORD *)(v3 - 96) = v5;
  outlined retain of ToolbarStorage(v3 - 144);
  (*(void (**)(_OWORD *, uint64_t))(v0 + 8))(v1, v2);
  ToolbarReader.MakePrimitiveReader.configuration.getter();
}

void sub_18786927C()
{
  void (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v2 + 52), *(_QWORD *)(v3 - 152), (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  v0(v1, v2);
  ToolbarReader.MakePrimitiveReader.configuration.getter();
}

void sub_1878692C0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_bridgeObjectRetain();
  v1(v0, v2);
  ToolbarReader.MakePrimitiveReader.configuration.getter();
}

void sub_1878692FC()
{
  void (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  v0(v2, v1);
  ToolbarReader.MakePrimitiveReader.reader.getter();
}

void sub_187869338()
{
  uint64_t v0;

  ToolbarReader.PrimitiveReader.init(toolbar:search:navigationBar:bottomBar:reader:)((_OWORD *)(v0 - 144), *(_OWORD **)(v0 - 160));
}

void protocol witness for static Rule.initialValue.getter in conformance ToolbarReader<A, B>.MakePrimitiveReader()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

uint64_t sub_1878693AC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance ToolbarReader<A, B>.MakePrimitiveReader()
{
  ToolbarReader.MakePrimitiveReader.value.getter();
}

id ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id updated;
  id v5;

  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v3 = *(id *)(v1 + 16);
  }
  else
  {
    updated = closure #1 in ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v1, a1[2], a1[3], a1[4]);
    *(_QWORD *)(v1 + 16) = updated;
    v3 = updated;
    v2 = 0;
  }
  v5 = v2;
  return v3;
}

id closure #1 in ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class v8;
  id v9;
  id v10;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarBridge<EmptyToolbarStrategy>, (uint64_t)&type metadata for EmptyToolbarStrategy, (uint64_t)&protocol witness table for EmptyToolbarStrategy, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
  v9 = objc_msgSend(objc_allocWithZone(v8), sel_init);
  v10 = *(id *)(a1 + 16);
  specialized ToolbarReader.UpdateToolbarBridge.configure(bridge:)((uint64_t)v9, a2, a3, a4);

  return v9;
}

void ToolbarReader.UpdateToolbarBridge.updateValue()(uint64_t *a1)
{
  char updated;
  id v3;

  updated = ToolbarReader.UpdateToolbarBridge.updateBridgeIfNeeded()(a1);
  if (!AGGraphGetOutputValue() || (updated & 1) != 0)
  {
    v3 = ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(a1);
    AGGraphSetOutputValue();

  }
}

uint64_t ToolbarReader.UpdateToolbarBridge.updateBridgeIfNeeded()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;
  char *updated;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  unsigned __int8 v85;
  __int128 v86;
  _QWORD v87[6];
  char v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char v92[8];

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PreferenceList.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v66 - v7;
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v84 = (uint64_t)&v66 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v83 = (char *)&v66 - v18;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of SwiftUIAnySortComparator?(Value, (uint64_t)v87, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  if (!v91)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v87, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return 0;
  }
  v69 = v5;
  v70 = v8;
  outlined init with take of Toolbar.UpdateContext((uint64_t)v87, (uint64_t)v92);
  v82 = a1;
  updated = (char *)ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(a1);
  v21 = *(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 8];
  v22 = *(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 16];
  v23 = *(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 24];
  v25 = *(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 32];
  v24 = *(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 40];
  v26 = *(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 56];
  outlined copy of ToolbarStorage?(*(_QWORD *)&updated[direct field offset for ToolbarBridge.toolbarStorage], v21, v22, v23, v25, v24);

  v27 = MEMORY[0x1E0DEE9E8];
  v28 = MEMORY[0x1E0DEE9D8];
  if (v24)
    v29 = v21;
  else
    v29 = 0;
  v72 = v29;
  if (v24)
    v30 = v22;
  else
    v30 = 0;
  v73 = v30;
  if (v24)
    v31 = v23;
  else
    v31 = 0;
  v74 = v31;
  if (v24)
    v32 = v25;
  else
    v32 = 0;
  v75 = v32;
  if (v24)
    v28 = v24;
  v77 = v28;
  if (v24)
    v27 = v26;
  v76 = v27;
  v33 = AGGraphGetValue();
  v34 = 0;
  v36 = *(_QWORD *)(v33 + 8);
  v35 = *(_QWORD *)(v33 + 16);
  v38 = *(_QWORD *)(v33 + 24);
  v37 = *(_QWORD *)(v33 + 32);
  v39 = *(_QWORD *)(v33 + 40);
  v40 = *(_QWORD *)(v33 + 56);
  if ((v41 & 1) != 0)
  {
    if (*(_QWORD *)(v77 + 16))
      v34 = 1;
    else
      v34 = *(_QWORD *)(v39 + 16) != 0;
  }
  v67 = *(_QWORD *)v33;
  v68 = *(unsigned __int8 *)(v33 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v35, v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = v36;
  swift_bridgeObjectRetain();
  v79 = v35;
  v80 = v38;
  v78 = v37;
  outlined copy of Binding<NavigationSplitViewColumn>?(v35, v38);
  v81 = v39;
  swift_bridgeObjectRetain();
  v42 = v40;
  swift_bridgeObjectRetain();
  v43 = ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v82);
  v44 = (uint64_t)v43 + direct field offset for ToolbarBridge.searchItem;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, (uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);

  v45 = AGGraphGetValue();
  LOBYTE(v43) = v46;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, v84, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  v47 = 0;
  if ((v43 & 1) != 0)
  {
    v48 = type metadata accessor for ToolbarStorage.SearchItem(0);
    v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48);
    v47 = 1;
    if (v49(v83, 1, v48) == 1)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v84, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
      v47 = v49(v12, 1, v48) != 1;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
    }
  }
  v50 = *(_DWORD *)(v2 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E0CE5528], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v51 = *(unsigned __int8 *)AGGraphGetValue();
  v52 = (char *)ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v82);
  v53 = &v52[direct field offset for ToolbarBridge.lastEnvironment];
  swift_beginAccess();
  v86 = *(_OWORD *)v53;
  EnvironmentValues.horizontalSizeClass.getter();
  v54 = v85;
  swift_endAccess();

  if (v54 == 2)
  {
    if (!v34 && !v47)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      v63 = v79;
      v64 = v80;
      outlined consume of Binding<NavigationSplitViewColumn>?(v79, v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Binding<NavigationSplitViewColumn>?(v73, v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Binding<NavigationSplitViewColumn>?(v63, v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v84, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
      outlined destroy of Toolbar.UpdateContext((uint64_t)v92);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
      return 0;
    }
  }
  else if (v51 != 2 && !v34 && !v47 && ((v54 ^ v51) & 1) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(v2 + 24) = v50 + 1;
  PreferenceList.init()();
  v87[0] = v67;
  v87[1] = v71;
  v87[2] = v79;
  v87[3] = v80;
  v87[4] = v78;
  v87[5] = v81;
  v88 = v68;
  v66 = v42;
  v89 = v42;
  v90 = v50 + 1;
  PreferenceList.subscript.setter();
  v55 = (uint64_t)v70;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v84, (uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  *(_DWORD *)(v55 + *(int *)(v69 + 28)) = v50 + 1;
  PreferenceList.subscript.setter();
  EnvironmentValues.init()();
  LOBYTE(v87[0]) = v51;
  EnvironmentValues.horizontalSizeClass.setter();
  v56 = v82;
  v57 = (char *)ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v82);
  v58 = v86;
  v59 = &v57[direct field offset for ToolbarBridge.lastEnvironment];
  v60 = 1;
  swift_beginAccess();
  *(_OWORD *)v59 = v58;
  swift_retain();
  swift_retain();

  swift_release();
  swift_release();
  v61 = ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v56);
  v62 = swift_retain();
  specialized ToolbarBridge.preferencesDidChange(_:context:)(v62, (uint64_t)v92);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v79, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v73, v74);
  swift_release();
  swift_release();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v84, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v92);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
  return v60;
}

unint64_t ToolbarReader.MakeAppearances.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t Value;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  _QWORD v46[3];
  __int128 v47;
  _BYTE v48[40];
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  if ((static ToolbarEdges.contains(_:)(0, a2, a4) & 1) != 0)
  {
    memset(v48, 0, sizeof(v48));
    type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
    v56 = 0u;
    v57 = 0u;
    v58 = 0;
    Value = AGGraphGetValue();
    v8 = *(_QWORD *)Value;
    if (*(_QWORD *)(*(_QWORD *)Value + 16))
    {
      swift_bridgeObjectRetain();
      v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v56);
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(v8 + 56) + 80 * v9;
        v36 = *(_BYTE *)v11;
        v12 = *(_QWORD *)(v11 + 8);
        v13 = *(_QWORD *)(v11 + 16);
        v39 = *(_BYTE *)(v11 + 24);
        v37 = *(_QWORD *)(v11 + 32);
        v38 = *(_QWORD *)(v11 + 48);
        v14 = *(_BYTE *)(v11 + 57);
        v15 = *(_BYTE *)(v11 + 58);
        v16 = *(_QWORD *)(v11 + 64);
        v17 = *(_BYTE *)(v11 + 72);
        v42 = *(_BYTE *)(v11 + 40);
        v44 = *(_BYTE *)(v11 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        v18 = v36;
        swift_bridgeObjectRelease();
LABEL_7:
        outlined destroy of ToolbarPlacement.Role((uint64_t)&v56);
        LOBYTE(v56) = v18;
        *((_QWORD *)&v56 + 1) = v12;
        *(_QWORD *)&v57 = v13;
        BYTE8(v57) = v39;
        v58 = v37;
        v59 = v42;
        v60 = v38;
        v61 = v44;
        v62 = v14;
        v63 = v15;
        v64 = v16;
        v65 = v17;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46[0] = v6;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v56, (uint64_t)v48, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarPlacement.Role((uint64_t)v48);
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v13 = 0;
    v12 = 0;
    v18 = 0;
    v42 = 1;
    v44 = 1;
    v14 = 2;
    goto LABEL_7;
  }
LABEL_8:
  if ((static ToolbarEdges.contains(_:)(1, a2, a4) & 1) != 0)
  {
    memset(v46, 0, sizeof(v46));
    v47 = xmmword_187C304D0;
    memset(v48, 0, 24);
    *(_OWORD *)&v48[24] = xmmword_187C304D0;
    type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
    v20 = AGGraphGetValue();
    v21 = *(_QWORD *)v20;
    if (*(_QWORD *)(*(_QWORD *)v20 + 16))
    {
      swift_bridgeObjectRetain();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v48);
      if ((v23 & 1) != 0)
      {
        v24 = *(_QWORD *)(v21 + 56) + 80 * v22;
        v25 = *(_QWORD *)(v24 + 8);
        v26 = *(_QWORD *)(v24 + 16);
        v40 = *(_BYTE *)v24;
        v41 = *(_BYTE *)(v24 + 24);
        v27 = *(_QWORD *)(v24 + 32);
        v28 = *(_QWORD *)(v24 + 48);
        v29 = *(_BYTE *)(v24 + 57);
        v30 = *(_BYTE *)(v24 + 58);
        v31 = *(_QWORD *)(v24 + 64);
        v32 = *(_BYTE *)(v24 + 72);
        v45 = *(_BYTE *)(v24 + 40);
        v43 = *(_BYTE *)(v24 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        v33 = v40;
        swift_bridgeObjectRelease();
LABEL_14:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v48);
        v48[0] = v33;
        *(_QWORD *)&v48[8] = v25;
        *(_QWORD *)&v48[16] = v26;
        v48[24] = v41;
        *(_QWORD *)&v48[32] = v27;
        v49 = v45;
        v50 = v28;
        v51 = v43;
        v52 = v29;
        v53 = v30;
        v54 = v31;
        v55 = v32;
        v34 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, (uint64_t)v46, v34);
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
        return v6;
      }
      swift_bridgeObjectRelease();
    }
    v27 = 0;
    v41 = 0;
    v26 = 0;
    v25 = 0;
    v33 = 0;
    v28 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v45 = 1;
    v43 = 1;
    v29 = 2;
    goto LABEL_14;
  }
  return v6;
}

unint64_t protocol witness for Rule.value.getter in conformance ToolbarReader<A, B>.MakeAppearances@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  unint64_t result;

  result = ToolbarReader.MakeAppearances.value.getter(*v2, a1[2], a1[3], a1[4]);
  *a2 = result;
  return result;
}

void ToolbarReader.MakeView.value.getter()
{
  type metadata accessor for ToolbarReader.MakeView();
}

uint64_t sub_18786A24C(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>.MakeView, a1);
  return Rule.withObservation<A>(do:)();
}

void closure #1 in ToolbarReader.MakeView.value.getter()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

uint64_t sub_18786A2E8()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

void closure #1 in closure #1 in ToolbarReader.MakeView.value.getter()
{
  type metadata accessor for ToolbarReader.PrimitiveReader();
}

void sub_18786A374()
{
  type metadata accessor for ToolbarReader();
}

uint64_t sub_18786A38C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    return (*(uint64_t (**)(unint64_t, uint64_t))(v4 + v2 + *(int *)(a1 + 52)))(v3 & 0xFFFFFFFF00000000 | result, v1);
  __break(1u);
  return result;
}

void ToolbarReader.init(edges:content:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ToolbarReader();
}

uint64_t sub_18786A458(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 52));
  *v4 = v2;
  v4[1] = v1;
  return result;
}

void protocol witness for Rule.value.getter in conformance ToolbarReader<A, B>.MakeView()
{
  ToolbarReader.MakeView.value.getter();
}

void protocol witness for static View._makeView(view:inputs:) in conformance ToolbarReader<A, B>()
{
  static ToolbarReader._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ToolbarReader<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarReader<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for ToolbarReader<A, B>);
}

void protocol witness for View.body.getter in conformance ToolbarReader<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarReader<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for ToolbarStrategy.updateLocations() in conformance EmptyToolbarStrategy()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t ToolbarProxy.appearance(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;

  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  result = AGGraphGetInputValue();
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_bridgeObjectRetain();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v5 + 56) + 80 * v6;
      v9 = *(_BYTE *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      v11 = *(_QWORD *)(v8 + 16);
      v12 = *(_BYTE *)(v8 + 24);
      v13 = *(_QWORD *)(v8 + 32);
      v14 = *(_BYTE *)(v8 + 40);
      v15 = *(_QWORD *)(v8 + 48);
      v16 = *(_BYTE *)(v8 + 56);
      v17 = *(_WORD *)(v8 + 57);
      v18 = *(_QWORD *)(v8 + 64);
      LOBYTE(v8) = *(_BYTE *)(v8 + 72);
      *(_BYTE *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v11;
      *(_BYTE *)(a2 + 24) = v12;
      *(_QWORD *)(a2 + 32) = v13;
      *(_BYTE *)(a2 + 40) = v14;
      *(_QWORD *)(a2 + 48) = v15;
      *(_BYTE *)(a2 + 56) = v16;
      *(_WORD *)(a2 + 57) = v17;
      *(_QWORD *)(a2 + 64) = v18;
      *(_BYTE *)(a2 + 72) = v8;
      swift_retain();
      swift_retain();
      swift_retain();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
  }
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_WORD *)(a2 + 57) = 2;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  return result;
}

uint64_t ToolbarProxy.count(in:placement:)(uint64_t a1, uint64_t a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v11[6];
  _BYTE v12[48];
  _BYTE v13[48];

  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v12[40] == 255)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v9 = *(id *)AGGraphGetInputValue();
    v8 = specialized ToolbarBridge.entryCount(in:)(a1);

  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v12, (uint64_t)v13);
    v3 = *(id *)AGGraphGetInputValue();
    v4 = specialized ToolbarBridge.entries(in:)(a1);

    MEMORY[0x1E0C80A78](v5, v6);
    v11[2] = v13;
    specialized Sequence.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in ToolbarProxy.count(in:placement:), (uint64_t)v11, v4);
    v8 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v13);
  }
  return v8;
}

uint64_t closure #1 in ToolbarProxy.count(in:placement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v18;

  v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v18 - v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for ToolbarStorage.Entry.Kind);
    v16 = 0;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v11, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
    v16 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)(v15 + 48), a2);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
  }
  return v16 & 1;
}

uint64_t ToolbarProxy.callAsFunction(in:placement:showSeparator:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[11];
  _OWORD v23[5];
  char v24;
  uint64_t v25;

  v6 = type metadata accessor for ToolbarStorage.Entry(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = MEMORY[0x1E0DEE9D8];
  v11 = *(void **)AGGraphGetInputValue();
  v19 = a2;
  v20 = &v25;
  v12 = v11;
  specialized ToolbarBridge.adjustEntries(in:_:)(a1, (void (*)(uint64_t, uint64_t *))partial apply for closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:), (uint64_t)v18);

  v13 = v25;
  v14 = *(_QWORD *)(v25 + 16);
  if (v14)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v25+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * (v14 - 1), (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    ToolbarStorage.Entry.id.getter();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    v13 = v25;
  }
  else
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
  }
  KeyPath = swift_getKeyPath();
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v23, (uint64_t)v22, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = a3 & 1;
  outlined init with take of Image.Resolved?((uint64_t)v22, v16 + 24, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
  v22[0] = v13;
  v21 = KeyPath;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [ToolbarStorage.Entry] and conformance [A]();
  lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
  swift_bridgeObjectRetain();
  ForEach.init(_:idGenerator:content:)();
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v23, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(void);
  uint64_t (*v42)(void);
  uint64_t v44;
  _QWORD **v45;
  uint64_t v46;
  _BYTE v47[48];
  _BYTE v48[48];
  _BYTE v49[48];
  _BYTE v50[40];
  unsigned __int8 v51;
  _BYTE v52[48];
  _BYTE v53[56];

  v45 = a4;
  v46 = a3;
  v5 = type metadata accessor for ToolbarStorage.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v44 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v44 - v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (!swift_getEnumCaseMultiPayload())
  {
    v28 = (uint64_t)v9;
    v29 = v45;
    v44 = v6;
    outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of TableCellFormula((uint64_t)v21, (uint64_t)v25, type metadata accessor for ToolbarStorage.Item);
    v30 = v46;
    v31 = *(unsigned __int8 *)(v46 + 40);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v25, (uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of SwiftUIAnySortComparator?(v30, (uint64_t)v53, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v31 != 255)
    {
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v17 + 48), (uint64_t)v52);
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v52, (uint64_t)v49, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v53, (uint64_t)v50, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      v32 = a1;
      if (v49[40] == 255)
      {
        v41 = MEMORY[0x1E0DEB940];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v52, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v53, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v41);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
        if (v51 == 255)
        {
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v49, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          goto LABEL_9;
        }
      }
      else
      {
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v49, (uint64_t)v48, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
        if (v51 != 255)
        {
          outlined init with take of ToolbarItemPlacement.Role((uint64_t)v50, (uint64_t)v47);
          v33 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v48, (uint64_t)v47);
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v47);
          v34 = MEMORY[0x1E0DEB940];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v52, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v53, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v34);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v48);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v49, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v34);
          if ((v33 & 1) == 0)
            goto LABEL_18;
LABEL_9:
          v35 = v28;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, v28, type metadata accessor for ToolbarStorage.Entry);
          v36 = *v29;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v29 = v36;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v36 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
            *v29 = v36;
          }
          v38 = v44;
          v40 = v36[2];
          v39 = v36[3];
          if (v40 >= v39 >> 1)
          {
            v36 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v36);
            *v29 = v36;
          }
          v36[2] = v40 + 1;
          outlined init with take of TableCellFormula(v35, (uint64_t)v36+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v40, type metadata accessor for ToolbarStorage.Entry);
          goto LABEL_18;
        }
        v42 = MEMORY[0x1E0DEB940];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v52, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v53, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))v42);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v48);
      }
      outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?), &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_18:
      v26 = type metadata accessor for ToolbarStorage.Item;
      v27 = (uint64_t)v25;
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, v26);
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v53, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
    v32 = a1;
    goto LABEL_9;
  }
  v26 = type metadata accessor for ToolbarStorage.Entry.Kind;
  v27 = (uint64_t)v13;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, v26);
}

uint64_t closure #2 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  BOOL v20;
  uint64_t (*v21)(void);
  char v22;
  uint64_t (*v23)(void);
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[5];
  char v30;
  _BYTE v31[88];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  _BYTE v44[88];
  _BYTE v45[88];
  _OWORD v46[5];
  uint64_t v47;

  v28 = a4;
  v7 = type metadata accessor for ToolbarStorage.Entry(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of _ViewList_View((uint64_t)(v18 + 104), (uint64_t)v46);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    v19 = *(_BYTE *)(a1 + *(int *)(v7 + 20));
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    outlined init with copy of SwiftUIAnySortComparator?(a3, (uint64_t)v45, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
    if ((a2 & 1) != 0)
    {
      ToolbarStorage.Entry.id.getter();
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v44, (uint64_t)&v32, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v45, (uint64_t)&v38, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
      if (*((_QWORD *)&v33 + 1))
      {
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v32, (uint64_t)v31, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
        if (*((_QWORD *)&v39 + 1))
        {
          v29[2] = v40;
          v29[3] = v41;
          v29[4] = v42;
          v30 = v43;
          v29[0] = v38;
          v29[1] = v39;
          v20 = specialized static ToolbarStorage.Entry.ID.== infix(_:_:)((uint64_t)v31, (uint64_t)v29);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v29);
          v21 = MEMORY[0x1E0DEB940];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v44, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v45, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))v21);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v31);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v32, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))v21);
          v22 = !v20;
LABEL_12:
          v25 = v28;
          swift_unknownObjectWeakInit();
          swift_unknownObjectWeakAssign();
          outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v45, (uint64_t)&v38 + 8, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
          v34 = v46[2];
          v35 = v46[3];
          v36 = v46[4];
          v37 = v47;
          v32 = v46[0];
          v33 = v46[1];
          LOBYTE(v38) = v19;
          BYTE1(v38) = v22 & 1;
          return outlined init with take of BarItemView((uint64_t)&v32, v25);
        }
        v24 = MEMORY[0x1E0DEB940];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v44, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v45, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))v24);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v31);
LABEL_11:
        outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)((uint64_t)&v32, &lazy cache variable for type metadata for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?), &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
        v22 = 1;
        goto LABEL_12;
      }
      v23 = MEMORY[0x1E0DEB940];
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v44, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v45, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))v23);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
      if (*((_QWORD *)&v39 + 1))
        goto LABEL_11;
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v32, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v45, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    }
    v22 = 0;
    goto LABEL_12;
  }
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for ToolbarStorage.Entry.Kind);
  __break(1u);
  return result;
}

uint64_t closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;

  v7 = type metadata accessor for ToolbarStorage.Entry(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v31 - v22;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    v24 = type metadata accessor for ToolbarStorage.Entry.Kind;
    v25 = (uint64_t)v15;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v19, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)v23, type metadata accessor for ToolbarStorage.Item);
    if ((specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)(v23 + 48), a3) & 1) != 0)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, type metadata accessor for ToolbarStorage.Entry);
      v26 = *a4;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v26 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        *a4 = v26;
      }
      v29 = v26[2];
      v28 = v26[3];
      if (v29 >= v28 >> 1)
      {
        v26 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v26);
        *a4 = v26;
      }
      v26[2] = v29 + 1;
      outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v26+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v29, type metadata accessor for ToolbarStorage.Entry);
    }
    v24 = type metadata accessor for ToolbarStorage.Item;
    v25 = (uint64_t)v23;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v25, v24);
}

uint64_t closure #2 in ToolbarProxy.callAsFunction<A>(in:placement:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[8];
  _OWORD v16[5];
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for ToolbarStorage.Entry.Kind);
    __break(1u);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v11, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of _ViewList_View((uint64_t)(v11 + 104), (uint64_t)v16);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for ToolbarStorage.Item);
    v12 = *(_BYTE *)(a1 + *(int *)(type metadata accessor for ToolbarStorage.Entry(0) + 20));
    swift_unknownObjectWeakInit();
    v13 = swift_unknownObjectWeakAssign();
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(v13, (uint64_t)&v22, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    v18[2] = v16[2];
    v18[3] = v16[3];
    v18[4] = v16[4];
    v19 = v17;
    v18[0] = v16[0];
    v18[1] = v16[1];
    v20 = v12;
    v21 = 0;
    return outlined init with take of BarItemView((uint64_t)v18, a2);
  }
  return result;
}

uint64_t ToolbarProxy.visibility(in:)(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  BOOL v5;
  void *v6;
  id v7;
  BOOL v8;
  void *v9;
  id v10;
  BOOL v11;
  _OWORD v13[3];
  _BYTE v14[8];
  uint64_t v15;

  ToolbarProxy.appearance(in:)(a1, (uint64_t)v14);
  v2 = v14[0];
  swift_release();
  swift_release();
  swift_release();
  if (v2 == 2)
    return 2;
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v14);
  if (v15 == 3)
  {
    v9 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 24);
    *(_OWORD *)((char *)&v13[1] + 8) = xmmword_187C39040;
  }
  else
  {
    if (v15)
    {
      outlined destroy of ToolbarPlacement.Role((uint64_t)v14);
      return 2;
    }
    v3 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 24);
    *(_OWORD *)((char *)&v13[1] + 8) = xmmword_187C39070;
    v4 = v3;
    v5 = specialized ToolbarBridge.hasEntries(in:)((uint64_t)v13);

    outlined destroy of Toolbar.BarLocation((uint64_t)v13);
    if (v5)
      return 1;
    v6 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 24);
    *(_OWORD *)((char *)&v13[1] + 8) = xmmword_187C304D0;
    v7 = v6;
    v8 = specialized ToolbarBridge.hasEntries(in:)((uint64_t)v13);

    outlined destroy of Toolbar.BarLocation((uint64_t)v13);
    if (v8)
      return 1;
    v9 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 40);
  }
  v10 = v9;
  v11 = specialized ToolbarBridge.hasEntries(in:)((uint64_t)v13);

  outlined destroy of Toolbar.BarLocation((uint64_t)v13);
  if (v11)
    return 1;
  return 2;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToolbarScopeModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToolbarScopeModifier()
{
  lazy protocol witness table accessor for type ToolbarScopeModifier and conformance ToolbarScopeModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarScopeModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance ToolbarScopeModifier()
{
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  return PreferenceKeys.remove<A>(_:)();
}

uint64_t closure #1 in BarItemView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[120];
  _BYTE v18[88];
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 2;
  outlined init with copy of _ViewList_View(a1, (uint64_t)v18);
  v19 = _s7SwiftUI4ViewPAAE36accessibilityShowsLargeContentVieweryQrAA013AccessibilityfgC8BehaviorOFyAA0ifgC4TreeOzcfU_TA_0;
  v20 = v4;
  LOBYTE(v4) = *(_BYTE *)(a1 + 88);
  outlined init with copy of WeakBox<UIBarButtonItem>(a1 + 96, (uint64_t)&v22);
  v21 = v4;
  v5 = *(unsigned __int8 *)(a1 + 89);
  if (v5 == 1)
  {
    v6 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v15 = v6;
  }
  else
  {
    v15 = 0;
    v8 = 0;
    v10 = 0;
    v12 = 0;
    v14 = 0;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  *(_QWORD *)(a2 + 120) = v15;
  *(_QWORD *)(a2 + 128) = v8;
  *(_QWORD *)(a2 + 136) = v10;
  *(_QWORD *)(a2 + 144) = v12;
  *(_QWORD *)(a2 + 152) = v14;
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 161) = v5 ^ 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
}

uint64_t protocol witness for View.body.getter in conformance BarItemView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return closure #1 in BarItemView.body.getter(v1, a1 + 24);
}

void type metadata accessor for ToolbarReader()
{
  JUMPOUT(0x18D75FF28);
}

double static BarItemModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double result;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v4 = *a1;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v8 = a2[5];
  v7 = a2[6];
  v9 = *((_DWORD *)a2 + 20);
  v26 = *a2;
  v27 = v5;
  v29 = *(_OWORD *)(a2 + 3);
  v28 = v6;
  v30 = v8;
  v31 = v7;
  v32 = *(_OWORD *)(a2 + 7);
  v13 = v32;
  v33 = a2[9];
  v34 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<BarItemModifier>, (uint64_t)&unk_1E1B178A0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type BarEdgeInput and conformance BarEdgeInput();
  PropertyList.subscript.setter();
  v15 = v26;
  v16 = v27;
  v17 = v6;
  v18 = v29;
  v19 = v8;
  v20 = v7;
  v21 = v32;
  v22 = v33;
  v23 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(&v24, v10, &v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v15) = v4;
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  v15 = v7;
  v16 = v13;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = v24;
  result = v25;
  a4[1] = v25;
  return result;
}

uint64_t implicit closure #1 in static BarItemModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type BarItemModifier.Transform and conformance BarItemModifier.Transform();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in BarItemModifier.Transform.value.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t Value;
  void *v16;
  uint64_t v17;
  int64_t v18;
  _BYTE v19[8];
  _QWORD v20[4];

  v1 = *a1;
  v17 = *a1 + 64;
  v2 = 1 << *(_BYTE *)(*a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(*a1 + 64);
  v18 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8];
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_25;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v18)
      return swift_release();
    v11 = *(_QWORD *)(v17 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v18)
        return swift_release();
      v11 = *(_QWORD *)(v17 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v18)
          return swift_release();
        v11 = *(_QWORD *)(v17 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 3;
          if (v10 + 3 >= v18)
            return swift_release();
          v11 = *(_QWORD *)(v17 + 8 * v6);
          if (!v11)
          {
            v6 = v10 + 4;
            if (v10 + 4 >= v18)
              return swift_release();
            v11 = *(_QWORD *)(v17 + 8 * v6);
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_24:
    v4 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_25:
    v13 = specialized Dictionary.subscript.modify(v20, *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * v9));
    if (*(_QWORD *)(v14 + 16))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, v7);
      Value = AGGraphGetValue();
      outlined init with copy of WeakBox<UIBarButtonItem>(Value, (uint64_t)v19);
      v16 = (void *)MEMORY[0x18D760234](v19);
      outlined destroy of Binding<AttributedString>((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, v7);
      swift_unknownObjectWeakAssign();

    }
    result = ((uint64_t (*)(_QWORD *, _QWORD))v13)(v20, 0);
  }
  v12 = v10 + 5;
  if (v12 >= v18)
    return swift_release();
  v11 = *(_QWORD *)(v17 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_24;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v18)
      return swift_release();
    v11 = *(_QWORD *)(v17 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance BarItemModifier.Transform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int *v1;
  int v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in BarItemModifier.Transform.value.getter;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance BarItemModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static BarEdgeReader._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t View;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v28 = a4;
  v41 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v27 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v26 = *(_DWORD *)(a1 + 80);
  lazy protocol witness table accessor for type BarEdgeInput and conformance BarEdgeInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (BYTE4(v30) == 1)
  {
    LOBYTE(v30) = 2;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E0CE2780], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for External<HorizontalEdge?>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<HorizontalEdge?> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<HorizontalEdge?>, MEMORY[0x1E0CFED00]);
    v16 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    v16 = v30;
  }
  type metadata accessor for BarEdgeReader(255, a2, a3, v15);
  type metadata accessor for _GraphValue();
  v17 = _GraphValue.value.getter();
  v30 = __PAIR64__(v16, v17);
  LOBYTE(v31) = 0;
  MEMORY[0x1E0C80A78](v17, v18);
  v23[2] = a2;
  View = type metadata accessor for BarEdgeReader.MakeView(0, a2, a3, v19);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarEdgeReader<A>.MakeView, View);
  v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v23, View, MEMORY[0x1E0DEDCE8], v20, MEMORY[0x1E0DEDD18], v21);
  _GraphValue.init(_:)();
  v30 = v6;
  v31 = v27;
  v32 = v7;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v11;
  v37 = v12;
  v38 = v13;
  v39 = v14;
  v40 = v26;
  return (*(uint64_t (**)(int *, unint64_t *, uint64_t, uint64_t))(a3 + 24))(&v29, &v30, a2, a3);
}

uint64_t BarEdgeReader.MakeView.value.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(uint64_t);
  uint64_t v6;

  type metadata accessor for BarEdgeReader(0, a3, a4, a4);
  v5 = *(void (**)(uint64_t))AGGraphGetValue();
  if ((a2 & 1) != 0)
  {
    v6 = 2;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E0CE2780], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v6 = *(unsigned __int8 *)AGGraphGetValue();
  }
  swift_retain();
  v5(v6);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance BarEdgeReader<A>.MakeView(uint64_t a1)
{
  uint64_t v1;

  return BarEdgeReader.MakeView.value.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BarEdgeReader<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static BarEdgeReader._makeView(view:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BarEdgeReader<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarEdgeReader<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BarEdgeReader<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for BarEdgeReader<A>);
}

void protocol witness for View.body.getter in conformance BarEdgeReader<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarEdgeReader<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance BarEdgeInput(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 4);
  result = *(unsigned __int8 *)(a2 + 4);
  if ((v3 & 1) == 0)
    return (*(_DWORD *)a1 == *(_DWORD *)a2) & ~(_DWORD)result;
  return result;
}

uint64_t partial apply for closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD ***)(v2 + 24));
}

void sub_18786C82C()
{
  ToolbarStorage.Entry.id.getter();
}

uint64_t sub_18786C84C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
    if (*(_BYTE *)(v0 + 104) == 1)
      __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(a1, *(_BYTE *)(v2 + 16), v2 + 24, a2);
}

unint64_t lazy protocol witness table accessor for type [ToolbarStorage.Entry] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A])
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with take of BarItemView(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 88);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::Int v27;
  unint64_t v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  Swift::Int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int v139;
  char *v140;
  uint64_t v141;
  Swift::Int v142;
  uint64_t v143;
  Swift::Int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  Swift::Int v154;
  uint64_t v155;
  uint64_t v156;
  Swift::Int v157;
  Swift::Int v158;
  uint64_t v159;

  v2 = v1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v155 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v143 = (uint64_t)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v156 = (uint64_t)&v136 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v153 = (uint64_t)&v136 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v152 = (uint64_t)&v136 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v151 = (uint64_t)&v136 - v19;
  v147 = a1;
  v20 = a1[1];
  v21 = _minimumMergeRunLength(_:)(v20);
  if (v21 >= v20)
  {
    if (v20 < 0)
      goto LABEL_137;
    if (v20)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v20, 1, v147);
    return;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_145;
  v139 = v21;
  v146 = v5;
  if (v20 < 2)
  {
    v26 = (char *)MEMORY[0x1E0DEE9D8];
    v145 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v138 = MEMORY[0x1E0DEE9D8];
    if (v20 != 1)
    {
      v28 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_103:
      if (v28 >= 2)
      {
        v128 = *v147;
        do
        {
          v129 = v28 - 2;
          if (v28 < 2)
            goto LABEL_132;
          if (!v128)
            goto LABEL_144;
          v130 = v26;
          v131 = v26 + 32;
          v132 = *(_QWORD *)&v26[16 * v129 + 32];
          v133 = *(_QWORD *)&v26[16 * v28 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v128 + *(_QWORD *)(v146 + 72) * v132, v128 + *(_QWORD *)(v146 + 72) * *(_QWORD *)&v131[16 * v28 - 16], v128 + *(_QWORD *)(v146 + 72) * v133, v145);
          if (v2)
            break;
          if (v133 < v132)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v130 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v130);
          if (v129 >= *((_QWORD *)v130 + 2))
            goto LABEL_134;
          v134 = &v130[16 * v129 + 32];
          *(_QWORD *)v134 = v132;
          *((_QWORD *)v134 + 1) = v133;
          v135 = *((_QWORD *)v130 + 2);
          if (v28 > v135)
            goto LABEL_135;
          v26 = v130;
          memmove(&v130[16 * v28 + 16], &v130[16 * v28 + 32], 16 * (v135 - v28));
          *((_QWORD *)v130 + 2) = v135 - 1;
          v28 = v135 - 1;
        }
        while (v135 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v138 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v5 + 80);
    v138 = v24;
    v145 = v24 + ((v25 + 32) & ~v25);
  }
  v27 = 0;
  v26 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v29 = v27;
    v30 = v27 + 1;
    v144 = v27;
    if (v27 + 1 >= v20)
    {
      v41 = v27 + 1;
    }
    else
    {
      v31 = *v147;
      v141 = v31;
      v32 = *(_QWORD *)(v146 + 72);
      v158 = v32;
      v33 = v151;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31 + v32 * v30, v151, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v34 = v152;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31 + v32 * v29, v152, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v157 = v20;
      v35 = v155;
      v36 = *(int *)(v155 + 48);
      v37 = v153;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v33, v153, type metadata accessor for ToolbarStorage.Entry);
      v150 = *(_QWORD *)(v33 + v36);
      *(_QWORD *)(v37 + v36) = v150;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, type metadata accessor for ToolbarStorage.Entry);
      v38 = *(int *)(v35 + 48);
      v20 = v157;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v37, type metadata accessor for ToolbarStorage.Entry);
      v149 = *(_QWORD *)(v34 + v38);
      *(_QWORD *)(v37 + v38) = v149;
      v29 = v144;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, type metadata accessor for ToolbarStorage.Entry);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v39 = v33;
      v40 = v158;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v39, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v41 = v29 + 2;
      if (v29 + 2 < v20)
      {
        v140 = v26;
        v137 = v2;
        v148 = v40 * v30;
        v42 = v141;
        v142 = v40 * v41;
        while (1)
        {
          v154 = v41;
          LODWORD(v159) = v150 < v149;
          v43 = v151;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42 + v142, v151, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v44 = v152;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42 + v148, v152, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v45 = v155;
          v46 = *(int *)(v155 + 48);
          v47 = v153;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v153, type metadata accessor for ToolbarStorage.Entry);
          v48 = *(_QWORD *)(v43 + v46);
          *(_QWORD *)(v47 + v46) = v48;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, type metadata accessor for ToolbarStorage.Entry);
          v49 = *(int *)(v45 + 48);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, v47, type metadata accessor for ToolbarStorage.Entry);
          v50 = *(_QWORD *)(v44 + v49);
          *(_QWORD *)(v47 + v49) = v50;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v43, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          if ((_DWORD)v159 == v48 >= v50)
            break;
          v41 = v154 + 1;
          v20 = v157;
          v40 = v158;
          v42 += v158;
          if (v157 == v154 + 1)
          {
            v41 = v157;
            v2 = v137;
            v26 = v140;
            v29 = v144;
            goto LABEL_23;
          }
        }
        v2 = v137;
        v26 = v140;
        v41 = v154;
        v29 = v144;
        v20 = v157;
        v40 = v158;
      }
LABEL_23:
      if (v150 < v149)
      {
        if (v41 < v29)
          goto LABEL_138;
        if (v29 < v41)
        {
          v140 = v26;
          v51 = 0;
          v52 = v40 * (v41 - 1);
          v53 = v41 * v40;
          v54 = v29 * v40;
          v154 = v41;
          do
          {
            if (v29 != v41 + v51 - 1)
            {
              v55 = v141;
              if (!v141)
                goto LABEL_143;
              v56 = v141 + v54;
              v57 = v141 + v52;
              outlined init with take of TableCellFormula(v141 + v54, v143, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
              if (v54 < v52 || v56 >= v55 + v53)
              {
                swift_arrayInitWithTakeFrontToBack();
                v40 = v158;
              }
              else
              {
                v40 = v158;
                if (v54 != v52)
                  swift_arrayInitWithTakeBackToFront();
              }
              outlined init with take of TableCellFormula(v143, v57, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
              v41 = v154;
            }
            ++v29;
            --v51;
            v52 -= v40;
            v53 -= v40;
            v54 += v40;
          }
          while (v29 < v41 + v51);
          v26 = v140;
          v29 = v144;
          v20 = v157;
        }
      }
    }
    if (v41 < v20)
    {
      if (__OFSUB__(v41, v29))
        goto LABEL_136;
      if (v41 - v29 < v139)
        break;
    }
LABEL_55:
    if (v41 < v29)
      goto LABEL_131;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v154 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v78 = *((_QWORD *)v26 + 2);
    v77 = *((_QWORD *)v26 + 3);
    v28 = v78 + 1;
    if (v78 >= v77 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v28;
    v79 = v26 + 32;
    v80 = &v26[16 * v78 + 32];
    v81 = v154;
    *(_QWORD *)v80 = v144;
    *((_QWORD *)v80 + 1) = v81;
    if (v78)
    {
      while (1)
      {
        v82 = v28 - 1;
        if (v28 >= 4)
        {
          v87 = &v79[16 * v28];
          v88 = *((_QWORD *)v87 - 8);
          v89 = *((_QWORD *)v87 - 7);
          v93 = __OFSUB__(v89, v88);
          v90 = v89 - v88;
          if (v93)
            goto LABEL_120;
          v92 = *((_QWORD *)v87 - 6);
          v91 = *((_QWORD *)v87 - 5);
          v93 = __OFSUB__(v91, v92);
          v85 = v91 - v92;
          v86 = v93;
          if (v93)
            goto LABEL_121;
          v94 = v28 - 2;
          v95 = &v79[16 * v28 - 32];
          v97 = *(_QWORD *)v95;
          v96 = *((_QWORD *)v95 + 1);
          v93 = __OFSUB__(v96, v97);
          v98 = v96 - v97;
          if (v93)
            goto LABEL_123;
          v93 = __OFADD__(v85, v98);
          v99 = v85 + v98;
          if (v93)
            goto LABEL_126;
          if (v99 >= v90)
          {
            v117 = &v79[16 * v82];
            v119 = *(_QWORD *)v117;
            v118 = *((_QWORD *)v117 + 1);
            v93 = __OFSUB__(v118, v119);
            v120 = v118 - v119;
            if (v93)
              goto LABEL_130;
            v110 = v85 < v120;
            goto LABEL_92;
          }
        }
        else
        {
          if (v28 != 3)
          {
            v111 = *((_QWORD *)v26 + 4);
            v112 = *((_QWORD *)v26 + 5);
            v93 = __OFSUB__(v112, v111);
            v104 = v112 - v111;
            v105 = v93;
            goto LABEL_86;
          }
          v84 = *((_QWORD *)v26 + 4);
          v83 = *((_QWORD *)v26 + 5);
          v93 = __OFSUB__(v83, v84);
          v85 = v83 - v84;
          v86 = v93;
        }
        if ((v86 & 1) != 0)
          goto LABEL_122;
        v94 = v28 - 2;
        v100 = &v79[16 * v28 - 32];
        v102 = *(_QWORD *)v100;
        v101 = *((_QWORD *)v100 + 1);
        v103 = __OFSUB__(v101, v102);
        v104 = v101 - v102;
        v105 = v103;
        if (v103)
          goto LABEL_125;
        v106 = &v79[16 * v82];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v93 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v93)
          goto LABEL_128;
        if (__OFADD__(v104, v109))
          goto LABEL_129;
        if (v104 + v109 >= v85)
        {
          v110 = v85 < v109;
LABEL_92:
          if (v110)
            v82 = v94;
          goto LABEL_94;
        }
LABEL_86:
        if ((v105 & 1) != 0)
          goto LABEL_124;
        v113 = &v79[16 * v82];
        v115 = *(_QWORD *)v113;
        v114 = *((_QWORD *)v113 + 1);
        v93 = __OFSUB__(v114, v115);
        v116 = v114 - v115;
        if (v93)
          goto LABEL_127;
        if (v116 < v104)
          goto LABEL_14;
LABEL_94:
        v121 = v82 - 1;
        if (v82 - 1 >= v28)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!*v147)
          goto LABEL_142;
        v122 = v26;
        v123 = &v79[16 * v121];
        v124 = *(_QWORD *)v123;
        v125 = &v79[16 * v82];
        v126 = *((_QWORD *)v125 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(*v147 + *(_QWORD *)(v146 + 72) * *(_QWORD *)v123, *v147 + *(_QWORD *)(v146 + 72) * *(_QWORD *)v125, *v147 + *(_QWORD *)(v146 + 72) * v126, v145);
        if (v2)
          goto LABEL_114;
        if (v126 < v124)
          goto LABEL_117;
        if (v82 > *((_QWORD *)v122 + 2))
          goto LABEL_118;
        *(_QWORD *)v123 = v124;
        *(_QWORD *)&v79[16 * v121 + 8] = v126;
        v127 = *((_QWORD *)v122 + 2);
        if (v82 >= v127)
          goto LABEL_119;
        v26 = v122;
        v28 = v127 - 1;
        memmove(&v79[16 * v82], v125 + 16, 16 * (v127 - 1 - v82));
        *((_QWORD *)v122 + 2) = v127 - 1;
        if (v127 <= 2)
          goto LABEL_14;
      }
    }
    v28 = 1;
LABEL_14:
    v20 = v147[1];
    v27 = v154;
    if (v154 >= v20)
      goto LABEL_103;
  }
  if (__OFADD__(v29, v139))
    goto LABEL_139;
  if (v29 + v139 >= v20)
    v58 = v20;
  else
    v58 = v29 + v139;
  if (v58 >= v29)
  {
    if (v41 != v58)
    {
      v140 = v26;
      v137 = v2;
      v59 = v147;
      v60 = *(_QWORD *)(v146 + 72);
      v61 = v60 * (v41 - 1);
      v148 = v60;
      v62 = v41 * v60;
      v142 = v58;
      do
      {
        v64 = 0;
        v154 = v41;
        v149 = v62;
        v150 = v61;
        while (1)
        {
          v65 = *v59;
          v157 = v62 + v64;
          v158 = v29;
          v66 = v151;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v62 + v64 + v65, v151, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v67 = v61 + v64 + v65;
          v68 = v152;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v152, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v69 = v155;
          v70 = *(int *)(v155 + 48);
          v71 = v153;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v66, v153, type metadata accessor for ToolbarStorage.Entry);
          v159 = *(_QWORD *)(v66 + v70);
          *(_QWORD *)(v71 + v70) = v159;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, type metadata accessor for ToolbarStorage.Entry);
          v72 = *(int *)(v69 + 48);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, v71, type metadata accessor for ToolbarStorage.Entry);
          v73 = *(_QWORD *)(v68 + v72);
          *(_QWORD *)(v71 + v72) = v73;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          if (v159 >= v73)
            break;
          v74 = *v59;
          if (!*v59)
            goto LABEL_141;
          v62 = v149;
          v61 = v150;
          v75 = v74 + v150 + v64;
          outlined init with take of TableCellFormula(v74 + v149 + v64, v156, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of TableCellFormula(v156, v75, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v64 -= v148;
          v29 = v158 + 1;
          v63 = v154;
          if (v154 == v158 + 1)
            goto LABEL_48;
        }
        v63 = v154;
        v62 = v149;
        v61 = v150;
LABEL_48:
        v41 = v63 + 1;
        v61 += v148;
        v62 += v148;
        v29 = v144;
      }
      while (v41 != v142);
      v41 = v142;
      v2 = v137;
      v26 = v140;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  char **v1;
  char **v2;
  uint64_t *v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  Swift::Int v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  void **v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t (*v56)(void);
  unint64_t v57;
  char v58;
  Swift::Int v59;
  uint64_t v60;
  id v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  _QWORD *v65;
  void **v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::Int v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::Int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  char *v144;
  Swift::Int v145;
  Swift::Int v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  id v150;
  char *v151;
  char *v152;
  char *v153;
  void *v154;
  uint64_t v155;
  int64_t v156;
  id v157;
  char *v158;
  _QWORD *v159;
  char **v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  _QWORD *v165;
  id v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  id v171;
  _QWORD *v172;
  void *v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  unint64_t v181;
  char v182;
  Swift::Int v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v187;
  uint64_t (*v188)(void);
  Swift::Int v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  id v194;
  char *v195;
  uint64_t v196;
  int64_t v197;
  _QWORD *v198;
  void **v199;
  uint64_t v200;
  void *v201;
  unint64_t v202;
  unint64_t v203;
  id v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  id v209;
  void *v210;
  uint64_t v211;
  void *v212;
  unint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  void *v221;
  uint64_t v222;
  id v223;
  void **v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  id v228;
  void *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  unint64_t v236;
  uint64_t *v237;
  unint64_t v238;
  Swift::Int v239;
  uint64_t *v240;
  uint64_t v241;
  Swift::Int v242;
  Swift::Int v243;
  Swift::Int v244;
  uint64_t *v245;
  Swift::Int v246;
  Swift::Int v247;
  unint64_t v248;
  uint64_t *v249;
  Swift::Int v250;
  _QWORD *v251;
  char *v252;
  char *v253;
  _OWORD *v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  char *v258;
  char *v259;
  char **v260;
  char **v261;
  Swift::Int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  Swift::Int v266;
  Swift::Int v267;
  Swift::Int v268;
  _BYTE *v269;
  uint64_t *__dst;
  char *v271;
  char *v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  unsigned int v277;
  unsigned __int16 v278;
  char v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  int v286;
  __int16 v287;
  unsigned __int8 v288;
  uint64_t v289;

  v2 = v1;
  v3 = a1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, v3);
      return;
    }
    goto LABEL_283;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_292;
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  v262 = v4;
  v242 = v5;
  if (v4 < 2)
  {
    __dst = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v4 != 1)
    {
      v94 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v241 = MEMORY[0x1E0DEE9D8];
      if (v94 < 2)
        goto LABEL_258;
      goto LABEL_245;
    }
    v241 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for (offset: Int, element: AccessibilityNode)();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = v8;
    v241 = v9;
    __dst = (uint64_t *)(v9 + 32);
  }
  v10 = 0;
  v240 = v3;
  v11 = *v3;
  v255 = MEMORY[0x1E0DEE9B8] + 8;
  v12 = v262;
  v289 = *v3;
  while (1)
  {
    v13 = v10 + 1;
    v250 = v10;
    if (v10 + 1 >= v12)
    {
      v59 = v10 + 1;
      goto LABEL_95;
    }
    v14 = (uint64_t *)(v11 + 16 * v13);
    v16 = *v14;
    v15 = (void *)v14[1];
    *(_QWORD *)&v282 = v16;
    *((_QWORD *)&v282 + 1) = v15;
    v17 = (_QWORD *)(v11 + 16 * v10);
    v18 = (void *)v17[1];
    *(_QWORD *)&v273 = *v17;
    *((_QWORD *)&v273 + 1) = v18;
    v19 = v15;
    v20 = v18;
    v256 = closure #1 in Sequence<>.sortedSupplementaryItems()((uint64_t *)&v282, (uint64_t *)&v273);
    if (v2)
    {
      swift_bridgeObjectRelease();

      goto LABEL_259;
    }

    v21 = v10 + 2;
    v11 = v289;
    v258 = v7;
    if (v10 + 2 >= v262)
    {
      v58 = v256;
      v59 = v10 + 2;
LABEL_81:
      if ((v58 & 1) == 0)
        goto LABEL_95;
LABEL_84:
      if (v59 >= v10)
      {
        if (v10 < v59)
        {
          v84 = 16 * v59;
          v85 = 16 * v10;
          v86 = v59;
          v87 = v10;
          while (1)
          {
            if (v87 != --v86)
            {
              if (!v11)
                goto LABEL_289;
              v88 = v11 + v84;
              v89 = *(_QWORD *)(v11 + v85);
              v90 = *(_QWORD *)(v11 + v85 + 8);
              *(_OWORD *)(v11 + v85) = *(_OWORD *)(v11 + v84 - 16);
              *(_QWORD *)(v88 - 16) = v89;
              *(_QWORD *)(v88 - 8) = v90;
            }
            ++v87;
            v84 -= 16;
            v85 += 16;
            if (v87 >= v86)
              goto LABEL_95;
          }
        }
        goto LABEL_95;
      }
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
      goto LABEL_290;
    }
    while (1)
    {
      v22 = (uint64_t *)(v11 + 16 * v21);
      v23 = (char *)v22[1];
      v265 = *v22;
      v268 = v21;
      v24 = (uint64_t *)(v11 + 16 * v13);
      v25 = (char *)v24[1];
      v263 = *v24;
      v26 = (uint64_t *)&v23[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      v27 = *(_QWORD *)&v23[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      v271 = v23;
      if (v27)
      {
        v28 = (id)v26[1];
        v29 = v23;
        v30 = v25;
        outlined copy of AccessibilityAttachment?(v27, v28);
      }
      else
      {
        v31 = &v23[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v32 = *(_QWORD *)v31;
        v33 = *(_QWORD *)(*(_QWORD *)v31 + 16);
        v252 = v25;
        if (v33)
        {
          *(_QWORD *)&v273 = MEMORY[0x1E0DEE9D8];
          v34 = v23;
          v35 = v25;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
          v36 = (_QWORD *)v273;
          v37 = (void **)(v32 + 40);
          do
          {
            v39 = (uint64_t)*(v37 - 1);
            v38 = *v37;
            *(_QWORD *)&v273 = v36;
            v41 = v36[2];
            v40 = v36[3];
            swift_bridgeObjectRetain();
            v42 = v38;
            if (v41 >= v40 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1);
              v36 = (_QWORD *)v273;
            }
            v36[2] = v41 + 1;
            v43 = &v36[2 * v41];
            v43[4] = v39;
            v43[5] = v38;
            v37 += 5;
            --v33;
          }
          while (v33);
          swift_bridgeObjectRelease();
          v2 = 0;
          v10 = v250;
          v23 = v271;
        }
        else
        {
          v44 = v23;
          v45 = v25;
          v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        static AccessibilityAttachment.combine(_:)(v36, (uint64_t *)&v273);
        swift_bridgeObjectRelease();
        v46 = (void *)*((_QWORD *)&v273 + 1);
        v27 = v273;
        v47 = *v26;
        v48 = (void *)v26[1];
        *v26 = v273;
        v26[1] = (uint64_t)v46;
        v28 = v46;
        swift_bridgeObjectRetain();
        outlined consume of AccessibilityAttachment?(v47, v48);
        v23[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
        v25 = v252;
      }

      v7 = v258;
      if (*(_QWORD *)(v27 + 16)
        && (v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v50 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v27 + 56) + 40 * v49, (uint64_t)&v273);
        v51 = v25;
        v52 = *((_QWORD *)&v274 + 1);
        v53 = v275;
        __swift_project_boxed_opaque_existential_1(&v273, *((uint64_t *)&v274 + 1));
        v54 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v53 + 8);
        swift_bridgeObjectRetain();
        v55 = v52;
        v25 = v51;
        v54(&v280, v55, v53);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      }
      else
      {
        v280 = 0u;
        v281 = 0u;
        swift_bridgeObjectRetain();
      }
      v56 = MEMORY[0x1E0DEB940];
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v255, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))v56);
      if (swift_dynamicCast())
      {
        outlined init with take of AccessibilityScrollableContext?((uint64_t)&v273, (uint64_t)&v282);
      }
      else
      {
        v275 = 0u;
        v276 = 0u;
        v273 = 0u;
        v274 = 0u;
        v278 = 0;
        v277 = 0;
        v279 = -2;
        v282 = 0u;
        v283 = 0u;
        v284 = 0u;
        v285 = 0u;
        v287 = 0;
        v286 = 0;
        v288 = -1;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v273, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityScrollableContext??);
      }
      swift_bridgeObjectRelease_n();
      if (v288 == 255)
        goto LABEL_35;
      outlined init with copy of AccessibilityScrollableContext((uint64_t)&v282, (uint64_t)&v273);
      if (v279)
        break;
      swift_release();
      v57 = v277 | ((unint64_t)v278 << 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);
      if ((v57 & 0xFF00000000) == 0x200000000)
        goto LABEL_39;
      v248 = v57;
      v60 = *(_QWORD *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      if (v60)
      {
        v61 = *(id *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        outlined copy of AccessibilityAttachment?(*(_QWORD *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment], v61);
      }
      else
      {
        v245 = (uint64_t *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v253 = v25;
        v62 = &v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v63 = *(_QWORD *)v62;
        v64 = *(_QWORD *)(*(_QWORD *)v62 + 16);
        if (v64)
        {
          *(_QWORD *)&v273 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
          v65 = (_QWORD *)v273;
          v66 = (void **)(v63 + 40);
          do
          {
            v68 = (uint64_t)*(v66 - 1);
            v67 = *v66;
            *(_QWORD *)&v273 = v65;
            v69 = v65[2];
            v70 = v65[3];
            swift_bridgeObjectRetain();
            v71 = v67;
            if (v69 >= v70 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v69 + 1, 1);
              v65 = (_QWORD *)v273;
            }
            v65[2] = v69 + 1;
            v72 = &v65[2 * v69];
            v72[4] = v68;
            v72[5] = v67;
            v66 += 5;
            --v64;
          }
          while (v64);
          swift_bridgeObjectRelease();
          v2 = 0;
          v10 = v250;
        }
        else
        {
          v65 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        static AccessibilityAttachment.combine(_:)(v65, (uint64_t *)&v273);
        swift_bridgeObjectRelease();
        v73 = (void *)*((_QWORD *)&v273 + 1);
        v60 = v273;
        v74 = *v245;
        v75 = (void *)v245[1];
        *v245 = v273;
        v245[1] = (uint64_t)v73;
        v61 = v73;
        swift_bridgeObjectRetain();
        outlined consume of AccessibilityAttachment?(v74, v75);
        v25 = v253;
        v253[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
        v7 = v258;
      }

      if (*(_QWORD *)(v60 + 16)
        && (v76 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v77 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v60 + 56) + 40 * v76, (uint64_t)&v273);
        v78 = v25;
        v79 = *((_QWORD *)&v274 + 1);
        v80 = v275;
        __swift_project_boxed_opaque_existential_1(&v273, *((uint64_t *)&v274 + 1));
        v81 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v80 + 8);
        swift_bridgeObjectRetain();
        v82 = v79;
        v25 = v78;
        v7 = v258;
        v81(&v280, v82, v80);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      }
      else
      {
        v280 = 0u;
        v281 = 0u;
        swift_bridgeObjectRetain();
      }
      if (swift_dynamicCast())
      {
        outlined init with take of AccessibilityScrollableContext?((uint64_t)&v273, (uint64_t)&v282);
      }
      else
      {
        v275 = 0u;
        v276 = 0u;
        v273 = 0u;
        v274 = 0u;
        v278 = 0;
        v277 = 0;
        v279 = -2;
        v282 = 0u;
        v283 = 0u;
        v284 = 0u;
        v285 = 0u;
        v287 = 0;
        v286 = 0;
        v288 = -1;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v273, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityScrollableContext??);
      }
      swift_bridgeObjectRelease_n();
      if (v288 == 255)
      {
LABEL_35:
        outlined destroy of TableRowID?((uint64_t)&v282, (uint64_t)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        goto LABEL_39;
      }
      outlined init with copy of AccessibilityScrollableContext((uint64_t)&v282, (uint64_t)&v273);
      if (v279)
        break;
      swift_release();
      v83 = v277 | ((unint64_t)v278 << 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);

      v13 = v268;
      if ((v83 & 0xFF00000000) == 0x200000000 || (_DWORD)v248 != (_DWORD)v83)
        goto LABEL_40;
      if ((v248 & 0x100000000) != 0)
      {
        v11 = v289;
        if ((v83 & 0x100000000) == 0)
        {
          if ((v256 & 1) == 0)
          {
            v59 = v268;
            goto LABEL_95;
          }
          v58 = 1;
          goto LABEL_41;
        }
LABEL_72:
        if ((v248 & 0x10000000000) != 0)
        {
          if ((v83 & 0x10000000000) != 0)
            goto LABEL_40;
          if ((v256 & 1) != 0)
          {
            v59 = v268;
            v11 = v289;
            goto LABEL_84;
          }
          v58 = 0;
          v11 = v289;
        }
        else
        {
          if ((v83 & 0x10000000000) == 0)
            goto LABEL_40;
          if ((v256 & 1) == 0)
          {
            v59 = v268;
            v11 = v289;
            goto LABEL_95;
          }
          v58 = 1;
          v11 = v289;
        }
LABEL_41:
        v59 = v13 + 1;
        v21 = v13 + 1;
        if (v13 + 1 >= v262)
          goto LABEL_81;
      }
      else
      {
        v11 = v289;
        if ((v83 & 0x100000000) == 0)
          goto LABEL_72;
        if ((v256 & 1) != 0)
        {
          v59 = v268;
          goto LABEL_84;
        }
        v59 = v268 + 1;
        v21 = v268 + 1;
        if (v268 + 1 >= v262)
          goto LABEL_95;
      }
    }
    outlined destroy of AccessibilityScrollableContext((uint64_t)&v273);
    outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);
LABEL_39:

    v13 = v268;
LABEL_40:
    v58 = v256;
    v11 = v289;
    if (((v256 ^ (v265 < v263)) & 1) == 0)
      goto LABEL_41;
    v59 = v13;
    if ((v256 & 1) != 0)
      goto LABEL_84;
LABEL_95:
    if (v59 < v262)
    {
      if (__OFSUB__(v59, v10))
        goto LABEL_284;
      if (v59 - v10 < v242)
        break;
    }
LABEL_103:
    if (v59 < v10)
      goto LABEL_282;
LABEL_104:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    v93 = *((_QWORD *)v7 + 2);
    v92 = *((_QWORD *)v7 + 3);
    v94 = v93 + 1;
    v11 = v289;
    if (v93 >= v92 >> 1)
    {
      v230 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v7);
      v11 = v289;
      v7 = v230;
    }
    *((_QWORD *)v7 + 2) = v94;
    v95 = v7 + 32;
    v96 = &v7[16 * v93 + 32];
    *(_QWORD *)v96 = v10;
    *((_QWORD *)v96 + 1) = v59;
    v266 = v59;
    if (v93)
    {
      while (1)
      {
        v97 = v94 - 1;
        if (v94 >= 4)
        {
          v102 = &v95[16 * v94];
          v103 = *((_QWORD *)v102 - 8);
          v104 = *((_QWORD *)v102 - 7);
          v108 = __OFSUB__(v104, v103);
          v105 = v104 - v103;
          if (v108)
            goto LABEL_267;
          v107 = *((_QWORD *)v102 - 6);
          v106 = *((_QWORD *)v102 - 5);
          v108 = __OFSUB__(v106, v107);
          v100 = v106 - v107;
          v101 = v108;
          if (v108)
            goto LABEL_268;
          v109 = v94 - 2;
          v110 = &v95[16 * v94 - 32];
          v112 = *(_QWORD *)v110;
          v111 = *((_QWORD *)v110 + 1);
          v108 = __OFSUB__(v111, v112);
          v113 = v111 - v112;
          if (v108)
            goto LABEL_270;
          v108 = __OFADD__(v100, v113);
          v114 = v100 + v113;
          if (v108)
            goto LABEL_273;
          if (v114 >= v105)
          {
            v132 = &v95[16 * v97];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v108 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v108)
              goto LABEL_277;
            v125 = v100 < v135;
            goto LABEL_140;
          }
        }
        else
        {
          if (v94 != 3)
          {
            v126 = *((_QWORD *)v7 + 4);
            v127 = *((_QWORD *)v7 + 5);
            v108 = __OFSUB__(v127, v126);
            v119 = v127 - v126;
            v120 = v108;
            goto LABEL_134;
          }
          v99 = *((_QWORD *)v7 + 4);
          v98 = *((_QWORD *)v7 + 5);
          v108 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          v101 = v108;
        }
        if ((v101 & 1) != 0)
          goto LABEL_269;
        v109 = v94 - 2;
        v115 = &v95[16 * v94 - 32];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v118 = __OFSUB__(v116, v117);
        v119 = v116 - v117;
        v120 = v118;
        if (v118)
          goto LABEL_272;
        v121 = &v95[16 * v97];
        v123 = *(_QWORD *)v121;
        v122 = *((_QWORD *)v121 + 1);
        v108 = __OFSUB__(v122, v123);
        v124 = v122 - v123;
        if (v108)
          goto LABEL_275;
        if (__OFADD__(v119, v124))
          goto LABEL_276;
        if (v119 + v124 >= v100)
        {
          v125 = v100 < v124;
LABEL_140:
          if (v125)
            v97 = v109;
          goto LABEL_142;
        }
LABEL_134:
        if ((v120 & 1) != 0)
          goto LABEL_271;
        v128 = &v95[16 * v97];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v108 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v108)
          goto LABEL_274;
        if (v131 < v119)
          goto LABEL_151;
LABEL_142:
        v136 = v97 - 1;
        if (v97 - 1 >= v94)
          goto LABEL_263;
        if (!v11)
          goto LABEL_288;
        v137 = &v95[16 * v136];
        v138 = *(_QWORD *)v137;
        v139 = &v95[16 * v97];
        v140 = *((_QWORD *)v139 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v11 + 16 * *(_QWORD *)v137), (uint64_t *)(v11 + 16 * *(_QWORD *)v139), v11 + 16 * v140, __dst);
        if (v2)
          goto LABEL_258;
        if (v140 < v138)
          goto LABEL_264;
        if (v97 > *((_QWORD *)v7 + 2))
          goto LABEL_265;
        *(_QWORD *)v137 = v138;
        *(_QWORD *)&v95[16 * v136 + 8] = v140;
        v141 = *((_QWORD *)v7 + 2);
        if (v97 >= v141)
          goto LABEL_266;
        v94 = v141 - 1;
        memmove(&v95[16 * v97], v139 + 16, 16 * (v141 - 1 - v97));
        *((_QWORD *)v7 + 2) = v141 - 1;
        v11 = v289;
        if (v141 <= 2)
          goto LABEL_151;
      }
    }
    v94 = 1;
LABEL_151:
    v12 = v262;
    v10 = v266;
    if (v266 >= v262)
      goto LABEL_257;
  }
  v91 = v10 + v242;
  if (__OFADD__(v10, v242))
    goto LABEL_285;
  if (v91 >= v262)
    v91 = v262;
  if (v91 < v10)
  {
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }
  if (v59 == v91)
    goto LABEL_103;
  while (2)
  {
    v239 = v91;
    v142 = (uint64_t *)(v11 + 16 * v59);
    v143 = *v142;
    v144 = (char *)v142[1];
    v145 = v59;
    v259 = v7;
    v267 = v59;
    while (2)
    {
      v264 = v143;
      v146 = v145 - 1;
      v147 = (_QWORD *)(v11 + 16 * (v145 - 1));
      v257 = *v147;
      v254 = v147;
      v148 = (char *)v147[1];
      v251 = v147 + 1;
      v149 = *(_QWORD *)&v144[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      v269 = v144;
      v272 = v148;
      if (v149)
      {
        v150 = *(id *)&v144[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        v151 = v144;
        v152 = v148;
        outlined copy of AccessibilityAttachment?(v149, v150);
        goto LABEL_175;
      }
      v246 = v145;
      v249 = (uint64_t *)&v144[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      v243 = v145 - 1;
      v260 = v2;
      v153 = &v144[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      v154 = v144;
      swift_beginAccess();
      v155 = *(_QWORD *)v153;
      v156 = *(_QWORD *)(*(_QWORD *)v153 + 16);
      if (v156)
      {
        *(_QWORD *)&v273 = MEMORY[0x1E0DEE9D8];
        v157 = v154;
        v158 = v148;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v156, 0);
        v159 = (_QWORD *)v273;
        v160 = (char **)(v155 + 40);
        do
        {
          v161 = (uint64_t)*(v160 - 1);
          v7 = *v160;
          *(_QWORD *)&v273 = v159;
          v163 = v159[2];
          v162 = v159[3];
          swift_bridgeObjectRetain();
          v164 = v7;
          if (v163 >= v162 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v162 > 1), v163 + 1, 1);
            v159 = (_QWORD *)v273;
          }
          v159[2] = v163 + 1;
          v165 = &v159[2 * v163];
          v165[4] = v161;
          v165[5] = v7;
          v160 += 5;
          --v156;
        }
        while (v156);
        swift_bridgeObjectRelease();
      }
      else
      {
        v166 = v154;
        v167 = v148;
        v159 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v168 = v159[2];
      v169 = v168 - 1;
      v2 = v260;
      if (v168 == 1)
      {
        v170 = (void *)v159[5];
        *(_QWORD *)&v273 = v159[4];
        *((_QWORD *)&v273 + 1) = v170;
        v171 = v170;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v10 = v250;
        goto LABEL_174;
      }
      v10 = v250;
      if (!v168)
      {
        AccessibilityAttachment.init()();
        swift_bridgeObjectRelease();
        goto LABEL_174;
      }
      v172 = &v159[2 * v169];
      v94 = v172[4];
      v173 = (void *)v172[5];
      *(_QWORD *)&v280 = v94;
      *((_QWORD *)&v280 + 1) = v173;
      v174 = v173;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v2 = (char **)&v159[2 * v168 + 1];
      v175 = v168 - 2;
      while (2)
      {
        if (v175 >= v169)
        {
          __break(1u);
LABEL_257:
          v3 = v240;
          if (v94 < 2)
          {
LABEL_258:
            swift_bridgeObjectRelease();
LABEL_259:
            *(_QWORD *)(v241 + 16) = 0;
            swift_bridgeObjectRelease();
            return;
          }
LABEL_245:
          v231 = *v3;
          while (1)
          {
            v232 = v94 - 2;
            if (v94 < 2)
              goto LABEL_278;
            if (!v231)
              goto LABEL_291;
            v233 = *(_QWORD *)&v7[16 * v232 + 32];
            v234 = *(_QWORD *)&v7[16 * v94 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v231 + 16 * v233), (uint64_t *)(v231 + 16 * *(_QWORD *)&v7[16 * v94 + 16]), v231 + 16 * v234, __dst);
            if (v2)
              goto LABEL_258;
            if (v234 < v233)
              goto LABEL_279;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
            if (v232 >= *((_QWORD *)v7 + 2))
              goto LABEL_280;
            v235 = &v7[16 * v232 + 32];
            *(_QWORD *)v235 = v233;
            *((_QWORD *)v235 + 1) = v234;
            v236 = *((_QWORD *)v7 + 2);
            if (v94 > v236)
              goto LABEL_281;
            memmove(&v7[16 * v94 + 16], &v7[16 * v94 + 32], 16 * (v236 - v94));
            *((_QWORD *)v7 + 2) = v236 - 1;
            v94 = v236 - 1;
            if (v236 <= 2)
              goto LABEL_258;
          }
        }
        v176 = (uint64_t)*(v2 - 1);
        v7 = *v2;
        *(_QWORD *)&v273 = v176;
        v177 = v7;
        swift_bridgeObjectRetain();
        AccessibilityProperties.merge(with:)((uint64_t *)&v273);
        v273 = v280;
        v94 = AccessibilityAttachment.platformElement.getter();

        if (!v94)
        {
          *(_QWORD *)&v273 = v176;
          *((_QWORD *)&v273 + 1) = v7;
          v94 = (unint64_t)&v273;
          if (AccessibilityAttachment.platformElement.getter())
          {
            v94 = (unint64_t)&v280;
            AccessibilityAttachment.platformElement.setter();
          }
        }

        swift_bridgeObjectRelease();
        v2 -= 2;
        if (--v175 != -1)
          continue;
        break;
      }
      swift_bridgeObjectRelease_n();
      v273 = v280;
      v2 = v260;
LABEL_174:
      v178 = (void *)*((_QWORD *)&v273 + 1);
      v149 = v273;
      v179 = *v249;
      v180 = (void *)v249[1];
      *v249 = v273;
      v249[1] = (uint64_t)v178;
      v150 = v178;
      swift_bridgeObjectRetain();
      outlined consume of AccessibilityAttachment?(v179, v180);
      v269[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
      v7 = v259;
      v146 = v243;
      v145 = v246;
LABEL_175:

      v261 = v2;
      if (*(_QWORD *)(v149 + 16)
        && (v181 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v182 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v149 + 56) + 40 * v181, (uint64_t)&v273);
        v183 = v145;
        v184 = *((_QWORD *)&v274 + 1);
        v185 = v275;
        __swift_project_boxed_opaque_existential_1(&v273, *((uint64_t *)&v274 + 1));
        v186 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v185 + 8);
        swift_bridgeObjectRetain();
        v187 = v184;
        v145 = v183;
        v186(&v280, v187, v185);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      }
      else
      {
        v280 = 0u;
        v281 = 0u;
        swift_bridgeObjectRetain();
      }
      v188 = MEMORY[0x1E0DEB940];
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))v188);
      if (swift_dynamicCast())
      {
        outlined init with take of AccessibilityScrollableContext?((uint64_t)&v273, (uint64_t)&v282);
      }
      else
      {
        v275 = 0u;
        v276 = 0u;
        v273 = 0u;
        v274 = 0u;
        v278 = 0;
        v277 = 0;
        v279 = -2;
        v282 = 0u;
        v283 = 0u;
        v284 = 0u;
        v285 = 0u;
        v287 = 0;
        v286 = 0;
        v288 = -1;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v273, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityScrollableContext??);
      }
      swift_bridgeObjectRelease_n();
      if (v288 == 255)
      {
        outlined destroy of TableRowID?((uint64_t)&v282, (uint64_t)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);

        v2 = v261;
        v11 = v289;
        v189 = v267;
        goto LABEL_189;
      }
      outlined init with copy of AccessibilityScrollableContext((uint64_t)&v282, (uint64_t)&v273);
      v189 = v267;
      if (v279)
      {
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v273);
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);
        goto LABEL_187;
      }
      swift_release();
      v190 = v277 | ((unint64_t)v278 << 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);
      if ((v190 & 0xFF00000000) == 0x200000000)
      {
LABEL_187:

        v2 = v261;
LABEL_188:
        v11 = v289;
        goto LABEL_189;
      }
      v238 = v190;
      v247 = v145;
      v193 = *(_QWORD *)&v272[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      if (v193)
      {
        v194 = *(id *)&v272[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        outlined copy of AccessibilityAttachment?(*(_QWORD *)&v272[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment], v194);
        goto LABEL_209;
      }
      v237 = (uint64_t *)&v272[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      v244 = v146;
      v195 = &v272[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      v196 = *(_QWORD *)v195;
      v197 = *(_QWORD *)(*(_QWORD *)v195 + 16);
      if (v197)
      {
        *(_QWORD *)&v273 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v197, 0);
        v198 = (_QWORD *)v273;
        v199 = (void **)(v196 + 40);
        do
        {
          v200 = (uint64_t)*(v199 - 1);
          v201 = *v199;
          *(_QWORD *)&v273 = v198;
          v203 = v198[2];
          v202 = v198[3];
          swift_bridgeObjectRetain();
          v204 = v201;
          if (v203 >= v202 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v202 > 1), v203 + 1, 1);
            v198 = (_QWORD *)v273;
          }
          v198[2] = v203 + 1;
          v205 = &v198[2 * v203];
          v205[4] = v200;
          v205[5] = v201;
          v199 += 5;
          --v197;
        }
        while (v197);
        swift_bridgeObjectRelease();
      }
      else
      {
        v198 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v206 = v198[2];
      v207 = v206 - 1;
      if (v206 == 1)
      {
        v208 = (void *)v198[5];
        *(_QWORD *)&v273 = v198[4];
        *((_QWORD *)&v273 + 1) = v208;
        v209 = v208;
        swift_bridgeObjectRetain();
        goto LABEL_207;
      }
      if (!v206)
      {
        AccessibilityAttachment.init()();
LABEL_207:
        swift_bridgeObjectRelease();
        goto LABEL_208;
      }
      v220 = &v198[2 * v207];
      v222 = v220[4];
      v221 = (void *)v220[5];
      *(_QWORD *)&v280 = v222;
      *((_QWORD *)&v280 + 1) = v221;
      v223 = v221;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v224 = (void **)&v198[2 * v206 + 1];
      v225 = v206 - 2;
      while (2)
      {
        if (v225 >= v207)
        {
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
          goto LABEL_286;
        }
        v226 = (uint64_t)*(v224 - 1);
        v227 = *v224;
        *(_QWORD *)&v273 = v226;
        v228 = v227;
        swift_bridgeObjectRetain();
        AccessibilityProperties.merge(with:)((uint64_t *)&v273);
        v273 = v280;
        v229 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v229)
        {
          *(_QWORD *)&v273 = v226;
          *((_QWORD *)&v273 + 1) = v227;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }

        swift_bridgeObjectRelease();
        v224 -= 2;
        if (--v225 != -1)
          continue;
        break;
      }
      swift_bridgeObjectRelease_n();
      v273 = v280;
LABEL_208:
      v10 = v250;
      v210 = (void *)*((_QWORD *)&v273 + 1);
      v193 = v273;
      v211 = *v237;
      v212 = (void *)v237[1];
      *v237 = v273;
      v237[1] = (uint64_t)v210;
      v194 = v210;
      swift_bridgeObjectRetain();
      outlined consume of AccessibilityAttachment?(v211, v212);
      v272[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
      v7 = v259;
      v189 = v267;
      v146 = v244;
LABEL_209:

      if (*(_QWORD *)(v193 + 16)
        && (v213 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v214 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v193 + 56) + 40 * v213, (uint64_t)&v273);
        v215 = *((_QWORD *)&v274 + 1);
        v216 = v275;
        __swift_project_boxed_opaque_existential_1(&v273, *((uint64_t *)&v274 + 1));
        v217 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v216 + 8);
        swift_bridgeObjectRetain();
        v218 = v216;
        v189 = v267;
        v217(&v280, v215, v218);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
      }
      else
      {
        v280 = 0u;
        v281 = 0u;
        swift_bridgeObjectRetain();
      }
      if (swift_dynamicCast())
      {
        outlined init with take of AccessibilityScrollableContext?((uint64_t)&v273, (uint64_t)&v282);
      }
      else
      {
        v275 = 0u;
        v276 = 0u;
        v273 = 0u;
        v274 = 0u;
        v278 = 0;
        v277 = 0;
        v279 = -2;
        v282 = 0u;
        v283 = 0u;
        v284 = 0u;
        v285 = 0u;
        v287 = 0;
        v286 = 0;
        v288 = -1;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v273, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityScrollableContext??);
      }
      v2 = v261;
      swift_bridgeObjectRelease_n();
      if (v288 != 255)
      {
        outlined init with copy of AccessibilityScrollableContext((uint64_t)&v282, (uint64_t)&v273);
        v145 = v247;
        if (v279)
        {
          outlined destroy of AccessibilityScrollableContext((uint64_t)&v273);
          outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);

          goto LABEL_188;
        }
        swift_release();
        v219 = v277 | ((unint64_t)v278 << 32);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v273);
        outlined destroy of AccessibilityScrollableContext((uint64_t)&v282);

        if ((v219 & 0xFF00000000) == 0x200000000)
          goto LABEL_188;
        v11 = v289;
        v191 = v264;
        if ((_DWORD)v238 != (_DWORD)v219)
          goto LABEL_190;
        if ((v238 & 0x100000000) != 0)
        {
          if ((v219 & 0x100000000) == 0)
            goto LABEL_237;
        }
        else if ((v219 & 0x100000000) != 0)
        {
          goto LABEL_241;
        }
        if ((v238 & 0x10000000000) == 0)
        {
          if ((v219 & 0x10000000000) == 0)
            goto LABEL_240;
LABEL_237:
          if (!v289)
            goto LABEL_290;
LABEL_192:
          v192 = (uint64_t *)(v11 + 16 * v145);
          v143 = *v192;
          v144 = (char *)v192[1];
          *(_OWORD *)v192 = *v254;
          *(_QWORD *)v254 = v143;
          *v251 = v144;
          v145 = v146;
          if (v146 == v10)
            goto LABEL_241;
          continue;
        }
        if ((v219 & 0x10000000000) != 0)
        {
LABEL_240:
          if (v264 < v257)
            goto LABEL_191;
        }
        goto LABEL_241;
      }
      break;
    }
    outlined destroy of TableRowID?((uint64_t)&v282, (uint64_t)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);

    v11 = v289;
    v145 = v247;
LABEL_189:
    v191 = v264;
LABEL_190:
    if (v191 >= v257)
    {
LABEL_241:
      v59 = v189 + 1;
      v91 = v239;
      if (v59 != v239)
        continue;
      v59 = v239;
      if (v239 < v10)
        goto LABEL_282;
      goto LABEL_104;
    }
    break;
  }
LABEL_191:
  if (v11)
    goto LABEL_192;
LABEL_290:
  __break(1u);
LABEL_291:
  __break(1u);
LABEL_292:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void **v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t *v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t *v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  void *v33;
  Swift::Int v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  char *v105;
  char *v106;
  Swift::Int v107;
  Swift::Int v108;
  Swift::Int v109;
  Swift::Int v110;
  char *v111;
  uint64_t v112;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_133;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_141;
  v6 = v4;
  v101 = v2;
  if (v3 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v112 = MEMORY[0x1E0DEE9D8];
    v111 = (char *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_99:
      if (v13 >= 2)
      {
        v95 = *v101;
        do
        {
          v96 = v13 - 2;
          if (v13 < 2)
            goto LABEL_128;
          if (!v95)
            goto LABEL_140;
          v97 = *(_QWORD *)&v10[16 * v96 + 32];
          v98 = *(_QWORD *)&v10[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v95 + 8 * v97), (void **)(v95 + 8 * *(_QWORD *)&v10[16 * v13 + 16]), v95 + 8 * v98, v111);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          if (v96 >= *((_QWORD *)v10 + 2))
            goto LABEL_130;
          v99 = &v10[16 * v96 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v10 + 2);
          if (v13 > v100)
            goto LABEL_131;
          memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v100 - v13));
          *((_QWORD *)v10 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v112 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v111 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v112 = v9;
  }
  v11 = 0;
  v12 = *v2;
  v103 = *v2 + 16;
  v104 = v6;
  v102 = *v2 - 8;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v108 = v3;
  while (1)
  {
    v14 = v11++;
    v109 = v14;
    if (v11 < v3)
    {
      v105 = v10;
      v15 = *(void **)(v12 + 8 * v11);
      v16 = *(void **)(v12 + 8 * v14);
      swift_getObjectType();
      v17 = v15;
      v18 = v16;
      v19 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v18);

      v11 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v20 = (void **)(v103 + 8 * v14);
        while (1)
        {
          v22 = *(v20 - 1);
          v21 = *v20;
          swift_getObjectType();
          v23 = v21;
          v24 = v22;
          v25 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v24);

          if ((v19 == (id)-1) == (v25 != (id)-1))
            break;
          ++v11;
          ++v20;
          v3 = v108;
          if (v108 == v11)
          {
            v11 = v108;
            goto LABEL_22;
          }
        }
        v3 = v108;
LABEL_22:
        v14 = v109;
      }
      v10 = v105;
      if (v19 == (id)-1)
      {
        if (v11 < v14)
          goto LABEL_136;
        if (v14 < v11)
        {
          v26 = (uint64_t *)(v102 + 8 * v11);
          v27 = v11;
          v28 = v14;
          v29 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v28 != --v27)
            {
              if (!v12)
                goto LABEL_139;
              v30 = *v29;
              *v29 = *v26;
              *v26 = v30;
            }
            ++v28;
            --v26;
            ++v29;
          }
          while (v28 < v27);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_132;
      if (v11 - v14 < v104)
        break;
    }
LABEL_49:
    if (v11 < v14)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v42 = *((_QWORD *)v10 + 2);
    v41 = *((_QWORD *)v10 + 3);
    v13 = v42 + 1;
    if (v42 >= v41 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v43 = v10 + 32;
    v44 = &v10[16 * v42 + 32];
    *(_QWORD *)v44 = v14;
    *((_QWORD *)v44 + 1) = v11;
    if (v42)
    {
      v110 = v11;
      while (1)
      {
        v45 = v13 - 1;
        if (v13 >= 4)
        {
          v50 = &v43[16 * v13];
          v51 = *((_QWORD *)v50 - 8);
          v52 = *((_QWORD *)v50 - 7);
          v56 = __OFSUB__(v52, v51);
          v53 = v52 - v51;
          if (v56)
            goto LABEL_116;
          v55 = *((_QWORD *)v50 - 6);
          v54 = *((_QWORD *)v50 - 5);
          v56 = __OFSUB__(v54, v55);
          v48 = v54 - v55;
          v49 = v56;
          if (v56)
            goto LABEL_117;
          v57 = v13 - 2;
          v58 = &v43[16 * v13 - 32];
          v60 = *(_QWORD *)v58;
          v59 = *((_QWORD *)v58 + 1);
          v56 = __OFSUB__(v59, v60);
          v61 = v59 - v60;
          if (v56)
            goto LABEL_119;
          v56 = __OFADD__(v48, v61);
          v62 = v48 + v61;
          if (v56)
            goto LABEL_122;
          if (v62 >= v53)
          {
            v80 = &v43[16 * v45];
            v82 = *(_QWORD *)v80;
            v81 = *((_QWORD *)v80 + 1);
            v56 = __OFSUB__(v81, v82);
            v83 = v81 - v82;
            if (v56)
              goto LABEL_126;
            v73 = v48 < v83;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v74 = *((_QWORD *)v10 + 4);
            v75 = *((_QWORD *)v10 + 5);
            v56 = __OFSUB__(v75, v74);
            v67 = v75 - v74;
            v68 = v56;
            goto LABEL_81;
          }
          v47 = *((_QWORD *)v10 + 4);
          v46 = *((_QWORD *)v10 + 5);
          v56 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          v49 = v56;
        }
        if ((v49 & 1) != 0)
          goto LABEL_118;
        v57 = v13 - 2;
        v63 = &v43[16 * v13 - 32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v66 = __OFSUB__(v64, v65);
        v67 = v64 - v65;
        v68 = v66;
        if (v66)
          goto LABEL_121;
        v69 = &v43[16 * v45];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v56 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v56)
          goto LABEL_124;
        if (__OFADD__(v67, v72))
          goto LABEL_125;
        if (v67 + v72 >= v48)
        {
          v73 = v48 < v72;
LABEL_87:
          if (v73)
            v45 = v57;
          goto LABEL_89;
        }
LABEL_81:
        if ((v68 & 1) != 0)
          goto LABEL_120;
        v76 = &v43[16 * v45];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v56 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v56)
          goto LABEL_123;
        if (v79 < v67)
          goto LABEL_14;
LABEL_89:
        v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v85 = v12;
        if (!v12)
          goto LABEL_138;
        v86 = v10;
        v87 = &v43[16 * v84];
        v88 = *(_QWORD *)v87;
        v89 = v43;
        v90 = v45;
        v91 = &v43[16 * v45];
        v92 = *((_QWORD *)v91 + 1);
        v93 = v85;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v85 + 8 * *(_QWORD *)v87), (void **)(v85 + 8 * *(_QWORD *)v91), v85 + 8 * v92, v111);
        if (v1)
          goto LABEL_110;
        if (v92 < v88)
          goto LABEL_113;
        if (v90 > *((_QWORD *)v86 + 2))
          goto LABEL_114;
        *(_QWORD *)v87 = v88;
        *(_QWORD *)&v89[16 * v84 + 8] = v92;
        v94 = *((_QWORD *)v86 + 2);
        if (v90 >= v94)
          goto LABEL_115;
        v10 = v86;
        v13 = v94 - 1;
        memmove(v91, v91 + 16, 16 * (v94 - 1 - v90));
        v43 = v89;
        *((_QWORD *)v86 + 2) = v94 - 1;
        v12 = v93;
        v11 = v110;
        if (v94 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v3 = v108;
    if (v11 >= v108)
      goto LABEL_99;
  }
  if (__OFADD__(v14, v104))
    goto LABEL_134;
  if (v14 + v104 >= v3)
    v31 = v3;
  else
    v31 = v14 + v104;
  if (v31 >= v14)
  {
    if (v11 != v31)
    {
      v106 = v10;
      v107 = v31;
      v32 = v102 + 8 * v11;
      do
      {
        v33 = *(void **)(v12 + 8 * v11);
        v34 = v14;
        v35 = v32;
        do
        {
          v36 = *(void **)v35;
          swift_getObjectType();
          v37 = v33;
          v38 = v36;
          v39 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v38);

          if (v39 != (id)-1)
            break;
          if (!v12)
            goto LABEL_137;
          v40 = *(void **)v35;
          v33 = *(void **)(v35 + 8);
          *(_QWORD *)v35 = v33;
          *(_QWORD *)(v35 + 8) = v40;
          v35 -= 8;
          ++v34;
        }
        while (v11 != v34);
        ++v11;
        v32 += 8;
        v14 = v109;
      }
      while (v11 != v107);
      v11 = v107;
      v10 = v106;
    }
    goto LABEL_49;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t partial apply for closure #1 in ToolbarProxy.count(in:placement:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ToolbarProxy.count(in:placement:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_18786DDC4()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of WeakBox<UIBarButtonItem>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>)
  {
    type metadata accessor for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>);
  }
}

void type metadata accessor for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>);
  }
}

ValueMetadata *type metadata accessor for ToolbarProxy.Value()
{
  return &type metadata for ToolbarProxy.Value;
}

uint64_t type metadata accessor for BarEdgeReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BarEdgeReader);
}

uint64_t getEnumTagSinglePayload for ToolbarReader(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18786DFA0 + 4 * byte_187C66330[v10]))();
  }
}

void storeEnumTagSinglePayload for ToolbarReader(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18786E118()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18786E190);
}

void sub_18786E120(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18786E128);
  JUMPOUT(0x18786E190);
}

void sub_18786E168()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18786E190);
}

void sub_18786E170()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18786E190);
}

uint64_t sub_18786E178(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18786E190);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18786E18CLL);
    JUMPOUT(0x18786E184);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

_BYTE *initializeWithCopy for BarItemModifier(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

_BYTE *assignWithCopy for BarItemModifier(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

_BYTE *initializeWithTake for BarItemModifier(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

_BYTE *assignWithTake for BarItemModifier(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for BarItemModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[16])
    return (*(_DWORD *)a1 + 254);
  if (*a1 <= 2u)
    v3 = 2;
  else
    v3 = *a1;
  v4 = v3 - 3;
  if (*a1 < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

void *type metadata accessor for BarItemModifier()
{
  return &unk_1E1B178A0;
}

uint64_t sub_18786E2BC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>);
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>();
    type metadata accessor for ModifiedContent<Divider, _PaddingLayout>?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?));
  }
}

void type metadata accessor for ModifiedContent<Divider, _PaddingLayout>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Divider, _PaddingLayout>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, _PaddingLayout>, (uint64_t)&type metadata for Divider, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, _PaddingLayout>?);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)> and conformance TupleView<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in BarItemModifier()
{
  return &protocol witness table for BarItemModifier;
}

_UNKNOWN **base witness table accessor for View in ToolbarReader<A, B>()
{
  return &protocol witness table for ToolbarReader<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarScopeModifier()
{
  return &protocol witness table for ToolbarScopeModifier;
}

_UNKNOWN **base witness table accessor for View in BarEdgeReader<A>()
{
  return &protocol witness table for BarEdgeReader<A>;
}

unint64_t lazy protocol witness table accessor for type ToolbarScopeModifier and conformance ToolbarScopeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarScopeModifier and conformance ToolbarScopeModifier;
  if (!lazy protocol witness table cache variable for type ToolbarScopeModifier and conformance ToolbarScopeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarScopeModifier, &type metadata for ToolbarScopeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarScopeModifier and conformance ToolbarScopeModifier);
  }
  return result;
}

void type metadata accessor for ToolbarReader.ToolbarConfiguration()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E0CE5CA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5CA8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PreferenceValueAttribute<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, MEMORY[0x1E0CE5CA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5CA8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, MEMORY[0x1E0CE5CA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5CA8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PreferenceValueAttribute<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, MEMORY[0x1E0CE5CA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5CA8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

void type metadata accessor for ToolbarReader.ApplyUpdatesToExternalTarget()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ToolbarReader.PrimitiveReader()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ToolbarReader.MakePrimitiveReader()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_18786E6E8(uint64_t a1)
{
  _BYTE v2[96];

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v2, (unint64_t *)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  return EnvironmentValues.toolbarUpdateContext.setter((uint64_t)v2);
}

void type metadata accessor for ToolbarReader.MakeAppearances()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ToolbarReader.UpdateToolbarBridge()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ToolbarReader.MakeView()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BarEdgeInput and conformance BarEdgeInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput;
  if (!lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarEdgeInput, &unk_1E1AB17E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput;
  if (!lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarEdgeInput, &unk_1E1AB17E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarEdgeInput and conformance BarEdgeInput);
  }
  return result;
}

void type metadata accessor for External<HorizontalEdge?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<HorizontalEdge?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E0CE2780], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<HorizontalEdge?>);
  }
}

uint64_t type metadata accessor for BarEdgeReader.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BarEdgeReader.MakeView);
}

uint64_t partial apply for implicit closure #1 in static BarItemModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static BarItemModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type BarItemModifier.Transform and conformance BarItemModifier.Transform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarItemModifier.Transform and conformance BarItemModifier.Transform;
  if (!lazy protocol witness table cache variable for type BarItemModifier.Transform and conformance BarItemModifier.Transform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarItemModifier.Transform, &unk_1E1ABA908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarItemModifier.Transform and conformance BarItemModifier.Transform);
  }
  return result;
}

uint64_t sub_18786EAA4()
{
  return swift_deallocObject();
}

uint64_t sub_18786EAB4()
{
  swift_release();
  return swift_deallocObject();
}

void *type metadata accessor for BarItemModifier.Transform()
{
  return &unk_1E1ABA908;
}

void *type metadata accessor for BarEdgeInput()
{
  return &unk_1E1AB17E0;
}

void destroy for ToolbarReader.UpdateToolbarBridge(uint64_t a1)
{

}

uint64_t initializeWithCopy for ToolbarReader.UpdateToolbarBridge(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ToolbarReader.UpdateToolbarBridge(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(void **)(a1 + 16);
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = v5;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.UpdateToolbarBridge(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.UpdateToolbarBridge(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.UpdateToolbarBridge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata completion function for ToolbarReader.PrimitiveReader()
{
  unint64_t v0;

  type metadata accessor for ToolbarStorage.SearchItem?(319);
  if (v0 <= 0x3F)
    type metadata accessor for ToolbarReader();
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  unint64_t v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  void (*v104)(unint64_t, unint64_t, uint64_t);
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t __n;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8;
  v14 = v13 | 7;
  v15 = (v12 | v8) & 0x100000;
  if ((v13 | 7 | v8) == 7 && v15 == 0)
  {
    v17 = v8 | 7;
    v113 = v8 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    v18 = *(_QWORD *)(v7 + 64);
    v19 = ((v8 + 16) & v113)
        + ((((v8 + 9) & ~(unint64_t)v8) + v18) & 0xFFFFFFFFFFFFFFFCLL);
    if (((*(_QWORD *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((v13
         + 15
         + ((((v8 + 64) & ~v17)
           + ((((((((((v19 + 16) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
             + 191) & 0xFFFFFFFFFFFFFFF8)
           + 88
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
       + 16 <= 0x18)
    {
      v110 = ((v8 + 16) & v113)
           + ((((v8 + 9) & ~(unint64_t)v8) + v18) & 0xFFFFFFFFFFFFFFFCLL);
      v112 = v6;
      __n = ((((((((((v19 + 16) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 191) & 0xFFFFFFFFFFFFFFF8)
          + 88;
      v115 = v13 + 15;
      v116 = *(_QWORD *)(v11 + 64) + 7;
      v117 = *(_QWORD *)(a3 + 16);
      v118 = *(_QWORD *)(v10 - 8);
      v20 = ~v17;
      v21 = *(unsigned int *)(v7 + 84);
      v22 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v22;
      v23 = a2[3];
      swift_bridgeObjectRetain();
      v111 = v18;
      if (v23)
      {
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v23;
        *(_QWORD *)(a1 + 32) = a2[4];
        swift_retain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      v25 = ~v9;
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_QWORD *)(a1 + 56) = a2[7];
      v26 = (uint64_t)a2 + v17;
      v27 = (a1 + v17 + 64) & v20;
      v28 = (_QWORD *)((v26 + 64) & v20);
      v29 = (uint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v21 & 0x80000000) != 0)
      {
        v37 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v9 + (((((unint64_t)v29 + v9 + 8) & v113) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v25, v21, v112);
        v31 = ~v14;
        if (v37)
        {
LABEL_15:
          v32 = v27;
          v33 = __n;
          memcpy((void *)v27, v28, __n);
          v34 = v118;
          v35 = v28;
          v36 = v115;
LABEL_33:
          *(_QWORD *)(v33 + v32) = *(_QWORD *)((char *)v35 + v33);
          v100 = (_QWORD *)((v33 + v32 + 15) & 0xFFFFFFFFFFFFFFF8);
          v101 = (_QWORD *)(((unint64_t)v35 + v33 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v100 = *v101;
          v102 = ((unint64_t)v100 + v36) & v31;
          v103 = ((unint64_t)v101 + v36) & v31;
          v104 = *(void (**)(unint64_t, unint64_t, uint64_t))(v34 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v104(v102, v103, v117);
          v105 = (_QWORD *)((v116 + v103) & 0xFFFFFFFFFFFFFFF8);
          v106 = v105[1];
          v107 = (_QWORD *)((v116 + v102) & 0xFFFFFFFFFFFFFFF8);
          *v107 = *v105;
          v107[1] = v106;
          goto LABEL_34;
        }
      }
      else
      {
        v30 = *v29;
        if ((unint64_t)*v29 >= 0xFFFFFFFF)
          LODWORD(v30) = -1;
        v31 = ~v14;
        if ((_DWORD)v30 != -1)
          goto LABEL_15;
      }
      v109 = v31;
      v32 = v27;
      *(_QWORD *)v27 = *v28;
      v38 = (_QWORD *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v38 = *v29;
      v39 = ((unint64_t)v38 + v9 + 8) & v113;
      v40 = ((unint64_t)v29 + v9 + 8) & v113;
      *(_BYTE *)v39 = *(_BYTE *)v40;
      *(_BYTE *)(v39 | 1) = *(_BYTE *)(v40 | 1);
      *(_BYTE *)(v39 | 2) = *(_BYTE *)(v40 | 2);
      *(_BYTE *)(v39 | 3) = *(_BYTE *)(v40 | 3);
      v41 = (v39 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v42 = (v40 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v43 = *(_DWORD *)v42;
      *(_BYTE *)(v41 + 4) = *(_BYTE *)(v42 + 4);
      *(_DWORD *)v41 = v43;
      v44 = (v9 + 5 + v41) & v25;
      v45 = (v9 + 5 + v42) & v25;
      v46 = (unint64_t)v28;
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_retain();
      swift_retain();
      v47(v44, v45, v112);
      *(_BYTE *)(v44 + v111) = *(_BYTE *)(v45 + v111);
      v48 = (v44 + v111) & 0xFFFFFFFFFFFFFFFCLL;
      v49 = (v45 + v111) & 0xFFFFFFFFFFFFFFFCLL;
      v50 = *(_DWORD *)(v49 + 4);
      *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
      *(_DWORD *)(v48 + 4) = v50;
      v51 = (_QWORD *)(((v27 | 7) + v110 + 9) & 0xFFFFFFFFFFFFFFF8);
      v35 = (_QWORD *)v46;
      v52 = (_QWORD *)(((v46 | 7) + v110 + 9) & 0xFFFFFFFFFFFFFFF8);
      *v51 = *v52;
      v53 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
      v54 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
      v55 = *(unsigned __int8 *)(v54 + 8);
      swift_bridgeObjectRetain();
      if (v55 > 1)
      {
        v58 = *(_QWORD *)v54;
        *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
        *(_QWORD *)v53 = v58;
      }
      else
      {
        v56 = v55 != 0;
        v57 = *(_QWORD *)v54;
        outlined copy of PlatformItemCollection.Storage(v57, v56);
        *(_QWORD *)v53 = v57;
        *(_BYTE *)(v53 + 8) = v56;
      }
      v59 = ((unint64_t)v51 + 31) & 0xFFFFFFFFFFFFFFF8;
      v60 = ((unint64_t)v52 + 31) & 0xFFFFFFFFFFFFFFF8;
      v61 = *(unsigned __int8 *)(v60 + 8);
      if (v61 > 1)
      {
        v64 = *(_QWORD *)v60;
        *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
        *(_QWORD *)v59 = v64;
      }
      else
      {
        v62 = v61 != 0;
        v63 = *(_QWORD *)v60;
        outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v60, v61 != 0);
        *(_QWORD *)v59 = v63;
        *(_BYTE *)(v59 + 8) = v62;
      }
      v65 = ((unint64_t)v51 + 47) & 0xFFFFFFFFFFFFFFF8;
      v66 = ((unint64_t)v52 + 47) & 0xFFFFFFFFFFFFFFF8;
      v67 = *(_QWORD *)v66;
      v68 = *(_QWORD *)(v66 + 8);
      v69 = *(_BYTE *)(v66 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v66, v68, v69);
      *(_QWORD *)v65 = v67;
      *(_QWORD *)(v65 + 8) = v68;
      *(_BYTE *)(v65 + 16) = v69;
      *(_QWORD *)(v65 + 24) = *(_QWORD *)(v66 + 24);
      v70 = (_QWORD *)((v65 + 39) & 0xFFFFFFFFFFFFFFF8);
      v71 = (_QWORD *)((v66 + 39) & 0xFFFFFFFFFFFFFFF8);
      *v70 = *v71;
      v70[1] = v71[1];
      v72 = ((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8;
      v73 = ((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8;
      v74 = *(_QWORD *)v73;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v74 < 0xFFFFFFFF)
      {
        v78 = *(_OWORD *)(v73 + 16);
        *(_OWORD *)v72 = *(_OWORD *)v73;
        *(_OWORD *)(v72 + 16) = v78;
        v79 = *(_OWORD *)(v73 + 32);
        v80 = *(_OWORD *)(v73 + 48);
        v81 = *(_OWORD *)(v73 + 64);
        *(_QWORD *)(v72 + 80) = *(_QWORD *)(v73 + 80);
        *(_OWORD *)(v72 + 48) = v80;
        *(_OWORD *)(v72 + 64) = v81;
        *(_OWORD *)(v72 + 32) = v79;
      }
      else
      {
        v75 = *(_QWORD *)(v73 + 8);
        *(_QWORD *)v72 = v74;
        *(_QWORD *)(v72 + 8) = v75;
        *(_DWORD *)(v72 + 16) = *(_DWORD *)(v73 + 16);
        *(_QWORD *)(v72 + 24) = *(_QWORD *)(v73 + 24);
        v76 = *(void **)(v73 + 32);
        *(_QWORD *)(v72 + 32) = v76;
        *(_QWORD *)(v72 + 40) = *(_QWORD *)(v73 + 40);
        *(_DWORD *)(v72 + 48) = *(_DWORD *)(v73 + 48);
        *(_QWORD *)(v72 + 56) = *(_QWORD *)(v73 + 56);
        *(_DWORD *)(v72 + 64) = *(_DWORD *)(v73 + 64);
        *(_DWORD *)(v72 + 68) = *(_DWORD *)(v73 + 68);
        *(_DWORD *)(v72 + 72) = *(_DWORD *)(v73 + 72);
        *(_DWORD *)(v72 + 76) = *(_DWORD *)(v73 + 76);
        *(_QWORD *)(v72 + 80) = *(_QWORD *)(v73 + 80);
        v77 = v76;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      v82 = (v72 + 95) & 0xFFFFFFFFFFFFFFF8;
      v83 = (v73 + 95) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)v83 < 0xFFFFFFFFuLL)
      {
        v87 = *(_OWORD *)(v83 + 16);
        *(_OWORD *)v82 = *(_OWORD *)v83;
        *(_OWORD *)(v82 + 16) = v87;
        v88 = *(_OWORD *)(v83 + 32);
        v89 = *(_OWORD *)(v83 + 48);
        v90 = *(_OWORD *)(v83 + 64);
        *(_QWORD *)(v82 + 80) = *(_QWORD *)(v83 + 80);
        *(_OWORD *)(v82 + 48) = v89;
        *(_OWORD *)(v82 + 64) = v90;
        *(_OWORD *)(v82 + 32) = v88;
      }
      else
      {
        v84 = *(_QWORD *)(v83 + 8);
        *(_QWORD *)v82 = *(_QWORD *)v83;
        *(_QWORD *)(v82 + 8) = v84;
        *(_DWORD *)(v82 + 16) = *(_DWORD *)(v83 + 16);
        *(_QWORD *)(v82 + 24) = *(_QWORD *)(v83 + 24);
        v85 = *(void **)(v83 + 32);
        *(_QWORD *)(v82 + 32) = v85;
        *(_QWORD *)(v82 + 40) = *(_QWORD *)(v83 + 40);
        *(_DWORD *)(v82 + 48) = *(_DWORD *)(v83 + 48);
        *(_QWORD *)(v82 + 56) = *(_QWORD *)(v83 + 56);
        *(_DWORD *)(v82 + 64) = *(_DWORD *)(v83 + 64);
        *(_DWORD *)(v82 + 68) = *(_DWORD *)(v83 + 68);
        *(_DWORD *)(v82 + 72) = *(_DWORD *)(v83 + 72);
        *(_DWORD *)(v82 + 76) = *(_DWORD *)(v83 + 76);
        *(_QWORD *)(v82 + 80) = *(_QWORD *)(v83 + 80);
        v86 = v85;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      *(_BYTE *)(v82 + 88) = *(_BYTE *)(v83 + 88);
      v91 = (v72 + 191) & 0xFFFFFFFFFFFFFFF8;
      v92 = (v73 + 191) & 0xFFFFFFFFFFFFFFF8;
      v33 = __n;
      v36 = v115;
      if (*(_QWORD *)v92 < 0xFFFFFFFFuLL)
      {
        v96 = *(_OWORD *)(v92 + 16);
        *(_OWORD *)v91 = *(_OWORD *)v92;
        *(_OWORD *)(v91 + 16) = v96;
        v97 = *(_OWORD *)(v92 + 32);
        v98 = *(_OWORD *)(v92 + 48);
        v99 = *(_OWORD *)(v92 + 64);
        *(_QWORD *)(v91 + 80) = *(_QWORD *)(v92 + 80);
        *(_OWORD *)(v91 + 48) = v98;
        *(_OWORD *)(v91 + 64) = v99;
        *(_OWORD *)(v91 + 32) = v97;
      }
      else
      {
        v93 = *(_QWORD *)(v92 + 8);
        *(_QWORD *)v91 = *(_QWORD *)v92;
        *(_QWORD *)(v91 + 8) = v93;
        *(_DWORD *)(v91 + 16) = *(_DWORD *)(v92 + 16);
        *(_QWORD *)(v91 + 24) = *(_QWORD *)(v92 + 24);
        v94 = *(void **)(v92 + 32);
        *(_QWORD *)(v91 + 32) = v94;
        *(_QWORD *)(v91 + 40) = *(_QWORD *)(v92 + 40);
        *(_DWORD *)(v91 + 48) = *(_DWORD *)(v92 + 48);
        *(_QWORD *)(v91 + 56) = *(_QWORD *)(v92 + 56);
        *(_DWORD *)(v91 + 64) = *(_DWORD *)(v92 + 64);
        *(_DWORD *)(v91 + 68) = *(_DWORD *)(v92 + 68);
        *(_DWORD *)(v91 + 72) = *(_DWORD *)(v92 + 72);
        *(_DWORD *)(v91 + 76) = *(_DWORD *)(v92 + 76);
        *(_QWORD *)(v91 + 80) = *(_QWORD *)(v92 + 80);
        v95 = v94;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      v34 = v118;
      v31 = v109;
      goto LABEL_33;
    }
  }
  v24 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v24 + (((v14 | v8) + 16) & ~(v14 | v8));
LABEL_34:
  swift_retain();
  return a1;
}

uint64_t destroy for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 64) & ~(v6 | 7);
  v8 = *(_DWORD *)(v5 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  v9 = ~v6;
  v10 = ((v6 + 16) & v8) + ((((v6 + 9) & ~v6) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = (uint64_t *)((v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    v13 = v10 + 9;
    if ((*(unsigned int (**)(unint64_t))(v5 + 48))((v6
                                                                     + (((((unint64_t)v11 + v6 + 8) & v8) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 5) & v9))
    {
LABEL_7:
      v14 = v13 + 7;
      goto LABEL_19;
    }
  }
  else
  {
    v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    v13 = v10 + 9;
    if ((_DWORD)v12 != -1)
      goto LABEL_7;
  }
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + (((((unint64_t)v11 + v6 + 8) & v8) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v9, v4);
  v14 = v13 + 7;
  v15 = (v13 + 7 + v7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(unsigned __int8 *)(v16 + 8);
  if (v17 <= 1)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v16, v17 != 0);
  v18 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 <= 1)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v18, v19 != 0);
  v20 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_BYTE *)(v20 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21 = (((v20 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v21 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v22 = (v21 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v22 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v23 = (v21 + 191) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v23 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  v24 = (v7
       + (((((((((v14 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 191) & 0xFFFFFFFFFFFFFFF8)
       + 103) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t))(v25 + 8))((v24 + v26 + 8) & ~v26);
  return swift_release();
}

uint64_t initializeWithCopy for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  unint64_t v34;
  unint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void (*v96)(unint64_t, unint64_t, uint64_t);
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  v104 = a3;
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(_DWORD *)(v9 + 80);
  v12 = (v11 | 7) + 64;
  v105 = a1;
  v106 = (_QWORD *)((v12 + a1) & ~(v11 | 7));
  v13 = (v12 + a2) & ~(v11 | 7);
  v14 = *(_DWORD *)(v9 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  v15 = ~v11;
  v102 = *(_QWORD *)(v9 + 64);
  v103 = ((v11 + 16) & v14) + ((((v11 + 9) & ~v11) + v102) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  v16 = ((((((((v103 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  v107 = (_QWORD *)v13;
  v17 = (uint64_t *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v10 & 0x80000000) != 0)
  {
    v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v11 + (((((unint64_t)v17 + v11 + 8) & v14) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v15, v10, v8);
    v19 = v16 + 88;
    if (v24)
    {
LABEL_8:
      v20 = v106;
      v21 = v107;
      memcpy(v106, v107, v19);
      v22 = v104;
      v23 = v105;
      goto LABEL_25;
    }
  }
  else
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v16 + 88;
    if ((_DWORD)v18 != -1)
      goto LABEL_8;
  }
  *v106 = *v107;
  v25 = (_QWORD *)(((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v17;
  v26 = ((unint64_t)v25 + v11 + 8) & v14;
  v27 = ((unint64_t)v17 + v11 + 8) & v14;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  *(_BYTE *)(v26 | 1) = *(_BYTE *)(v27 | 1);
  *(_BYTE *)(v26 | 2) = *(_BYTE *)(v27 | 2);
  *(_BYTE *)(v26 | 3) = *(_BYTE *)(v27 | 3);
  v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v30 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = v30;
  v31 = (v11 + 5 + v28) & v15;
  v32 = (v11 + 5 + v29) & v15;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v33(v31, v32, v8);
  *(_BYTE *)(v31 + v102) = *(_BYTE *)(v32 + v102);
  v34 = (v31 + v102) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = (v32 + v102) & 0xFFFFFFFFFFFFFFFCLL;
  v36 = *(_DWORD *)(v35 + 4);
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_DWORD *)(v34 + 4) = v36;
  v37 = (_QWORD *)(((unint64_t)v106 + v103) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v107 + v103) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(unsigned __int8 *)(v40 + 8);
  swift_bridgeObjectRetain();
  if (v41 > 1)
  {
    v44 = *(_QWORD *)v40;
    *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
    *(_QWORD *)v39 = v44;
  }
  else
  {
    v42 = v41 != 0;
    v43 = *(_QWORD *)v40;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v40, v42);
    *(_QWORD *)v39 = v43;
    *(_BYTE *)(v39 + 8) = v42;
  }
  v45 = ((unint64_t)v37 + 31) & 0xFFFFFFFFFFFFFFF8;
  v46 = ((unint64_t)v38 + 31) & 0xFFFFFFFFFFFFFFF8;
  v47 = *(unsigned __int8 *)(v46 + 8);
  if (v47 > 1)
  {
    v50 = *(_QWORD *)v46;
    *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
    *(_QWORD *)v45 = v50;
  }
  else
  {
    v48 = v47 != 0;
    v49 = *(_QWORD *)v46;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v46, v47 != 0);
    *(_QWORD *)v45 = v49;
    *(_BYTE *)(v45 + 8) = v48;
  }
  v51 = ((unint64_t)v37 + 47) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v38 + 47) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_QWORD *)v52;
  v54 = *(_QWORD *)(v52 + 8);
  v55 = *(_BYTE *)(v52 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v52, v54, v55);
  *(_QWORD *)v51 = v53;
  *(_QWORD *)(v51 + 8) = v54;
  *(_BYTE *)(v51 + 16) = v55;
  *(_QWORD *)(v51 + 24) = *(_QWORD *)(v52 + 24);
  v56 = (_QWORD *)((v51 + 39) & 0xFFFFFFFFFFFFFFF8);
  v57 = (_QWORD *)((v52 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v56 = *v57;
  v56[1] = v57[1];
  v58 = ((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  v59 = ((unint64_t)v57 + 23) & 0xFFFFFFFFFFFFFFF8;
  v60 = *(_QWORD *)v59;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v60 < 0xFFFFFFFF)
  {
    v64 = *(_OWORD *)(v59 + 16);
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *(_OWORD *)(v58 + 16) = v64;
    v65 = *(_OWORD *)(v59 + 32);
    v66 = *(_OWORD *)(v59 + 48);
    v67 = *(_OWORD *)(v59 + 64);
    *(_QWORD *)(v58 + 80) = *(_QWORD *)(v59 + 80);
    *(_OWORD *)(v58 + 48) = v66;
    *(_OWORD *)(v58 + 64) = v67;
    *(_OWORD *)(v58 + 32) = v65;
  }
  else
  {
    v61 = *(_QWORD *)(v59 + 8);
    *(_QWORD *)v58 = v60;
    *(_QWORD *)(v58 + 8) = v61;
    *(_DWORD *)(v58 + 16) = *(_DWORD *)(v59 + 16);
    *(_QWORD *)(v58 + 24) = *(_QWORD *)(v59 + 24);
    v62 = *(void **)(v59 + 32);
    *(_QWORD *)(v58 + 32) = v62;
    *(_QWORD *)(v58 + 40) = *(_QWORD *)(v59 + 40);
    *(_DWORD *)(v58 + 48) = *(_DWORD *)(v59 + 48);
    *(_QWORD *)(v58 + 56) = *(_QWORD *)(v59 + 56);
    *(_DWORD *)(v58 + 64) = *(_DWORD *)(v59 + 64);
    *(_DWORD *)(v58 + 68) = *(_DWORD *)(v59 + 68);
    *(_DWORD *)(v58 + 72) = *(_DWORD *)(v59 + 72);
    *(_DWORD *)(v58 + 76) = *(_DWORD *)(v59 + 76);
    *(_QWORD *)(v58 + 80) = *(_QWORD *)(v59 + 80);
    v63 = v62;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v68 = (v58 + 95) & 0xFFFFFFFFFFFFFFF8;
  v69 = (v59 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v69 < 0xFFFFFFFFuLL)
  {
    v73 = *(_OWORD *)(v69 + 16);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *(_OWORD *)(v68 + 16) = v73;
    v74 = *(_OWORD *)(v69 + 32);
    v75 = *(_OWORD *)(v69 + 48);
    v76 = *(_OWORD *)(v69 + 64);
    *(_QWORD *)(v68 + 80) = *(_QWORD *)(v69 + 80);
    *(_OWORD *)(v68 + 48) = v75;
    *(_OWORD *)(v68 + 64) = v76;
    *(_OWORD *)(v68 + 32) = v74;
  }
  else
  {
    v70 = *(_QWORD *)(v69 + 8);
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    *(_DWORD *)(v68 + 16) = *(_DWORD *)(v69 + 16);
    *(_QWORD *)(v68 + 24) = *(_QWORD *)(v69 + 24);
    v71 = *(void **)(v69 + 32);
    *(_QWORD *)(v68 + 32) = v71;
    *(_QWORD *)(v68 + 40) = *(_QWORD *)(v69 + 40);
    *(_DWORD *)(v68 + 48) = *(_DWORD *)(v69 + 48);
    *(_QWORD *)(v68 + 56) = *(_QWORD *)(v69 + 56);
    *(_DWORD *)(v68 + 64) = *(_DWORD *)(v69 + 64);
    *(_DWORD *)(v68 + 68) = *(_DWORD *)(v69 + 68);
    *(_DWORD *)(v68 + 72) = *(_DWORD *)(v69 + 72);
    *(_DWORD *)(v68 + 76) = *(_DWORD *)(v69 + 76);
    *(_QWORD *)(v68 + 80) = *(_QWORD *)(v69 + 80);
    v72 = v71;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(v68 + 88) = *(_BYTE *)(v69 + 88);
  v77 = (v58 + 191) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v59 + 191) & 0xFFFFFFFFFFFFFFF8;
  v22 = v104;
  v23 = v105;
  v20 = v106;
  v21 = v107;
  if (*(_QWORD *)v78 < 0xFFFFFFFFuLL)
  {
    v82 = *(_OWORD *)(v78 + 16);
    *(_OWORD *)v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 16) = v82;
    v83 = *(_OWORD *)(v78 + 32);
    v84 = *(_OWORD *)(v78 + 48);
    v85 = *(_OWORD *)(v78 + 64);
    *(_QWORD *)(v77 + 80) = *(_QWORD *)(v78 + 80);
    *(_OWORD *)(v77 + 48) = v84;
    *(_OWORD *)(v77 + 64) = v85;
    *(_OWORD *)(v77 + 32) = v83;
  }
  else
  {
    v79 = *(_QWORD *)(v78 + 8);
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *(_QWORD *)(v77 + 8) = v79;
    *(_DWORD *)(v77 + 16) = *(_DWORD *)(v78 + 16);
    *(_QWORD *)(v77 + 24) = *(_QWORD *)(v78 + 24);
    v80 = *(void **)(v78 + 32);
    *(_QWORD *)(v77 + 32) = v80;
    *(_QWORD *)(v77 + 40) = *(_QWORD *)(v78 + 40);
    *(_DWORD *)(v77 + 48) = *(_DWORD *)(v78 + 48);
    *(_QWORD *)(v77 + 56) = *(_QWORD *)(v78 + 56);
    *(_DWORD *)(v77 + 64) = *(_DWORD *)(v78 + 64);
    *(_DWORD *)(v77 + 68) = *(_DWORD *)(v78 + 68);
    *(_DWORD *)(v77 + 72) = *(_DWORD *)(v78 + 72);
    *(_DWORD *)(v77 + 76) = *(_DWORD *)(v78 + 76);
    *(_QWORD *)(v77 + 80) = *(_QWORD *)(v78 + 80);
    v81 = v80;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
LABEL_25:
  *(_QWORD *)((char *)v20 + v19) = *(_QWORD *)((char *)v21 + v19);
  v86 = (_QWORD *)(((unint64_t)v20 + v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v87 = (_QWORD *)(((unint64_t)v21 + v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v86 = *v87;
  v88 = *(_QWORD *)(v22 + 16);
  v89 = *(_QWORD *)(v88 - 8);
  v90 = *(_DWORD *)(v89 + 80) & 0xF8;
  v91 = v90 + 15;
  v92 = (unint64_t)v86 + v90 + 15;
  v93 = ~v90 & 0xFFFFFFFFFFFFFFF8;
  v94 = v92 & v93;
  v95 = ((unint64_t)v87 + v91) & v93;
  v96 = *(void (**)(unint64_t, unint64_t, uint64_t))(v89 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v96(v94, v95, v88);
  v97 = *(_QWORD *)(v89 + 64) + 7;
  v98 = (_QWORD *)((v97 + v94) & 0xFFFFFFFFFFFFFFF8);
  v99 = (_QWORD *)((v97 + v95) & 0xFFFFFFFFFFFFFFF8);
  v100 = v99[1];
  *v98 = *v99;
  v98[1] = v100;
  swift_retain();
  return v23;
}

_QWORD *assignWithCopy for ToolbarReader.PrimitiveReader(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v40;
  uint64_t (*v41)(unint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  unint64_t v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  id v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  id v153;
  uint64_t v154;
  void *v155;
  id v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  id v171;
  uint64_t v172;
  void *v173;
  id v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  id v185;
  uint64_t v186;
  void *v187;
  id v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  int v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *__src;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = v5 + 2;
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  if (v5[3])
  {
    if (v8)
    {
      v5[2] = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      v5[3] = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_release();
      v5[4] = *(_QWORD *)(a2 + 32);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)(v5 + 2), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v9 = *(_QWORD *)(a2 + 32);
      *v6 = *v7;
      v5[4] = v9;
    }
  }
  else if (v8)
  {
    v5[2] = *(_QWORD *)(a2 + 16);
    v5[3] = *(_QWORD *)(a2 + 24);
    v5[4] = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    v10 = *v7;
    v5[4] = *(_QWORD *)(a2 + 32);
    *v6 = v10;
  }
  v5[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v5 + 48) = *(_BYTE *)(a2 + 48);
  v5[7] = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for AttributedString();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = (v14 | 7) + 64;
  v16 = (_QWORD *)(((unint64_t)v5 + v15) & ~(v14 | 7));
  v17 = (v15 + a2) & ~(v14 | 7);
  v18 = *(_DWORD *)(v12 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  v19 = ~v14;
  v20 = ((v14 + 16) & v18) + ((((v14 + 9) & ~v14) + *(_QWORD *)(v12 + 64)) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  v21 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v220 = v20;
  __src = (_QWORD *)v17;
  v218 = ~v14;
  v219 = v11;
  v211 = *(_QWORD *)(v12 + 64);
  v217 = v12;
  if ((v13 & 0x80000000) != 0)
  {
    v212 = (((((((((v20 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 191) & 0xFFFFFFFFFFFFFFF8)
         + 88;
    v214 = a3;
    v208 = ((unint64_t)v5 + v15) & ~(v14 | 7);
    v40 = v11;
    v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    v207 = v41((v14 + 5 + (((((unint64_t)v21 + v14 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & v19, v13, v11);
    v23 = (uint64_t *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = v212;
    v42 = v40;
    a3 = v214;
    v25 = v41((v14 + 5 + (((((unint64_t)v23 + v14 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & v19, v13, v42);
    v16 = (_QWORD *)v208;
    if (!v207)
      goto LABEL_12;
  }
  else
  {
    v22 = (((((((((v20 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 191) & 0xFFFFFFFFFFFFFFF8)
        + 88;
    v23 = (uint64_t *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = *v23;
    if ((unint64_t)*v23 >= 0xFFFFFFFF)
      LODWORD(v24) = -1;
    v25 = v24 + 1;
    if (*v21 > 0xFFFFFFFEuLL)
    {
LABEL_12:
      if (v25)
      {
        swift_release();
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v217 + 8))((v14 + (((((unint64_t)v21 + v14 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v218, v219);
        v26 = ((unint64_t)v16 + v220) & 0xFFFFFFFFFFFFFFF8;
        swift_bridgeObjectRelease();
        v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        v28 = *(unsigned __int8 *)(v27 + 8);
        if (v28 <= 1)
          outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v27, v28 != 0);
        v29 = (v26 + 31) & 0xFFFFFFFFFFFFFFF8;
        v30 = *(unsigned __int8 *)(v29 + 8);
        v31 = __src;
        if (v30 <= 1)
          outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v29, v30 != 0);
        v32 = (v26 + 47) & 0xFFFFFFFFFFFFFFF8;
        outlined consume of Text.Storage(*(_QWORD *)v32, *(_QWORD *)(v32 + 8), *(_BYTE *)(v32 + 16));
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v33 = (((v32 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)v33 >= 0xFFFFFFFFuLL)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        v34 = (v33 + 95) & 0xFFFFFFFFFFFFFFF8;
        v35 = v22;
        if (*(_QWORD *)v34 >= 0xFFFFFFFFuLL)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        v36 = (v33 + 191) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)v36 >= 0xFFFFFFFFuLL)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        v37 = v16;
        v38 = __src;
        v39 = v22;
        goto LABEL_27;
      }
      v216 = a3;
      *v16 = *__src;
      swift_retain();
      swift_release();
      *v21 = *v23;
      swift_retain();
      swift_release();
      v61 = ((unint64_t)v21 + v14 + 8) & v18;
      v62 = ((unint64_t)v23 + v14 + 8) & v18;
      *(_BYTE *)v61 = *(_BYTE *)v62;
      *(_BYTE *)(v61 | 1) = *(_BYTE *)(v62 | 1);
      *(_BYTE *)(v61 | 2) = *(_BYTE *)(v62 | 2);
      *(_BYTE *)(v61 | 3) = *(_BYTE *)(v62 | 3);
      v63 = (v61 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v64 = (v62 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v65 = *(_DWORD *)v64;
      *(_BYTE *)(v63 + 4) = *(_BYTE *)(v64 + 4);
      *(_DWORD *)v63 = v65;
      v66 = (v14 + 5 + v63) & v218;
      v67 = (v14 + 5 + v64) & v218;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v217 + 24))(v66, v67, v219);
      *(_BYTE *)(v66 + v211) = *(_BYTE *)(v67 + v211);
      v68 = (v66 + v211) & 0xFFFFFFFFFFFFFFFCLL;
      v69 = (v67 + v211) & 0xFFFFFFFFFFFFFFFCLL;
      *(_DWORD *)(v68 + 4) = *(_DWORD *)(v69 + 4);
      *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
      v209 = v16;
      v70 = (_QWORD *)(((unint64_t)v16 + v220) & 0xFFFFFFFFFFFFFFF8);
      v71 = (_QWORD *)(((unint64_t)__src + v220) & 0xFFFFFFFFFFFFFFF8);
      *v70 = *v71;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v72 = ((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8;
      v73 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
      v74 = *(unsigned __int8 *)(v72 + 8);
      v75 = *(unsigned __int8 *)(v73 + 8);
      if (v74 > 1)
      {
        if (v75 <= 1)
        {
          v122 = v75 != 0;
          v123 = *(_QWORD *)v73;
          outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v73, v75 != 0);
          *(_QWORD *)v72 = v123;
          *(_BYTE *)(v72 + 8) = v122;
          goto LABEL_51;
        }
      }
      else
      {
        if (v75 <= 1)
        {
          v76 = v75 != 0;
          v77 = *(_QWORD *)v73;
          outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v73, v75 != 0);
          v78 = *(_QWORD *)v72;
          v79 = *(_BYTE *)(v72 + 8);
          *(_QWORD *)v72 = v77;
          *(_BYTE *)(v72 + 8) = v76;
          outlined consume of PlatformItemCollection.Storage(v78, v79);
          goto LABEL_51;
        }
        outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v72, v74 & 1);
      }
      v124 = *(_QWORD *)v73;
      *(_BYTE *)(v72 + 8) = *(_BYTE *)(v73 + 8);
      *(_QWORD *)v72 = v124;
LABEL_51:
      v125 = ((unint64_t)v70 + 31) & 0xFFFFFFFFFFFFFFF8;
      v126 = ((unint64_t)v71 + 31) & 0xFFFFFFFFFFFFFFF8;
      v127 = *(unsigned __int8 *)(v125 + 8);
      v128 = *(unsigned __int8 *)(v126 + 8);
      if (v127 > 1)
      {
        if (v128 <= 1)
        {
          v133 = v128 != 0;
          v134 = *(_QWORD *)v126;
          outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v126, v128 != 0);
          *(_QWORD *)v125 = v134;
          *(_BYTE *)(v125 + 8) = v133;
          goto LABEL_58;
        }
      }
      else
      {
        if (v128 <= 1)
        {
          v129 = v128 != 0;
          v130 = *(_QWORD *)v126;
          outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v126, v128 != 0);
          v131 = *(_QWORD *)v125;
          v132 = *(_BYTE *)(v125 + 8);
          *(_QWORD *)v125 = v130;
          *(_BYTE *)(v125 + 8) = v129;
          outlined consume of PlatformItemCollection.Storage(v131, v132);
          goto LABEL_58;
        }
        outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v125, v127 & 1);
      }
      v135 = *(_QWORD *)v126;
      *(_BYTE *)(v125 + 8) = *(_BYTE *)(v126 + 8);
      *(_QWORD *)v125 = v135;
LABEL_58:
      v136 = v5;
      v137 = ((unint64_t)v70 + 47) & 0xFFFFFFFFFFFFFFF8;
      v138 = ((unint64_t)v71 + 47) & 0xFFFFFFFFFFFFFFF8;
      v139 = *(_QWORD *)v138;
      v140 = *(_QWORD *)(v138 + 8);
      v141 = *(_BYTE *)(v138 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v138, v140, v141);
      v142 = *(_QWORD *)v137;
      v143 = *(_QWORD *)(v137 + 8);
      v144 = *(_BYTE *)(v137 + 16);
      *(_QWORD *)v137 = v139;
      *(_QWORD *)(v137 + 8) = v140;
      *(_BYTE *)(v137 + 16) = v141;
      outlined consume of Text.Storage(v142, v143, v144);
      *(_QWORD *)(v137 + 24) = *(_QWORD *)(v138 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v145 = (_QWORD *)((v137 + 39) & 0xFFFFFFFFFFFFFFF8);
      v146 = (_QWORD *)((v138 + 39) & 0xFFFFFFFFFFFFFFF8);
      *v145 = *v146;
      swift_retain();
      swift_release();
      v145[1] = v146[1];
      swift_retain();
      swift_release();
      v147 = ((unint64_t)v145 + 23) & 0xFFFFFFFFFFFFFFF8;
      v148 = ((unint64_t)v146 + 23) & 0xFFFFFFFFFFFFFFF8;
      v149 = *(_QWORD *)v148;
      if (*(_QWORD *)v147 < 0xFFFFFFFFuLL)
      {
        if (v149 < 0xFFFFFFFF)
        {
          v161 = *(_OWORD *)(v148 + 16);
          *(_OWORD *)v147 = *(_OWORD *)v148;
          *(_OWORD *)(v147 + 16) = v161;
          v162 = *(_OWORD *)(v148 + 32);
          v163 = *(_OWORD *)(v148 + 48);
          v164 = *(_OWORD *)(v148 + 64);
          *(_QWORD *)(v147 + 80) = *(_QWORD *)(v148 + 80);
          *(_OWORD *)(v147 + 48) = v163;
          *(_OWORD *)(v147 + 64) = v164;
          *(_OWORD *)(v147 + 32) = v162;
        }
        else
        {
          v154 = *(_QWORD *)(v148 + 8);
          *(_QWORD *)v147 = v149;
          *(_QWORD *)(v147 + 8) = v154;
          *(_DWORD *)(v147 + 16) = *(_DWORD *)(v148 + 16);
          *(_QWORD *)(v147 + 24) = *(_QWORD *)(v148 + 24);
          v155 = *(void **)(v148 + 32);
          *(_QWORD *)(v147 + 32) = v155;
          *(_QWORD *)(v147 + 40) = *(_QWORD *)(v148 + 40);
          *(_DWORD *)(v147 + 48) = *(_DWORD *)(v148 + 48);
          *(_QWORD *)(v147 + 56) = *(_QWORD *)(v148 + 56);
          *(_DWORD *)(v147 + 64) = *(_DWORD *)(v148 + 64);
          *(_DWORD *)(v147 + 68) = *(_DWORD *)(v148 + 68);
          *(_DWORD *)(v147 + 72) = *(_DWORD *)(v148 + 72);
          *(_DWORD *)(v147 + 76) = *(_DWORD *)(v148 + 76);
          *(_QWORD *)(v147 + 80) = *(_QWORD *)(v148 + 80);
          v156 = v155;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
        }
        v35 = v22;
        a3 = v216;
      }
      else
      {
        v35 = v22;
        a3 = v216;
        if (v149 < 0xFFFFFFFF)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          v157 = *(_OWORD *)(v148 + 16);
          *(_OWORD *)v147 = *(_OWORD *)v148;
          *(_OWORD *)(v147 + 16) = v157;
          v158 = *(_OWORD *)(v148 + 32);
          v159 = *(_OWORD *)(v148 + 48);
          v160 = *(_OWORD *)(v148 + 64);
          *(_QWORD *)(v147 + 80) = *(_QWORD *)(v148 + 80);
          *(_OWORD *)(v147 + 48) = v159;
          *(_OWORD *)(v147 + 64) = v160;
          *(_OWORD *)(v147 + 32) = v158;
        }
        else
        {
          v150 = *(_QWORD *)(v148 + 8);
          *(_QWORD *)v147 = v149;
          *(_QWORD *)(v147 + 8) = v150;
          *(_DWORD *)(v147 + 16) = *(_DWORD *)(v148 + 16);
          *(_QWORD *)(v147 + 24) = *(_QWORD *)(v148 + 24);
          v151 = *(void **)(v148 + 32);
          v152 = *(void **)(v147 + 32);
          *(_QWORD *)(v147 + 32) = v151;
          v153 = v151;

          *(_QWORD *)(v147 + 40) = *(_QWORD *)(v148 + 40);
          swift_retain();
          swift_release();
          *(_DWORD *)(v147 + 48) = *(_DWORD *)(v148 + 48);
          *(_QWORD *)(v147 + 56) = *(_QWORD *)(v148 + 56);
          swift_retain();
          swift_release();
          *(_DWORD *)(v147 + 64) = *(_DWORD *)(v148 + 64);
          *(_DWORD *)(v147 + 68) = *(_DWORD *)(v148 + 68);
          *(_DWORD *)(v147 + 72) = *(_DWORD *)(v148 + 72);
          *(_DWORD *)(v147 + 76) = *(_DWORD *)(v148 + 76);
          *(_QWORD *)(v147 + 80) = *(_QWORD *)(v148 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
      }
      v165 = (v147 + 95) & 0xFFFFFFFFFFFFFFF8;
      v166 = (v148 + 95) & 0xFFFFFFFFFFFFFFF8;
      v167 = *(_QWORD *)v166;
      if (*(_QWORD *)v165 < 0xFFFFFFFFuLL)
      {
        if (v167 >= 0xFFFFFFFF)
        {
          v172 = *(_QWORD *)(v166 + 8);
          *(_QWORD *)v165 = v167;
          *(_QWORD *)(v165 + 8) = v172;
          *(_DWORD *)(v165 + 16) = *(_DWORD *)(v166 + 16);
          *(_QWORD *)(v165 + 24) = *(_QWORD *)(v166 + 24);
          v173 = *(void **)(v166 + 32);
          *(_QWORD *)(v165 + 32) = v173;
          *(_QWORD *)(v165 + 40) = *(_QWORD *)(v166 + 40);
          *(_DWORD *)(v165 + 48) = *(_DWORD *)(v166 + 48);
          *(_QWORD *)(v165 + 56) = *(_QWORD *)(v166 + 56);
          *(_DWORD *)(v165 + 64) = *(_DWORD *)(v166 + 64);
          *(_DWORD *)(v165 + 68) = *(_DWORD *)(v166 + 68);
          *(_DWORD *)(v165 + 72) = *(_DWORD *)(v166 + 72);
          *(_DWORD *)(v165 + 76) = *(_DWORD *)(v166 + 76);
          *(_QWORD *)(v165 + 80) = *(_QWORD *)(v166 + 80);
          v174 = v173;
          swift_retain();
          swift_retain();
          v35 = v22;
          a3 = v216;
          swift_bridgeObjectRetain();
          goto LABEL_73;
        }
      }
      else
      {
        if (v167 >= 0xFFFFFFFF)
        {
          v168 = *(_QWORD *)(v166 + 8);
          *(_QWORD *)v165 = v167;
          *(_QWORD *)(v165 + 8) = v168;
          *(_DWORD *)(v165 + 16) = *(_DWORD *)(v166 + 16);
          *(_QWORD *)(v165 + 24) = *(_QWORD *)(v166 + 24);
          v169 = *(void **)(v166 + 32);
          v170 = *(void **)(v165 + 32);
          *(_QWORD *)(v165 + 32) = v169;
          v171 = v169;

          *(_QWORD *)(v165 + 40) = *(_QWORD *)(v166 + 40);
          swift_retain();
          swift_release();
          *(_DWORD *)(v165 + 48) = *(_DWORD *)(v166 + 48);
          *(_QWORD *)(v165 + 56) = *(_QWORD *)(v166 + 56);
          swift_retain();
          swift_release();
          *(_DWORD *)(v165 + 64) = *(_DWORD *)(v166 + 64);
          *(_DWORD *)(v165 + 68) = *(_DWORD *)(v166 + 68);
          *(_DWORD *)(v165 + 72) = *(_DWORD *)(v166 + 72);
          *(_DWORD *)(v165 + 76) = *(_DWORD *)(v166 + 76);
          *(_QWORD *)(v165 + 80) = *(_QWORD *)(v166 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      v175 = *(_OWORD *)(v166 + 16);
      *(_OWORD *)v165 = *(_OWORD *)v166;
      *(_OWORD *)(v165 + 16) = v175;
      v176 = *(_OWORD *)(v166 + 32);
      v177 = *(_OWORD *)(v166 + 48);
      v178 = *(_OWORD *)(v166 + 64);
      *(_QWORD *)(v165 + 80) = *(_QWORD *)(v166 + 80);
      *(_OWORD *)(v165 + 48) = v177;
      *(_OWORD *)(v165 + 64) = v178;
      *(_OWORD *)(v165 + 32) = v176;
LABEL_73:
      *(_BYTE *)(v165 + 88) = *(_BYTE *)(v166 + 88);
      v179 = (v147 + 191) & 0xFFFFFFFFFFFFFFF8;
      v180 = (v148 + 191) & 0xFFFFFFFFFFFFFFF8;
      v181 = *(_QWORD *)v180;
      if (*(_QWORD *)v179 < 0xFFFFFFFFuLL)
      {
        v5 = v136;
        v31 = __src;
        if (v181 >= 0xFFFFFFFF)
        {
          v186 = *(_QWORD *)(v180 + 8);
          *(_QWORD *)v179 = v181;
          *(_QWORD *)(v179 + 8) = v186;
          *(_DWORD *)(v179 + 16) = *(_DWORD *)(v180 + 16);
          *(_QWORD *)(v179 + 24) = *(_QWORD *)(v180 + 24);
          v187 = *(void **)(v180 + 32);
          *(_QWORD *)(v179 + 32) = v187;
          *(_QWORD *)(v179 + 40) = *(_QWORD *)(v180 + 40);
          *(_DWORD *)(v179 + 48) = *(_DWORD *)(v180 + 48);
          *(_QWORD *)(v179 + 56) = *(_QWORD *)(v180 + 56);
          *(_DWORD *)(v179 + 64) = *(_DWORD *)(v180 + 64);
          *(_DWORD *)(v179 + 68) = *(_DWORD *)(v180 + 68);
          *(_DWORD *)(v179 + 72) = *(_DWORD *)(v180 + 72);
          *(_DWORD *)(v179 + 76) = *(_DWORD *)(v180 + 76);
          *(_QWORD *)(v179 + 80) = *(_QWORD *)(v180 + 80);
          v188 = v187;
          swift_retain();
          swift_retain();
          v35 = v22;
          a3 = v216;
          swift_bridgeObjectRetain();
          goto LABEL_80;
        }
      }
      else
      {
        v5 = v136;
        v31 = __src;
        if (v181 >= 0xFFFFFFFF)
        {
          v182 = *(_QWORD *)(v180 + 8);
          *(_QWORD *)v179 = v181;
          *(_QWORD *)(v179 + 8) = v182;
          *(_DWORD *)(v179 + 16) = *(_DWORD *)(v180 + 16);
          *(_QWORD *)(v179 + 24) = *(_QWORD *)(v180 + 24);
          v183 = *(void **)(v180 + 32);
          v184 = *(void **)(v179 + 32);
          *(_QWORD *)(v179 + 32) = v183;
          v185 = v183;

          *(_QWORD *)(v179 + 40) = *(_QWORD *)(v180 + 40);
          swift_retain();
          swift_release();
          *(_DWORD *)(v179 + 48) = *(_DWORD *)(v180 + 48);
          *(_QWORD *)(v179 + 56) = *(_QWORD *)(v180 + 56);
          swift_retain();
          swift_release();
          *(_DWORD *)(v179 + 64) = *(_DWORD *)(v180 + 64);
          *(_DWORD *)(v179 + 68) = *(_DWORD *)(v180 + 68);
          *(_DWORD *)(v179 + 72) = *(_DWORD *)(v180 + 72);
          *(_DWORD *)(v179 + 76) = *(_DWORD *)(v180 + 76);
          *(_QWORD *)(v179 + 80) = *(_QWORD *)(v180 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_80:
          v16 = v209;
          goto LABEL_81;
        }

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      v189 = *(_OWORD *)(v180 + 16);
      *(_OWORD *)v179 = *(_OWORD *)v180;
      *(_OWORD *)(v179 + 16) = v189;
      v190 = *(_OWORD *)(v180 + 32);
      v191 = *(_OWORD *)(v180 + 48);
      v192 = *(_OWORD *)(v180 + 64);
      *(_QWORD *)(v179 + 80) = *(_QWORD *)(v180 + 80);
      *(_OWORD *)(v179 + 48) = v191;
      *(_OWORD *)(v179 + 64) = v192;
      *(_OWORD *)(v179 + 32) = v190;
      goto LABEL_80;
    }
  }
  if (v25)
  {
    v37 = v16;
    v31 = __src;
    v38 = __src;
    v35 = v22;
    v39 = v22;
LABEL_27:
    memcpy(v37, v38, v39);
    goto LABEL_81;
  }
  v213 = v22;
  v215 = a3;
  v210 = v5;
  *v16 = *__src;
  *v21 = *v23;
  v43 = ((unint64_t)v21 + v14 + 8) & v18;
  v44 = ((unint64_t)v23 + v14 + 8) & v18;
  *(_BYTE *)v43 = *(_BYTE *)v44;
  *(_BYTE *)(v43 | 1) = *(_BYTE *)(v44 | 1);
  *(_BYTE *)(v43 | 2) = *(_BYTE *)(v44 | 2);
  *(_BYTE *)(v43 | 3) = *(_BYTE *)(v44 | 3);
  v45 = (v43 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v46 = (v44 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v47 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  *(_DWORD *)v45 = v47;
  v48 = (v14 + 5 + v45) & v218;
  v49 = (v14 + 5 + v46) & v218;
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v217 + 16);
  swift_retain();
  swift_retain();
  v50(v48, v49, v219);
  *(_BYTE *)(v48 + v211) = *(_BYTE *)(v49 + v211);
  v51 = (v48 + v211) & 0xFFFFFFFFFFFFFFFCLL;
  v52 = (v49 + v211) & 0xFFFFFFFFFFFFFFFCLL;
  v53 = *(_DWORD *)(v52 + 4);
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_DWORD *)(v51 + 4) = v53;
  v54 = (_QWORD *)(((unint64_t)v16 + v220) & 0xFFFFFFFFFFFFFFF8);
  v55 = (_QWORD *)(((unint64_t)__src + v220) & 0xFFFFFFFFFFFFFFF8);
  *v54 = *v55;
  v56 = ((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8;
  v57 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
  v58 = *(unsigned __int8 *)(v57 + 8);
  swift_bridgeObjectRetain();
  v59 = v16;
  if (v58 > 1)
  {
    v80 = *(_QWORD *)v57;
    *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
    *(_QWORD *)v56 = v80;
  }
  else
  {
    v60 = *(_QWORD *)v57;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v57, v58 != 0);
    *(_QWORD *)v56 = v60;
    *(_BYTE *)(v56 + 8) = v58 != 0;
  }
  v81 = ((unint64_t)v54 + 31) & 0xFFFFFFFFFFFFFFF8;
  v82 = ((unint64_t)v55 + 31) & 0xFFFFFFFFFFFFFFF8;
  v83 = *(unsigned __int8 *)(v82 + 8);
  v5 = v210;
  if (v83 > 1)
  {
    v86 = *(_QWORD *)v82;
    *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
    *(_QWORD *)v81 = v86;
  }
  else
  {
    v84 = v83 != 0;
    v85 = *(_QWORD *)v82;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v82, v83 != 0);
    *(_QWORD *)v81 = v85;
    *(_BYTE *)(v81 + 8) = v84;
  }
  v87 = ((unint64_t)v54 + 47) & 0xFFFFFFFFFFFFFFF8;
  v88 = ((unint64_t)v55 + 47) & 0xFFFFFFFFFFFFFFF8;
  v89 = *(_QWORD *)v88;
  v90 = *(_QWORD *)(v88 + 8);
  v91 = *(_BYTE *)(v88 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v88, v90, v91);
  *(_QWORD *)v87 = v89;
  *(_QWORD *)(v87 + 8) = v90;
  *(_BYTE *)(v87 + 16) = v91;
  *(_QWORD *)(v87 + 24) = *(_QWORD *)(v88 + 24);
  v92 = (_QWORD *)((v87 + 39) & 0xFFFFFFFFFFFFFFF8);
  v93 = (_QWORD *)((v88 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v92 = *v93;
  v92[1] = v93[1];
  v94 = ((unint64_t)v92 + 23) & 0xFFFFFFFFFFFFFFF8;
  v95 = ((unint64_t)v93 + 23) & 0xFFFFFFFFFFFFFFF8;
  v96 = *(_QWORD *)v95;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v96 < 0xFFFFFFFF)
  {
    v100 = *(_OWORD *)(v95 + 16);
    *(_OWORD *)v94 = *(_OWORD *)v95;
    *(_OWORD *)(v94 + 16) = v100;
    v101 = *(_OWORD *)(v95 + 32);
    v102 = *(_OWORD *)(v95 + 48);
    v103 = *(_OWORD *)(v95 + 64);
    *(_QWORD *)(v94 + 80) = *(_QWORD *)(v95 + 80);
    *(_OWORD *)(v94 + 48) = v102;
    *(_OWORD *)(v94 + 64) = v103;
    *(_OWORD *)(v94 + 32) = v101;
  }
  else
  {
    v97 = *(_QWORD *)(v95 + 8);
    *(_QWORD *)v94 = v96;
    *(_QWORD *)(v94 + 8) = v97;
    *(_DWORD *)(v94 + 16) = *(_DWORD *)(v95 + 16);
    *(_QWORD *)(v94 + 24) = *(_QWORD *)(v95 + 24);
    v98 = *(void **)(v95 + 32);
    *(_QWORD *)(v94 + 32) = v98;
    *(_QWORD *)(v94 + 40) = *(_QWORD *)(v95 + 40);
    *(_DWORD *)(v94 + 48) = *(_DWORD *)(v95 + 48);
    *(_QWORD *)(v94 + 56) = *(_QWORD *)(v95 + 56);
    *(_DWORD *)(v94 + 64) = *(_DWORD *)(v95 + 64);
    *(_DWORD *)(v94 + 68) = *(_DWORD *)(v95 + 68);
    *(_DWORD *)(v94 + 72) = *(_DWORD *)(v95 + 72);
    *(_DWORD *)(v94 + 76) = *(_DWORD *)(v95 + 76);
    *(_QWORD *)(v94 + 80) = *(_QWORD *)(v95 + 80);
    v99 = v98;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v104 = (v94 + 95) & 0xFFFFFFFFFFFFFFF8;
  v105 = (v95 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v105 < 0xFFFFFFFFuLL)
  {
    v109 = *(_OWORD *)(v105 + 16);
    *(_OWORD *)v104 = *(_OWORD *)v105;
    *(_OWORD *)(v104 + 16) = v109;
    v110 = *(_OWORD *)(v105 + 32);
    v111 = *(_OWORD *)(v105 + 48);
    v112 = *(_OWORD *)(v105 + 64);
    *(_QWORD *)(v104 + 80) = *(_QWORD *)(v105 + 80);
    *(_OWORD *)(v104 + 48) = v111;
    *(_OWORD *)(v104 + 64) = v112;
    *(_OWORD *)(v104 + 32) = v110;
  }
  else
  {
    v106 = *(_QWORD *)(v105 + 8);
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *(_QWORD *)(v104 + 8) = v106;
    *(_DWORD *)(v104 + 16) = *(_DWORD *)(v105 + 16);
    *(_QWORD *)(v104 + 24) = *(_QWORD *)(v105 + 24);
    v107 = *(void **)(v105 + 32);
    *(_QWORD *)(v104 + 32) = v107;
    *(_QWORD *)(v104 + 40) = *(_QWORD *)(v105 + 40);
    *(_DWORD *)(v104 + 48) = *(_DWORD *)(v105 + 48);
    *(_QWORD *)(v104 + 56) = *(_QWORD *)(v105 + 56);
    *(_DWORD *)(v104 + 64) = *(_DWORD *)(v105 + 64);
    *(_DWORD *)(v104 + 68) = *(_DWORD *)(v105 + 68);
    *(_DWORD *)(v104 + 72) = *(_DWORD *)(v105 + 72);
    *(_DWORD *)(v104 + 76) = *(_DWORD *)(v105 + 76);
    *(_QWORD *)(v104 + 80) = *(_QWORD *)(v105 + 80);
    v108 = v107;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(v104 + 88) = *(_BYTE *)(v105 + 88);
  v113 = (v94 + 191) & 0xFFFFFFFFFFFFFFF8;
  v114 = (v95 + 191) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v114 < 0xFFFFFFFFuLL)
  {
    v118 = *(_OWORD *)(v114 + 16);
    *(_OWORD *)v113 = *(_OWORD *)v114;
    *(_OWORD *)(v113 + 16) = v118;
    v119 = *(_OWORD *)(v114 + 32);
    v120 = *(_OWORD *)(v114 + 48);
    v121 = *(_OWORD *)(v114 + 64);
    *(_QWORD *)(v113 + 80) = *(_QWORD *)(v114 + 80);
    *(_OWORD *)(v113 + 48) = v120;
    *(_OWORD *)(v113 + 64) = v121;
    *(_OWORD *)(v113 + 32) = v119;
  }
  else
  {
    v115 = *(_QWORD *)(v114 + 8);
    *(_QWORD *)v113 = *(_QWORD *)v114;
    *(_QWORD *)(v113 + 8) = v115;
    *(_DWORD *)(v113 + 16) = *(_DWORD *)(v114 + 16);
    *(_QWORD *)(v113 + 24) = *(_QWORD *)(v114 + 24);
    v116 = *(void **)(v114 + 32);
    *(_QWORD *)(v113 + 32) = v116;
    *(_QWORD *)(v113 + 40) = *(_QWORD *)(v114 + 40);
    *(_DWORD *)(v113 + 48) = *(_DWORD *)(v114 + 48);
    *(_QWORD *)(v113 + 56) = *(_QWORD *)(v114 + 56);
    *(_DWORD *)(v113 + 64) = *(_DWORD *)(v114 + 64);
    *(_DWORD *)(v113 + 68) = *(_DWORD *)(v114 + 68);
    *(_DWORD *)(v113 + 72) = *(_DWORD *)(v114 + 72);
    *(_DWORD *)(v113 + 76) = *(_DWORD *)(v114 + 76);
    *(_QWORD *)(v113 + 80) = *(_QWORD *)(v114 + 80);
    v117 = v116;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v16 = v59;
  v31 = __src;
  v35 = v213;
  a3 = v215;
LABEL_81:
  *(_QWORD *)((char *)v16 + v35) = *(_QWORD *)((char *)v31 + v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v193 = (_QWORD *)(((unint64_t)v16 + v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  v194 = (_QWORD *)(((unint64_t)v31 + v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v193 = *v194;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v195 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v196 = *(_DWORD *)(v195 + 80) & 0xF8;
  v197 = v196 + 15;
  v198 = (unint64_t)v193 + v196 + 15;
  v199 = ~v196 & 0xFFFFFFFFFFFFFFF8;
  v200 = v198 & v199;
  v201 = ((unint64_t)v194 + v197) & v199;
  (*(void (**)(unint64_t, unint64_t))(v195 + 24))(v198 & v199, v201);
  v202 = *(_QWORD *)(v195 + 64) + 7;
  v203 = (_QWORD *)((v202 + v200) & 0xFFFFFFFFFFFFFFF8);
  v204 = (_QWORD *)((v202 + v201) & 0xFFFFFFFFFFFFFFF8);
  v205 = v204[1];
  *v203 = *v204;
  v203[1] = v205;
  swift_retain();
  swift_release();
  return v5;
}

_OWORD *initializeWithTake for ToolbarReader.PrimitiveReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = type metadata accessor for AttributedString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = (v9 | 7) + 64;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  v12 = ((unint64_t)a2 + v10) & ~(v9 | 7);
  v13 = *(_DWORD *)(v8 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_QWORD *)(v8 + 64);
  v15 = ((v9 + 16) & v13) + ((((v9 + 9) & ~v9) + v14) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  v16 = ((((((((v15 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)v12;
  v18 = (uint64_t *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v73 = ~v9;
  v74 = v7;
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v19 = *v18;
    if ((unint64_t)*v18 >= 0xFFFFFFFF)
      LODWORD(v19) = -1;
    v20 = v16 + 88;
    if ((_DWORD)v19 != -1)
      goto LABEL_5;
LABEL_7:
    *v11 = *v17;
    v21 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v18;
    v22 = ((unint64_t)v21 + v9 + 8) & v13;
    v23 = ((unint64_t)v18 + v9 + 8) & v13;
    *(_BYTE *)v22 = *(_BYTE *)v23;
    *(_BYTE *)(v22 | 1) = *(_BYTE *)(v23 | 1);
    *(_BYTE *)(v22 | 2) = *(_BYTE *)(v23 | 2);
    *(_BYTE *)(v22 | 3) = *(_BYTE *)(v23 | 3);
    v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v26 = *(_DWORD *)v25;
    *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
    *(_DWORD *)v24 = v26;
    v27 = v9 + 5;
    v28 = (v9 + 5 + v24) & v73;
    v29 = (v27 + v25) & v73;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 32))(v28, v29, v74);
    *(_BYTE *)(v28 + v14) = *(_BYTE *)(v29 + v14);
    v30 = (v28 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    v31 = (v29 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    v32 = *(_DWORD *)(v31 + 4);
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(_DWORD *)(v30 + 4) = v32;
    v33 = (_QWORD *)(((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v17 + v15) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    v36 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    v37 = *(_QWORD *)v36;
    *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
    *(_QWORD *)v35 = v37;
    v38 = ((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8;
    v39 = ((unint64_t)v34 + 31) & 0xFFFFFFFFFFFFFFF8;
    LOBYTE(v35) = *(_BYTE *)(v39 + 8);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_BYTE *)(v38 + 8) = v35;
    v40 = (_OWORD *)(((unint64_t)v33 + 47) & 0xFFFFFFFFFFFFFFF8);
    v41 = (_OWORD *)(((unint64_t)v34 + 47) & 0xFFFFFFFFFFFFFFF8);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = (_OWORD *)(((unint64_t)v40 + 39) & 0xFFFFFFFFFFFFFFF8);
    v44 = (_OWORD *)(((unint64_t)v41 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v43 = *v44;
    v45 = ((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8;
    v46 = ((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8;
    v47 = *(_OWORD *)(v46 + 16);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *(_OWORD *)(v45 + 16) = v47;
    v49 = *(_OWORD *)(v46 + 48);
    v48 = *(_OWORD *)(v46 + 64);
    v50 = *(_OWORD *)(v46 + 32);
    *(_QWORD *)(v45 + 80) = *(_QWORD *)(v46 + 80);
    *(_OWORD *)(v45 + 48) = v49;
    *(_OWORD *)(v45 + 64) = v48;
    *(_OWORD *)(v45 + 32) = v50;
    v51 = (v45 + 95) & 0xFFFFFFFFFFFFFFF8;
    v52 = (v46 + 95) & 0xFFFFFFFFFFFFFFF8;
    v53 = *(_OWORD *)(v52 + 16);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *(_OWORD *)(v51 + 16) = v53;
    v55 = *(_OWORD *)(v52 + 48);
    v54 = *(_OWORD *)(v52 + 64);
    v56 = *(_OWORD *)(v52 + 32);
    *(_QWORD *)(v51 + 80) = *(_QWORD *)(v52 + 80);
    *(_OWORD *)(v51 + 48) = v55;
    *(_OWORD *)(v51 + 64) = v54;
    *(_OWORD *)(v51 + 32) = v56;
    *(_BYTE *)(v51 + 88) = *(_BYTE *)(v52 + 88);
    v57 = (v45 + 191) & 0xFFFFFFFFFFFFFFF8;
    v58 = (v46 + 191) & 0xFFFFFFFFFFFFFFF8;
    v59 = *(_OWORD *)(v58 + 32);
    v60 = *(_OWORD *)(v58 + 48);
    v61 = *(_OWORD *)(v58 + 64);
    *(_QWORD *)(v57 + 80) = *(_QWORD *)(v58 + 80);
    *(_OWORD *)(v57 + 48) = v60;
    *(_OWORD *)(v57 + 64) = v61;
    *(_OWORD *)(v57 + 32) = v59;
    v62 = *(_OWORD *)(v58 + 16);
    *(_OWORD *)v57 = *(_OWORD *)v58;
    *(_OWORD *)(v57 + 16) = v62;
    goto LABEL_8;
  }
  v20 = v16 + 88;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))((v9
                                                                    + (((((unint64_t)v18 + v9 + 8) & v13) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                    + 5) & ~v9))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v17, v20);
LABEL_8:
  *(_QWORD *)((char *)v11 + v20) = *(_QWORD *)((char *)v17 + v20);
  v63 = (_QWORD *)(((unint64_t)v11 + v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)(((unint64_t)v17 + v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v66 = *(_DWORD *)(v65 + 80) & 0xF8;
  v67 = v66 + 15;
  v68 = (unint64_t)v63 + v66 + 15;
  v69 = ~v66 & 0xFFFFFFFFFFFFFFF8;
  v70 = v68 & v69;
  v71 = ((unint64_t)v64 + v67) & v69;
  (*(void (**)(unint64_t, unint64_t))(v65 + 32))(v68 & v69, v71);
  *(_OWORD *)((*(_QWORD *)(v65 + 64) + 7 + v70) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v65 + 64) + 7 + v71) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for ToolbarReader.PrimitiveReader(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (*v35)(unint64_t, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  __int128 v56;
  _OWORD *v57;
  _OWORD *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t __n;
  uint64_t v157;
  _QWORD *__src;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (v5[3])
  {
    if (*(_QWORD *)(a2 + 24))
    {
      v5[2] = *(_QWORD *)(a2 + 16);
      swift_release();
      v5[3] = *(_QWORD *)(a2 + 24);
      swift_release();
      v5[4] = *(_QWORD *)(a2 + 32);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)(v5 + 2), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  *((_OWORD *)v5 + 1) = *(_OWORD *)(a2 + 16);
  v5[4] = *(_QWORD *)(a2 + 32);
LABEL_6:
  v5[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *((_BYTE *)v5 + 48) = *(_BYTE *)(a2 + 48);
  v5[7] = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for AttributedString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = (v10 | 7) + 64;
  v12 = (_QWORD *)(((unint64_t)v5 + v11) & ~(v10 | 7));
  v13 = (v11 + a2) & ~(v10 | 7);
  v14 = *(_DWORD *)(v8 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v157 = a3;
  __src = (_QWORD *)v13;
  v155 = ((v10 + 16) & v14) + ((((v10 + 9) & ~v10) + v15) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  __n = (((((((((v155 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 191) & 0xFFFFFFFFFFFFFFF8)
      + 88;
  v153 = ~v10;
  v154 = v7;
  v152 = v8;
  if ((v9 & 0x80000000) != 0)
  {
    v34 = v7;
    v151 = v5;
    v35 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    v150 = v35((v10 + 5 + (((((unint64_t)v16 + v10 + 8) & v14) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10, v9, v7);
    v17 = (_QWORD *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = v35((v10 + 5 + (((((unint64_t)v17 + v10 + 8) & v14) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10, v9, v34);
    v5 = v151;
    if (!v150)
      goto LABEL_10;
LABEL_23:
    if (v19)
    {
      v33 = __src;
      v26 = ((((((((((((v10 + 16) & v14) + ((((v10 + 9) & ~v10) + v15) & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF8)
                  + 47) & 0xFFFFFFFFFFFFFFF8)
                + 39) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 191) & 0xFFFFFFFFFFFFFFF8)
          + 88;
      memcpy(v12, __src, __n);
    }
    else
    {
      *v12 = *__src;
      *v16 = *v17;
      v36 = ((unint64_t)v16 + v10 + 8) & v14;
      v37 = (unint64_t)v17 + v10 + 8;
      v33 = __src;
      v38 = v37 & v14;
      *(_BYTE *)v36 = *(_BYTE *)v38;
      *(_BYTE *)(v36 | 1) = *(_BYTE *)(v38 | 1);
      *(_BYTE *)(v36 | 2) = *(_BYTE *)(v38 | 2);
      *(_BYTE *)(v36 | 3) = *(_BYTE *)(v38 | 3);
      v39 = (v36 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v40 = (v38 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v41 = *(_DWORD *)v40;
      *(_BYTE *)(v39 + 4) = *(_BYTE *)(v40 + 4);
      *(_DWORD *)v39 = v41;
      v42 = (v10 + 5 + v39) & v153;
      v43 = (v10 + 5 + v40) & v153;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 32))(v42, v43, v154);
      *(_BYTE *)(v42 + v15) = *(_BYTE *)(v43 + v15);
      v44 = (v42 + v15) & 0xFFFFFFFFFFFFFFFCLL;
      v45 = (v43 + v15) & 0xFFFFFFFFFFFFFFFCLL;
      v46 = *(_DWORD *)(v45 + 4);
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_DWORD *)(v44 + 4) = v46;
      v47 = (_QWORD *)(((unint64_t)v12 + v155) & 0xFFFFFFFFFFFFFFF8);
      v48 = (_QWORD *)(((unint64_t)__src + v155) & 0xFFFFFFFFFFFFFFF8);
      *v47 = *v48;
      v49 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
      v50 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
      v51 = *(_QWORD *)v50;
      *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
      *(_QWORD *)v49 = v51;
      v52 = ((unint64_t)v47 + 31) & 0xFFFFFFFFFFFFFFF8;
      v53 = ((unint64_t)v48 + 31) & 0xFFFFFFFFFFFFFFF8;
      LOBYTE(v49) = *(_BYTE *)(v53 + 8);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_BYTE *)(v52 + 8) = v49;
      v54 = (_OWORD *)(((unint64_t)v47 + 47) & 0xFFFFFFFFFFFFFFF8);
      v55 = (_OWORD *)(((unint64_t)v48 + 47) & 0xFFFFFFFFFFFFFFF8);
      v56 = v55[1];
      *v54 = *v55;
      v54[1] = v56;
      v57 = (_OWORD *)(((unint64_t)v54 + 39) & 0xFFFFFFFFFFFFFFF8);
      v58 = (_OWORD *)(((unint64_t)v55 + 39) & 0xFFFFFFFFFFFFFFF8);
      *v57 = *v58;
      v59 = ((unint64_t)v57 + 23) & 0xFFFFFFFFFFFFFFF8;
      v60 = ((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF8;
      v61 = *(_OWORD *)(v60 + 16);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 16) = v61;
      v63 = *(_OWORD *)(v60 + 48);
      v62 = *(_OWORD *)(v60 + 64);
      v64 = *(_OWORD *)(v60 + 32);
      *(_QWORD *)(v59 + 80) = *(_QWORD *)(v60 + 80);
      *(_OWORD *)(v59 + 48) = v63;
      *(_OWORD *)(v59 + 64) = v62;
      *(_OWORD *)(v59 + 32) = v64;
      v65 = (v59 + 95) & 0xFFFFFFFFFFFFFFF8;
      v66 = (v60 + 95) & 0xFFFFFFFFFFFFFFF8;
      v67 = *(_OWORD *)(v66 + 16);
      *(_OWORD *)v65 = *(_OWORD *)v66;
      *(_OWORD *)(v65 + 16) = v67;
      v69 = *(_OWORD *)(v66 + 48);
      v68 = *(_OWORD *)(v66 + 64);
      v70 = *(_OWORD *)(v66 + 32);
      *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
      *(_OWORD *)(v65 + 48) = v69;
      *(_OWORD *)(v65 + 64) = v68;
      *(_OWORD *)(v65 + 32) = v70;
      *(_BYTE *)(v65 + 88) = *(_BYTE *)(v66 + 88);
      v71 = (v59 + 191) & 0xFFFFFFFFFFFFFFF8;
      v72 = (v60 + 191) & 0xFFFFFFFFFFFFFFF8;
      v73 = *(_OWORD *)(v72 + 32);
      v74 = *(_OWORD *)(v72 + 48);
      v75 = *(_OWORD *)(v72 + 64);
      *(_QWORD *)(v71 + 80) = *(_QWORD *)(v72 + 80);
      *(_OWORD *)(v71 + 48) = v74;
      *(_OWORD *)(v71 + 64) = v75;
      *(_OWORD *)(v71 + 32) = v73;
      v76 = *(_OWORD *)(v72 + 16);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *(_OWORD *)(v71 + 16) = v76;
      v26 = ((((((((((((v10 + 16) & v14) + ((((v10 + 9) & ~v10) + v15) & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF8)
                  + 47) & 0xFFFFFFFFFFFFFFF8)
                + 39) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 191) & 0xFFFFFFFFFFFFFFF8)
          + 88;
    }
    v29 = a3;
    goto LABEL_54;
  }
  v17 = (_QWORD *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  if (*v17 >= 0xFFFFFFFFuLL)
    LODWORD(v18) = -1;
  v19 = v18 + 1;
  if (*v16 <= 0xFFFFFFFEuLL)
    goto LABEL_23;
LABEL_10:
  if (!v19)
  {
    *v12 = *__src;
    swift_release();
    *v16 = *v17;
    swift_release();
    v77 = ((unint64_t)v16 + v10 + 8) & v14;
    v78 = ((unint64_t)v17 + v10 + 8) & v14;
    *(_BYTE *)v77 = *(_BYTE *)v78;
    *(_BYTE *)(v77 | 1) = *(_BYTE *)(v78 | 1);
    *(_BYTE *)(v77 | 2) = *(_BYTE *)(v78 | 2);
    *(_BYTE *)(v77 | 3) = *(_BYTE *)(v78 | 3);
    v79 = (v77 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v80 = (v78 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v81 = *(_DWORD *)v80;
    *(_BYTE *)(v79 + 4) = *(_BYTE *)(v80 + 4);
    *(_DWORD *)v79 = v81;
    v82 = (v10 + 5 + v79) & v153;
    v83 = (v10 + 5 + v80) & v153;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 40))(v82, v83, v154);
    *(_BYTE *)(v82 + v15) = *(_BYTE *)(v83 + v15);
    v84 = (v82 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    v85 = (v83 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v84 + 4) = *(_DWORD *)(v85 + 4);
    *(_BYTE *)(v84 + 8) = *(_BYTE *)(v85 + 8);
    v86 = v12;
    v87 = (_QWORD *)(((unint64_t)v12 + v155) & 0xFFFFFFFFFFFFFFF8);
    v88 = (_QWORD *)(((unint64_t)__src + v155) & 0xFFFFFFFFFFFFFFF8);
    *v87 = *v88;
    swift_bridgeObjectRelease();
    v89 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
    v90 = ((unint64_t)v88 + 15) & 0xFFFFFFFFFFFFFFF8;
    v91 = *(unsigned __int8 *)(v89 + 8);
    if (v91 <= 1)
    {
      v92 = *(unsigned __int8 *)(v90 + 8);
      v93 = v91 & 1;
      if (v92 <= 1)
      {
        v94 = *(_QWORD *)v89;
        *(_QWORD *)v89 = *(_QWORD *)v90;
        *(_BYTE *)(v89 + 8) = v92 != 0;
        outlined consume of PlatformItemCollection.Storage(v94, v93);
        goto LABEL_32;
      }
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v89, v93);
    }
    v95 = *(_QWORD *)v90;
    *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
    *(_QWORD *)v89 = v95;
LABEL_32:
    v96 = ((unint64_t)v87 + 31) & 0xFFFFFFFFFFFFFFF8;
    v97 = ((unint64_t)v88 + 31) & 0xFFFFFFFFFFFFFFF8;
    v98 = *(unsigned __int8 *)(v96 + 8);
    if (v98 > 1)
    {
      v100 = v5;
    }
    else
    {
      v99 = *(unsigned __int8 *)(v97 + 8);
      v100 = v5;
      v101 = v98 & 1;
      if (v99 <= 1)
      {
        v102 = *(_QWORD *)v96;
        *(_QWORD *)v96 = *(_QWORD *)v97;
        *(_BYTE *)(v96 + 8) = v99 != 0;
        outlined consume of PlatformItemCollection.Storage(v102, v101);
        goto LABEL_38;
      }
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v96, v101);
    }
    v103 = *(_QWORD *)v97;
    *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
    *(_QWORD *)v96 = v103;
LABEL_38:
    v104 = ((unint64_t)v87 + 47) & 0xFFFFFFFFFFFFFFF8;
    v105 = ((unint64_t)v88 + 47) & 0xFFFFFFFFFFFFFFF8;
    v106 = *(_BYTE *)(v105 + 16);
    v107 = *(_QWORD *)v104;
    v108 = *(_QWORD *)(v104 + 8);
    v109 = *(_BYTE *)(v104 + 16);
    *(_OWORD *)v104 = *(_OWORD *)v105;
    *(_BYTE *)(v104 + 16) = v106;
    outlined consume of Text.Storage(v107, v108, v109);
    *(_QWORD *)(v104 + 24) = *(_QWORD *)(v105 + 24);
    swift_bridgeObjectRelease();
    v110 = (_QWORD *)((v104 + 39) & 0xFFFFFFFFFFFFFFF8);
    v111 = (_QWORD *)((v105 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v110 = *v111;
    swift_release();
    v110[1] = v111[1];
    swift_release();
    v112 = ((unint64_t)v110 + 23) & 0xFFFFFFFFFFFFFFF8;
    v113 = ((unint64_t)v111 + 23) & 0xFFFFFFFFFFFFFFF8;
    v33 = __src;
    if (*(_QWORD *)v112 >= 0xFFFFFFFFuLL)
    {
      if (*(_QWORD *)v113 >= 0xFFFFFFFFuLL)
      {
        v114 = *(_QWORD *)(v113 + 8);
        *(_QWORD *)v112 = *(_QWORD *)v113;
        *(_QWORD *)(v112 + 8) = v114;
        *(_DWORD *)(v112 + 16) = *(_DWORD *)(v113 + 16);
        *(_QWORD *)(v112 + 24) = *(_QWORD *)(v113 + 24);
        v115 = *(void **)(v112 + 32);
        *(_QWORD *)(v112 + 32) = *(_QWORD *)(v113 + 32);

        *(_QWORD *)(v112 + 40) = *(_QWORD *)(v113 + 40);
        swift_release();
        *(_DWORD *)(v112 + 48) = *(_DWORD *)(v113 + 48);
        *(_QWORD *)(v112 + 56) = *(_QWORD *)(v113 + 56);
        swift_release();
        *(_DWORD *)(v112 + 64) = *(_DWORD *)(v113 + 64);
        *(_DWORD *)(v112 + 68) = *(_DWORD *)(v113 + 68);
        *(_DWORD *)(v112 + 72) = *(_DWORD *)(v113 + 72);
        *(_DWORD *)(v112 + 76) = *(_DWORD *)(v113 + 76);
        *(_QWORD *)(v112 + 80) = *(_QWORD *)(v113 + 80);
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v116 = *(_OWORD *)(v113 + 16);
    *(_OWORD *)v112 = *(_OWORD *)v113;
    *(_OWORD *)(v112 + 16) = v116;
    v117 = *(_OWORD *)(v113 + 32);
    v118 = *(_OWORD *)(v113 + 48);
    v119 = *(_OWORD *)(v113 + 64);
    *(_QWORD *)(v112 + 80) = *(_QWORD *)(v113 + 80);
    *(_OWORD *)(v112 + 48) = v118;
    *(_OWORD *)(v112 + 64) = v119;
    *(_OWORD *)(v112 + 32) = v117;
LABEL_43:
    v120 = (v112 + 95) & 0xFFFFFFFFFFFFFFF8;
    v121 = (v113 + 95) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v120 >= 0xFFFFFFFFuLL)
    {
      if (*(_QWORD *)v121 >= 0xFFFFFFFFuLL)
      {
        v122 = *(_QWORD *)(v121 + 8);
        *(_QWORD *)v120 = *(_QWORD *)v121;
        *(_QWORD *)(v120 + 8) = v122;
        *(_DWORD *)(v120 + 16) = *(_DWORD *)(v121 + 16);
        *(_QWORD *)(v120 + 24) = *(_QWORD *)(v121 + 24);
        v123 = *(void **)(v120 + 32);
        *(_QWORD *)(v120 + 32) = *(_QWORD *)(v121 + 32);

        *(_QWORD *)(v120 + 40) = *(_QWORD *)(v121 + 40);
        swift_release();
        *(_DWORD *)(v120 + 48) = *(_DWORD *)(v121 + 48);
        *(_QWORD *)(v120 + 56) = *(_QWORD *)(v121 + 56);
        swift_release();
        *(_DWORD *)(v120 + 64) = *(_DWORD *)(v121 + 64);
        *(_DWORD *)(v120 + 68) = *(_DWORD *)(v121 + 68);
        *(_DWORD *)(v120 + 72) = *(_DWORD *)(v121 + 72);
        *(_DWORD *)(v120 + 76) = *(_DWORD *)(v121 + 76);
        *(_QWORD *)(v120 + 80) = *(_QWORD *)(v121 + 80);
        swift_bridgeObjectRelease();
LABEL_48:
        *(_BYTE *)(v120 + 88) = *(_BYTE *)(v121 + 88);
        v128 = (v112 + 191) & 0xFFFFFFFFFFFFFFF8;
        v129 = (v113 + 191) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)v128 < 0xFFFFFFFFuLL)
        {
          v132 = *(_OWORD *)(v129 + 16);
          *(_OWORD *)v128 = *(_OWORD *)v129;
          *(_OWORD *)(v128 + 16) = v132;
          v133 = *(_OWORD *)(v129 + 32);
          v134 = *(_OWORD *)(v129 + 48);
          v135 = *(_OWORD *)(v129 + 64);
          *(_QWORD *)(v128 + 80) = *(_QWORD *)(v129 + 80);
          *(_OWORD *)(v128 + 48) = v134;
          *(_OWORD *)(v128 + 64) = v135;
          *(_OWORD *)(v128 + 32) = v133;
          v5 = v100;
          v26 = (((((((((v155 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                + 191) & 0xFFFFFFFFFFFFFFF8)
              + 88;
          v29 = v157;
        }
        else
        {
          v5 = v100;
          v26 = (((((((((v155 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                + 191) & 0xFFFFFFFFFFFFFFF8)
              + 88;
          v29 = v157;
          if (*(_QWORD *)v129 < 0xFFFFFFFFuLL)
          {

            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            v136 = *(_OWORD *)(v129 + 16);
            *(_OWORD *)v128 = *(_OWORD *)v129;
            *(_OWORD *)(v128 + 16) = v136;
            v137 = *(_OWORD *)(v129 + 32);
            v138 = *(_OWORD *)(v129 + 48);
            v139 = *(_OWORD *)(v129 + 64);
            *(_QWORD *)(v128 + 80) = *(_QWORD *)(v129 + 80);
            *(_OWORD *)(v128 + 48) = v138;
            *(_OWORD *)(v128 + 64) = v139;
            *(_OWORD *)(v128 + 32) = v137;
          }
          else
          {
            v130 = *(_QWORD *)(v129 + 8);
            *(_QWORD *)v128 = *(_QWORD *)v129;
            *(_QWORD *)(v128 + 8) = v130;
            *(_DWORD *)(v128 + 16) = *(_DWORD *)(v129 + 16);
            *(_QWORD *)(v128 + 24) = *(_QWORD *)(v129 + 24);
            v131 = *(void **)(v128 + 32);
            *(_QWORD *)(v128 + 32) = *(_QWORD *)(v129 + 32);

            *(_QWORD *)(v128 + 40) = *(_QWORD *)(v129 + 40);
            swift_release();
            *(_DWORD *)(v128 + 48) = *(_DWORD *)(v129 + 48);
            *(_QWORD *)(v128 + 56) = *(_QWORD *)(v129 + 56);
            swift_release();
            *(_DWORD *)(v128 + 64) = *(_DWORD *)(v129 + 64);
            *(_DWORD *)(v128 + 68) = *(_DWORD *)(v129 + 68);
            *(_DWORD *)(v128 + 72) = *(_DWORD *)(v129 + 72);
            *(_DWORD *)(v128 + 76) = *(_DWORD *)(v129 + 76);
            *(_QWORD *)(v128 + 80) = *(_QWORD *)(v129 + 80);
            swift_bridgeObjectRelease();
          }
        }
        v12 = v86;
        goto LABEL_54;
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v124 = *(_OWORD *)(v121 + 16);
    *(_OWORD *)v120 = *(_OWORD *)v121;
    *(_OWORD *)(v120 + 16) = v124;
    v125 = *(_OWORD *)(v121 + 32);
    v126 = *(_OWORD *)(v121 + 48);
    v127 = *(_OWORD *)(v121 + 64);
    *(_QWORD *)(v120 + 80) = *(_QWORD *)(v121 + 80);
    *(_OWORD *)(v120 + 48) = v126;
    *(_OWORD *)(v120 + 64) = v127;
    *(_OWORD *)(v120 + 32) = v125;
    goto LABEL_48;
  }
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v152 + 8))((v10 + (((((unint64_t)v16 + v10 + 8) & v14) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v153, v154);
  v20 = v12;
  v21 = ((unint64_t)v12 + v155) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(unsigned __int8 *)(v22 + 8);
  if (v23 <= 1)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v22, v23 != 0);
  v24 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v24 + 8);
  v26 = ((((((((((((v10 + 16) & v14) + ((((v10 + 9) & ~v10) + v15) & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF8)
              + 47) & 0xFFFFFFFFFFFFFFF8)
            + 39) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 191) & 0xFFFFFFFFFFFFFFF8)
      + 88;
  if (v25 <= 1)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v24, v25 != 0);
  v27 = (v21 + 47) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v28 = (((v27 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = v157;
  if (*(_QWORD *)v28 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v30 = (v28 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v30 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v31 = (v28 + 191) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v31 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v12 = v20;
  v32 = v20;
  v33 = __src;
  memcpy(v32, __src, __n);
LABEL_54:
  *(_QWORD *)((char *)v12 + v26) = *(_QWORD *)((char *)v33 + v26);
  swift_bridgeObjectRelease();
  v140 = (_QWORD *)(((unint64_t)v12 + v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v141 = (_QWORD *)(((unint64_t)v33 + v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v140 = *v141;
  swift_bridgeObjectRelease();
  v142 = *(_QWORD *)(*(_QWORD *)(v29 + 16) - 8);
  v143 = *(_DWORD *)(v142 + 80) & 0xF8;
  v144 = v143 + 15;
  v145 = (unint64_t)v140 + v143 + 15;
  v146 = ~v143 & 0xFFFFFFFFFFFFFFF8;
  v147 = v145 & v146;
  v148 = ((unint64_t)v141 + v144) & v146;
  (*(void (**)(unint64_t, unint64_t))(v142 + 40))(v145 & v146, v148);
  *(_OWORD *)((*(_QWORD *)(v142 + 64) + 7 + v147) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v142 + 64)
                                                                                         + 7
                                                                                         + v148) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return v5;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.PrimitiveReader(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;

  v6 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v9 <= v11)
    v12 = v11;
  else
    v12 = v8 - 1;
  if (!a2)
    return 0;
  v13 = *(_DWORD *)(v6 + 80);
  v14 = v13 | 7;
  v15 = *(_DWORD *)(v6 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v16 = (((((((((((v13 + 16) & v15) + ((((v13 + 9) & ~v13) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_DWORD *)(v10 + 80) & 0xF8;
  v18 = ~v17 & 0xFFFFFFFFFFFFFFF8;
  v19 = v17 + 15;
  if (v12 < a2)
  {
    if (((((*(_QWORD *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
         + ((v19 + ((v16 + ((v13 + 64) & ~v14) + 103) & 0xFFFFFFFFFFFFFFF8)) & v18)
         + 16) & 0xFFFFFFF8) != 0)
      v20 = 2;
    else
      v20 = a2 - v12 + 1;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v22 = v21;
    else
      v22 = 0;
    __asm { BR              X21 }
  }
  if ((v12 & 0x80000000) != 0)
  {
    v25 = (a1 + v14 + 64) & ~v14;
    if (v9 >= v11)
    {
      v26 = (uint64_t *)((v25 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0x80000000) != 0)
      {
        v28 = (*(uint64_t (**)(unint64_t))(v6 + 48))((v13
                                                                     + (((((unint64_t)v26 + v13 + 8) & v15) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 5) & ~v13);
      }
      else
      {
        v27 = *v26;
        if ((unint64_t)*v26 >= 0xFFFFFFFF)
          LODWORD(v27) = -1;
        v28 = v27 + 1;
      }
      if (v28 >= 2)
        return v28 - 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(unint64_t, _QWORD))(v10 + 48))((v19 + ((v25 + v16 + 103) & 0xFFFFFFFFFFFFFFF8)) & v18, *(unsigned int *)(v10 + 84));
    }
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 40);
    if (v24 >= 0xFFFFFFFF)
      LODWORD(v24) = -1;
    return (v24 + 1);
  }
}

void storeEnumTagSinglePayload for ToolbarReader.PrimitiveReader(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v8 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v11 + 84) <= 0x7FFFFFFFu)
    v12 = 0x7FFFFFFF;
  else
    v12 = *(_DWORD *)(v11 + 84);
  if (v10 - 1 <= v12)
    v13 = v12;
  else
    v13 = v10 - 1;
  v14 = *(_DWORD *)(v8 + 80) | 7;
  v9 = *(_DWORD *)(v8 + 80);
  v15 = (((((((((((v9 + 16) & (v9 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL))
               + ((((v9 + 9) & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64)) & 0xFFFFFFFFFFFFFFFCLL)
               + 16) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_DWORD *)(v11 + 80) & 0xF8;
  v17 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  v18 = ((v16 + 15 + ((v15 + ((v9 + 64) & ~v14) + 103) & 0xFFFFFFFFFFFFFFF8)) & v17)
      + ((*(_QWORD *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v13 >= a3)
  {
    v20 = 0u;
    if (a2 <= v13)
      goto LABEL_22;
  }
  else
  {
    if ((_DWORD)v18)
      v19 = 2;
    else
      v19 = a3 - v13 + 1;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 < 2)
      v20 = 0;
    if (a2 <= v13)
LABEL_22:
      __asm { BR              X25 }
  }
  if ((_DWORD)v18)
  {
    v21 = ~v13 + a2;
    bzero(a1, ((v16 + 15 + ((v15 + ((*(_DWORD *)(v8 + 80) + 64) & ~v14) + 103) & 0xFFFFFFFFFFFFFFF8)) & v17)+ ((*(_QWORD *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v21;
  }
  __asm { BR              X10 }
}

void sub_187872430()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187872500);
}

void sub_187872438()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187872440);
  JUMPOUT(0x187872500);
}

void sub_187872454()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187872500);
}

void sub_18787245C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187872500);
}

void sub_187872464(int a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (v1)
  {
    if (a1 < 0)
      JUMPOUT(0x187872470);
    if (v1 < 0)
      JUMPOUT(0x1878724B4);
    *(_QWORD *)(v2 + 40) = (v1 - 1);
  }
  JUMPOUT(0x187872500);
}

uint64_t initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(a1, a2, a3, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEF90]);
}

uint64_t assignWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t initializeWithTake for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(a1, a2, a3, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEFB8]);
}

uint64_t initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  a4(a1 + 24, a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 45))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 44);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 45) = 0;
    if (a2)
      *(_BYTE *)(result + 44) = a2 + 1;
  }
  return result;
}

void type metadata completion function for ToolbarReader.ToolbarConfiguration()
{
  unint64_t v0;

  type metadata accessor for ToolbarStorage.SearchItem?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void *v65;
  id v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void *v73;
  id v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  _QWORD *v83;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = a2[4];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 56) = a2[7];
    v10 = v6[13];
    v11 = (_QWORD *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = type metadata accessor for ToolbarStorage.SearchItem(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      type metadata accessor for ToolbarStorage.SearchItem?(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v79 = v6;
      v80 = v12[1];
      v81 = v14;
      *v11 = *v12;
      v11[1] = v80;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
      v18 = *(int *)(v17 + 32);
      v19 = (char *)v11 + v18;
      v20 = (char *)v12 + v18;
      *v19 = *((_BYTE *)v12 + v18);
      v19[1] = *((_BYTE *)v12 + v18 + 1);
      *((_WORD *)v19 + 1) = *(_WORD *)((char *)v12 + v18 + 2);
      v19[8] = *((_BYTE *)v12 + v18 + 8);
      *((_DWORD *)v19 + 1) = *(_DWORD *)((char *)v12 + v18 + 4);
      v82 = (int *)v13;
      v21 = (int *)type metadata accessor for SearchFieldState();
      v22 = v21[9];
      v23 = &v19[v22];
      v24 = &v20[v22];
      v25 = type metadata accessor for AttributedString();
      v83 = v11;
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      swift_retain();
      swift_retain();
      v26(v23, v24, v25);
      v19[v21[10]] = v20[v21[10]];
      v27 = v21[11];
      v28 = &v19[v27];
      v29 = &v20[v27];
      v28[4] = v29[4];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)((char *)v83 + v82[5]) = *(_QWORD *)((char *)v12 + v82[5]);
      v30 = v82[6];
      v31 = (char *)v83 + v30;
      v32 = (char *)v12 + v30;
      v33 = *((unsigned __int8 *)v12 + v30 + 8);
      swift_bridgeObjectRetain();
      if (v33 == 255)
      {
        *(_QWORD *)v31 = *(_QWORD *)v32;
        v31[8] = v32[8];
      }
      else
      {
        v34 = v33 & 1;
        v35 = *(_QWORD *)v32;
        outlined copy of PlatformItemCollection.Storage(v35, v34);
        *(_QWORD *)v31 = v35;
        v31[8] = v34;
      }
      v6 = v79;
      v36 = v82[7];
      v37 = (char *)v83 + v36;
      v38 = (char *)v12 + v36;
      v39 = v38[8];
      if (v39 == 255)
      {
        *(_QWORD *)v37 = *(_QWORD *)v38;
        v37[8] = v38[8];
      }
      else
      {
        v40 = v39 & 1;
        v41 = *(_QWORD *)v38;
        outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v38, v39 & 1);
        *(_QWORD *)v37 = v41;
        v37[8] = v40;
      }
      v42 = v82[8];
      v43 = (char *)v83 + v42;
      v44 = (char *)v12 + v42;
      v45 = *(_QWORD *)((char *)v12 + v42);
      v46 = *(_QWORD *)((char *)v12 + v42 + 8);
      v47 = *((_BYTE *)v12 + v42 + 16);
      outlined copy of Text.Storage(v45, v46, v47);
      *(_QWORD *)v43 = v45;
      *((_QWORD *)v43 + 1) = v46;
      v43[16] = v47;
      *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
      v48 = v82[9];
      v49 = (_QWORD *)((char *)v83 + v48);
      v50 = (_QWORD *)((char *)v12 + v48);
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      v52 = v82[10];
      v53 = (char *)v83 + v52;
      v54 = (char *)v12 + v52;
      v55 = *(_QWORD *)((char *)v12 + v52);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v55)
      {
        v56 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = v55;
        *((_QWORD *)v53 + 1) = v56;
        *((_DWORD *)v53 + 4) = *((_DWORD *)v54 + 4);
        v57 = (void *)*((_QWORD *)v54 + 4);
        *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
        *((_QWORD *)v53 + 4) = v57;
        *((_QWORD *)v53 + 5) = *((_QWORD *)v54 + 5);
        *((_DWORD *)v53 + 12) = *((_DWORD *)v54 + 12);
        *((_QWORD *)v53 + 7) = *((_QWORD *)v54 + 7);
        *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
        *((_QWORD *)v53 + 10) = *((_QWORD *)v54 + 10);
        v58 = v57;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v59 = *((_OWORD *)v54 + 3);
        *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
        *((_OWORD *)v53 + 3) = v59;
        *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
        *((_QWORD *)v53 + 10) = *((_QWORD *)v54 + 10);
        v60 = *((_OWORD *)v54 + 1);
        *(_OWORD *)v53 = *(_OWORD *)v54;
        *((_OWORD *)v53 + 1) = v60;
      }
      v61 = v82[11];
      v62 = (char *)v83 + v61;
      v63 = (char *)v12 + v61;
      if (*(_QWORD *)v63)
      {
        v64 = *((_QWORD *)v63 + 1);
        *(_QWORD *)v62 = *(_QWORD *)v63;
        *((_QWORD *)v62 + 1) = v64;
        *((_DWORD *)v62 + 4) = *((_DWORD *)v63 + 4);
        v65 = (void *)*((_QWORD *)v63 + 4);
        *((_QWORD *)v62 + 3) = *((_QWORD *)v63 + 3);
        *((_QWORD *)v62 + 4) = v65;
        *((_QWORD *)v62 + 5) = *((_QWORD *)v63 + 5);
        *((_DWORD *)v62 + 12) = *((_DWORD *)v63 + 12);
        *((_QWORD *)v62 + 7) = *((_QWORD *)v63 + 7);
        *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
        *((_QWORD *)v62 + 10) = *((_QWORD *)v63 + 10);
        v66 = v65;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v67 = *((_OWORD *)v63 + 3);
        *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
        *((_OWORD *)v62 + 3) = v67;
        *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
        *((_QWORD *)v62 + 10) = *((_QWORD *)v63 + 10);
        v68 = *((_OWORD *)v63 + 1);
        *(_OWORD *)v62 = *(_OWORD *)v63;
        *((_OWORD *)v62 + 1) = v68;
      }
      *((_BYTE *)v83 + v82[12]) = *((_BYTE *)v12 + v82[12]);
      v69 = v82[13];
      v70 = (char *)v83 + v69;
      v71 = (char *)v12 + v69;
      if (*(_QWORD *)v71)
      {
        v72 = *((_QWORD *)v71 + 1);
        *(_QWORD *)v70 = *(_QWORD *)v71;
        *((_QWORD *)v70 + 1) = v72;
        *((_DWORD *)v70 + 4) = *((_DWORD *)v71 + 4);
        v73 = (void *)*((_QWORD *)v71 + 4);
        *((_QWORD *)v70 + 3) = *((_QWORD *)v71 + 3);
        *((_QWORD *)v70 + 4) = v73;
        *((_QWORD *)v70 + 5) = *((_QWORD *)v71 + 5);
        *((_DWORD *)v70 + 12) = *((_DWORD *)v71 + 12);
        *((_QWORD *)v70 + 7) = *((_QWORD *)v71 + 7);
        *((_OWORD *)v70 + 4) = *((_OWORD *)v71 + 4);
        *((_QWORD *)v70 + 10) = *((_QWORD *)v71 + 10);
        v74 = v73;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v75 = *((_OWORD *)v71 + 3);
        *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
        *((_OWORD *)v70 + 3) = v75;
        *((_OWORD *)v70 + 4) = *((_OWORD *)v71 + 4);
        *((_QWORD *)v70 + 10) = *((_QWORD *)v71 + 10);
        v76 = *((_OWORD *)v71 + 1);
        *(_OWORD *)v70 = *(_OWORD *)v71;
        *((_OWORD *)v70 + 1) = v76;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v81 + 56))(v83, 0, 1, v82);
    }
    v77 = v6[15];
    *(_QWORD *)(a1 + v6[14]) = *(uint64_t *)((char *)a2 + v6[14]);
    *(_QWORD *)(a1 + v77) = *(uint64_t *)((char *)a2 + v77);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 52);
  v5 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    swift_release();
    swift_release();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v7 = *(int *)(v6 + 32);
    v8 = v4 + *(int *)(type metadata accessor for SearchFieldState() + 36) + v7;
    v9 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    v10 = v4 + v5[6];
    v11 = *(unsigned __int8 *)(v10 + 8);
    if (v11 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v10, v11 & 1);
    v12 = v4 + v5[7];
    v13 = *(unsigned __int8 *)(v12 + 8);
    if (v13 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v12, v13 & 1);
    outlined consume of Text.Storage(*(_QWORD *)(v4 + v5[8]), *(_QWORD *)(v4 + v5[8] + 8), *(_BYTE *)(v4 + v5[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v14 = v4 + v5[10];
    if (*(_QWORD *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v15 = v4 + v5[11];
    if (*(_QWORD *)v15)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v16 = v4 + v5[13];
    if (*(_QWORD *)v16)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  id v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  id v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  _QWORD *v81;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = a3[13];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v77 = a3;
    v78 = v10[1];
    v79 = v12;
    *v9 = *v10;
    v9[1] = v78;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v16 = *(int *)(v15 + 32);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    *v17 = *((_BYTE *)v10 + v16);
    v17[1] = *((_BYTE *)v10 + v16 + 1);
    *((_WORD *)v17 + 1) = *(_WORD *)((char *)v10 + v16 + 2);
    v17[8] = *((_BYTE *)v10 + v16 + 8);
    *((_DWORD *)v17 + 1) = *(_DWORD *)((char *)v10 + v16 + 4);
    v80 = (int *)v11;
    v19 = (int *)type metadata accessor for SearchFieldState();
    v20 = v19[9];
    v21 = &v17[v20];
    v22 = &v18[v20];
    v23 = type metadata accessor for AttributedString();
    v81 = v9;
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_retain();
    swift_retain();
    v24(v21, v22, v23);
    v17[v19[10]] = v18[v19[10]];
    v25 = v19[11];
    v26 = &v17[v25];
    v27 = &v18[v25];
    v26[4] = v27[4];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    *(_QWORD *)((char *)v81 + v80[5]) = *(_QWORD *)((char *)v10 + v80[5]);
    v28 = v80[6];
    v29 = (char *)v81 + v28;
    v30 = (char *)v10 + v28;
    v31 = *((unsigned __int8 *)v10 + v28 + 8);
    swift_bridgeObjectRetain();
    if (v31 == 255)
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
    }
    else
    {
      v32 = v31 & 1;
      v33 = *(_QWORD *)v30;
      outlined copy of PlatformItemCollection.Storage(v33, v32);
      *(_QWORD *)v29 = v33;
      v29[8] = v32;
    }
    a3 = v77;
    v34 = v80[7];
    v35 = (char *)v81 + v34;
    v36 = (char *)v10 + v34;
    v37 = v36[8];
    if (v37 == 255)
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
    }
    else
    {
      v38 = v37 & 1;
      v39 = *(_QWORD *)v36;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v36, v37 & 1);
      *(_QWORD *)v35 = v39;
      v35[8] = v38;
    }
    v40 = v80[8];
    v41 = (char *)v81 + v40;
    v42 = (char *)v10 + v40;
    v43 = *(_QWORD *)((char *)v10 + v40);
    v44 = *(_QWORD *)((char *)v10 + v40 + 8);
    v45 = *((_BYTE *)v10 + v40 + 16);
    outlined copy of Text.Storage(v43, v44, v45);
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v44;
    v41[16] = v45;
    *((_QWORD *)v41 + 3) = *((_QWORD *)v42 + 3);
    v46 = v80[9];
    v47 = (_QWORD *)((char *)v81 + v46);
    v48 = (_QWORD *)((char *)v10 + v46);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = v80[10];
    v51 = (char *)v81 + v50;
    v52 = (char *)v10 + v50;
    v53 = *(_QWORD *)((char *)v10 + v50);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v53)
    {
      v54 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = v53;
      *((_QWORD *)v51 + 1) = v54;
      *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
      v55 = (void *)*((_QWORD *)v52 + 4);
      *((_QWORD *)v51 + 3) = *((_QWORD *)v52 + 3);
      *((_QWORD *)v51 + 4) = v55;
      *((_QWORD *)v51 + 5) = *((_QWORD *)v52 + 5);
      *((_DWORD *)v51 + 12) = *((_DWORD *)v52 + 12);
      *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
      *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
      *((_QWORD *)v51 + 10) = *((_QWORD *)v52 + 10);
      v56 = v55;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v57 = *((_OWORD *)v52 + 3);
      *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
      *((_OWORD *)v51 + 3) = v57;
      *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
      *((_QWORD *)v51 + 10) = *((_QWORD *)v52 + 10);
      v58 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v58;
    }
    v59 = v80[11];
    v60 = (char *)v81 + v59;
    v61 = (char *)v10 + v59;
    if (*(_QWORD *)v61)
    {
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v62;
      *((_DWORD *)v60 + 4) = *((_DWORD *)v61 + 4);
      v63 = (void *)*((_QWORD *)v61 + 4);
      *((_QWORD *)v60 + 3) = *((_QWORD *)v61 + 3);
      *((_QWORD *)v60 + 4) = v63;
      *((_QWORD *)v60 + 5) = *((_QWORD *)v61 + 5);
      *((_DWORD *)v60 + 12) = *((_DWORD *)v61 + 12);
      *((_QWORD *)v60 + 7) = *((_QWORD *)v61 + 7);
      *((_OWORD *)v60 + 4) = *((_OWORD *)v61 + 4);
      *((_QWORD *)v60 + 10) = *((_QWORD *)v61 + 10);
      v64 = v63;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v65 = *((_OWORD *)v61 + 3);
      *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
      *((_OWORD *)v60 + 3) = v65;
      *((_OWORD *)v60 + 4) = *((_OWORD *)v61 + 4);
      *((_QWORD *)v60 + 10) = *((_QWORD *)v61 + 10);
      v66 = *((_OWORD *)v61 + 1);
      *(_OWORD *)v60 = *(_OWORD *)v61;
      *((_OWORD *)v60 + 1) = v66;
    }
    *((_BYTE *)v81 + v80[12]) = *((_BYTE *)v10 + v80[12]);
    v67 = v80[13];
    v68 = (char *)v81 + v67;
    v69 = (char *)v10 + v67;
    if (*(_QWORD *)v69)
    {
      v70 = *((_QWORD *)v69 + 1);
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = v70;
      *((_DWORD *)v68 + 4) = *((_DWORD *)v69 + 4);
      v71 = (void *)*((_QWORD *)v69 + 4);
      *((_QWORD *)v68 + 3) = *((_QWORD *)v69 + 3);
      *((_QWORD *)v68 + 4) = v71;
      *((_QWORD *)v68 + 5) = *((_QWORD *)v69 + 5);
      *((_DWORD *)v68 + 12) = *((_DWORD *)v69 + 12);
      *((_QWORD *)v68 + 7) = *((_QWORD *)v69 + 7);
      *((_OWORD *)v68 + 4) = *((_OWORD *)v69 + 4);
      *((_QWORD *)v68 + 10) = *((_QWORD *)v69 + 10);
      v72 = v71;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v73 = *((_OWORD *)v69 + 3);
      *((_OWORD *)v68 + 2) = *((_OWORD *)v69 + 2);
      *((_OWORD *)v68 + 3) = v73;
      *((_OWORD *)v68 + 4) = *((_OWORD *)v69 + 4);
      *((_QWORD *)v68 + 10) = *((_QWORD *)v69 + 10);
      v74 = *((_OWORD *)v69 + 1);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *((_OWORD *)v68 + 1) = v74;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v79 + 56))(v81, 0, 1, v80);
  }
  v75 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v75) = *(_QWORD *)(a2 + v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  int v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  id v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  _QWORD *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  id v150;
  uint64_t v151;
  void *v152;
  id v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  id v170;
  uint64_t v171;
  void *v172;
  id v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  id v190;
  uint64_t v191;
  void *v192;
  id v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  int *v203;
  int *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v9 = *(_QWORD *)(a2 + 32);
      *v6 = *v7;
      *(_QWORD *)(a1 + 32) = v9;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *v6 = v10;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[13];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v202 = v15;
      v203 = a3;
      *v12 = *v13;
      v12[1] = v13[1];
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
      v20 = *(int *)(v19 + 32);
      v204 = v14;
      v205 = v12;
      v21 = (char *)v12 + v20;
      v22 = (char *)v13 + v20;
      *v21 = *((_BYTE *)v13 + v20);
      v21[1] = *((_BYTE *)v13 + v20 + 1);
      v21[2] = *((_BYTE *)v13 + v20 + 2);
      v21[3] = *((_BYTE *)v13 + v20 + 3);
      LODWORD(v20) = *(_DWORD *)((char *)v13 + v20 + 4);
      v21[8] = v22[8];
      *((_DWORD *)v21 + 1) = v20;
      v206 = v13;
      v23 = (int *)type metadata accessor for SearchFieldState();
      v24 = v23[9];
      v25 = &v21[v24];
      v26 = &v22[v24];
      v27 = type metadata accessor for AttributedString();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_retain();
      swift_retain();
      v28(v25, v26, v27);
      v21[v23[10]] = v22[v23[10]];
      v29 = v23[11];
      v30 = &v21[v29];
      v31 = &v22[v29];
      v32 = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v32;
      *(_QWORD *)((char *)v205 + v204[5]) = *(_QWORD *)((char *)v206 + v204[5]);
      v33 = v204[6];
      v34 = (char *)v205 + v33;
      v35 = (char *)v206 + v33;
      v36 = *((unsigned __int8 *)v206 + v33 + 8);
      swift_bridgeObjectRetain();
      if (v36 == 255)
      {
        v37 = *(_QWORD *)v35;
        v34[8] = v35[8];
        *(_QWORD *)v34 = v37;
      }
      else
      {
        v59 = v36 & 1;
        v60 = *(_QWORD *)v35;
        outlined copy of PlatformItemCollection.Storage(v60, v59);
        *(_QWORD *)v34 = v60;
        v34[8] = v59;
      }
      v61 = v204[7];
      v62 = (char *)v205 + v61;
      v63 = (char *)v206 + v61;
      v64 = v63[8];
      a3 = v203;
      if (v64 == 255)
      {
        v65 = *(_QWORD *)v63;
        v62[8] = v63[8];
        *(_QWORD *)v62 = v65;
      }
      else
      {
        v66 = v64 & 1;
        v67 = *(_QWORD *)v63;
        outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v63, v64 & 1);
        *(_QWORD *)v62 = v67;
        v62[8] = v66;
      }
      v68 = v204[8];
      v69 = (char *)v205 + v68;
      v70 = (char *)v206 + v68;
      v71 = *(_QWORD *)((char *)v206 + v68);
      v72 = *(_QWORD *)((char *)v206 + v68 + 8);
      v73 = *((_BYTE *)v206 + v68 + 16);
      outlined copy of Text.Storage(v71, v72, v73);
      *(_QWORD *)v69 = v71;
      *((_QWORD *)v69 + 1) = v72;
      v69[16] = v73;
      *((_QWORD *)v69 + 3) = *((_QWORD *)v70 + 3);
      v74 = v204[9];
      v75 = (_QWORD *)((char *)v205 + v74);
      v76 = (_QWORD *)((char *)v206 + v74);
      *v75 = *v76;
      v75[1] = v76[1];
      v77 = v204[10];
      v78 = (char *)v205 + v77;
      v79 = (char *)v206 + v77;
      v80 = *(_QWORD *)((char *)v206 + v77);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v80)
      {
        v81 = *((_QWORD *)v79 + 1);
        *(_QWORD *)v78 = v80;
        *((_QWORD *)v78 + 1) = v81;
        *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
        *((_QWORD *)v78 + 3) = *((_QWORD *)v79 + 3);
        v82 = (void *)*((_QWORD *)v79 + 4);
        *((_QWORD *)v78 + 4) = v82;
        *((_QWORD *)v78 + 5) = *((_QWORD *)v79 + 5);
        *((_DWORD *)v78 + 12) = *((_DWORD *)v79 + 12);
        *((_QWORD *)v78 + 7) = *((_QWORD *)v79 + 7);
        *((_DWORD *)v78 + 16) = *((_DWORD *)v79 + 16);
        *((_DWORD *)v78 + 17) = *((_DWORD *)v79 + 17);
        *((_DWORD *)v78 + 18) = *((_DWORD *)v79 + 18);
        *((_DWORD *)v78 + 19) = *((_DWORD *)v79 + 19);
        *((_QWORD *)v78 + 10) = *((_QWORD *)v79 + 10);
        v83 = v82;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v84 = *((_OWORD *)v79 + 1);
        *(_OWORD *)v78 = *(_OWORD *)v79;
        *((_OWORD *)v78 + 1) = v84;
        v85 = *((_OWORD *)v79 + 2);
        v86 = *((_OWORD *)v79 + 3);
        v87 = *((_OWORD *)v79 + 4);
        *((_QWORD *)v78 + 10) = *((_QWORD *)v79 + 10);
        *((_OWORD *)v78 + 3) = v86;
        *((_OWORD *)v78 + 4) = v87;
        *((_OWORD *)v78 + 2) = v85;
      }
      v88 = v204[11];
      v89 = (char *)v205 + v88;
      v90 = (char *)v206 + v88;
      if (*(_QWORD *)v90)
      {
        v91 = *((_QWORD *)v90 + 1);
        *(_QWORD *)v89 = *(_QWORD *)v90;
        *((_QWORD *)v89 + 1) = v91;
        *((_DWORD *)v89 + 4) = *((_DWORD *)v90 + 4);
        *((_QWORD *)v89 + 3) = *((_QWORD *)v90 + 3);
        v92 = (void *)*((_QWORD *)v90 + 4);
        *((_QWORD *)v89 + 4) = v92;
        *((_QWORD *)v89 + 5) = *((_QWORD *)v90 + 5);
        *((_DWORD *)v89 + 12) = *((_DWORD *)v90 + 12);
        *((_QWORD *)v89 + 7) = *((_QWORD *)v90 + 7);
        *((_DWORD *)v89 + 16) = *((_DWORD *)v90 + 16);
        *((_DWORD *)v89 + 17) = *((_DWORD *)v90 + 17);
        *((_DWORD *)v89 + 18) = *((_DWORD *)v90 + 18);
        *((_DWORD *)v89 + 19) = *((_DWORD *)v90 + 19);
        *((_QWORD *)v89 + 10) = *((_QWORD *)v90 + 10);
        v93 = v92;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v94 = *((_OWORD *)v90 + 1);
        *(_OWORD *)v89 = *(_OWORD *)v90;
        *((_OWORD *)v89 + 1) = v94;
        v95 = *((_OWORD *)v90 + 2);
        v96 = *((_OWORD *)v90 + 3);
        v97 = *((_OWORD *)v90 + 4);
        *((_QWORD *)v89 + 10) = *((_QWORD *)v90 + 10);
        *((_OWORD *)v89 + 3) = v96;
        *((_OWORD *)v89 + 4) = v97;
        *((_OWORD *)v89 + 2) = v95;
      }
      *((_BYTE *)v205 + v204[12]) = *((_BYTE *)v206 + v204[12]);
      v98 = v204[13];
      v99 = (char *)v205 + v98;
      v100 = (char *)v206 + v98;
      if (*(_QWORD *)v100)
      {
        v101 = *((_QWORD *)v100 + 1);
        *(_QWORD *)v99 = *(_QWORD *)v100;
        *((_QWORD *)v99 + 1) = v101;
        *((_DWORD *)v99 + 4) = *((_DWORD *)v100 + 4);
        *((_QWORD *)v99 + 3) = *((_QWORD *)v100 + 3);
        v102 = (void *)*((_QWORD *)v100 + 4);
        *((_QWORD *)v99 + 4) = v102;
        *((_QWORD *)v99 + 5) = *((_QWORD *)v100 + 5);
        *((_DWORD *)v99 + 12) = *((_DWORD *)v100 + 12);
        *((_QWORD *)v99 + 7) = *((_QWORD *)v100 + 7);
        *((_DWORD *)v99 + 16) = *((_DWORD *)v100 + 16);
        *((_DWORD *)v99 + 17) = *((_DWORD *)v100 + 17);
        *((_DWORD *)v99 + 18) = *((_DWORD *)v100 + 18);
        *((_DWORD *)v99 + 19) = *((_DWORD *)v100 + 19);
        *((_QWORD *)v99 + 10) = *((_QWORD *)v100 + 10);
        v103 = v102;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v104 = *((_OWORD *)v100 + 1);
        *(_OWORD *)v99 = *(_OWORD *)v100;
        *((_OWORD *)v99 + 1) = v104;
        v105 = *((_OWORD *)v100 + 2);
        v106 = *((_OWORD *)v100 + 3);
        v107 = *((_OWORD *)v100 + 4);
        *((_QWORD *)v99 + 10) = *((_QWORD *)v100 + 10);
        *((_OWORD *)v99 + 3) = v106;
        *((_OWORD *)v99 + 4) = v107;
        *((_OWORD *)v99 + 2) = v105;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v202 + 56))(v205, 0, 1, v204);
      goto LABEL_32;
    }
LABEL_14:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_32;
  }
  if (v18)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for ToolbarStorage.SearchItem);
    goto LABEL_14;
  }
  *v12 = *v13;
  swift_retain();
  swift_release();
  v12[1] = v13[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v40 = *(int *)(v39 + 32);
  v41 = (char *)v12 + v40;
  v42 = (char *)v13 + v40;
  *v41 = *((_BYTE *)v13 + v40);
  v41[1] = *((_BYTE *)v13 + v40 + 1);
  v41[2] = *((_BYTE *)v13 + v40 + 2);
  v41[3] = *((_BYTE *)v13 + v40 + 3);
  LODWORD(v40) = *(_DWORD *)((char *)v13 + v40 + 4);
  v41[8] = v42[8];
  *((_DWORD *)v41 + 1) = v40;
  v43 = (int *)type metadata accessor for SearchFieldState();
  v44 = v43[9];
  v45 = &v41[v44];
  v207 = v13;
  v46 = &v42[v44];
  v47 = type metadata accessor for AttributedString();
  v48 = v46;
  v49 = v207;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24))(v45, v48, v47);
  v41[v43[10]] = v42[v43[10]];
  v50 = v43[11];
  v51 = &v41[v50];
  v52 = &v42[v50];
  *(_DWORD *)v51 = *(_DWORD *)v52;
  v51[4] = v52[4];
  *(_QWORD *)((char *)v12 + v14[5]) = *(_QWORD *)((char *)v207 + v14[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = v14[6];
  v54 = (uint64_t)v12 + v53;
  v55 = (char *)v207 + v53;
  v56 = *((unsigned __int8 *)v12 + v53 + 8);
  v57 = *((unsigned __int8 *)v207 + v53 + 8);
  if (v56 == 255)
  {
    if (v57 == 255)
    {
      v109 = *(_QWORD *)v55;
      *(_BYTE *)(v54 + 8) = v55[8];
      *(_QWORD *)v54 = v109;
    }
    else
    {
      v114 = v57 & 1;
      v115 = *(_QWORD *)v55;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v55, v57 & 1);
      *(_QWORD *)v54 = v115;
      v49 = v207;
      *(_BYTE *)(v54 + 8) = v114;
    }
  }
  else if (v57 == 255)
  {
    outlined destroy of PlatformItemCollection(v54);
    v58 = v55[8];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *(_BYTE *)(v54 + 8) = v58;
  }
  else
  {
    v110 = v57 & 1;
    v111 = *(_QWORD *)v55;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v55, v57 & 1);
    v112 = *(_QWORD *)v54;
    v113 = *(_BYTE *)(v54 + 8);
    *(_QWORD *)v54 = v111;
    v49 = v207;
    *(_BYTE *)(v54 + 8) = v110;
    outlined consume of PlatformItemCollection.Storage(v112, v113);
  }
  v116 = v14[7];
  v117 = (uint64_t)v12 + v116;
  v118 = (uint64_t)v49 + v116;
  v119 = *((unsigned __int8 *)v12 + v116 + 8);
  v120 = *((unsigned __int8 *)v49 + v116 + 8);
  if (v119 == 255)
  {
    if (v120 == 255)
    {
      v122 = *(_QWORD *)v118;
      *(_BYTE *)(v117 + 8) = *(_BYTE *)(v118 + 8);
      *(_QWORD *)v117 = v122;
    }
    else
    {
      v127 = v120 & 1;
      v128 = *(_QWORD *)v118;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v118, v120 & 1);
      *(_QWORD *)v117 = v128;
      v49 = v207;
      *(_BYTE *)(v117 + 8) = v127;
    }
  }
  else if (v120 == 255)
  {
    outlined destroy of PlatformItemCollection(v117);
    v121 = *(_BYTE *)(v118 + 8);
    *(_QWORD *)v117 = *(_QWORD *)v118;
    *(_BYTE *)(v117 + 8) = v121;
  }
  else
  {
    v123 = v120 & 1;
    v124 = *(_QWORD *)v118;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v118, v120 & 1);
    v125 = *(_QWORD *)v117;
    v126 = *(_BYTE *)(v117 + 8);
    *(_QWORD *)v117 = v124;
    v49 = v207;
    *(_BYTE *)(v117 + 8) = v123;
    outlined consume of PlatformItemCollection.Storage(v125, v126);
  }
  v129 = v14[8];
  v130 = (char *)v12 + v129;
  v131 = (uint64_t)v49 + v129;
  v132 = *(_QWORD *)((char *)v49 + v129);
  v133 = *(_QWORD *)((char *)v49 + v129 + 8);
  v134 = *((_BYTE *)v49 + v129 + 16);
  outlined copy of Text.Storage(v132, v133, v134);
  v135 = *(_QWORD *)v130;
  v136 = *((_QWORD *)v130 + 1);
  v137 = v130[16];
  *(_QWORD *)v130 = v132;
  *((_QWORD *)v130 + 1) = v133;
  v130[16] = v134;
  v138 = v207;
  outlined consume of Text.Storage(v135, v136, v137);
  *((_QWORD *)v130 + 3) = *(_QWORD *)(v131 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v139 = v14[9];
  v140 = (char *)v12 + v139;
  v141 = (char *)v207 + v139;
  *(_QWORD *)((char *)v12 + v139) = *(_QWORD *)((char *)v207 + v139);
  swift_retain();
  swift_release();
  *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
  swift_retain();
  swift_release();
  v142 = v14[10];
  v143 = (uint64_t)v12 + v142;
  v144 = (char *)v207 + v142;
  v145 = *(_QWORD *)((char *)v12 + v142);
  v146 = *(_QWORD *)((char *)v207 + v142);
  if (v145)
  {
    if (v146)
    {
      v147 = *((_QWORD *)v144 + 1);
      *(_QWORD *)v143 = v146;
      *(_QWORD *)(v143 + 8) = v147;
      *(_DWORD *)(v143 + 16) = *((_DWORD *)v144 + 4);
      *(_QWORD *)(v143 + 24) = *((_QWORD *)v144 + 3);
      v148 = (void *)*((_QWORD *)v144 + 4);
      v149 = *(void **)(v143 + 32);
      *(_QWORD *)(v143 + 32) = v148;
      v150 = v148;

      *(_QWORD *)(v143 + 40) = *((_QWORD *)v144 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v143 + 48) = *((_DWORD *)v144 + 12);
      *(_QWORD *)(v143 + 56) = *((_QWORD *)v144 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v143 + 64) = *((_DWORD *)v144 + 16);
      *(_DWORD *)(v143 + 68) = *((_DWORD *)v144 + 17);
      *(_DWORD *)(v143 + 72) = *((_DWORD *)v144 + 18);
      *(_DWORD *)(v143 + 76) = *((_DWORD *)v144 + 19);
      *(_QWORD *)(v143 + 80) = *((_QWORD *)v144 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v143);
      v154 = *((_OWORD *)v144 + 1);
      *(_OWORD *)v143 = *(_OWORD *)v144;
      *(_OWORD *)(v143 + 16) = v154;
      v156 = *((_OWORD *)v144 + 3);
      v155 = *((_OWORD *)v144 + 4);
      v157 = *((_OWORD *)v144 + 2);
      *(_QWORD *)(v143 + 80) = *((_QWORD *)v144 + 10);
      *(_OWORD *)(v143 + 48) = v156;
      *(_OWORD *)(v143 + 64) = v155;
      *(_OWORD *)(v143 + 32) = v157;
    }
  }
  else if (v146)
  {
    v151 = *((_QWORD *)v144 + 1);
    *(_QWORD *)v143 = v146;
    *(_QWORD *)(v143 + 8) = v151;
    *(_DWORD *)(v143 + 16) = *((_DWORD *)v144 + 4);
    *(_QWORD *)(v143 + 24) = *((_QWORD *)v144 + 3);
    v152 = (void *)*((_QWORD *)v144 + 4);
    *(_QWORD *)(v143 + 32) = v152;
    *(_QWORD *)(v143 + 40) = *((_QWORD *)v144 + 5);
    *(_DWORD *)(v143 + 48) = *((_DWORD *)v144 + 12);
    *(_QWORD *)(v143 + 56) = *((_QWORD *)v144 + 7);
    *(_DWORD *)(v143 + 64) = *((_DWORD *)v144 + 16);
    *(_DWORD *)(v143 + 68) = *((_DWORD *)v144 + 17);
    *(_DWORD *)(v143 + 72) = *((_DWORD *)v144 + 18);
    *(_DWORD *)(v143 + 76) = *((_DWORD *)v144 + 19);
    *(_QWORD *)(v143 + 80) = *((_QWORD *)v144 + 10);
    v153 = v152;
    swift_retain();
    v138 = v207;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v158 = *((_OWORD *)v144 + 1);
    *(_OWORD *)v143 = *(_OWORD *)v144;
    *(_OWORD *)(v143 + 16) = v158;
    v159 = *((_OWORD *)v144 + 2);
    v160 = *((_OWORD *)v144 + 3);
    v161 = *((_OWORD *)v144 + 4);
    *(_QWORD *)(v143 + 80) = *((_QWORD *)v144 + 10);
    *(_OWORD *)(v143 + 48) = v160;
    *(_OWORD *)(v143 + 64) = v161;
    *(_OWORD *)(v143 + 32) = v159;
  }
  v162 = v14[11];
  v163 = (uint64_t)v12 + v162;
  v164 = (uint64_t)v138 + v162;
  v165 = *(_QWORD *)((char *)v12 + v162);
  v166 = *(_QWORD *)((char *)v138 + v162);
  if (v165)
  {
    if (v166)
    {
      v167 = *(_QWORD *)(v164 + 8);
      *(_QWORD *)v163 = v166;
      *(_QWORD *)(v163 + 8) = v167;
      *(_DWORD *)(v163 + 16) = *(_DWORD *)(v164 + 16);
      *(_QWORD *)(v163 + 24) = *(_QWORD *)(v164 + 24);
      v168 = *(void **)(v164 + 32);
      v169 = *(void **)(v163 + 32);
      *(_QWORD *)(v163 + 32) = v168;
      v170 = v168;

      *(_QWORD *)(v163 + 40) = *(_QWORD *)(v164 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(v163 + 48) = *(_DWORD *)(v164 + 48);
      *(_QWORD *)(v163 + 56) = *(_QWORD *)(v164 + 56);
      swift_retain();
      swift_release();
      *(_DWORD *)(v163 + 64) = *(_DWORD *)(v164 + 64);
      *(_DWORD *)(v163 + 68) = *(_DWORD *)(v164 + 68);
      *(_DWORD *)(v163 + 72) = *(_DWORD *)(v164 + 72);
      *(_DWORD *)(v163 + 76) = *(_DWORD *)(v164 + 76);
      *(_QWORD *)(v163 + 80) = *(_QWORD *)(v164 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v163);
      v174 = *(_OWORD *)(v164 + 16);
      *(_OWORD *)v163 = *(_OWORD *)v164;
      *(_OWORD *)(v163 + 16) = v174;
      v176 = *(_OWORD *)(v164 + 48);
      v175 = *(_OWORD *)(v164 + 64);
      v177 = *(_OWORD *)(v164 + 32);
      *(_QWORD *)(v163 + 80) = *(_QWORD *)(v164 + 80);
      *(_OWORD *)(v163 + 48) = v176;
      *(_OWORD *)(v163 + 64) = v175;
      *(_OWORD *)(v163 + 32) = v177;
    }
  }
  else if (v166)
  {
    v171 = *(_QWORD *)(v164 + 8);
    *(_QWORD *)v163 = v166;
    *(_QWORD *)(v163 + 8) = v171;
    *(_DWORD *)(v163 + 16) = *(_DWORD *)(v164 + 16);
    *(_QWORD *)(v163 + 24) = *(_QWORD *)(v164 + 24);
    v172 = *(void **)(v164 + 32);
    *(_QWORD *)(v163 + 32) = v172;
    *(_QWORD *)(v163 + 40) = *(_QWORD *)(v164 + 40);
    *(_DWORD *)(v163 + 48) = *(_DWORD *)(v164 + 48);
    *(_QWORD *)(v163 + 56) = *(_QWORD *)(v164 + 56);
    *(_DWORD *)(v163 + 64) = *(_DWORD *)(v164 + 64);
    *(_DWORD *)(v163 + 68) = *(_DWORD *)(v164 + 68);
    *(_DWORD *)(v163 + 72) = *(_DWORD *)(v164 + 72);
    *(_DWORD *)(v163 + 76) = *(_DWORD *)(v164 + 76);
    *(_QWORD *)(v163 + 80) = *(_QWORD *)(v164 + 80);
    v173 = v172;
    swift_retain();
    v138 = v207;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v178 = *(_OWORD *)(v164 + 16);
    *(_OWORD *)v163 = *(_OWORD *)v164;
    *(_OWORD *)(v163 + 16) = v178;
    v179 = *(_OWORD *)(v164 + 32);
    v180 = *(_OWORD *)(v164 + 48);
    v181 = *(_OWORD *)(v164 + 64);
    *(_QWORD *)(v163 + 80) = *(_QWORD *)(v164 + 80);
    *(_OWORD *)(v163 + 48) = v180;
    *(_OWORD *)(v163 + 64) = v181;
    *(_OWORD *)(v163 + 32) = v179;
  }
  *((_BYTE *)v12 + v14[12]) = *((_BYTE *)v138 + v14[12]);
  v182 = v14[13];
  v183 = (uint64_t)v12 + v182;
  v184 = (uint64_t)v138 + v182;
  v185 = *(_QWORD *)((char *)v12 + v182);
  v186 = *(_QWORD *)((char *)v138 + v182);
  if (v185)
  {
    if (v186)
    {
      v187 = *(_QWORD *)(v184 + 8);
      *(_QWORD *)v183 = v186;
      *(_QWORD *)(v183 + 8) = v187;
      *(_DWORD *)(v183 + 16) = *(_DWORD *)(v184 + 16);
      *(_QWORD *)(v183 + 24) = *(_QWORD *)(v184 + 24);
      v188 = *(void **)(v184 + 32);
      v189 = *(void **)(v183 + 32);
      *(_QWORD *)(v183 + 32) = v188;
      v190 = v188;

      *(_QWORD *)(v183 + 40) = *(_QWORD *)(v184 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(v183 + 48) = *(_DWORD *)(v184 + 48);
      *(_QWORD *)(v183 + 56) = *(_QWORD *)(v184 + 56);
      swift_retain();
      swift_release();
      *(_DWORD *)(v183 + 64) = *(_DWORD *)(v184 + 64);
      *(_DWORD *)(v183 + 68) = *(_DWORD *)(v184 + 68);
      *(_DWORD *)(v183 + 72) = *(_DWORD *)(v184 + 72);
      *(_DWORD *)(v183 + 76) = *(_DWORD *)(v184 + 76);
      *(_QWORD *)(v183 + 80) = *(_QWORD *)(v184 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v183);
      v194 = *(_OWORD *)(v184 + 16);
      *(_OWORD *)v183 = *(_OWORD *)v184;
      *(_OWORD *)(v183 + 16) = v194;
      v196 = *(_OWORD *)(v184 + 48);
      v195 = *(_OWORD *)(v184 + 64);
      v197 = *(_OWORD *)(v184 + 32);
      *(_QWORD *)(v183 + 80) = *(_QWORD *)(v184 + 80);
      *(_OWORD *)(v183 + 48) = v196;
      *(_OWORD *)(v183 + 64) = v195;
      *(_OWORD *)(v183 + 32) = v197;
    }
  }
  else if (v186)
  {
    v191 = *(_QWORD *)(v184 + 8);
    *(_QWORD *)v183 = v186;
    *(_QWORD *)(v183 + 8) = v191;
    *(_DWORD *)(v183 + 16) = *(_DWORD *)(v184 + 16);
    *(_QWORD *)(v183 + 24) = *(_QWORD *)(v184 + 24);
    v192 = *(void **)(v184 + 32);
    *(_QWORD *)(v183 + 32) = v192;
    *(_QWORD *)(v183 + 40) = *(_QWORD *)(v184 + 40);
    *(_DWORD *)(v183 + 48) = *(_DWORD *)(v184 + 48);
    *(_QWORD *)(v183 + 56) = *(_QWORD *)(v184 + 56);
    *(_DWORD *)(v183 + 64) = *(_DWORD *)(v184 + 64);
    *(_DWORD *)(v183 + 68) = *(_DWORD *)(v184 + 68);
    *(_DWORD *)(v183 + 72) = *(_DWORD *)(v184 + 72);
    *(_DWORD *)(v183 + 76) = *(_DWORD *)(v184 + 76);
    *(_QWORD *)(v183 + 80) = *(_QWORD *)(v184 + 80);
    v193 = v192;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v198 = *(_OWORD *)(v184 + 16);
    *(_OWORD *)v183 = *(_OWORD *)v184;
    *(_OWORD *)(v183 + 16) = v198;
    v199 = *(_OWORD *)(v184 + 32);
    v200 = *(_OWORD *)(v184 + 48);
    v201 = *(_OWORD *)(v184 + 64);
    *(_QWORD *)(v183 + 80) = *(_QWORD *)(v184 + 80);
    *(_OWORD *)(v183 + 48) = v200;
    *(_OWORD *)(v183 + 64) = v201;
    *(_OWORD *)(v183 + 32) = v199;
  }
LABEL_32:
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ToolbarReader.ToolbarConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 52);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v16 = *(int *)(v15 + 32);
    v17 = (char *)v9 + v16;
    v56 = v3;
    v18 = (char *)v10 + v16;
    *v17 = *((_BYTE *)v10 + v16);
    v17[1] = *((_BYTE *)v10 + v16 + 1);
    *((_WORD *)v17 + 1) = *(_WORD *)((char *)v10 + v16 + 2);
    v17[8] = *((_BYTE *)v10 + v16 + 8);
    *((_DWORD *)v17 + 1) = *(_DWORD *)((char *)v10 + v16 + 4);
    v55 = v12;
    v19 = (int *)type metadata accessor for SearchFieldState();
    v20 = v19[9];
    v21 = &v17[v20];
    v22 = &v18[v20];
    v23 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    v17[v19[10]] = v18[v19[10]];
    v24 = v19[11];
    v25 = &v17[v24];
    v26 = &v18[v24];
    v3 = v56;
    v25[4] = v26[4];
    *(_DWORD *)v25 = *(_DWORD *)v26;
    *(_QWORD *)((char *)v9 + v11[5]) = *(_QWORD *)((char *)v10 + v11[5]);
    v27 = v11[6];
    v28 = (char *)v9 + v27;
    v29 = (char *)v10 + v27;
    v28[8] = v29[8];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v30 = v11[7];
    v31 = (char *)v9 + v30;
    v32 = (char *)v10 + v30;
    v31[8] = v32[8];
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v33 = v11[8];
    v34 = (_OWORD *)((char *)v9 + v33);
    v35 = (_OWORD *)((char *)v10 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    *(_OWORD *)((char *)v9 + v11[9]) = *(_OWORD *)((char *)v10 + v11[9]);
    v37 = v11[10];
    v38 = (char *)v9 + v37;
    v39 = (char *)v10 + v37;
    v40 = *((_OWORD *)v39 + 1);
    *(_OWORD *)v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v40;
    *((_QWORD *)v38 + 10) = *((_QWORD *)v39 + 10);
    v41 = *((_OWORD *)v39 + 4);
    v42 = *((_OWORD *)v39 + 2);
    *((_OWORD *)v38 + 3) = *((_OWORD *)v39 + 3);
    *((_OWORD *)v38 + 4) = v41;
    *((_OWORD *)v38 + 2) = v42;
    v43 = v11[11];
    v44 = (char *)v9 + v43;
    v45 = (char *)v10 + v43;
    v46 = *((_OWORD *)v45 + 3);
    *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
    *((_OWORD *)v44 + 3) = v46;
    *((_OWORD *)v44 + 4) = *((_OWORD *)v45 + 4);
    *((_QWORD *)v44 + 10) = *((_QWORD *)v45 + 10);
    v47 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *((_OWORD *)v44 + 1) = v47;
    *((_BYTE *)v9 + v11[12]) = *((_BYTE *)v10 + v11[12]);
    v48 = v11[13];
    v49 = (char *)v9 + v48;
    v50 = (char *)v10 + v48;
    v51 = *((_OWORD *)v50 + 3);
    *((_OWORD *)v49 + 2) = *((_OWORD *)v50 + 2);
    *((_OWORD *)v49 + 3) = v51;
    *((_OWORD *)v49 + 4) = *((_OWORD *)v50 + 4);
    *((_QWORD *)v49 + 10) = *((_QWORD *)v50 + 10);
    v52 = *((_OWORD *)v50 + 1);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *((_OWORD *)v49 + 1) = v52;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v55 + 56))(v9, 0, 1, v11);
  }
  v53 = *(int *)(v3 + 60);
  *(_QWORD *)((char *)a1 + *(int *)(v3 + 56)) = *(_QWORD *)((char *)a2 + *(int *)(v3 + 56));
  *(_QWORD *)((char *)a1 + v53) = *(_QWORD *)((char *)a2 + v53);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  int *v115;
  int *v116;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_release();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityScrollableContext?(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = a3[13];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for ToolbarStorage.SearchItem);
      goto LABEL_11;
    }
    v116 = a3;
    *v8 = *v9;
    swift_release();
    v8[1] = v9[1];
    swift_release();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v57 = *(int *)(v56 + 32);
    v58 = (char *)v8 + v57;
    v59 = (char *)v9 + v57;
    *v58 = *((_BYTE *)v9 + v57);
    v58[1] = *((_BYTE *)v9 + v57 + 1);
    *((_WORD *)v58 + 1) = *(_WORD *)((char *)v9 + v57 + 2);
    v58[8] = *((_BYTE *)v9 + v57 + 8);
    *((_DWORD *)v58 + 1) = *(_DWORD *)((char *)v9 + v57 + 4);
    v60 = (int *)type metadata accessor for SearchFieldState();
    v61 = v60[9];
    v62 = &v58[v61];
    v63 = v9;
    v64 = &v59[v61];
    v65 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v62, v64, v65);
    v58[v60[10]] = v59[v60[10]];
    v66 = v60[11];
    v67 = &v58[v66];
    v68 = &v59[v66];
    *(_DWORD *)v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    *(_QWORD *)((char *)v8 + v10[5]) = *(_QWORD *)((char *)v63 + v10[5]);
    swift_bridgeObjectRelease();
    v69 = v10[6];
    v70 = (uint64_t)v8 + v69;
    v71 = (char *)v63 + v69;
    v72 = *((unsigned __int8 *)v8 + v69 + 8);
    if (v72 != 255)
    {
      v73 = v71[8];
      if (v73 != 255)
      {
        v74 = *(_QWORD *)v70;
        *(_QWORD *)v70 = *(_QWORD *)v71;
        *(_BYTE *)(v70 + 8) = v73 & 1;
        outlined consume of PlatformItemCollection.Storage(v74, v72 & 1);
LABEL_18:
        v75 = v10[7];
        v76 = (uint64_t)v8 + v75;
        v77 = (char *)v63 + v75;
        v78 = *((unsigned __int8 *)v8 + v75 + 8);
        if (v78 != 255)
        {
          v79 = v77[8];
          if (v79 != 255)
          {
            v80 = *(_QWORD *)v76;
            *(_QWORD *)v76 = *(_QWORD *)v77;
            *(_BYTE *)(v76 + 8) = v79 & 1;
            outlined consume of PlatformItemCollection.Storage(v80, v78 & 1);
LABEL_23:
            v81 = v10[8];
            v82 = (char *)v8 + v81;
            v83 = (char *)v63 + v81;
            LOBYTE(v81) = *((_BYTE *)v63 + v81 + 16);
            v84 = *(_QWORD *)v82;
            v85 = *((_QWORD *)v82 + 1);
            v86 = v82[16];
            *(_OWORD *)v82 = *(_OWORD *)v83;
            v82[16] = v81;
            outlined consume of Text.Storage(v84, v85, v86);
            *((_QWORD *)v82 + 3) = *((_QWORD *)v83 + 3);
            swift_bridgeObjectRelease();
            v87 = v10[9];
            v88 = (char *)v8 + v87;
            v89 = (char *)v63 + v87;
            *(_QWORD *)((char *)v8 + v87) = *(_QWORD *)((char *)v63 + v87);
            swift_release();
            *((_QWORD *)v88 + 1) = *((_QWORD *)v89 + 1);
            swift_release();
            v90 = v10[10];
            v91 = (uint64_t)v8 + v90;
            v92 = (char *)v63 + v90;
            if (*(_QWORD *)((char *)v8 + v90))
            {
              if (*(_QWORD *)v92)
              {
                v93 = *((_QWORD *)v92 + 1);
                *(_QWORD *)v91 = *(_QWORD *)v92;
                *(_QWORD *)(v91 + 8) = v93;
                *(_DWORD *)(v91 + 16) = *((_DWORD *)v92 + 4);
                v94 = *((_QWORD *)v92 + 4);
                v95 = *(void **)(v91 + 32);
                *(_QWORD *)(v91 + 24) = *((_QWORD *)v92 + 3);
                *(_QWORD *)(v91 + 32) = v94;

                *(_QWORD *)(v91 + 40) = *((_QWORD *)v92 + 5);
                swift_release();
                *(_DWORD *)(v91 + 48) = *((_DWORD *)v92 + 12);
                *(_QWORD *)(v91 + 56) = *((_QWORD *)v92 + 7);
                swift_release();
                *(_OWORD *)(v91 + 64) = *((_OWORD *)v92 + 4);
                *(_QWORD *)(v91 + 80) = *((_QWORD *)v92 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_28;
              }
              outlined destroy of BoundInputsView(v91);
            }
            v96 = *((_OWORD *)v92 + 3);
            *(_OWORD *)(v91 + 32) = *((_OWORD *)v92 + 2);
            *(_OWORD *)(v91 + 48) = v96;
            *(_OWORD *)(v91 + 64) = *((_OWORD *)v92 + 4);
            *(_QWORD *)(v91 + 80) = *((_QWORD *)v92 + 10);
            v97 = *((_OWORD *)v92 + 1);
            *(_OWORD *)v91 = *(_OWORD *)v92;
            *(_OWORD *)(v91 + 16) = v97;
LABEL_28:
            a3 = v116;
            v98 = v10[11];
            v99 = (uint64_t)v8 + v98;
            v100 = (char *)v63 + v98;
            if (*(_QWORD *)((char *)v8 + v98))
            {
              if (*(_QWORD *)v100)
              {
                v101 = *((_QWORD *)v100 + 1);
                *(_QWORD *)v99 = *(_QWORD *)v100;
                *(_QWORD *)(v99 + 8) = v101;
                *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
                v102 = *((_QWORD *)v100 + 4);
                v103 = *(void **)(v99 + 32);
                *(_QWORD *)(v99 + 24) = *((_QWORD *)v100 + 3);
                *(_QWORD *)(v99 + 32) = v102;

                *(_QWORD *)(v99 + 40) = *((_QWORD *)v100 + 5);
                swift_release();
                *(_DWORD *)(v99 + 48) = *((_DWORD *)v100 + 12);
                *(_QWORD *)(v99 + 56) = *((_QWORD *)v100 + 7);
                swift_release();
                *(_OWORD *)(v99 + 64) = *((_OWORD *)v100 + 4);
                *(_QWORD *)(v99 + 80) = *((_QWORD *)v100 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_33;
              }
              outlined destroy of BoundInputsView(v99);
            }
            v104 = *((_OWORD *)v100 + 3);
            *(_OWORD *)(v99 + 32) = *((_OWORD *)v100 + 2);
            *(_OWORD *)(v99 + 48) = v104;
            *(_OWORD *)(v99 + 64) = *((_OWORD *)v100 + 4);
            *(_QWORD *)(v99 + 80) = *((_QWORD *)v100 + 10);
            v105 = *((_OWORD *)v100 + 1);
            *(_OWORD *)v99 = *(_OWORD *)v100;
            *(_OWORD *)(v99 + 16) = v105;
LABEL_33:
            *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v63 + v10[12]);
            v106 = v10[13];
            v107 = (uint64_t)v8 + v106;
            v108 = (char *)v63 + v106;
            if (*(_QWORD *)v107)
            {
              if (*(_QWORD *)v108)
              {
                v109 = *((_QWORD *)v108 + 1);
                *(_QWORD *)v107 = *(_QWORD *)v108;
                *(_QWORD *)(v107 + 8) = v109;
                *(_DWORD *)(v107 + 16) = *((_DWORD *)v108 + 4);
                v110 = *((_QWORD *)v108 + 4);
                v111 = *(void **)(v107 + 32);
                *(_QWORD *)(v107 + 24) = *((_QWORD *)v108 + 3);
                *(_QWORD *)(v107 + 32) = v110;

                *(_QWORD *)(v107 + 40) = *((_QWORD *)v108 + 5);
                swift_release();
                *(_DWORD *)(v107 + 48) = *((_DWORD *)v108 + 12);
                *(_QWORD *)(v107 + 56) = *((_QWORD *)v108 + 7);
                swift_release();
                *(_OWORD *)(v107 + 64) = *((_OWORD *)v108 + 4);
                *(_QWORD *)(v107 + 80) = *((_QWORD *)v108 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_12;
              }
              outlined destroy of BoundInputsView(v107);
            }
            v112 = *((_OWORD *)v108 + 3);
            *(_OWORD *)(v107 + 32) = *((_OWORD *)v108 + 2);
            *(_OWORD *)(v107 + 48) = v112;
            *(_OWORD *)(v107 + 64) = *((_OWORD *)v108 + 4);
            *(_QWORD *)(v107 + 80) = *((_QWORD *)v108 + 10);
            v113 = *((_OWORD *)v108 + 1);
            *(_OWORD *)v107 = *(_OWORD *)v108;
            *(_OWORD *)(v107 + 16) = v113;
            goto LABEL_12;
          }
          outlined destroy of PlatformItemCollection(v76);
        }
        *(_QWORD *)v76 = *(_QWORD *)v77;
        *(_BYTE *)(v76 + 8) = v77[8];
        goto LABEL_23;
      }
      outlined destroy of PlatformItemCollection(v70);
    }
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *(_BYTE *)(v70 + 8) = v71[8];
    goto LABEL_18;
  }
  if (v14)
  {
LABEL_11:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_12;
  }
  v15 = v9[1];
  *v8 = *v9;
  v8[1] = v15;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v17 = *(int *)(v16 + 32);
  v114 = v11;
  v115 = a3;
  v18 = (char *)v8 + v17;
  v19 = (char *)v9 + v17;
  *v18 = *((_BYTE *)v9 + v17);
  v18[1] = *((_BYTE *)v9 + v17 + 1);
  *((_WORD *)v18 + 1) = *(_WORD *)((char *)v9 + v17 + 2);
  v18[8] = *((_BYTE *)v9 + v17 + 8);
  *((_DWORD *)v18 + 1) = *(_DWORD *)((char *)v9 + v17 + 4);
  v20 = (int *)type metadata accessor for SearchFieldState();
  v21 = v20[9];
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v18[v20[10]] = v19[v20[10]];
  v25 = v20[11];
  v26 = &v18[v25];
  a3 = v115;
  v27 = &v19[v25];
  v26[4] = v27[4];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_QWORD *)((char *)v8 + v10[5]) = *(_QWORD *)((char *)v9 + v10[5]);
  v28 = v10[6];
  v29 = (char *)v8 + v28;
  v30 = (char *)v9 + v28;
  v29[8] = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = v10[7];
  v32 = (char *)v8 + v31;
  v33 = (char *)v9 + v31;
  v32[8] = v33[8];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = v10[8];
  v35 = (_OWORD *)((char *)v8 + v34);
  v36 = (_OWORD *)((char *)v9 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  *(_OWORD *)((char *)v8 + v10[9]) = *(_OWORD *)((char *)v9 + v10[9]);
  v38 = v10[10];
  v39 = (char *)v8 + v38;
  v40 = (char *)v9 + v38;
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  *((_QWORD *)v39 + 10) = *((_QWORD *)v40 + 10);
  v42 = *((_OWORD *)v40 + 4);
  v43 = *((_OWORD *)v40 + 2);
  *((_OWORD *)v39 + 3) = *((_OWORD *)v40 + 3);
  *((_OWORD *)v39 + 4) = v42;
  *((_OWORD *)v39 + 2) = v43;
  v44 = v10[11];
  v45 = (char *)v8 + v44;
  v46 = (char *)v9 + v44;
  v47 = *((_OWORD *)v46 + 3);
  *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
  *((_OWORD *)v45 + 3) = v47;
  *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
  *((_QWORD *)v45 + 10) = *((_QWORD *)v46 + 10);
  v48 = *((_OWORD *)v46 + 1);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *((_OWORD *)v45 + 1) = v48;
  *((_BYTE *)v8 + v10[12]) = *((_BYTE *)v9 + v10[12]);
  v49 = v10[13];
  v50 = (char *)v8 + v49;
  v51 = (char *)v9 + v49;
  v52 = *((_OWORD *)v51 + 3);
  *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
  *((_OWORD *)v50 + 3) = v52;
  *((_OWORD *)v50 + 4) = *((_OWORD *)v51 + 4);
  *((_QWORD *)v50 + 10) = *((_QWORD *)v51 + 10);
  v53 = *((_OWORD *)v51 + 1);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *((_OWORD *)v50 + 1) = v53;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v114 + 56))(v8, 0, 1, v10);
LABEL_12:
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.ToolbarConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187874CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.ToolbarConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187874D60(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyToolbarStrategy()
{
  return &type metadata for EmptyToolbarStrategy;
}

ValueMetadata *type metadata accessor for ToolbarProxy()
{
  return &type metadata for ToolbarProxy;
}

_UNKNOWN **base witness table accessor for View in ToolbarReader<A, B>.PrimitiveReader()
{
  return &protocol witness table for ToolbarReader<A, B>.PrimitiveReader;
}

void base witness table accessor for _AttributeBody in BarEdgeReader<A>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarReader<A, B>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarReader<A, B>.UpdateToolbarBridge()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarReader<A, B>.MakeAppearances()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarReader<A, B>.MakePrimitiveReader()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ToolbarReader<A, B>.ApplyUpdatesToExternalTarget()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized ToolbarBridge.findAndSortMatchingItems(in:newStorage:context:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  BOOL v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  _OWORD v107[2];
  uint64_t v108;
  _QWORD v109[6];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  int8x16_t v115;
  int8x16_t v116;
  char v117;
  _BYTE v118[48];
  _BYTE v119[72];

  v98 = a1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v80 = *(_QWORD *)(v4 - 8);
  v81 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v89 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v97 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v85 = (uint64_t)&v77 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v77 - v15;
  v101 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1E0C80A78](v101, v17);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v77 - v22;
  v24 = type metadata accessor for ToolbarStorage.Item(0);
  v78 = *(_QWORD *)(v24 - 8);
  v79 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v88 = (uint64_t)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v77 - v29;
  v31 = type metadata accessor for ToolbarStorage.Entry(0);
  v105 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v77 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = swift_bridgeObjectRetain();
  v36 = 0;
  v37 = specialized _ArrayProtocol.filter(_:)(v35);
  swift_bridgeObjectRelease();
  v38 = v37;
  v104 = *(_QWORD *)(v37 + 16);
  if (v104)
  {
    v77 = 0;
    v100 = v19;
    v39 = 0;
    v96 = BYTE4(a3);
    v103 = v38 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
    v83 = v16 + 16;
    v84 = v16;
    v86 = v30 + 48;
    v87 = v30;
    v93 = (a3 >> 8) & 1;
    v94 = a3 & 1;
    v91 = BYTE3(a3) & 1;
    v92 = WORD1(a3) & 1;
    v95 = a3;
    v90 = HIWORD(a3) & 1;
    v99 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v40 = MEMORY[0x1E0DEE9E8];
    v106 = &v114;
    v41 = v105;
    v102 = v38;
    while (1)
    {
      if (v39 >= *(_QWORD *)(v38 + 16))
      {
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v103 + *(_QWORD *)(v41 + 72) * v39, (uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, (uint64_t)v23, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, type metadata accessor for ToolbarStorage.Entry.Kind);
        v42 = (uint64_t)v100;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, (uint64_t)v100, type metadata accessor for ToolbarStorage.Entry.Kind);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, type metadata accessor for ToolbarStorage.Entry.Kind);
          v110 = 0u;
          v111 = 0u;
          v112 = 0;
          v113 = -1;
LABEL_4:
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v110, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          goto LABEL_5;
        }
        v43 = v97;
        outlined init with take of TableCellFormula(v42, v97, type metadata accessor for ToolbarStorage.GroupItem);
        v44 = v43;
        v45 = *(_QWORD **)(v43 + 72);
        if (v45[2] == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v45 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v45);
          v44 = v97;
          if (!v45[2])
            goto LABEL_191;
          *((_BYTE *)v45
          + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
          + *(int *)(v79 + 60)) = 1;
          *(_QWORD *)(v44 + 72) = v45;
        }
        v46 = v85;
        outlined init with take of TableCellFormula(v44, v85, type metadata accessor for ToolbarStorage.GroupItem);
        v47 = v46;
        v48 = (uint64_t)v84;
        outlined init with take of TableCellFormula(v47, (uint64_t)v84, type metadata accessor for ToolbarStorage.GroupItem);
        outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v83, (uint64_t)&v110);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v48, type metadata accessor for ToolbarStorage.GroupItem);
      }
      else
      {
        v49 = v88;
        outlined init with take of TableCellFormula((uint64_t)v23, v88, type metadata accessor for ToolbarStorage.Item);
        v50 = v49;
        v51 = (uint64_t)v87;
        outlined init with take of TableCellFormula(v50, (uint64_t)v87, type metadata accessor for ToolbarStorage.Item);
        outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v86, (uint64_t)&v110);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v51, type metadata accessor for ToolbarStorage.Item);
      }
      if (v113 == 255)
        goto LABEL_4;
      v52 = v95 >> 40;
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v110, (uint64_t)v119);
      LOBYTE(v110) = v94;
      BYTE1(v110) = v93;
      BYTE2(v110) = v92;
      BYTE3(v110) = v91;
      BYTE4(v110) = v96;
      BYTE5(v110) = v52;
      BYTE6(v110) = v90;
      v53 = Toolbar.BarLocation.priority(for:context:)((uint64_t)v119, (unsigned __int8 *)&v110);
      if ((v54 & 1) == 0)
        break;
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v119);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
LABEL_5:
      ++v39;
      v41 = v105;
      v38 = v102;
      if (v39 == v104)
      {
        swift_bridgeObjectRelease();
        v36 = v77;
        v74 = v99;
        goto LABEL_188;
      }
    }
    v55 = v53;
    if (*(_QWORD *)(v40 + 16))
    {
      v82 = v53;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      ToolbarItemPlacement.Role.hash(into:)();
      v56 = Hasher._finalize()();
      v57 = -1 << *(_BYTE *)(v40 + 32);
      v58 = v56 & ~v57;
      if (((*(_QWORD *)(v40 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) != 0)
      {
        v59 = ~v57;
        do
        {
          outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v40 + 48) + 48 * v58, (uint64_t)v118);
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v118, (uint64_t)&v110);
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v119, (uint64_t)v106);
          if (v113)
          {
            if (v113 == 1)
            {
              outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v110, (uint64_t)v109);
              if (v117 == 1)
              {
                v60 = *((_OWORD *)v106 + 1);
                v107[0] = *(_OWORD *)v106;
                v107[1] = v60;
                v108 = v106[4];
                v61 = MEMORY[0x18D75E284](v109, v107);
                outlined destroy of AnyHashable((uint64_t)v107);
                outlined destroy of AnyHashable((uint64_t)v109);
                if ((v61 & 1) != 0)
                  goto LABEL_154;
LABEL_31:
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v110);
                goto LABEL_23;
              }
              outlined destroy of AnyHashable((uint64_t)v109);
            }
            else
            {
              if (!(*((_QWORD *)&v111 + 1) | v112 | (unint64_t)v110 | (unint64_t)v111 | *((_QWORD *)&v110 + 1)))
              {
                if (v117 == 2)
                {
                  v63 = vorrq_s8(v115, v116);
                  if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)) | v114))
                  {
LABEL_154:
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v110);
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v118);
                    swift_bridgeObjectRelease();
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v119);
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
                    goto LABEL_5;
                  }
                }
                goto LABEL_22;
              }
              v62 = *((_QWORD *)&v111 + 1) | v112 | v111 | *((_QWORD *)&v110 + 1);
              if ((_QWORD)v110 != 1 || v62)
              {
                if ((_QWORD)v110 != 2 || v62)
                {
                  if ((_QWORD)v110 != 3 || v62)
                  {
                    if ((_QWORD)v110 != 4 || v62)
                    {
                      if ((_QWORD)v110 != 5 || v62)
                      {
                        if ((_QWORD)v110 != 6 || v62)
                        {
                          if ((_QWORD)v110 != 7 || v62)
                          {
                            if ((_QWORD)v110 != 8 || v62)
                            {
                              if ((_QWORD)v110 != 9 || v62)
                              {
                                if ((_QWORD)v110 != 10 || v62)
                                {
                                  if ((_QWORD)v110 != 11 || v62)
                                  {
                                    if ((_QWORD)v110 != 12 || v62)
                                    {
                                      if ((_QWORD)v110 != 13 || v62)
                                      {
                                        if ((_QWORD)v110 != 14 || v62)
                                        {
                                          if ((_QWORD)v110 != 15 || v62)
                                          {
                                            if ((_QWORD)v110 != 16 || v62)
                                            {
                                              if ((_QWORD)v110 != 17 || v62)
                                              {
                                                if ((_QWORD)v110 != 18 || v62)
                                                {
                                                  if ((_QWORD)v110 != 19 || v62)
                                                  {
                                                    if ((_QWORD)v110 != 20 || v62)
                                                    {
                                                      if ((_QWORD)v110 != 21 || v62)
                                                      {
                                                        if ((_QWORD)v110 != 22 || v62)
                                                        {
                                                          if ((_QWORD)v110 != 23 || v62)
                                                          {
                                                            if (v117 == 2 && v114 == 24)
                                                            {
LABEL_153:
                                                              v64 = vorrq_s8(v115, v116);
                                                              if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v64.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)))goto LABEL_154;
                                                            }
                                                          }
                                                          else if (v117 == 2 && v114 == 23)
                                                          {
                                                            goto LABEL_153;
                                                          }
                                                        }
                                                        else if (v117 == 2 && v114 == 22)
                                                        {
                                                          goto LABEL_153;
                                                        }
                                                      }
                                                      else if (v117 == 2 && v114 == 21)
                                                      {
                                                        goto LABEL_153;
                                                      }
                                                    }
                                                    else if (v117 == 2 && v114 == 20)
                                                    {
                                                      goto LABEL_153;
                                                    }
                                                  }
                                                  else if (v117 == 2 && v114 == 19)
                                                  {
                                                    goto LABEL_153;
                                                  }
                                                }
                                                else if (v117 == 2 && v114 == 18)
                                                {
                                                  goto LABEL_153;
                                                }
                                              }
                                              else if (v117 == 2 && v114 == 17)
                                              {
                                                goto LABEL_153;
                                              }
                                            }
                                            else if (v117 == 2 && v114 == 16)
                                            {
                                              goto LABEL_153;
                                            }
                                          }
                                          else if (v117 == 2 && v114 == 15)
                                          {
                                            goto LABEL_153;
                                          }
                                        }
                                        else if (v117 == 2 && v114 == 14)
                                        {
                                          goto LABEL_153;
                                        }
                                      }
                                      else if (v117 == 2 && v114 == 13)
                                      {
                                        goto LABEL_153;
                                      }
                                    }
                                    else if (v117 == 2 && v114 == 12)
                                    {
                                      goto LABEL_153;
                                    }
                                  }
                                  else if (v117 == 2 && v114 == 11)
                                  {
                                    goto LABEL_153;
                                  }
                                }
                                else if (v117 == 2 && v114 == 10)
                                {
                                  goto LABEL_153;
                                }
                              }
                              else if (v117 == 2 && v114 == 9)
                              {
                                goto LABEL_153;
                              }
                            }
                            else if (v117 == 2 && v114 == 8)
                            {
                              goto LABEL_153;
                            }
                          }
                          else if (v117 == 2 && v114 == 7)
                          {
                            goto LABEL_153;
                          }
                        }
                        else if (v117 == 2 && v114 == 6)
                        {
                          goto LABEL_153;
                        }
                      }
                      else if (v117 == 2 && v114 == 5)
                      {
                        goto LABEL_153;
                      }
                    }
                    else if (v117 == 2 && v114 == 4)
                    {
                      goto LABEL_153;
                    }
                  }
                  else if (v117 == 2 && v114 == 3)
                  {
                    goto LABEL_153;
                  }
                }
                else if (v117 == 2 && v114 == 2)
                {
                  goto LABEL_153;
                }
              }
              else if (v117 == 2 && v114 == 1)
              {
                goto LABEL_153;
              }
            }
          }
          else
          {
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v110, (uint64_t)v109);
            if (!v117)
            {
              if (LOBYTE(v109[0]) == v114)
                goto LABEL_154;
              goto LABEL_31;
            }
          }
LABEL_22:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)&v110, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role));
LABEL_23:
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v118);
          v58 = (v58 + 1) & v59;
        }
        while (((*(_QWORD *)(v40 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) != 0);
      }
      swift_bridgeObjectRelease();
      v55 = v82;
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v119, (uint64_t)&v110);
    if (v113)
    {
      if (v113 == 1)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v110);
LABEL_165:
        v67 = *(int *)(v81 + 48);
        v68 = v89;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, v89, type metadata accessor for ToolbarStorage.Entry);
        *(_QWORD *)(v68 + v67) = v55;
        v69 = v99;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v69 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
        v71 = v69[2];
        v70 = v69[3];
        v99 = v69;
        if (v71 >= v70 >> 1)
          v99 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1, v99);
        v72 = v99;
        v99[2] = v71 + 1;
        outlined init with take of TableCellFormula(v89, (uint64_t)v72+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v71, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v119);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, type metadata accessor for ToolbarStorage.Entry);
        goto LABEL_5;
      }
      if (*((_QWORD *)&v111 + 1) | v112 | (unint64_t)v110 | (unint64_t)v111 | *((_QWORD *)&v110 + 1))
      {
        v65 = *((_QWORD *)&v111 + 1) | v112 | v111 | *((_QWORD *)&v110 + 1);
        if ((unint64_t)(v110 - 1) > 7 || v65)
        {
          if ((unint64_t)(v110 - 9) <= 9 && !v65)
            goto LABEL_165;
          if ((_QWORD)v110 != 19 || v65)
          {
            v73 = (v110 & 0xFFFFFFFFFFFFFFFELL) == 0x14 || (_QWORD)v110 == 22;
            if (v73 && !v65)
              goto LABEL_165;
          }
        }
      }
    }
    outlined init with copy of Toolbar.BarLocation(v98, (uint64_t)&v110);
    switch(*((_QWORD *)&v111 + 1))
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
        goto LABEL_164;
      case 1:
      case 8:
      case 9:
      case 0xALL:
      case 0xBLL:
      case 0xCLL:
      case 0xDLL:
      case 0xELL:
        goto LABEL_165;
      case 2:
      case 3:
        if ((static SemanticFeature.isEnabled.getter() & 1) == 0 && (_DWORD)v96 != 2 && (v95 & 0x100000000) == 0)
        {
LABEL_164:
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v119, (uint64_t)v118);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v109[0] = v40;
          specialized _NativeSet.update(with:isUnique:)((uint64_t)v118, isUniquelyReferenced_nonNull_native, (uint64_t)&v110);
          v40 = v109[0];
          swift_bridgeObjectRelease();
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v110, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        }
        break;
      default:
        outlined destroy of Toolbar.BarLocation((uint64_t)&v110);
        break;
    }
    goto LABEL_165;
  }
  swift_bridgeObjectRelease();
  v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_188:
  *(_QWORD *)&v110 = v74;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)((_QWORD **)&v110);
  if (v36)
  {
LABEL_192:
    swift_release();
    __break(1u);
    JUMPOUT(0x187875CB8);
  }
  swift_bridgeObjectRelease();
  v75 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryV_SitG_AJs5NeverOTg503_s7d4UI14fg2V5h21VSiAEIgnyr_AE_SitAEs5i128OIegnrzr_TR03_s7a4UI13c104BridgeC24findAndSortMatchingItems33_558B6B1E48F37C8B0E16B128287879E02in10newStorage7contextSayAA0cU0l46E52VGAA0C0O11BarLocationO_AjO0X7ContextVtFA2L_P16XEfU0_Tf3nnnpf_nTf1cn_n(v110);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v75;
}

uint64_t sub_187875CF4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_187875D18()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187875D4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_release();
  v4 = v1 + ((v3 + 64) & ~v3);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 52);
  v6 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v8 = *(int *)(v7 + 32);
    v9 = v5 + v8 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v10 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    v11 = v5 + v6[6];
    v12 = *(unsigned __int8 *)(v11 + 8);
    if (v12 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v11, v12 & 1);
    v13 = v5 + v6[7];
    v14 = *(unsigned __int8 *)(v13 + 8);
    if (v14 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v13, v14 & 1);
    outlined consume of Text.Storage(*(_QWORD *)(v5 + v6[8]), *(_QWORD *)(v5 + v6[8] + 8), *(_BYTE *)(v5 + v6[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v15 = v5 + v6[10];
    if (*(_QWORD *)v15)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v16 = v5 + v6[11];
    if (*(_QWORD *)v16)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v17 = v5 + v6[13];
    if (*(_QWORD *)v17)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

void sub_187875FC8()
{
  closure #1 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()();
}

void type metadata accessor for ToolbarReader.Mutation()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for (ToolbarStorage.Entry?, ToolbarStorage.Entry?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ToolbarStorage.Entry?, ToolbarStorage.Entry?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarStorage.Entry?, ToolbarStorage.Entry?));
  }
}

void type metadata accessor for Binding<Int>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Int>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Int>?);
  }
}

uint64_t specialized ToolbarReader.UpdateToolbarBridge.configure(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;
  uint64_t inited;
  char v8;
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[5];
  uint64_t v21;

  v5 = static ToolbarEdges.bars.getter(a2, a4);
  v21 = MEMORY[0x1E0DEE9E8];
  memset(v20, 0, sizeof(v20));
  v6 = specialized Set.contains(_:)((uint64_t)v20, v5);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  if ((v6 & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Toolbar.BarLocation>, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187C05380;
    *(_QWORD *)(inited + 40) = 0;
    *(_QWORD *)(inited + 48) = 0;
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 56) = 3;
    *(_OWORD *)(inited + 64) = 0u;
    *(_OWORD *)(inited + 80) = 0u;
    *(_QWORD *)(inited + 96) = 2;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
    *(_OWORD *)(inited + 136) = 0u;
    specialized Set.formUnion<A>(_:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  memset(v20, 0, 24);
  *(_OWORD *)&v20[3] = xmmword_187C39070;
  v8 = specialized Set.contains(_:)((uint64_t)v20, v5);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  if ((v8 & 1) != 0)
  {
    v9 = v21;
  }
  else
  {
    memset(v20, 0, 24);
    *(_OWORD *)&v20[3] = xmmword_187BFE310;
    v10 = specialized Set.contains(_:)((uint64_t)v20, v5);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
    v9 = v21;
    if ((v10 & 1) == 0)
      goto LABEL_7;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = xmmword_187C66320;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeSet.update(with:isUnique:)((uint64_t)&v16, isUniquelyReferenced_nonNull_native, (uint64_t)v20);
  swift_bridgeObjectRelease();
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v20, &lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_7:
  memset(v20, 0, 24);
  *(_OWORD *)&v20[3] = xmmword_187C304D0;
  v12 = specialized Set.contains(_:)((uint64_t)v20, v5);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  if ((v12 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = xmmword_187C39040;
    v13 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)&v16, v13, (uint64_t)v20);
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v20, &lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  v14 = (_QWORD *)(a1 + direct field offset for ToolbarBridge.allowedLocations);
  swift_beginAccess();
  *v14 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t outlined copy of ToolbarStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a3, a4);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of EmptyToolbarStrategy(uint64_t a1)
{
  destroy for UIKitToolbarStrategy(a1);
  return a1;
}

uint64_t partial apply for specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(_OWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[4];

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v8 = a1[3];
  v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v10, v2, v3, v4, v5, v6);
}

void partial apply for closure #1 in ToolbarReader.MakeView.value.getter()
{
  closure #1 in ToolbarReader.MakeView.value.getter();
}

void partial apply for closure #1 in closure #1 in ToolbarReader.MakeView.value.getter()
{
  closure #1 in closure #1 in ToolbarReader.MakeView.value.getter();
}

void type metadata completion function for ToolbarReader.Mutation()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarReader.Mutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 52);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = *(_QWORD *)((char *)a2 + v5 + 8);
    *(_QWORD *)v6 = *(_QWORD *)((char *)a2 + v5);
    *((_QWORD *)v6 + 1) = v8;
    v9 = *(_QWORD *)((char *)a2 + v5 + 24);
    swift_bridgeObjectRetain();
    if (v9)
    {
      *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v6 + 3) = v9;
      *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v6 + 1) = *((_OWORD *)v7 + 1);
      *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
    }
    *((_QWORD *)v6 + 5) = *((_QWORD *)v7 + 5);
    v6[48] = v7[48];
    *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    type metadata accessor for ToolbarReader.ToolbarConfiguration();
  }
  v10 = *a2;
  *a1 = *a2;
  v11 = v10 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v11;
}

void destroy for ToolbarReader.Mutation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + *(int *)(a2 + 52);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187876AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1 + *(int *)(a1 + 52);
  v3 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v3 - 1) + 48))(v2, 1, v3))
  {
    swift_release();
    swift_release();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v5 = *(int *)(v4 + 32);
    v6 = v2 + *(int *)(type metadata accessor for SearchFieldState() + 36) + v5;
    v7 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    v8 = v2 + v3[6];
    v9 = *(unsigned __int8 *)(v8 + 8);
    if (v9 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v8, v9 & 1);
    v10 = v2 + v3[7];
    v11 = *(unsigned __int8 *)(v10 + 8);
    if (v11 != 255)
      outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v10, v11 & 1);
    outlined consume of Text.Storage(*(_QWORD *)(v2 + v3[8]), *(_QWORD *)(v2 + v3[8] + 8), *(_BYTE *)(v2 + v3[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v12 = v2 + v3[10];
    if (*(_QWORD *)v12)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v13 = v2 + v3[11];
    if (*(_QWORD *)v13)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v14 = v2 + v3[13];
    if (*(_QWORD *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for ToolbarReader.Mutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v3 = *(int *)(a3 + 52);
  v4 = (char *)a1 + v3;
  v5 = (char *)a2 + v3;
  v6 = *(_QWORD *)((char *)a2 + v3 + 8);
  *(_QWORD *)v4 = *(_QWORD *)((char *)a2 + v3);
  *((_QWORD *)v4 + 1) = v6;
  v7 = *(_QWORD *)((char *)a2 + v3 + 24);
  swift_bridgeObjectRetain();
  if (v7)
  {
    *((_QWORD *)v4 + 2) = *((_QWORD *)v5 + 2);
    *((_QWORD *)v4 + 3) = v7;
    *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v4 + 1) = *((_OWORD *)v5 + 1);
    *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
  }
  *((_QWORD *)v4 + 5) = *((_QWORD *)v5 + 5);
  v4[48] = v5[48];
  *((_QWORD *)v4 + 7) = *((_QWORD *)v5 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187876D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  id v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  id v68;
  __int128 v69;
  __int128 v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  _QWORD *v77;

  v4 = a1;
  v5 = *(int *)(a1 + 52);
  v6 = (_QWORD *)(v1 + v5);
  v7 = (_QWORD *)(v3 + v5);
  v8 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v73 = v9;
    v74 = v4;
    v75 = v2;
    v72 = v7[1];
    *v6 = *v7;
    v6[1] = v72;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v12 = *(int *)(v11 + 32);
    v76 = (int *)v8;
    v13 = (char *)v6 + v12;
    v14 = (char *)v7 + v12;
    *v13 = *((_BYTE *)v7 + v12);
    v13[1] = *((_BYTE *)v7 + v12 + 1);
    *((_WORD *)v13 + 1) = *(_WORD *)((char *)v7 + v12 + 2);
    v13[8] = *((_BYTE *)v7 + v12 + 8);
    *((_DWORD *)v13 + 1) = *(_DWORD *)((char *)v7 + v12 + 4);
    v15 = (int *)type metadata accessor for SearchFieldState();
    v16 = v15[9];
    v17 = &v13[v16];
    v18 = &v14[v16];
    v19 = type metadata accessor for AttributedString();
    v77 = v6;
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_retain();
    swift_retain();
    v20(v17, v18, v19);
    v13[v15[10]] = v14[v15[10]];
    v21 = v15[11];
    v22 = &v13[v21];
    v23 = &v14[v21];
    v22[4] = v23[4];
    *(_DWORD *)v22 = *(_DWORD *)v23;
    *(_QWORD *)((char *)v77 + v76[5]) = *(_QWORD *)((char *)v7 + v76[5]);
    v24 = v76[6];
    v25 = (char *)v77 + v24;
    v26 = (char *)v7 + v24;
    v27 = *((unsigned __int8 *)v7 + v24 + 8);
    swift_bridgeObjectRetain();
    if (v27 == 255)
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
    }
    else
    {
      v28 = v27 & 1;
      v29 = *(_QWORD *)v26;
      outlined copy of PlatformItemCollection.Storage(v29, v28);
      *(_QWORD *)v25 = v29;
      v25[8] = v28;
    }
    v30 = v76[7];
    v31 = (char *)v77 + v30;
    v32 = (char *)v7 + v30;
    v33 = v32[8];
    if (v33 == 255)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
    }
    else
    {
      v34 = v33 & 1;
      v35 = *(_QWORD *)v32;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v32, v33 & 1);
      *(_QWORD *)v31 = v35;
      v31[8] = v34;
    }
    v36 = v76[8];
    v37 = (char *)v77 + v36;
    v38 = (char *)v7 + v36;
    v39 = *(_QWORD *)((char *)v7 + v36);
    v40 = *(_QWORD *)((char *)v7 + v36 + 8);
    v41 = *((_BYTE *)v7 + v36 + 16);
    outlined copy of Text.Storage(v39, v40, v41);
    *(_QWORD *)v37 = v39;
    *((_QWORD *)v37 + 1) = v40;
    v37[16] = v41;
    *((_QWORD *)v37 + 3) = *((_QWORD *)v38 + 3);
    v42 = v76[9];
    v43 = (_QWORD *)((char *)v77 + v42);
    v44 = (_QWORD *)((char *)v7 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v76[10];
    v47 = (char *)v77 + v46;
    v48 = (char *)v7 + v46;
    v49 = *(_QWORD *)((char *)v7 + v46);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v49)
    {
      v50 = *((_QWORD *)v48 + 1);
      *(_QWORD *)v47 = v49;
      *((_QWORD *)v47 + 1) = v50;
      *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
      v51 = (void *)*((_QWORD *)v48 + 4);
      *((_QWORD *)v47 + 3) = *((_QWORD *)v48 + 3);
      *((_QWORD *)v47 + 4) = v51;
      *((_QWORD *)v47 + 5) = *((_QWORD *)v48 + 5);
      *((_DWORD *)v47 + 12) = *((_DWORD *)v48 + 12);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      *((_OWORD *)v47 + 4) = *((_OWORD *)v48 + 4);
      *((_QWORD *)v47 + 10) = *((_QWORD *)v48 + 10);
      v52 = v51;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v53 = *((_OWORD *)v48 + 3);
      *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
      *((_OWORD *)v47 + 3) = v53;
      *((_OWORD *)v47 + 4) = *((_OWORD *)v48 + 4);
      *((_QWORD *)v47 + 10) = *((_QWORD *)v48 + 10);
      v54 = *((_OWORD *)v48 + 1);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v54;
    }
    v55 = v76[11];
    v56 = (char *)v77 + v55;
    v57 = (char *)v7 + v55;
    if (*(_QWORD *)v57)
    {
      v58 = *((_QWORD *)v57 + 1);
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = v58;
      *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
      v59 = (void *)*((_QWORD *)v57 + 4);
      *((_QWORD *)v56 + 3) = *((_QWORD *)v57 + 3);
      *((_QWORD *)v56 + 4) = v59;
      *((_QWORD *)v56 + 5) = *((_QWORD *)v57 + 5);
      *((_DWORD *)v56 + 12) = *((_DWORD *)v57 + 12);
      *((_QWORD *)v56 + 7) = *((_QWORD *)v57 + 7);
      *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
      *((_QWORD *)v56 + 10) = *((_QWORD *)v57 + 10);
      v60 = v59;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v61 = *((_OWORD *)v57 + 3);
      *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
      *((_OWORD *)v56 + 3) = v61;
      *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
      *((_QWORD *)v56 + 10) = *((_QWORD *)v57 + 10);
      v62 = *((_OWORD *)v57 + 1);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      *((_OWORD *)v56 + 1) = v62;
    }
    *((_BYTE *)v77 + v76[12]) = *((_BYTE *)v7 + v76[12]);
    v63 = v76[13];
    v64 = (char *)v77 + v63;
    v65 = (char *)v7 + v63;
    if (*(_QWORD *)v65)
    {
      v66 = *((_QWORD *)v65 + 1);
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *((_QWORD *)v64 + 1) = v66;
      *((_DWORD *)v64 + 4) = *((_DWORD *)v65 + 4);
      v67 = (void *)*((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      *((_QWORD *)v64 + 4) = v67;
      *((_QWORD *)v64 + 5) = *((_QWORD *)v65 + 5);
      *((_DWORD *)v64 + 12) = *((_DWORD *)v65 + 12);
      *((_QWORD *)v64 + 7) = *((_QWORD *)v65 + 7);
      *((_OWORD *)v64 + 4) = *((_OWORD *)v65 + 4);
      *((_QWORD *)v64 + 10) = *((_QWORD *)v65 + 10);
      v68 = v67;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v69 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v69;
      *((_OWORD *)v64 + 4) = *((_OWORD *)v65 + 4);
      *((_QWORD *)v64 + 10) = *((_QWORD *)v65 + 10);
      v70 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v70;
    }
    v4 = v74;
    v2 = v75;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v73 + 56))(v77, 0, 1, v76);
  }
  *(_QWORD *)(v1 + *(int *)(v4 + 56)) = *(_QWORD *)(v3 + *(int *)(v4 + 56));
  *(_QWORD *)(v1 + *(int *)(v4 + 60)) = *(_QWORD *)(v3 + *(int *)(v4 + 60));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

void assignWithCopy for ToolbarReader.Mutation(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = *(int *)(a3 + 52);
  v4 = (char *)a1 + v3;
  v5 = (char *)a2 + v3;
  *(_QWORD *)v4 = *(_QWORD *)((char *)a2 + v3);
  *((_QWORD *)v4 + 1) = *(_QWORD *)((char *)a2 + v3 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = v4 + 16;
  v7 = v5 + 16;
  v8 = *((_QWORD *)v5 + 3);
  if (*((_QWORD *)v4 + 3))
  {
    if (v8)
    {
      *((_QWORD *)v4 + 2) = *((_QWORD *)v5 + 2);
      swift_retain();
      swift_release();
      *((_QWORD *)v4 + 3) = *((_QWORD *)v5 + 3);
      swift_retain();
      swift_release();
      *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)(v4 + 16), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v9 = *((_QWORD *)v5 + 4);
      *v6 = *v7;
      *((_QWORD *)v4 + 4) = v9;
    }
  }
  else if (v8)
  {
    *((_QWORD *)v4 + 2) = *((_QWORD *)v5 + 2);
    *((_QWORD *)v4 + 3) = *((_QWORD *)v5 + 3);
    *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
    swift_retain();
    swift_retain();
  }
  else
  {
    v10 = *v7;
    *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
    *v6 = v10;
  }
  *((_QWORD *)v4 + 5) = *((_QWORD *)v5 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4[48] = v5[48];
  *((_QWORD *)v4 + 7) = *((_QWORD *)v5 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187877378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *v96;
  id v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  id v145;
  uint64_t v146;
  void *v147;
  id v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  id v165;
  uint64_t v166;
  void *v167;
  id v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  id v184;
  uint64_t v185;
  void *v186;
  id v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  int *v202;
  int *v203;
  _QWORD *v204;
  _QWORD *v205;

  v4 = a1;
  v5 = *(int *)(a1 + 52);
  v6 = (_QWORD *)(v1 + v5);
  v7 = (_QWORD *)(v3 + v5);
  v8 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      v196 = v9;
      v197 = v4;
      v198 = v3;
      v199 = v2;
      *v6 = *v7;
      v6[1] = v7[1];
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
      v14 = *(int *)(v13 + 32);
      v15 = (char *)v6 + v14;
      v201 = v6;
      v16 = (char *)v7 + v14;
      *v15 = *((_BYTE *)v7 + v14);
      v15[1] = *((_BYTE *)v7 + v14 + 1);
      v15[2] = *((_BYTE *)v7 + v14 + 2);
      v15[3] = *((_BYTE *)v7 + v14 + 3);
      LODWORD(v14) = *(_DWORD *)((char *)v7 + v14 + 4);
      v15[8] = v16[8];
      *((_DWORD *)v15 + 1) = v14;
      v202 = (int *)v8;
      v204 = v7;
      v17 = (int *)type metadata accessor for SearchFieldState();
      v18 = v17[9];
      v19 = &v15[v18];
      v20 = &v16[v18];
      v21 = type metadata accessor for AttributedString();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      swift_retain();
      swift_retain();
      v22(v19, v20, v21);
      v15[v17[10]] = v16[v17[10]];
      v23 = v17[11];
      v24 = &v15[v23];
      v25 = &v16[v23];
      v26 = v25[4];
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v24[4] = v26;
      *(_QWORD *)((char *)v201 + v202[5]) = *(_QWORD *)((char *)v204 + v202[5]);
      v27 = v202[6];
      v28 = (char *)v201 + v27;
      v29 = (char *)v204 + v27;
      v30 = *((unsigned __int8 *)v204 + v27 + 8);
      swift_bridgeObjectRetain();
      if (v30 == 255)
      {
        v31 = *(_QWORD *)v29;
        v28[8] = v29[8];
        *(_QWORD *)v28 = v31;
      }
      else
      {
        v53 = v30 & 1;
        v54 = *(_QWORD *)v29;
        outlined copy of PlatformItemCollection.Storage(v54, v53);
        *(_QWORD *)v28 = v54;
        v28[8] = v53;
      }
      v55 = v202[7];
      v56 = (char *)v201 + v55;
      v57 = (char *)v204 + v55;
      v58 = v57[8];
      v3 = v198;
      if (v58 == 255)
      {
        v59 = *(_QWORD *)v57;
        v56[8] = v57[8];
        *(_QWORD *)v56 = v59;
      }
      else
      {
        v60 = v58 & 1;
        v61 = *(_QWORD *)v57;
        outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v57, v58 & 1);
        *(_QWORD *)v56 = v61;
        v56[8] = v60;
      }
      v62 = v202[8];
      v63 = (char *)v201 + v62;
      v64 = (char *)v204 + v62;
      v65 = *(_QWORD *)((char *)v204 + v62);
      v66 = *(_QWORD *)((char *)v204 + v62 + 8);
      v67 = *((_BYTE *)v204 + v62 + 16);
      outlined copy of Text.Storage(v65, v66, v67);
      *(_QWORD *)v63 = v65;
      *((_QWORD *)v63 + 1) = v66;
      v63[16] = v67;
      *((_QWORD *)v63 + 3) = *((_QWORD *)v64 + 3);
      v68 = v202[9];
      v69 = (_QWORD *)((char *)v201 + v68);
      v70 = (_QWORD *)((char *)v204 + v68);
      *v69 = *v70;
      v69[1] = v70[1];
      v71 = v202[10];
      v72 = (char *)v201 + v71;
      v73 = (char *)v204 + v71;
      v74 = *(_QWORD *)((char *)v204 + v71);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v74)
      {
        v75 = *((_QWORD *)v73 + 1);
        *(_QWORD *)v72 = v74;
        *((_QWORD *)v72 + 1) = v75;
        *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
        *((_QWORD *)v72 + 3) = *((_QWORD *)v73 + 3);
        v76 = (void *)*((_QWORD *)v73 + 4);
        *((_QWORD *)v72 + 4) = v76;
        *((_QWORD *)v72 + 5) = *((_QWORD *)v73 + 5);
        *((_DWORD *)v72 + 12) = *((_DWORD *)v73 + 12);
        *((_QWORD *)v72 + 7) = *((_QWORD *)v73 + 7);
        *((_DWORD *)v72 + 16) = *((_DWORD *)v73 + 16);
        *((_DWORD *)v72 + 17) = *((_DWORD *)v73 + 17);
        *((_DWORD *)v72 + 18) = *((_DWORD *)v73 + 18);
        *((_DWORD *)v72 + 19) = *((_DWORD *)v73 + 19);
        *((_QWORD *)v72 + 10) = *((_QWORD *)v73 + 10);
        v77 = v76;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v78 = *((_OWORD *)v73 + 1);
        *(_OWORD *)v72 = *(_OWORD *)v73;
        *((_OWORD *)v72 + 1) = v78;
        v79 = *((_OWORD *)v73 + 2);
        v80 = *((_OWORD *)v73 + 3);
        v81 = *((_OWORD *)v73 + 4);
        *((_QWORD *)v72 + 10) = *((_QWORD *)v73 + 10);
        *((_OWORD *)v72 + 3) = v80;
        *((_OWORD *)v72 + 4) = v81;
        *((_OWORD *)v72 + 2) = v79;
      }
      v2 = v199;
      v82 = v202[11];
      v83 = (char *)v201 + v82;
      v84 = (char *)v204 + v82;
      if (*(_QWORD *)v84)
      {
        v85 = *((_QWORD *)v84 + 1);
        *(_QWORD *)v83 = *(_QWORD *)v84;
        *((_QWORD *)v83 + 1) = v85;
        *((_DWORD *)v83 + 4) = *((_DWORD *)v84 + 4);
        *((_QWORD *)v83 + 3) = *((_QWORD *)v84 + 3);
        v86 = (void *)*((_QWORD *)v84 + 4);
        *((_QWORD *)v83 + 4) = v86;
        *((_QWORD *)v83 + 5) = *((_QWORD *)v84 + 5);
        *((_DWORD *)v83 + 12) = *((_DWORD *)v84 + 12);
        *((_QWORD *)v83 + 7) = *((_QWORD *)v84 + 7);
        *((_DWORD *)v83 + 16) = *((_DWORD *)v84 + 16);
        *((_DWORD *)v83 + 17) = *((_DWORD *)v84 + 17);
        *((_DWORD *)v83 + 18) = *((_DWORD *)v84 + 18);
        *((_DWORD *)v83 + 19) = *((_DWORD *)v84 + 19);
        *((_QWORD *)v83 + 10) = *((_QWORD *)v84 + 10);
        v87 = v86;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v88 = *((_OWORD *)v84 + 1);
        *(_OWORD *)v83 = *(_OWORD *)v84;
        *((_OWORD *)v83 + 1) = v88;
        v89 = *((_OWORD *)v84 + 2);
        v90 = *((_OWORD *)v84 + 3);
        v91 = *((_OWORD *)v84 + 4);
        *((_QWORD *)v83 + 10) = *((_QWORD *)v84 + 10);
        *((_OWORD *)v83 + 3) = v90;
        *((_OWORD *)v83 + 4) = v91;
        *((_OWORD *)v83 + 2) = v89;
      }
      *((_BYTE *)v201 + v202[12]) = *((_BYTE *)v204 + v202[12]);
      v92 = v202[13];
      v93 = (char *)v201 + v92;
      v94 = (char *)v204 + v92;
      if (*(_QWORD *)v94)
      {
        v95 = *((_QWORD *)v94 + 1);
        *(_QWORD *)v93 = *(_QWORD *)v94;
        *((_QWORD *)v93 + 1) = v95;
        *((_DWORD *)v93 + 4) = *((_DWORD *)v94 + 4);
        *((_QWORD *)v93 + 3) = *((_QWORD *)v94 + 3);
        v96 = (void *)*((_QWORD *)v94 + 4);
        *((_QWORD *)v93 + 4) = v96;
        *((_QWORD *)v93 + 5) = *((_QWORD *)v94 + 5);
        *((_DWORD *)v93 + 12) = *((_DWORD *)v94 + 12);
        *((_QWORD *)v93 + 7) = *((_QWORD *)v94 + 7);
        *((_DWORD *)v93 + 16) = *((_DWORD *)v94 + 16);
        *((_DWORD *)v93 + 17) = *((_DWORD *)v94 + 17);
        *((_DWORD *)v93 + 18) = *((_DWORD *)v94 + 18);
        *((_DWORD *)v93 + 19) = *((_DWORD *)v94 + 19);
        *((_QWORD *)v93 + 10) = *((_QWORD *)v94 + 10);
        v97 = v96;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v98 = *((_OWORD *)v94 + 1);
        *(_OWORD *)v93 = *(_OWORD *)v94;
        *((_OWORD *)v93 + 1) = v98;
        v99 = *((_OWORD *)v94 + 2);
        v100 = *((_OWORD *)v94 + 3);
        v101 = *((_OWORD *)v94 + 4);
        *((_QWORD *)v93 + 10) = *((_QWORD *)v94 + 10);
        *((_OWORD *)v93 + 3) = v100;
        *((_OWORD *)v93 + 4) = v101;
        *((_OWORD *)v93 + 2) = v99;
      }
      v4 = v197;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v196 + 56))(v201, 0, 1, v202);
      goto LABEL_25;
    }
LABEL_7:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_25;
  }
  if (v12)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for ToolbarStorage.SearchItem);
    goto LABEL_7;
  }
  *v6 = *v7;
  swift_retain();
  swift_release();
  v6[1] = v7[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v34 = *(int *)(v33 + 32);
  v35 = (char *)v6 + v34;
  v203 = (int *)v8;
  v36 = (char *)v7 + v34;
  *v35 = *((_BYTE *)v7 + v34);
  v35[1] = *((_BYTE *)v7 + v34 + 1);
  v35[2] = *((_BYTE *)v7 + v34 + 2);
  v35[3] = *((_BYTE *)v7 + v34 + 3);
  LODWORD(v34) = *(_DWORD *)((char *)v7 + v34 + 4);
  v35[8] = v36[8];
  *((_DWORD *)v35 + 1) = v34;
  v37 = (int *)type metadata accessor for SearchFieldState();
  v38 = v37[9];
  v39 = &v35[v38];
  v205 = v7;
  v40 = &v36[v38];
  v41 = type metadata accessor for AttributedString();
  v42 = v40;
  v43 = v205;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v42, v41);
  v35[v37[10]] = v36[v37[10]];
  v44 = v37[11];
  v45 = &v35[v44];
  v46 = &v36[v44];
  *(_DWORD *)v45 = *(_DWORD *)v46;
  v45[4] = v46[4];
  *(_QWORD *)((char *)v6 + v203[5]) = *(_QWORD *)((char *)v205 + v203[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = v203[6];
  v48 = (uint64_t)v6 + v47;
  v49 = (char *)v205 + v47;
  v50 = *((unsigned __int8 *)v6 + v47 + 8);
  v51 = *((unsigned __int8 *)v205 + v47 + 8);
  if (v50 == 255)
  {
    if (v51 == 255)
    {
      v103 = *(_QWORD *)v49;
      *(_BYTE *)(v48 + 8) = v49[8];
      *(_QWORD *)v48 = v103;
    }
    else
    {
      v108 = v51 & 1;
      v109 = *(_QWORD *)v49;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v49, v51 & 1);
      *(_QWORD *)v48 = v109;
      v43 = v205;
      *(_BYTE *)(v48 + 8) = v108;
    }
  }
  else if (v51 == 255)
  {
    outlined destroy of PlatformItemCollection(v48);
    v52 = v49[8];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *(_BYTE *)(v48 + 8) = v52;
  }
  else
  {
    v104 = v51 & 1;
    v105 = *(_QWORD *)v49;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v49, v51 & 1);
    v106 = *(_QWORD *)v48;
    v107 = *(_BYTE *)(v48 + 8);
    *(_QWORD *)v48 = v105;
    v43 = v205;
    *(_BYTE *)(v48 + 8) = v104;
    outlined consume of PlatformItemCollection.Storage(v106, v107);
  }
  v110 = v203[7];
  v111 = (uint64_t)v6 + v110;
  v112 = (uint64_t)v43 + v110;
  v113 = *((unsigned __int8 *)v6 + v110 + 8);
  v114 = *((unsigned __int8 *)v43 + v110 + 8);
  v200 = v2;
  if (v113 == 255)
  {
    if (v114 == 255)
    {
      v116 = *(_QWORD *)v112;
      *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
      *(_QWORD *)v111 = v116;
    }
    else
    {
      v121 = v114 & 1;
      v122 = *(_QWORD *)v112;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v112, v114 & 1);
      *(_QWORD *)v111 = v122;
      v43 = v205;
      *(_BYTE *)(v111 + 8) = v121;
    }
  }
  else if (v114 == 255)
  {
    outlined destroy of PlatformItemCollection(v111);
    v115 = *(_BYTE *)(v112 + 8);
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *(_BYTE *)(v111 + 8) = v115;
  }
  else
  {
    v117 = v114 & 1;
    v118 = *(_QWORD *)v112;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v112, v114 & 1);
    v119 = *(_QWORD *)v111;
    v120 = *(_BYTE *)(v111 + 8);
    *(_QWORD *)v111 = v118;
    v43 = v205;
    *(_BYTE *)(v111 + 8) = v117;
    outlined consume of PlatformItemCollection.Storage(v119, v120);
  }
  v123 = v203[8];
  v124 = (char *)v6 + v123;
  v125 = (uint64_t)v43 + v123;
  v126 = *(_QWORD *)((char *)v43 + v123);
  v127 = *(_QWORD *)((char *)v43 + v123 + 8);
  v128 = v43;
  v129 = *((_BYTE *)v43 + v123 + 16);
  outlined copy of Text.Storage(v126, v127, v129);
  v130 = *(_QWORD *)v124;
  v131 = *((_QWORD *)v124 + 1);
  v132 = v124[16];
  *(_QWORD *)v124 = v126;
  *((_QWORD *)v124 + 1) = v127;
  v124[16] = v129;
  outlined consume of Text.Storage(v130, v131, v132);
  v133 = v203;
  *((_QWORD *)v124 + 3) = *(_QWORD *)(v125 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v134 = v203[9];
  v135 = (char *)v6 + v134;
  v136 = (uint64_t)v128 + v134;
  *(_QWORD *)((char *)v6 + v134) = *(_QWORD *)((char *)v128 + v134);
  swift_retain();
  swift_release();
  *((_QWORD *)v135 + 1) = *(_QWORD *)(v136 + 8);
  swift_retain();
  swift_release();
  v137 = v203[10];
  v138 = (uint64_t)v6 + v137;
  v139 = (uint64_t)v128 + v137;
  v140 = *(_QWORD *)((char *)v6 + v137);
  v141 = *(_QWORD *)((char *)v128 + v137);
  if (v140)
  {
    v2 = v200;
    if (v141)
    {
      v142 = *(_QWORD *)(v139 + 8);
      *(_QWORD *)v138 = v141;
      *(_QWORD *)(v138 + 8) = v142;
      *(_DWORD *)(v138 + 16) = *(_DWORD *)(v139 + 16);
      *(_QWORD *)(v138 + 24) = *(_QWORD *)(v139 + 24);
      v143 = *(void **)(v139 + 32);
      v144 = *(void **)(v138 + 32);
      *(_QWORD *)(v138 + 32) = v143;
      v145 = v143;

      *(_QWORD *)(v138 + 40) = *(_QWORD *)(v139 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(v138 + 48) = *(_DWORD *)(v139 + 48);
      *(_QWORD *)(v138 + 56) = *(_QWORD *)(v139 + 56);
      swift_retain();
      swift_release();
      *(_DWORD *)(v138 + 64) = *(_DWORD *)(v139 + 64);
      *(_DWORD *)(v138 + 68) = *(_DWORD *)(v139 + 68);
      *(_DWORD *)(v138 + 72) = *(_DWORD *)(v139 + 72);
      *(_DWORD *)(v138 + 76) = *(_DWORD *)(v139 + 76);
      *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v138);
      v149 = *(_OWORD *)(v139 + 16);
      *(_OWORD *)v138 = *(_OWORD *)v139;
      *(_OWORD *)(v138 + 16) = v149;
      v151 = *(_OWORD *)(v139 + 48);
      v150 = *(_OWORD *)(v139 + 64);
      v152 = *(_OWORD *)(v139 + 32);
      *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
      *(_OWORD *)(v138 + 48) = v151;
      *(_OWORD *)(v138 + 64) = v150;
      *(_OWORD *)(v138 + 32) = v152;
    }
  }
  else
  {
    v2 = v200;
    if (v141)
    {
      v146 = *(_QWORD *)(v139 + 8);
      *(_QWORD *)v138 = v141;
      *(_QWORD *)(v138 + 8) = v146;
      *(_DWORD *)(v138 + 16) = *(_DWORD *)(v139 + 16);
      *(_QWORD *)(v138 + 24) = *(_QWORD *)(v139 + 24);
      v147 = *(void **)(v139 + 32);
      *(_QWORD *)(v138 + 32) = v147;
      *(_QWORD *)(v138 + 40) = *(_QWORD *)(v139 + 40);
      *(_DWORD *)(v138 + 48) = *(_DWORD *)(v139 + 48);
      *(_QWORD *)(v138 + 56) = *(_QWORD *)(v139 + 56);
      *(_DWORD *)(v138 + 64) = *(_DWORD *)(v139 + 64);
      *(_DWORD *)(v138 + 68) = *(_DWORD *)(v139 + 68);
      *(_DWORD *)(v138 + 72) = *(_DWORD *)(v139 + 72);
      *(_DWORD *)(v138 + 76) = *(_DWORD *)(v139 + 76);
      *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
      v148 = v147;
      swift_retain();
      swift_retain();
      v133 = v203;
      swift_bridgeObjectRetain();
    }
    else
    {
      v153 = *(_OWORD *)(v139 + 16);
      *(_OWORD *)v138 = *(_OWORD *)v139;
      *(_OWORD *)(v138 + 16) = v153;
      v154 = *(_OWORD *)(v139 + 32);
      v155 = *(_OWORD *)(v139 + 48);
      v156 = *(_OWORD *)(v139 + 64);
      *(_QWORD *)(v138 + 80) = *(_QWORD *)(v139 + 80);
      *(_OWORD *)(v138 + 48) = v155;
      *(_OWORD *)(v138 + 64) = v156;
      *(_OWORD *)(v138 + 32) = v154;
    }
  }
  v157 = v133[11];
  v158 = (uint64_t)v6 + v157;
  v159 = (char *)v205 + v157;
  v160 = *(_QWORD *)((char *)v6 + v157);
  v161 = *(_QWORD *)((char *)v205 + v157);
  if (v160)
  {
    if (v161)
    {
      v162 = *((_QWORD *)v159 + 1);
      *(_QWORD *)v158 = v161;
      *(_QWORD *)(v158 + 8) = v162;
      *(_DWORD *)(v158 + 16) = *((_DWORD *)v159 + 4);
      *(_QWORD *)(v158 + 24) = *((_QWORD *)v159 + 3);
      v163 = (void *)*((_QWORD *)v159 + 4);
      v164 = *(void **)(v158 + 32);
      *(_QWORD *)(v158 + 32) = v163;
      v165 = v163;

      *(_QWORD *)(v158 + 40) = *((_QWORD *)v159 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v158 + 48) = *((_DWORD *)v159 + 12);
      *(_QWORD *)(v158 + 56) = *((_QWORD *)v159 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v158 + 64) = *((_DWORD *)v159 + 16);
      *(_DWORD *)(v158 + 68) = *((_DWORD *)v159 + 17);
      *(_DWORD *)(v158 + 72) = *((_DWORD *)v159 + 18);
      *(_DWORD *)(v158 + 76) = *((_DWORD *)v159 + 19);
      *(_QWORD *)(v158 + 80) = *((_QWORD *)v159 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v158);
      v169 = *((_OWORD *)v159 + 1);
      *(_OWORD *)v158 = *(_OWORD *)v159;
      *(_OWORD *)(v158 + 16) = v169;
      v171 = *((_OWORD *)v159 + 3);
      v170 = *((_OWORD *)v159 + 4);
      v172 = *((_OWORD *)v159 + 2);
      *(_QWORD *)(v158 + 80) = *((_QWORD *)v159 + 10);
      *(_OWORD *)(v158 + 48) = v171;
      *(_OWORD *)(v158 + 64) = v170;
      *(_OWORD *)(v158 + 32) = v172;
    }
  }
  else if (v161)
  {
    v166 = *((_QWORD *)v159 + 1);
    *(_QWORD *)v158 = v161;
    *(_QWORD *)(v158 + 8) = v166;
    *(_DWORD *)(v158 + 16) = *((_DWORD *)v159 + 4);
    *(_QWORD *)(v158 + 24) = *((_QWORD *)v159 + 3);
    v167 = (void *)*((_QWORD *)v159 + 4);
    *(_QWORD *)(v158 + 32) = v167;
    *(_QWORD *)(v158 + 40) = *((_QWORD *)v159 + 5);
    *(_DWORD *)(v158 + 48) = *((_DWORD *)v159 + 12);
    *(_QWORD *)(v158 + 56) = *((_QWORD *)v159 + 7);
    *(_DWORD *)(v158 + 64) = *((_DWORD *)v159 + 16);
    *(_DWORD *)(v158 + 68) = *((_DWORD *)v159 + 17);
    *(_DWORD *)(v158 + 72) = *((_DWORD *)v159 + 18);
    *(_DWORD *)(v158 + 76) = *((_DWORD *)v159 + 19);
    *(_QWORD *)(v158 + 80) = *((_QWORD *)v159 + 10);
    v168 = v167;
    swift_retain();
    swift_retain();
    v133 = v203;
    swift_bridgeObjectRetain();
  }
  else
  {
    v173 = *((_OWORD *)v159 + 1);
    *(_OWORD *)v158 = *(_OWORD *)v159;
    *(_OWORD *)(v158 + 16) = v173;
    v174 = *((_OWORD *)v159 + 2);
    v175 = *((_OWORD *)v159 + 3);
    v176 = *((_OWORD *)v159 + 4);
    *(_QWORD *)(v158 + 80) = *((_QWORD *)v159 + 10);
    *(_OWORD *)(v158 + 48) = v175;
    *(_OWORD *)(v158 + 64) = v176;
    *(_OWORD *)(v158 + 32) = v174;
  }
  *((_BYTE *)v6 + v133[12]) = *((_BYTE *)v205 + v133[12]);
  v177 = v133[13];
  v178 = (uint64_t)v6 + v177;
  v179 = (char *)v205 + v177;
  v180 = *(_QWORD *)((char *)v205 + v177);
  if (*(_QWORD *)v178)
  {
    if (v180)
    {
      v181 = *((_QWORD *)v179 + 1);
      *(_QWORD *)v178 = v180;
      *(_QWORD *)(v178 + 8) = v181;
      *(_DWORD *)(v178 + 16) = *((_DWORD *)v179 + 4);
      *(_QWORD *)(v178 + 24) = *((_QWORD *)v179 + 3);
      v182 = (void *)*((_QWORD *)v179 + 4);
      v183 = *(void **)(v178 + 32);
      *(_QWORD *)(v178 + 32) = v182;
      v184 = v182;

      *(_QWORD *)(v178 + 40) = *((_QWORD *)v179 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v178 + 48) = *((_DWORD *)v179 + 12);
      *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v178 + 64) = *((_DWORD *)v179 + 16);
      *(_DWORD *)(v178 + 68) = *((_DWORD *)v179 + 17);
      *(_DWORD *)(v178 + 72) = *((_DWORD *)v179 + 18);
      *(_DWORD *)(v178 + 76) = *((_DWORD *)v179 + 19);
      *(_QWORD *)(v178 + 80) = *((_QWORD *)v179 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v178);
      v188 = *((_OWORD *)v179 + 1);
      *(_OWORD *)v178 = *(_OWORD *)v179;
      *(_OWORD *)(v178 + 16) = v188;
      v190 = *((_OWORD *)v179 + 3);
      v189 = *((_OWORD *)v179 + 4);
      v191 = *((_OWORD *)v179 + 2);
      *(_QWORD *)(v178 + 80) = *((_QWORD *)v179 + 10);
      *(_OWORD *)(v178 + 48) = v190;
      *(_OWORD *)(v178 + 64) = v189;
      *(_OWORD *)(v178 + 32) = v191;
    }
  }
  else if (v180)
  {
    v185 = *((_QWORD *)v179 + 1);
    *(_QWORD *)v178 = v180;
    *(_QWORD *)(v178 + 8) = v185;
    *(_DWORD *)(v178 + 16) = *((_DWORD *)v179 + 4);
    *(_QWORD *)(v178 + 24) = *((_QWORD *)v179 + 3);
    v186 = (void *)*((_QWORD *)v179 + 4);
    *(_QWORD *)(v178 + 32) = v186;
    *(_QWORD *)(v178 + 40) = *((_QWORD *)v179 + 5);
    *(_DWORD *)(v178 + 48) = *((_DWORD *)v179 + 12);
    *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
    *(_DWORD *)(v178 + 64) = *((_DWORD *)v179 + 16);
    *(_DWORD *)(v178 + 68) = *((_DWORD *)v179 + 17);
    *(_DWORD *)(v178 + 72) = *((_DWORD *)v179 + 18);
    *(_DWORD *)(v178 + 76) = *((_DWORD *)v179 + 19);
    *(_QWORD *)(v178 + 80) = *((_QWORD *)v179 + 10);
    v187 = v186;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v192 = *((_OWORD *)v179 + 1);
    *(_OWORD *)v178 = *(_OWORD *)v179;
    *(_OWORD *)(v178 + 16) = v192;
    v193 = *((_OWORD *)v179 + 2);
    v194 = *((_OWORD *)v179 + 3);
    v195 = *((_OWORD *)v179 + 4);
    *(_QWORD *)(v178 + 80) = *((_QWORD *)v179 + 10);
    *(_OWORD *)(v178 + 48) = v194;
    *(_OWORD *)(v178 + 64) = v195;
    *(_OWORD *)(v178 + 32) = v193;
  }
LABEL_25:
  *(_QWORD *)(v1 + *(int *)(v4 + 56)) = *(_QWORD *)(v3 + *(int *)(v4 + 56));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + *(int *)(v4 + 60)) = *(_QWORD *)(v3 + *(int *)(v4 + 60));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v2;
}

void initializeWithTake for ToolbarReader.Mutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  *a1 = *a2;
  v3 = *(int *)(a3 + 52);
  v4 = (_OWORD *)((char *)a1 + v3);
  v5 = *(_OWORD *)((char *)a2 + v3 + 48);
  v4[2] = *(_OWORD *)((char *)a2 + v3 + 32);
  v4[3] = v5;
  v6 = *(_OWORD *)((char *)a2 + v3 + 16);
  *v4 = *(_OWORD *)((char *)a2 + v3);
  v4[1] = v6;
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_1878780F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = a1;
  v5 = *(int *)(a1 + 52);
  v6 = (_QWORD *)(v2 + v5);
  v7 = (_QWORD *)(v3 + v5);
  v8 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  v9 = *((_QWORD *)v8 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = v7[1];
    *v6 = *v7;
    v6[1] = v11;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v13 = *(int *)(v12 + 32);
    v52 = v4;
    v53 = v1;
    v14 = (char *)v6 + v13;
    v15 = (char *)v7 + v13;
    *v14 = *((_BYTE *)v7 + v13);
    v14[1] = *((_BYTE *)v7 + v13 + 1);
    *((_WORD *)v14 + 1) = *(_WORD *)((char *)v7 + v13 + 2);
    v14[8] = *((_BYTE *)v7 + v13 + 8);
    *((_DWORD *)v14 + 1) = *(_DWORD *)((char *)v7 + v13 + 4);
    v51 = v9;
    v16 = (int *)type metadata accessor for SearchFieldState();
    v17 = v16[9];
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    v14[v16[10]] = v15[v16[10]];
    v21 = v16[11];
    v22 = &v14[v21];
    v23 = &v15[v21];
    v4 = v52;
    v1 = v53;
    v22[4] = v23[4];
    *(_DWORD *)v22 = *(_DWORD *)v23;
    *(_QWORD *)((char *)v6 + v8[5]) = *(_QWORD *)((char *)v7 + v8[5]);
    v24 = v8[6];
    v25 = (char *)v6 + v24;
    v26 = (char *)v7 + v24;
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = v8[7];
    v28 = (char *)v6 + v27;
    v29 = (char *)v7 + v27;
    v28[8] = v29[8];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v30 = v8[8];
    v31 = (_OWORD *)((char *)v6 + v30);
    v32 = (_OWORD *)((char *)v7 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    *(_OWORD *)((char *)v6 + v8[9]) = *(_OWORD *)((char *)v7 + v8[9]);
    v34 = v8[10];
    v35 = (char *)v6 + v34;
    v36 = (char *)v7 + v34;
    v37 = *((_OWORD *)v36 + 1);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v37;
    *((_QWORD *)v35 + 10) = *((_QWORD *)v36 + 10);
    v38 = *((_OWORD *)v36 + 4);
    v39 = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 4) = v38;
    *((_OWORD *)v35 + 2) = v39;
    v40 = v8[11];
    v41 = (char *)v6 + v40;
    v42 = (char *)v7 + v40;
    v43 = *((_OWORD *)v42 + 3);
    *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 3) = v43;
    *((_OWORD *)v41 + 4) = *((_OWORD *)v42 + 4);
    *((_QWORD *)v41 + 10) = *((_QWORD *)v42 + 10);
    v44 = *((_OWORD *)v42 + 1);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v44;
    *((_BYTE *)v6 + v8[12]) = *((_BYTE *)v7 + v8[12]);
    v45 = v8[13];
    v46 = (char *)v6 + v45;
    v47 = (char *)v7 + v45;
    v48 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v48;
    *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
    *((_QWORD *)v46 + 10) = *((_QWORD *)v47 + 10);
    v49 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v49;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v51 + 56))(v6, 0, 1, v8);
  }
  *(_QWORD *)(v2 + *(int *)(v4 + 56)) = *(_QWORD *)(v3 + *(int *)(v4 + 56));
  *(_QWORD *)(v2 + *(int *)(v4 + 60)) = *(_QWORD *)(v3 + *(int *)(v4 + 60));
  return v1;
}

void assignWithTake for ToolbarReader.Mutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  *a1 = *a2;
  v3 = *(int *)(a3 + 52);
  v4 = (char *)a1 + v3;
  v5 = (char *)a2 + v3;
  v6 = *(_QWORD *)((char *)a2 + v3 + 8);
  *(_QWORD *)v4 = *(_QWORD *)((char *)a2 + v3);
  *((_QWORD *)v4 + 1) = v6;
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v4 + 3))
  {
    if (*((_QWORD *)v5 + 3))
    {
      *((_QWORD *)v4 + 2) = *((_QWORD *)v5 + 2);
      swift_release();
      *((_QWORD *)v4 + 3) = *((_QWORD *)v5 + 3);
      swift_release();
      *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)(v4 + 16), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  }
  *((_OWORD *)v4 + 1) = *((_OWORD *)v5 + 1);
  *((_QWORD *)v4 + 4) = *((_QWORD *)v5 + 4);
LABEL_6:
  *((_QWORD *)v4 + 5) = *((_QWORD *)v5 + 5);
  swift_bridgeObjectRelease();
  v4[48] = v5[48];
  *((_QWORD *)v4 + 7) = *((_QWORD *)v5 + 7);
  swift_bridgeObjectRelease();
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_18787845C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v4 = a1[13];
  v5 = (_QWORD *)(v2 + v4);
  v6 = (_QWORD *)(v3 + v4);
  v7 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for ToolbarStorage.SearchItem);
      goto LABEL_6;
    }
    v112 = v1;
    *v5 = *v6;
    swift_release();
    v5[1] = v6[1];
    swift_release();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v55 = *(int *)(v54 + 32);
    v56 = (char *)v5 + v55;
    v57 = (char *)v6 + v55;
    *v56 = *((_BYTE *)v6 + v55);
    v56[1] = *((_BYTE *)v6 + v55 + 1);
    *((_WORD *)v56 + 1) = *(_WORD *)((char *)v6 + v55 + 2);
    v56[8] = *((_BYTE *)v6 + v55 + 8);
    *((_DWORD *)v56 + 1) = *(_DWORD *)((char *)v6 + v55 + 4);
    v58 = (int *)type metadata accessor for SearchFieldState();
    v59 = v58[9];
    v60 = &v56[v59];
    v61 = &v57[v59];
    v62 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v60, v61, v62);
    v56[v58[10]] = v57[v58[10]];
    v63 = v58[11];
    v64 = &v56[v63];
    v65 = &v57[v63];
    *(_DWORD *)v64 = *(_DWORD *)v65;
    v64[4] = v65[4];
    *(_QWORD *)((char *)v5 + v7[5]) = *(_QWORD *)((char *)v6 + v7[5]);
    swift_bridgeObjectRelease();
    v66 = v7[6];
    v67 = (uint64_t)v5 + v66;
    v68 = (char *)v6 + v66;
    v69 = *((unsigned __int8 *)v5 + v66 + 8);
    if (v69 != 255)
    {
      v70 = v68[8];
      if (v70 != 255)
      {
        v71 = *(_QWORD *)v67;
        *(_QWORD *)v67 = *(_QWORD *)v68;
        *(_BYTE *)(v67 + 8) = v70 & 1;
        outlined consume of PlatformItemCollection.Storage(v71, v69 & 1);
LABEL_13:
        v1 = v112;
        v72 = v7[7];
        v73 = (uint64_t)v5 + v72;
        v74 = (char *)v6 + v72;
        v75 = *((unsigned __int8 *)v5 + v72 + 8);
        if (v75 != 255)
        {
          v76 = v74[8];
          if (v76 != 255)
          {
            v77 = *(_QWORD *)v73;
            *(_QWORD *)v73 = *(_QWORD *)v74;
            *(_BYTE *)(v73 + 8) = v76 & 1;
            outlined consume of PlatformItemCollection.Storage(v77, v75 & 1);
LABEL_18:
            v78 = v7[8];
            v79 = (char *)v5 + v78;
            v80 = (char *)v6 + v78;
            LOBYTE(v78) = *((_BYTE *)v6 + v78 + 16);
            v81 = *(_QWORD *)v79;
            v82 = *((_QWORD *)v79 + 1);
            v83 = v79[16];
            *(_OWORD *)v79 = *(_OWORD *)v80;
            v79[16] = v78;
            outlined consume of Text.Storage(v81, v82, v83);
            *((_QWORD *)v79 + 3) = *((_QWORD *)v80 + 3);
            swift_bridgeObjectRelease();
            v84 = v7[9];
            v85 = (char *)v5 + v84;
            v86 = (char *)v6 + v84;
            *(_QWORD *)((char *)v5 + v84) = *(_QWORD *)((char *)v6 + v84);
            swift_release();
            *((_QWORD *)v85 + 1) = *((_QWORD *)v86 + 1);
            swift_release();
            v87 = v7[10];
            v88 = (uint64_t)v5 + v87;
            v89 = (char *)v6 + v87;
            if (*(_QWORD *)((char *)v5 + v87))
            {
              if (*(_QWORD *)v89)
              {
                v90 = *((_QWORD *)v89 + 1);
                *(_QWORD *)v88 = *(_QWORD *)v89;
                *(_QWORD *)(v88 + 8) = v90;
                *(_DWORD *)(v88 + 16) = *((_DWORD *)v89 + 4);
                v91 = *((_QWORD *)v89 + 4);
                v92 = *(void **)(v88 + 32);
                *(_QWORD *)(v88 + 24) = *((_QWORD *)v89 + 3);
                *(_QWORD *)(v88 + 32) = v91;

                *(_QWORD *)(v88 + 40) = *((_QWORD *)v89 + 5);
                swift_release();
                *(_DWORD *)(v88 + 48) = *((_DWORD *)v89 + 12);
                *(_QWORD *)(v88 + 56) = *((_QWORD *)v89 + 7);
                swift_release();
                *(_OWORD *)(v88 + 64) = *((_OWORD *)v89 + 4);
                *(_QWORD *)(v88 + 80) = *((_QWORD *)v89 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_23;
              }
              outlined destroy of BoundInputsView(v88);
            }
            v93 = *((_OWORD *)v89 + 3);
            *(_OWORD *)(v88 + 32) = *((_OWORD *)v89 + 2);
            *(_OWORD *)(v88 + 48) = v93;
            *(_OWORD *)(v88 + 64) = *((_OWORD *)v89 + 4);
            *(_QWORD *)(v88 + 80) = *((_QWORD *)v89 + 10);
            v94 = *((_OWORD *)v89 + 1);
            *(_OWORD *)v88 = *(_OWORD *)v89;
            *(_OWORD *)(v88 + 16) = v94;
LABEL_23:
            v95 = v7[11];
            v96 = (uint64_t)v5 + v95;
            v97 = (char *)v6 + v95;
            if (*(_QWORD *)((char *)v5 + v95))
            {
              if (*(_QWORD *)v97)
              {
                v98 = *((_QWORD *)v97 + 1);
                *(_QWORD *)v96 = *(_QWORD *)v97;
                *(_QWORD *)(v96 + 8) = v98;
                *(_DWORD *)(v96 + 16) = *((_DWORD *)v97 + 4);
                v99 = *((_QWORD *)v97 + 4);
                v100 = *(void **)(v96 + 32);
                *(_QWORD *)(v96 + 24) = *((_QWORD *)v97 + 3);
                *(_QWORD *)(v96 + 32) = v99;

                *(_QWORD *)(v96 + 40) = *((_QWORD *)v97 + 5);
                swift_release();
                *(_DWORD *)(v96 + 48) = *((_DWORD *)v97 + 12);
                *(_QWORD *)(v96 + 56) = *((_QWORD *)v97 + 7);
                swift_release();
                *(_OWORD *)(v96 + 64) = *((_OWORD *)v97 + 4);
                *(_QWORD *)(v96 + 80) = *((_QWORD *)v97 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_28;
              }
              outlined destroy of BoundInputsView(v96);
            }
            v101 = *((_OWORD *)v97 + 3);
            *(_OWORD *)(v96 + 32) = *((_OWORD *)v97 + 2);
            *(_OWORD *)(v96 + 48) = v101;
            *(_OWORD *)(v96 + 64) = *((_OWORD *)v97 + 4);
            *(_QWORD *)(v96 + 80) = *((_QWORD *)v97 + 10);
            v102 = *((_OWORD *)v97 + 1);
            *(_OWORD *)v96 = *(_OWORD *)v97;
            *(_OWORD *)(v96 + 16) = v102;
LABEL_28:
            *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
            v103 = v7[13];
            v104 = (uint64_t)v5 + v103;
            v105 = (char *)v6 + v103;
            if (*(_QWORD *)v104)
            {
              if (*(_QWORD *)v105)
              {
                v106 = *((_QWORD *)v105 + 1);
                *(_QWORD *)v104 = *(_QWORD *)v105;
                *(_QWORD *)(v104 + 8) = v106;
                *(_DWORD *)(v104 + 16) = *((_DWORD *)v105 + 4);
                v107 = *((_QWORD *)v105 + 4);
                v108 = *(void **)(v104 + 32);
                *(_QWORD *)(v104 + 24) = *((_QWORD *)v105 + 3);
                *(_QWORD *)(v104 + 32) = v107;

                *(_QWORD *)(v104 + 40) = *((_QWORD *)v105 + 5);
                swift_release();
                *(_DWORD *)(v104 + 48) = *((_DWORD *)v105 + 12);
                *(_QWORD *)(v104 + 56) = *((_QWORD *)v105 + 7);
                swift_release();
                *(_OWORD *)(v104 + 64) = *((_OWORD *)v105 + 4);
                *(_QWORD *)(v104 + 80) = *((_QWORD *)v105 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_7;
              }
              outlined destroy of BoundInputsView(v104);
            }
            v109 = *((_OWORD *)v105 + 3);
            *(_OWORD *)(v104 + 32) = *((_OWORD *)v105 + 2);
            *(_OWORD *)(v104 + 48) = v109;
            *(_OWORD *)(v104 + 64) = *((_OWORD *)v105 + 4);
            *(_QWORD *)(v104 + 80) = *((_QWORD *)v105 + 10);
            v110 = *((_OWORD *)v105 + 1);
            *(_OWORD *)v104 = *(_OWORD *)v105;
            *(_OWORD *)(v104 + 16) = v110;
            goto LABEL_7;
          }
          outlined destroy of PlatformItemCollection(v73);
        }
        *(_QWORD *)v73 = *(_QWORD *)v74;
        *(_BYTE *)(v73 + 8) = v74[8];
        goto LABEL_18;
      }
      outlined destroy of PlatformItemCollection(v67);
    }
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *(_BYTE *)(v67 + 8) = v68[8];
    goto LABEL_13;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_7;
  }
  v12 = v6[1];
  *v5 = *v6;
  v5[1] = v12;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v14 = *(int *)(v13 + 32);
  v15 = (char *)v5 + v14;
  v113 = v8;
  v16 = (char *)v6 + v14;
  *v15 = *((_BYTE *)v6 + v14);
  v15[1] = *((_BYTE *)v6 + v14 + 1);
  *((_WORD *)v15 + 1) = *(_WORD *)((char *)v6 + v14 + 2);
  v15[8] = *((_BYTE *)v6 + v14 + 8);
  *((_DWORD *)v15 + 1) = *(_DWORD *)((char *)v6 + v14 + 4);
  v17 = (int *)type metadata accessor for SearchFieldState();
  v18 = v17[9];
  v19 = &v15[v18];
  v111 = v1;
  v20 = &v16[v18];
  v21 = type metadata accessor for AttributedString();
  v22 = v20;
  v1 = v111;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v22, v21);
  v15[v17[10]] = v16[v17[10]];
  v23 = v17[11];
  v24 = &v15[v23];
  v25 = &v16[v23];
  v24[4] = v25[4];
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_QWORD *)((char *)v5 + v7[5]) = *(_QWORD *)((char *)v6 + v7[5]);
  v26 = v7[6];
  v27 = (char *)v5 + v26;
  v28 = (char *)v6 + v26;
  v27[8] = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = v7[7];
  v30 = (char *)v5 + v29;
  v31 = (char *)v6 + v29;
  v30[8] = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = v7[8];
  v33 = (_OWORD *)((char *)v5 + v32);
  v34 = (_OWORD *)((char *)v6 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  *(_OWORD *)((char *)v5 + v7[9]) = *(_OWORD *)((char *)v6 + v7[9]);
  v36 = v7[10];
  v37 = (char *)v5 + v36;
  v38 = (char *)v6 + v36;
  v39 = *((_OWORD *)v38 + 1);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *((_OWORD *)v37 + 1) = v39;
  *((_QWORD *)v37 + 10) = *((_QWORD *)v38 + 10);
  v40 = *((_OWORD *)v38 + 4);
  v41 = *((_OWORD *)v38 + 2);
  *((_OWORD *)v37 + 3) = *((_OWORD *)v38 + 3);
  *((_OWORD *)v37 + 4) = v40;
  *((_OWORD *)v37 + 2) = v41;
  v42 = v7[11];
  v43 = (char *)v5 + v42;
  v44 = (char *)v6 + v42;
  v45 = *((_OWORD *)v44 + 3);
  *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
  *((_OWORD *)v43 + 3) = v45;
  *((_OWORD *)v43 + 4) = *((_OWORD *)v44 + 4);
  *((_QWORD *)v43 + 10) = *((_QWORD *)v44 + 10);
  v46 = *((_OWORD *)v44 + 1);
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *((_OWORD *)v43 + 1) = v46;
  *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
  v47 = v7[13];
  v48 = (char *)v5 + v47;
  v49 = (char *)v6 + v47;
  v50 = *((_OWORD *)v49 + 3);
  *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
  *((_OWORD *)v48 + 3) = v50;
  *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
  *((_QWORD *)v48 + 10) = *((_QWORD *)v49 + 10);
  v51 = *((_OWORD *)v49 + 1);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *((_OWORD *)v48 + 1) = v51;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v113 + 56))(v5, 0, 1, v7);
LABEL_7:
  *(_QWORD *)(v2 + a1[14]) = *(_QWORD *)(v3 + a1[14]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + a1[15]) = *(_QWORD *)(v3 + a1[15]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.Mutation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_187878B40()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187878B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v2, v1, a1);
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.Mutation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_187878BA4()
{
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
}

uint64_t sub_187878BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v2, v1, v1, a1);
}

void partial apply for closure #1 in ToolbarReader.Mutation.apply()()
{
  closure #1 in ToolbarReader.Mutation.apply()();
}

double LongPressGesture.minimumDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LongPressGesture.minimumDuration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*LongPressGesture.minimumDuration.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double LongPressGesture.maximumDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void LongPressGesture.maximumDistance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double (*LongPressGesture.maximumDistance.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return LongPressGesture.maximumDistance.modify;
}

double LongPressGesture.maximumDistance.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)a1;
  return result;
}

void LongPressGesture.init(minimumDuration:maximumDistance:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void LongPressGesture.init(minimumDuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static LongPressGesture._makeGesture(gesture:inputs:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static LongPressGesture._makeGesture(gesture:inputs:)(a1, a2, (void (*)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))lazy protocol witness table accessor for type LongPressGesture and conformance LongPressGesture, (uint64_t)&type metadata for LongPressGesture, a5, a6, a7, a8);
}

unint64_t lazy protocol witness table accessor for type LongPressGesture and conformance LongPressGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture;
  if (!lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LongPressGesture, &type metadata for LongPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture;
  if (!lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LongPressGesture, &type metadata for LongPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture);
  }
  return result;
}

__n128 LongPressGesture.internalBody.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = specialized closure #1 in Gesture.longPressPhase();
  *(_QWORD *)(a1 + 16) = 0;
  result = *v1;
  *(__n128 *)(a1 + 24) = *v1;
  *(_QWORD *)(a1 + 40) = 16;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

__n128 protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance LongPressGesture@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = specialized closure #1 in Gesture.longPressPhase();
  *(_QWORD *)(a1 + 16) = 0;
  result = *v1;
  *(__n128 *)(a1 + 24) = *v1;
  *(_QWORD *)(a1 + 40) = 16;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))lazy protocol witness table accessor for type LongPressGesture and conformance LongPressGesture, a6, a7, a8);
}

void protocol witness for Gesture.body.getter in conformance LongPressGesture()
{
  protocol witness for Gesture.body.getter in conformance RotationGesture();
}

void View.pressableGesture<A>(_:action:pressingAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  _UNKNOWN **v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for PressableGestureCallbacks(255, AssociatedTypeWitness, a10, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PressableGestureCallbacks<A>, v13);
  v14 = type metadata accessor for CallbacksGesture();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3150], v14);
  v15 = type metadata accessor for ModifierGesture();
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v15);
  v17 = (ValueMetadata *)MEMORY[0x1E0CE5A80];
  v23 = v15;
  v24 = (ValueMetadata *)MEMORY[0x1E0CE5A80];
  v18 = (_UNKNOWN **)MEMORY[0x1E0CE5A70];
  v25 = v16;
  v26 = (_UNKNOWN **)MEMORY[0x1E0CE5A70];
  MEMORY[0x18D75FF88](255, &v23, MEMORY[0x1E0CE76E8], 0);
  v23 = v15;
  v24 = v17;
  v25 = v16;
  v26 = v18;
  swift_getOpaqueTypeConformance2();
  v19 = type metadata accessor for AddGestureModifier();
  v20 = type metadata accessor for ModifiedContent();
  v22[0] = a8;
  v22[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE41B8], v19);
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v22);
  v23 = v20;
  v24 = &type metadata for PrimitiveButtonGesture;
  v25 = v21;
  v26 = &protocol witness table for PrimitiveButtonGesture;
  MEMORY[0x18D75FF88](0, &v23, MEMORY[0x1E0CE6ED8], 0);
  v23 = swift_checkMetadataState();
  v24 = &type metadata for PrimitiveButtonGesture;
  v25 = v21;
  v26 = &protocol witness table for PrimitiveButtonGesture;
  swift_getOpaqueTypeConformance2();
  StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE5A48], (void (*)(void))partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:));
}

uint64_t closure #1 in View.pressableGesture<A>(_:action:pressingAction:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(unsigned __int8 *);
  uint64_t (*v43)(char);
  unsigned __int8 v44;
  uint64_t v45;
  char *v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  ValueMetadata *v68;
  uint64_t v69;
  _UNKNOWN **v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD v74[3];

  v66 = a6;
  v62 = a1;
  v63 = a5;
  v59 = a3;
  v60 = a4;
  v61 = a2;
  v64 = a8;
  v57 = a11;
  v65 = 255;
  v53 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for PressableGestureCallbacks(255, AssociatedTypeWitness, a11, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PressableGestureCallbacks<A>, v13);
  v14 = type metadata accessor for CallbacksGesture();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3150], v14);
  v15 = type metadata accessor for ModifierGesture();
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v15);
  v17 = (ValueMetadata *)MEMORY[0x1E0CE5A80];
  v67 = v15;
  v68 = (ValueMetadata *)MEMORY[0x1E0CE5A80];
  v18 = (_UNKNOWN **)MEMORY[0x1E0CE5A70];
  v69 = v16;
  v70 = (_UNKNOWN **)MEMORY[0x1E0CE5A70];
  v19 = MEMORY[0x18D75FF88](0, &v67, MEMORY[0x1E0CE76E8], 0);
  v52 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v51 - v21;
  v67 = v15;
  v68 = v17;
  v69 = v16;
  v70 = v18;
  swift_getOpaqueTypeConformance2();
  v23 = type metadata accessor for AddGestureModifier();
  v24 = type metadata accessor for ModifiedContent();
  v58 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v51 - v27;
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE41B8], v23, v26);
  v74[0] = a9;
  v74[1] = v29;
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v24, v74);
  v67 = v24;
  v68 = &type metadata for PrimitiveButtonGesture;
  v56 = v30;
  v69 = v30;
  v70 = &protocol witness table for PrimitiveButtonGesture;
  v31 = MEMORY[0x18D75FF88](0, &v67, MEMORY[0x1E0CE6ED8], 0);
  v55 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v51 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v54 = (char *)&v51 - v37;
  Gesture<>.callbacks(pressing:pressed:)(0, 0, v59, v60, v53, a10, v57, (uint64_t)v22);
  v61 = v28;
  View.gesture<A>(_:including:)();
  v38 = v63;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v19);
  if (v38)
  {
    v39 = swift_allocObject();
    v40 = v66;
    *(_QWORD *)(v39 + 16) = v38;
    *(_QWORD *)(v39 + 24) = v40;
    v41 = swift_allocObject();
    v42 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(_QWORD *)(v41 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(_QWORD *)(v41 + 24) = v39;
    swift_retain();
    v65 = 1;
    v43 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    v43 = 0;
    v41 = 0;
    v42 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v38, v66);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v42);
  v67 = (uint64_t)v43;
  v68 = (ValueMetadata *)v41;
  v44 = v65;
  LOBYTE(v69) = v65;
  v71 = 0;
  v72 = 0;
  v70 = (_UNKNOWN **)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v73 = 1;
  v45 = v56;
  v46 = v61;
  View.simultaneousGesture<A>(_:including:)();
  outlined consume of ButtonPressingAction?((uint64_t)v43, v41, v44);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v24);
  v67 = v24;
  v68 = &type metadata for PrimitiveButtonGesture;
  v69 = v45;
  v70 = &protocol witness table for PrimitiveButtonGesture;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v48 = (uint64_t)v54;
  static ViewBuilder.buildExpression<A>(_:)(v34, v31, OpaqueTypeConformance2);
  v49 = *(void (**)(char *, uint64_t))(v55 + 8);
  v49(v34, v31);
  static ViewBuilder.buildBlock<A>(_:)(v48, v31, v64);
  return ((uint64_t (*)(uint64_t, uint64_t))v49)(v48, v31);
}

uint64_t closure #2 in View.pressableGesture<A>(_:action:pressingAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v43 = a5;
  v44 = a6;
  v41 = a3;
  v42 = a4;
  v47 = a1;
  v48 = a8;
  v40 = a11;
  v45 = a2;
  v46 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for PressableGestureCallbacks(255, AssociatedTypeWitness, a11, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PressableGestureCallbacks<A>, v14);
  v15 = type metadata accessor for CallbacksGesture();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3150], v15);
  v16 = type metadata accessor for ModifierGesture();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v16);
  v18 = MEMORY[0x1E0CE5A80];
  v50 = v16;
  v51 = MEMORY[0x1E0CE5A80];
  v19 = MEMORY[0x1E0CE5A70];
  v52 = v17;
  v53 = MEMORY[0x1E0CE5A70];
  v20 = MEMORY[0x18D75FF88](0, &v50, MEMORY[0x1E0CE76E8], 0);
  v39 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v38 - v22;
  v50 = v16;
  v51 = v18;
  v52 = v17;
  v53 = v19;
  swift_getOpaqueTypeConformance2();
  v24 = type metadata accessor for AddGestureModifier();
  v25 = type metadata accessor for ModifiedContent();
  v38 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v38 - v31;
  Gesture<>.callbacks(pressing:pressed:)(v41, v42, v43, v44, a7, a10, v40, (uint64_t)v23);
  v33 = v46;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v20);
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE41B8], v24);
  v49[0] = v33;
  v49[1] = v34;
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v25, v49);
  static ViewBuilder.buildExpression<A>(_:)(v28, v25, v35);
  v36 = *(void (**)(char *, uint64_t))(v38 + 8);
  v36(v28, v25);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v32, v25, v48);
  return ((uint64_t (*)(char *, uint64_t))v36)(v32, v25);
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance Bool(uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_18787974C + 4 * byte_187C66D30[*(unsigned __int8 *)(a1 + 1)]))(0);
}

uint64_t sub_18787974C()
{
  char v0;

  return v0 & 1;
}

void View.onLongPressGesture(minimumDuration:pressing:perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double DelayedLongPressGesture.minimumDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*DelayedLongPressGesture.minimumDuration.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*DelayedLongPressGesture.maximumDistance.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = *(_QWORD *)(v1 + 8);
  return DelayedLongPressGesture.maximumDistance.modify;
}

void DelayedLongPressGesture.init(minimumDuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static DelayedLongPressGesture._makeGesture(gesture:inputs:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static LongPressGesture._makeGesture(gesture:inputs:)(a1, a2, (void (*)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))lazy protocol witness table accessor for type DelayedLongPressGesture and conformance DelayedLongPressGesture, (uint64_t)&type metadata for DelayedLongPressGesture, a5, a6, a7, a8);
}

uint64_t static LongPressGesture._makeGesture(gesture:inputs:)(uint64_t a1, _QWORD *a2, void (*a3)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  a3(a1, a2, a3, a4, a5, a6, a7, a8, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

uint64_t DelayedLongPressGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)@<X0>(uint64_t@<X0>, _WORD *@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  uint64_t (*v49)@<X0>(uint64_t@<X0>, _WORD *@<X8>);
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;

  v47 = a1;
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(0);
  v3 = v2;
  v41 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(0);
  v8 = v7;
  v43 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(0);
  v44 = v12;
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v40 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
  v46 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v42 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t (*)@<X0>(uint64_t@<X0>, _WORD *@<X8>))*v1;
  default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)();
  DistanceGesture.init(minimumDistance:maximumDistance:)();
  v19 = v56;
  v20 = v57;
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v52, (uint64_t)v48);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v48, (uint64_t)&v59);
  v58[0] = v19;
  v58[1] = v20;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v48);
  outlined destroy of CoordinateSpace((uint64_t)&v52);
  v48[0] = 0;
  v49 = specialized closure #1 in Gesture.longPressPhase();
  v50 = 0;
  LOBYTE(v52) = 0;
  *((_QWORD *)&v52 + 1) = v18;
  *(_QWORD *)&v53 = 0x7FF0000000000000;
  BYTE8(v53) = 0;
  type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
  v22 = v21;
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  v24 = v23;
  v25 = MEMORY[0x1E0CE2E88];
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
  v27 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, v25);
  Gesture.ended<A>(by:)();
  v48[0] = 0;
  v49 = v18;
  v50 = 0x7FF0000000000000;
  v51 = 0;
  *(_QWORD *)&v52 = v22;
  *((_QWORD *)&v52 + 1) = v24;
  *(_QWORD *)&v53 = MEMORY[0x1E0DEAFA0];
  *((_QWORD *)&v53 + 1) = v26;
  v28 = MEMORY[0x1E0DEAFA0];
  v54 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  Gesture.enabled<A>(by:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v6, v3);
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  v31 = v30;
  *(_QWORD *)&v52 = v3;
  *((_QWORD *)&v52 + 1) = v24;
  *(_QWORD *)&v53 = v28;
  *((_QWORD *)&v53 + 1) = OpaqueTypeConformance2;
  v32 = v28;
  v54 = v27;
  v33 = swift_getOpaqueTypeConformance2();
  v34 = MEMORY[0x1E0CE2E88];
  v35 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, MEMORY[0x1E0CE2E88]);
  v36 = v40;
  Gesture.gated<A>(by:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v8);
  *(_QWORD *)&v52 = v8;
  *((_QWORD *)&v52 + 1) = v31;
  *(_QWORD *)&v53 = v32;
  *((_QWORD *)&v53 + 1) = v33;
  v54 = v35;
  swift_getOpaqueTypeConformance2();
  v37 = (uint64_t)v42;
  v38 = v44;
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v38);
  LOBYTE(v52) = 2;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>, v34);
  Gesture.dependency(_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DelayedLongPressGesture(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))lazy protocol witness table accessor for type DelayedLongPressGesture and conformance DelayedLongPressGesture, a6, a7, a8);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a6, uint64_t a7, uint64_t a8)
{
  a5(a1, a2, a3, a4, a5, a6, a7, a8, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance DelayedLongPressGesture()
{
  protocol witness for Gesture.body.getter in conformance RotationGesture();
}

void View.onDelayedLongPressGesture(minimumDuration:maximumDistance:perform:onPressingChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  _QWORD v8[2];

  *(double *)v8 = a7;
  *(double *)&v8[1] = a8;
  View.pressableGesture<A>(_:action:pressingAction:)((uint64_t)v8, a1, a2, a3, a4, a5, (uint64_t)&type metadata for DelayedLongPressGesture, a6, (uint64_t)&protocol witness table for DelayedLongPressGesture, (uint64_t)&protocol witness table for Bool);
}

void View.onDelayedLongPressGesture(minimumDuration:perform:onPressingChanged:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t SingleLongPressGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v44 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v52 = v3;
  v53 = v6;
  v41 = v3;
  v7 = v6;
  v36 = v6;
  v54 = v4;
  v55 = v5;
  v40 = v5;
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
  v8 = v56;
  v39 = v56;
  v9 = MEMORY[0x1E0CE7728];
  v10 = MEMORY[0x18D75FF88](0, &v52);
  v43 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v37 = (char *)v34 - v12;
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  v14 = v13;
  v52 = v3;
  v53 = v7;
  v54 = v4;
  v55 = v5;
  v56 = v8;
  v15 = v9;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v17 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, MEMORY[0x1E0CE2E88]);
  v52 = v10;
  v53 = v14;
  v34[1] = v14;
  v54 = v4;
  v55 = OpaqueTypeConformance2;
  v56 = v17;
  v18 = MEMORY[0x18D75FF88](0, &v52, v15, 0);
  v42 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v34 - v20;
  v22 = type metadata accessor for EventFilter();
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1180], v22);
  v52 = v10;
  v53 = v14;
  v54 = v4;
  v55 = OpaqueTypeConformance2;
  v56 = v17;
  v35 = swift_getOpaqueTypeConformance2();
  v52 = v22;
  v53 = v18;
  v54 = v23;
  v55 = v35;
  v24 = type metadata accessor for ModifierGesture();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)v34 - v27;
  v29 = *(_QWORD *)(v38 + *(int *)(a1 + 44));
  default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)();
  DistanceGesture.init(minimumDistance:maximumDistance:)();
  v30 = v50;
  v31 = v51;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v49 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v46, (uint64_t)v45);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v45, (uint64_t)&v54);
  v52 = v30;
  v53 = v31;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v45);
  outlined destroy of CoordinateSpace((uint64_t)&v46);
  LOBYTE(v46) = 0;
  *((_QWORD *)&v46 + 1) = v29;
  *(_QWORD *)&v47 = 0x7FF0000000000000;
  BYTE8(v47) = 0;
  swift_checkMetadataState();
  v32 = v37;
  Gesture.ended<A>(by:)();
  swift_checkMetadataState();
  Gesture.gated<A>(by:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v10);
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v18);
  LOBYTE(v46) = 2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v24);
  Gesture.dependency(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

unint64_t lazy protocol witness table accessor for type DelayedLongPressGesture and conformance DelayedLongPressGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture;
  if (!lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DelayedLongPressGesture, &type metadata for DelayedLongPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture;
  if (!lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DelayedLongPressGesture, &type metadata for DelayedLongPressGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture);
  }
  return result;
}

void type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>)
  {
    v0 = MEMORY[0x1E0CE2078];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, Bool>, MEMORY[0x1E0CE2078], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, v0, MEMORY[0x1E0CE2068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, Bool>, MEMORY[0x1E0CE2078], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, MEMORY[0x1E0CE2078], MEMORY[0x1E0CE2068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1EC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>)
  {
    v0 = MEMORY[0x1E0CE2078];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, MEMORY[0x1E0CE2078], MEMORY[0x1E0CE2CC8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, v0, MEMORY[0x1E0CE2068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type DurationGesture<TappableEvent> and conformance DurationGesture<A>();
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type DurationGesture<TappableEvent> and conformance DurationGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>;
  if (!lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, MEMORY[0x1E0CE2078], MEMORY[0x1E0CE2CC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2CD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in LongPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in LongPressGesture()
{
  return &protocol witness table for LongPressGesture;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in DelayedLongPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in DelayedLongPressGesture()
{
  return &protocol witness table for DelayedLongPressGesture;
}

double sub_18787AB64@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_18787AB70(double *a1, uint64_t a2)
{
  double result;

  result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

ValueMetadata *type metadata accessor for DelayedLongPressGesture()
{
  return &type metadata for DelayedLongPressGesture;
}

uint64_t sub_18787AB8C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>)
  {
    v0 = (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2C58];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0CE2C58]);
    type metadata accessor for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>(255);
    lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type CategoryGesture<Bool> and conformance CategoryGesture<A>, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<Bool>, v0, MEMORY[0x1E0CE2C68]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>> and conformance SingleLongPressGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>, (uint64_t)&protocol conformance descriptor for SingleLongPressGesture<A, B>);
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>);
  }
}

void type metadata accessor for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>)
  {
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
    v5 = type metadata accessor for SingleLongPressGesture(a1, MEMORY[0x1E0DEAFA0], v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>);
  }
}

uint64_t type metadata accessor for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SingleLongPressGesture);
}

void sub_18787AD28(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzlAA8StaticIfVyAA23GestureContainerFeatureVAaBPAAE012simultaneousF0_9includingQrqd___AA0F4MaskVtAA0F0Rd__lFQOyAA15ModifiedContentVyxAA03AddF8ModifierVyAaLPAAE14truePreferenceyQrqd__mAA0Q3KeyRd__Sb5ValueRtd__lFQOyAA0oF0VyAA09CallbacksF0VyAA09PressablefT033_C70334A42970E36EF599A57E69899EA7LLVySbGGAA09LongPressF0VG_AA013IsCancellablefR0VQo_GG_AA015PrimitiveButtonF0VQo_A10_GAaBHPqd0__AaBHD3_A13_HO_A10_AaBHPxAaBHD1__A9_AA0cO0HPyHCHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, &lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>);
}

void type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>(uint64_t a1)
{
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>(a1, &lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, &lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>, (unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture> and conformance ModifierGesture<A, B>);
}

{
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>(a1, &lazy cache variable for type metadata for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, &lazy cache variable for type metadata for <<opaque return type of Gesture.truePreference<A>(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>, &lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture> and conformance ModifierGesture<A, B>);
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(uint64_t a1)
{
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(a1, &lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>);
}

uint64_t sub_18787AD7C()
{
  type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>, MEMORY[0x1E0CE2E88]);
  return swift_getOpaqueTypeConformance2();
}

void sub_18787ADDC(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzlAA8StaticIfVyAA23GestureContainerFeatureVAaBPAAE012simultaneousF0_9includingQrqd___AA0F4MaskVtAA0F0Rd__lFQOyAA15ModifiedContentVyxAA03AddF8ModifierVyAaLPAAE14truePreferenceyQrqd__mAA0Q3KeyRd__Sb5ValueRtd__lFQOyAA0oF0VyAA09CallbacksF0VyAA09PressablefT033_C70334A42970E36EF599A57E69899EA7LLVySbGGAA09LongPressF0VG_AA013IsCancellablefR0VQo_GG_AA015PrimitiveButtonF0VQo_A10_GAaBHPqd0__AaBHD3_A13_HO_A10_AaBHPxAaBHD1__A9_AA0cO0HPyHCHCHCTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, &lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>);
}

void get_witness_table_7SwiftUI4ViewRzlAA8StaticIfVyAA23GestureContainerFeatureVAaBPAAE012simultaneousF0_9includingQrqd___AA0F4MaskVtAA0F0Rd__lFQOyAA15ModifiedContentVyxAA03AddF8ModifierVyAaLPAAE14truePreferenceyQrqd__mAA0Q3KeyRd__Sb5ValueRtd__lFQOyAA0oF0VyAA09CallbacksF0VyAA09PressablefT033_C70334A42970E36EF599A57E69899EA7LLVySbGGAA09LongPressF0VG_AA013IsCancellablefR0VQo_GG_AA015PrimitiveButtonF0VQo_A10_GAaBHPqd0__AaBHD3_A13_HO_A10_AaBHPxAaBHD1__A9_AA0cO0HPyHCHCHCTm(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  _UNKNOWN **v11;
  _QWORD v12[2];

  v5 = *(_QWORD *)(a1 + 8);
  a2(255);
  v6 = type metadata accessor for ModifiedContent();
  v12[0] = v5;
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a3, a2, MEMORY[0x1E0CE41B8]);
  v8 = v6;
  v9 = &type metadata for PrimitiveButtonGesture;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v12);
  v11 = &protocol witness table for PrimitiveButtonGesture;
  v7 = MEMORY[0x18D75FF88](255, &v8, MEMORY[0x1E0CE6ED8], 0);
  v8 = MEMORY[0x1E0CE5A48];
  v9 = (ValueMetadata *)v7;
  v10 = v6;
  v11 = (_UNKNOWN **)MEMORY[0x1E0CE5A38];
  type metadata accessor for StaticIf();
}

uint64_t sub_18787AEB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = v2;
  v10 = v3;
  v11 = v1;
  v12 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v8 = v1;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &OpaqueTypeConformance2);
}

void type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255, a3, a4, a5);
    a4(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a5, a4, MEMORY[0x1E0CE2E88]);
    swift_getOpaqueTypeConformance2();
    v8 = type metadata accessor for AddGestureModifier();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  if (!*a2)
  {
    v8 = a3(255);
    v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE2E88]);
    v12[0] = v8;
    v12[1] = MEMORY[0x1E0CE5A80];
    v12[2] = v9;
    v12[3] = MEMORY[0x1E0CE5A70];
    v10 = MEMORY[0x18D75FF88](a1, v12, MEMORY[0x1E0CE76E8], 0);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>(uint64_t a1)
{
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(a1, &lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>);
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongPressGesture>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<Bool>> and conformance CallbacksGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>, MEMORY[0x1E0CE3150]);
    v3 = type metadata accessor for ModifierGesture();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t type metadata completion function for SingleLongPressGesture()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleLongPressGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleLongPressGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18787B4B8 + 4 * byte_187C66D34[v8]))();
}

void storeEnumTagSinglePayload for SingleLongPressGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18787B600()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18787B608(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18787B610);
}

void sub_18787B62C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18787B634()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18787B63C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x18787B644);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SingleLongPressGesture<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)()
{
  return partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.pressableGesture<A>(_:action:pressingAction:));
}

uint64_t partial apply for closure #2 in View.pressableGesture<A>(_:action:pressingAction:)()
{
  return partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in View.pressableGesture<A>(_:action:pressingAction:));
}

uint64_t partial apply for closure #1 in View.pressableGesture<A>(_:action:pressingAction:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t outlined consume of ButtonPressingAction?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined consume of HoverCallback();
  return result;
}

uint64_t sub_18787B708()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18787B72C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = type metadata accessor for EventFilter();
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  v6 = v5;
  v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
  v20 = v2;
  v21 = v6;
  v22 = v1;
  v23 = v3;
  v24 = v7;
  v8 = MEMORY[0x1E0CE7728];
  v9 = MEMORY[0x18D75FF88](255, &v20, MEMORY[0x1E0CE7728], 0);
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  v11 = v10;
  v20 = v2;
  v21 = v6;
  v22 = v1;
  v23 = v3;
  v24 = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, MEMORY[0x1E0CE2E88]);
  v20 = v9;
  v21 = v11;
  v22 = v1;
  v23 = OpaqueTypeConformance2;
  v24 = v13;
  v14 = MEMORY[0x18D75FF88](255, &v20, v8, 0);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1180], v4);
  v20 = v9;
  v21 = v11;
  v22 = v1;
  v23 = OpaqueTypeConformance2;
  v24 = v13;
  v16 = swift_getOpaqueTypeConformance2();
  v20 = v4;
  v21 = v14;
  v22 = v15;
  v23 = v16;
  v17 = type metadata accessor for ModifierGesture();
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v17);
  v20 = v17;
  v21 = v18;
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double (*v5)(uint64_t, uint64_t);
  double v6;
  double v7;
  double v8;

  v5 = *(double (**)(uint64_t, uint64_t))(a3 + 8);
  if (v5(a2, a3) == 1.79769313e308 && v6 == 1.79769313e308 && v7 == 1.79769313e308 && v8 == 1.79769313e308)
    v5 = *(double (**)(uint64_t, uint64_t))(a3 + 32);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a2, a3);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return v2 & 1;
  if (*(_BYTE *)(a2 + 32) == (result & 1))
    return 1;
  if (v2 == 1)
    return 0;
  v3 = 33;
  while (1)
  {
    v4 = v3 - 31;
    if (__OFADD__(v3 - 32, 1))
      break;
    v5 = *(_BYTE *)(a2 + v3) ^ result;
    if ((v5 & 1) != 0)
    {
      ++v3;
      if (v4 != v2)
        continue;
    }
    LOBYTE(v2) = v5 ^ 1;
    return v2 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;
  _BYTE v9[40];
  _BYTE v10[24];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v4 = a2 + 32;
  swift_bridgeObjectRetain();
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(v4, (uint64_t)v15);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v15, (uint64_t)v10);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v12);
    switch(v11)
    {
      case 0:
        if (*((_QWORD *)&v13 + 1))
          goto LABEL_19;
        goto LABEL_25;
      case 1:
        if (*((_QWORD *)&v13 + 1) == 1)
          goto LABEL_25;
        goto LABEL_19;
      case 2:
        if (*((_QWORD *)&v13 + 1) == 2)
          goto LABEL_25;
        goto LABEL_19;
      case 3:
        if (*((_QWORD *)&v13 + 1) == 3)
          goto LABEL_25;
        goto LABEL_19;
      case 4:
        if (*((_QWORD *)&v13 + 1) == 4)
          goto LABEL_25;
        goto LABEL_19;
      case 5:
        if (*((_QWORD *)&v13 + 1) == 5)
          goto LABEL_25;
        goto LABEL_19;
      case 6:
        if (*((_QWORD *)&v13 + 1) != 6)
          goto LABEL_19;
        goto LABEL_25;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v10, (uint64_t)v9);
        if (*((_QWORD *)&v13 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v9);
LABEL_19:
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          goto LABEL_20;
        }
        v7[0] = v12;
        v7[1] = v13;
        v8 = v14;
        v5 = MEMORY[0x18D75E284](v9, v7);
        outlined destroy of AnyHashable((uint64_t)v7);
        outlined destroy of AnyHashable((uint64_t)v9);
        if ((v5 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
          v4 += 40;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
LABEL_25:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

double specialized ScaledClarityUIMetric.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  char v8;
  double v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_BYTE *)(v0 + 40);
  v6 = v20;
  v7 = *(_QWORD *)v0;
  v8 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v0, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v19);
  outlined consume of Environment<Bool>.Content(v7, v8);
  v9 = MEMORY[0x18D75AD8C](&v20, &v19);
  v18 = v6;
  v17 = 7;
  v10 = v9 / MEMORY[0x18D75AD8C](&v18, &v17) * *(double *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 16);
  v12 = *(_BYTE *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v11, v12);
  v13 = specialized Environment.wrappedValue.getter(v11, v12);
  outlined consume of Environment<Bool>.Content(v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0DED4F0], v1);
  v16 = v10;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v13);
  v14 = v16;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v14;
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:isAdminModeEnabled:titles:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)(a1, a2, a3, 0, 1, a6, a7, a8, a9);
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)(a1, a2, a3, 0, 1, a4, a5, a6, a7);
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v12 = a5 & 1;
  static Binding.constant(_:)();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a6;
  *(_QWORD *)(v13 + 24) = a7;
  swift_retain();
  *(_QWORD *)&v15 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  *((_QWORD *)&v15 + 1) = v13;
  View.multimodalNavigationChrome(shouldDisplay:isKeyboardVisible:bottomBarTransitionProgress:backButtonAction:)(a1, a2, a3, v20, v21, v22, a4, v12, v15, a8, a9);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_18787BFA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:isKeyboardVisible:bottomBarTransitionProgress:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  _OWORD v12[11];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  LOBYTE(v15) = a3;
  *((_QWORD *)&v15 + 1) = a4;
  *(_QWORD *)&v16 = a5;
  BYTE8(v16) = a6;
  *(_QWORD *)&v17 = a7;
  BYTE8(v17) = a8 & 1;
  v18 = a9;
  *(_QWORD *)&v19 = swift_getKeyPath();
  BYTE8(v19) = 0;
  *(_QWORD *)&v20 = swift_getKeyPath();
  BYTE8(v20) = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v13 = 0;
  v12[4] = a9;
  v12[5] = v19;
  v12[6] = v20;
  memset(&v12[7], 0, 64);
  v12[0] = v14;
  v12[1] = v15;
  v12[2] = v16;
  v12[3] = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a10, &type metadata for MultimodalNavigationChromeModifier, a11);
  return outlined release of MultimodalNavigationChromeModifier((uint64_t)&v14);
}

uint64_t View.scrollsUnderMultimodalNavigationChrome(scrollInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  char v9;

  v3 = *(_BYTE *)(a1 + 96);
  v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v6;
  v9 = v3;
  return MEMORY[0x18D75B4AC](v8, a2, &unk_1E1B0A0E8, a3);
}

uint64_t closure #1 in MultimodalNavigationChromeModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  id v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void (**v49)(uint64_t);
  void (*v50)(char *, uint64_t);
  id v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (**v61)(uint64_t);
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *(**v69)(uint64_t *);
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  void (**v77)(char *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  char v95;
  uint64_t v96;
  _OWORD v97[11];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111[3];
  int v112;
  _BYTE v113[168];

  v93 = a3;
  v5 = type metadata accessor for NSNotificationCenter.Publisher();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>();
  MEMORY[0x1E0C80A78](v86, v14);
  v84 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>(0);
  v87 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v89 = (uint64_t)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, v19, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  v88 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v92 = (uint64_t)&v82 - v22;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>();
  v91 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v90 = (uint64_t)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_OWORD *)(a1 + 16);
  v111[0] = *(_OWORD *)a1;
  v111[1] = v26;
  v111[2] = *(_OWORD *)(a1 + 32);
  v112 = *(_DWORD *)(a1 + 48);
  v27 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in MultimodalNavigationChromeModifier.body(content:)((__int128 *)a2, v111, (uint64_t)&v99);
  outlined init with take of Image.Resolved?((uint64_t)&v99, (uint64_t)v113, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1E1AE0690);
  v28 = *(_OWORD *)(a2 + 144);
  v107 = *(_OWORD *)(a2 + 128);
  v108 = v28;
  v109 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)&v110 = *(_QWORD *)(a2 + 176);
  v29 = *(_OWORD *)(a2 + 80);
  v103 = *(_OWORD *)(a2 + 64);
  v104 = v29;
  v30 = *(_OWORD *)(a2 + 112);
  v105 = *(_OWORD *)(a2 + 96);
  v106 = v30;
  v31 = *(_OWORD *)(a2 + 16);
  v99 = *(_OWORD *)a2;
  v100 = v31;
  v32 = *(_OWORD *)(a2 + 48);
  v101 = *(_OWORD *)(a2 + 32);
  v102 = v32;
  if ((MultimodalNavigationChromeModifier.shouldDisplayInCurrentProcess.getter() & 1) != 0
    && (v99 = *(_OWORD *)(a2 + 24),
        LOBYTE(v100) = *(_BYTE *)(a2 + 40),
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]), MEMORY[0x18D75B9C8](v97), LOBYTE(v97[0]) != 1))
  {
    v85 = 4;
  }
  else
  {
    v85 = 0;
  }
  outlined init with take of Image.Resolved?((uint64_t)v113, (uint64_t)v97, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1E1AE0690);
  v97[10] = xmmword_187BFE310;
  LOWORD(v98) = 512;
  *((_QWORD *)&v98 + 1) = v27;
  v107 = v97[8];
  v108 = v97[9];
  v103 = v97[4];
  v104 = v97[5];
  v105 = v97[6];
  v106 = v97[7];
  v99 = v97[0];
  v100 = v97[1];
  v101 = v97[2];
  v102 = v97[3];
  v109 = xmmword_187BFE310;
  v110 = v98;
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend(v33, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  v35 = swift_allocObject();
  v36 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v35 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v35 + 128) = v36;
  v37 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v35 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v35 + 96) = v37;
  *(_QWORD *)(v35 + 192) = *(_QWORD *)(a2 + 176);
  v38 = *(_OWORD *)(a2 + 160);
  v39 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v35 + 160) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v35 + 176) = v38;
  *(_OWORD *)(v35 + 144) = v39;
  v40 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v35 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v35 + 32) = v40;
  v41 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v35 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v35 + 64) = v41;
  v42 = &v13[*(int *)(v10 + 52)];
  v83 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v83(v42, v9, v5);
  v43 = v108;
  *((_OWORD *)v13 + 8) = v107;
  *((_OWORD *)v13 + 9) = v43;
  v44 = v110;
  *((_OWORD *)v13 + 10) = v109;
  *((_OWORD *)v13 + 11) = v44;
  v45 = v104;
  *((_OWORD *)v13 + 4) = v103;
  *((_OWORD *)v13 + 5) = v45;
  v46 = v106;
  *((_OWORD *)v13 + 6) = v105;
  *((_OWORD *)v13 + 7) = v46;
  v47 = v100;
  *(_OWORD *)v13 = v99;
  *((_OWORD *)v13 + 1) = v47;
  v48 = v102;
  *((_OWORD *)v13 + 2) = v101;
  *((_OWORD *)v13 + 3) = v48;
  v13[192] = v85;
  v49 = (void (**)(uint64_t))&v13[*(int *)(v10 + 56)];
  *v49 = partial apply for closure #2 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v49[1] = (void (*)(uint64_t))v35;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  v50 = *(void (**)(char *, uint64_t))(v6 + 8);
  v50(v9, v5);
  v51 = objc_msgSend(v33, (SEL)&selRef_contentOffset + 7);
  NSNotificationCenter.publisher(for:object:)();

  v52 = swift_allocObject();
  v53 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v52 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v52 + 160) = v53;
  *(_OWORD *)(v52 + 176) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(v52 + 192) = *(_QWORD *)(a2 + 176);
  v54 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v52 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v52 + 96) = v54;
  v55 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v52 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v52 + 128) = v55;
  v56 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v52 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v52 + 32) = v56;
  v57 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v52 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v52 + 64) = v57;
  v58 = v84;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, v84, (uint64_t (*)(_QWORD))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>);
  v59 = v5;
  v60 = v86;
  v83((char *)(v58 + *(int *)(v86 + 52)), v9, v59);
  v61 = (void (**)(uint64_t))(v58 + *(int *)(v60 + 56));
  *v61 = partial apply for closure #3 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v61[1] = (void (*)(uint64_t))v52;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  v50(v9, v59);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>);
  v62 = swift_allocObject();
  v63 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v62 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v62 + 160) = v63;
  *(_OWORD *)(v62 + 176) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(v62 + 192) = *(_QWORD *)(a2 + 176);
  v64 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v62 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v62 + 96) = v64;
  v65 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v62 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v62 + 128) = v65;
  v66 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v62 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v62 + 32) = v66;
  v67 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v62 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v62 + 64) = v67;
  v68 = v89;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v58, v89, (uint64_t (*)(_QWORD))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>);
  v69 = (uint64_t *(**)(uint64_t *))(v68 + *(int *)(v87 + 36));
  *v69 = partial apply for closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v69[1] = (uint64_t *(*)(uint64_t *))v62;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, (uint64_t (*)(_QWORD))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>);
  v70 = swift_allocObject();
  v71 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v70 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v70 + 160) = v71;
  *(_OWORD *)(v70 + 176) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(v70 + 192) = *(_QWORD *)(a2 + 176);
  v72 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v70 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v70 + 96) = v72;
  v73 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v70 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v70 + 128) = v73;
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v70 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v70 + 32) = v74;
  v75 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v70 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v70 + 64) = v75;
  v76 = v92;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v68, v92, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>);
  v77 = (void (**)(char *))(v76 + *(int *)(v88 + 36));
  *v77 = partial apply for closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v77[1] = (void (*)(char *))v70;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>);
  v94 = *(_OWORD *)(a2 + 112);
  outlined retain of MultimodalNavigationChromeModifier(a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v78 = static Animation.coreAnimationDefault(duration:)();
  outlined release of MultimodalNavigationChromeModifier(a2);
  v94 = *(_OWORD *)(a2 + 24);
  v95 = *(_BYTE *)(a2 + 40);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v96);
  LOBYTE(v70) = v96;
  v79 = v90;
  outlined init with copy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(v76, v90);
  v80 = v79 + *(int *)(v91 + 36);
  *(_QWORD *)v80 = v78;
  *(_BYTE *)(v80 + 8) = v70;
  outlined destroy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(v76);
  return outlined init with take of TableCellFormula(v79, v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>);
}

uint64_t closure #1 in closure #1 in MultimodalNavigationChromeModifier.body(content:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  double v26;
  uint64_t KeyPath;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  _BYTE v32[7];
  _BYTE v33[7];
  _BYTE v34[7];
  _BYTE v35[7];
  _BYTE v36[7];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _BYTE v46[7];
  uint64_t v47;
  char v48;
  _BYTE v49[7];
  uint64_t v50;
  char v51;
  _BYTE v52[7];
  double v53;
  char v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[4];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _BYTE v64[32];

  v6 = a1[9];
  v60 = a1[8];
  v61 = v6;
  v62 = a1[10];
  v63 = *((_QWORD *)a1 + 22);
  v7 = a1[5];
  v57[2] = a1[4];
  v57[3] = v7;
  v8 = a1[7];
  v58 = a1[6];
  v59 = v8;
  v9 = a1[1];
  v55 = *a1;
  v56 = v9;
  v10 = a1[3];
  v57[0] = a1[2];
  v57[1] = v10;
  if ((MultimodalNavigationChromeModifier.shouldDisplayInCurrentProcess.getter() & 1) != 0)
  {
    v12 = *((_QWORD *)a1 + 8);
    v11 = *((_QWORD *)a1 + 9);
    v55 = *(__int128 *)((char *)a1 + 24);
    LOBYTE(v56) = *((_BYTE *)a1 + 40);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v14 = v13;
    swift_retain();
    MEMORY[0x18D75B9C8](&v37, v14);
    v15 = v37;
    v16 = MEMORY[0x1E0DEF040];
    outlined init with take of Image.Resolved?((uint64_t)(a1 + 3), (uint64_t)v64, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040]);
    v17 = a1[9];
    v55 = a1[8];
    v56 = v17;
    v57[0] = a1[10];
    *(_QWORD *)&v57[1] = *((_QWORD *)a1 + 22);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
    v30 = v38;
    v31 = v37;
    v18 = a3;
    v20 = v39;
    v19 = v40;
    v21 = a2[1];
    v55 = *a2;
    v56 = v21;
    v57[0] = a2[2];
    LODWORD(v57[1]) = *((_DWORD *)a2 + 12);
    GeometryProxy.size.getter();
    v23 = v22;
    *(_QWORD *)&v55 = v12;
    *((_QWORD *)&v55 + 1) = v11;
    LOBYTE(v56) = v15;
    outlined init with take of Image.Resolved?((uint64_t)v64, (uint64_t)&v56 + 8, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, v16);
    *(_OWORD *)((char *)v57 + 8) = v31;
    *(_OWORD *)((char *)&v57[1] + 8) = v30;
    *((_QWORD *)&v57[2] + 1) = v20;
    v57[3] = v19;
    a3 = v18;
    *(_QWORD *)&v58 = v23;
    v24 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v25 = objc_msgSend(v24, sel_userInterfaceIdiom);

    BYTE8(v58) = v25 == (id)1;
    v26 = specialized static BackButtonActionableBar.defaultBodyLeading.getter();
    KeyPath = swift_getKeyPath();
    v28 = swift_getKeyPath();
    v37 = v55;
    LOBYTE(v38) = v56;
    DWORD1(v38) = *(_DWORD *)&v36[3];
    *(_DWORD *)((char *)&v38 + 1) = *(_DWORD *)v36;
    *((_QWORD *)&v38 + 1) = *((_QWORD *)&v56 + 1);
    LOBYTE(v39) = v57[0];
    HIDWORD(v39) = *(_DWORD *)&v35[3];
    *(_DWORD *)((char *)&v39 + 1) = *(_DWORD *)v35;
    v40 = *(_OWORD *)((char *)v57 + 8);
    v41 = *(_OWORD *)((char *)&v57[1] + 8);
    v42 = *(_OWORD *)((char *)&v57[2] + 8);
    v43 = *((_QWORD *)&v57[3] + 1);
    v44 = v58;
    v45 = BYTE8(v58);
    *(_DWORD *)&v46[3] = *(_DWORD *)&v34[3];
    *(_DWORD *)v46 = *(_DWORD *)v34;
    v47 = KeyPath;
    v48 = 0;
    *(_DWORD *)&v49[3] = *(_DWORD *)&v33[3];
    *(_DWORD *)v49 = *(_DWORD *)v33;
    v50 = v28;
    v51 = 0;
    *(_DWORD *)&v52[3] = *(_DWORD *)&v32[3];
    *(_DWORD *)v52 = *(_DWORD *)v32;
    v53 = v26;
    v54 = 4;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v37);
  }
  else
  {
    _s7SwiftUI23BackButtonActionableBar33_94927F8A97ECE008E6A618C158753C28LLVSgWOi0_(&v37);
  }
  outlined init with take of Image.Resolved?((uint64_t)&v37, (uint64_t)&v55, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1E1AE0690);
  return outlined init with take of Image.Resolved?((uint64_t)&v55, a3, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1E1AE0690);
}

uint64_t MultimodalNavigationChromeModifier.shouldDisplayInCurrentProcess.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v1 = v0[1];
  v2 = *((_BYTE *)v0 + 16);
  v3 = v0[3];
  v4 = v0[4];
  v5 = *((_BYTE *)v0 + 40);
  v6 = v0[12];
  v7 = *((_BYTE *)v0 + 104);
  v11 = *v0;
  v12 = v1;
  v13 = v2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = v8;
  MEMORY[0x18D75B9C8](&v14);
  if (v14 != 1)
    return 0;
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, &v11);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if (v11 != 1)
    return 1;
  v11 = v3;
  v12 = v4;
  v13 = v5;
  MEMORY[0x18D75B9C8](&v14, v9);
  return v14;
}

void MultimodalNavigationChromeModifier.update(for:isKeyboardVisible:)(uint64_t a1, char a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;
  _OWORD v26[7];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v4 = *(_OWORD *)(v2 + 128);
  v5 = *(_OWORD *)(v2 + 160);
  v29 = *(_OWORD *)(v2 + 144);
  v30 = v5;
  v6 = *(_OWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 96);
  v8 = *(_OWORD *)(v2 + 112);
  v26[5] = *(_OWORD *)(v2 + 80);
  v26[6] = v7;
  v27 = v8;
  v28 = v4;
  v9 = *(_OWORD *)(v2 + 16);
  v26[0] = *(_OWORD *)v2;
  v26[1] = v9;
  v10 = *(_OWORD *)(v2 + 48);
  v26[2] = *(_OWORD *)(v2 + 32);
  v31 = *(_QWORD *)(v2 + 176);
  v26[3] = v10;
  v26[4] = v6;
  v11 = Notification.userInfo.getter();
  if (v11)
  {
    v12 = v11;
    v21 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v12 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v14 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v24);
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v23);
    if (*((_QWORD *)&v25 + 1))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v15 = MEMORY[0x1E0DEE9B8];
      if ((swift_dynamicCast() & 1) != 0)
      {
        v16 = v21;
        if (objc_msgSend(v21, sel_BOOLValue))
        {
          v22 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
          AnyHashable.init<A>(_:)();
          if (*(_QWORD *)(v12 + 16)
            && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v18 & 1) != 0))
          {
            outlined init with copy of Any(*(_QWORD *)(v12 + 56) + 32 * v17, (uint64_t)&v24);
          }
          else
          {
            v24 = 0u;
            v25 = 0u;
          }
          swift_bridgeObjectRelease();
          outlined destroy of AnyHashable((uint64_t)v23);
          if (*((_QWORD *)&v25 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              v19 = *((_QWORD *)&v27 + 1);
              swift_retain();
              objc_msgSend(v22, sel_doubleValue);
              v23[0] = v20;
              if (v19)
                dispatch thunk of AnyLocation.set(_:transaction:)();
              swift_release();

            }
          }
          else
          {
            outlined destroy of TableRowList?((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for Any?, v15 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          }
          LOBYTE(v23[0]) = a2 & 1;
          outlined retain of MultimodalNavigationChromeModifier((uint64_t)v26);
          swift_retain();
          swift_retain();
          dispatch thunk of AnyLocation.set(_:transaction:)();

          swift_release();
          swift_release();
          outlined release of MultimodalNavigationChromeModifier((uint64_t)v26);
        }
        else
        {
          swift_bridgeObjectRelease();

        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of TableRowList?((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    }
  }
}

uint64_t *closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t *result;
  _OWORD v7[3];
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_OWORD *)(a2 + 144);
  v7[0] = *(_OWORD *)(a2 + 128);
  v7[1] = v4;
  v5 = *(_OWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  v7[2] = v5;
  outlined init with take of TableCellFormula((uint64_t)&v8, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?);
  result = (uint64_t *)outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?);
  if (v10)
  {
    outlined copy of MultimodalCustomKeyboardActionKeyData?(v2, v3);
    outlined retain of State<MultimodalCustomKeyboardActionKeyData?>((uint64_t *)v7);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined consume of MultimodalCustomKeyboardActionKeyData?(v2, v3);
    return outlined release of State<MultimodalCustomKeyboardActionKeyData?>((uint64_t *)v7);
  }
  return result;
}

void closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(char *a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[32];
  _QWORD aBlock[6];

  v3 = *a1;
  LOBYTE(aBlock[0]) = *a1;
  swift_retain();
  outlined retain of MultimodalNavigationChromeModifier(a2);
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  outlined release of MultimodalNavigationChromeModifier(a2);
  v4 = *(void **)(a2 + 80);
  v5 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<UISceneSession?>.Content(v4, v5);
  v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<UISceneSession?>.Content(v4, v5);
  if (v6)
  {
    v7 = objc_msgSend(v6, sel_scene, aBlock[0]);

    if (v7)
    {
      v8 = objc_msgSend(v7, sel__FBSScene);

      if (v8)
      {
        MEMORY[0x1E0C80A78](v9, v10);
        v14[16] = v3;
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = partial apply for closure #1 in closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
        *(_QWORD *)(v11 + 24) = v14;
        v12 = swift_allocObject();
        *(_QWORD *)(v12 + 16) = partial apply for closure #1 in FBSScene.updateClarityUIClientSettings(_:);
        *(_QWORD *)(v12 + 24) = v11;
        aBlock[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
        aBlock[5] = v12;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
        aBlock[3] = &block_descriptor_63;
        v13 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v8, sel_updateClientSettingsWithBlock_, v13);
        _Block_release(v13);
        LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();

        swift_release();
        swift_release();
        if ((v13 & 1) != 0)
          __break(1u);
      }
    }
  }
}

uint64_t key path getter for EnvironmentValues.navigationBarHost : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.navigationBarHost : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.navigationBarHost.setter((uint64_t)&v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance MultimodalNavigationChromeModifier@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[11];
  uint64_t v16;

  v3 = *(_OWORD *)(v1 + 144);
  v15[8] = *(_OWORD *)(v1 + 128);
  v15[9] = v3;
  v15[10] = *(_OWORD *)(v1 + 160);
  v16 = *(_QWORD *)(v1 + 176);
  v4 = *(_OWORD *)(v1 + 80);
  v15[4] = *(_OWORD *)(v1 + 64);
  v15[5] = v4;
  v5 = *(_OWORD *)(v1 + 112);
  v15[6] = *(_OWORD *)(v1 + 96);
  v15[7] = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v15[0] = *(_OWORD *)v1;
  v15[1] = v6;
  v7 = *(_OWORD *)(v1 + 48);
  v15[2] = *(_OWORD *)(v1 + 32);
  v15[3] = v7;
  v8 = swift_allocObject();
  v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v8 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v8 + 160) = v9;
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(v1 + 160);
  *(_QWORD *)(v8 + 192) = *(_QWORD *)(v1 + 176);
  v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v8 + 96) = v10;
  v11 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v8 + 128) = v11;
  v12 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 32) = v12;
  v13 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v13;
  *a1 = partial apply for closure #1 in MultimodalNavigationChromeModifier.body(content:);
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v8;
  return outlined retain of MultimodalNavigationChromeModifier((uint64_t)v15);
}

void __swiftcall MultimodalNavigationChromeScrollInfo.init(scrollView:representedView:)(SwiftUI::MultimodalNavigationChromeScrollInfo *__return_ptr retstr, UIScrollView *scrollView, UIView *representedView)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;

  -[UIScrollView bounds](scrollView, sel_bounds);
  -[UIScrollView convertRect:toCoordinateSpace:](scrollView, sel_convertRect_toCoordinateSpace_, representedView);
  v28 = v7;
  v29 = v6;
  v26 = v9;
  v27 = v8;
  -[UIScrollView contentOffset](scrollView, sel_contentOffset);
  v11 = v10;
  v13 = v12;
  -[UIScrollView contentSize](scrollView, sel_contentSize);
  v15 = v14;
  v17 = v16;
  -[UIScrollView adjustedContentInset](scrollView, sel_adjustedContentInset);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;

  retstr->boundsInRepresentedView.origin.x = v29;
  retstr->boundsInRepresentedView.origin.y = v28;
  retstr->boundsInRepresentedView.size.width = v27;
  retstr->boundsInRepresentedView.size.height = v26;
  retstr->contentOffset.x = v11;
  retstr->contentOffset.y = v13;
  retstr->contentSize.width = v15;
  retstr->contentSize.height = v17;
  retstr->adjustedContentInset.top = v19;
  retstr->adjustedContentInset.left = v21;
  retstr->adjustedContentInset.bottom = v23;
  retstr->adjustedContentInset.right = v25;
}

double static ScrollsUnderMultimodalNavigationChromeModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  double result;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int OffsetAttribute2;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v40;
  double v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v37 = *(_DWORD *)(a2 + 36);
  v38 = *(_DWORD *)(a2 + 56);
  v35 = *(_DWORD *)(a2 + 64);
  v36 = *(_DWORD *)(a2 + 60);
  v33 = *(_DWORD *)(a2 + 72);
  v34 = *(_DWORD *)(a2 + 68);
  v31 = *(_DWORD *)(a2 + 80);
  v32 = *(_DWORD *)(a2 + 76);
  v43 = *(_QWORD *)a2;
  v12 = v43;
  v25 = v43;
  LODWORD(v44) = v5;
  v13 = v5;
  v24 = v5;
  v45 = v6;
  v14 = v6;
  v23 = v6;
  v46 = v8;
  v47 = v7;
  v15 = v8;
  v22 = v8;
  v16 = v7;
  v26 = v7;
  v27 = v9;
  v48 = __PAIR64__(v37, v9);
  v17 = v9;
  v49 = v10;
  v50 = v11;
  v18 = v10;
  v28 = v10;
  v19 = v11;
  *(_QWORD *)&v51 = __PAIR64__(v36, v38);
  *((_QWORD *)&v51 + 1) = __PAIR64__(v34, v35);
  *(_QWORD *)&v52 = __PAIR64__(v32, v33);
  DWORD2(v52) = v31;
  a3(&v40);
  LODWORD(v43) = v4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollsUnderMultimodalNavigationChromeModifier>, (uint64_t)&unk_1E1B0A0E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v43 = v12;
  LODWORD(v44) = v13;
  v45 = v14;
  v46 = v15;
  v47 = v16;
  v48 = __PAIR64__(v37, v17);
  v49 = v18;
  v50 = v19;
  *(_QWORD *)&v51 = __PAIR64__(v36, v38);
  *((_QWORD *)&v51 + 1) = __PAIR64__(v34, v35);
  *(_QWORD *)&v52 = __PAIR64__(v32, v33);
  DWORD2(v52) = v31;
  v29 = _ViewInputs.position.getter();
  v43 = v25;
  LODWORD(v44) = v24;
  v45 = v23;
  v46 = v22;
  v47 = v26;
  v48 = __PAIR64__(v37, v27);
  v49 = v28;
  v50 = v19;
  *(_QWORD *)&v51 = __PAIR64__(v36, v38);
  *((_QWORD *)&v51 + 1) = __PAIR64__(v34, v35);
  *(_QWORD *)&v52 = __PAIR64__(v32, v33);
  DWORD2(v52) = v31;
  v43 = __PAIR64__(_ViewInputs.transform.getter(), v29);
  LODWORD(v44) = OffsetAttribute2;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider();
  LODWORD(v43) = Attribute.init<A>(body:value:flags:update:)();
  HIDWORD(v43) = OffsetAttribute2;
  v44 = 0;
  v45 = 0;
  LOBYTE(v46) = 1;
  v48 = 0;
  v49 = 0;
  LOBYTE(v50) = 1;
  v51 = 0u;
  v52 = 0u;
  v53 = 1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState();
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v43 = v19;
  LODWORD(v44) = v38;
  v42 = v20;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v40;
  result = v41;
  a4[1] = v41;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollsUnderMultimodalNavigationChromeModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double MultimodalScrollGeometryTransformProvider.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  Value = AGGraphGetValue();
  v10 = *(_QWORD *)Value;
  v11 = *(_OWORD *)(Value + 8);
  v12 = *(_OWORD *)(Value + 24);
  AGGraphGetValue();
  v3 = swift_retain();
  *(double *)&v4 = MEMORY[0x18D755E9C](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MultimodalNavigationChromeScrollInfo?, (uint64_t)&type metadata for MultimodalNavigationChromeScrollInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = AGGraphGetValue();
  if ((*(_BYTE *)(v6 + 96) & 1) == 0)
  {
    v7 = UIEdgeInsetsInsetRect(*(double *)v6, *(double *)(v6 + 8), *(double *)(v6 + 16), *(double *)(v6 + 24), *(double *)(v6 + 64), *(double *)(v6 + 72));
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v8, *(unint64_t *)&v7));
  }
  *(_QWORD *)a1 = v10;
  *(_OWORD *)(a1 + 8) = v11;
  result = *(double *)&v12;
  *(_OWORD *)(a1 + 24) = v12;
  return result;
}

double protocol witness for Rule.value.getter in conformance MultimodalScrollGeometryTransformProvider@<D0>(uint64_t a1@<X8>)
{
  return MultimodalScrollGeometryTransformProvider.value.getter(a1);
}

uint64_t MultimodalScrollGeometryState.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t result;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGRect v14;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MultimodalNavigationChromeScrollInfo?, (uint64_t)&type metadata for MultimodalNavigationChromeScrollInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  if ((*(_BYTE *)(Value + 96) & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    return AGGraphSetOutputValue();
  }
  else
  {
    v4 = *(double *)(Value + 32);
    v3 = *(double *)(Value + 40);
    v6 = *(double *)(Value + 48);
    v5 = *(double *)(Value + 56);
    v12 = UIEdgeInsetsInsetRect(*(double *)Value, *(double *)(Value + 8), *(double *)(Value + 16), *(double *)(Value + 24), *(double *)(Value + 64), *(double *)(Value + 72));
    v13 = v7;
    v10 = v8;
    v11 = v9;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    if (AGGraphGetOutputValue()
      && (*(_BYTE *)(v0 + 24) & 1) == 0
      && *(double *)(v0 + 8) == v4
      && *(double *)(v0 + 16) == v3
      && (*(_BYTE *)(v0 + 48) & 1) == 0
      && *(double *)(v0 + 32) == v6
      && *(double *)(v0 + 40) == v5
      && (*(_BYTE *)(v0 + 88) & 1) == 0
      && (v14.origin.x = v12,
          v14.origin.y = v13,
          v14.size.width = v10,
          v14.size.height = v11,
          result = CGRectEqualToRect(*(CGRect *)(v0 + 56), v14),
          (result & 1) != 0))
    {
      *(double *)(v0 + 8) = v4;
      *(double *)(v0 + 16) = v3;
      *(_BYTE *)(v0 + 24) = 0;
      *(double *)(v0 + 32) = v6;
      *(double *)(v0 + 40) = v5;
      *(_BYTE *)(v0 + 48) = 0;
      *(double *)(v0 + 56) = v12;
      *(CGFloat *)(v0 + 64) = v13;
      *(CGFloat *)(v0 + 72) = v10;
      *(CGFloat *)(v0 + 80) = v11;
    }
    else
    {
      ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollGeometryState>, MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_187BF9830;
      AGCreateWeakAttribute();
      ScrollGeometryState.init(geometry:scrollableAxes:transform:)();
      AGGraphSetOutputValue();
      result = swift_bridgeObjectRelease();
      *(double *)(v0 + 8) = v4;
      *(double *)(v0 + 16) = v3;
      *(_BYTE *)(v0 + 24) = 0;
      *(double *)(v0 + 32) = v6;
      *(double *)(v0 + 40) = v5;
      *(_BYTE *)(v0 + 48) = 0;
      *(double *)(v0 + 56) = v12;
      *(CGFloat *)(v0 + 64) = v13;
      *(CGFloat *)(v0 + 72) = v10;
      *(CGFloat *)(v0 + 80) = v11;
    }
    *(_BYTE *)(v0 + 88) = 0;
  }
  return result;
}

double MultimodalNavigationTitleBar.body.getter@<D0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double result;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  _OWORD v64[4];
  __int128 v65;
  _BYTE v66[25];

  v3 = v1[5];
  v65 = v1[4];
  *(_OWORD *)v66 = v3;
  *(_OWORD *)&v66[9] = *(_OWORD *)((char *)v1 + 89);
  v4 = v1[1];
  v64[0] = *v1;
  v64[1] = v4;
  v5 = v1[3];
  v64[2] = v1[2];
  v64[3] = v5;
  v50 = static VerticalAlignment.center.getter();
  closure #1 in MultimodalNavigationTitleBar.body.getter((uint64_t)v64, (uint64_t)v51);
  v47 = v51[1];
  v48 = v51[0];
  v6 = v52;
  v49 = v53;
  v46 = v54;
  v7 = v56;
  v44 = v57;
  v45 = v55;
  v42 = v59;
  v43 = v58;
  v8 = v61;
  v40 = v62;
  v41 = v60;
  v9 = v63;
  if (one-time initialization token for titleTopPadding != -1)
    swift_once();
  EdgeInsets.init(_all:)();
  v38 = v11;
  v39 = v10;
  v36 = v13;
  v37 = v12;
  v14 = static Edge.Set.horizontal.getter();
  if ((BYTE8(v65) & 1) != 0 && one-time initialization token for titleHorizontalPadding != -1)
    swift_once();
  EdgeInsets.init(_all:)();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  if ((v66[8] & 1) != 0)
  {
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    if (one-time initialization token for titleBottomPadding != -1)
      swift_once();
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationTitleStorage?);
  }
  EdgeInsets.init(_all:)();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = *(_QWORD *)&v66[16];
  v32 = v66[24];
  v33 = static Alignment.center.getter();
  LOBYTE(v51[0]) = v32;
  *(_QWORD *)a1 = v50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v48;
  *(_QWORD *)(a1 + 32) = v47;
  *(_BYTE *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = v49;
  *(_BYTE *)(a1 + 64) = v46;
  *(_QWORD *)(a1 + 72) = v45;
  *(_BYTE *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v44;
  *(_QWORD *)(a1 + 96) = v43;
  *(_QWORD *)(a1 + 104) = v42;
  *(_QWORD *)(a1 + 112) = v41;
  *(_BYTE *)(a1 + 120) = v8;
  *(_QWORD *)(a1 + 128) = v40;
  *(_BYTE *)(a1 + 136) = v9;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = v39;
  *(_QWORD *)(a1 + 160) = v38;
  result = v36;
  *(_QWORD *)(a1 + 168) = v37;
  *(double *)(a1 + 176) = v36;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = v14;
  *(_QWORD *)(a1 + 200) = v16;
  *(_QWORD *)(a1 + 208) = v18;
  *(_QWORD *)(a1 + 216) = v20;
  *(_QWORD *)(a1 + 224) = v22;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 4;
  *(_QWORD *)(a1 + 248) = v24;
  *(_QWORD *)(a1 + 256) = v26;
  *(_QWORD *)(a1 + 264) = v28;
  *(_QWORD *)(a1 + 272) = v30;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 1;
  *(_QWORD *)(a1 + 296) = v31;
  *(_BYTE *)(a1 + 304) = v51[0];
  *(_QWORD *)(a1 + 312) = v33;
  *(_QWORD *)(a1 + 320) = v35;
  return result;
}

uint64_t closure #1 in MultimodalNavigationTitleBar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[64];
  char v24[24];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  outlined init with take of Image.Resolved?(a1, (uint64_t)v23, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v27, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  v4 = v29;
  if (v29 == 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
LABEL_6:
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v11 = Text.init(_:tableName:bundle:comment:)();
    v13 = v12;
    v4 = v14;
    v8 = v15 & 1;
    outlined consume of Text?(v5, v6, v7, 0);
    v5 = v11;
    v6 = v13;
    goto LABEL_7;
  }
  v5 = v27[0];
  v6 = v27[1];
  v7 = v28;
  if (!v29)
  {
    outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    goto LABEL_6;
  }
  v8 = v28 & 1;
  outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
  outlined copy of Text.Storage(v5, v6, v7 & 1);
  swift_bridgeObjectRetain();
LABEL_7:
  outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v24, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  if (v25 == 1 || (v16 = v26) == 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
    v17 = swift_allocObject();
    strcpy((char *)(v17 + 16), "questionmark");
    *(_BYTE *)(v17 + 29) = 0;
    *(_WORD *)(v17 + 30) = -5120;
    *(_DWORD *)(v17 + 32) = 0;
    *(_BYTE *)(v17 + 36) = 1;
    *(_OWORD *)(v17 + 40) = xmmword_187BF9F90;
    *(_OWORD *)(v17 + 56) = xmmword_187C677B0;
    *(_OWORD *)(v17 + 72) = xmmword_187BF9FB0;
    *(_BYTE *)(v17 + 88) = 0;
    outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationTitleStorage?);
    v16 = AnyView.init<A>(_:)();
    outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationTitleStorage?);
  }
  else
  {
    swift_retain();
  }
  KeyPath = swift_getKeyPath();
  outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationTitleStorage?);
  if (one-time initialization token for clarityUINavigationTitle != -1)
    swift_once();
  v19 = static Font.clarityUINavigationTitle;
  v20 = swift_getKeyPath();
  v21 = swift_getKeyPath();
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = KeyPath;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 80) = v21;
  *(_QWORD *)(a2 + 88) = 3;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  outlined copy of Text.Storage(v5, v6, v8);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(KeyPath, 0);
  swift_retain();
  swift_retain_n();
  swift_retain();
  outlined consume of Text.Storage(v5, v6, v8);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t MultimodalNavigationTitleLabelStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultimodalNavigationTitleBar()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>(0);
  type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<BarBackground<Rectangle>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>, MEMORY[0x1E0CE4B88]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t TextLine;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  double v24;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  if (one-time initialization token for navigationIconToTitleSpacing != -1)
    swift_once();
  v6 = static ClarityUIMetrics.navigationIconToTitleSpacing;
  closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)v17);
  v7 = v18;
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v23;
  result = v24;
  v14 = v17[1];
  v13 = v17[2];
  v15 = v17[0];
  v16 = v22;
  *(_QWORD *)a1 = TextLine;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v11;
  *(double *)(a1 + 128) = result;
  return result;
}

double closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  static EdgeInsets.zero.getter();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  a2 &= 1u;
  *(_BYTE *)(v14 + 24) = a2;
  outlined copy of Environment<Bool>.Content(a1, a2);
  specialized Environment.wrappedValue.getter(a1, a2);
  outlined copy of Environment<Bool>.Content(a1, a2);
  specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined copy of Environment<Bool>.Content(a1, a2);
  specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  if (one-time initialization token for navigationIconToTitleSpacing != -1)
    swift_once();
  View.bodyHeadOutdent(_:)();
  result = v17;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = partial apply for closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:);
  *(_QWORD *)(a3 + 40) = v14;
  *(_QWORD *)(a3 + 48) = v18;
  *(_BYTE *)(a3 + 56) = v19;
  *(_QWORD *)(a3 + 64) = v20;
  *(_BYTE *)(a3 + 72) = v21;
  *(_QWORD *)(a3 + 80) = v22;
  *(_QWORD *)(a3 + 88) = v23;
  *(_QWORD *)(a3 + 96) = v16;
  *(double *)(a3 + 104) = v17;
  return result;
}

double closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  double result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  outlined copy of Environment<Bool>.Content(a1, v5);
  specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a3 + 32) = v11;
  return result;
}

double EnvironmentValues.clarityUINavigationTitleIconWidth.getter()
{
  double v1;

  lazy protocol witness table accessor for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

double key path getter for EnvironmentValues.clarityUINavigationTitleIconWidth : EnvironmentValues@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  lazy protocol witness table accessor for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey();
  EnvironmentValues.subscript.getter();
  result = v3;
  *a1 = v3;
  return result;
}

double protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalNavigationTitleLabelStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t TextLine;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  double v24;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  if (one-time initialization token for navigationIconToTitleSpacing != -1)
    swift_once();
  v6 = static ClarityUIMetrics.navigationIconToTitleSpacing;
  closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)v17);
  v7 = v18;
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v23;
  result = v24;
  v14 = v17[1];
  v13 = v17[2];
  v15 = v17[0];
  v16 = v22;
  *(_QWORD *)a1 = TextLine;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v11;
  *(double *)(a1 + 128) = result;
  return result;
}

uint64_t MultimodalCustomKeyboardActionKeyData.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultimodalCustomKeyboardActionKeyData.systemImageName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultimodalCustomKeyboardActionKeyData.action.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t MultimodalCustomKeyboardActionKeyData.init(title:systemImageName:action:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

double static MultimodalCustomKeyboardActionKey.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

_QWORD *static MultimodalCustomKeyboardActionKey.reduce(value:nextValue:)(_QWORD *result, _QWORD *(*a2)(_QWORD *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;

  v2 = result;
  v3 = result[1];
  if (v3)
  {
    v4 = *((_OWORD *)result + 1);
    v5 = *((_OWORD *)result + 2);
    v6 = result;
  }
  else
  {
    v6 = v7;
    result = a2(v7);
    v3 = v7[1];
    v4 = v8;
    v5 = v9;
  }
  *v2 = *v6;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v4;
  *((_OWORD *)v2 + 2) = v5;
  return result;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalCustomKeyboardActionKey(_QWORD *result, _QWORD *(*a2)(_QWORD *__return_ptr))
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;

  v2 = result;
  v3 = result[1];
  if (v3)
  {
    v4 = *((_OWORD *)result + 1);
    v5 = *((_OWORD *)result + 2);
    v6 = result;
  }
  else
  {
    v6 = v7;
    result = a2(v7);
    v3 = v7[1];
    v4 = v8;
    v5 = v9;
  }
  *v2 = *v6;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v4;
  *((_OWORD *)v2 + 2) = v5;
  return result;
}

uint64_t static MultimodalChromeVisiblePreferenceKey.defaultValue.getter()
{
  return 1;
}

uint64_t static MultimodalChromeVisiblePreferenceKey.reduce(value:nextValue:)(_BYTE *a1, uint64_t (*a2)(void))
{
  uint64_t inited;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  *(_BYTE *)(inited + 32) = *a1;
  result = a2();
  *(_BYTE *)(inited + 33) = result & 1;
  v6 = *(_QWORD *)(inited + 16);
  if (!v6)
    goto LABEL_4;
  if (*(_BYTE *)(inited + 32) != 1)
  {
    LOBYTE(v7) = 0;
    goto LABEL_13;
  }
  if (v6 == 1)
  {
LABEL_4:
    LOBYTE(v7) = 1;
LABEL_13:
    result = swift_setDeallocating();
    *a1 = v7;
    return result;
  }
  v8 = 33;
  while (1)
  {
    v9 = v8 - 31;
    if (__OFADD__(v8 - 32, 1))
      break;
    v7 = *(unsigned __int8 *)(inited + v8++);
    if (v7 != 1 || v9 == v6)
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalChromeVisiblePreferenceKey(BOOL *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t inited;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  *(_BYTE *)(inited + 32) = *a1;
  a2(&v6);
  *(_BYTE *)(inited + 33) = v6;
  LOBYTE(a2) = specialized Sequence<>.contains(_:)(0, inited);
  result = swift_setDeallocating();
  *a1 = (a2 & 1) == 0;
  return result;
}

uint64_t BackButtonActionableBar.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[3];

  v39 = a1;
  type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, v6);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v38 - v10;
  v12 = v1[7];
  v46 = v1[6];
  v47 = v12;
  v48[0] = v1[8];
  *(_OWORD *)((char *)v48 + 9) = *(__int128 *)((char *)v1 + 137);
  v13 = v1[3];
  v42 = v1[2];
  v43 = v13;
  v14 = v1[5];
  v44 = v1[4];
  v45 = v14;
  v15 = v1[1];
  v40 = *v1;
  v41 = v15;
  *(_QWORD *)v5 = static VerticalAlignment.center.getter();
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>();
  closure #1 in BackButtonActionableBar.body.getter((uint64_t)&v40, (uint64_t)&v5[*(int *)(v16 + 44)]);
  if (one-time initialization token for backButtonPadding != -1)
    swift_once();
  v17 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v5, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  v26 = &v11[*(int *)(v8 + 36)];
  *v26 = v17;
  *((_QWORD *)v26 + 1) = v19;
  *((_QWORD *)v26 + 2) = v21;
  *((_QWORD *)v26 + 3) = v23;
  *((_QWORD *)v26 + 4) = v25;
  v26[40] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  v27 = v41;
  v28 = *((_QWORD *)&v41 + 1);
  v29 = v42;
  KeyPath = swift_getKeyPath();
  v31 = static Alignment.center.getter();
  v33 = v32;
  v34 = v39;
  outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>((uint64_t)v11, v39, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>();
  v36 = v34 + *(int *)(v35 + 36);
  *(_BYTE *)v36 = v27;
  *(_QWORD *)(v36 + 8) = v28;
  *(_BYTE *)(v36 + 16) = v29;
  *(_QWORD *)(v36 + 24) = KeyPath;
  *(_WORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = v31;
  *(_QWORD *)(v36 + 48) = v33;
  return outlined destroy of TableRowList?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (uint64_t)type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
}

uint64_t closure #1 in BackButtonActionableBar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t (**v60)();
  uint64_t v61;
  uint64_t v62;
  double v63;
  void *v64;
  id v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD *v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t (**v94)();
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;

  v107 = a2;
  type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(0, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  v102 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (_WORD *)((char *)&v100 - v9);
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>();
  MEMORY[0x1E0C80A78](v11, v12);
  v103 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v100 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v100 - v25;
  type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>(0);
  MEMORY[0x1E0C80A78](v27, v28);
  v106 = (uint64_t *)((char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(0, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  v101 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (_WORD *)((char *)&v100 - v32);
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>();
  MEMORY[0x1E0C80A78](v34, v35);
  v104 = (char *)&v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v105 = (char *)&v100 - v39;
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(0, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  v41 = v40;
  MEMORY[0x1E0C80A78](v40, v42);
  v44 = (_WORD *)((char *)&v100 - v43);
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>();
  MEMORY[0x1E0C80A78](v45, v46);
  v48 = (char *)&v100 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v49, v50);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v78 = (char *)&v100 - v51;
    v79 = (_OWORD *)swift_allocObject();
    v80 = *(_OWORD *)(a1 + 80);
    v79[5] = *(_OWORD *)(a1 + 64);
    v79[6] = v80;
    v81 = *(_OWORD *)(a1 + 48);
    v79[3] = *(_OWORD *)(a1 + 32);
    v79[4] = v81;
    *(_OWORD *)((char *)v79 + 153) = *(_OWORD *)(a1 + 137);
    v82 = *(_OWORD *)(a1 + 128);
    v83 = *(_OWORD *)(a1 + 96);
    v79[8] = *(_OWORD *)(a1 + 112);
    v79[9] = v82;
    v79[7] = v83;
    v84 = *(_OWORD *)(a1 + 16);
    v79[1] = *(_OWORD *)a1;
    v79[2] = v84;
    *v44 = 256;
    v85 = (_QWORD *)((char *)v44 + *(int *)(v41 + 36));
    *v85 = partial apply for closure #1 in closure #1 in BackButtonActionableBar.body.getter;
    v85[1] = v79;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    v86 = (uint64_t)v44 + *(int *)(v41 + 40);
    outlined retain of BackButtonActionableBar(a1);
    swift_retain();
    closure #2 in closure #1 in BackButtonActionableBar.body.getter(a1, v86);
    swift_release();
    outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>((uint64_t)v44, (uint64_t)v48, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>((uint64_t)v44, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    outlined init with take of TableCellFormula((uint64_t)v48, (uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    v87 = (_OWORD *)swift_allocObject();
    v88 = *(_OWORD *)(a1 + 80);
    v87[5] = *(_OWORD *)(a1 + 64);
    v87[6] = v88;
    v89 = *(_OWORD *)(a1 + 48);
    v87[3] = *(_OWORD *)(a1 + 32);
    v87[4] = v89;
    *(_OWORD *)((char *)v87 + 153) = *(_OWORD *)(a1 + 137);
    v90 = *(_OWORD *)(a1 + 128);
    v91 = *(_OWORD *)(a1 + 96);
    v87[8] = *(_OWORD *)(a1 + 112);
    v87[9] = v90;
    v87[7] = v91;
    v92 = *(_OWORD *)(a1 + 16);
    v87[1] = *(_OWORD *)a1;
    v87[2] = v92;
    *v33 = 256;
    v93 = v101;
    v94 = (uint64_t (**)())((char *)v33 + *(int *)(v101 + 36));
    *v94 = partial apply for closure #3 in closure #1 in BackButtonActionableBar.body.getter;
    v94[1] = (uint64_t (*)())v87;
    swift_storeEnumTagMultiPayload();
    v95 = (uint64_t)v33 + *(int *)(v93 + 40);
    outlined retain of BackButtonActionableBar(a1);
    swift_retain();
    closure #4 in closure #1 in BackButtonActionableBar.body.getter(a1, v95);
    swift_release();
    v96 = (uint64_t)v104;
    outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>((uint64_t)v33, (uint64_t)v104, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>((uint64_t)v33, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    v97 = (uint64_t)v105;
    outlined init with take of TableCellFormula(v96, (uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v78, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v97, v96, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    v98 = v106;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v48, (uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    type metadata accessor for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v96, (uint64_t)v98 + *(int *)(v99 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v96, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v98, v107, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v97, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  }
  else
  {
    v104 = v22;
    v105 = v18;
    v106 = v6;
    v52 = *(_BYTE *)(a1 + 104) & 1;
    v53 = (_OWORD *)swift_allocObject();
    v54 = *(_OWORD *)(a1 + 80);
    v53[5] = *(_OWORD *)(a1 + 64);
    v53[6] = v54;
    v55 = *(_OWORD *)(a1 + 48);
    v53[3] = *(_OWORD *)(a1 + 32);
    v53[4] = v55;
    *(_OWORD *)((char *)v53 + 153) = *(_OWORD *)(a1 + 137);
    v56 = *(_OWORD *)(a1 + 128);
    v57 = *(_OWORD *)(a1 + 96);
    v53[8] = *(_OWORD *)(a1 + 112);
    v53[9] = v56;
    v53[7] = v57;
    v58 = *(_OWORD *)(a1 + 16);
    v53[1] = *(_OWORD *)a1;
    v53[2] = v58;
    *v10 = 256;
    v59 = v102;
    v60 = (uint64_t (**)())((char *)v10 + *(int *)(v102 + 36));
    *v60 = partial apply for closure #1 in closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:);
    v60[1] = (uint64_t (*)())v53;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    v61 = (uint64_t)v10 + *(int *)(v59 + 40);
    outlined retain of BackButtonActionableBar(a1);
    swift_retain();
    closure #6 in closure #1 in BackButtonActionableBar.body.getter((__int128 *)a1, v61);
    swift_release();
    v62 = v103;
    outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>((uint64_t)v10, v103, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>((uint64_t)v10, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    v63 = 0.0;
    if (v52)
    {
      v64 = (void *)objc_opt_self();
      outlined retain of BackButtonActionableBar(a1);
      v65 = objc_msgSend(v64, sel_mainScreen);
      objc_msgSend(v65, sel_bounds);
      v67 = v66;

      outlined release of BackButtonActionableBar(a1);
      v63 = v67 * 0.5;
    }
    v68 = static Alignment.center.getter();
    v69 = (uint64_t)v104;
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v63, v52 ^ 1, 0.0, 1, (uint64_t)v104, 0.0, 1, 0.0, 1, v68, v70);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    outlined init with take of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>(v69, (uint64_t)v26);
    v71 = MEMORY[0x1E0CE35F0];
    v72 = (uint64_t)v105;
    outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>((uint64_t)v26, (uint64_t)v105, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    v73 = v106;
    *v106 = 0;
    *((_BYTE *)v73 + 8) = 0;
    *((_BYTE *)v73 + 9) = v52 == 0;
    type metadata accessor for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)();
    v75 = v74;
    outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>(v72, (uint64_t)v73 + *(int *)(v74 + 48), &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    v76 = (char *)v73 + *(int *)(v75 + 64);
    *(_QWORD *)v76 = 0;
    v76[8] = 0;
    v76[9] = v52 == 0;
    outlined destroy of TableRowList?(v72, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (uint64_t)type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, v71, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v73, v107, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>);
    return outlined destroy of TableRowList?((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (uint64_t)type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, v71, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
  }
}

double closure #2 in closure #1 in BackButtonActionableBar.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[3];

  v4 = *(_BYTE *)(a1 + 16);
  outlined retain of BackButtonActionableBar(a1);
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v6 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  if ((v4 & 1) != 0)
  {
    v7 = Text.init(_:tableName:bundle:comment:)();
    v9 = v16;
    v11 = v17;
    v13 = v18;
    v14 = 0xEA00000000006E77;
    v15 = 0x6F642E776F727261;
  }
  else
  {
    v7 = Text.init(_:tableName:bundle:comment:)();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = 0xEE00647261776B63;
    v15 = 0x61622E776F727261;
  }
  outlined release of BackButtonActionableBar(a1);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v15;
  *(_QWORD *)(v19 + 24) = v14;
  *(_DWORD *)(v19 + 32) = 0;
  *(_BYTE *)(v19 + 36) = 1;
  *(_OWORD *)(v19 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v19 + 56) = v15;
  *(_QWORD *)(v19 + 64) = v14;
  *(_OWORD *)(v19 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v19 + 88) = 0;
  v20 = *(_OWORD *)(a1 + 128);
  v36 = *(_OWORD *)(a1 + 112);
  v37[0] = v20;
  *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)(a1 + 137);
  outlined retain of BackButtonActionableBar(a1);
  v21 = one-time initialization token for minimumComponentHeight;
  swift_bridgeObjectRetain();
  if (v21 != -1)
    swift_once();
  if (one-time initialization token for buttonVerticalPadding != -1)
    swift_once();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v36, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v36, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  specialized static BackButtonActionableBar.defaultBodyLeading.getter();
  outlined release of BackButtonActionableBar(a1);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v11 & 1;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v23;
  *(_BYTE *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 56) = v25;
  *(_BYTE *)(a2 + 64) = v26;
  *(_QWORD *)(a2 + 72) = v27;
  *(_BYTE *)(a2 + 80) = v28;
  *(_QWORD *)(a2 + 88) = v29;
  *(_BYTE *)(a2 + 96) = v30;
  *(_QWORD *)(a2 + 104) = v31;
  *(_BYTE *)(a2 + 112) = v32;
  *(_QWORD *)(a2 + 120) = v33;
  *(_BYTE *)(a2 + 128) = v34;
  result = *(double *)&v35;
  *(_OWORD *)(a2 + 136) = v35;
  return result;
}

uint64_t BackButtonActionableBar.backButtonText.getter()
{
  uint64_t ObjCClassFromMetadata;
  id v1;

  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t closure #3 in closure #1 in BackButtonActionableBar.body.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  (*(void (**)(_QWORD))a1)(*(unsigned __int8 *)(a1 + 16));
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  result = State.wrappedValue.getter();
  if (v4)
  {
    swift_retain();
    v2 = outlined consume of MultimodalCustomKeyboardActionKeyData?(v3, v4);
    v5(v2);
    return swift_release();
  }
  return result;
}

double closure #4 in closure #1 in BackButtonActionableBar.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v28[25];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  double v38[4];

  closure #1 in closure #4 in closure #1 in BackButtonActionableBar.body.getter((uint64_t)&v27);
  v4 = *(_OWORD *)(a1 + 56);
  v29 = *(_OWORD *)(a1 + 40);
  v30 = v4;
  v31 = *(_OWORD *)(a1 + 72);
  v32 = *(_QWORD *)(a1 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v24)
  {
    swift_bridgeObjectRetain();
    outlined consume of MultimodalCustomKeyboardActionKeyData?(v23, v24);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v25;
    *(_QWORD *)(v5 + 24) = v26;
    *(_DWORD *)(v5 + 32) = 0;
    *(_BYTE *)(v5 + 36) = 1;
    *(_OWORD *)(v5 + 40) = xmmword_187BF9F90;
    *(_QWORD *)(v5 + 56) = v25;
    *(_QWORD *)(v5 + 64) = v26;
    *(_OWORD *)(v5 + 72) = xmmword_187BF9FB0;
    *(_BYTE *)(v5 + 88) = 0;
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
  }
  v6 = v27;
  v7 = *(_OWORD *)v28;
  v8 = v28[16];
  v9 = *(_OWORD *)(a1 + 128);
  v27 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)v28 = v9;
  *(_OWORD *)&v28[9] = *(_OWORD *)(a1 + 137);
  outlined retain of BackButtonActionableBar(a1);
  if (one-time initialization token for minimumComponentHeight != -1)
    swift_once();
  if (one-time initialization token for buttonVerticalPadding != -1)
    swift_once();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v27, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v27, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  specialized static BackButtonActionableBar.defaultBodyLeading.getter();
  outlined release of BackButtonActionableBar(a1);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v10 = v29;
  v11 = BYTE8(v29);
  v12 = v30;
  v13 = BYTE8(v30);
  v14 = v31;
  v15 = BYTE8(v31);
  v16 = v32;
  v17 = v33;
  v18 = v34;
  v19 = v35;
  v20 = v36;
  v22 = v37;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 56) = v11;
  *(_QWORD *)(a2 + 64) = v12;
  *(_BYTE *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 80) = v14;
  *(_BYTE *)(a2 + 88) = v15;
  *(_QWORD *)(a2 + 96) = v16;
  *(_BYTE *)(a2 + 104) = v17;
  *(_QWORD *)(a2 + 112) = v18;
  *(_BYTE *)(a2 + 120) = v19;
  *(_QWORD *)(a2 + 128) = v20;
  *(_BYTE *)(a2 + 136) = v22;
  result = v38[0];
  *(_OWORD *)(a2 + 144) = *(_OWORD *)v38;
  return result;
}

uint64_t closure #1 in closure #4 in closure #1 in BackButtonActionableBar.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t ObjCClassFromMetadata;
  id v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v9)
  {
    swift_bridgeObjectRetain();
    outlined consume of MultimodalCustomKeyboardActionKeyData?(v8, v9);
    lazy protocol witness table accessor for type String and conformance String();
    result = Text.init<A>(_:)();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v7 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    result = Text.init(_:tableName:bundle:comment:)();
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v9 == 0;
  return result;
}

double closure #6 in closure #1 in BackButtonActionableBar.body.getter@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[3];

  v18 = a1[2];
  v19 = a1[3];
  v20 = a1[4];
  v21 = a1[5];
  v22 = a1[6];
  v16 = *a1;
  v17 = a1[1];
  v4 = BackButtonActionableBar.backButtonText.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if ((a1[1] & 1) != 0)
    v11 = 0x6F642E776F727261;
  else
    v11 = 0x61622E776F727261;
  if ((a1[1] & 1) != 0)
    v12 = 0xEA00000000006E77;
  else
    v12 = 0xEE00647261776B63;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  *(_DWORD *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 36) = 1;
  *(_OWORD *)(v13 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v13 + 56) = v11;
  *(_QWORD *)(v13 + 64) = v12;
  *(_OWORD *)(v13 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v13 + 88) = 0;
  v14 = a1[8];
  v23 = a1[7];
  v24[0] = v14;
  *(_OWORD *)((char *)v24 + 9) = *(__int128 *)((char *)a1 + 137);
  swift_bridgeObjectRetain();
  outlined retain of BackButtonActionableBar((uint64_t)a1);
  if (one-time initialization token for minimumComponentHeight != -1)
    swift_once();
  if (one-time initialization token for buttonVerticalPadding != -1)
    swift_once();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v23, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v23, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  specialized static BackButtonActionableBar.defaultBodyLeading.getter();
  outlined release of BackButtonActionableBar((uint64_t)a1);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v16;
  *(_BYTE *)(a2 + 48) = BYTE8(v16);
  *(_QWORD *)(a2 + 56) = v17;
  *(_BYTE *)(a2 + 64) = BYTE8(v17);
  *(_QWORD *)(a2 + 72) = v18;
  *(_BYTE *)(a2 + 80) = BYTE8(v18);
  *(_QWORD *)(a2 + 88) = v19;
  *(_BYTE *)(a2 + 96) = BYTE8(v19);
  *(_QWORD *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = BYTE8(v20);
  *(_QWORD *)(a2 + 120) = v21;
  *(_BYTE *)(a2 + 128) = BYTE8(v21);
  result = *(double *)&v22;
  *(_OWORD *)(a2 + 136) = v22;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BackButtonActionableBar.Background()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
  lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>();
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>();
    v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

uint64_t protocol witness for View.body.getter in conformance BackButtonActionableBar.Background@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;

  v3 = *((_QWORD *)v1 + 3);
  v4 = v1[32];
  v5 = v1[33];
  v16 = *v1;
  if (v16 == 1)
  {
    KeyPath = swift_getKeyPath();
    outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
    v7 = specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8));
    v9 = v8 & 1;
    result = outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
    v11 = 0;
    v12 = 0;
    v13 = v9 | 0x10000;
    v14 = 1;
  }
  else
  {
    v14 = v1[16];
    v11 = *((_QWORD *)v1 + 1);
    outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
    v13 = specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8));
    v12 = v15 & 1;
    result = outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
    KeyPath = 0;
    v7 = 0;
  }
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 41) = v16 ^ 1;
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance BackButtonActionableBar.KeyboardBackdropView()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  id result;
  char v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v5);
  outlined consume of Environment<Bool>.Content(v1, v2);
  if (v5)
    v3 = 2030;
  else
    v3 = 3901;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3928]), sel_initWithFrame_style_, v3, 0.0, 0.0, 0.0, 0.0);
  if (!result)
    __break(1u);
  return result;
}

id protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance BackButtonActionableBar.KeyboardBackdropView(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v7);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v7)
    v5 = 2030;
  else
    v5 = 3901;
  return objc_msgSend(a1, sel_transitionToStyle_, v5);
}

double BackButtonActionableBar.BarShape.path(in:)@<D0>(char a1@<W0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  double v15;
  double v16;
  id v17;
  id v18;
  double result;
  __int128 v20;
  __int128 v21;
  char v22;

  if ((a1 & 1) == 0)
  {
    Path.init(_:)();
    goto LABEL_16;
  }
  if ((a3 & 1) != 0)
    goto LABEL_6;
  v15 = a2;
  if (one-time initialization token for minimumDisplayCornerRadius != -1)
    swift_once();
  v16 = a2;
  if (*(double *)&static ClarityUIMetrics.minimumDisplayCornerRadius > a2)
  {
LABEL_6:
    if (one-time initialization token for fallbackDisplayCornerRadius == -1)
    {
      v15 = *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
      if ((a3 & 1) == 0)
        goto LABEL_8;
    }
    else
    {
      swift_once();
      v15 = *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
      if ((a3 & 1) == 0)
      {
LABEL_8:
        v16 = a2;
        if (one-time initialization token for minimumDisplayCornerRadius != -1)
          swift_once();
        goto LABEL_10;
      }
    }
LABEL_13:
    v16 = *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
    goto LABEL_14;
  }
LABEL_10:
  if (*(double *)&static ClarityUIMetrics.minimumDisplayCornerRadius > v16)
  {
    if (one-time initialization token for fallbackDisplayCornerRadius != -1)
      swift_once();
    goto LABEL_13;
  }
LABEL_14:
  v17 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, a5, a6, a7, a8, v15, v16);
  v18 = objc_msgSend(v17, sel_CGPath);

  Path.init(_:)();
LABEL_16:
  result = *(double *)&v20;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v21;
  *(_BYTE *)(a4 + 32) = v22;
  return result;
}

double protocol witness for Shape.path(in:) in conformance BackButtonActionableBar.BarShape@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  BackButtonActionableBar.BarShape.path(in:)(*(_BYTE *)v5, *(double *)(v5 + 8), *(_BYTE *)(v5 + 16), (uint64_t)v9, a2, a3, a4, a5);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void protocol witness for View.body.getter in conformance BackButtonActionableBar.BarShape(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 17) = 256;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BackButtonActionableBar()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _BackgroundModifier<BackButtonActionableBar.Background>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background, (uint64_t)&unk_1E1AE0588, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
  lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t MultimodalNavigationBackButtonLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (one-time initialization token for backIconToTitleSpacing != -1)
    swift_once();
  v2 = static ClarityUIMetrics.backIconToTitleSpacing;
  v3 = static VerticalAlignment.center.getter();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = 3;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalNavigationBackButtonLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return MultimodalNavigationBackButtonLabelStyle.makeBody(configuration:)(a1);
}

uint64_t MultimodalNavigationKeyboardLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = static HorizontalAlignment.center.getter();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = 3;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalNavigationKeyboardLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return MultimodalNavigationKeyboardLabelStyle.makeBody(configuration:)(a1);
}

uint64_t BackButtonStyle.makeBody(configuration:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  char v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v12[4] = closure #1 in static Color.clarityUIButtonBackground.getter;
  v12[5] = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  v12[3] = &block_descriptor_65;
  v7 = _Block_copy(v12);
  v8 = objc_msgSend(v6, sel_initWithDynamicProvider_, v7);
  _Block_release(v7);
  swift_release();
  v12[0] = v8;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  Color.init<A>(provider:)();
  v9 = Color.opacity(_:)();
  swift_release();
  v10 = static Color.primary.getter();
  result = swift_getKeyPath();
  *(_BYTE *)a2 = v3;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = 1;
  *(_WORD *)(a2 + 32) = 257;
  *(_QWORD *)(a2 + 40) = result;
  *(_WORD *)(a2 + 48) = 0;
  return result;
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance PrimaryActionButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = static Color.blue.getter();
  v7 = static Color.white.getter();
  result = swift_getKeyPath();
  *(_BYTE *)a2 = v3;
  *(_BYTE *)(a2 + 1) = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = 1;
  *(_WORD *)(a2 + 32) = 257;
  *(_QWORD *)(a2 + 40) = result;
  *(_WORD *)(a2 + 48) = 0;
  return result;
}

unint64_t closure #1 in static Material.multimodalNavigationChrome.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t BarBackground.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t ObjCClassFromMetadata;
  id v36;
  unint64_t v37;
  int v38;
  double v39;
  float v40;
  char v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  double v99;
  unint64_t v100;
  int v101;
  float v102;
  char v103;
  _QWORD v104[2];

  v89 = a3;
  v70 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for _ShadowView(0, v4, v5, a2);
  v83 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v6);
  v82 = (uint64_t)&v65 - v7;
  v84 = v8;
  v9 = type metadata accessor for ModifiedContent();
  v87 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v86 = (char *)&v65 - v11;
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, v12);
  v69 = v13;
  v72 = type metadata accessor for _ClipEffect();
  v14 = type metadata accessor for ModifiedContent();
  v77 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v68 = (char *)&v65 - v17;
  v104[0] = &protocol witness table for _ShadowView<A>;
  v104[1] = MEMORY[0x1E0CE2BA8];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v104, v16);
  v88 = v9;
  v71 = v18;
  v19 = type metadata accessor for _BackgroundModifier();
  v81 = v14;
  v73 = v19;
  v20 = type metadata accessor for ModifiedContent();
  v76 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v20);
  v74 = (char *)&v65 - v21;
  v79 = v22;
  v85 = type metadata accessor for ModifiedContent();
  v80 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v23);
  v75 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v78 = (char *)&v65 - v27;
  v67 = static Alignment.center.getter();
  v66 = v28;
  closure #1 in BarBackground.body.getter((_BYTE *)v3, (uint64_t)&v93);
  v29 = v93;
  v30 = v94;
  v31 = BYTE1(v94);
  v32 = v95;
  v33 = v96;
  if (*(_BYTE *)(v3 + 16))
    v34 = 1.0;
  else
    v34 = *(double *)(v3 + 8) * 0.8;
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v36 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static Material.coreMaterial(bundle:provider:)();

  v37 = v93;
  v38 = v94;
  if (*(_BYTE *)(v3 + 16))
    v39 = 0.0;
  else
    v39 = *(double *)(v3 + 8);
  v41 = static Edge.Set.all.getter();
  v93 = v67;
  v94 = v66;
  v95 = v29;
  LOBYTE(v96) = v30;
  v42 = v68;
  BYTE1(v96) = v31;
  v97 = v32;
  v98 = v33;
  v99 = v34;
  v100 = v37;
  v101 = v38;
  v40 = v39;
  v102 = v40;
  v103 = v41;
  v43 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>();
  View.clipShape<A>(_:style:)();
  swift_release();
  outlined consume of Material.ID(v37);
  if (one-time initialization token for clarityUIBarShadowColor != -1)
    swift_once();
  v44 = static Color.clarityUIBarShadowColor;
  if (one-time initialization token for barShadowRadius != -1)
    swift_once();
  v45 = *(double *)&static ClarityUIMetrics.barShadowRadius;
  if (one-time initialization token for barShadowOffset != -1)
    swift_once();
  v46 = v82;
  Shape.fillShadow(color:radius:x:y:)(v44, v4, v5, v82, v45, *(double *)&static ClarityUIMetrics.barShadowOffset, *((double *)&static ClarityUIMetrics.barShadowOffset + 1));
  v47 = v86;
  v48 = v84;
  View.opacity(_:)();
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v46, v48);
  static Alignment.center.getter();
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v72);
  v92[0] = v43;
  v92[1] = v49;
  v50 = MEMORY[0x1E0CE2E70];
  v51 = v81;
  v52 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v81, v92);
  v53 = v74;
  v54 = v88;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v47, v54);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v42, v51);
  static Edge.Set.all.getter();
  v55 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v73);
  v91[0] = v52;
  v91[1] = v55;
  v56 = v79;
  v57 = MEMORY[0x18D75FFDC](v50, v79, v91);
  v58 = v75;
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v53, v56);
  v90[0] = v57;
  v90[1] = MEMORY[0x1E0CE5BA0];
  v59 = v50;
  v60 = v85;
  v61 = MEMORY[0x18D75FFDC](v59, v85, v90);
  v62 = (uint64_t)v78;
  static ViewBuilder.buildExpression<A>(_:)(v58, v60, v61);
  v63 = *(void (**)(char *, uint64_t))(v80 + 8);
  v63(v58, v60);
  static ViewBuilder.buildBlock<A>(_:)(v62, v60, v89);
  return ((uint64_t (*)(uint64_t, uint64_t))v63)(v62, v60);
}

uint64_t closure #1 in BarBackground.body.getter@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for clarityUIContentBackground != -1)
    swift_once();
  v4 = *a1 == 0;
  v5 = 2;
  if (*a1)
    v5 = 256;
  v6 = 0x3FC3333333333333;
  *(_QWORD *)a2 = static Color.clarityUIContentBackground;
  if (v4)
    v6 = 0;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  return swift_retain();
}

void thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t key path getter for EnvironmentValues.lineLimit : EnvironmentValues, serialized@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.lineLimit : EnvironmentValues, serialized()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t specialized static MultimodalNavigationChromeScrollInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  char v5;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v10 = *(float64x2_t *)(a1 + 80);
  v8 = *(float64x2_t *)(a2 + 80);
  v9 = *(float64x2_t *)(a1 + 64);
  v7 = *(float64x2_t *)(a2 + 64);
  v4 = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  v5 = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), 0xFuLL))) & 1) != 0&& v4)
  {
    v5 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v9, v7), (int32x4_t)vceqq_f64(v10, v8))), 0xFuLL)));
  }
  return v5 & 1;
}

uint64_t sub_187881AB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_187881AE0()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalNavigationTitleLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalNavigationBackButtonLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalNavigationKeyboardLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MultimodalNavigationChromeScrollInfo()
{
  return &type metadata for MultimodalNavigationChromeScrollInfo;
}

uint64_t *assignWithCopy for MultimodalNavigationTitleLabelStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MultimodalNavigationTitleLabelStyle(a1, a2, a3, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleLabelStyle()
{
  return &type metadata for MultimodalNavigationTitleLabelStyle;
}

uint64_t destroy for MultimodalCustomKeyboardActionKeyData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MultimodalCustomKeyboardActionKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for MultimodalCustomKeyboardActionKeyData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MultimodalCustomKeyboardActionKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MultimodalCustomKeyboardActionKeyData()
{
  return &type metadata for MultimodalCustomKeyboardActionKeyData;
}

ValueMetadata *type metadata accessor for MultimodalCustomKeyboardActionKey()
{
  return &type metadata for MultimodalCustomKeyboardActionKey;
}

ValueMetadata *type metadata accessor for MultimodalChromeVisiblePreferenceKey()
{
  return &type metadata for MultimodalChromeVisiblePreferenceKey;
}

ValueMetadata *type metadata accessor for MultimodalNavigationBackButtonLabelStyle()
{
  return &type metadata for MultimodalNavigationBackButtonLabelStyle;
}

ValueMetadata *type metadata accessor for MultimodalNavigationKeyboardLabelStyle()
{
  return &type metadata for MultimodalNavigationKeyboardLabelStyle;
}

uint64_t sub_187881D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationChromeModifier, &type metadata for MultimodalNavigationChromeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier);
  }
  return result;
}

uint64_t sub_187881DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ScrollsUnderMultimodalNavigationChromeModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187881E28()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, type metadata accessor for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>));
  }
}

void type metadata accessor for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for MultimodalNavigationStackViewHost(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v2[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187882018()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>, &lazy protocol witness table cache variable for type TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>))
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>));
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>);
  }
}

uint64_t sub_187882164()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>, &lazy protocol witness table cache variable for type TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
}

id outlined copy of Environment<UISceneSession?>.Content(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

uint64_t destroy for MultimodalNavigationChromeModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  swift_release();
  if (*(_QWORD *)(a1 + 136))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for MultimodalNavigationChromeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(void **)(a2 + 80);
  v8 = *(_BYTE *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v7, v8);
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 104) = v10;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  swift_retain();
  if (v12)
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v13 = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MultimodalNavigationChromeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_retain();
  swift_release();
  v6 = *(void **)(a2 + 80);
  v7 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<UISceneSession?>.Content(v6, v7);
  v8 = *(void **)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 88) = v7;
  outlined consume of Environment<UISceneSession?>.Content(v8, v9);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 104) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  v14 = (_OWORD *)(a1 + 128);
  v15 = (_OWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 128);
      v20 = *(_OWORD *)(a2 + 144);
      v19 = *(_OWORD *)(a2 + 160);
      *v14 = *v15;
      *(_OWORD *)(a1 + 144) = v20;
      *(_OWORD *)(a1 + 160) = v19;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v18 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v21 = *v15;
    v22 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v22;
    *v14 = v21;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of MultimodalCustomKeyboardActionKeyData(uint64_t a1)
{
  destroy for MultimodalCustomKeyboardActionKeyData();
  return a1;
}

__n128 __swift_memcpy184_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for MultimodalNavigationChromeModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v4 = *(_BYTE *)(a2 + 88);
  v5 = *(void **)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v4;
  outlined consume of Environment<UISceneSession?>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 104);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  if (!*(_QWORD *)(a1 + 136))
    goto LABEL_5;
  v10 = *(_QWORD *)(a2 + 136);
  if (!v10)
  {
    outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 128);
LABEL_5:
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultimodalNavigationChromeModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultimodalNavigationChromeModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalNavigationChromeModifier()
{
  return &type metadata for MultimodalNavigationChromeModifier;
}

uint64_t getEnumTagSinglePayload for ScrollsUnderMultimodalNavigationChromeModifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollsUnderMultimodalNavigationChromeModifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 97) = v3;
  return result;
}

void *type metadata accessor for ScrollsUnderMultimodalNavigationChromeModifier()
{
  return &unk_1E1B0A0E8;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollsUnderMultimodalNavigationChromeModifier()
{
  return &protocol witness table for ScrollsUnderMultimodalNavigationChromeModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in MultimodalNavigationChromeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in MultimodalNavigationChromeModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in MultimodalNavigationChromeModifier.body(content:)(a1, v2 + 16, a2);
}

uint64_t outlined retain of MultimodalNavigationChromeModifier(uint64_t a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 80);
  v3 = *(_BYTE *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_BYTE *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  swift_retain();
  outlined copy of MultimodalCustomKeyboardActionKeyData?(v8, v7);
  swift_retain();
  return a1;
}

uint64_t outlined copy of MultimodalCustomKeyboardActionKeyData?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);

  result = lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>;
  if (!lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30];
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, v1, MEMORY[0x1E0CB1F20]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SubscriptionView();
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<MultimodalNavigationChromeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier, (uint64_t)&type metadata for MultimodalNavigationChromeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _InsetViewModifier<BackButtonActionableBar?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>);
  }
}

void type metadata accessor for _InsetViewModifier<BackButtonActionableBar?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _InsetViewModifier<BackButtonActionableBar?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1E1AE0690, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type BackButtonActionableBar? and conformance <A> A?();
    v0 = type metadata accessor for _InsetViewModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsetViewModifier<BackButtonActionableBar?>);
  }
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type BackButtonActionableBar? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1E1AE0690, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type BackButtonActionableBar and conformance BackButtonActionableBar();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar and conformance BackButtonActionableBar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackButtonActionableBar and conformance BackButtonActionableBar;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar and conformance BackButtonActionableBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackButtonActionableBar, &unk_1E1AE0690);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar and conformance BackButtonActionableBar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE5BA0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<BackButtonActionableBar?> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<BackButtonActionableBar?>, MEMORY[0x1E0CE4640]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<MultimodalNavigationChromeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier, (uint64_t)&type metadata for MultimodalNavigationChromeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t);

  result = lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>;
  if (!lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30];
    type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, v1, MEMORY[0x1E0CB1F20]);
    type metadata accessor for SubscriptionView();
  }
  return result;
}

void type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>)
  {
    v2 = lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?();
    v3 = type metadata accessor for _PreferenceActionModifier(a1, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKey, (uint64_t)&protocol witness table for MultimodalCustomKeyboardActionKey, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>);
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE998], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData;
  if (!lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalCustomKeyboardActionKeyData, &type metadata for MultimodalCustomKeyboardActionKeyData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData);
  }
  return result;
}

void type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>)
  {
    v0 = type metadata accessor for _PreferenceActionModifier(0, (uint64_t)&type metadata for MultimodalChromeVisiblePreferenceKey, (uint64_t)&protocol witness table for MultimodalChromeVisiblePreferenceKey, MEMORY[0x1E0DEAFB8]);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>);
  }
}

void partial apply for closure #2 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t a1)
{
  MultimodalNavigationChromeModifier.update(for:isKeyboardVisible:)(a1, 1);
}

void partial apply for closure #3 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t a1)
{
  MultimodalNavigationChromeModifier.update(for:isKeyboardVisible:)(a1, 0);
}

uint64_t *partial apply for closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(a1, v1 + 16);
}

uint64_t objectdestroy_10Tm_0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 96), *(_BYTE *)(v0 + 104));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
  swift_release();
  if (*(_QWORD *)(v0 + 152))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(char *a1)
{
  uint64_t v1;

  closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined release of MultimodalNavigationChromeModifier(uint64_t a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 80);
  v3 = *(_BYTE *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_BYTE *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 128);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  swift_release();
  outlined consume of MultimodalCustomKeyboardActionKeyData?(v8, v7);
  swift_release();
  return a1;
}

uint64_t outlined consume of MultimodalCustomKeyboardActionKeyData?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;

  v4 = *(unsigned __int8 *)(v2 + 16);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32))(v4, ObjectType, a2);
}

uint64_t sub_187883484()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in FBSScene.updateClarityUIClientSettings(_:)(void *a1)
{
  uint64_t v1;

  closure #1 in FBSScene.updateClarityUIClientSettings(_:)(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

uint64_t sub_18788349C()
{
  return swift_deallocObject();
}

void type metadata accessor for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for AnyLocation<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0EF8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?);
  }
}

uint64_t *outlined retain of State<MultimodalCustomKeyboardActionKeyData?>(uint64_t *a1)
{
  outlined copy of MultimodalCustomKeyboardActionKeyData?(*a1, a1[1]);
  swift_retain();
  return a1;
}

uint64_t *outlined release of State<MultimodalCustomKeyboardActionKeyData?>(uint64_t *a1)
{
  outlined consume of MultimodalCustomKeyboardActionKeyData?(*a1, a1[1]);
  swift_release();
  return a1;
}

double _s7SwiftUI23BackButtonActionableBar33_94927F8A97ECE008E6A618C158753C28LLVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double specialized static BackButtonActionableBar.defaultBodyLeading.getter()
{
  void *v0;
  void *v1;
  double result;

  if ((byte_1EDE34F98 & 1) == 0)
    return *(double *)&static BackButtonActionableBar.cachedDefaultBodyLeading;
  v0 = (void *)Font.TextStyle.ctTextStyle.getter();
  v1 = (void *)DynamicTypeSize.ctTextSize.getter();
  CTFontDescriptorGetTextStyleSize();

  result = 0.0;
  static BackButtonActionableBar.cachedDefaultBodyLeading = 0;
  byte_1EDE34F98 = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider;
  if (!lazy protocol witness table cache variable for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalScrollGeometryTransformProvider, &unk_1E1B093C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState;
  if (!lazy protocol witness table cache variable for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalScrollGeometryState, &unk_1E1AF9DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState);
  }
  return result;
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

uint64_t sub_18788372C()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.ClarityUIIconWidthKey, &unk_1E1AC3838);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey);
  }
  return result;
}

uint64_t sub_1878837B0(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.navigationBarHost.setter((uint64_t)&v2);
}

void *type metadata accessor for EnvironmentValues.ClarityUIIconWidthKey()
{
  return &unk_1E1AC3838;
}

uint64_t getEnumTagSinglePayload for MultimodalScrollGeometryState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MultimodalScrollGeometryState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 89) = v3;
  return result;
}

void *type metadata accessor for MultimodalScrollGeometryState()
{
  return &unk_1E1AF9DC8;
}

void *type metadata accessor for MultimodalScrollGeometryTransformProvider()
{
  return &unk_1E1B093C0;
}

uint64_t destroy for BackButtonActionableBar(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
}

uint64_t initializeWithCopy for BackButtonActionableBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  swift_retain();
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v6 = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_BYTE *)(a2 + 120);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 112) = v9;
  *(_BYTE *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  v12 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for BackButtonActionableBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (_OWORD *)(a1 + 40);
  v7 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v9;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 40);
      v12 = *(_OWORD *)(a2 + 56);
      v11 = *(_OWORD *)(a2 + 72);
      *v6 = *v7;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 72) = v11;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v13 = *v7;
    v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v14;
    *v6 = v13;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_BYTE *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v15, v16);
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v15;
  *(_BYTE *)(a1 + 120) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  v19 = *(_QWORD *)(a2 + 128);
  v20 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v19, v20);
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v19;
  *(_BYTE *)(a1 + 136) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for BackButtonActionableBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
  {
    outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 40);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_BYTE *)(a2 + 120);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_BYTE *)(a2 + 136);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackButtonActionableBar(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackButtonActionableBar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for BackButtonActionableBar()
{
  return &unk_1E1AE0690;
}

uint64_t sub_187883D94()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>, MEMORY[0x1E0CE2768]);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t)&protocol witness table for SubscriptionView<A, B>, (uint64_t)&protocol witness table for _PreferenceActionModifier<A>);
    v3[1] = &protocol witness table for _PreferenceActionModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BackButtonActionableBar()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>))
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>();
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>));
  }
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(255, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonStyle and conformance BackButtonStyle, (uint64_t)&type metadata for BackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>)
  {
    type metadata accessor for Label<Text, Image>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle, (uint64_t)&type metadata for MultimodalNavigationKeyboardLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationKeyboardLabelStyle, &type metadata for MultimodalNavigationKeyboardLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle, (uint64_t)&type metadata for MultimodalNavigationKeyboardLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BackButtonStyle and conformance BackButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackButtonStyle and conformance BackButtonStyle;
  if (!lazy protocol witness table cache variable for type BackButtonStyle and conformance BackButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackButtonStyle, &type metadata for BackButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonStyle and conformance BackButtonStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(255, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<PrimaryActionButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle, (uint64_t)&unk_1E1AE5DC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
  }
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, a3, a4);
    v9 = v8;
    v10 = a5();
    v12 = type metadata accessor for Button(a1, v9, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>)
  {
    type metadata accessor for Label<_ConditionalContent<Text, Text>, Image?>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle, (uint64_t)&type metadata for MultimodalNavigationKeyboardLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>);
  }
}

uint64_t type metadata accessor for Label<_ConditionalContent<Text, Text>, Image?>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Label<_ConditionalContent<Text, Text>, Image?>;
  if (!lazy cache variable for type metadata for Label<_ConditionalContent<Text, Text>, Image?>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Text, Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Image?, MEMORY[0x1E0CE7298], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type Image? and conformance <A> A?();
    type metadata accessor for Label();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, a2, a3);
    v8 = v7;
    v9[0] = a4();
    v9[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Label<_ConditionalContent<Text, Text>, Image?> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<_ConditionalContent<Text, Text>, Image?>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle;
  if (!lazy protocol witness table cache variable for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimaryActionButtonStyle, &unk_1E1AE5DC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle);
  }
  return result;
}

void type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Spacer?, MEMORY[0x1E0CE7430], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?));
  }
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(255, &lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonStyle and conformance BackButtonStyle, (uint64_t)&type metadata for BackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>)
  {
    type metadata accessor for Label<Text, Image>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle, (uint64_t)&type metadata for MultimodalNavigationBackButtonLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationBackButtonLabelStyle, &type metadata for MultimodalNavigationBackButtonLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle, (uint64_t)&type metadata for MultimodalNavigationBackButtonLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3 = MEMORY[0x1E0CE7EB8];
    v4[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, MEMORY[0x1E0CE7EB8]);
    v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, v3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _BackgroundModifier<BackButtonActionableBar.Background>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background, (uint64_t)&unk_1E1AE0588, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>);
  }
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackButtonActionableBar.Background, &unk_1E1AE0588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background);
  }
  return result;
}

uint64_t outlined retain of BackButtonActionableBar(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_BYTE *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 136);
  swift_retain();
  outlined copy of MultimodalCustomKeyboardActionKeyData?(v2, v3);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v8, v7);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined release of BackButtonActionableBar(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_BYTE *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 136);
  swift_release();
  outlined consume of MultimodalCustomKeyboardActionKeyData?(v2, v3);
  swift_release();
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v8, v7);
  return a1;
}

uint64_t outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(uint64_t), uint64_t (*a6)(void))
{
  uint64_t v8;

  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v6;

  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t objectdestroy_54Tm_0()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 144), *(_BYTE *)(v0 + 152));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in BackButtonActionableBar.body.getter()
{
  uint64_t v0;

  return closure #3 in closure #1 in BackButtonActionableBar.body.getter(v0 + 16);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _BackgroundModifier<BackButtonActionableBar.Background>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background, (uint64_t)&unk_1E1AE0588, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t destroy for BackButtonActionableBar.Background(uint64_t a1)
{
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_BYTE *)(a1 + 33));
}

uint64_t initializeWithCopy for BackButtonActionableBar.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned __int8 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_BYTE *)(a2 + 33);
  v5 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<CGFloat?>.Content(v3, v5, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 33) = v4;
  return a1;
}

uint64_t assignWithCopy for BackButtonActionableBar.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 33);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<CGFloat?>.Content(v4, v6, v5);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a1 + 24) = v4;
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 33) = v5;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  return a1;
}

uint64_t assignWithTake for BackButtonActionableBar.Background(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 33);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 33) = v4;
  outlined consume of Environment<CGFloat?>.Content(v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackButtonActionableBar.Background(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[34])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BackButtonActionableBar.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for BackButtonActionableBar.Background()
{
  return &unk_1E1AE0588;
}

void *type metadata accessor for PrimaryActionButtonStyle()
{
  return &unk_1E1AE5DC8;
}

ValueMetadata *type metadata accessor for BackButtonStyle()
{
  return &type metadata for BackButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BackButtonActionableBar.Background()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in PrimaryActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in BackButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackButtonActionableBar.BarShape, &unk_1E1AE0508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackButtonActionableBar.BarShape, &unk_1E1AE0508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BackButtonActionableBar.BarShape, &unk_1E1AE0508);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>);
  }
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, type metadata accessor for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>);
}

void type metadata accessor for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>, &lazy protocol witness table cache variable for type TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74C8]);
}

void type metadata accessor for TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?))
  {
    type metadata accessor for _ShapeView<Rectangle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, Color>);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?));
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>)
  {
    type metadata accessor for _ShapeView<Rectangle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, TintShapeStyle>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>);
  }
}

void type metadata accessor for _ShapeView<Rectangle, Color>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v3 = type metadata accessor for _ShapeView();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<Material>, MEMORY[0x1E0CE7890], MEMORY[0x1E0CE7880], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>();
    v0 = type metadata accessor for _BackgroundStyleModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>);
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<Material>, MEMORY[0x1E0CE7890], MEMORY[0x1E0CE7880], MEMORY[0x1E0CE4650]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>)
  {
    type metadata accessor for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>, (uint64_t)&protocol witness table for _ShadowView<A>, MEMORY[0x1E0CE2BA8]);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>);
  }
}

void type metadata accessor for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ShadowView<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShadowView);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<_OpacityShapeStyle<Material>> and conformance _BackgroundStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, MEMORY[0x1E0CE5D28]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, MEMORY[0x1E0CE74D8]);
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata completion function for BarBackground()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 17) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v9 = a1 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_BYTE *)(v9 + 16) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_QWORD *)(v9 + 8) = v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v5 + 17) & ~v5, ((a2 & 0xFFFFFFFFFFFFFFF8) + v5 + 17) & ~v5);
  }
  return v3;
}

uint64_t destroy for BarBackground(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

unint64_t initializeWithCopy for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unint64_t assignWithCopy for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unint64_t assignWithTake for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 16) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for BarBackground(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 17) & ~v7);
      v15 = *(unsigned __int8 *)a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187885DB8 + 4 * byte_187C66F37[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for BarBackground(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for BarBackground(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BarBackground);
}

void *type metadata accessor for BackButtonActionableBar.BarShape()
{
  return &unk_1E1AE0508;
}

uint64_t *assignWithCopy for MultimodalNavigationTitleLabelStyle(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  a4(*a2, v8);
  v9 = *a1;
  v10 = *((unsigned __int8 *)a1 + 8);
  *a1 = v7;
  *((_BYTE *)a1 + 8) = v8;
  a5(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for BackButtonActionableBar.KeyboardBackdropView()
{
  return &type metadata for BackButtonActionableBar.KeyboardBackdropView;
}

unint64_t lazy protocol witness table accessor for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>;
  if (!lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatterButtonStyleView<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatterButtonStyleView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatterButtonStyleView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>)
  {
    type metadata accessor for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for BarBackground<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>);
  }
}

void type metadata accessor for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>();
    v2 = v1;
    v3[0] = &protocol witness table for BackButtonActionableBar.KeyboardBackdropView;
    v3[1] = lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>;
  if (!lazy protocol witness table cache variable for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for BarBackground<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1E1AE0508, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarBackground<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BackButtonActionableBar.BarShape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>, MEMORY[0x1E0CE0E50]);
}

void type metadata accessor for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in BarBackground<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for BackButtonActionableBar.BarShape(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape();
  result = lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for MultimodalNavigationTitleBar(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    if (v2 == 1)
      return result;
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v1 + 32) != 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MultimodalNavigationTitleBar(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4 = a2[3];
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      goto LABEL_9;
    }
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  v10 = a2[4];
  if (v10 != 1)
    v10 = swift_retain();
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  swift_retain();
LABEL_9:
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  return a1;
}

uint64_t assignWithCopy for MultimodalNavigationTitleBar(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *((_QWORD *)a2 + 3);
  if (v4 != 1)
  {
    if (v5 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1);
      v10 = a2[1];
      v9 = a2[2];
      v11 = *a2;
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)a1 = v11;
      goto LABEL_28;
    }
    if (v4)
    {
      if (v5)
      {
        v15 = *(_QWORD *)a2;
        v16 = *((_QWORD *)a2 + 1);
        v17 = *((_BYTE *)a2 + 16);
        outlined copy of Text.Storage(*(_QWORD *)a2, v16, v17);
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *(_BYTE *)(a1 + 16);
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 16) = v17;
        outlined consume of Text.Storage(v18, v19, v20);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1);
        v26 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v26;
      }
    }
    else if (v5)
    {
      v23 = *(_QWORD *)a2;
      v24 = *((_QWORD *)a2 + 1);
      v25 = *((_BYTE *)a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v24, v25);
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v24;
      *(_BYTE *)(a1 + 16) = v25;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v27 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v27;
    }
    v28 = (uint64_t *)(a1 + 32);
    v29 = *((_QWORD *)a2 + 4);
    if (*(_QWORD *)(a1 + 32) == 1)
    {
      if (v29 != 1)
      {
        *v28 = v29;
        swift_retain();
        goto LABEL_27;
      }
      v30 = 1;
    }
    else
    {
      if (v29 != 1)
      {
        *v28 = v29;
        swift_retain();
        swift_release();
        goto LABEL_27;
      }
      outlined destroy of Transaction(a1 + 32);
      v30 = *((_QWORD *)a2 + 4);
    }
    *v28 = v30;
LABEL_27:
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    goto LABEL_28;
  }
  if (v5 == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    if (v5)
    {
      v12 = *(_QWORD *)a2;
      v13 = *((_QWORD *)a2 + 1);
      v14 = *((_BYTE *)a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v13, v14);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v13;
      *(_BYTE *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v21;
    }
    v22 = *((_QWORD *)a2 + 4);
    if (v22 != 1)
      v22 = swift_retain();
    *(_QWORD *)(a1 + 32) = v22;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    swift_retain();
  }
LABEL_28:
  v31 = *((_QWORD *)a2 + 8);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v31;
  v32 = *((_QWORD *)a2 + 10);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v32;
  v33 = *((_QWORD *)a2 + 12);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v33;
  return a1;
}

uint64_t assignWithTake for MultimodalNavigationTitleBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 != 1)
  {
    if (v4)
    {
      if (v5)
      {
        v7 = *(_BYTE *)(a2 + 16);
        v8 = *(_QWORD *)a1;
        v9 = *(_QWORD *)(a1 + 8);
        v10 = *(_BYTE *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 16) = v7;
        outlined consume of Text.Storage(v8, v9, v10);
        *(_QWORD *)(a1 + 24) = v5;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1);
    }
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
LABEL_10:
    v12 = (uint64_t *)(a1 + 32);
    v13 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 32) != 1)
    {
      if (v13 != 1)
      {
        *v12 = v13;
        swift_release();
        goto LABEL_15;
      }
      outlined destroy of Transaction(a1 + 32);
      v13 = 1;
    }
    *v12 = v13;
LABEL_15:
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_release();
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    goto LABEL_16;
  }
  outlined destroy of NavigationTitleStorage(a1);
LABEL_4:
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_16:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultimodalNavigationTitleBar(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for MultimodalNavigationTitleBar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleBar()
{
  return &type metadata for MultimodalNavigationTitleBar;
}

uint64_t sub_187886AA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  v3 = type metadata accessor for _ClipEffect();
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ShadowView(255, v1, v2, v5);
  v6 = type metadata accessor for ModifiedContent();
  v15[0] = &protocol witness table for _ShadowView<A>;
  v15[1] = MEMORY[0x1E0CE2BA8];
  v7 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v15);
  v8 = type metadata accessor for _BackgroundModifier();
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v14[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>();
  v14[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v3);
  v13[0] = MEMORY[0x18D75FFDC](v7, v4, v14);
  v13[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v8);
  v12[0] = MEMORY[0x18D75FFDC](v7, v9, v13);
  v12[1] = MEMORY[0x1E0CE5BA0];
  return MEMORY[0x18D75FFDC](v7, v10, v12);
}

uint64_t associated type witness table accessor for View.Body : View in MultimodalNavigationTitleBar()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of MultimodalNavigationTitleBar(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>)
  {
    type metadata accessor for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle, (uint64_t)&type metadata for MultimodalNavigationTitleLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>);
  }
}

uint64_t type metadata accessor for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>;
  if (!lazy cache variable for type metadata for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for _AccessibilityIgnoresInvertColorsViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for Label();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for _AccessibilityIgnoresInvertColorsViewModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = &protocol witness table for _AccessibilityIgnoresInvertColorsViewModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitleLabelStyle, &type metadata for MultimodalNavigationTitleLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<BarBackground<Rectangle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for BarBackground<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    lazy protocol witness table accessor for type BarBackground<Rectangle> and conformance BarBackground<A>();
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<BarBackground<Rectangle>>);
  }
}

unint64_t lazy protocol witness table accessor for type BarBackground<Rectangle> and conformance BarBackground<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BarBackground<Rectangle> and conformance BarBackground<A>;
  if (!lazy protocol witness table cache variable for type BarBackground<Rectangle> and conformance BarBackground<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for BarBackground<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarBackground<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarBackground<Rectangle> and conformance BarBackground<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<BarBackground<Rectangle>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void CustomHoverEffect.effectAppearance(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_187887348(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t type metadata completion function for EnvironmentWritingTableColumnContent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentWritingTableColumnContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v16, ((unint64_t)a2 + v11) & v16, v8);
  }
  return a1;
}

uint64_t destroy for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithCopy for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t initializeWithTake for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentWritingTableColumnContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  if (a2 <= v12)
    goto LABEL_23;
  v15 = (v14 & ~v13) + *(_QWORD *)(v10 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = (v14 & ~(_DWORD)v13) + *(_DWORD *)(v10 + 64);
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v12 + v19 + 1;
}

void storeEnumTagSinglePayload for EnvironmentWritingTableColumnContent(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for EnvironmentWritingTableColumnContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t instantiation function for generic protocol witness table for EnvironmentWritingTableColumnContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentWritingTableColumnContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in EnvironmentWritingTableColumnContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in EnvironmentWritingTableColumnContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

void TableColumnContent.environment<A>(key:value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)v17 - v14;
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)v17 - v14, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
  EnvironmentWritingTableColumnContent.init(value:content:)((uint64_t)v15, a4);
}

void EnvironmentWritingTableColumnContent.init(value:content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  type metadata accessor for EnvironmentWritingTableColumnContent();
}

uint64_t sub_187887D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[38];

  v12[10] = a5;
  v12[36] = *MEMORY[0x1E0C80C00];
  v12[4] = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v12[6] = (char *)v12 - v11;
  v12[25] = a1;
  v12[26] = a2;
  v12[27] = a3;
  v12[28] = a4;
  type metadata accessor for EnvironmentWritingTableColumnContent.ChildEnvironment();
}

void sub_187887E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v15 - 320) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 328) = (char *)&a9 - v16;
  v17 = *v10;
  v18 = *(_DWORD *)(v9 + 8);
  v19 = *(_QWORD *)(v9 + 16);
  v20 = *(_DWORD *)(v9 + 24);
  v21 = *(_DWORD *)(v9 + 28);
  v22 = *(_DWORD *)(v9 + 32);
  v23 = *(_DWORD *)(v9 + 36);
  v25 = *(_QWORD *)(v9 + 40);
  v24 = *(_QWORD *)(v9 + 48);
  LODWORD(v16) = *(_DWORD *)(v9 + 80);
  *(_QWORD *)(v15 - 184) = *(_QWORD *)v9;
  *(_DWORD *)(v15 - 356) = v18;
  *(_DWORD *)(v15 - 176) = v18;
  *(_QWORD *)(v15 - 168) = v19;
  *(_DWORD *)(v15 - 360) = v20;
  *(_DWORD *)(v15 - 160) = v20;
  *(_DWORD *)(v15 - 156) = v21;
  *(_DWORD *)(v15 - 364) = v21;
  *(_DWORD *)(v15 - 368) = v22;
  *(_DWORD *)(v15 - 152) = v22;
  *(_DWORD *)(v15 - 148) = v23;
  *(_DWORD *)(v15 - 372) = v23;
  *(_QWORD *)(v15 - 144) = v25;
  *(_QWORD *)(v15 - 136) = v24;
  *(_OWORD *)(v15 - 128) = *(_OWORD *)(v9 + 56);
  *(_QWORD *)(v15 - 112) = *(_QWORD *)(v9 + 72);
  *(_DWORD *)(v15 - 104) = v16;
  *(_DWORD *)(v15 - 308) = v17;
  *(_DWORD *)(v15 - 276) = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v15 - 272) = v13;
  *(_QWORD *)(v15 - 264) = v11;
  *(_QWORD *)(v15 - 256) = v12;
  *(_QWORD *)(v15 - 248) = v14;
  *(_QWORD *)(v15 - 296) = v14;
  type metadata accessor for EnvironmentWritingTableColumnContent();
}

void sub_187887F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int OffsetAttribute2;
  int v5;
  int v6;
  int v7;
  uint64_t AssociatedTypeWitness;

  *(_QWORD *)(v3 - 344) = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 - 352) - 8) + 64))
    closure #1 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)(v3 - 272) = v2;
  *(_DWORD *)(v3 - 264) = *(_DWORD *)(v3 - 356);
  *(_QWORD *)(v3 - 256) = v0;
  v5 = *(_DWORD *)(v3 - 364);
  *(_DWORD *)(v3 - 248) = *(_DWORD *)(v3 - 360);
  *(_DWORD *)(v3 - 244) = v5;
  v6 = *(_DWORD *)(v3 - 372);
  *(_DWORD *)(v3 - 240) = *(_DWORD *)(v3 - 368);
  *(_DWORD *)(v3 - 236) = v6;
  *(_QWORD *)(v3 - 232) = v1;
  v7 = _GraphInputs.environment.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(*(_QWORD *)(v3 - 336), 1, 1, AssociatedTypeWitness);
  EnvironmentWritingTableColumnContent.ChildEnvironment.init(newValue:environment:oldValue:)(OffsetAttribute2, v7, *(_DWORD **)(v3 - 328));
}

uint64_t sub_1878880CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v22 = v6;
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentWritingTableColumnContent<A, B>.ChildEnvironment, v6, v9);
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)&v20, v6, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 320) + 8))(v3, v6);
  v12 = _GraphInputs.environment.setter();
  MEMORY[0x1E0C80A78](v12, v13);
  v20 = v5;
  v21 = v2;
  v22 = v4;
  v23 = v7;
  *(_DWORD *)(v8 - 272) = *(_DWORD *)(v8 - 308);
  _GraphValue.subscript.getter();
  v14 = *(_DWORD *)(v8 - 176);
  v15 = *(_QWORD *)(v8 - 168);
  v16 = *(_QWORD *)(v8 - 144);
  v17 = *(_QWORD *)(v8 - 136);
  v18 = *(_DWORD *)(v8 - 104);
  *(_QWORD *)(v8 - 272) = *(_QWORD *)(v8 - 184);
  *(_DWORD *)(v8 - 264) = v14;
  *(_QWORD *)(v8 - 256) = v15;
  *(_OWORD *)(v8 - 248) = *(_OWORD *)(v8 - 160);
  *(_QWORD *)(v8 - 232) = v16;
  *(_QWORD *)(v8 - 224) = v17;
  *(_OWORD *)(v8 - 216) = *(_OWORD *)(v8 - 128);
  *(_QWORD *)(v8 - 200) = *(_QWORD *)(v8 - 112);
  *(_DWORD *)(v8 - 192) = v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 64))(v8 - 276, v8 - 272, v2, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #1 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)()
{
  type metadata accessor for EnvironmentWritingTableColumnContent();
}

uint64_t sub_1878882C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void EnvironmentWritingTableColumnContent.ChildEnvironment.init(newValue:environment:oldValue:)(int a1@<W0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for EnvironmentWritingTableColumnContent.ChildEnvironment();
}

uint64_t sub_187888390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void closure #2 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)()
{
  type metadata accessor for EnvironmentWritingTableColumnContent();
}

uint64_t sub_187888420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 52);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

uint64_t static EnvironmentWritingTableColumnContent._tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v7 = *((_DWORD *)a1 + 20);
  v10 = *a1;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a1 + 5);
  v13 = *(_OWORD *)(a1 + 3);
  v14 = v8;
  v15 = *(_OWORD *)(a1 + 7);
  v16 = a1[9];
  v17 = v7;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 72))(&v10, a3, a5);
}

uint64_t EnvironmentWritingTableColumnContent.ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t OutputValue;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 32);
  v39 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v6);
  v8 = (char *)&v37 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v38 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v37 - v15;
  Value = (uint64_t *)AGGraphGetValue();
  v42 = v18;
  v19 = Value[1];
  v47 = *Value;
  v48 = v19;
  v20 = AGGraphGetValue();
  v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, v20, AssociatedTypeWitness);
  v44 = a1;
  v40 = v5;
  if ((v22 & 1) != 0)
  {
    v23 = v1;
    v26 = v1 + *(int *)(a1 + 56);
    v25 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v26, v43);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    {
      v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      swift_retain();
      swift_retain();
      v27(v8, v25);
      v24 = 1;
    }
    else
    {
      v28 = (uint64_t)v38;
      v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v38, v8, AssociatedTypeWitness);
      MEMORY[0x1E0C80A78](v29, v30);
      *(&v37 - 4) = AssociatedTypeWitness;
      *(&v37 - 3) = (uint64_t)v16;
      *((_DWORD *)&v37 - 4) = 3;
      swift_retain();
      swift_retain();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v28, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v37 - 6), AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v31);
      v32 = v45;
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v28, AssociatedTypeWitness);
      v24 = v32 ^ 1;
    }
  }
  else
  {
    v23 = v1;
    swift_retain();
    swift_retain();
    v24 = 0;
    v25 = v43;
  }
  OutputValue = AGGraphGetOutputValue();
  v34 = v44;
  if (!OutputValue || (v42 & 1) != 0 || (v24 & 1) != 0)
  {
    specialized EnvironmentValues.subscript.setter(v16, v39, v39, v41);
    v45 = v47;
    v46 = v48;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    v36 = v23 + *(int *)(v34 + 56);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v36, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v36, v16, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v36, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, AssociatedTypeWitness);
    swift_release();
    return swift_release();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EnvironmentWritingTableColumnContent<A, B>.ChildEnvironment(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentWritingTableColumnContent<A, B>.ChildEnvironment, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance EnvironmentWritingTableColumnContent<A, B>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance EnvironmentWritingTableColumnContent<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static EnvironmentWritingTableColumnContent._tableColumnCount(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

void type metadata accessor for EnvironmentWritingTableColumnContent.ChildEnvironment()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #2 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)()
{
  closure #2 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)();
}

uint64_t type metadata completion function for EnvironmentWritingTableColumnContent.ChildEnvironment()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentWritingTableColumnContent.ChildEnvironment(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  void *v16;
  const void *v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 8) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = (void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    v17 = (const void *)(((unint64_t)v15 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v17, 1, AssociatedTypeWitness))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for EnvironmentWritingTableColumnContent.ChildEnvironment(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return result;
}

_DWORD *initializeWithCopy for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  v9 = (const void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84))
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithCopy for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  v9 = (void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v11 = v10(v8, 1, AssociatedTypeWitness);
  v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v13);
  return a1;
}

_DWORD *initializeWithTake for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  v9 = (const void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84))
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithTake for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  v9 = (void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v11 = v10(v8, 1, AssociatedTypeWitness);
  v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentWritingTableColumnContent.ChildEnvironment(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  if (a2 > v6)
  {
    v9 = v7 + ((v8 + 8) & ~v8);
    v10 = 8 * v9;
    if (v9 > 3)
      goto LABEL_7;
    v12 = ((a2 - v6 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (v11)
        goto LABEL_14;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_23;
LABEL_7:
        v11 = *(unsigned __int8 *)(a1 + v9);
        if (!*(_BYTE *)(a1 + v9))
          goto LABEL_23;
LABEL_14:
        v13 = (v11 - 1) << v10;
        if (v9 > 3)
          v13 = 0;
        if ((_DWORD)v9)
        {
          if (v9 <= 3)
            v14 = v9;
          else
            v14 = 4;
          __asm { BR              X12 }
        }
        return v6 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (*(_WORD *)(a1 + v9))
        goto LABEL_14;
    }
  }
LABEL_23:
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for EnvironmentWritingTableColumnContent.ChildEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = 0u;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  if (a3 > v9)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 >= a2)
LABEL_22:
        __asm { BR              X13 }
LABEL_15:
      v13 = ~v9 + a2;
      if (v11 < 4)
      {
        if ((_DWORD)v11)
        {
          v14 = v13 & ~(-1 << (8 * v11));
          bzero(a1, v11);
          if ((_DWORD)v11 == 3)
          {
            *(_WORD *)a1 = v14;
            a1[2] = BYTE2(v14);
          }
          else if ((_DWORD)v11 == 2)
          {
            *(_WORD *)a1 = v14;
          }
          else
          {
            *a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, v11);
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
    v12 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v12))
    {
      v6 = 4u;
      if (v9 >= a2)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 >= 0x100)
      v6 = 2;
    else
      v6 = v12 > 1;
  }
  if (v9 >= a2)
    goto LABEL_22;
  goto LABEL_15;
}

void sub_18788933C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187889344()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void base witness table accessor for _AttributeBody in EnvironmentWritingTableColumnContent<A, B>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for CollectionViewTableRoot()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionViewTableRoot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((v10 + (v9 & ~v8) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
    return v4;
  }
  v15 = ~v8;
  (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
  v16 = ((unint64_t)v4 + v9) & v15;
  v17 = ((unint64_t)a2 + v9) & v15;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v16, v17, v5);
  v18 = v16 + v10;
  v19 = v17 + v10;
  v20 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v21 + 8) < 0xFFFFFFFFuLL)
  {
    v25 = *(_OWORD *)v21;
    v26 = *(_OWORD *)(v21 + 16);
    v27 = *(_OWORD *)(v21 + 32);
    *(_OWORD *)(v20 + 41) = *(_OWORD *)(v21 + 41);
    *(_OWORD *)(v20 + 16) = v26;
    *(_OWORD *)(v20 + 32) = v27;
    *(_OWORD *)v20 = v25;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    v22 = (__int128 *)(v21 + 16);
    v23 = *(unsigned __int8 *)(v21 + 56);
    swift_retain();
    swift_retain();
    if (v23 == 2)
    {
      v28 = *(_QWORD *)(v21 + 40);
      *(_QWORD *)(v20 + 40) = v28;
      *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(v20 + 16, v21 + 16);
      v29 = 2;
LABEL_20:
      *(_BYTE *)(v20 + 56) = v29;
      goto LABEL_21;
    }
    if (v23 == 1)
    {
      v24 = *(_QWORD *)(v21 + 40);
      if (v24)
      {
        *(_QWORD *)(v20 + 40) = v24;
        *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v20 + 16, v21 + 16);
      }
      else
      {
        v30 = *v22;
        v31 = *(_OWORD *)(v21 + 32);
        *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
        *(_OWORD *)(v20 + 16) = v30;
        *(_OWORD *)(v20 + 32) = v31;
      }
      v29 = 1;
      goto LABEL_20;
    }
    *(_QWORD *)(v20 + 16) = *(_QWORD *)v22;
    *(_BYTE *)(v20 + 56) = 0;
    swift_bridgeObjectRetain();
  }
LABEL_21:
  v32 = (v18 + 71) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v19 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v33 + 8) < 0xFFFFFFFFuLL)
  {
    v34 = *(_OWORD *)v33;
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
    *(_OWORD *)v32 = v34;
  }
  else
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v35 = (v32 + 31) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v33 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v36 + 8) < 0xFFFFFFFFuLL)
  {
    v37 = *(_OWORD *)(v36 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *(_OWORD *)(v35 + 16) = v37;
  }
  else
  {
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *(_QWORD *)(v35 + 8) = *(_QWORD *)(v36 + 8);
    *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
    *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CollectionViewTableRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v7);
  v9 = v7 + *(_QWORD *)(v6 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_8;
  swift_release();
  swift_release();
  result = v10 + 16;
  v11 = *(unsigned __int8 *)(v10 + 56);
  if (v11 == 2)
  {
LABEL_7:
    result = __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v11 == 1)
  {
    if (!*(_QWORD *)(v10 + 40))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v10 + 56))
    result = swift_bridgeObjectRelease();
LABEL_8:
  v12 = (v9 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(((v12 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    v21 = *(_OWORD *)v17;
    v22 = *(_OWORD *)(v17 + 16);
    v23 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v23;
    *(_OWORD *)v16 = v21;
    goto LABEL_12;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v18 = (_QWORD *)(v17 + 16);
  v19 = *(unsigned __int8 *)(v17 + 56);
  swift_retain();
  swift_retain();
  if (v19 == 2)
  {
    v24 = *(_QWORD *)(v17 + 40);
    *(_QWORD *)(v16 + 40) = v24;
    *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v16 + 16, v17 + 16);
    v25 = 2;
  }
  else
  {
    if (v19 != 1)
    {
      *(_QWORD *)(v16 + 16) = *v18;
      *(_BYTE *)(v16 + 56) = 0;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    v20 = *(_QWORD *)(v17 + 40);
    if (v20)
    {
      *(_QWORD *)(v16 + 40) = v20;
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v16 + 16, v17 + 16);
    }
    else
    {
      v26 = *(_OWORD *)v18;
      v27 = *(_OWORD *)(v17 + 32);
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
      *(_OWORD *)(v16 + 16) = v26;
      *(_OWORD *)(v16 + 32) = v27;
    }
    v25 = 1;
  }
  *(_BYTE *)(v16 + 56) = v25;
LABEL_12:
  v28 = (v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v29 + 8) < 0xFFFFFFFFuLL)
  {
    v30 = *(_OWORD *)v29;
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    *(_OWORD *)v28 = v30;
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v31 = (v28 + 31) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v32 + 8) < 0xFFFFFFFFuLL)
  {
    v33 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v33;
  }
  else
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 8);
  if (*(_QWORD *)(v16 + 8) >= 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      swift_retain();
      swift_release();
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      swift_retain();
      swift_release();
      if (v16 == v17)
        goto LABEL_23;
      v19 = v16 + 16;
      v20 = v17 + 16;
      outlined destroy of SelectionManagerBox<AnyHashable>(v16 + 16);
      v21 = *(unsigned __int8 *)(v17 + 56);
      if (v21 != 2)
      {
        if (v21 != 1)
        {
LABEL_6:
          *(_QWORD *)(v16 + 16) = *(_QWORD *)v20;
          *(_BYTE *)(v16 + 56) = 0;
          swift_bridgeObjectRetain();
          goto LABEL_23;
        }
        goto LABEL_10;
      }
      goto LABEL_16;
    }
    swift_release();
    swift_release();
    v24 = *(unsigned __int8 *)(v16 + 56);
    if (v24 == 2)
      goto LABEL_18;
    if (v24 != 1)
    {
      if (!*(_BYTE *)(v16 + 56))
        swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    if (*(_QWORD *)(v16 + 40))
LABEL_18:
      __swift_destroy_boxed_opaque_existential_1(v16 + 16);
LABEL_19:
    v27 = *(_OWORD *)v17;
    v28 = *(_OWORD *)(v17 + 16);
    v29 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    *(_OWORD *)(v16 + 16) = v28;
    *(_OWORD *)(v16 + 32) = v29;
    *(_OWORD *)v16 = v27;
    goto LABEL_23;
  }
  if (v18 < 0xFFFFFFFF)
    goto LABEL_19;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v19 = v16 + 16;
  v20 = v17 + 16;
  v22 = *(unsigned __int8 *)(v17 + 56);
  swift_retain();
  swift_retain();
  if (v22 != 2)
  {
    if (v22 != 1)
      goto LABEL_6;
LABEL_10:
    v23 = *(_QWORD *)(v17 + 40);
    if (v23)
    {
      *(_QWORD *)(v16 + 40) = v23;
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
      (**(void (***)(unint64_t, unint64_t))(v23 - 8))(v19, v20);
    }
    else
    {
      v30 = *(_OWORD *)v20;
      v31 = *(_OWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_OWORD *)v19 = v30;
      *(_OWORD *)(v19 + 16) = v31;
    }
    v26 = 1;
    goto LABEL_22;
  }
LABEL_16:
  v25 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v16 + 40) = v25;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
  (**(void (***)(unint64_t, unint64_t))(v25 - 8))(v19, v20);
  v26 = 2;
LABEL_22:
  *(_BYTE *)(v16 + 56) = v26;
LABEL_23:
  v32 = (_QWORD *)((v14 + 71) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  v34 = v33[1];
  if (v32[1] < 0xFFFFFFFFuLL)
  {
    if (v34 >= 0xFFFFFFFF)
    {
      *v32 = *v33;
      v32[1] = v33[1];
      v32[2] = v33[2];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
  }
  else
  {
    if (v34 >= 0xFFFFFFFF)
    {
      *v32 = *v33;
      swift_retain();
      swift_release();
      v32[1] = v33[1];
      swift_retain();
      swift_release();
      v32[2] = v33[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v35 = *(_OWORD *)v33;
  v32[2] = v33[2];
  *(_OWORD *)v32 = v35;
LABEL_30:
  v36 = (_QWORD *)(((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8);
  v38 = v37[1];
  if (v36[1] < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      *v36 = *v37;
      v36[1] = v37[1];
      v36[2] = v37[2];
      v36[3] = v37[3];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_36:
    v39 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v39;
    return a1;
  }
  if (v38 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  *v36 = *v37;
  swift_retain();
  swift_release();
  v36[1] = v37[1];
  swift_retain();
  swift_release();
  v36[2] = v37[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36[3] = v37[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of SelectionManagerBox<AnyHashable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (_OWORD *)((v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (__int128 *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v17[1];
  v18 = v17[2];
  v20 = *v17;
  *(_OWORD *)((char *)v16 + 41) = *(__int128 *)((char *)v17 + 41);
  v16[1] = v19;
  v16[2] = v18;
  *v16 = v20;
  v21 = (v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_OWORD *)v22;
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  *(_OWORD *)v21 = v23;
  v24 = (_OWORD *)((v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  return a1;
}

uint64_t assignWithTake for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_11;
  if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    v20 = *(unsigned __int8 *)(v16 + 56);
    if (v20 == 2)
      goto LABEL_10;
    if (v20 != 1)
    {
      if (!*(_BYTE *)(v16 + 56))
        swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    if (*(_QWORD *)(v16 + 40))
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1(v16 + 16);
LABEL_11:
    v21 = *(_OWORD *)v17;
    v22 = *(_OWORD *)(v17 + 16);
    v23 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v23;
    *(_OWORD *)v16 = v21;
    goto LABEL_12;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_release();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release();
  if (v16 != v17)
  {
    outlined destroy of SelectionManagerBox<AnyHashable>(v16 + 16);
    v18 = *(_OWORD *)(v17 + 41);
    v19 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)(v17 + 16);
    *(_OWORD *)(v16 + 32) = v19;
    *(_OWORD *)(v16 + 41) = v18;
  }
LABEL_12:
  v24 = (_QWORD *)((v14 + 71) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  if (v24[1] >= 0xFFFFFFFFuLL)
  {
    if (v25[1] >= 0xFFFFFFFFuLL)
    {
      *v24 = *v25;
      swift_release();
      v24[1] = v25[1];
      swift_release();
      v24[2] = v25[2];
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v26 = *(_OWORD *)v25;
  v24[2] = v25[2];
  *(_OWORD *)v24 = v26;
LABEL_17:
  v27 = ((unint64_t)v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v27 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_21:
    v29 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *(_OWORD *)(v27 + 16) = v29;
    return a1;
  }
  if (*(_QWORD *)(v28 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  *(_QWORD *)v27 = *(_QWORD *)v28;
  swift_release();
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  swift_release();
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewTableRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFE)
    v9 = 2147483646;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)(((v12 + v17 + 7) & 0xFFFFFFFFFFFFF8) + 8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  else
  {
    if (((((((v12 + (v11 & ~v10) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18788A304 + 4 * byte_187C67930[v15]))();
  }
}

void storeEnumTagSinglePayload for CollectionViewTableRoot(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v8) & ~v8) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18788A4DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18788A58CLL);
}

void sub_18788A4E4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18788A4ECLL);
  JUMPOUT(0x18788A58CLL);
}

void sub_18788A530()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18788A58CLL);
}

void sub_18788A538()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18788A58CLL);
}

uint64_t sub_18788A540(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x18788A58CLL);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x18788A54CLL);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void type metadata accessor for CollectionViewTableRoot()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for View in CollectionViewTableRoot<A, B, C>()
{
  return &protocol witness table for CollectionViewTableRoot<A, B, C>;
}

size_t specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[6];

  v40 = a8;
  v41 = a5;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  v43 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v42 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - v19;
  v21 = type metadata accessor for TableColumnCollection.Entry(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || (a4 & 1) != 0 && !a3)
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  v27 = outlined init with copy of TableColumnCollection(a1, (uint64_t)v45);
  MEMORY[0x1E0C80A78](v27, v28);
  v29 = v40;
  *(&v40 - 8) = a7;
  *(&v40 - 7) = v29;
  *((_BYTE *)&v40 - 48) = a4 & 1;
  *(&v40 - 5) = a2;
  *(&v40 - 4) = a3;
  *(&v40 - 3) = v41;
  *(&v40 - 2) = v30;
  v31 = specialized Sequence.compactMap<A>(_:)((uint64_t)v45, (void (*)(uint64_t, char *))partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)(&v40 - 10));
  outlined destroy of EnumeratedSequence<TableColumnCollection>((uint64_t)v45);
  v45[0] = v31;
  if (a3)
  {
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v45, a3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(_QWORD *, uint64_t))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    v31 = v45[0];
  }
  v32 = *(_QWORD *)(v31 + 16);
  v33 = MEMORY[0x1E0DEE9D8];
  if (v32)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
    v34 = v31 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v35 = *(_QWORD *)(v14 + 72);
    v40 = v31;
    v41 = v35;
    do
    {
      outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v34, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      v36 = *(int *)(v43 + 48);
      v37 = (uint64_t)&v42[v36];
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v20[v36], (uint64_t)&v42[v36], type metadata accessor for TableColumnCollection.Entry);
      outlined init with take of TableCellFormula(v37, (uint64_t)v25, type metadata accessor for TableColumnCollection.Entry);
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v33 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
        v33 = v44;
      }
      v39 = *(_QWORD *)(v33 + 16);
      v38 = *(_QWORD *)(v33 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        v33 = v44;
      }
      *(_QWORD *)(v33 + 16) = v39 + 1;
      outlined init with take of TableCellFormula((uint64_t)v25, v33+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v39, type metadata accessor for TableColumnCollection.Entry);
      v34 += v41;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v41 = a7;
  v42 = a8;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  v44 = v13;
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v43 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - v19;
  v21 = type metadata accessor for TableCellFormula();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v27 = (char *)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && ((a4 & 1) == 0 || a3))
  {
    MEMORY[0x1E0C80A78](v24, v25);
    v28 = v42;
    *(&v40 - 8) = (uint64_t)v41;
    *(&v40 - 7) = v28;
    *((_BYTE *)&v40 - 48) = a4 & 1;
    *(&v40 - 5) = a2;
    *(&v40 - 4) = a3;
    *(&v40 - 3) = v29;
    *(&v40 - 2) = a6;
    v30 = swift_bridgeObjectRetain();
    v31 = specialized Sequence.compactMap<A>(_:)(v30, (void (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:));
    swift_bridgeObjectRelease();
    v46 = v31;
    if (a3)
    {
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v46, a3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(_QWORD *, uint64_t))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
      swift_bridgeObjectRelease();
      v31 = v46;
    }
    v32 = v31[2];
    a1 = MEMORY[0x1E0DEE9D8];
    if (v32)
    {
      v45 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
      v33 = (uint64_t)v31 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v34 = *(_QWORD *)(v14 + 72);
      v41 = v31;
      v42 = v34;
      do
      {
        outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v33, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
        v35 = *(int *)(v44 + 48);
        v36 = (uint64_t)&v43[v35];
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v20[v35], (uint64_t)&v43[v35], (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
        outlined init with take of TableCellFormula(v36, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        a1 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16) + 1, 1);
          a1 = v45;
        }
        v38 = *(_QWORD *)(a1 + 16);
        v37 = *(_QWORD *)(a1 + 24);
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          a1 = v45;
        }
        *(_QWORD *)(a1 + 16) = v38 + 1;
        outlined init with take of TableCellFormula((uint64_t)v27, a1+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v38, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
        v33 += v42;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[11];
  _OWORD v12[2];
  _OWORD v13[9];
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[208];
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  TableDataSourceAdaptor.contextForItem(index:)(a1, a2, (uint64_t)v17);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  if ((_QWORD)v14)
  {
    v11[10] = v15;
    v12[0] = v16[0];
    *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v16 + 11);
    v11[6] = v13[6];
    v11[7] = v13[7];
    v11[8] = v13[8];
    v11[9] = v14;
    v11[2] = v13[2];
    v11[3] = v13[3];
    v11[4] = v13[4];
    v11[5] = v13[5];
    v11[0] = v13[0];
    v11[1] = v13[1];
    specialized _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a3 & 1, (uint64_t)&v8);
    if (*((_QWORD *)&v9 + 1))
    {
      v18 = v8;
      v19 = v9;
      v20 = v10;
      outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v11);
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
      v7 = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v7;
      *(_QWORD *)(a4 + 32) = v20;
      return result;
    }
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v11);
  }
  else
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[11];
  _OWORD v12[2];
  _OWORD v13[9];
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[208];
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  specialized ShadowListDataSource.contextForItem(index:)(a1, a2, (uint64_t)v17);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
  if ((_QWORD)v14)
  {
    v11[10] = v15;
    v12[0] = v16[0];
    *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v16 + 11);
    v11[6] = v13[6];
    v11[7] = v13[7];
    v11[8] = v13[8];
    v11[9] = v14;
    v11[2] = v13[2];
    v11[3] = v13[3];
    v11[4] = v13[4];
    v11[5] = v13[5];
    v11[0] = v13[0];
    v11[1] = v13[1];
    specialized _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a3 & 1, (uint64_t)&v8);
    if (*((_QWORD *)&v9 + 1))
    {
      v18 = v8;
      v19 = v9;
      v20 = v10;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
      v7 = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v7;
      *(_QWORD *)(a4 + 32) = v20;
      return result;
    }
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
  }
  else
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t specialized _RowVisitationContext.selectionValue(respectSelectionDisabled:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[26];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v8[0] = *(_QWORD *)(v2 + 152);
  v12 = 1;
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
  {
    outlined init with copy of AccessibilityScrollableContext?(v2 + 160, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v2, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
    if (*((_QWORD *)&v10 + 1))
    {
      result = outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v8);
      v6 = v10;
      *(_OWORD *)a2 = v9;
      *(_OWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 32) = v11;
    }
    else
    {
      v7 = v8[19];
      swift_bridgeObjectRetain();
      specialized ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, v7, a2);
      swift_bridgeObjectRelease();
      outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v8);
      return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  __int128 v6;
  _QWORD v7[26];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  v7[0] = *(_QWORD *)(v2 + 152);
  v11 = 1;
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v8 & 1) != 0 || (a1 & 1) == 0)
  {
    outlined init with copy of AccessibilityScrollableContext?(v2 + 160, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
    if (*((_QWORD *)&v9 + 1))
    {
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
      v6 = v9;
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 32) = v10;
    }
    else
    {
      specialized ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, v7[19], a2);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
      return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(_QWORD, _QWORD);
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a2;
  result = ViewTraitCollection.isAuxiliaryContent.getter();
  if ((result & 1) == 0)
  {
    *(_QWORD *)&v12 = a2;
    result = ViewTraitCollection.value<A>(for:defaultValue:)();
    if ((v11 & 1) != 0 || (a1 & 1) == 0)
    {
      result = ViewTraitCollection.tag<A>(for:)();
      if (*((_QWORD *)&v13 + 1))
      {
        v7 = v13;
        *(_OWORD *)a3 = v12;
        *(_OWORD *)(a3 + 16) = v7;
        *(_QWORD *)(a3 + 32) = v14;
        return result;
      }
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      result = ViewTraitCollection.value<A>(for:defaultValue:)();
      v8 = v12;
      v9 = v13;
      if ((_QWORD)v12)
      {
        if ((_QWORD)v12 != 1)
        {
          v10 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)v12 + 120);
          swift_retain();
          v10(MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC198]);
          outlined consume of NavigationLinkSelectionIdentifier?(v8, *((uint64_t *)&v8 + 1), v9);
          return swift_release();
        }
      }
      else
      {
        result = outlined consume of NavigationLinkSelectionIdentifier?(0, *((uint64_t *)&v12 + 1), v13);
      }
    }
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t specialized SelectionManagerBox.isSelected(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  char v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t (*v12)(void);
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];
  _BYTE v24[40];
  _OWORD v25[2];
  uint64_t v26;
  char v27;

  outlined init with copy of SelectionManagerBox<AnyHashable>(v4, (uint64_t)v25, a3, a4);
  if (!v27)
  {
    v8 = specialized Set.contains(_:)(a1, *(uint64_t *)&v25[0]);
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  if (v27 != 1)
  {
    v17 = v25[0];
    v18 = v25[1];
    v19 = v26;
    v8 = MEMORY[0x18D75E284](&v17, a1);
    outlined destroy of AnyHashable((uint64_t)&v17);
    return v8 & 1;
  }
  v6 = MEMORY[0x1E0DEC198];
  outlined init with take of SwipeActions.Value?((uint64_t)v25, (uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with copy of AnyHashable(a1, (uint64_t)v23);
  v7 = MEMORY[0x1E0DEB940];
  outlined init with copy of AccessibilityScrollableContext?((uint64_t)v24, (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of AccessibilityScrollableContext?((uint64_t)v23, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v6, (uint64_t (*)(_QWORD, uint64_t))v7);
  if (!*((_QWORD *)&v18 + 1))
  {
    v9 = MEMORY[0x1E0DEC198];
    v10 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v9, (uint64_t (*)(_QWORD, uint64_t))v10);
    if (!*((_QWORD *)&v21 + 1))
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v8 = 1;
      return v8 & 1;
    }
LABEL_11:
    outlined destroy of TableRowList?((uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for (AnyHashable?, AnyHashable?), (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?));
    v8 = 0;
    return v8 & 1;
  }
  outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v17, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (!*((_QWORD *)&v21 + 1))
  {
    v11 = MEMORY[0x1E0DEC198];
    v12 = MEMORY[0x1E0DEB940];
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v11, (uint64_t (*)(_QWORD, uint64_t))v12);
    outlined destroy of AnyHashable((uint64_t)v16);
    goto LABEL_11;
  }
  v14[0] = v20;
  v14[1] = v21;
  v15 = v22;
  v8 = MEMORY[0x18D75E284](v16, v14);
  outlined destroy of AnyHashable((uint64_t)v14);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v6, (uint64_t (*)(_QWORD, uint64_t))v7);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v6, (uint64_t (*)(_QWORD, uint64_t))v7);
  outlined destroy of AnyHashable((uint64_t)v16);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v6, (uint64_t (*)(_QWORD, uint64_t))v7);
  return v8 & 1;
}

uint64_t specialized SelectionManagerBox.select(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t result;
  _BYTE v6[40];
  _BYTE v7[40];
  uint64_t v8;
  _QWORD v9[5];
  char v10;

  v2 = v1;
  outlined init with take of SelectionManagerBox<AnyHashable>(v2, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      outlined init with copy of AnyHashable(a1, v2);
      v4 = 1;
    }
    else
    {
      outlined init with copy of AnyHashable(a1, v2);
      v4 = 2;
    }
    *(_BYTE *)(v2 + 40) = v4;
    return outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v9);
  }
  else
  {
    v8 = v9[0];
    outlined init with copy of AnyHashable(a1, (uint64_t)v6);
    specialized Set._Variant.insert(_:)((uint64_t)v7, (uint64_t)v6);
    result = outlined destroy of AnyHashable((uint64_t)v7);
    *(_QWORD *)v2 = v8;
    *(_BYTE *)(v2 + 40) = 0;
  }
  return result;
}

double specialized static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)@<D0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t (*v71)(void);
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  double result;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  __int128 v112;
  int v113;
  char v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  _OWORD v118[5];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[80];
  int v124;
  uint64_t v125;

  LODWORD(v107) = a2;
  v108 = a4;
  v125 = *MEMORY[0x1E0C80C00];
  LODWORD(v106) = a3 & 1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v97 - v7;
  v9 = (int *)type metadata accessor for BridgedListState(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (double *)((char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v116 = *(_QWORD *)(a1 + 48);
  v117 = *(_DWORD *)(a1 + 56);
  *(_QWORD *)&v118[0] = *(_QWORD *)(a1 + 48);
  DWORD2(v118[0]) = *(_DWORD *)(a1 + 56);
  v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v110 = v13;
  if ((v13 & 1) != 0)
  {
    static ScrollGeometry.zero.getter();
    v15 = *((_QWORD *)&v118[0] + 1);
    v14 = *(_QWORD *)&v118[0];
    v17 = *((_QWORD *)&v118[1] + 1);
    v16 = *(_QWORD *)&v118[1];
    v19 = *((_QWORD *)&v118[2] + 1);
    v18 = *(_QWORD *)&v118[2];
    v21 = *((_QWORD *)&v118[3] + 1);
    v20 = *(_QWORD *)&v118[3];
    v23 = *((_QWORD *)&v118[4] + 1);
    v22 = *(_QWORD *)&v118[4];
    v24 = v119;
    v25 = v120;
    v26 = v121;
    v27 = v122;
  }
  v97 = v18;
  v98 = v19;
  v99 = v20;
  v100 = v21;
  v101 = v22;
  v102 = v23;
  v103 = v24;
  v104 = v25;
  v105 = v26;
  v109 = v27;
  v28 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
  v29 = static SemanticFeature.isEnabled.getter();
  v30 = 15.0;
  if ((v29 & 1) != 0)
    v30 = 16.0;
  *v12 = v30;
  outlined init with take of SwipeActions.Value?((uint64_t)v8, (uint64_t)v12 + v9[5], (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v31 = (char *)v12 + v9[6];
  *(_QWORD *)v31 = v14;
  *((_QWORD *)v31 + 1) = v15;
  *((_QWORD *)v31 + 2) = v16;
  *((_QWORD *)v31 + 3) = v17;
  v32 = v98;
  *((_QWORD *)v31 + 4) = v97;
  *((_QWORD *)v31 + 5) = v32;
  v33 = v100;
  *((_QWORD *)v31 + 6) = v99;
  *((_QWORD *)v31 + 7) = v33;
  v34 = v102;
  *((_QWORD *)v31 + 8) = v101;
  *((_QWORD *)v31 + 9) = v34;
  v35 = v104;
  *((_QWORD *)v31 + 10) = v103;
  *((_QWORD *)v31 + 11) = v35;
  v36 = v109;
  *((_QWORD *)v31 + 12) = v105;
  *((_QWORD *)v31 + 13) = v36;
  v31[112] = (v110 & 1) == 0;
  *(_DWORD *)((char *)v12 + v9[7]) = 0;
  type metadata accessor for External<BridgedListState>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<BridgedListState>, MEMORY[0x1E0CFED00]);
  v110 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for BridgedListState);
  v37 = *(_OWORD *)(a1 + 16);
  v118[0] = *(_OWORD *)a1;
  v118[1] = v37;
  v118[2] = *(_OWORD *)(a1 + 32);
  v38 = _GraphInputs.scrollPhaseState.getter();
  LODWORD(v105) = *MEMORY[0x1E0CFED28];
  if (v38 == (_DWORD)v105)
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    ScrollPhaseState.init(phase:velocity:)();
    v123[0] = v118[0];
    *(_OWORD *)&v123[8] = *(_OWORD *)((char *)v118 + 8);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>();
    v38 = Attribute.init<A>(body:value:flags:update:)();
  }
  LODWORD(v118[0]) = v110;
  swift_unknownObjectWeakInit();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateBridgedState and conformance UpdateBridgedState();
  v39 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateBridgedState((uint64_t)v118);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  v40 = swift_unknownObjectWeakInit();
  outlined init with take of ListScrollViewProvider(v40, (uint64_t)v118);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UIScrollView?();
  lazy protocol witness table accessor for type ListScrollViewProvider and conformance ListScrollViewProvider();
  v41 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v109) = v41;
  outlined destroy of ListScrollViewProvider((uint64_t)v118);
  v104 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  type metadata accessor for External<Scrollable>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<Scrollable>, MEMORY[0x1E0CFED00]);
  LODWORD(v103) = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v118[0]) = v107;
  BYTE4(v118[0]) = v106;
  *((_QWORD *)&v118[0] + 1) = __PAIR64__(v38, v39);
  LODWORD(v118[1]) = v41;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ListRepresentable);
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, &lazy cache variable for type metadata for MakeRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for MakeRepresentable);
  lazy protocol witness table accessor for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>(&lazy protocol witness table cache variable for type MakeRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance MakeRepresentable<A, B>, &lazy cache variable for type metadata for MakeRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for MakeRepresentable, (uint64_t)&protocol conformance descriptor for MakeRepresentable<A, B>);
  Attribute.init<A>(body:value:flags:update:)();
  v42 = *(_OWORD *)(a1 + 48);
  v118[2] = *(_OWORD *)(a1 + 32);
  v118[3] = v42;
  v118[4] = *(_OWORD *)(a1 + 64);
  LODWORD(v119) = *(_DWORD *)(a1 + 80);
  v43 = *(_OWORD *)(a1 + 16);
  v118[0] = *(_OWORD *)a1;
  v118[1] = v43;
  outlined retain of _ViewInputs(a1);
  _ViewInputs.scrollable.setter();
  _GraphInputs.scrollPhaseState.setter();
  PreferenceKeys.remove<A>(_:)();
  _GraphValue.init(_:)();
  *(_QWORD *)v123 = *(_QWORD *)&v118[0];
  *(_DWORD *)&v123[8] = DWORD2(v118[0]);
  *(_QWORD *)&v123[16] = *(_QWORD *)&v118[1];
  *(_OWORD *)&v123[24] = *(_OWORD *)((char *)&v118[1] + 8);
  *(_OWORD *)&v123[40] = *(_OWORD *)((char *)&v118[2] + 8);
  *(_OWORD *)&v123[56] = *(_OWORD *)((char *)&v118[3] + 8);
  *(_QWORD *)&v123[72] = *((_QWORD *)&v118[4] + 1);
  v124 = v119;
  static View.makeDebuggableView(view:inputs:)();
  v44 = AGCreateWeakAttribute();
  v45 = v44;
  v107 = HIDWORD(v44);
  v46 = AGCreateWeakAttribute();
  v47 = v46;
  v106 = HIDWORD(v46);
  v48 = AGCreateWeakAttribute();
  v49 = v48;
  v102 = HIDWORD(v48);
  *(_OWORD *)v123 = v115;
  _ViewOutputs.subscript.getter();
  v50 = AGCreateWeakAttribute();
  v51 = v50;
  v52 = HIDWORD(v50);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v53 = swift_allocObject();
  *(_DWORD *)(v53 + 16) = 0;
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, &lazy cache variable for type metadata for CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for CollectionViewListScrollable);
  *(_QWORD *)&v123[24] = v54;
  *(_QWORD *)&v123[32] = lazy protocol witness table accessor for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>(&lazy protocol witness table cache variable for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>, &lazy cache variable for type metadata for CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for CollectionViewListScrollable, (uint64_t)&protocol conformance descriptor for CollectionViewListScrollable<A, B>);
  v55 = swift_allocObject();
  *(_QWORD *)v123 = v55;
  v56 = v107;
  *(_DWORD *)(v55 + 16) = v45;
  *(_DWORD *)(v55 + 20) = v56;
  v57 = v106;
  *(_DWORD *)(v55 + 24) = v47;
  *(_DWORD *)(v55 + 28) = v57;
  v58 = v102;
  *(_DWORD *)(v55 + 32) = v49;
  *(_DWORD *)(v55 + 36) = v58;
  *(_DWORD *)(v55 + 40) = v51;
  *(_DWORD *)(v55 + 44) = v52;
  *(_QWORD *)(v55 + 48) = v53;
  AGGraphSetValue();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
  *(_QWORD *)v123 = v116;
  *(_DWORD *)&v123[8] = v117;
  v59 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(_QWORD *)v123 = v116;
  *(_DWORD *)&v123[8] = v117;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0 || (v59 & 1) != 0)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [Scrollable]();
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    v60 = Attribute.init<A>(body:value:flags:update:)();
    v123[0] = 0;
    _ViewOutputs.subscript.setter();
    if ((v59 & 1) != 0)
    {
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      v61 = Dictionary.init(minimumCapacity:)();
      v123[0] = 0;
      *(_DWORD *)&v123[4] = v60;
      *(_QWORD *)&v123[8] = v61;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      _GraphValue.init(_:)();
      v62 = v111;
      v63 = v115;
      *(_QWORD *)v123 = v116;
      *(_DWORD *)&v123[8] = v117;
      swift_bridgeObjectRetain();
      v64 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if ((v64 & 1) != 0)
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v62, (__int128 *)a1, v63, *((unint64_t *)&v63 + 1), 0);
      swift_bridgeObjectRelease();
      v123[0] = (v64 & 1) == 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(_DWORD *)v123 = v110;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryProvider and conformance ScrollGeometryProvider();
  Attribute.init<A>(body:value:flags:update:)();
  v65 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v65;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v66 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v66;
  _ViewInputs.position.getter();
  v67 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v67;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v68 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v68;
  _ViewInputs.transform.getter();
  ScrollGeometryTransformProvider.init(position:transform:)();
  v111 = *(_QWORD *)v123;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider();
  Attribute.init<A>(body:value:flags:update:)();
  v69 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v69;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v70 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v70;
  LOBYTE(v111) = 2;
  v114 = 0;
  _ViewInputs.intern<A>(_:id:)();
  ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)();
  v111 = *(_QWORD *)v123;
  LODWORD(v112) = *(_DWORD *)&v123[8];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  v71 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider();
  v72 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)v123 = v116;
  *(_DWORD *)&v123[8] = v117;
  MEMORY[0x1E0C80A78](v72, v73);
  *((_DWORD *)&v97 - 4) = v74;
  outlined retain of [Text.Modifier]((uint64_t)&v116);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v75 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v75;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v76 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v76;
  _ViewInputs.environment.getter();
  v77 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v77;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v78 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v78;
  _ViewInputs.size.getter();
  v79 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v79;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v80 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v80;
  _ViewInputs.position.getter();
  v81 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v81;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v82 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v82;
  _ViewInputs.transform.getter();
  v83 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v83;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v84 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v84;
  _ViewInputs.safeAreaInsets.getter();
  ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)();
  v111 = *(_QWORD *)v123;
  v112 = *(_OWORD *)&v123[8];
  v113 = *(_DWORD *)&v123[24];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  v85 = Attribute.init<A>(body:value:flags:update:)();
  v86 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v86;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v87 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v87;
  v88 = _ViewInputs.position.getter();
  v89 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v123[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v123[48] = v89;
  *(_OWORD *)&v123[64] = *(_OWORD *)(a1 + 64);
  v124 = *(_DWORD *)(a1 + 80);
  v90 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v123 = *(_OWORD *)a1;
  *(_OWORD *)&v123[16] = v90;
  v91 = _ViewInputs.size.getter();
  *(_DWORD *)v123 = v109;
  *(_DWORD *)&v123[4] = v88;
  *(_DWORD *)&v123[8] = v91;
  *(_DWORD *)&v123[12] = v85;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))v71);
  lazy protocol witness table accessor for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider();
  v92 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)v123 = v116;
  *(_DWORD *)&v123[8] = v117;
  MEMORY[0x1E0C80A78](v92, v93);
  *((_DWORD *)&v97 - 4) = v94;
  outlined retain of [Text.Modifier]((uint64_t)&v116);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v95 = v108;
  *v108 = v115;
  result = *((double *)&v115 + 1);
  v95[1] = *((_QWORD *)&v115 + 1);
  return result;
}

void specialized UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  _QWORD *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  int v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  BOOL v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE v67[12];
  _BOOL4 v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  int v81;
  _QWORD v82[21];
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[192];
  uint64_t v87;
  _BYTE v88[192];

  v81 = a4;
  v79 = a1;
  v80 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v67[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v67[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((*((_BYTE *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xC0)) & 1) == 0)
  {
    v74 = v6;
    v75 = &v67[-v21];
    v76 = v23;
    v77 = v22;
    v78 = v20;
    v71 = v11;
    v72 = v10;
    v73 = v7;
    v25 = *(unsigned __int8 *)(a2 + 168);
    outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)v82);
    v69 = v15;
    v70 = v12;
    v26 = a2;
    if (v25 == 1)
    {
      outlined destroy of TableDataSourceAdaptor((uint64_t)v82);
      v27 = 0;
    }
    else
    {
      v28 = v83;
      outlined destroy of TableDataSourceAdaptor((uint64_t)v82);
      v27 = v28 != 2;
    }
    v29 = (uint64_t)v4 + *(_QWORD *)((*v24 & *v4) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v29, (uint64_t)v82, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v82, (uint64_t)v86);
    v30 = v86[168];
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v86, (uint64_t)v88);
    if (v30 == 1)
    {
      outlined destroy of TableDataSourceAdaptor((uint64_t)v88);
      v31 = 0;
    }
    else
    {
      v32 = v88[169];
      outlined destroy of TableDataSourceAdaptor((uint64_t)v88);
      v31 = v32 != 2;
    }
    outlined destroy of TableDataSourceAdaptor((uint64_t)v86);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v82);
    v68 = v27;
    v33 = v27 ^ v31;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v29, (uint64_t)v88, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v88, (uint64_t)v82, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v82, (uint64_t)v86);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v88);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v86, (uint64_t)v82, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    v84 = 0;
    v85 = v87;
    outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v86);
    v34 = v4;
    specialized Sequence.first(where:)((uint64_t)v82, v34);
    v36 = v35;

    outlined destroy of TableRowList?((uint64_t)v82, (uint64_t)&lazy cache variable for type metadata for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t)lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t)MEMORY[0x1E0DEA200], (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
    v37 = outlined init with copy of TableDataSourceAdaptor(v26, (uint64_t)v86);
    if ((v36 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](v37, v38);
      *(_QWORD *)&v67[-16] = v86;
      specialized Sequence.first(where:)((uint64_t)partial apply for specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:), (uint64_t)&v67[-32], 0, v39);
      if ((v40 & 1) == 0)
        v33 = 1;
    }
    outlined destroy of TableDataSourceAdaptor((uint64_t)v86);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v29, (uint64_t)v82, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v82, (uint64_t)v88);
    v42 = v77;
    v41 = v78;
    v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v77 + 104);
    v44 = *MEMORY[0x1E0DC2890];
    v45 = *MEMORY[0x1E0DC2880];
    if (v88[168])
      v46 = v44;
    else
      v46 = v45;
    v47 = v75;
    v43(v75, v46, v78);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v88);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v82);
    if (*(_BYTE *)(v26 + 168))
      v48 = v44;
    else
      v48 = v45;
    v49 = v76;
    v43(v76, v48, v41);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC28A8], MEMORY[0x1E0DC28B8]);
    v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    v51 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v52 = v33;
    v51((uint64_t)v49, v41);
    v51((uint64_t)v47, v41);
    v53 = v79;
    specialized UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v79, v26, v80, v81 & 1);
    if ((v50 & 1) == 0 || v52)
    {
      v54 = objc_msgSend(v53, sel_collectionViewLayout);
      objc_msgSend(v54, sel_invalidateLayout);

      if (v52)
      {
        v55 = objc_msgSend(v53, sel_collectionViewLayout);
        objc_opt_self();
        v56 = (void *)swift_dynamicCastObjCClassUnconditional();
        v57 = v68;
        v58 = specialized UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(v68);
        objc_msgSend(v56, sel_setConfiguration_, v58);

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        v59 = (void *)static OS_dispatch_queue.main.getter();
        v60 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v61 = swift_allocObject();
        *(_QWORD *)(v61 + 16) = v60;
        *(_QWORD *)(v61 + 24) = v53;
        *(_BYTE *)(v61 + 32) = v57;
        v82[4] = partial apply for specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:);
        v82[5] = v61;
        v82[0] = MEMORY[0x1E0C809B0];
        v82[1] = 1107296256;
        v82[2] = thunk for @escaping @callee_guaranteed () -> ();
        v82[3] = &block_descriptor_64;
        v62 = _Block_copy(v82);
        v63 = v53;
        swift_release();
        v64 = v69;
        static DispatchQoS.unspecified.getter();
        v82[0] = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        type metadata accessor for [DispatchWorkItemFlags]();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
        v65 = v72;
        v66 = v74;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x18D75D930](0, v64, v65, v62);
        _Block_release(v62);

        (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v65, v66);
        (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v64, v71);
      }
    }
  }
}

uint64_t specialized Collection.index(atOffset:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 208);
  if (result < 0)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v1 + 208);
    while (1)
    {
      v4 = *(_QWORD *)(v1 + 208);
      if (v6 != v2)
      {
        v4 = v6 - 1;
        if (__OFSUB__(v6, 1))
          break;
      }
      --v5;
      v6 = v4;
      if (v5 <= result)
        return v4;
    }
    __break(1u);
    return v2;
  }
  if (!result)
    return v2;
  v3 = result - 1;
  v4 = *(_QWORD *)(v1 + 208);
  while ((v2 ^ 0x7FFFFFFFFFFFFFFFuLL) > v3)
  {
    ++v4;
    if (!--result)
      return v4;
  }
  __break(1u);
  return result;
}

uint64_t specialized ListCoreBatchUpdates.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v38 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v37 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v37 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v37 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v37 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v37 - v24;
  v26 = IndexSet.isEmpty.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v25, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if ((v26 & 1) == 0)
  {
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v25);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v21, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_9;
  }
  v27 = IndexSet.isEmpty.getter();
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v25);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v21, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if ((v27 & 1) == 0)
  {
LABEL_9:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v21);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v17, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_10;
  }
  v28 = *(_QWORD *)(*(_QWORD *)&v21[v3[10]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v21);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v17, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v28)
  {
LABEL_10:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v17);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v13, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_11;
  }
  v29 = *(_QWORD *)(*(_QWORD *)&v17[v3[11]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v17);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v13, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v29)
  {
LABEL_11:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v13);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v9, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_12;
  }
  v30 = *(_QWORD *)(*(_QWORD *)&v13[v3[12]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v9, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v30)
  {
LABEL_12:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v9);
    v35 = v1;
    v33 = v38;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v35, v38, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_13;
  }
  v31 = *(_QWORD *)(*(_QWORD *)&v9[v3[13]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v9);
  v32 = v1;
  v33 = v38;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v32, v38, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v31)
  {
LABEL_13:
    LOBYTE(v34) = 0;
    goto LABEL_14;
  }
  v34 = IndexSet.isEmpty.getter();
LABEL_14:
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>(v33);
  return v34 & 1;
}

uint64_t specialized ListBatchUpdates.formUpdates<A>(from:to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v11[176];
  _QWORD v12[24];

  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v7 + 16));
  }
  else
  {
    *v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v7 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3[3] + 16))
  {
    v8 = swift_isUniquelyReferenced_nonNull_native();
    v12[0] = v3[3];
    v3[3] = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<Int, (Int, CountingIndex<Int>)>();
    _NativeDictionary.removeAll(isUnique:)(v8);
    v3[3] = v12[0];
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3[4] + 16))
  {
    v9 = swift_isUniquelyReferenced_nonNull_native();
    v12[0] = v3[4];
    v3[4] = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>();
    _NativeDictionary.removeAll(isUnique:)(v9);
    v3[4] = v12[0];
    swift_bridgeObjectRelease();
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(a1, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)v11);
  specialized ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(v12, (uint64_t)v11);
  specialized ListBatchUpdates.computeMoves<A>(from:to:)();
  outlined destroy of CountingIndexListDataSource<TableDataSourceAdaptor>((uint64_t)v11);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>);
}

void specialized ListCoreBatchUpdates.formResult<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[11];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  v23[5] = *(_QWORD *)(v4 - 8);
  v23[6] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IndexPath();
  v23[9] = *(_QWORD *)(v8 - 8);
  v23[10] = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v23[4] = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v23[3] = (char *)v23 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v23 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v23[8] = (char *)v23 - v20;
  specialized ListCoreBatchUpdates.resetAll()();
  v21 = *a1;
  v27 = a1[3];
  v28 = v21;
  if (*(_QWORD *)(v21 + 16))
  {
    v22 = a1[1];
    v25 = a1[2];
    v26 = v22;
    v24 = a1[4];
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    outlined retain of [Text.Modifier]((uint64_t)&v27);
    outlined retain of [Text.Modifier]((uint64_t)&v28);
    outlined retain of [Text.Modifier]((uint64_t)&v26);
    v23[1] = v17;
    v23[2] = v7;
    v23[7] = v2;
    __asm { BR              X14 }
  }
}

void specialized ListCoreBatchUpdates.resetAll()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  int *v3;
  uint64_t *v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  size_t *v7;
  int v8;
  size_t v9;
  size_t *v10;
  int v11;
  size_t v12;
  size_t *v13;
  int v14;
  size_t v15;

  v1 = v0;
  IndexSet.removeAll()();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v3 = v2;
  IndexSet.removeAll()();
  v4 = (uint64_t *)(v0 + v3[10]);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v6 + 16));
  }
  else
  {
    *v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v6 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v7 = (size_t *)(v1 + v3[11]);
  v8 = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v7;
  if (v8)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
  }
  else
  {
    *v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v10 = (size_t *)(v1 + v3[12]);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v10;
  if (v11)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v12 + 16));
  }
  else
  {
    *v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v12 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v13 = (size_t *)(v1 + v3[13]);
  v14 = swift_isUniquelyReferenced_nonNull_native();
  v15 = *v13;
  if (v14)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v15 + 16));
  }
  else
  {
    *v13 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v15 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  IndexSet.removeAll()();
}

uint64_t specialized ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t updated;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void (*v96)();
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD v112[34];
  _BYTE v113[169];
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _BYTE v121[192];
  uint64_t v122;
  _QWORD v123[34];
  unint64_t v124;
  uint64_t v125;
  BOOL v126;
  __int128 v127;
  char v128;
  _QWORD v129[34];
  __int128 v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  BOOL v134;
  __int128 v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  BOOL v139;
  char v140;

  v3 = v2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, (uint64_t)v123, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  specialized ShadowSectionCollection.init(_:)(v123, (uint64_t)v129);
  v105 = a2;
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v129, v5, (void (*)(uint64_t *__return_ptr, _BYTE *))protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge, 0);
  swift_bridgeObjectRelease();
  result = outlined destroy of TableRowList?((uint64_t)v129, (uint64_t)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t)lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t)MEMORY[0x1E0CE59E8], (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
  v111 = v3;
  v7 = v3[1];
  v101 = *(_QWORD *)(v7 + 16);
  if (!v101)
    return result;
  v102 = v7 + 32;
  swift_bridgeObjectRetain();
  v8 = 0;
  result = (uint64_t)a1;
  v100 = v7;
LABEL_5:
  if (v8 < *(_QWORD *)(v7 + 16))
  {
    v103 = v8;
    v9 = (uint64_t *)(v102 + 96 * v8);
    v11 = *v9;
    v10 = v9[1];
    v12 = v9[2];
    v109 = v9[3];
    v104 = v9[4];
    v106 = v9[5];
    if (!*((_BYTE *)v9 + 89))
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(result, (uint64_t)v123, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(v123, (uint64_t)v121);
      v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8];
      outlined init with copy of CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>((uint64_t)v121, (uint64_t)v112, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8]);
      v112[25] = 0;
      v112[26] = 0;
      LOBYTE(v112[27]) = v122 == 0;
      v112[28] = v122;
      v112[29] = 0;
      LOBYTE(v112[30]) = 1;
      outlined destroy of TableRowList?((uint64_t)v121, (uint64_t)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t)lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
      outlined init with copy of CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>((uint64_t)v112, (uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, v23);
      v115 = v11;
      v116 = v10;
      v117 = v12 & 1;
      v118 = v109;
      v119 = v104;
      v120 = v106 & 1;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v112, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v113, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      v24 = v115;
      v25 = v116;
      v26 = v117;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      v123[31] = v24;
      v123[32] = v25;
      LOBYTE(v123[33]) = v26;
      result = (uint64_t)memcpy(v129, v123, 0x109uLL);
      v27 = v129[28];
      v28 = v129[29];
      v29 = LOBYTE(v129[30]);
      while (1)
      {
        v30 = v129[31];
        v31 = v129[32];
        v32 = LOBYTE(v129[33]);
        if (v129[31] == v27)
        {
          if ((v129[33] & 1) != 0)
          {
            if (v29)
              goto LABEL_117;
          }
          else
          {
            if (v129[32] == v28)
              v33 = v29;
            else
              v33 = 1;
            if ((v33 & 1) == 0)
            {
LABEL_117:
              v96 = type metadata accessor for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>;
              goto LABEL_120;
            }
          }
        }
        v34 = v129[31] + 1;
        if (__OFADD__(v129[31], 1))
          goto LABEL_124;
        if (v34 == v129[24])
        {
          v35 = 0;
        }
        else
        {
          if ((v129[33] & 1) != 0)
            goto LABEL_141;
          v35 = v129[32] + 1;
          if (__OFADD__(v129[32], 1))
            goto LABEL_126;
        }
        ++v129[31];
        v129[32] = v35;
        LOBYTE(v129[33]) = v34 == v129[24];
        v36 = *v111;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, (char *)v36);
          v36 = result;
        }
        v38 = *(_QWORD *)(v36 + 16);
        v37 = *(_QWORD *)(v36 + 24);
        if (v38 >= v37 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, (char *)v36);
          v36 = result;
        }
        *(_QWORD *)(v36 + 16) = v38 + 1;
        v39 = v36 + 96 * v38;
        *(_QWORD *)(v39 + 32) = v30;
        *(_QWORD *)(v39 + 40) = v31;
        *(_QWORD *)(v39 + 48) = v32;
        *(_OWORD *)(v39 + 56) = 0u;
        *(_OWORD *)(v39 + 72) = 0u;
        *(_OWORD *)(v39 + 88) = 0u;
        *(_OWORD *)(v39 + 104) = 0u;
        *(_WORD *)(v39 + 120) = 0;
        *v111 = v36;
      }
    }
    if (*((_BYTE *)v9 + 89) == 1)
    {
      v13 = v12 & 1;
      v14 = *(_QWORD *)(v105 + 40);
      result = swift_bridgeObjectRetain();
      while (1)
      {
        if (v109 == v11)
        {
          if (v13)
          {
            if ((v106 & 1) != 0)
              goto LABEL_3;
          }
          else if ((v106 & 1) == 0 && v10 == v104)
          {
LABEL_3:
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
        }
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
          break;
        v16 = *(_QWORD *)(v14 + 16);
        v17 = v15 == v16;
        if (v15 == v16)
        {
          v18 = 0;
        }
        else
        {
          if (v13)
            goto LABEL_140;
          v18 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_125;
        }
        v19 = *v111;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (char *)v19);
          v19 = result;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, (char *)v19);
          v19 = result;
        }
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v22 = v19 + 96 * v21;
        *(_QWORD *)(v22 + 32) = v11;
        *(_QWORD *)(v22 + 40) = v10;
        *(_QWORD *)(v22 + 48) = v13;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *(_WORD *)(v22 + 120) = 256;
        *v111 = v19;
        ++v11;
        v10 = v18;
        v13 = v17;
      }
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    v99 = *((_BYTE *)v9 + 88);
    v97 = *((_BYTE *)v9 + 64);
    v40 = v9[9];
    v98 = v9[10];
    v41 = v9[6];
    v42 = v9[7];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(result, (uint64_t)v112, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v112, (uint64_t)v121);
    v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8];
    outlined init with copy of CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>((uint64_t)v121, (uint64_t)v112, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8]);
    v112[25] = 0;
    v112[26] = 0;
    LOBYTE(v112[27]) = v122 == 0;
    v112[28] = v122;
    v112[29] = 0;
    LOBYTE(v112[30]) = 1;
    outlined destroy of TableRowList?((uint64_t)v121, (uint64_t)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t)lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
    outlined init with copy of CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>((uint64_t)v112, (uint64_t)v113, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, v43);
    v115 = v11;
    v116 = v10;
    v117 = v12 & 1;
    v118 = v109;
    v119 = v104;
    v120 = v106 & 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v112, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    v44 = *(_QWORD *)(v105 + 40);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v113, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    v123[31] = v44;
    v123[32] = protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge;
    v123[33] = 0;
    v124 = v41;
    v126 = v97 & 1;
    v125 = v42;
    *(_QWORD *)&v127 = v40;
    *((_QWORD *)&v127 + 1) = v98;
    v45 = v105;
    v128 = v99 & 1;
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v123, (uint64_t)v112, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    v46 = v123[25];
    v47 = v123[26];
    v48 = v123[27];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    v112[31] = v46;
    v112[32] = v47;
    LOBYTE(v112[33]) = v48;
    memcpy(v129, v112, 0x109uLL);
    v130 = *(_OWORD *)&v123[31];
    v131 = v123[33];
    v132 = v124;
    v134 = v126;
    v135 = v127;
    v136 = v128;
    v133 = v125;
    v137 = v124;
    v138 = v125;
    v139 = v126;
    v140 = 0;
    while (1)
    {
      v50 = v129[32];
      v51 = LOBYTE(v129[33]);
      v52 = v129[31];
      if (v129[31] == v129[28])
      {
        v53 = v129[30];
        if ((v129[33] & 1) != 0)
        {
          if (LOBYTE(v129[30]))
            goto LABEL_118;
        }
        else
        {
          if (v129[32] != v129[29])
            v53 = 1;
          if ((v53 & 1) == 0)
          {
LABEL_118:
            v140 = 1;
LABEL_119:
            v96 = type metadata accessor for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator;
LABEL_120:
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v129, (uint64_t (*)(_QWORD))v96);
LABEL_4:
            v8 = v103 + 1;
            v7 = v100;
            result = (uint64_t)a1;
            if (v103 + 1 == v101)
              return swift_bridgeObjectRelease();
            goto LABEL_5;
          }
        }
      }
      result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v129, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      v54 = v52 + 1;
      if (__OFADD__(v52, 1))
        goto LABEL_127;
      if (v54 == v123[24])
      {
        v55 = 0;
      }
      else
      {
        if ((v51 & 1) != 0)
          goto LABEL_142;
        v55 = v50 + 1;
        if (__OFADD__(v50, 1))
          goto LABEL_136;
      }
      v129[31] = v52 + 1;
      v129[32] = v55;
      LOBYTE(v129[33]) = v54 == v123[24];
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      v56 = v138;
      v57 = v139;
      v58 = v137;
      if (v137 == (_QWORD)v135)
      {
        v59 = v136;
        if (v139)
        {
          if ((v136 & 1) != 0)
            goto LABEL_118;
        }
        else
        {
          if (v138 != *((_QWORD *)&v135 + 1))
            v59 = 1;
          if ((v59 & 1) == 0)
            goto LABEL_118;
        }
      }
      v60 = v137 + 1;
      if (__OFADD__(v137, 1))
        goto LABEL_128;
      v61 = *(_QWORD *)(v130 + 16);
      if (v60 == v61)
      {
        v62 = 0;
      }
      else
      {
        if (v139)
          goto LABEL_143;
        v62 = v138 + 1;
        if (__OFADD__(v138, 1))
          goto LABEL_137;
      }
      ++v137;
      v138 = v62;
      v139 = v60 == v61;
      v110 = v50;
      v107 = v51;
      result = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)((uint64_t)a1, v52, v50, v51, v45, v58, v56, v57);
      v63 = *(_QWORD *)(result + 16);
      v64 = *v111;
      v65 = *(_QWORD *)(*v111 + 16);
      v66 = v65 + v63;
      if (__OFADD__(v65, v63))
        goto LABEL_129;
      v67 = result;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v66 <= *(_QWORD *)(v64 + 24) >> 1)
      {
        if (*(_QWORD *)(v67 + 16))
          goto LABEL_75;
      }
      else
      {
        if (v65 <= v66)
          v72 = v65 + v63;
        else
          v72 = v65;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v72, 1, (char *)v64);
        v64 = result;
        if (*(_QWORD *)(v67 + 16))
        {
LABEL_75:
          v68 = *(_QWORD *)(v64 + 16);
          if ((*(_QWORD *)(v64 + 24) >> 1) - v68 < v63)
            goto LABEL_135;
          result = (uint64_t)memcpy((void *)(v64 + 96 * v68 + 32), (const void *)(v67 + 32), 96 * v63);
          if (v63)
          {
            v69 = *(_QWORD *)(v64 + 16);
            v70 = __OFADD__(v69, v63);
            v71 = v69 + v63;
            if (v70)
              goto LABEL_138;
            *(_QWORD *)(v64 + 16) = v71;
          }
          goto LABEL_84;
        }
      }
      if (v63)
        goto LABEL_130;
LABEL_84:
      result = swift_bridgeObjectRelease();
      *v111 = v64;
      v75 = a1[22];
      v74 = a1[23];
      if (*(_QWORD *)(v74 + 16) || *(_QWORD *)(v75 + 16))
      {
        MEMORY[0x1E0C80A78](result, v73);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v74, v75);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        v77 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v52);
        result = swift_bridgeObjectRelease();
        if ((v77 & 0x8000000000000000) != 0)
          goto LABEL_131;
      }
      else
      {
        v77 = v52;
        if (v52 < 0)
          goto LABEL_131;
      }
      result = (uint64_t)a1;
      v78 = a1[5];
      if (v77 >= *(_QWORD *)(v78 + 16))
        goto LABEL_132;
      v79 = *(unsigned __int8 *)(v78 + 96 * v77 + 40);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)a1, (uint64_t)v123);
      if (v79 == 1)
      {
        result = outlined destroy of TableDataSourceAdaptor((uint64_t)v123);
        v80 = 1;
        v45 = v105;
      }
      else
      {
        outlined init with copy of TableDataSourceAdaptor((uint64_t)v123, (uint64_t)v112);
        v45 = v105;
        if (v77)
        {
          v80 = 0;
        }
        else
        {
          v81 = LOBYTE(v112[21]);
          outlined init with copy of TableDataSourceAdaptor((uint64_t)v112, (uint64_t)v113);
          if (v81 == 1)
          {
            outlined destroy of TableDataSourceAdaptor((uint64_t)v113);
            v80 = 0;
          }
          else
          {
            v82 = v114;
            outlined destroy of TableDataSourceAdaptor((uint64_t)v113);
            v80 = v82 != 2;
          }
        }
        outlined destroy of TableDataSourceAdaptor((uint64_t)v112);
        result = outlined destroy of TableDataSourceAdaptor((uint64_t)v123);
      }
      if ((v58 & 0x8000000000000000) != 0)
        goto LABEL_133;
      v83 = *(_QWORD *)(v45 + 40);
      if (v58 >= *(_QWORD *)(v83 + 16))
        goto LABEL_134;
      v84 = *(unsigned __int8 *)(v83 + 96 * v58 + 40);
      outlined init with copy of TableDataSourceAdaptor(v45, (uint64_t)v123);
      if (v84 == 1)
      {
        isUniquelyReferenced_nonNull_native = outlined destroy of TableDataSourceAdaptor((uint64_t)v123);
        if ((v80 & 1) == 0)
          goto LABEL_108;
        goto LABEL_113;
      }
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v123, (uint64_t)v112);
      if (v58)
        goto LABEL_106;
      v87 = LOBYTE(v112[21]);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v112, (uint64_t)v113);
      if (v87 == 1)
      {
        outlined destroy of TableDataSourceAdaptor((uint64_t)v113);
LABEL_106:
        v88 = 0;
        goto LABEL_107;
      }
      v95 = v114;
      outlined destroy of TableDataSourceAdaptor((uint64_t)v113);
      v88 = v95 != 2;
LABEL_107:
      outlined destroy of TableDataSourceAdaptor((uint64_t)v112);
      isUniquelyReferenced_nonNull_native = outlined destroy of TableDataSourceAdaptor((uint64_t)v123);
      if (v80 != v88)
      {
LABEL_108:
        v89 = *v111;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v89 + 16) + 1, 1, (char *)v89);
          v89 = isUniquelyReferenced_nonNull_native;
        }
        v91 = *(_QWORD *)(v89 + 16);
        v90 = *(_QWORD *)(v89 + 24);
        if (v91 >= v90 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, (char *)v89);
          v89 = isUniquelyReferenced_nonNull_native;
        }
        *(_QWORD *)(v89 + 16) = v91 + 1;
        v92 = v89 + 96 * v91;
        *(_QWORD *)(v92 + 32) = v52;
        *(_QWORD *)(v92 + 40) = v110;
        *(_QWORD *)(v92 + 48) = v107;
        *(_OWORD *)(v92 + 56) = 0u;
        *(_OWORD *)(v92 + 72) = 0u;
        *(_OWORD *)(v92 + 88) = 0u;
        *(_OWORD *)(v92 + 104) = 0u;
        *(_WORD *)(v92 + 120) = 1536;
        *v111 = v89;
      }
LABEL_113:
      v93 = a1[22];
      v94 = a1[23];
      if (*(_QWORD *)(v94 + 16) || *(_QWORD *)(v93 + 16))
      {
        MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v86);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        v49 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v94, v93);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v49, v52);
        v45 = v105;
        swift_bridgeObjectRelease();
      }
      if ((v140 & 1) != 0)
        goto LABEL_119;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
  return result;
}

uint64_t specialized ListBatchUpdates.computeMoves<A>(from:to:)()
{
  char **v0;
  char **v1;
  uint64_t v2;
  char *v3;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = *v0;
  if (*((_QWORD *)v3 + 2))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    *v1 = v3;
    if (*((_QWORD *)*v1 + 2))
      __asm { BR              X9 }
    __break(1u);
    __break(1u);
    __break(1u);
    JUMPOUT(0x18788F6F8);
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 0);
  return specialized Array.append<A>(contentsOf:)(v2);
}

void sub_18788F77C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x18788F7D4);
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t result;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;

  result = a3(a2 + 32, *(_QWORD *)(a2 + 16), a1 + 32, *(_QWORD *)(a1 + 16), *v3, 0x7FFFFFFFFFFFFFFFLL);
  if (!result)
  {
LABEL_95:
    __break(1u);
    return result;
  }
  v8 = v7;
  v68 = v3;
  v9 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)((char *)result);
  swift_bridgeObjectRelease();
  v10 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v8);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a2 + 16);
  result = swift_bridgeObjectRelease();
  v75 = v10;
  if (!(v11 | v12))
  {
    v19 = MEMORY[0x1E0DEE9D8];
    goto LABEL_84;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v66 = v10 + 32;
  v67 = v9 + 32;
  v19 = MEMORY[0x1E0DEE9D8];
  v70 = v9;
  v74 = v12;
LABEL_4:
  v20 = v13;
  v21 = v14;
  v76 = v17;
  v72 = &v66[16 * v18];
  v73 = v17;
  v71 = v18;
  while (2)
  {
    v69 = &v67[16 * v76];
    v22 = v20;
    while ((v17 & 0x8000000000000000) != 0 || v76 >= *((_QWORD *)v9 + 2) || *(_QWORD *)v69 != v15)
    {
      v23 = *((_QWORD *)v75 + 2);
      if (v18 < v23 && *(_QWORD *)v72 == v16)
      {
        v54 = *(_QWORD *)&v66[16 * v18 + 8];
        v55 = v54 - v16;
        if (__OFSUB__(v54, v16))
          goto LABEL_89;
        v56 = v12 - v21;
        if (v55 < 1)
        {
          if (v56 > 0)
            goto LABEL_72;
          v14 = v12;
          if (v55 >= v56)
            goto LABEL_72;
        }
        else if (v56 < 0 || (v14 = v12, v56 >= (unint64_t)v55))
        {
LABEL_72:
          v14 = v21 + v55;
          if (__OFADD__(v21, v55))
            goto LABEL_93;
        }
        if (v14 < v21)
          goto LABEL_90;
        v57 = v22;
        v58 = v16;
        v59 = v19;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v19 = v59;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, (char *)v59);
          v19 = result;
        }
        v61 = *(_QWORD *)(v19 + 16);
        v60 = *(_QWORD *)(v19 + 24);
        v62 = v61 + 1;
        if (v61 >= v60 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, (char *)v19);
          v62 = v61 + 1;
          v13 = v57;
          v63 = v58;
          v19 = result;
        }
        else
        {
          v63 = v58;
          v13 = v57;
        }
        *(_QWORD *)(v19 + 16) = v62;
        v64 = v19 + 40 * v61;
        *(_QWORD *)(v64 + 32) = v21;
        *(_QWORD *)(v64 + 40) = v14;
        *(_QWORD *)(v64 + 48) = 0;
        *(_QWORD *)(v64 + 56) = 0;
        *(_BYTE *)(v64 + 64) = 1;
        ++v18;
        v16 = v55 + v63;
        v17 = v76;
        v12 = v74;
        if (v15 < v11)
          goto LABEL_4;
        v17 = v76;
        if (v16 < v74)
          goto LABEL_4;
        goto LABEL_84;
      }
      v24 = v11;
      if ((v17 & 0x8000000000000000) == 0)
      {
        v24 = v11;
        if (v76 < *((_QWORD *)v9 + 2))
          v24 = *(_QWORD *)v69;
      }
      v25 = v12;
      if (v18 < v23)
        v25 = *(_QWORD *)v72;
      if (v25 - v16 >= v24 - v15)
        v26 = v24 - v15;
      else
        v26 = v25 - v16;
      v27 = v11 - v22;
      if (v26 < 1)
      {
        if (v27 <= 0 && v26 < v27)
        {
          if (v11 < v22)
            goto LABEL_85;
          v28 = v12 - v21;
          v29 = v11;
LABEL_34:
          if (v28 <= 0)
          {
            v30 = v12;
            if (v26 < v28)
              goto LABEL_37;
          }
          goto LABEL_36;
        }
      }
      else if ((v27 & 0x8000000000000000) == 0 && v27 < (unint64_t)v26)
      {
        if (v11 < v22)
          goto LABEL_85;
        v28 = v12 - v21;
        v29 = v11;
        goto LABEL_31;
      }
      v29 = v22 + v26;
      if (__OFADD__(v22, v26))
        goto LABEL_87;
      if (v29 < v22)
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      v28 = v12 - v21;
      if (v26 < 1)
        goto LABEL_34;
LABEL_31:
      if ((v28 & 0x8000000000000000) == 0)
      {
        v30 = v12;
        if (v28 < (unint64_t)v26)
          goto LABEL_37;
      }
LABEL_36:
      v30 = v21 + v26;
      if (__OFADD__(v21, v26))
        goto LABEL_88;
LABEL_37:
      if (v30 < v21)
        goto LABEL_86;
      v31 = v21;
      v32 = v22;
      v33 = v11;
      v34 = v15;
      v35 = v16;
      v36 = v19;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v19 = v36;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, (char *)v36);
        v19 = result;
      }
      v38 = *(_QWORD *)(v19 + 16);
      v37 = *(_QWORD *)(v19 + 24);
      if (v38 >= v37 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, (char *)v19);
        v40 = v32;
        v39 = v35;
        v19 = result;
      }
      else
      {
        v39 = v35;
        v40 = v32;
      }
      *(_QWORD *)(v19 + 16) = v38 + 1;
      v41 = v19 + 40 * v38;
      *(_QWORD *)(v41 + 32) = v40;
      *(_QWORD *)(v41 + 40) = v29;
      v15 = v26 + v34;
      *(_QWORD *)(v41 + 48) = v31;
      *(_QWORD *)(v41 + 56) = v30;
      *(_BYTE *)(v41 + 64) = 2;
      v16 = v26 + v39;
      v22 = v29;
      v21 = v30;
      v11 = v33;
      v42 = v15 < v33;
      v9 = v70;
      v18 = v71;
      v17 = v73;
      v12 = v74;
      if (!v42)
      {
        v22 = v29;
        v21 = v30;
        if (v16 >= v74)
          goto LABEL_84;
      }
    }
    v43 = *(_QWORD *)&v67[16 * v76 + 8];
    v44 = v43 - v15;
    if (__OFSUB__(v43, v15))
      goto LABEL_91;
    v45 = v11 - v22;
    if (v44 < 1)
    {
      if (v45 > 0)
        goto LABEL_54;
      v20 = v11;
      if (v44 >= v45)
        goto LABEL_54;
    }
    else if (v45 < 0 || (v20 = v11, v45 >= (unint64_t)v44))
    {
LABEL_54:
      v20 = v22 + v44;
      if (__OFADD__(v22, v44))
        goto LABEL_94;
    }
    if (v20 < v22)
      goto LABEL_92;
    v46 = v16;
    v47 = v22;
    v48 = v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v19 = v48;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1, (char *)v48);
      v19 = result;
    }
    v50 = *(_QWORD *)(v19 + 16);
    v49 = *(_QWORD *)(v19 + 24);
    v51 = v50 + 1;
    if (v50 >= v49 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, (char *)v19);
      v51 = v50 + 1;
      v52 = v47;
      v16 = v46;
      v19 = result;
    }
    else
    {
      v16 = v46;
      v52 = v47;
    }
    v17 = v73;
    v12 = v74;
    *(_QWORD *)(v19 + 16) = v51;
    v53 = v19 + 40 * v50;
    *(_QWORD *)(v53 + 32) = v52;
    *(_QWORD *)(v53 + 40) = v20;
    ++v76;
    v15 += v44;
    *(_QWORD *)(v53 + 48) = 0;
    *(_QWORD *)(v53 + 56) = 0;
    *(_BYTE *)(v53 + 64) = 0;
    if (v15 < v11 || v16 < v74)
      continue;
    break;
  }
LABEL_84:
  v65 = v19;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v68 = v65;
  return result;
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  _BOOL4 v90;
  int v91;
  _BOOL8 v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  char v99;
  BOOL v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL4 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _BOOL8 v122;
  BOOL v123;
  char *v124;
  char *v125;
  uint64_t *v126;
  char *v127;
  char v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[4];

  v11 = *v5;
  v12 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  v13 = v12 + 32;
  v14 = *(_QWORD *)(v12 + 16);
  a3 &= 1u;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a2, a3);
  v15 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3, a4, a5);
  outlined consume of ResolvedTableRowIDs.Storage((uint64_t)a2, a3);
  v16 = (char *)specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(v15 + 32, *(_QWORD *)(v15 + 16), v13, v14, v11, 0x7FFFFFFFFFFFFFFFLL);
  v18 = v17;
  swift_release();
  result = swift_release();
  if (!v16)
  {
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
    return result;
  }
  v138 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v16);
  swift_bridgeObjectRelease();
  v137 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v18);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a1 + 232);
  result = specialized ShadowRowCollection.endIndex.getter();
  v136 = a4 + a5;
  if (__OFADD__(a4, a5))
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  v21 = a5;
  v22 = *(_QWORD *)(a1 + 208);
  v139 = (_QWORD *)a1;
  v23 = specialized ShadowRowCollection.endIndex.getter();
  result = swift_bridgeObjectRelease();
  v134 = v20;
  if (v20 <= 0 && v21 < 1)
  {
    v145 = MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  v148 = 0;
  v150 = 0;
  v24 = 0;
  v25 = 0;
  v135 = 0;
  v144 = 0;
  v26 = v136 == a4;
  v27 = v22 == v23;
  v124 = v137 + 32;
  v125 = v138 + 32;
  v145 = MEMORY[0x1E0DEE9D8];
  v133 = a4;
  v151 = a4;
  v28 = 0;
  v29 = v22;
  v30 = v22;
  LOBYTE(v31) = v27;
  v32 = v134;
  v130 = v22;
  v131 = v21;
LABEL_8:
  v146 = v26;
  v34 = v150;
  v33 = v151;
  v132 = (uint64_t *)&v124[16 * v144];
  while (2)
  {
    while (2)
    {
      v127 = &v125[16 * v135];
      v35 = v27;
      while (1)
      {
        v142 = v25;
        v143 = v28;
        if ((v135 & 0x8000000000000000) == 0 && v135 < *((_QWORD *)v138 + 2) && *(_QWORD *)v127 == v28)
          break;
        v36 = *((_QWORD *)v137 + 2);
        v140 = v35;
        if (v144 < v36 && *v132 == v25)
        {
          v106 = *(_QWORD *)&v124[16 * v144 + 8];
          v107 = v106 - v25;
          if (__OFSUB__(v106, v25))
            goto LABEL_203;
          if (v136 < v133)
            goto LABEL_204;
          if (v33 < v133)
            goto LABEL_204;
          v108 = v136 - v33;
          if (v136 < v33)
            goto LABEL_204;
          if (__OFSUB__(v136, v33))
            goto LABEL_205;
          if (v107 < 1)
          {
            if (v108 <= 0 && v107 < v108)
              goto LABEL_163;
LABEL_164:
            v111 = v33 + v107;
            if (__OFADD__(v33, v107))
              goto LABEL_210;
            if (v111 < v133 || v136 < v111)
              goto LABEL_211;
            if (v111 == v136)
            {
              v150 = 0;
            }
            else
            {
              if (v26)
                goto LABEL_217;
              v150 = v34 + v107;
              if (__OFADD__(v34, v107))
                goto LABEL_212;
            }
            v110 = 0;
            v109 = v111 == v136;
            LOBYTE(v152[0]) = v111 == v136;
          }
          else
          {
            if (v108 < 0 || v108 >= (unint64_t)v107)
              goto LABEL_164;
LABEL_163:
            v109 = 0;
            v150 = 0;
            v110 = 1;
            v111 = v136;
          }
          v112 = v110 | v109;
          v151 = v111;
          v147 = v107;
          v123 = v26;
          if (v111 == v33)
          {
            v113 = v33;
            v114 = v24;
            v115 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v26)
              v115 = v34;
            v116 = v112;
            if (v150 >= v115)
              v117 = 1;
            else
              v117 = v112;
            if (v117 != 1)
              goto LABEL_206;
          }
          else
          {
            v116 = v110 | v109;
            v113 = v33;
            v114 = v24;
            if (v111 < v33)
              goto LABEL_206;
          }
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v145 + 16) + 1, 1, (char *)v145);
            v145 = result;
          }
          v119 = *(_QWORD *)(v145 + 16);
          v118 = *(_QWORD *)(v145 + 24);
          v120 = v142;
          v24 = v114;
          v26 = v116;
          if (v119 >= v118 >> 1)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v118 > 1), v119 + 1, 1, (char *)v145);
            v26 = v116;
            v24 = v114;
            v120 = v142;
            v145 = result;
          }
          *(_QWORD *)(v145 + 16) = v119 + 1;
          v121 = v145 + 96 * v119;
          *(_QWORD *)(v121 + 32) = v113;
          *(_QWORD *)(v121 + 40) = v34;
          *(_QWORD *)(v121 + 48) = v123;
          *(_QWORD *)(v121 + 56) = v151;
          *(_QWORD *)(v121 + 64) = v150;
          *(_QWORD *)(v121 + 72) = v26;
          *(_OWORD *)(v121 + 80) = 0u;
          *(_OWORD *)(v121 + 96) = 0u;
          *(_OWORD *)(v121 + 105) = 0u;
          *(_BYTE *)(v121 + 121) = 1;
          ++v144;
          v25 = v147 + v120;
          v32 = v134;
          v21 = v131;
          v27 = v140;
          if (v28 < v134 || v25 < v131)
            goto LABEL_8;
          goto LABEL_6;
        }
        v37 = v32;
        if ((v135 & 0x8000000000000000) == 0)
        {
          v37 = v32;
          if (v135 < *((_QWORD *)v138 + 2))
            v37 = *(_QWORD *)v127;
        }
        v38 = v21;
        if (v144 < v36)
          v38 = *v132;
        if (v38 - v25 >= v37 - v28)
          v39 = v37 - v28;
        else
          v39 = v38 - v25;
        v40 = v139[27];
        v41 = v22 + v40;
        if (__OFADD__(v22, v40))
        {
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
          goto LABEL_200;
        }
        v42 = v139[28];
        v43 = v139[22];
        v44 = v139[23];
        v45 = *(_QWORD *)(v44 + 16);
        if (v45 || (v45 = v41, *(_QWORD *)(v43 + 16)))
        {
          result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v139[23], v139[22], v139[28], v41, v45);
          v45 = v152[0];
        }
        if (v39 < 0)
        {
          v49 = 0;
          v50 = v29;
          while (v50 != v45)
          {
            v30 = v22;
            if (v50 != v22)
            {
              v30 = v50 - 1;
              if (__OFSUB__(v50, 1))
              {
LABEL_189:
                __break(1u);
                goto LABEL_190;
              }
            }
            --v49;
            v50 = v30;
            if (v39 >= v49)
              goto LABEL_48;
          }
          goto LABEL_46;
        }
        if (v39)
        {
          v46 = v39 - 1;
          if (v45 - v29 >= (v29 ^ 0x7FFFFFFFFFFFFFFFuLL))
            v47 = v29 ^ 0x7FFFFFFFFFFFFFFFLL;
          else
            v47 = v45 - v29;
          if (v46 >= v47)
            v46 = v47;
          v48 = v39;
          v30 = v29;
          while (v45 - v29 != v46)
          {
            if ((v29 ^ 0x7FFFFFFFFFFFFFFFLL) == v46)
            {
              __break(1u);
              goto LABEL_189;
            }
            ++v30;
            if (!--v48)
              goto LABEL_48;
          }
LABEL_46:
          v51 = 0;
          v52 = 0;
          v53 = 1;
          v30 = v45;
          v54 = v136;
          goto LABEL_56;
        }
        v30 = v29;
LABEL_48:
        v55 = *(_QWORD *)(v44 + 16);
        if (v55 || (v55 = *(_QWORD *)(v43 + 16)) != 0)
        {
          result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v44, v43, v42, v41, v55);
          v41 = v152[0];
        }
        v54 = v136;
        if (v30 == v41)
        {
          v52 = 0;
        }
        else
        {
          if ((v35 & 1) != 0)
            goto LABEL_214;
          v52 = v148 + v39;
          if (__OFADD__(v148, v39))
            goto LABEL_198;
        }
        v53 = 0;
        v51 = v30 == v41;
        LOBYTE(v152[0]) = v30 == v41;
LABEL_56:
        v56 = v53 | v51;
        if (v30 == v29)
        {
          v57 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v35 & 1) == 0)
            v57 = v148;
          if (v52 >= v57)
            v58 = 1;
          else
            v58 = v53 | v51;
          v59 = v151;
          if (v58 != 1)
            goto LABEL_191;
        }
        else
        {
          v59 = v151;
          if (v30 < v29)
            goto LABEL_191;
        }
        if (v59 < v133)
          goto LABEL_192;
        v60 = v54 - v59;
        if (v54 < v59)
          goto LABEL_193;
        if (__OFSUB__(v54, v59))
          goto LABEL_194;
        if (v39 < 1)
        {
          if (v60 <= 0 && v39 < v60)
          {
LABEL_74:
            v61 = v29;
            v62 = 0;
            v63 = 0;
            v64 = 1;
            v65 = v54;
            goto LABEL_83;
          }
        }
        else if ((v60 & 0x8000000000000000) == 0 && v60 < v39)
        {
          goto LABEL_74;
        }
        v65 = v59 + v39;
        if (__OFADD__(v59, v39))
          goto LABEL_196;
        if (v65 < v133 || v54 < v65)
          goto LABEL_197;
        if (v65 == v54)
        {
          v61 = v29;
          v63 = 0;
        }
        else
        {
          if (v146)
            goto LABEL_215;
          v61 = v29;
          v63 = v150 + v39;
          if (__OFADD__(v150, v39))
            goto LABEL_199;
        }
        v64 = 0;
        v62 = v65 == v54;
        LOBYTE(v152[0]) = v65 == v54;
LABEL_83:
        v66 = v64 | v62;
        if (v65 == v59)
        {
          v67 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v146)
            v67 = v150;
          if (v63 >= v67)
            v68 = 1;
          else
            v68 = v66;
          if (v68 != 1)
            goto LABEL_195;
        }
        else if (v65 < v59)
        {
          goto LABEL_195;
        }
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v145 + 16) + 1, 1, (char *)v145);
          v145 = result;
        }
        v70 = *(_QWORD *)(v145 + 16);
        v69 = *(_QWORD *)(v145 + 24);
        v71 = v142;
        if (v70 >= v69 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, (char *)v145);
          v26 = v66;
          v33 = v65;
          v24 = v52;
          v71 = v142;
          v145 = result;
        }
        else
        {
          v24 = v52;
          v33 = v65;
          v26 = v66;
        }
        v22 = v130;
        *(_QWORD *)(v145 + 16) = v70 + 1;
        v72 = v145 + 96 * v70;
        *(_QWORD *)(v72 + 32) = v61;
        *(_QWORD *)(v72 + 40) = v148;
        *(_QWORD *)(v72 + 48) = v140 & 1;
        *(_QWORD *)(v72 + 56) = v30;
        *(_QWORD *)(v72 + 64) = v24;
        *(_QWORD *)(v72 + 72) = v56;
        v31 = v56;
        *(_QWORD *)(v72 + 80) = v151;
        *(_QWORD *)(v72 + 88) = v150;
        v28 = v39 + v143;
        *(_QWORD *)(v72 + 96) = v146;
        *(_QWORD *)(v72 + 104) = v33;
        v34 = v63;
        *(_QWORD *)(v72 + 112) = v63;
        v25 = v39 + v71;
        v150 = v63;
        v151 = v33;
        v146 = v26;
        v148 = v24;
        v29 = v30;
        *(_BYTE *)(v72 + 120) = v26;
        v35 = v31;
        *(_BYTE *)(v72 + 121) = 2;
        v32 = v134;
        v21 = v131;
        if (v39 + v143 >= v134)
        {
          v150 = v34;
          v151 = v33;
          v146 = v26;
          v148 = v24;
          v29 = v30;
          v35 = v31;
          if (v25 >= v131)
            goto LABEL_6;
        }
      }
      v73 = *(_QWORD *)&v125[16 * v135 + 8];
      v74 = v73 - v28;
      if (__OFSUB__(v73, v28))
        goto LABEL_207;
      v149 = *(_QWORD *)&v125[16 * v135 + 8];
      v75 = v139[27];
      v76 = v22 + v75;
      if (__OFADD__(v22, v75))
        goto LABEL_208;
      v77 = v139[28];
      v79 = v139[22];
      v78 = v139[23];
      v80 = *(_QWORD *)(v78 + 16);
      v141 = v74;
      if (v80 || (v80 = v76, *(_QWORD *)(v79 + 16)))
      {
        v81 = v139[23];
        v82 = v139[22];
        v83 = v139[28];
        v128 = v31;
        v31 = v24;
        v84 = v33;
        v122 = v26;
        result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v78, v79, v77, v76, v80);
        v79 = v82;
        v78 = v81;
        v77 = v83;
        v26 = v122;
        v33 = v84;
        v24 = v31;
        LOBYTE(v31) = v128;
        v74 = v141;
        v80 = v152[0];
      }
      if (v74 < 0)
      {
        v88 = 0;
        v89 = v30;
        v22 = v130;
        while (v89 != v80)
        {
          v29 = v130;
          if (v89 != v130)
          {
            v29 = v89 - 1;
            if (__OFSUB__(v89, 1))
              goto LABEL_202;
          }
          --v88;
          v89 = v29;
          if (v74 >= v88)
            goto LABEL_126;
        }
LABEL_124:
        v90 = 0;
        v148 = 0;
        v91 = 1;
        v29 = v80;
      }
      else
      {
        if (v74)
        {
          v85 = v149 + ~v143;
          if (v80 - v30 >= (v30 ^ 0x7FFFFFFFFFFFFFFFuLL))
            v86 = v30 ^ 0x7FFFFFFFFFFFFFFFLL;
          else
            v86 = v80 - v30;
          if (v85 >= v86)
            v85 = v86;
          v87 = v74;
          v29 = v30;
          v22 = v130;
          while (v80 - v30 != v85)
          {
            if ((v30 ^ 0x7FFFFFFFFFFFFFFFLL) == v85)
              goto LABEL_201;
            ++v29;
            if (!--v87)
              goto LABEL_126;
          }
          goto LABEL_124;
        }
        v29 = v30;
LABEL_126:
        v92 = v26;
        v93 = v33;
        v94 = *(_QWORD *)(v78 + 16);
        if (v94 || (v94 = *(_QWORD *)(v79 + 16)) != 0)
        {
          v95 = v76;
          v96 = v24;
          result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v78, v79, v77, v95, v94);
          v24 = v96;
          v76 = v152[0];
        }
        if (v29 == v76)
        {
          v148 = 0;
          v33 = v93;
          v22 = v130;
          v26 = v92;
        }
        else
        {
          if ((v31 & 1) != 0)
            goto LABEL_218;
          v148 = v24 + v74;
          if (__OFADD__(v24, v74))
            goto LABEL_213;
          v33 = v93;
          v26 = v92;
          v22 = v130;
        }
        v91 = 0;
        v90 = v29 == v76;
        LOBYTE(v152[0]) = v29 == v76;
      }
      v129 = v34;
      v27 = v91 | v90;
      v97 = v26;
      v98 = v33;
      if (v29 == v30)
      {
        v99 = v31;
        v100 = (v31 & 1) == 0;
        v101 = 0x7FFFFFFFFFFFFFFFLL;
        v31 = v24;
        if (v100)
          v101 = v24;
        if (v148 >= v101)
          v102 = 1;
        else
          v102 = v91 | v90;
        if (v102 != 1)
          goto LABEL_209;
      }
      else
      {
        v99 = v31;
        v31 = v24;
        if (v29 < v30)
          goto LABEL_209;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v145 + 16) + 1, 1, (char *)v145);
        v145 = result;
      }
      v104 = *(_QWORD *)(v145 + 16);
      v103 = *(_QWORD *)(v145 + 24);
      v25 = v142;
      v33 = v98;
      v26 = v97;
      if (v104 >= v103 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v103 > 1), v104 + 1, 1, (char *)v145);
        v26 = v97;
        v33 = v98;
        v22 = v130;
        v25 = v142;
        v145 = result;
      }
      *(_QWORD *)(v145 + 16) = v104 + 1;
      v105 = v145 + 96 * v104;
      *(_QWORD *)(v105 + 32) = v30;
      *(_QWORD *)(v105 + 40) = v31;
      *(_QWORD *)(v105 + 48) = v99 & 1;
      *(_QWORD *)(v105 + 56) = v29;
      *(_QWORD *)(v105 + 64) = v148;
      *(_QWORD *)(v105 + 72) = v27;
      v32 = v134;
      ++v135;
      v28 = v141 + v143;
      *(_OWORD *)(v105 + 80) = 0u;
      *(_OWORD *)(v105 + 96) = 0u;
      *(_OWORD *)(v105 + 106) = 0u;
      v30 = v29;
      LOBYTE(v31) = v27;
      v24 = v148;
      v21 = v131;
      v34 = v129;
      if (v141 + v143 < v134)
        continue;
      break;
    }
    v30 = v29;
    LOBYTE(v31) = v27;
    v24 = v148;
    if (v25 < v131)
      continue;
    break;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *v126 = v145;
  return result;
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _BYTE *), uint64_t a4)
{
  Swift::Int *v4;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  Swift::Int *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _BOOL8 v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v9 = *v4;
  v10 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  v11 = v10 + 32;
  v12 = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();
  v14 = (char *)specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(v13 + 4, v13[2], v11, v12, v9, 0x7FFFFFFFFFFFFFFFLL);
  v16 = v15;
  swift_release();
  result = swift_release();
  if (!v14)
    goto LABEL_195;
  v111 = v4;
  v121 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v14);
  swift_bridgeObjectRelease();
  v120 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v16);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a1 + 192);
  v19 = *(_QWORD *)(a2 + 16);
  result = swift_bridgeObjectRelease();
  v20 = v18 == 0;
  if (v18 <= 0 && !v19)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    goto LABEL_5;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v19 == 0;
  v110 = v121 + 32;
  v109 = v120 + 32;
  v21 = MEMORY[0x1E0DEE9D8];
  v34 = v18 == 0;
  v114 = v18;
  v115 = v19;
  while (2)
  {
    v35 = v33;
    v36 = v25;
    v37 = v33;
    v38 = v26;
    v116 = &v109[16 * v32];
    v118 = v32;
LABEL_8:
    v112 = (uint64_t *)&v110[16 * v31];
    v39 = v20;
    v119 = v31;
LABEL_9:
    v137 = v29;
    v138 = v25;
    if ((v31 & 0x8000000000000000) != 0 || v31 >= *((_QWORD *)v121 + 2) || *v112 != v29)
    {
      v40 = *((_QWORD *)v120 + 2);
      if (v32 < v40 && *(_QWORD *)v116 == v30)
      {
        v91 = *(_QWORD *)&v109[16 * v32 + 8];
        v92 = v91 - v30;
        if (__OFSUB__(v91, v30))
          goto LABEL_185;
        v93 = v19 - v36;
        if (__OFSUB__(v19, v36))
        {
LABEL_186:
          __break(1u);
          goto LABEL_187;
        }
        v127 = v92;
        if (v92 < 1)
        {
          if (v93 <= 0 && v92 < v93)
            goto LABEL_151;
LABEL_152:
          v97 = v36 + v92;
          if (__OFADD__(v36, v92))
            goto LABEL_190;
          if (v97 == v19)
          {
            v95 = 0;
          }
          else
          {
            if ((v37 & 1) != 0)
              goto LABEL_196;
            v95 = v38 + v92;
            if (__OFADD__(v38, v92))
              goto LABEL_191;
          }
          v96 = 0;
          v94 = v97 == v19;
        }
        else
        {
          if (v93 < 0 || v93 >= (unint64_t)v92)
            goto LABEL_152;
LABEL_151:
          v94 = 0;
          v95 = 0;
          v96 = 1;
          v97 = v19;
        }
        v117 = v39;
        v130 = v34;
        v124 = v23;
        v33 = v96 | v94;
        v139 = v97;
        v133 = v36;
        v136 = v38;
        if (v97 == v36)
        {
          v98 = v28;
          v99 = v30;
          v100 = v37;
          v101 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v37 & 1) == 0)
            v101 = v38;
          v102 = v95;
          if (v95 >= v101)
            v103 = 1;
          else
            v103 = v33;
          if (v103 != 1)
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
        }
        else
        {
          v100 = v37;
          v102 = v95;
          v98 = v28;
          v99 = v30;
          if (v97 < v36)
            goto LABEL_187;
        }
        v104 = v21;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v21 = v104;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v104 + 16) + 1, 1, (char *)v104);
          v21 = result;
        }
        v106 = *(_QWORD *)(v21 + 16);
        v105 = *(_QWORD *)(v21 + 24);
        v107 = v99;
        v28 = v98;
        v26 = v102;
        if (v106 >= v105 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v105 > 1), v106 + 1, 1, (char *)v21);
          v26 = v102;
          v28 = v98;
          v107 = v99;
          v21 = result;
        }
        *(_QWORD *)(v21 + 16) = v106 + 1;
        v108 = v21 + 96 * v106;
        *(_QWORD *)(v108 + 32) = v133;
        *(_QWORD *)(v108 + 40) = v136;
        v25 = v139;
        *(_QWORD *)(v108 + 48) = v100 & 1;
        *(_QWORD *)(v108 + 56) = v139;
        *(_QWORD *)(v108 + 64) = v26;
        *(_QWORD *)(v108 + 72) = v33;
        *(_OWORD *)(v108 + 80) = 0u;
        *(_OWORD *)(v108 + 96) = 0u;
        *(_OWORD *)(v108 + 105) = 0u;
        *(_BYTE *)(v108 + 121) = 1;
        v31 = v119;
        v32 = v118 + 1;
        v23 = v124;
        v30 = v127 + v107;
        v19 = v115;
        v20 = v117;
        v34 = v130;
        if (v29 >= v18 && v30 >= v115)
          goto LABEL_5;
        continue;
      }
      v41 = v18;
      if ((v31 & 0x8000000000000000) == 0)
      {
        v41 = v18;
        if (v31 < *((_QWORD *)v121 + 2))
          v41 = *v112;
      }
      v42 = v19;
      if (v32 < v40)
        v42 = *(_QWORD *)v116;
      if (v42 - v30 >= v41 - v29)
        v43 = v41 - v29;
      else
        v43 = v42 - v30;
      if ((v43 & 0x8000000000000000) == 0)
      {
        if (!v43)
        {
          v27 = v23;
LABEL_44:
          if (v27 == v18)
          {
            v48 = 0;
            v47 = 1;
            v27 = v18;
            goto LABEL_51;
          }
LABEL_48:
          if (!v39)
          {
            v48 = v24 + v43;
            if (!__OFADD__(v24, v43))
            {
              v47 = 0;
              goto LABEL_51;
            }
            goto LABEL_181;
          }
          goto LABEL_193;
        }
        v44 = v43 - 1;
        if (v18 - v23 >= (v23 ^ 0x7FFFFFFFFFFFFFFFuLL))
          v45 = v23 ^ 0x7FFFFFFFFFFFFFFFLL;
        else
          v45 = v18 - v23;
        if (v44 >= v45)
          v44 = v45;
        v46 = v43;
        v27 = v23;
        while (v18 - v23 != v44)
        {
          if ((v23 ^ 0x7FFFFFFFFFFFFFFFLL) == v44)
          {
            __break(1u);
            goto LABEL_176;
          }
          ++v27;
          if (!--v46)
            goto LABEL_44;
        }
LABEL_35:
        v47 = 0;
        v48 = 0;
        v49 = 1;
        v27 = v18;
        goto LABEL_52;
      }
      if (v18 == v23)
        goto LABEL_35;
      v50 = -1;
      v27 = v23;
      while (1)
      {
        if (v27)
        {
          v51 = __OFSUB__(v27--, 1);
          if (v51)
          {
LABEL_176:
            __break(1u);
            goto LABEL_177;
          }
          if (v43 >= v50)
            goto LABEL_44;
        }
        else
        {
          if (v43 >= v50)
          {
            v48 = 0;
            if (v18)
            {
              v27 = 0;
              goto LABEL_48;
            }
            v47 = 1;
            v27 = 0;
LABEL_51:
            v49 = 0;
LABEL_52:
            v52 = v49 | v47;
            if (v27 == v23)
            {
              v53 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v39)
                v53 = v24;
              if (v48 >= v53)
                v54 = 1;
              else
                v54 = v52;
              if (v54 != 1)
              {
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
                goto LABEL_186;
              }
            }
            else if (v27 < v23)
            {
              goto LABEL_177;
            }
            v55 = v19 - v25;
            if (__OFSUB__(v19, v25))
              goto LABEL_178;
            if (v43 <= 0)
            {
              if (v55 <= 0 && v43 < v55)
                goto LABEL_68;
LABEL_69:
              v59 = v25 + v43;
              if (__OFADD__(v25, v43))
                goto LABEL_180;
              if (v59 == v19)
              {
                v57 = 0;
              }
              else
              {
                if ((v35 & 1) != 0)
                  goto LABEL_194;
                v57 = v26 + v43;
                if (__OFADD__(v26, v43))
                  goto LABEL_182;
              }
              v58 = 0;
              v56 = v59 == v19;
              goto LABEL_75;
            }
            if (v55 < 0 || v55 >= v43)
              goto LABEL_69;
LABEL_68:
            v56 = 0;
            v57 = 0;
            v58 = 1;
            v59 = v19;
LABEL_75:
            v60 = v58 | v56;
            if (v59 == v25)
            {
              v61 = 0x7FFFFFFFFFFFFFFFLL;
              if ((v35 & 1) == 0)
                v61 = v26;
              if (v57 >= v61)
                v62 = 1;
              else
                v62 = v60;
              if (v62 != 1)
                goto LABEL_179;
            }
            else if (v59 < v25)
            {
              goto LABEL_179;
            }
            v125 = v60;
            v128 = v52;
            v131 = v59;
            v134 = v57;
            v63 = v48;
            v64 = v24;
            v65 = v23;
            v122 = v26;
            v66 = v30;
            v67 = v21;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              v21 = v67;
            }
            else
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v67 + 16) + 1, 1, (char *)v67);
              v21 = result;
            }
            v69 = *(_QWORD *)(v21 + 16);
            v68 = *(_QWORD *)(v21 + 24);
            if (v69 >= v68 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, (char *)v21);
              v28 = v63;
              v70 = v66;
              v21 = result;
            }
            else
            {
              v70 = v66;
              v28 = v63;
            }
            *(_QWORD *)(v21 + 16) = v69 + 1;
            v71 = v21 + 96 * v69;
            *(_QWORD *)(v71 + 32) = v65;
            *(_QWORD *)(v71 + 40) = v64;
            *(_QWORD *)(v71 + 48) = v39;
            *(_QWORD *)(v71 + 56) = v27;
            v34 = v128;
            v36 = v131;
            *(_QWORD *)(v71 + 64) = v28;
            *(_QWORD *)(v71 + 72) = v128;
            v37 = v125;
            *(_QWORD *)(v71 + 80) = v138;
            *(_QWORD *)(v71 + 88) = v122;
            v38 = v134;
            v29 += v43;
            *(_QWORD *)(v71 + 96) = v35 & 1;
            *(_QWORD *)(v71 + 104) = v131;
            *(_QWORD *)(v71 + 112) = v134;
            v30 = v43 + v70;
            v23 = v27;
            v39 = v128;
            v24 = v28;
            v25 = v131;
            *(_BYTE *)(v71 + 120) = v125;
            v35 = v125;
            v26 = v134;
            *(_BYTE *)(v71 + 121) = 2;
            v18 = v114;
            v19 = v115;
            v32 = v118;
            v31 = v119;
            if (v43 + v137 >= v114)
            {
              v23 = v27;
              v39 = v128;
              v24 = v28;
              v25 = v131;
              v35 = v125;
              v26 = v134;
              if (v30 >= v115)
              {
LABEL_5:
                v22 = v21;
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                *v111 = v22;
                return result;
              }
            }
            goto LABEL_9;
          }
          v27 = 0;
        }
        --v50;
        if (v27 == v18)
          goto LABEL_35;
      }
    }
    break;
  }
  v72 = *(_QWORD *)&v110[16 * v31 + 8];
  v73 = v72 - v29;
  if (__OFSUB__(v72, v29))
  {
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  if ((v73 & 0x8000000000000000) == 0)
  {
    if (!v73)
    {
      v77 = v27;
LABEL_117:
      if (v77 == v18)
      {
        v24 = 0;
        v78 = 1;
        v77 = v18;
        goto LABEL_124;
      }
LABEL_121:
      if (!v34)
      {
        v24 = v28 + v73;
        if (!__OFADD__(v28, v73))
        {
          v78 = 0;
          goto LABEL_124;
        }
        goto LABEL_192;
      }
      goto LABEL_197;
    }
    v74 = v72 + ~v29;
    if (v18 - v27 >= (v27 ^ 0x7FFFFFFFFFFFFFFFuLL))
      v75 = v27 ^ 0x7FFFFFFFFFFFFFFFLL;
    else
      v75 = v18 - v27;
    if (v74 >= v75)
      v74 = v75;
    v76 = v72 - v29;
    v77 = v27;
    while (v18 - v27 != v74)
    {
      if ((v27 ^ 0x7FFFFFFFFFFFFFFFLL) == v74)
        goto LABEL_183;
      ++v77;
      if (!--v76)
        goto LABEL_117;
    }
LABEL_108:
    v78 = 0;
    v24 = 0;
    v79 = 1;
    v77 = v18;
    goto LABEL_125;
  }
  if (v18 == v27)
    goto LABEL_108;
  v80 = -1;
  v77 = v27;
  while (v77)
  {
    v51 = __OFSUB__(v77--, 1);
    if (v51)
      goto LABEL_184;
    if (v73 >= v80)
      goto LABEL_117;
LABEL_113:
    --v80;
    if (v77 == v18)
      goto LABEL_108;
  }
  if (v73 < v80)
  {
    v77 = 0;
    goto LABEL_113;
  }
  v24 = 0;
  if (v18)
  {
    v77 = 0;
    goto LABEL_121;
  }
  v78 = 1;
  v77 = 0;
LABEL_124:
  v79 = 0;
LABEL_125:
  v126 = v37;
  v129 = v35;
  v132 = v36;
  v135 = v38;
  v20 = v79 | v78;
  v123 = v77;
  v113 = v73;
  v81 = v26;
  if (v77 != v27)
  {
    v83 = v34;
    v85 = v28;
    v82 = v30;
    if (v77 < v27)
      goto LABEL_189;
LABEL_134:
    v87 = v21;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v21 = v87;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v87 + 16) + 1, 1, (char *)v87);
      v21 = result;
    }
    v89 = *(_QWORD *)(v21 + 16);
    v88 = *(_QWORD *)(v21 + 24);
    v30 = v82;
    v26 = v81;
    if (v89 >= v88 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, (char *)v21);
      v26 = v81;
      v30 = v82;
      v21 = result;
    }
    *(_QWORD *)(v21 + 16) = v89 + 1;
    v90 = v21 + 96 * v89;
    *(_QWORD *)(v90 + 32) = v27;
    *(_QWORD *)(v90 + 40) = v85;
    v23 = v123;
    *(_QWORD *)(v90 + 48) = v83;
    *(_QWORD *)(v90 + 56) = v123;
    *(_QWORD *)(v90 + 64) = v24;
    *(_QWORD *)(v90 + 72) = v20;
    v32 = v118;
    v31 = v119 + 1;
    v38 = v135;
    v29 += v113;
    *(_OWORD *)(v90 + 80) = 0u;
    *(_OWORD *)(v90 + 96) = 0u;
    *(_OWORD *)(v90 + 106) = 0u;
    v27 = v123;
    v34 = v20;
    v28 = v24;
    v19 = v115;
    v25 = v138;
    v35 = v129;
    v36 = v132;
    v37 = v126;
    if (v113 + v137 >= v18)
    {
      v27 = v123;
      v34 = v20;
      v28 = v24;
      if (v30 >= v115)
        goto LABEL_5;
    }
    goto LABEL_8;
  }
  v82 = v30;
  v83 = v34;
  v84 = 0x7FFFFFFFFFFFFFFFLL;
  v85 = v28;
  if (!v34)
    v84 = v28;
  if (v24 >= v84)
    v86 = 1;
  else
    v86 = v20;
  if (v86 == 1)
    goto LABEL_134;
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  char v11;

  outlined init with copy of TableColumnCollection.Backing(v1, (uint64_t)v10);
  if ((v11 & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)&v10[0] + 16);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v10, (uint64_t)v7);
    v5 = v8;
    v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  if ((a1 & 0x8000000000000000) == 0 && v3 > a1)
    return a1 + 1;
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
  {
    v8 = 0;
    if (result >= 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
LABEL_6:
    if (v8 <= result)
      return ++result;
    goto LABEL_8;
  }
  v3 = a2 + 48 * v2;
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (!v6)
  {
    v8 = *(_QWORD *)(a2 + 72);
    if (v7 <= result)
      goto LABEL_8;
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, uint64_t, double)@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t (*a6)(char *)@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  _OWORD v31[2];
  char v32;
  _BYTE v33[40];

  v14 = type metadata accessor for TableColumnCollection.Entry(0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v31, a2, v16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v18, type metadata accessor for TableColumnCollection.Entry);
  if ((a4 & 1) != 0)
    goto LABEL_2;
  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_9;
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v31, (uint64_t)v33);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TableColumnCustomizationID.Base);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v31);
  if ((v20 & 1) == 0)
  {
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
LABEL_9:
    v22 = a6(v18);
LABEL_10:
    v23 = v22;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for TableColumnCollection.Entry);
    if (v23 != 2)
      goto LABEL_12;
LABEL_11:
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a7, 1, 1, v24);
    return outlined retain of TableColumnCustomizationID.Base((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
  }
  v21 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 56) + 16 * v19 + 9);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
  v22 = a6(v18);
  if (!v21)
    goto LABEL_10;
  if (v21 != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for TableColumnCollection.Entry);
    goto LABEL_11;
  }
LABEL_2:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for TableColumnCollection.Entry);
LABEL_12:
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  v27 = v26;
  v28 = (uint64_t)a7 + *(int *)(v26 + 48);
  v29 = (char *)a7 + *(int *)(v26 + 64);
  *a7 = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, v28, type metadata accessor for TableColumnCollection.Entry);
  v30 = v31[1];
  *(_OWORD *)v29 = v31[0];
  *((_OWORD *)v29 + 1) = v30;
  v29[32] = v32;
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a7, 0, 1, v27);
}

{
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v29;
  _OWORD v30[2];
  char v31;
  _BYTE v32[40];

  v14 = type metadata accessor for TableCellFormula();
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v30, a2, v16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
  if ((a4 & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
LABEL_7:
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
    v24 = v23;
    v25 = (uint64_t)a7 + *(int *)(v23 + 48);
    v26 = (char *)a7 + *(int *)(v23 + 64);
    *a7 = a1;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, v25, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
    v27 = v30[1];
    *(_OWORD *)v26 = v30[0];
    *((_OWORD *)v26 + 1) = v27;
    v26[32] = v31;
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a7, 0, 1, v24);
  }
  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_9;
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v30, (uint64_t)v32);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TableColumnCustomizationID.Base);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30);
  if ((v20 & 1) == 0)
  {
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
LABEL_9:
    v22 = a6(v18);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
LABEL_10:
    if (v22 != 2)
      goto LABEL_7;
    goto LABEL_11;
  }
  v21 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 56) + 16 * v19 + 9);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
  v22 = a6(v18);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
  if (!v21)
    goto LABEL_10;
  if (v21 == 1)
    goto LABEL_7;
LABEL_11:
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a7, 1, 1, v29);
  return outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TableColumnCustomizationID.Base);
}

uint64_t specialized closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  char *v55;
  _QWORD *v56;

  v53 = a3;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (_QWORD **)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v46 - v12;
  v15 = *(int *)(v14 + 48);
  v16 = *(int *)(v14 + 64);
  v17 = (char *)&v46 + v16 - v12;
  v18 = (char *)a1 + v16;
  v46 = a1;
  *(_QWORD **)((char *)&v46 - v12) = (_QWORD *)*a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1 + v15, (uint64_t)&v46 + v15 - v12, type metadata accessor for TableColumnCollection.Entry);
  v19 = *(_QWORD *)v18;
  v51 = *((_QWORD *)v18 + 1);
  v20 = v51;
  v52 = v19;
  v21 = *((_QWORD *)v18 + 2);
  v49 = *((_QWORD *)v18 + 3);
  v22 = v49;
  v50 = v21;
  v23 = v18[32];
  v48 = v23;
  *(_QWORD *)v17 = v19;
  *((_QWORD *)v17 + 1) = v20;
  *((_QWORD *)v17 + 2) = v21;
  *((_QWORD *)v17 + 3) = v22;
  v17[32] = v23;
  v24 = *(int *)(v6 + 48);
  v25 = *(int *)(v6 + 64);
  v26 = (char *)v9 + v25;
  v27 = (char *)a2 + v25;
  v47 = a2;
  *v9 = *a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a2 + v24, (uint64_t)v9 + v24, type metadata accessor for TableColumnCollection.Entry);
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  v30 = *((_QWORD *)v27 + 2);
  v31 = *((_QWORD *)v27 + 3);
  LOBYTE(v27) = v27[32];
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  *((_QWORD *)v26 + 2) = v30;
  *((_QWORD *)v26 + 3) = v31;
  v26[32] = (char)v27;
  v55 = v13;
  v56 = v9;
  outlined copy of TableColumnCustomizationID.Base(v52, v51, v50, v49, v48);
  v32 = (char)v27;
  v33 = v53;
  outlined copy of TableColumnCustomizationID.Base(v29, v28, v30, v31, v32);
  v34 = specialized Collection.firstIndex(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)v54, v33);
  LOBYTE(v31) = v35;
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  result = outlined destroy of UIBackgroundConfiguration?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  if ((v31 & 1) != 0)
    return *v46 < *v47;
  if ((v34 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v34 >= *(_QWORD *)(v33 + 16))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v37 = v33 + 40 * v34;
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_QWORD *)(v37 + 40);
  v40 = *(_QWORD *)v18;
  v41 = *((_QWORD *)v18 + 1);
  if ((*(_BYTE *)(v37 + 64) & 1) != 0)
  {
    if ((v18[32] & 1) != 0)
    {
      if ((v42 = *(_QWORD *)(v37 + 48),
            v43 = *(_QWORD *)(v37 + 56),
            v44 = *((_QWORD *)v18 + 2),
            v45 = *((_QWORD *)v18 + 3),
            v38 == v40)
        && v39 == v41
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v42 == v44 && v43 == v45)
          return 1;
LABEL_16:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
  }
  else if ((v18[32] & 1) == 0)
  {
    if (v38 == v40 && v39 == v41)
      return 1;
    goto LABEL_16;
  }
  return 0;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  char *v55;
  _QWORD *v56;

  v53 = a3;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (_QWORD **)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v46 - v12;
  v15 = *(int *)(v14 + 48);
  v16 = *(int *)(v14 + 64);
  v17 = (char *)&v46 + v16 - v12;
  v18 = (char *)a1 + v16;
  v46 = a1;
  *(_QWORD **)((char *)&v46 - v12) = (_QWORD *)*a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1 + v15, (uint64_t)&v46 + v15 - v12, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
  v19 = *(_QWORD *)v18;
  v51 = *((_QWORD *)v18 + 1);
  v20 = v51;
  v52 = v19;
  v21 = *((_QWORD *)v18 + 2);
  v49 = *((_QWORD *)v18 + 3);
  v22 = v49;
  v50 = v21;
  v23 = v18[32];
  v48 = v23;
  *(_QWORD *)v17 = v19;
  *((_QWORD *)v17 + 1) = v20;
  *((_QWORD *)v17 + 2) = v21;
  *((_QWORD *)v17 + 3) = v22;
  v17[32] = v23;
  v24 = *(int *)(v6 + 48);
  v25 = *(int *)(v6 + 64);
  v26 = (char *)v9 + v25;
  v27 = (char *)a2 + v25;
  v47 = a2;
  *v9 = *a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a2 + v24, (uint64_t)v9 + v24, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  v30 = *((_QWORD *)v27 + 2);
  v31 = *((_QWORD *)v27 + 3);
  LOBYTE(v27) = v27[32];
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  *((_QWORD *)v26 + 2) = v30;
  *((_QWORD *)v26 + 3) = v31;
  v26[32] = (char)v27;
  v55 = v13;
  v56 = v9;
  outlined copy of TableColumnCustomizationID.Base(v52, v51, v50, v49, v48);
  v32 = (char)v27;
  v33 = v53;
  outlined copy of TableColumnCustomizationID.Base(v29, v28, v30, v31, v32);
  v34 = specialized Collection.firstIndex(where:)((uint64_t (*)(_QWORD *))partial apply for specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)v54, v33);
  LOBYTE(v31) = v35;
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  result = outlined destroy of UIBackgroundConfiguration?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  if ((v31 & 1) != 0)
    return *v46 < *v47;
  if ((v34 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v34 >= *(_QWORD *)(v33 + 16))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v37 = v33 + 40 * v34;
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(_QWORD *)(v37 + 40);
  v40 = *(_QWORD *)v18;
  v41 = *((_QWORD *)v18 + 1);
  if ((*(_BYTE *)(v37 + 64) & 1) != 0)
  {
    if ((v18[32] & 1) != 0)
    {
      if ((v42 = *(_QWORD *)(v37 + 48),
            v43 = *(_QWORD *)(v37 + 56),
            v44 = *((_QWORD *)v18 + 2),
            v45 = *((_QWORD *)v18 + 3),
            v38 == v40)
        && v39 == v41
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v42 == v44 && v43 == v45)
          return 1;
LABEL_16:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
  }
  else if ((v18[32] & 1) == 0)
  {
    if (v38 == v40 && v39 == v41)
      return 1;
    goto LABEL_16;
  }
  return 0;
}

uint64_t specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _BYTE v41[40];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v41[-v9 - 8];
  v12 = (uint64_t *)(a2 + *(int *)(v11 + 64));
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v17 = *((unsigned __int8 *)v12 + 32);
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v41);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v41, (uint64_t)&v47);
  if ((v51 & 1) != 0)
  {
    if (!v17)
      goto LABEL_20;
    v19 = v49;
    v18 = v50;
    v20 = v47 == v13 && v14 == v48;
    if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_20;
    if (v19 == v15 && v16 == v18)
      goto LABEL_19;
  }
  else
  {
    if ((v17 & 1) != 0)
      goto LABEL_20;
    if (v47 == v13 && v14 == v48)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_19:
    v23 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v23 = 0;
LABEL_21:
  v24 = *(int *)(v7 + 48);
  v25 = *(int *)(v7 + 64);
  v26 = (char *)v10 + v25;
  v27 = (char *)a3 + v25;
  *v10 = *a3;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a3 + v24, (uint64_t)v10 + v24, type metadata accessor for TableColumnCollection.Entry);
  v28 = *(_QWORD *)v27;
  v29 = *((_QWORD *)v27 + 1);
  v30 = *((_QWORD *)v27 + 2);
  v31 = *((_QWORD *)v27 + 3);
  v32 = v27[32];
  *(_QWORD *)v26 = v28;
  *((_QWORD *)v26 + 1) = v29;
  *((_QWORD *)v26 + 2) = v30;
  *((_QWORD *)v26 + 3) = v31;
  v26[32] = v32;
  if ((v23 & 1) == 0)
  {
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v41, (uint64_t)&v42);
    if ((v46 & 1) != 0)
    {
      if (!v32)
        goto LABEL_41;
      v34 = v44;
      v35 = v45;
      v36 = v42 == v28 && v29 == v43;
      if (!v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_41;
      if (v34 == v30 && v31 == v35)
        goto LABEL_22;
    }
    else
    {
      if ((v32 & 1) != 0)
        goto LABEL_41;
      if (v42 == v28 && v29 == v43)
        goto LABEL_22;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_22;
LABEL_41:
    v33 = 0;
    goto LABEL_42;
  }
LABEL_22:
  v33 = 1;
LABEL_42:
  outlined copy of TableColumnCustomizationID.Base(v28, v29, v30, v31, v32);
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  return v33;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  _BYTE v42[40];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v42[-v9 - 8];
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v42);
  v11 = (uint64_t *)(a2 + *(int *)(v7 + 64));
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v16 = *((unsigned __int8 *)v11 + 32);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v42, (uint64_t)&v43);
  if ((v47 & 1) != 0)
  {
    if (!v16)
      goto LABEL_20;
    v17 = v45;
    v18 = v46;
    if (v43 != v12 || v13 != v44)
    {
      v20 = v45;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v17 = v20;
      if ((v21 & 1) == 0)
        goto LABEL_20;
    }
    if (v17 == v14 && v15 == v18)
      goto LABEL_19;
  }
  else
  {
    if ((v16 & 1) != 0)
      goto LABEL_20;
    if (v43 == v12 && v13 == v44)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_19:
    v24 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v24 = 0;
LABEL_21:
  v25 = *(int *)(v7 + 48);
  v26 = *(int *)(v7 + 64);
  v27 = (char *)v10 + v26;
  v28 = (char *)a3 + v26;
  *v10 = *a3;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a3 + v25, (uint64_t)v10 + v25, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
  v29 = *(_QWORD *)v28;
  v30 = *((_QWORD *)v28 + 1);
  v31 = *((_QWORD *)v28 + 2);
  v32 = *((_QWORD *)v28 + 3);
  v33 = v28[32];
  *(_QWORD *)v27 = v29;
  *((_QWORD *)v27 + 1) = v30;
  *((_QWORD *)v27 + 2) = v31;
  *((_QWORD *)v27 + 3) = v32;
  v27[32] = v33;
  if ((v24 & 1) == 0)
  {
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v42, (uint64_t)&v48);
    if ((v52 & 1) != 0)
    {
      if (!v33)
        goto LABEL_41;
      v35 = v50;
      v36 = v51;
      v37 = v48 == v29 && v30 == v49;
      if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_41;
      if (v35 == v31 && v32 == v36)
        goto LABEL_22;
    }
    else
    {
      if ((v33 & 1) != 0)
        goto LABEL_41;
      if (v48 == v29 && v30 == v49)
        goto LABEL_22;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_22;
LABEL_41:
    v34 = 0;
    goto LABEL_42;
  }
LABEL_22:
  v34 = 1;
LABEL_42:
  outlined copy of TableColumnCustomizationID.Base(v29, v30, v31, v32, v33);
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  return v34;
}

void specialized UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(id a1, char a2, unint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  double MinX;
  double v6;
  double v7;
  _QWORD *v8;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  Class isa;
  _QWORD *v25;
  _QWORD *v26;
  id v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  id v36;
  double v37;
  double v38;
  uint64_t v39;
  char v40;
  double v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  void *v59;
  double v60;
  double v61;
  uint64_t (*v62)(_QWORD, double, double);
  uint64_t (*v63)(_QWORD, double, double);
  id v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  id v68;
  uint64_t (*v69)(_QWORD, double, double);
  _QWORD *v70;
  _QWORD v71[24];
  _QWORD v72[25];
  _WORD v73[96];
  uint64_t (*v74)(_QWORD, double, double);
  uint64_t v75;
  _QWORD v76[24];
  CGRect v77;

  v8 = v3;
  v12 = (unint64_t *)type metadata accessor for IndexPath();
  v13 = *(v12 - 1);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *MEMORY[0x1E0DEEDD8] & *v8;
  v69 = (uint64_t (*)(_QWORD, double, double))a3;
  v70 = v8;
  v68 = a1;
  if ((a2 & 1) == 0)
  {
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v17 + 768)) = 0;
    goto LABEL_11;
  }
  v18 = (uint64_t)v8 + *(_QWORD *)(v17 + 136);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v18, (uint64_t)v72, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v72, (uint64_t)v76, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  specialized ShadowSectionCollection.init(_:)(v76, (uint64_t)v73);
  outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v72);
  v4 = (unint64_t)v74;
  outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v73);
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_48;
  if (!v4)
    goto LABEL_11;
  v65 = v13;
  v66 = v12;
  v67 = v8;
  v19 = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v18, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  v12 = (unint64_t *)type metadata accessor for ShadowListUpdateRecorder;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v76, (uint64_t)v71, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  specialized ShadowSectionCollection.init(_:)(v71, (uint64_t)v72);
  outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v72);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v76, (uint64_t)v72, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  v21 = specialized ShadowListUpdateRecorder.initialIndex(_:)(0, v20);
  specialized ShadowRowCollection.init(_:section:)(v72, v21, (uint64_t)v73);
  outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v76);
  v22 = v75;
  outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v73);
  v23 = v67;
  *(double *)&a3 = 0.0;
  if (v22 <= 0)
  {
    v64 = v19;
    if (v4 == 1)
    {
LABEL_27:

      v8 = v70;
      a1 = v68;
      goto LABEL_11;
    }
    a3 = 1;
    v12 = &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>;
    while (1)
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v18, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v76, (uint64_t)v71, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(v71, (uint64_t)v72);
      outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v72);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v76, (uint64_t)v72, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      v51 = specialized ShadowListUpdateRecorder.initialIndex(_:)(a3, v50);
      specialized ShadowRowCollection.init(_:section:)(v72, v51, (uint64_t)v73);
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v76);
      v52 = v75;
      outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v73);
      if (v52 > 0)
        break;
      if (v4 == ++a3)
        goto LABEL_27;
    }
    v8 = v70;
    v23 = v67;
    v19 = v64;
  }
  v12 = v23;

  MEMORY[0x18D754B94](0, a3);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, unint64_t *))(v65 + 8))(v16, v66);
  v13 = (unint64_t)objc_msgSend(v19, sel_cellForItemAtIndexPath_, isa);

  a1 = v68;
  if (!v13)
    goto LABEL_11;
  type metadata accessor for AnyListCollectionViewCell();
  v25 = (_QWORD *)swift_dynamicCastClass();
  if (!v25)
  {

    goto LABEL_11;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, sel_contentView);
  objc_msgSend(v27, sel_frame);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;

  v77.origin.x = v29;
  v77.origin.y = v31;
  v77.size.width = v33;
  v77.size.height = v35;
  MinX = CGRectGetMinX(v77);
  v36 = objc_msgSend(v26, sel_contentView);
  objc_msgSend(v36, sel_bounds);
  v6 = v37;
  v7 = v38;

  if (one-time initialization token for listRowSeparatorLeading != -1)
    goto LABEL_53;
  while (1)
  {
    v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v26) + 0x68);
    *(double *)&v39 = COERCE_DOUBLE(((uint64_t (*)(uint64_t, double, double))v4)(static HorizontalAlignment.listRowSeparatorLeading, v6, v7));
    if ((v40 & 1) != 0)
    {
      v53 = static HorizontalAlignment.leadingText.getter();
      *(double *)&v54 = COERCE_DOUBLE(((uint64_t (*)(uint64_t, double, double))v4)(v53, v6, v7));
      a3 = v55;

      v41 = *(double *)&v54;
      if ((a3 & 1) != 0)
        v41 = 0.0;
    }
    else
    {
      a3 = v39;

      v41 = *(double *)&a3;
    }
    *(double *)((char *)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0x300)) = MinX + v41;
LABEL_11:
    v42 = objc_msgSend(a1, sel_visibleSupplementaryViewsOfKind_, *MEMORY[0x1E0DC48A8], v64);
    v67 = (unint64_t *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionReusableView);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v43)
        goto LABEL_34;
    }
    else
    {
      v43 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v43)
        goto LABEL_34;
    }
    if (v43 < 1)
    {
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v44 = 0;
    v45 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x300);
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v46 = (unint64_t *)MEMORY[0x18D75E3BC](v44, v13);
      else
        v46 = (unint64_t *)*(id *)(v13 + 8 * v44 + 32);
      v12 = v46;
      type metadata accessor for TableCollectionViewCell();
      v47 = swift_dynamicCastClass();
      if (v47
        && (*(_QWORD *)(v47 + direct field offset for TableCollectionViewCell.headerLeadingMargin) = *(_QWORD *)((char *)v8 + v45),
            (v48 = *(void **)(v47 + direct field offset for ListCollectionViewCellBase.host)) != 0))
      {
        v73[0] = 2;
        type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
        v49 = v48;
        v8 = v70;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      }
      else
      {

      }
      ++v44;
    }
    while (v43 != v44);
LABEL_34:
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v69;
    if (v69)
    {
      v56 = v69;
      goto LABEL_42;
    }
    v26 = (_QWORD *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BE36D0);
    a1 = objc_msgSend(v68, sel_visibleSupplementaryViewsOfKind_, v26);

    *(double *)&a3 = COERCE_DOUBLE(static Array._unconditionallyBridgeFromObjectiveC(_:)());
    if (!(a3 >> 62))
    {
      if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_50;
      goto LABEL_38;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    v26 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26)
    {
LABEL_50:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_38:
    if ((a3 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v57 = *(id *)(a3 + 32);
      goto LABEL_41;
    }
    __break(1u);
LABEL_53:
    swift_once();
  }
  v57 = (id)MEMORY[0x18D75E3BC](0, a3);
LABEL_41:
  v56 = v57;
  swift_bridgeObjectRelease();
LABEL_42:
  type metadata accessor for TableGlobalHeader();
  v58 = swift_dynamicCastClass();
  if (v58)
  {
    v59 = (void *)v58;
    v60 = *(double *)((char *)v8 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x300));
    v61 = *(double *)(v58 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin);
    *(double *)(v58 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin) = v60;
    v62 = (uint64_t (*)(_QWORD, double, double))(id)v4;
    if (v61 != v60)
      objc_msgSend(v59, sel_setNeedsUpdateConfiguration);
  }
  else
  {
    v63 = (uint64_t (*)(_QWORD, double, double))(id)v4;
  }

}

uint64_t specialized UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  void *v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  void (*v64)(char *, uint64_t, uint64_t);
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  _QWORD *v90;
  id v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[3];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE v117[40];
  char v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[2];
  uint64_t v133;
  _BYTE v134[40];

  v5 = v4;
  LODWORD(v102) = a4;
  v103 = a2;
  v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v100 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v101 = (char *)&v94 - v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v16 = v15;
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v94 - v18;
  v20 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  v21 = (uint64_t)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x100);
  swift_beginAccess();
  v22 = *(_QWORD *)(v21 + 8);
  v98 = v11;
  v99 = v8;
  if (v22)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v21, (uint64_t)&v120, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    MEMORY[0x18D75B9C8](&v105);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v120, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v105, (uint64_t)v117, v23, v24);
    v25 = (v118 & 7) == 0;
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v117);
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v105);
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(a1, sel_setAllowsMultipleSelection_, v25);
  if (*(_QWORD *)(v21 + 8))
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v21, (uint64_t)&v120, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    MEMORY[0x18D75B9C8](&v105);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v120, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v105, (uint64_t)v117, v26, v27);
    v28 = (v118 & 7) == 0;
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v117);
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v105);
  }
  else
  {
    v28 = 0;
  }
  objc_msgSend(a1, sel_setAllowsMultipleSelectionDuringEditing_, v28);
  v29 = *v20 & *v5;
  v30 = *(_QWORD *)(v29 + 0xE8);
  v31 = *((unsigned __int8 *)v5 + v30);
  if (v31 != 1)
  {
    v32 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v20 & *v5) + 0xA0));
    swift_beginAccess();
    v33 = *v32;
    *v32 = a3;
    outlined consume of Transaction?(v33);
    v29 = *v20 & *v5;
    swift_retain();
  }
  v34 = (uint64_t)v5 + *(_QWORD *)(v29 + 176);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v34, (uint64_t)v19, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v35 = specialized ListCoreBatchUpdates.isEmpty.getter();
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v19);
  if ((v35 & 1) == 0)
  {
    v45 = (uint64_t)v5 + *(_QWORD *)((*v20 & *v5) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v45, (uint64_t)&v120, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    swift_beginAccess();
    v46 = v34 + *(int *)(v16 + 60);
    v47 = v103;
    specialized ListBatchUpdates.formUpdates<A>(from:to:)((uint64_t)&v120, v103);
    v48 = *(_OWORD *)(v46 + 16);
    v105 = *(_OWORD *)v46;
    v106 = v48;
    *(_OWORD *)&v134[8] = v105;
    *(_OWORD *)&v134[24] = v48;
    *(_QWORD *)&v107 = *(_QWORD *)(v46 + 32);
    v104[0] = v107;
    outlined retain of [Text.Modifier]((uint64_t)&v134[8]);
    outlined retain of [Text.Modifier]((uint64_t)&v134[16]);
    outlined retain of [Text.Modifier]((uint64_t)&v134[24]);
    outlined retain of [Text.Modifier]((uint64_t)&v134[32]);
    outlined retain of [Text.Modifier]((uint64_t)v104);
    specialized ListCoreBatchUpdates.formResult<A>(_:)((uint64_t *)&v105);
    swift_endAccess();
    outlined release of _IncrementalLayout_Placements((uint64_t)&v134[8]);
    outlined release of _IncrementalLayout_Placements((uint64_t)&v134[16]);
    outlined release of _IncrementalLayout_Placements((uint64_t)&v134[24]);
    outlined release of _IncrementalLayout_Placements((uint64_t)&v134[32]);
    outlined release of _IncrementalLayout_Placements((uint64_t)v104);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v120);
    outlined init with copy of TableDataSourceAdaptor(v47, (uint64_t)&v120);
    v49 = (uint64_t)v5 + *(_QWORD *)((*v20 & *v5) + 0xC8);
    swift_beginAccess();
    outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v120, v49, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
    result = swift_endAccess();
    if (v31 == 1)
      return result;
    v50 = *v5;
    v51 = *v20;
    goto LABEL_56;
  }
  v36 = (char *)v5 + *(_QWORD *)((*v20 & *v5) + 0x110);
  v37 = *((_QWORD *)v36 + 1);
  v97 = v30;
  if (v37)
  {
    v38 = a1;
    v39 = v31;
    v40 = v36[16];
    *(_QWORD *)&v120 = *(_QWORD *)v36;
    *((_QWORD *)&v120 + 1) = v37;
    LOBYTE(v121) = v40;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v42 = v41;
    result = (uint64_t)MEMORY[0x18D75B9C8](&v105);
    if (v105 == 1)
    {
      v44 = 0;
      v31 = v39;
      a1 = v38;
      goto LABEL_21;
    }
    v53 = *((_QWORD *)v36 + 1);
    if (v53)
    {
      v54 = v36[16];
      *(_QWORD *)&v120 = *(_QWORD *)v36;
      *((_QWORD *)&v120 + 1) = v53;
      LOBYTE(v121) = v54;
      MEMORY[0x18D75B9C8](&v105, v42);
      v52 = (_BYTE)v105 != 0;
    }
    else
    {
      v52 = 0;
    }
    v31 = v39;
    a1 = v38;
  }
  else
  {
    v52 = 0;
  }
  result = (uint64_t)objc_msgSend(a1, sel_isEditing);
  v44 = v52 ^ result;
LABEL_21:
  v55 = *MEMORY[0x1E0DEEDD8] & *v5;
  v56 = *(_QWORD *)(v55 + 0xB8);
  if (*((_BYTE *)v5 + v56) != 1)
  {
    v95 = v44;
    v96 = v31;
    if ((v102 & 1) != 0)
    {
      v60 = (uint64_t)v5 + *(_QWORD *)(v55 + 136);
      swift_beginAccess();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v60, (uint64_t)&v120, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      swift_beginAccess();
      v61 = v34 + *(int *)(v16 + 60);
      specialized ListBatchUpdates.formUpdates<A>(from:to:)((uint64_t)&v120, v103);
      v62 = *(_OWORD *)(v61 + 16);
      v132[0] = *(_OWORD *)v61;
      v132[1] = v62;
      *(_OWORD *)v134 = v132[0];
      *(_OWORD *)&v134[16] = v62;
      v133 = *(_QWORD *)(v61 + 32);
      *(_QWORD *)&v134[32] = v133;
      outlined retain of [Text.Modifier]((uint64_t)v134);
      outlined retain of [Text.Modifier]((uint64_t)&v134[8]);
      outlined retain of [Text.Modifier]((uint64_t)&v134[16]);
      outlined retain of [Text.Modifier]((uint64_t)&v134[24]);
      outlined retain of [Text.Modifier]((uint64_t)&v134[32]);
      specialized ListCoreBatchUpdates.formResult<A>(_:)((uint64_t *)v132);
      swift_endAccess();
      outlined release of _IncrementalLayout_Placements((uint64_t)v134);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v134[8]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v134[16]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v134[24]);
      outlined release of _IncrementalLayout_Placements((uint64_t)&v134[32]);
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v120);
      if (*((_BYTE *)v5 + v97) == 1)
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v34, (uint64_t)v19, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
        v63 = specialized ListCoreBatchUpdates.isEmpty.getter();
        outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v19);
        outlined init with copy of TableDataSourceAdaptor(v103, (uint64_t)&v105);
        if ((v63 & 1) != 0)
        {
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v60, (uint64_t)&v120, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
          outlined init with copy of TableDataSourceAdaptor((uint64_t)&v120, (uint64_t)v117);
          v64 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 104);
          v65 = *MEMORY[0x1E0DC2890];
          v66 = *MEMORY[0x1E0DC2880];
          if (v119)
            v67 = v65;
          else
            v67 = v66;
          v102 = v56;
          v68 = v99;
          v64(v101, v67, v99);
          outlined destroy of TableDataSourceAdaptor((uint64_t)v117);
          outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v120);
          if (BYTE8(v115))
            v69 = v65;
          else
            v69 = v66;
          v70 = v98;
          v64(v98, v69, v68);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC28A8], MEMORY[0x1E0DC28B8]);
          v71 = dispatch thunk of static Equatable.== infix(_:_:)();
          v72 = *(void (**)(char *, uint64_t))(v100 + 8);
          v72(v70, v68);
          v73 = v68;
          v56 = v102;
          v72(v101, v73);
          result = outlined destroy of TableDataSourceAdaptor((uint64_t)&v105);
          if ((v71 & 1) != 0)
          {
            if (v96 == 1)
              return result;
LABEL_54:
            v50 = *v5;
            v59 = (uint64_t *)MEMORY[0x1E0DEEDD8];
            goto LABEL_55;
          }
        }
        else
        {
          outlined destroy of TableDataSourceAdaptor((uint64_t)&v105);
        }
        *((_BYTE *)v5 + v97) = 2;
      }
    }
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v34, (uint64_t)v19, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    v74 = specialized ListCoreBatchUpdates.isEmpty.getter();
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v19);
    if ((v74 & 1) != 0)
    {
      v102 = v56;
      v75 = v103;
      outlined init with copy of TableDataSourceAdaptor(v103, (uint64_t)v117);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v117, (uint64_t)&v105);
      v76 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v116 = MEMORY[0x1E0DEE9D8];
      *((_QWORD *)&v116 + 1) = MEMORY[0x1E0DEE9D8];
      outlined destroy of TableDataSourceAdaptor((uint64_t)v117);
      v128 = v113;
      v129 = v114;
      v130 = v115;
      v131 = v116;
      v124 = v109;
      v125 = v110;
      v126 = v111;
      v127 = v112;
      v120 = v105;
      v121 = v106;
      v77 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v78 = (uint64_t)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88);
      v122 = v107;
      v123 = v108;
      swift_beginAccess();
      outlined assign with copy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v120, v78);
      swift_endAccess();
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v120);
      v79 = specialized UICollectionViewListCoordinatorBase.dragAndDropController.getter();
      v80 = v75;
      v56 = v102;
      outlined init with copy of TableDataSourceAdaptor(v80, (uint64_t)v117);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v117, (uint64_t)&v105);
      *(_QWORD *)&v116 = v76;
      *((_QWORD *)&v116 + 1) = v76;
      outlined destroy of TableDataSourceAdaptor((uint64_t)v117);
      v128 = v113;
      v129 = v114;
      v130 = v115;
      v131 = v116;
      v124 = v109;
      v125 = v110;
      v126 = v111;
      v127 = v112;
      v120 = v105;
      v121 = v106;
      v122 = v107;
      v123 = v108;
      v81 = (uint64_t)v79 + *(_QWORD *)((*v77 & *v79) + 0x60);
      swift_beginAccess();
      outlined assign with take of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v120, v81);
      swift_endAccess();

    }
    else
    {
      outlined init with copy of TableDataSourceAdaptor(v103, (uint64_t)&v120);
      v82 = (uint64_t)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0xC8);
      swift_beginAccess();
      outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v120, v82, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
      swift_endAccess();
    }
    v83 = v96;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v34, (uint64_t)v19, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    v84 = specialized ListCoreBatchUpdates.isEmpty.getter();
    result = outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v19);
    if ((v84 & 1) != 0 && *((_BYTE *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0xD0)) == 1
      || (*((_BYTE *)v5 + v56) & 1) != 0)
    {
LABEL_53:
      if (v83 == 1)
        return result;
      goto LABEL_54;
    }
    v85 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    *((_BYTE *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0xD0)) = 1;
    v86 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v85 & *v5) + 0xA0));
    swift_beginAccess();
    if (*v86 == 1)
    {
      swift_endAccess();
    }
    else
    {
      v87 = Transaction.animation.getter();
      swift_endAccess();
      if (v87)
      {
        swift_release();
        v88 = 1;
LABEL_52:
        v89 = swift_allocObject();
        *(_BYTE *)(v89 + 16) = v88;
        *(_QWORD *)(v89 + 24) = v5;
        *(_QWORD *)(v89 + 32) = a1;
        *(_BYTE *)(v89 + 40) = v95;
        v90 = v5;
        v91 = a1;
        static Update.enqueueAction(_:)();
        result = swift_release();
        goto LABEL_53;
      }
    }
    v88 = 0;
    goto LABEL_52;
  }
  *((_BYTE *)v5 + v56) = 0;
  v57 = *((_QWORD *)v36 + 1);
  if (v57)
  {
    v58 = v36[16];
    *(_QWORD *)&v120 = *(_QWORD *)v36;
    *((_QWORD *)&v120 + 1) = v57;
    LOBYTE(v121) = v58;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    result = (uint64_t)MEMORY[0x18D75B9C8](&v105);
    if ((_BYTE)v105)
      result = (uint64_t)objc_msgSend(a1, sel_setEditing_, 1);
  }
  v59 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  if (v31 != 1)
  {
    v50 = *v5;
LABEL_55:
    v51 = *v59;
LABEL_56:
    v92 = (_QWORD *)((char *)v5 + *(_QWORD *)((v51 & v50) + 0xA0));
    swift_beginAccess();
    v93 = *v92;
    *v92 = 1;
    return outlined consume of Transaction?(v93);
  }
  return result;
}

void specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    specialized UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(a2, a3 & 1, 0);

  }
}

id specialized UICollectionViewListCoordinatorBase.dragAndDropController.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Class v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  void (**v11)(void (*)(void), uint64_t);
  objc_class *v12;
  id v13;
  void *v14;
  id v15;
  objc_super v17;
  _BYTE v18[192];
  _BYTE v19[192];

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150);
  v3 = *(void **)((char *)v0 + v2);
  if (v3)
  {
    v4 = *(id *)((char *)v0 + v2);
  }
  else
  {
    v5 = (uint64_t)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v5, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CollectionViewListDragAndDropController<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CollectionViewListDragAndDropController);
    v8 = objc_allocWithZone(v7);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v19, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v9 = (_OWORD *)((char *)v8 + *(_QWORD *)((*v1 & *v8) + 0x70));
    *v9 = xmmword_187BF9840;
    v9[1] = 0u;
    v9[2] = 0u;
    v9[3] = 0u;
    *(_OWORD *)((char *)v9 + 57) = 0u;
    v10 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)((char *)v8 + *(_QWORD *)((*v1 & *v8) + 0x78)) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)((char *)v8 + *(_QWORD *)((*v1 & *v8) + 0x80)) = v10;
    swift_unknownObjectWeakInit();
    *(_QWORD *)((char *)v8 + *(_QWORD *)((*v1 & *v8) + 0x90)) = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v18, (uint64_t)v8 + *(_QWORD *)((*v1 & *v8) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v11 = (void (**)(void (*)(void), uint64_t))((char *)v8 + *(_QWORD *)((*v1 & *v8) + 0x68));
    *v11 = partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter;
    v11[1] = (void (*)(void (*)(void), uint64_t))v6;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListDragAndDropControllerBase<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListDragAndDropControllerBase);
    v17.receiver = v8;
    v17.super_class = v12;
    v13 = objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v18);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v19);
    v14 = *(void **)((char *)v0 + v2);
    *(_QWORD *)((char *)v0 + v2) = v13;
    v4 = v13;

    v3 = 0;
  }
  v15 = v3;
  return v4;
}

double specialized UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  _QWORD v14[30];
  _QWORD v15[24];
  _BYTE v16[192];

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x100);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  v5 = v14[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  if (v5)
  {
    v6 = (uint64_t)v1 + *(_QWORD *)((*v3 & *v1) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v6, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v7 = IndexPath.section.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v16, (uint64_t)v15, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v15, (uint64_t)v14);
    v8 = (_QWORD *)(v7 & ~(v7 >> 63));
    outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v14);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v16, (uint64_t)v15, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    v10 = specialized ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v8, v9);
    specialized ShadowRowCollection.init(_:section:)(v15, v10, (uint64_t)v14);
    v11 = IndexPath.row.getter();
    v12 = specialized Collection.index(atOffset:)(v11);
    outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v14);
    specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)(v8, v12, 1, a1);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  Class isa;
  id v38;
  unsigned int v39;
  NSIndexPath v40;
  _QWORD *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  _QWORD *v48;
  char *v49;
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  Class v61;
  id v62;
  unsigned int v63;
  NSIndexPath v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[6];
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _OWORD v83[2];
  uint64_t v84;

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v73 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (IndexPath?, IndexPath?)();
  v78 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v76 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v70 - v15;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v72 = (uint64_t)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v75 = (char *)&v70 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v70 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v70 - v29;
  specialized UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)&v80);
  v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (*((_QWORD *)&v81 + 1))
  {
    v83[0] = v80;
    v83[1] = v81;
    v84 = v82;
    v32 = (uint64_t)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x100);
    swift_beginAccess();
    if (*(_QWORD *)(v32 + 8))
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, (uint64_t)&v80, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
      MEMORY[0x18D75B9C8](v79);
      v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v80, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      v36 = specialized SelectionManagerBox.isSelected(_:)((uint64_t)v83, v33, v34, v35);
      outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v79);
      if ((v36 & 1) != 0)
      {
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v38 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

        if (v38)
        {
          v39 = objc_msgSend(v38, sel_isSelected);

          if (v39)
            goto LABEL_32;
        }
        v40.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v41 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v31 & *v3) + 0xA0));
        swift_beginAccess();
        if (*v41 == 1)
        {
          swift_endAccess();
        }
        else
        {
          v66 = Transaction.animation.getter();
          swift_endAccess();
          if (v66)
          {
            swift_release();
            v67 = 1;
LABEL_31:
            objc_msgSend(a1, sel_selectItemAtIndexPath_animated_scrollPosition_, v40.super.isa, v67, 0);

LABEL_32:
            outlined destroy of AnyHashable((uint64_t)v83);
            return;
          }
        }
        v67 = 0;
        goto LABEL_31;
      }
    }
    v71 = a1;
    outlined destroy of AnyHashable((uint64_t)v83);
  }
  else
  {
    v71 = a1;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v80, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v77 = a2;
  v42(v30, a2, v6);
  v43 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
  v43(v30, 0, 1, v6);
  v44 = *(_QWORD *)((*v31 & *v3) + 0xD8);
  v74 = v3;
  v45 = (uint64_t)v3 + v44;
  swift_beginAccess();
  v46 = (uint64_t)&v16[*(int *)(v78 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, v46, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v47((uint64_t)v16, 1, v6) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
    if (v47(v46, 1, v6) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
      return;
    }
    goto LABEL_15;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  if (v47(v46, 1, v6) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
LABEL_15:
    v70 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v43;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for (IndexPath?, IndexPath?));
    v48 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    goto LABEL_17;
  }
  v70 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v43;
  v49 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v73, v46, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
  v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51 = *(void (**)(char *, uint64_t))(v7 + 8);
  v51(v49, v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  v51(v26, v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  v48 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((v50 & 1) != 0)
    return;
LABEL_17:
  v52 = (uint64_t)v75;
  v42(v75, v77, v6);
  v70(v52, 0, 1, v6);
  v53 = (uint64_t)v74 + *(_QWORD *)((*v48 & *v74) + 0xE0);
  swift_beginAccess();
  v54 = v76;
  v55 = v76 + *(int *)(v78 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v52, v76, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v53, v55, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  if (v47(v54, 1, v6) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
    if (v47(v55, 1, v6) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
      return;
    }
    goto LABEL_22;
  }
  v56 = v72;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54, v72, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  if (v47(v55, 1, v6) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v56, v6);
LABEL_22:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for (IndexPath?, IndexPath?));
    v57 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    goto LABEL_24;
  }
  v58 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v73, v55, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
  v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  v60 = *(void (**)(char *, uint64_t))(v7 + 8);
  v60(v58, v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  v60((char *)v56, v6);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  v57 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((v59 & 1) != 0)
    return;
LABEL_24:
  v61 = IndexPath._bridgeToObjectiveC()().super.isa;
  v62 = objc_msgSend(v71, sel_cellForItemAtIndexPath_, v61);

  if (v62)
  {
    v63 = objc_msgSend(v62, sel_isSelected);

    if (v63)
    {
      v64.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v65 = (_QWORD *)((char *)v74 + *(_QWORD *)((*v57 & *v74) + 0xA0));
      swift_beginAccess();
      if (*v65 == 1)
      {
        swift_endAccess();
      }
      else
      {
        v68 = Transaction.animation.getter();
        swift_endAccess();
        if (v68)
        {
          swift_release();
          v69 = 1;
LABEL_36:
          objc_msgSend(v71, sel_deselectItemAtIndexPath_animated_, v64.super.isa, v69);

          return;
        }
      }
      v69 = 0;
      goto LABEL_36;
    }
  }
}

void specialized UICollectionViewListCoordinatorBase.updateListContents(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void (*v42)(char *, char *, uint64_t);
  void (*v43)(_QWORD, _QWORD, _QWORD);
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD, _QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t updated;
  Swift::Bool v68;
  id v69;
  Class isa;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  _QWORD *v96;
  _QWORD *v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  id v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  _BYTE *v112;
  id v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(_QWORD, _QWORD, _QWORD);
  void (*v122)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  __int128 v127;
  _OWORD v128[3];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _OWORD v136[2];
  _OWORD v137[3];
  _OWORD v138[3];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  _BYTE v145[240];
  _BYTE v146[192];

  v2 = v1;
  v4 = type metadata accessor for IndexPath();
  v126 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v109 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v124 = (uint64_t)&v109 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v115 = (char *)&v109 - v17;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v118 = (char *)&v109 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v120 = (uint64_t)&v109 - v27;
  v28 = MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  specialized ListCoreBatchUpdates.resetAll()();
  swift_endAccess();
  memset(v145, 0, 171);
  v29 = (uint64_t)v1 + *(_QWORD *)((*(_QWORD *)v28 & *v1) + 0xC8);
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v145, v29, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
  swift_endAccess();
  v30 = *(_QWORD *)((*(_QWORD *)v28 & *v2) + 0xD0);
  v114 = v2;
  *((_BYTE *)v2 + v30) = 0;
  v125 = a1;
  v31 = objc_msgSend(a1, sel_preparedCells);
  if (!v31)
    goto LABEL_66;
  v32 = v31;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v121 = (void (*)(_QWORD, _QWORD, _QWORD))v11;
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v126;
  v123 = v4;
  if (v34)
  {
    if (v34 >= 1)
    {
      v36 = (char *)v114 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v114) + 0x88);
      v122 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 & 0xC000000000000001);
      v111 = v36;
      swift_beginAccess();
      v37 = 0;
      v116 = v7;
      v113 = (id)v34;
      v110 = v33;
      while (1)
      {
        if (v122)
          v38 = (id)MEMORY[0x18D75E3BC](v37, v33);
        else
          v38 = *(id *)(v33 + 8 * v37 + 32);
        v39 = v38;
        v40 = objc_msgSend(v125, sel_indexPathForCell_, v38);
        if (v40)
        {
          v41 = v40;
          static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

          v35 = v126;
          v42 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
          v42(v21, v7, v4);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v21, 0, 1, v4);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v21, 1, v4) != 1)
          {
            v43 = v121;
            v42((char *)v121, v21, v4);
            type metadata accessor for TableCollectionViewCell();
            v44 = (_BYTE *)swift_dynamicCastClass();
            if (v44)
            {
              v112 = v44;
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v111, (uint64_t)v146, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
              v117 = &v109;
              v119 = v39;
              v45 = IndexPath.section.getter();
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v146, (uint64_t)v137, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
              specialized ShadowSectionCollection.init(_:)(v137, (uint64_t)v145);
              v46 = (_QWORD *)(v45 & ~(v45 >> 63));
              outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v145);
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v146, (uint64_t)v137, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
              v48 = specialized ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v46, v47);
              specialized ShadowRowCollection.init(_:section:)(v137, v48, (uint64_t)v145);
              v49 = IndexPath.row.getter();
              v50 = specialized Collection.index(atOffset:)(v49);
              outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v145);
              specialized ShadowListDataSource.contextForItem(index:)(v46, v50, (uint64_t)v145);
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v145, (uint64_t)v137, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
              if ((_QWORD)v142)
              {
                v135 = v143;
                v136[0] = v144[0];
                *(_OWORD *)((char *)v136 + 11) = *(_OWORD *)((char *)v144 + 11);
                v131 = v139;
                v132 = v140;
                v133 = v141;
                v134 = v142;
                v128[1] = v137[2];
                v128[2] = v138[0];
                v129 = v138[1];
                v130 = v138[2];
                v127 = v137[0];
                v128[0] = v137[1];
                specialized closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)((uint64_t *)&v127, v114, v112);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v127, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
              }
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v145, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
              outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v146);
              v51 = v121;
              specialized UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(v125, (uint64_t)v121);
              v52 = (id)v119;

              v35 = v126;
              v4 = v123;
              (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v126 + 8))(v51, v123);
              v7 = v116;
              v34 = (uint64_t)v113;
              v33 = v110;
            }
            else
            {

              (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v35 + 8))(v43, v4);
              v7 = v116;
              v34 = (uint64_t)v113;
            }
            goto LABEL_9;
          }
        }
        else
        {
          v35 = v126;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v21, 1, 1, v4);
        }

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
LABEL_9:
        if (v34 == ++v37)
          goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_64;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  v113 = (id)*MEMORY[0x1E0DC48A8];
  v53 = objc_msgSend(v125, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v55 = *(_QWORD *)(v54 + 16);
  v111 = (char *)v54;
  if (v55)
  {
    v56 = v114;
    v57 = (char *)v56 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v56) + 0xA0);
    v58 = v54 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v119 = (uint64_t)v56 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v56) + 0x88);
    swift_beginAccess();
    v112 = v57;
    swift_beginAccess();
    v59 = *(uint64_t **)(v35 + 16);
    v116 = *(char **)(v35 + 72);
    v117 = v59;
    v60 = v120;
    ((void (*)(uint64_t, unint64_t, uint64_t))v59)(v120, v58, v4);
    while (1)
    {
      v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
      v122(v60, 0, 1, v4);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v60, 1, v4) == 1)
        goto LABEL_38;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v124, v60, v4);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v119, (uint64_t)v137, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      v61 = IndexPath.section.getter();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v137, (uint64_t)&v127, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(&v127, (uint64_t)v145);
      v62 = (void (*)(_QWORD, _QWORD, _QWORD))(v61 & ~(v61 >> 63));
      v63 = outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v145);
      v65 = *((_QWORD *)&v144[0] + 1);
      v66 = *(_QWORD *)&v144[0];
      if (*(_QWORD *)(*((_QWORD *)&v144[0] + 1) + 16) || *(_QWORD *)(*(_QWORD *)&v144[0] + 16))
      {
        v121 = v62;
        MEMORY[0x1E0C80A78](v63, v64);
        *(&v109 - 2) = (uint64_t)&type metadata for TableDataSourceAdaptor;
        *(&v109 - 1) = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v65, v66);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v123;
        swift_release_n();
        v62 = (void (*)(_QWORD, _QWORD, _QWORD))specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, (uint64_t)v121);
        swift_bridgeObjectRelease();
      }
      v68 = TableDataSourceAdaptor.hasHeader(forSectionAt:)((Swift::Int)v62);
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v137);
      v60 = v120;
      if (!v68)
      {
        v35 = v126;
        (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v124, v4);
        goto LABEL_23;
      }
      v69 = v113;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v71 = objc_msgSend(v125, sel_supplementaryViewForElementKind_atIndexPath_, v69, isa);

      if (v71)
      {
        type metadata accessor for TableCollectionViewCell();
        v72 = swift_dynamicCastClass();
        if (v72)
        {
          v73 = v72;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v119, (uint64_t)v137, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
          v74 = *(_QWORD *)v112;
          outlined copy of Transaction?(*(_QWORD *)v112);
          v75 = v124;
          v76 = IndexPath.section.getter();
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v137, (uint64_t)&v127, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
          specialized ShadowSectionCollection.init(_:)(&v127, (uint64_t)v145);
          outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v145);
          v4 = v123;
          v78 = specialized ShadowListUpdateRecorder.initialIndex(_:)(v76 & ~(v76 >> 63), v77);
          TableDataSourceAdaptor.configureHeader(_:transaction:forSectionAt:)(v73, v74, v78);
          outlined consume of Transaction?(v74);

          outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v137);
          v35 = v126;
          v79 = v75;
          v60 = v120;
          (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v79, v4);
          goto LABEL_23;
        }

      }
      v35 = v126;
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v124, v4);
LABEL_23:
      v58 += (unint64_t)v116;
      if (!--v55)
        goto LABEL_37;
      ((void (*)(uint64_t, unint64_t, uint64_t))v117)(v60, v58, v4);
    }
  }
  v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
  v60 = v120;
LABEL_37:
  v122(v60, 1, 1, v4);
LABEL_38:
  swift_bridgeObjectRelease();
  v80 = objc_msgSend(v125, sel_indexPathsForVisibleSupplementaryElementsOfKind_, *MEMORY[0x1E0DC48A0]);
  v81 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v117 = (uint64_t *)v81;
  v82 = *(_QWORD *)(v81 + 16);
  v83 = v115;
  v84 = v118;
  if (v82)
  {
    v85 = (char *)v117 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v120 = (uint64_t)v114 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v114) + 0x88);
    swift_beginAccess();
    v119 = *(_QWORD *)(v35 + 72);
    v121 = *(void (**)(_QWORD, _QWORD, _QWORD))(v35 + 16);
    v121(v84, v85, v4);
    while (1)
    {
      v122((uint64_t)v84, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v84, 1, v4) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v83, v84, v4);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v120, (uint64_t)v137, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      v87 = IndexPath.section.getter();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v137, (uint64_t)&v127, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(&v127, (uint64_t)v145);
      v88 = outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v145);
      v90 = *((_QWORD *)&v144[0] + 1);
      v91 = *(_QWORD *)&v144[0];
      if (*(_QWORD *)(*((_QWORD *)&v144[0] + 1) + 16) || *(_QWORD *)(*(_QWORD *)&v144[0] + 16))
      {
        v124 = v87 & ~(v87 >> 63);
        MEMORY[0x1E0C80A78](v88, v89);
        *(&v109 - 2) = (uint64_t)&type metadata for TableDataSourceAdaptor;
        *(&v109 - 1) = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        v86 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v90, v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v123;
        swift_release_n();
        specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v86, v124);
        v83 = v115;
        swift_bridgeObjectRelease();
      }
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v137);
      v35 = v126;
      (*(void (**)(char *, uint64_t))(v126 + 8))(v83, v4);
      v84 = v118;
      v85 += v119;
      if (!--v82)
        goto LABEL_47;
      v121(v118, v85, v4);
    }
  }
  else
  {
LABEL_47:
    v122((uint64_t)v84, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  v92 = (void *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BE36D0);
  v93 = objc_msgSend(v125, sel_visibleSupplementaryViewsOfKind_, v92);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionReusableView);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v28 >> 62))
  {
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_50;
LABEL_61:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v108 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v108)
    goto LABEL_61;
LABEL_50:
  if ((v28 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v94 = *(id *)(v28 + 32);
      goto LABEL_53;
    }
    __break(1u);
LABEL_66:
    __break(1u);
    return;
  }
LABEL_64:
  v94 = (id)MEMORY[0x18D75E3BC](0, v28);
LABEL_53:
  v95 = v94;
  swift_bridgeObjectRelease();
  type metadata accessor for TableGlobalHeader();
  if (swift_dynamicCastClass())
  {
    v96 = v114;
    v97 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v98 = (char *)v114 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v114) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v98, (uint64_t)v145, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v99 = (_QWORD *)((char *)v96 + *(_QWORD *)((*v97 & *v96) + 0xA0));
    swift_beginAccess();
    v100 = *v99;
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v145, (uint64_t)v137);
    v101 = swift_dynamicCastClass();
    if (v101)
    {
      v102 = (void *)v101;
      outlined copy of Transaction?(v100);
      v103 = v95;
      objc_msgSend(v102, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
      v104 = v140;
      v105 = v141;
      outlined init with copy of TableColumnCollection((uint64_t)v138, (uint64_t)v128 + 8);
      outlined copy of Binding<[SwiftUIAnySortComparator]>?(v104, *((uint64_t *)&v104 + 1));
      v106 = TableDataSourceAdaptor.headerDisplayMode.getter();
      v127 = v104;
      *(_QWORD *)&v128[0] = v105;
      BYTE1(v129) = v106;
      BYTE2(v129) = BYTE8(v139);
      v107 = (uint64_t)v102 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
      swift_beginAccess();
      outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v127, v107, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView);
      swift_endAccess();
      objc_msgSend(v102, sel_setNeedsUpdateConfiguration);

      outlined destroy of TableDataSourceAdaptor((uint64_t)v137);
      outlined consume of Transaction?(v100);

    }
    else
    {
      outlined destroy of TableDataSourceAdaptor((uint64_t)v137);

    }
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v145);
  }
  else
  {

  }
}

void specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(_QWORD *a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  id v19;
  _QWORD *v20;
  int v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  _QWORD *v38;
  void *v39;
  char v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  _QWORD *v47;
  char isEscapingClosureAtFileLocation;
  _QWORD v50[6];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[3];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v50[-1] - v8;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v50[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0xD0)) = 1;
  v15 = (_QWORD *)((char *)a1 + *(_QWORD *)((*v14 & *a1) + 0xA0));
  swift_beginAccess();
  if (*v15 == 1)
  {
    swift_endAccess();
    goto LABEL_6;
  }
  v16 = Transaction.animation.getter();
  swift_endAccess();
  if (!v16)
  {
LABEL_6:
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a1;
    *(_BYTE *)(v17 + 32) = 0;
    *(_BYTE *)(v17 + 33) = a3 & 1;
    v18 = partial apply for specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
    if ((a3 & 1) != 0)
      goto LABEL_7;
LABEL_5:
    v19 = a2;
    v20 = a1;
    v21 = 0;
    goto LABEL_8;
  }
  swift_release();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a1;
  *(_BYTE *)(v17 + 32) = 1;
  *(_BYTE *)(v17 + 33) = a3 & 1;
  v18 = (void (*)(uint64_t))closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)specialized partial apply;
  if ((a3 & 1) == 0)
    goto LABEL_5;
LABEL_7:
  v22 = a2;
  v23 = a1;
  specialized UICollectionViewListCoordinatorBase.updateEditingState(_:)(v22);
  v21 = 1;
LABEL_8:
  v24 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v13, 1, 1, v24);
  v25 = (uint64_t)a1 + *(_QWORD *)((*v14 & *a1) + 0xD8);
  swift_beginAccess();
  outlined assign with take of WeakBox<Swift.AnyObject>((uint64_t)v13, v25, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  swift_endAccess();
  v26 = (uint64_t)a1 + *(_QWORD *)((*v14 & *a1) + 0xB0);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, (uint64_t)v9, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  LOBYTE(v25) = specialized ListCoreBatchUpdates.isEmpty.getter();
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v9);
  if ((v25 & 1) == 0)
  {
    v27 = (uint64_t)a1 + *(_QWORD *)((*v14 & *a1) + 0xC8);
    swift_beginAccess();
    outlined init with copy of AccessibilityScrollableContext?(v27, (uint64_t)&v51, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (*((_QWORD *)&v52 + 1))
    {
      v69 = v59;
      v70[0] = v60[0];
      *(_OWORD *)((char *)v70 + 11) = *(_OWORD *)((char *)v60 + 11);
      v65 = v55;
      v66 = v56;
      v67 = v57;
      v68 = v58;
      v61 = v51;
      v62 = v52;
      v63 = v53;
      v64 = v54;
      outlined init with copy of TableDataSourceAdaptor((uint64_t)&v61, (uint64_t)&v51);
      v28 = swift_allocObject();
      v29 = v57;
      *(_OWORD *)(v28 + 136) = v58;
      v30 = v60[0];
      *(_OWORD *)(v28 + 152) = v59;
      *(_OWORD *)(v28 + 168) = v30;
      *(_OWORD *)(v28 + 179) = *(_OWORD *)((char *)v60 + 11);
      v31 = v53;
      *(_OWORD *)(v28 + 72) = v54;
      v32 = v56;
      *(_OWORD *)(v28 + 88) = v55;
      *(_OWORD *)(v28 + 104) = v32;
      *(_OWORD *)(v28 + 120) = v29;
      v33 = v52;
      *(_OWORD *)(v28 + 24) = v51;
      *(_OWORD *)(v28 + 40) = v33;
      *(_QWORD *)(v28 + 16) = a1;
      *(_OWORD *)(v28 + 56) = v31;
      *(_QWORD *)(v28 + 200) = a2;
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = partial apply for specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      *(_QWORD *)(v34 + 24) = v28;
      v50[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
      v50[5] = v34;
      v35 = MEMORY[0x1E0C809B0];
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 1107296256;
      v50[2] = thunk for @escaping @callee_guaranteed () -> ();
      v50[3] = &block_descriptor_47_0;
      v36 = _Block_copy(v50);
      v37 = a2;
      v38 = a1;
      swift_release();
      *(_QWORD *)&v53 = v18;
      *((_QWORD *)&v53 + 1) = v17;
      *(_QWORD *)&v51 = v35;
      *((_QWORD *)&v51 + 1) = 1107296256;
      *(_QWORD *)&v52 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      *((_QWORD *)&v52 + 1) = &block_descriptor_50_1;
      v39 = _Block_copy(&v51);
      swift_retain();
      swift_release();
      objc_msgSend(v37, sel_performBatchUpdates_completion_, v36, v39);
      _Block_release(v39);
      _Block_release(v36);
      swift_release();
      outlined destroy of TableDataSourceAdaptor((uint64_t)&v61);
      swift_release();
      return;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v51, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  if (v21
    && (outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, (uint64_t)v9, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates), v40 = specialized ListCoreBatchUpdates.isEmpty.getter(), outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v9), (v40 & 1) != 0))
  {
    *(_QWORD *)&v63 = v18;
    *((_QWORD *)&v63 + 1) = v17;
    *(_QWORD *)&v61 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v61 + 1) = 1107296256;
    *(_QWORD *)&v62 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    *((_QWORD *)&v62 + 1) = &block_descriptor_37_0;
    v41 = _Block_copy(&v61);
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_performBatchUpdates_completion_, 0, v41);
    swift_release();
    _Block_release(v41);
  }
  else
  {
    v42 = (void *)objc_opt_self();
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = a2;
    *(_QWORD *)(v43 + 24) = a1;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = partial apply for specialized closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
    *(_QWORD *)(v44 + 24) = v43;
    *(_QWORD *)&v63 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    *((_QWORD *)&v63 + 1) = v44;
    *(_QWORD *)&v61 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v61 + 1) = 1107296256;
    *(_QWORD *)&v62 = thunk for @escaping @callee_guaranteed () -> ();
    *((_QWORD *)&v62 + 1) = &block_descriptor_34_2;
    v45 = _Block_copy(&v61);
    v46 = a2;
    v47 = a1;
    swift_retain();
    swift_release();
    objc_msgSend(v42, sel_performWithoutAnimation_, v45);
    swift_release();
    _Block_release(v45);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

uint64_t specialized disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(_QWORD *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char *v24;
  void *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t Strong;
  uint64_t v34;
  id v35;
  id v36;
  char *v37;
  id v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char v41[8];
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IndexSet();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (uint64_t *)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB0);
  swift_beginAccess();
  (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 16))(v16, v17, v12);
  v18 = a2;
  v19 = specialized Sequence.flatMap<A>(_:)(v16, v18);
  v36 = v18;

  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v42 = v19;
  v20 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v20);
  v21 = *(_QWORD *)(v42 + 16);
  v34 = v42;
  if (v21)
  {
    v22 = v42 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v39 = *(_QWORD *)(v5 + 72);
    v40 = v23;
    v25 = v36;
    v24 = v37;
    v23(v11, v22, v4);
    while (1)
    {
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v26(v11, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v24, v11, v4);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v4);
      v28 = objc_msgSend(v25, sel_cellForItemAtIndexPath_, isa, v34);

      if (v28)
      {
        type metadata accessor for TableCollectionViewCell();
        v29 = swift_dynamicCastClass();
        if (v29 && (v30 = *(void **)(v29 + direct field offset for ListCollectionViewCellBase.host)) != 0)
        {
          v31 = v28;
          v38 = v30;
          GraphHost.environment.getter();
          if (v43)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
            lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
            v35 = v31;
            swift_retain_n();
            swift_retain_n();
            v31 = v35;
            PropertyList.Tracker.value<A>(_:for:)();
            swift_release_n();
          }
          else
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
            lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
            swift_retain_n();
            PropertyList.subscript.getter();
          }
          swift_release_n();
          Strong = swift_weakLoadStrong();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
          swift_release();
          swift_release();

          v25 = v36;
          v24 = v37;
          if (Strong)
          {
            *(_BYTE *)(Strong + 177) = 1;
            swift_release();
          }
        }
        else
        {

        }
      }
      v22 += v39;
      if (!--v21)
        goto LABEL_16;
      v40(v11, v22, v4);
    }
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_16:
    v26(v11, 1, 1, v4);
  }
  return swift_bridgeObjectRelease();
}

void specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1, void *a2, _QWORD *a3, char a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v24 - v12;
  v14 = objc_msgSend(a2, sel_window, v11);
  if (v14)
  {

    v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v16 = (uint64_t)a3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a3) + 0xB0);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v16, (uint64_t)v13, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    LOBYTE(v16) = specialized ListCoreBatchUpdates.isEmpty.getter();
    v17 = outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v13);
    if ((v16 & 1) != 0)
    {
      specialized UICollectionViewListCoordinatorBase.updateEditingState(_:)(a2);
      v19 = (char *)a3 + *(_QWORD *)((*v15 & *a3) + 0xF0);
      if (v19[9] == 1 && !(*(_QWORD *)v19 | v19[8]))
        goto LABEL_8;
      v20 = specialized UIView.firstAncestorWhere(_:)(a2);
      if (!v20)
        goto LABEL_8;
      v21 = v20;
      ObjectType = swift_getObjectType();
      v23 = swift_conformsToProtocol2();
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(ObjectType, v23);

LABEL_8:
        specialized UICollectionViewListCoordinatorBase.updateListContents(_:)(a2);
        return;
      }
      __break(1u);
    }
    else
    {
      MEMORY[0x1E0C80A78](v17, v18);
      *((_BYTE *)&v24 - 32) = a4 & 1;
      *(&v24 - 3) = (uint64_t)a3;
      *(&v24 - 2) = (uint64_t)a2;
      *((_BYTE *)&v24 - 8) = a5 & 1;
      static Update.ensure<A>(_:)();
    }
  }
  else
  {
    *((_BYTE *)a3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a3) + 0xD0)) = 0;
  }
}

uint64_t specialized closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, void *a2, void *a3, char a4)
{
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  _QWORD v15[6];

  if ((a1 & 1) != 0)
    return specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  v8 = (void *)objc_opt_self();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  *(_BYTE *)(v9 + 32) = a4 & 1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)specialized partial apply;
  *(_QWORD *)(v10 + 24) = v9;
  v15[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v15[5] = v10;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed () -> ();
  v15[3] = &block_descriptor_68;
  v11 = _Block_copy(v15);
  v12 = a2;
  v13 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_performWithoutAnimation_, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

id specialized UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  char v25;
  int v26;
  id result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD *v43;
  char *v44;
  _OWORD v45[2];
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v2 = v1;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v45 - v10 + 16;
  v12 = type metadata accessor for IndexPath();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v18 = objc_msgSend(a1, sel_indexPathsForSelectedItems, v15);
  v44 = v7;
  if (v18)
  {
    v19 = v18;
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v20 = 0;
  }
  v21 = objc_msgSend(a1, sel_isEditing, v44);
  v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v23 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x110);
  v24 = *((_QWORD *)v23 + 1);
  if (!v24)
  {
    objc_msgSend(a1, sel_setEditing_, 0);
    if (v21)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      v28 = (uint64_t)v2 + *(_QWORD *)((*v22 & *v2) + 0x100);
      swift_beginAccess();
      if (*(_QWORD *)(v28 + 8))
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
        type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
        MEMORY[0x18D75B9C8](&v48);
        outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v48, (uint64_t)v45, v29, v30);
        if (v47)
        {
          if (v47 == 1)
          {
            outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
            v48 = 0u;
            v49 = 0u;
            v50 = 0;
            v51 = 1;
          }
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v45);
        }
        else
        {
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v48 = MEMORY[0x1E0DEE9E8];
          v51 = 0;
        }
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      }
      v35 = (uint64_t)v2 + *(_QWORD *)((*v22 & *v2) + 0xD8);
      swift_beginAccess();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v35, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        return (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v11, v12);
      type metadata accessor for UpdateCoalescingCollectionView(0);
      v36 = swift_dynamicCastClass();
      if (v36)
      {
        v37 = v36;
        v38 = a1;
        specialized UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)&v52);
        if (*((_QWORD *)&v53 + 1))
        {
          v45[0] = v52;
          v45[1] = v53;
          v46 = v54;
          swift_beginAccess();
          v39 = (uint64_t)v44;
          if (*(_QWORD *)(v28 + 8))
          {
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
            swift_endAccess();
            type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
            MEMORY[0x18D75B9C8](&v48);
            specialized SelectionManagerBox.select(_:)((uint64_t)v45);
            dispatch thunk of AnyLocation.set(_:transaction:)();
            outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
            outlined destroy of AnyHashable((uint64_t)v45);
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v45);
            swift_endAccess();
          }
        }
        else
        {
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v52, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          v39 = (uint64_t)v44;
        }
        (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v39, v17, v12);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v39, 0, 1, v12);
        v40 = v37 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
        swift_beginAccess();
        outlined assign with take of WeakBox<Swift.AnyObject>(v39, v40, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
        swift_endAccess();
        v41 = swift_allocObject();
        *(_QWORD *)(v41 + 16) = v37;
        *(_QWORD *)(v41 + 24) = v2;
        v42 = v38;
        v43 = v2;
        onNextMainRunLoop(do:)();

        swift_release();
      }
      return (id)(*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    }
    return (id)swift_bridgeObjectRelease();
  }
  v25 = v23[16];
  *(_QWORD *)&v52 = *(_QWORD *)v23;
  *((_QWORD *)&v52 + 1) = v24;
  LOBYTE(v53) = v25;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v48);
  v26 = v48;
  result = objc_msgSend(a1, sel_setEditing_, (_BYTE)v48 != 0);
  if ((v21 & 1) != 0)
  {
    result = (id)swift_bridgeObjectRelease();
    if (v26)
      return result;
    goto LABEL_10;
  }
  if (!v26)
    return (id)swift_bridgeObjectRelease();
  if (v20)
  {
    v31 = *(_QWORD *)(v20 + 16);
    result = (id)swift_bridgeObjectRelease();
    if (v31 == 1)
    {
      v32 = (uint64_t)v2 + *(_QWORD *)((*v22 & *v2) + 0x100);
      result = (id)swift_beginAccess();
      if (*(_QWORD *)(v32 + 8))
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, (uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
        type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
        MEMORY[0x18D75B9C8](&v48);
        outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v48, (uint64_t)v45, v33, v34);
        if (v47)
        {
          if (v47 == 1)
          {
            outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
            v48 = 0u;
            v49 = 0u;
            v50 = 0;
            v51 = 1;
          }
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v45);
        }
        else
        {
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v48 = MEMORY[0x1E0DEE9E8];
          v51 = 0;
        }
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v48);
        return (id)outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      }
    }
  }
  return result;
}

uint64_t specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void *v48;
  char *v49;
  NSIndexSet *v50;
  void *v51;
  void *v52;
  int *v53;
  int *v54;
  char v55;
  char v56;
  NSIndexSet *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  Class isa;
  Class v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t i;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  Class v79;
  void (*v80)(char *, uint64_t);
  Class v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  id v89;
  void *ObjCClassFromObject;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void (*v100)(__int128 *, _QWORD);
  char *v101;
  unint64_t v102;
  unint64_t v103;
  id v104;
  Class v105;
  id v106;
  Class v107;
  id v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  void (*v115)(char *, uint64_t);
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  void *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD v128[11];
  __int128 v129;
  _QWORD v130[22];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[4];

  v124 = a3;
  v119 = (int *)a2;
  v4 = type metadata accessor for IndexSet.Index();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath();
  v126 = *(_QWORD *)(v9 - 8);
  v127 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v123 = (char *)&v110 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v122 = (char *)&v110 - v18;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v19, v20);
  v125 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v110 - v24;
  v120 = type metadata accessor for IndexSet();
  v26 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120, v27);
  v114 = (char *)&v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v118 = (char *)&v110 - v31;
  v32 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x88);
  v121 = a1;
  v33 = (uint64_t)a1 + v32;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v33 + 176) + 16))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  else
  {
    v110 = v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v36 = *(_QWORD *)(v33 + 184);
    v111 = v5;
    v112 = v4;
    v113 = v8;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v36 + 16));
    }
    else
    {
      *(_QWORD *)(v33 + 184) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v36 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    v37 = (uint64_t)v119;
    outlined assign with copy of TableDataSourceAdaptor((uint64_t)v119, v33);
    swift_endAccess();
    v38 = v121;
    v39 = v124;
    specialized disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v121, v124);
    v40 = specialized UICollectionViewListCoordinatorBase.dragAndDropController.getter();
    outlined init with copy of TableDataSourceAdaptor(v37, (uint64_t)v130);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v130, (uint64_t)v128);
    *(_QWORD *)&v129 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v129 + 1) = MEMORY[0x1E0DEE9D8];
    outlined destroy of TableDataSourceAdaptor((uint64_t)v130);
    v139 = v128[8];
    v140[0] = v128[9];
    v140[1] = v128[10];
    v140[2] = v129;
    v135 = v128[4];
    v136 = v128[5];
    v137 = v128[6];
    v138 = v128[7];
    v131 = v128[0];
    v132 = v128[1];
    v133 = v128[2];
    v134 = v128[3];
    v41 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v42 = (uint64_t)v40 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v40) + 0x60);
    swift_beginAccess();
    outlined assign with take of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v131, v42);
    swift_endAccess();

    v43 = (char *)v38 + *(_QWORD *)((*v41 & *v38) + 0xB0);
    swift_beginAccess();
    v44 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v45 = v118;
    v46 = v120;
    v44(v118, v43, v120);
    LODWORD(v38) = IndexSet.isEmpty.getter();
    v47 = *(void (**)(char *, uint64_t))(v26 + 8);
    v48 = v39;
    v49 = v45;
    v47(v45, v46);
    LODWORD(v117) = (_DWORD)v38;
    if ((v38 & 1) == 0)
    {
      v44(v45, v43, v46);
      IndexSet._bridgeToObjectiveC()(v50);
      v52 = v51;
      v47(v49, v46);
      objc_msgSend(v48, sel_deleteSections_, v52);

    }
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    v54 = v53;
    v44(v49, &v43[v53[9]], v46);
    v55 = IndexSet.isEmpty.getter();
    v47(v49, v46);
    v115 = v47;
    v116 = v44;
    if ((v55 & 1) != 0)
    {
      v56 = v117 ^ 1;
    }
    else
    {
      v44(v49, &v43[v54[9]], v46);
      IndexSet._bridgeToObjectiveC()(v57);
      v59 = v58;
      v47(v49, v46);
      objc_msgSend(v48, sel_insertSections_, v59);

      v56 = 1;
    }
    v60 = (uint64_t)v125;
    v61 = *(_QWORD *)&v43[v54[10]];
    v62 = *(_QWORD *)(v61 + 16);
    v119 = v54;
    if (v62)
    {
      swift_bridgeObjectRetain();
      v63 = (_QWORD *)(v61 + 40);
      do
      {
        objc_msgSend(v48, sel_moveSection_toSection_, *(v63 - 1), *v63);
        v63 += 2;
        --v62;
      }
      while (v62);
      swift_bridgeObjectRelease();
      v56 = 1;
      v60 = (uint64_t)v125;
      v54 = v119;
    }
    if (*(_QWORD *)(*(_QWORD *)&v43[v54[11]] + 16))
    {
      swift_bridgeObjectRetain();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v48, sel_deleteItemsAtIndexPaths_, isa);

      v56 = 1;
    }
    if (*(_QWORD *)(*(_QWORD *)&v43[v54[12]] + 16))
    {
      swift_bridgeObjectRetain();
      v65 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v48, sel_insertItemsAtIndexPaths_, v65);

      v56 = 1;
    }
    v66 = v54[13];
    v117 = v43;
    v67 = *(_QWORD *)&v43[v66];
    v68 = *(_QWORD *)(v67 + 16);
    result = swift_bridgeObjectRetain();
    i = 0;
    if (v68)
      goto LABEL_20;
LABEL_19:
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    v71 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v60, 1, 1, v70);
    for (i = v68; ; ++i)
    {
      outlined init with take of SwipeActions.Value?(v60, (uint64_t)v25, (uint64_t)&lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t)type metadata accessor for (source: IndexPath, destination: IndexPath), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v25, 1, v71) == 1)
        break;
      v75 = v126;
      v74 = v127;
      v76 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
      v77 = v122;
      v76(v122, &v25[*(int *)(v71 + 48)], v127);
      v78 = v123;
      v76(v123, v25, v74);
      v79 = IndexPath._bridgeToObjectiveC()().super.isa;
      v80 = *(void (**)(char *, uint64_t))(v75 + 8);
      v80(v78, v74);
      v81 = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v124, sel_moveItemAtIndexPath_toIndexPath_, v79, v81);

      v82 = v74;
      v60 = (uint64_t)v125;
      result = ((uint64_t (*)(char *, uint64_t))v80)(v77, v82);
      v56 = 1;
      if (i == v68)
        goto LABEL_19;
LABEL_20:
      if (i >= *(_QWORD *)(v67 + 16))
      {
        __break(1u);
        goto LABEL_37;
      }
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      v71 = v72;
      v73 = *(_QWORD *)(v72 - 8);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * i, v60, (uint64_t (*)(_QWORD))type metadata accessor for (source: IndexPath, destination: IndexPath));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v60, 0, 1, v71);
    }
    swift_bridgeObjectRelease();
    v84 = v116;
    v83 = v117;
    v85 = (uint64_t)v119;
    if ((v56 & 1) == 0)
    {
      v86 = v118;
      v87 = v120;
      v116(v118, &v117[v119[14]], v120);
      v88 = IndexSet.isEmpty.getter();
      v115(v86, v87);
      if ((v88 & 1) == 0)
      {
        v89 = objc_msgSend(v124, sel_collectionViewLayout);
        ObjCClassFromObject = (void *)swift_getObjCClassFromObject();

        objc_msgSend(ObjCClassFromObject, sel_invalidationContextClass);
        swift_getObjCClassMetadata();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext);
        swift_dynamicCastMetatypeUnconditional();
        v91 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
        v92 = v114;
        v93 = v120;
        v84(v114, &v83[*(int *)(v85 + 56)], v120);
        v94 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
        v95 = dispatch thunk of Collection.count.getter();
        if (v95)
        {
          v96 = v95;
          v123 = v91;
          v130[0] = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95 & ~(v95 >> 63), 0);
          v97 = v130[0];
          v98 = v113;
          result = dispatch thunk of Collection.startIndex.getter();
          if (v96 < 0)
            goto LABEL_38;
          v99 = v110;
          v125 = (char *)v94;
          do
          {
            v100 = (void (*)(__int128 *, _QWORD))dispatch thunk of Collection.subscript.read();
            v100(&v131, 0);
            IndexPath.init(index:)();
            v130[0] = v97;
            v101 = v92;
            v103 = *(_QWORD *)(v97 + 16);
            v102 = *(_QWORD *)(v97 + 24);
            if (v103 >= v102 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
              v97 = v130[0];
            }
            *(_QWORD *)(v97 + 16) = v103 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v126 + 32))(v97+ ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80))+ *(_QWORD *)(v126 + 72) * v103, v99, v127);
            v130[0] = v97;
            dispatch thunk of Collection.formIndex(after:)();
            --v96;
            v92 = v101;
          }
          while (v96);
          (*(void (**)(char *, uint64_t))(v111 + 8))(v98, v112);
          v91 = v123;
        }
        v115(v92, v93);
        v104 = (id)*MEMORY[0x1E0DC48A8];
        v105 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v91, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v104, v105);

        v106 = (id)*MEMORY[0x1E0DC48A0];
        v107 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v91, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v106, v107);

        v108 = objc_msgSend(v124, sel_collectionViewLayout);
        objc_msgSend(v108, sel_invalidateLayoutWithContext_, v91);

      }
    }
    swift_beginAccess();
    specialized ListCoreBatchUpdates.resetAll()();
    swift_endAccess();
    v139 = 0u;
    memset(v140, 0, 27);
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v109 = (char *)v121 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v121) + 0xC8);
    swift_beginAccess();
    outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v131, (uint64_t)v109, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
    return swift_endAccess();
  }
  return result;
}

void specialized closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, _QWORD *a2, void *a3, char a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD v14[6];

  if ((a1 & 1) != 0)
  {
    specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  }
  else
  {
    v7 = (void *)objc_opt_self();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(v8 + 24) = a3;
    *(_BYTE *)(v8 + 32) = a4 & 1;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = partial apply for specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
    *(_QWORD *)(v9 + 24) = v8;
    v14[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v14[5] = v9;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_21_2;
    v10 = _Block_copy(v14);
    v11 = a2;
    v12 = a3;
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performWithoutAnimation_, v10);
    _Block_release(v10);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

uint64_t specialized closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  uint64_t v22;

  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v22 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56))((char *)&v22 - v16, 1, 1, v4, v15);
  v18 = (uint64_t)a1 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
  swift_beginAccess();
  outlined assign with take of WeakBox<Swift.AnyObject>((uint64_t)v17, v18, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  swift_endAccess();
  v19 = (uint64_t)a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0xD8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for IndexPath?);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_selectItemAtIndexPath_animated_scrollPosition_, isa, 0, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void specialized closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(uint64_t *a1, _QWORD *a2, _BYTE *a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[18];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  _BYTE v22[192];

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (uint64_t)a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0x88);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v7, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  if (*((_BYTE *)a2 + *(_QWORD *)((*v6 & *a2) + 0xE8)) == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = (_QWORD *)((char *)a2 + *(_QWORD *)((*v6 & *a2) + 0xA0));
    swift_beginAccess();
    v8 = *v9;
    outlined copy of Transaction?(*v9);
  }
  v10 = *a1;
  v11 = a1[1];
  outlined init with copy of TableRowView((uint64_t)(a1 + 2), (uint64_t)v16);
  v12 = a1[19];
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v14 = v10;
  v15 = v11;
  v16[17] = v12;
  v20 = 0;
  v21 = 0;
  swift_bridgeObjectRetain();
  TableDataSourceAdaptor.configureCell(_:transaction:context:)(a3, v8, (uint64_t)&v14);
  outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)&v14);
  outlined consume of Transaction?(v8);
  outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v22);
  v13 = objc_msgSend(a3, sel_layer, v14, v15);
  v14 = a1[19];
  ViewTraitCollection.zIndex.getter();
  objc_msgSend(v13, sel_setZPosition_);

}

uint64_t specialized ShadowListUpdateRecorder.initialIndex(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t updated;

  v3 = a1;
  v5 = *(_QWORD *)(v2 + 176);
  v4 = *(_QWORD *)(v2 + 184);
  if (*(_QWORD *)(v4 + 16) || *(_QWORD *)(v5 + 16))
  {
    MEMORY[0x1E0C80A78](a1, a2);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    v3 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v3);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t specialized ShadowListDataSource.contextForItem(index:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  _OWORD v14[8];
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  _OWORD v18[9];
  __int128 v19;
  __int128 v20;
  _OWORD v21[3];
  _BYTE v22[216];

  v4 = a2;
  v5 = a1;
  v8 = *(_QWORD *)(v3 + 176);
  v7 = *(_QWORD *)(v3 + 184);
  if (*(_QWORD *)(v7 + 16) || *(_QWORD *)(v8 + 16))
  {
    MEMORY[0x1E0C80A78](a1, a2);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    v5 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v18, updated, (unint64_t)v5, v4);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)&v18[0];
  }
  TableDataSourceAdaptor.contextForItem(index:)((unint64_t)v5, v4, (uint64_t)v22);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  if ((_QWORD)v19)
  {
    v16 = v20;
    v17[0] = v21[0];
    *(_OWORD *)((char *)v17 + 11) = *(_OWORD *)((char *)v21 + 11);
    v14[5] = v18[6];
    v14[6] = v18[7];
    v14[7] = v18[8];
    v15 = v19;
    v14[1] = v18[2];
    v14[2] = v18[3];
    v14[3] = v18[4];
    v14[4] = v18[5];
    v13 = v18[0];
    v14[0] = v18[1];
    v10 = v18[0];
    outlined init with copy of TableRowView((uint64_t)v14, a3 + 16);
    v11 = *((_QWORD *)&v15 + 1);
    outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v16, a3 + 160, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 152) = v11;
    *(_WORD *)(a3 + 200) = 0;
    *(_BYTE *)(a3 + 202) = 0;
    swift_bridgeObjectRetain();
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)&v13);
  }
  else
  {
    *(_OWORD *)(a3 + 187) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
}

void static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[2];
  v4 = *a2;
  v45 = a2[1];
  v46 = v3;
  v44 = v2;
  v20 = v4;
  outlined retain of _GraphInputs((uint64_t)&v44);
  _ViewInputs.init(withoutGeometry:)();
  v16 = v26;
  v17 = v23;
  v18 = v27;
  v5 = v28;
  v6 = v30;
  v7 = DWORD2(v32);
  v13 = v33;
  v11 = v36;
  v12 = v35;
  v14 = v38;
  v15 = v37;
  outlined retain of _GraphInputs((uint64_t)&v44);
  v10 = v21;
  swift_retain();
  v9 = v24;
  swift_retain();
  v19 = v31;
  swift_bridgeObjectRetain();
  v8 = v32;
  swift_bridgeObjectRetain();
  PreferencesInputs.hostKeys.getter();
  HIDWORD(v43) = *MEMORY[0x1E0CFED28];
  v22 = v44;
  v25 = v45;
  v29 = v46;
  *(_QWORD *)&v32 = v10;
  *(_QWORD *)&v34 = v9;
  DWORD2(v32) = v17;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v18, v16);
  *(_QWORD *)&v39 = __PAIR64__(v6, v5);
  *((_QWORD *)&v39 + 1) = v19;
  *(_QWORD *)&v40 = v8;
  *((_QWORD *)&v40 + 1) = __PAIR64__(HIDWORD(v32), v7);
  *(_QWORD *)&v41 = __PAIR64__(v12, v13);
  *((_QWORD *)&v41 + 1) = __PAIR64__(v15, v11);
  LODWORD(v42) = v14;
  PreferencesInputs.init(hostKeys:)();
  *((_QWORD *)&v42 + 1) = v20;
  LODWORD(v43) = DWORD2(v20);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<TableRowList.Key>, (uint64_t)&type metadata for TableRowList.Key, (uint64_t)&protocol witness table for TableRowList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<TableRowList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  v53 = v40;
  v54 = v41;
  v55 = v42;
  v56 = v43;
  v49 = v29;
  v50 = v32;
  v51 = v34;
  v52 = v39;
  v47 = v22;
  v48 = v25;
  type metadata accessor for CollectionViewTableRoot();
}

void sub_18789858C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  _DWORD v62[104];

  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v4 = *(_OWORD *)(v1 + 864);
  *(_OWORD *)(v1 + 432) = *(_OWORD *)(v1 + 848);
  *(_OWORD *)(v1 + 448) = v4;
  *(_OWORD *)(v1 + 464) = *(_OWORD *)(v1 + 880);
  *(_QWORD *)(v1 + 480) = *(_QWORD *)(v1 + 896);
  v5 = *(_OWORD *)(v1 + 800);
  *(_OWORD *)(v1 + 368) = *(_OWORD *)(v1 + 784);
  *(_OWORD *)(v1 + 384) = v5;
  v6 = *(_OWORD *)(v1 + 832);
  *(_OWORD *)(v1 + 400) = *(_OWORD *)(v1 + 816);
  *(_OWORD *)(v1 + 416) = v6;
  v7 = *(_OWORD *)(v1 + 768);
  *(_OWORD *)(v1 + 336) = *(_OWORD *)(v1 + 752);
  *(_OWORD *)(v1 + 352) = v7;
  (*(void (**)(uint64_t *__return_ptr, int *, int *, uint64_t, uint64_t))(v3 + 48))(&v46, v40, &v49, v2, v3);
  v18 = *(_QWORD *)(v1 + 64);
  v19 = v47;
  *(_QWORD *)(v1 + 336) = v24;
  v50 = v20;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<TableColumnListKey>, (uint64_t)&type metadata for TableColumnListKey, (uint64_t)&protocol witness table for TableColumnListKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<TableColumnListKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v8 = *(_QWORD *)(v1 + 336);
  v9 = v50;
  v41 = v39;
  v42 = v2;
  v43 = v0;
  v44 = v3;
  v45 = v27;
  v49 = v38;
  _GraphValue.subscript.getter();
  *(_QWORD *)(v1 + 336) = v26;
  *(_QWORD *)(v1 + 352) = v25;
  v50 = v35;
  v51 = v34;
  v52 = v36;
  v53 = v21;
  *(_QWORD *)(v1 + 376) = v37;
  *(_QWORD *)(v1 + 384) = v8;
  v54 = v22;
  v55 = v9;
  v56 = v31;
  v57 = v30;
  v58 = v29;
  v59 = v28;
  v60 = v33;
  v61 = v32;
  (*(void (**)(uint64_t *__return_ptr, int *, int *, uint64_t))(v27 + 64))(&v46, v40, &v49, v0);
  v10 = *(_QWORD *)(v1 + 64);
  v11 = v47;
  *(_QWORD *)(v1 + 336) = v18;
  v50 = v19;
  v12 = PreferencesOutputs.subscript.getter();
  if ((v12 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 336) = v10;
    v50 = v11;
    v14 = PreferencesOutputs.subscript.getter();
    if ((v14 & 0x100000000) == 0)
    {
      v15 = v14;
      swift_bridgeObjectRelease();
      v40[0] = v38;
      v16 = *(_OWORD *)(v1 + 656);
      *(_OWORD *)(v1 + 96) = *(_OWORD *)(v1 + 640);
      *(_OWORD *)(v1 + 112) = v16;
      *(_OWORD *)(v1 + 128) = *(_OWORD *)(v1 + 672);
      v48 = v62[20];
      v17 = *(_OWORD *)(v1 + 624);
      *(_OWORD *)(v1 + 64) = *(_OWORD *)(v1 + 608);
      *(_OWORD *)(v1 + 80) = v17;
      outlined retain of _ViewInputs((uint64_t)v62);
      UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(v13, v15, v40, &v46, v39, v2, v0, v23, (uint64_t)&v49);
    }
  }
  __break(1u);
  JUMPOUT(0x187898B14);
}

void closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)()
{
  type metadata accessor for CollectionViewTableRoot();
}

uint64_t sub_187898B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void closure #2 in static CollectionViewTableRoot._makeView(view:inputs:)()
{
  type metadata accessor for CollectionViewTableRoot();
}

uint64_t sub_187898BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 60);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(int a1@<W0>, int a2@<W1>, int *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v16 = *a3;
  v17 = *a4;
  v18 = *((_DWORD *)a4 + 2);
  v37 = a4[2];
  v19 = *((_DWORD *)a4 + 6);
  v38 = *((_DWORD *)a4 + 7);
  v39 = v19;
  v35 = *((_DWORD *)a4 + 8);
  v36 = v18;
  v20 = *((_DWORD *)a4 + 9);
  v28 = a4[5];
  v40 = a4[6];
  v41 = v17;
  v33 = *((_DWORD *)a4 + 14);
  v34 = v20;
  v27 = *((_DWORD *)a4 + 15);
  LODWORD(v17) = *((_DWORD *)a4 + 16);
  v31 = *((_DWORD *)a4 + 17);
  v32 = v17;
  v30 = *((_DWORD *)a4 + 18);
  v25 = *((_DWORD *)a4 + 19);
  v29 = *((_DWORD *)a4 + 20);
  swift_unknownObjectWeakInit();
  *(_OWORD *)(a9 + 243) = 0u;
  *(_OWORD *)(a9 + 232) = 0u;
  *(_OWORD *)(a9 + 216) = 0u;
  *(_OWORD *)(a9 + 200) = 0u;
  *(_OWORD *)(a9 + 184) = 0u;
  *(_OWORD *)(a9 + 168) = 0u;
  *(_OWORD *)(a9 + 152) = 0u;
  *(_OWORD *)(a9 + 136) = 0u;
  *(_OWORD *)(a9 + 120) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  *(_OWORD *)(a9 + 88) = 0u;
  v21 = (id)AGSubgraphGetCurrent();
  if (v21)
  {
    v26 = v24;
    *(_QWORD *)(a9 + 264) = v21;
    *(_DWORD *)a9 = a1;
    *(_DWORD *)(a9 + 4) = a2;
    MEMORY[0x1E0C80A78](v21, v22);
    v24[1] = v23;
    v47 = v16;
    v42 = a5;
    v43 = a6;
    v44 = a7;
    v45 = a8;
    v46 = v23;
    type metadata accessor for CollectionViewTableRoot();
  }
  __break(1u);
}

void protocol witness for static View._makeView(view:inputs:) in conformance CollectionViewTableRoot<A, B, C>(uint64_t a1, __int128 *a2)
{
  static CollectionViewTableRoot._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CollectionViewTableRoot<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewTableRoot<A, B, C>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CollectionViewTableRoot<A, B, C>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewTableRoot<A, B, C>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance CollectionViewTableRoot<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewTableRoot<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

void closure #1 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)()
{
  type metadata accessor for CollectionViewTableRoot();
}

uint64_t sub_1878994B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[16];

  v2 = v1 + *(int *)(a1 + 64);
  v8[2] = a1;
  type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

void closure #2 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)()
{
  type metadata accessor for CollectionViewTableRoot();
}

uint64_t sub_187899560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[16];

  v2 = v1 + *(int *)(a1 + 68);
  v8[2] = a1;
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

void closure #3 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)()
{
  type metadata accessor for CollectionViewTableRoot();
}

uint64_t sub_187899608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[16];

  v2 = v1 + *(int *)(a1 + 72);
  v8[2] = a1;
  type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_19, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

Swift::Void __swiftcall UpdateCollectionViewTableCoordinator.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  char v12;
  objc_class *v13;
  objc_class *v14;
  uint64_t OutputValue;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  id v60;
  void **v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  void **v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  void *v77;
  char v78;
  _QWORD *v79;
  _QWORD *v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  void **v85;
  void *v86;
  id v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __int16 v100;
  char v101;
  objc_class *v102;
  _BYTE v103[64];
  _BYTE v104[64];
  _QWORD v105[4];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[27];
  _OWORD v123[9];
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _BYTE v132[7];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[40];
  uint64_t v142;

  v1 = v0;
  v142 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of TableRowList(Value, (uint64_t)v141);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
  v5 = AGGraphGetValue();
  v7 = v6;
  outlined init with copy of TableColumnList(v5, (uint64_t)v138);
  v8 = v7 & 1;
  v9 = (char *)AGGraphGetValue();
  v11 = v10;
  v12 = *v9;
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for UICollectionViewListCoordinator);
  v14 = v13;
  OutputValue = AGGraphGetOutputValue();
  v102 = v14;
  if (OutputValue && (v4 & 1) == 0 && !v8 && (v11 & 1) == 0)
  {
    outlined init with copy of AccessibilityScrollableContext?(v1 + 88, (uint64_t)&v125, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (!*((_QWORD *)&v126 + 1))
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v110 = v129;
    v111 = v130;
    v112 = v131;
    v106 = v125;
    v107 = v126;
    v108 = v127;
    v109 = v128;
    LODWORD(v105[0]) = *(_DWORD *)v132;
    *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)&v132[3];
    v16 = v133;
    v17 = v134;
    v18 = v135;
    v98 = v136;
    v100 = v137;
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
    v19 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19, (uint64_t)&v113, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    v95 = *((_QWORD *)&v113 + 1) != 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v113, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
    v20 = (uint64_t *)AGGraphGetValue();
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(*v20, v22);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    outlined consume of Binding<[SwiftUIAnySortComparator]>?(v16, v17);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    v24 = (uint64_t *)AGGraphGetValue();
    v25 = *v24;
    v26 = v24[1];
    v28 = v24[2];
    v27 = v24[3];
    outlined copy of Binding<AnyTableColumnCustomization>?(*v24, v26);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    outlined consume of Binding<AnyTableColumnCustomization>?(v18, v98);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    LOBYTE(v18) = *(_BYTE *)AGGraphGetValue();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    *(_QWORD *)&v119 = v112;
    v117 = v110;
    v118 = v111;
    v113 = v106;
    v114 = v107;
    v115 = v108;
    v116 = v109;
    BYTE8(v119) = v95;
    HIDWORD(v119) = *(_DWORD *)((char *)v105 + 3);
    *(_DWORD *)((char *)&v119 + 9) = v105[0];
    *(_QWORD *)&v120 = v21;
    *((_QWORD *)&v120 + 1) = v22;
    *(_QWORD *)&v121 = v23;
    *((_QWORD *)&v121 + 1) = v25;
    *(_QWORD *)v122 = v26;
    *(_QWORD *)&v122[8] = v28;
    v29 = 0;
    *(_QWORD *)&v122[16] = v27;
    v122[24] = v18;
    *(_WORD *)&v122[25] = v100;
    v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_18:
    v61 = (void **)AGGraphGetOutputValue();
    if (v61)
    {
      v62 = *v61;
      outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
      type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
      v63 = AGGraphGetValue();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, (uint64_t)&v106, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      v64 = v62;
      outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
      v65 = (uint64_t)v64 + *(_QWORD *)((*v30 & *v64) + 0x100);
      swift_beginAccess();
      outlined assign with take of WeakBox<Swift.AnyObject>((uint64_t)&v106, v65, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      swift_endAccess();

      v66 = (void **)AGGraphGetOutputValue();
      if (v66)
      {
        v67 = *v66;
        outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
        type metadata accessor for Binding<EditMode>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>?, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode);
        v68 = AGGraphGetValue();
        v69 = *(_QWORD *)v68;
        v70 = *(_QWORD *)(v68 + 8);
        v71 = *(_BYTE *)(v68 + 16);
        v72 = v67;
        outlined copy of Binding<NavigationSplitViewColumn>?(v69, v70);
        outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
        v73 = (char *)v72 + *(_QWORD *)((*v30 & *v72) + 0x110);
        v74 = *(_QWORD *)v73;
        v75 = *((_QWORD *)v73 + 1);
        *(_QWORD *)v73 = v69;
        *((_QWORD *)v73 + 1) = v70;
        v73[16] = v71;
        outlined consume of Binding<NavigationSplitViewColumn>?(v74, v75);

        v76 = (void **)AGGraphGetOutputValue();
        if (v76)
        {
          v77 = *v76;
          outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
          v78 = *(_BYTE *)AGGraphGetValue();
          v79 = v77;
          outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
          *((_BYTE *)v79 + *(_QWORD *)((*v30 & *v79) + 0x120)) = v78;

          v80 = (_QWORD *)AGGraphGetOutputValue();
          if (v80)
          {
            v81 = (_OWORD *)(*v80 + *(_QWORD *)((*v30 & *(_QWORD *)*v80) + 0x118));
            v82 = *(_OWORD *)(v1 + 60);
            *v81 = *(_OWORD *)(v1 + 44);
            v81[1] = v82;
            v83 = MEMORY[0x18D760234](v1 + 80);
            if (!v83)
            {
LABEL_25:
              outlined destroy of TableRowList((uint64_t)v141);
              outlined destroy of AccessibilityScrollableContext?(v1 + 88, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              v89 = v119;
              *(_OWORD *)(v1 + 200) = v120;
              v90 = *(_OWORD *)v122;
              *(_OWORD *)(v1 + 216) = v121;
              *(_OWORD *)(v1 + 232) = v90;
              *(_OWORD *)(v1 + 243) = *(_OWORD *)&v122[11];
              v91 = v115;
              *(_OWORD *)(v1 + 136) = v116;
              v92 = v118;
              *(_OWORD *)(v1 + 152) = v117;
              *(_OWORD *)(v1 + 168) = v92;
              *(_OWORD *)(v1 + 184) = v89;
              v93 = v114;
              *(_OWORD *)(v1 + 88) = v113;
              *(_OWORD *)(v1 + 104) = v93;
              *(_OWORD *)(v1 + 120) = v91;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
              return;
            }
            v84 = (void *)v83;
            v85 = (void **)AGGraphGetOutputValue();
            if (v85)
            {
              v86 = *v85;
              outlined init with copy of TableDataSourceAdaptor((uint64_t)&v113, (uint64_t)&v106);
              v87 = v86;
              AGGraphClearUpdate();
              outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
              v88 = *(_QWORD *)AGGraphGetValue();
              swift_retain();
              outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
              AGGraphSetUpdate();
              specialized UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(v84, (uint64_t)&v106, v88, v29 & 1);

              swift_release();
              outlined destroy of TableDataSourceAdaptor((uint64_t)&v106);
              goto LABEL_25;
            }
            __break(1u);
            goto LABEL_31;
          }
LABEL_29:
          __break(1u);
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  v101 = v4;
  v99 = v12;
  if (!OutputValue || v8)
  {
    v105[0] = MEMORY[0x1E0DEE9D8];
    v31 = v139;
    v32 = v140;
    __swift_project_boxed_opaque_existential_1(v138, v139);
    TableColumnList.visitAll<A>(applying:)((uint64_t)v105, v31, (uint64_t)&type metadata for MakeCellFormulas, v32, (uint64_t)&protocol witness table for MakeCellFormulas);
    v33 = v105[0];
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    v34 = (uint64_t *)AGGraphGetValue();
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    v38 = v34[3];
    outlined copy of Binding<AnyTableColumnCustomization>?(*v34, v36);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    if (v36)
    {
      *(_QWORD *)&v113 = v35;
      *((_QWORD *)&v113 + 1) = v36;
      *(_QWORD *)&v114 = v37;
      *((_QWORD *)&v114 + 1) = v38;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v40 = *((_QWORD *)&v106 + 1);
      v39 = v106;
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v97 = specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(v33, v39, v40, 0, (uint64_t)specialized implicit closure #5 in UpdateCollectionViewTableCoordinator.updateValue(), 0, specialized implicit closure #6 in UpdateCollectionViewTableCoordinator.updateValue(), 0);
    outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v39);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (*(_QWORD *)(v1 + 112))
  {
    v97 = *(_QWORD *)(v1 + 184);
    swift_bridgeObjectRetain();
LABEL_15:
    outlined init with copy of TableRowList((uint64_t)v141, (uint64_t)v104);
    outlined init with copy of TableColumnList((uint64_t)v138, (uint64_t)v103);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
    v41 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v41, (uint64_t)&v113, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    v96 = *((_QWORD *)&v113 + 1) != 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v113, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
    v42 = (uint64_t *)AGGraphGetValue();
    v43 = *v42;
    v44 = v42[1];
    v45 = v42[2];
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(*v42, v44);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v113);
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    v46 = (uint64_t *)AGGraphGetValue();
    v48 = *v46;
    v47 = v46[1];
    v49 = v46[2];
    v50 = v46[3];
    outlined copy of Binding<AnyTableColumnCustomization>?(*v46, v47);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v113);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v106);
    v51 = *(_BYTE *)AGGraphGetValue();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v106);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)v105);
    v52 = *(_BYTE *)AGGraphGetValue();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)v105);
    *(_QWORD *)&v94 = v49;
    *((_QWORD *)&v94 + 1) = v50;
    TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)((uint64_t)v104, (uint64_t)v103, v97, v96, v43, v44, v45, v48, (uint64_t)v123, v47, v94, v51, v52, v99);
    v53 = AGGraphGetOutputValue();
    v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (!v53)
    {
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v123, (uint64_t)&v106);
      outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
      v54 = AGGraphGetValue();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54, (uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
      outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v113);
      type metadata accessor for Binding<EditMode>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>?, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode);
      v55 = AGGraphGetValue();
      v56 = *(_QWORD *)v55;
      v57 = *(_QWORD *)(v55 + 8);
      v58 = *(_BYTE *)(v55 + 16);
      outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)v55, v57);
      outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v113);
      v59 = objc_allocWithZone(v102);
      *(_QWORD *)((char *)v59 + *(_QWORD *)((*v30 & *v59) + 0x300)) = 0;
      outlined init with copy of TableDataSourceAdaptor((uint64_t)&v106, (uint64_t)v105);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v104, (uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      v60 = specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)((uint64_t)v105, (uint64_t)v103, v56, v57, v58, 1);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      outlined destroy of TableDataSourceAdaptor((uint64_t)&v106);
      *(_QWORD *)&v125 = v60;
      AGGraphSetOutputValue();

    }
    v29 = (AGGraphGetOutputValue() == 0) | v101;
    v121 = v123[8];
    *(_OWORD *)v122 = v124[0];
    *(_OWORD *)&v122[11] = *(_OWORD *)((char *)v124 + 11);
    v117 = v123[4];
    v118 = v123[5];
    v119 = v123[6];
    v120 = v123[7];
    v113 = v123[0];
    v114 = v123[1];
    v115 = v123[2];
    v116 = v123[3];
    goto LABEL_18;
  }
LABEL_32:
  __break(1u);
}

uint64_t specialized implicit closure #5 in UpdateCollectionViewTableCoordinator.updateValue()(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for TableCellFormula() + 24));
}

uint64_t specialized implicit closure #6 in UpdateCollectionViewTableCoordinator.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v3 = a1 + *(int *)(type metadata accessor for TableCellFormula() + 20);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_BYTE *)(v3 + 32);
  result = outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v3, v5, v6, v7, v8);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(_QWORD *a1, Swift::Int a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t a6)
{
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  Swift::Int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  Swift::Int v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  Swift::Int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  _QWORD v90[2];
  char *v91;
  uint64_t v92;
  Swift::Int v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  Swift::Int v98;
  uint64_t v99;
  Swift::Int v100;
  _QWORD *v101;
  Swift::Int v102;
  _QWORD *v103;
  _QWORD *v104;

  v94 = a5;
  v96 = a3;
  v97 = a6;
  v98 = a2;
  v95 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionDifference<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v92 = *(_QWORD *)(v7 - 8);
  v93 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v91 = (char *)v90 - v9;
  v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v104 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [Int : Int](0, &lazy cache variable for type metadata for [String : Int]);
  v12 = v11;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    v103 = v10;
    v31 = v98;
    Dictionary.reserveCapacity(_:)(v98);
    v32 = v31;
    if (v31)
    {
      if (v31 < 0)
        goto LABEL_102;
      v33 = 0;
      v34 = v103;
      v35 = v95 + 1;
      while (1)
      {
        if (v32 == v33)
          goto LABEL_97;
        v36 = *(v35 - 1);
        v37 = *v35;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v101 = v34;
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v37);
        v41 = v34[2];
        v42 = (v39 & 1) == 0;
        v43 = v41 + v42;
        if (__OFADD__(v41, v42))
          goto LABEL_98;
        v44 = v39;
        if (v34[3] >= v43)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v34 = v101;
            if ((v39 & 1) == 0)
              goto LABEL_32;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v34 = v101;
            if ((v44 & 1) == 0)
              goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, isUniquelyReferenced_nonNull_native);
          v45 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v37);
          if ((v44 & 1) != (v46 & 1))
            goto LABEL_103;
          v40 = v45;
          v34 = v101;
          if ((v44 & 1) == 0)
          {
LABEL_32:
            v34[(v40 >> 6) + 8] |= 1 << v40;
            v47 = (uint64_t *)(v34[6] + 16 * v40);
            *v47 = v36;
            v47[1] = v37;
            *(_QWORD *)(v34[7] + 8 * v40) = v33;
            v48 = v34[2];
            v29 = __OFADD__(v48, 1);
            v49 = v48 + 1;
            if (v29)
              goto LABEL_100;
            v34[2] = v49;
            swift_bridgeObjectRetain();
            goto LABEL_23;
          }
        }
        *(_QWORD *)(v34[7] + 8 * v40) = v33;
LABEL_23:
        ++v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35 += 2;
        v32 = v98;
        if (v98 == v33)
        {
          v103 = v34;
          break;
        }
      }
    }
    if (v104[2] == a4 && v103[2] == v32)
    {
      if (a4 | v32)
      {
        v50 = 0;
        v51 = 0;
        v52 = MEMORY[0x1E0DEE9D8];
        v53 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v54 = *(_QWORD *)(v52 + 16);
              v55 = *((_QWORD *)v53 + 2);
              if (v55 + v54 > v97)
                goto LABEL_91;
              if (v51 != v32)
                break;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v52 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 + 1, 1, (char *)v52);
              v57 = *(_QWORD *)(v52 + 16);
              v56 = *(_QWORD *)(v52 + 24);
              v32 = v98;
              if (v57 >= v56 >> 1)
              {
                v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, (char *)v52);
                v32 = v98;
                v52 = (uint64_t)v81;
              }
              *(_QWORD *)(v52 + 16) = v57 + 1;
              *(_QWORD *)(v52 + 8 * v57 + 32) = v50++;
              v51 = v32;
              if (v50 >= a4)
                goto LABEL_62;
            }
            if (v50 == a4)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55 + 1, 1, v53);
              v59 = *((_QWORD *)v53 + 2);
              v58 = *((_QWORD *)v53 + 3);
              v32 = v98;
              if (v59 >= v58 >> 1)
              {
                v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v53);
                v32 = v98;
                v53 = v82;
              }
              *((_QWORD *)v53 + 2) = v59 + 1;
              *(_QWORD *)&v53[8 * v59 + 32] = v51++;
              v50 = a4;
              goto LABEL_62;
            }
            v60 = (uint64_t *)(v96 + 16 * v50);
            v61 = &v95[2 * v51];
            if (*v60 != *v61 || v60[1] != v61[1])
            {
              v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v32 = v98;
              if ((v63 & 1) == 0)
                break;
            }
            ++v50;
LABEL_61:
            ++v51;
            if (v50 >= a4)
            {
LABEL_62:
              if (v51 >= v32)
                goto LABEL_91;
            }
          }
          v64 = v60[1];
          v65 = v103;
          if (v103[2])
          {
            v66 = *v60;
            swift_bridgeObjectRetain();
            v67 = specialized __RawDictionaryStorage.find<A>(_:)(v66, v64);
            if ((v68 & 1) != 0)
            {
              LODWORD(v94) = 0;
              v69 = *(_QWORD *)(v65[7] + 8 * v67);
              goto LABEL_69;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          v69 = 0;
          LODWORD(v94) = 1;
LABEL_69:
          v70 = v104;
          if (!v104[2])
            goto LABEL_82;
          v93 = v69;
          v71 = *v61;
          v72 = v61[1];
          swift_bridgeObjectRetain();
          v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v72);
          if ((v74 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_82:
            v78 = v94;
            swift_bridgeObjectRelease();
            if ((v78 & 1) == 0)
              goto LABEL_75;
            goto LABEL_83;
          }
          v75 = *(_QWORD *)(v70[7] + 8 * v73);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v94 & 1) == 0 && v93 >= v51 && (v75 < v50 || v75 - v50 >= v93 - v51))
          {
LABEL_75:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
            v32 = v98;
            v77 = *((_QWORD *)v53 + 2);
            v76 = *((_QWORD *)v53 + 3);
            if (v77 >= v76 >> 1)
            {
              v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v53);
              v32 = v98;
              v53 = v84;
            }
            *((_QWORD *)v53 + 2) = v77 + 1;
            *(_QWORD *)&v53[8 * v77 + 32] = v51;
            goto LABEL_61;
          }
LABEL_83:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v52 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v52 + 16) + 1, 1, (char *)v52);
          v32 = v98;
          v80 = *(_QWORD *)(v52 + 16);
          v79 = *(_QWORD *)(v52 + 24);
          if (v80 >= v79 >> 1)
          {
            v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, (char *)v52);
            v32 = v98;
            v52 = (uint64_t)v83;
          }
          *(_QWORD *)(v52 + 16) = v80 + 1;
          *(_QWORD *)(v52 + 8 * v80 + 32) = v50++;
          if (v50 >= a4)
            goto LABEL_62;
        }
      }
      v53 = (char *)MEMORY[0x1E0DEE9D8];
      v52 = MEMORY[0x1E0DEE9D8];
LABEL_91:
      if (*((_QWORD *)v53 + 2) + *(_QWORD *)(v52 + 16) <= v97)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      v101 = v95;
      v102 = v32;
      v99 = v96;
      v100 = a4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>();
      v85 = v91;
      BidirectionalCollection<>.difference<A>(from:)();
      v86 = v93;
      v87 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v52 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySS_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_w1_wV8SSGATTG50I2UI0dK0VyS2iGTf1cn_nTf4nd_nTm(v87);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v88 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySS_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_w1_wV8SSGATTG50I2UI0dK0VyS2iGTf1cn_nTf4nd_nTm(v88);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v92 + 8))(v85, v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v52;
  }
  if (a4 < 0)
    goto LABEL_101;
  v90[1] = v12;
  v13 = 0;
  v14 = v104;
  v15 = (uint64_t *)(v96 + 8);
  while (a4 != v13)
  {
    v16 = *(v15 - 1);
    v17 = *v15;
    swift_bridgeObjectRetain();
    v18 = swift_isUniquelyReferenced_nonNull_native();
    v101 = v14;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v21 = v14[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      goto LABEL_96;
    v24 = v19;
    if (v14[3] >= v23)
    {
      if ((v18 & 1) != 0)
      {
        v14 = v101;
        if ((v19 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v14 = v101;
        if ((v24 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, v18);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_103;
      v20 = v25;
      v14 = v101;
      if ((v24 & 1) == 0)
      {
LABEL_14:
        v14[(v20 >> 6) + 8] |= 1 << v20;
        v27 = (uint64_t *)(v14[6] + 16 * v20);
        *v27 = v16;
        v27[1] = v17;
        *(_QWORD *)(v14[7] + 8 * v20) = v13;
        v28 = v14[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
          goto LABEL_99;
        v14[2] = v30;
        swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v14[7] + 8 * v20) = v13;
LABEL_5:
    ++v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 += 2;
    if (a4 == v13)
    {
      v104 = v14;
      v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(__int128 *a1, Swift::Int a2, __int128 *a3, Swift::Int a4, Swift::Int a5, uint64_t a6)
{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  char isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Swift::Int v61;
  unint64_t v62;
  unint64_t v63;
  Swift::Int v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  _QWORD *v85;
  unint64_t v86;
  char v87;
  Swift::Int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64_t v94;
  Swift::Int v95;
  Swift::Int v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  Swift::Int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  Swift::Int v114;
  Swift::Int v115;
  __int128 *v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _OWORD v124[3];
  _OWORD v125[3];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _QWORD *v132;

  v115 = a5;
  v117 = a3;
  v118 = a6;
  v116 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CollectionDifference<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v113 = *(_QWORD *)(v8 - 8);
  v114 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v112 = (char *)&v105 - v10;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v132 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [ToolbarStorage.ID : Int], (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  v13 = v12;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    v123 = v11;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0)
        goto LABEL_123;
      v34 = 0;
      v35 = v123;
      v36 = v116;
      while (1)
      {
        if (a2 == v34)
          goto LABEL_118;
        v37 = *v36;
        v38 = v36[2];
        v127 = v36[1];
        v128 = v38;
        v126 = v37;
        outlined retain of ToolbarStorage.ID((uint64_t)&v126);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v125[0] = v35;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(&v126);
        v42 = v35[2];
        v43 = (v40 & 1) == 0;
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
          goto LABEL_119;
        v45 = v40;
        if (v35[3] >= v44)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v35 = *(_QWORD **)&v125[0];
            if ((v40 & 1) == 0)
              goto LABEL_32;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v35 = *(_QWORD **)&v125[0];
            if ((v45 & 1) == 0)
              goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
          v46 = specialized __RawDictionaryStorage.find<A>(_:)(&v126);
          if ((v45 & 1) != (v47 & 1))
            goto LABEL_124;
          v41 = v46;
          v35 = *(_QWORD **)&v125[0];
          if ((v45 & 1) == 0)
          {
LABEL_32:
            v35[(v41 >> 6) + 8] |= 1 << v41;
            v48 = (_OWORD *)(v35[6] + 48 * v41);
            v49 = v126;
            v50 = v128;
            v48[1] = v127;
            v48[2] = v50;
            *v48 = v49;
            *(_QWORD *)(v35[7] + 8 * v41) = v34;
            v51 = v35[2];
            v32 = __OFADD__(v51, 1);
            v52 = v51 + 1;
            if (v32)
              goto LABEL_121;
            v35[2] = v52;
            outlined retain of ToolbarStorage.ID((uint64_t)&v126);
            goto LABEL_23;
          }
        }
        *(_QWORD *)(v35[7] + 8 * v41) = v34;
LABEL_23:
        ++v34;
        swift_bridgeObjectRelease();
        outlined release of ToolbarStorage.ID((uint64_t)&v126);
        v36 += 3;
        if (a2 == v34)
        {
          v123 = v35;
          break;
        }
      }
    }
    if (v132[2] == a4 && v123[2] == a2)
    {
      if (a4 | a2)
      {
        v53 = 0;
        v54 = 0;
        v55 = MEMORY[0x1E0DEE9D8];
        v56 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          while (1)
          {
            v57 = *(_QWORD *)(v55 + 16);
            v58 = *((_QWORD *)v56 + 2);
            if (v58 + v57 > v118)
              goto LABEL_112;
            if (v54 != a2)
              break;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v55 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57 + 1, 1, (char *)v55);
            v60 = *(_QWORD *)(v55 + 16);
            v59 = *(_QWORD *)(v55 + 24);
            if (v60 >= v59 >> 1)
              v55 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, (char *)v55);
            *(_QWORD *)(v55 + 16) = v60 + 1;
            *(_QWORD *)(v55 + 8 * v60 + 32) = v53++;
            v54 = a2;
            if (v53 >= a4)
              goto LABEL_89;
          }
          if (v53 == a4)
          {
            v61 = v54;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58 + 1, 1, v56);
            v63 = *((_QWORD *)v56 + 2);
            v62 = *((_QWORD *)v56 + 3);
            if (v63 >= v62 >> 1)
            {
              v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v56);
              v64 = v61;
              v56 = v98;
            }
            else
            {
              v64 = v61;
            }
            *((_QWORD *)v56 + 2) = v63 + 1;
            *(_QWORD *)&v56[8 * v63 + 32] = v64;
            v54 = v64 + 1;
            v53 = a4;
            goto LABEL_89;
          }
          v111 = v55;
          v112 = v56;
          v114 = v53;
          v115 = v54;
          v65 = &v117[3 * v53];
          v67 = *((_QWORD *)v65 + 1);
          v66 = *((_QWORD *)v65 + 2);
          v109 = *((_QWORD *)v65 + 3);
          v110 = v66;
          v68 = *((_QWORD *)v65 + 5);
          v69 = &v116[3 * v54];
          v71 = *((_QWORD *)v69 + 1);
          v70 = *((_QWORD *)v69 + 2);
          v72 = *((_QWORD *)v69 + 3);
          v107 = *((_QWORD *)v65 + 4);
          v108 = v72;
          v73 = *((_QWORD *)v69 + 5);
          v106 = *((_QWORD *)v69 + 4);
          v121 = *(_QWORD *)v65;
          v122 = v67;
          v119 = *(_QWORD *)v69;
          v120 = v71;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v113 = v71;
          swift_bridgeObjectRetain();
          if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
            break;
          if (v110 != v70)
            break;
          v74 = v73;
          if (v109 != v108)
            break;
          v55 = v111;
          if (!v68)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v74)
              goto LABEL_96;
LABEL_101:
            swift_bridgeObjectRelease();
LABEL_64:
            swift_bridgeObjectRelease();
            goto LABEL_65;
          }
          if (!v74)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_101;
          }
          if (v107 == v106 && v68 == v74)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_96:
            swift_bridgeObjectRelease();
            v96 = v114;
            swift_bridgeObjectRelease();
LABEL_103:
            v53 = v96 + 1;
            v54 = v115 + 1;
            v56 = v112;
            if (v53 >= a4)
              goto LABEL_89;
          }
          else
          {
            LODWORD(v110) = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v96 = v114;
            if ((v110 & 1) != 0)
              goto LABEL_103;
LABEL_65:
            v75 = *v65;
            v76 = v65[2];
            v125[1] = v65[1];
            v125[2] = v76;
            v125[0] = v75;
            v77 = v123;
            v78 = v123[2];
            outlined retain of ToolbarStorage.ID((uint64_t)v125);
            if (v78 && (v79 = specialized __RawDictionaryStorage.find<A>(_:)(v125), (v80 & 1) != 0))
            {
              v81 = 0;
              v82 = *(_QWORD *)(v77[7] + 8 * v79);
            }
            else
            {
              v82 = 0;
              v81 = 1;
            }
            v56 = v112;
            v83 = *v69;
            v84 = v69[2];
            v124[1] = v69[1];
            v124[2] = v84;
            v124[0] = v83;
            v85 = v132;
            if (!v132[2])
              goto LABEL_76;
            outlined retain of ToolbarStorage.ID((uint64_t)v124);
            v86 = specialized __RawDictionaryStorage.find<A>(_:)(v124);
            if ((v87 & 1) == 0)
            {
              outlined release of ToolbarStorage.ID((uint64_t)v124);
LABEL_76:
              outlined release of ToolbarStorage.ID((uint64_t)v125);
              if ((v81 & 1) != 0)
              {
LABEL_77:
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v55 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1, (char *)v55);
                v53 = v114;
                goto LABEL_80;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
              v53 = v114;
LABEL_87:
              v93 = *((_QWORD *)v56 + 2);
              v92 = *((_QWORD *)v56 + 3);
              v94 = v93 + 1;
              v95 = v115;
              if (v93 >= v92 >> 1)
                goto LABEL_108;
              goto LABEL_88;
            }
            v88 = *(_QWORD *)(v85[7] + 8 * v86);
            outlined release of ToolbarStorage.ID((uint64_t)v124);
            outlined release of ToolbarStorage.ID((uint64_t)v125);
            if ((v81 & 1) != 0)
              goto LABEL_77;
            if (v82 >= v115)
            {
              v53 = v114;
              if (v88 < v114)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
                goto LABEL_87;
              }
              if (v88 - v114 < v82 - v115)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  goto LABEL_80;
LABEL_74:
                v55 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1, (char *)v55);
                goto LABEL_80;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
              v95 = v115;
              v93 = *((_QWORD *)v56 + 2);
              v92 = *((_QWORD *)v56 + 3);
              v94 = v93 + 1;
              if (v93 >= v92 >> 1)
              {
LABEL_108:
                v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v94, 1, v56);
                v95 = v115;
                v56 = v97;
              }
LABEL_88:
              *((_QWORD *)v56 + 2) = v94;
              *(_QWORD *)&v56[8 * v93 + 32] = v95;
              v54 = v95 + 1;
              if (v53 >= a4)
              {
LABEL_89:
                if (v54 >= a2)
                  goto LABEL_112;
              }
            }
            else
            {
              v89 = swift_isUniquelyReferenced_nonNull_native();
              v53 = v114;
              if ((v89 & 1) == 0)
                goto LABEL_74;
LABEL_80:
              v91 = *(_QWORD *)(v55 + 16);
              v90 = *(_QWORD *)(v55 + 24);
              v54 = v115;
              if (v91 >= v90 >> 1)
              {
                v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, (char *)v55);
                v54 = v115;
                v55 = (uint64_t)v99;
              }
              *(_QWORD *)(v55 + 16) = v91 + 1;
              *(_QWORD *)(v55 + 8 * v91 + 32) = v53++;
              if (v53 >= a4)
                goto LABEL_89;
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = v111;
        goto LABEL_64;
      }
      v56 = (char *)MEMORY[0x1E0DEE9D8];
      v55 = MEMORY[0x1E0DEE9D8];
LABEL_112:
      if (*((_QWORD *)v56 + 2) + *(_QWORD *)(v55 + 16) <= v118)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = 0;
      }
    }
    else
    {
      *(_QWORD *)&v125[0] = v116;
      *((_QWORD *)&v125[0] + 1) = a2;
      *(_QWORD *)&v124[0] = v117;
      *((_QWORD *)&v124[0] + 1) = a4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID();
      v100 = v112;
      BidirectionalCollection<>.difference<A>(from:)();
      v101 = v114;
      v102 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA14iJ11V2IDVGAXTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v102);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v103 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA14iJ11V2IDVGAXTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v103);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v113 + 8))(v100, v101);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v55;
  }
  if (a4 < 0)
    goto LABEL_122;
  v111 = v13;
  v14 = 0;
  v15 = v132;
  v16 = v117;
  while (a4 != v14)
  {
    v17 = *v16;
    v18 = v16[2];
    v130 = v16[1];
    v131 = v18;
    v129 = v17;
    outlined retain of ToolbarStorage.ID((uint64_t)&v129);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v126 = v15;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(&v129);
    v22 = v15[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      goto LABEL_117;
    v25 = v20;
    if (v15[3] >= v24)
    {
      if ((v19 & 1) != 0)
      {
        v15 = (_QWORD *)v126;
        if ((v20 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v15 = (_QWORD *)v126;
        if ((v25 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v19);
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(&v129);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_124;
      v21 = v26;
      v15 = (_QWORD *)v126;
      if ((v25 & 1) == 0)
      {
LABEL_14:
        v15[(v21 >> 6) + 8] |= 1 << v21;
        v28 = (_OWORD *)(v15[6] + 48 * v21);
        v29 = v129;
        v30 = v131;
        v28[1] = v130;
        v28[2] = v30;
        *v28 = v29;
        *(_QWORD *)(v15[7] + 8 * v21) = v14;
        v31 = v15[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_120;
        v15[2] = v33;
        outlined retain of ToolbarStorage.ID((uint64_t)&v129);
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v15[7] + 8 * v21) = v14;
LABEL_5:
    ++v14;
    swift_bridgeObjectRelease();
    outlined release of ToolbarStorage.ID((uint64_t)&v129);
    v16 += 3;
    if (a4 == v14)
    {
      v132 = v15;
      v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(__int128 *a1, Swift::Int a2, __int128 *a3, Swift::Int a4, char *a5, uint64_t a6)
{
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  Swift::Int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  Swift::Int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t result;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  Swift::Int v115;
  char *v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t v119;
  _QWORD *v120;
  _OWORD v121[4];
  _OWORD v122[4];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _QWORD *v131;

  v116 = a5;
  v118 = a3;
  v119 = a6;
  v117 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionDifference<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v114 = *(_QWORD *)(v8 - 8);
  v115 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v113 = (char *)&v109 - v10;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v131 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [KeyboardShortcutBinding : Int], (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  v13 = v12;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    v120 = v11;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0)
        goto LABEL_128;
      v36 = 0;
      v37 = v120;
      v38 = v117;
      while (1)
      {
        if (a2 == v36)
          goto LABEL_123;
        v39 = *v38;
        v40 = v38[1];
        v41 = v38[3];
        v125 = v38[2];
        v126 = v41;
        v123 = v39;
        v124 = v40;
        outlined retain of KeyboardShortcutBinding((uint64_t)&v123);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v122[0] = v37;
        v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v123);
        v45 = v37[2];
        v46 = (v43 & 1) == 0;
        v47 = v45 + v46;
        if (__OFADD__(v45, v46))
          goto LABEL_124;
        v48 = v43;
        if (v37[3] >= v47)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v37 = *(_QWORD **)&v122[0];
            if ((v43 & 1) == 0)
              goto LABEL_32;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v37 = *(_QWORD **)&v122[0];
            if ((v48 & 1) == 0)
              goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
          v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v123);
          if ((v48 & 1) != (v50 & 1))
            goto LABEL_129;
          v44 = v49;
          v37 = *(_QWORD **)&v122[0];
          if ((v48 & 1) == 0)
          {
LABEL_32:
            v37[(v44 >> 6) + 8] |= 1 << v44;
            v51 = (_OWORD *)(v37[6] + (v44 << 6));
            v52 = v123;
            v53 = v124;
            v54 = v126;
            v51[2] = v125;
            v51[3] = v54;
            *v51 = v52;
            v51[1] = v53;
            *(_QWORD *)(v37[7] + 8 * v44) = v36;
            v55 = v37[2];
            v34 = __OFADD__(v55, 1);
            v56 = v55 + 1;
            if (v34)
              goto LABEL_126;
            v37[2] = v56;
            outlined retain of KeyboardShortcutBinding((uint64_t)&v123);
            goto LABEL_23;
          }
        }
        *(_QWORD *)(v37[7] + 8 * v44) = v36;
LABEL_23:
        ++v36;
        swift_bridgeObjectRelease();
        outlined release of KeyboardShortcutBinding((uint64_t)&v123);
        v38 += 4;
        if (a2 == v36)
        {
          v120 = v37;
          break;
        }
      }
    }
    if (v131[2] == a4 && v120[2] == a2)
    {
      if (a4 | a2)
      {
        v57 = 0;
        v58 = 0;
        v59 = MEMORY[0x1E0DEE9D8];
        v60 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v61 = *(_QWORD *)(v59 + 16);
              v62 = *((_QWORD *)v60 + 2);
              if (v62 + v61 > v119)
                goto LABEL_117;
              if (v58 != a2)
                break;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61 + 1, 1, (char *)v59);
              v64 = *(_QWORD *)(v59 + 16);
              v63 = *(_QWORD *)(v59 + 24);
              if (v64 >= v63 >> 1)
                v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, (char *)v59);
              *(_QWORD *)(v59 + 16) = v64 + 1;
              *(_QWORD *)(v59 + 8 * v64 + 32) = v57++;
              v58 = a2;
              if (v57 >= a4)
                goto LABEL_41;
            }
            if (v57 == a4)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62 + 1, 1, v60);
              v66 = *((_QWORD *)v60 + 2);
              v65 = *((_QWORD *)v60 + 3);
              if (v66 >= v65 >> 1)
                v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v60);
              *((_QWORD *)v60 + 2) = v66 + 1;
              *(_QWORD *)&v60[8 * v66 + 32] = v58++;
              v57 = a4;
              goto LABEL_41;
            }
            v115 = v58;
            v116 = v60;
            v113 = (char *)v57;
            v114 = v59;
            v67 = &v118[4 * v57];
            v68 = *((_QWORD *)v67 + 2);
            v69 = *((unsigned __int8 *)v67 + 24);
            v71 = *((_QWORD *)v67 + 6);
            v70 = *((_QWORD *)v67 + 7);
            v72 = &v117[4 * v58];
            v73 = *((unsigned __int8 *)v72 + 24);
            v75 = *((_QWORD *)v72 + 6);
            v74 = *((_QWORD *)v72 + 7);
            if (*(_QWORD *)v67 != *(_QWORD *)v72 || *((_QWORD *)v67 + 1) != *((_QWORD *)v72 + 1))
              break;
            if (v68 != *((_QWORD *)v72 + 2) || v69 != v73)
              goto LABEL_76;
LABEL_69:
            if (v70)
            {
              if (!v74 || (v71 != v75 || v70 != v74) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_76;
            }
            else if (v74)
            {
              goto LABEL_76;
            }
            v59 = v114;
            v57 = (Swift::Int)(v113 + 1);
            v58 = v115;
            v60 = v116;
LABEL_104:
            ++v58;
            if (v57 >= a4)
              goto LABEL_41;
          }
          v111 = *((_QWORD *)v72 + 2);
          v112 = v68;
          v109 = v73;
          v110 = v69;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && v112 == v111 && v110 == v109)
            goto LABEL_69;
LABEL_76:
          v78 = *v67;
          v79 = v67[1];
          v80 = v67[3];
          v122[2] = v67[2];
          v122[3] = v80;
          v122[0] = v78;
          v122[1] = v79;
          v81 = v120;
          v82 = v120[2];
          outlined retain of KeyboardShortcutBinding((uint64_t)v122);
          if (v82 && (v83 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v122), (v84 & 1) != 0))
          {
            v85 = 0;
            v86 = *(_QWORD *)(v81[7] + 8 * v83);
          }
          else
          {
            v86 = 0;
            v85 = 1;
          }
          v87 = *v72;
          v88 = v72[1];
          v89 = v72[3];
          v121[2] = v72[2];
          v121[3] = v89;
          v121[0] = v87;
          v121[1] = v88;
          v90 = v131;
          v58 = v115;
          if (!v131[2])
            goto LABEL_90;
          outlined retain of KeyboardShortcutBinding((uint64_t)v121);
          v91 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v121);
          if ((v92 & 1) == 0)
          {
            outlined release of KeyboardShortcutBinding((uint64_t)v121);
LABEL_90:
            outlined release of KeyboardShortcutBinding((uint64_t)v122);
            if ((v85 & 1) != 0)
            {
LABEL_91:
              v59 = v114;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, (char *)v59);
              v57 = (Swift::Int)v113;
              v97 = *(_QWORD *)(v59 + 16);
              v99 = *(_QWORD *)(v59 + 24);
              v98 = v97 + 1;
              if (v97 >= v99 >> 1)
                v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v97 + 1, 1, (char *)v59);
              v60 = v116;
              goto LABEL_96;
            }
            v60 = v116;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v60 + 2) + 1, 1, v60);
            v57 = (Swift::Int)v113;
            v101 = *((_QWORD *)v60 + 2);
            v100 = *((_QWORD *)v60 + 3);
            v102 = v101 + 1;
            if (v101 >= v100 >> 1)
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v100 > 1), v101 + 1, 1, v60);
            v59 = v114;
LABEL_103:
            *((_QWORD *)v60 + 2) = v102;
            *(_QWORD *)&v60[8 * v101 + 32] = v58;
            goto LABEL_104;
          }
          v93 = *(_QWORD *)(v90[7] + 8 * v91);
          outlined release of KeyboardShortcutBinding((uint64_t)v121);
          outlined release of KeyboardShortcutBinding((uint64_t)v122);
          if ((v85 & 1) != 0)
            goto LABEL_91;
          v94 = v86 - v58;
          if (v86 >= v58)
          {
            v57 = (Swift::Int)v113;
            v59 = v114;
            if (v93 >= (uint64_t)v113)
            {
              v60 = v116;
              if (v93 - (uint64_t)v113 < v94)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, (char *)v59);
                goto LABEL_87;
              }
            }
            else
            {
              v60 = v116;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v60 + 2) + 1, 1, v60);
            v101 = *((_QWORD *)v60 + 2);
            v103 = *((_QWORD *)v60 + 3);
            v102 = v101 + 1;
            if (v101 >= v103 >> 1)
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v103 > 1), v101 + 1, 1, v60);
            goto LABEL_103;
          }
          v59 = v114;
          v95 = swift_isUniquelyReferenced_nonNull_native();
          v57 = (Swift::Int)v113;
          if ((v95 & 1) == 0)
            v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, (char *)v59);
          v60 = v116;
LABEL_87:
          v97 = *(_QWORD *)(v59 + 16);
          v96 = *(_QWORD *)(v59 + 24);
          v98 = v97 + 1;
          if (v97 >= v96 >> 1)
            v59 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, (char *)v59);
LABEL_96:
          *(_QWORD *)(v59 + 16) = v98;
          *(_QWORD *)(v59 + 8 * v97 + 32) = v57++;
          if (v57 >= a4)
          {
LABEL_41:
            if (v58 >= a2)
              goto LABEL_117;
          }
        }
      }
      v60 = (char *)MEMORY[0x1E0DEE9D8];
      v59 = MEMORY[0x1E0DEE9D8];
LABEL_117:
      if (*((_QWORD *)v60 + 2) + *(_QWORD *)(v59 + 16) <= v119)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v59 = 0;
      }
    }
    else
    {
      *(_QWORD *)&v122[0] = v117;
      *((_QWORD *)&v122[0] + 1) = a2;
      *(_QWORD *)&v121[0] = v118;
      *((_QWORD *)&v121[0] + 1) = a4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding();
      v104 = v113;
      BidirectionalCollection<>.difference<A>(from:)();
      v105 = v115;
      v106 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v59 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI23KeyboardShortcutBindingV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA23ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v107 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI23KeyboardShortcutBindingV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA23ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v107);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v114 + 8))(v104, v105);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v59;
  }
  if (a4 < 0)
    goto LABEL_127;
  v112 = v13;
  v14 = 0;
  v15 = v131;
  v16 = v118;
  while (a4 != v14)
  {
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[3];
    v129 = v16[2];
    v130 = v19;
    v127 = v17;
    v128 = v18;
    outlined retain of KeyboardShortcutBinding((uint64_t)&v127);
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v123 = v15;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v127);
    v23 = v15[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      goto LABEL_122;
    v26 = v21;
    if (v15[3] >= v25)
    {
      if ((v20 & 1) != 0)
      {
        v15 = (_QWORD *)v123;
        if ((v21 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v15 = (_QWORD *)v123;
        if ((v26 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v127);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_129;
      v22 = v27;
      v15 = (_QWORD *)v123;
      if ((v26 & 1) == 0)
      {
LABEL_14:
        v15[(v22 >> 6) + 8] |= 1 << v22;
        v29 = (_OWORD *)(v15[6] + (v22 << 6));
        v30 = v127;
        v31 = v128;
        v32 = v130;
        v29[2] = v129;
        v29[3] = v32;
        *v29 = v30;
        v29[1] = v31;
        *(_QWORD *)(v15[7] + 8 * v22) = v14;
        v33 = v15[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_125;
        v15[2] = v35;
        outlined retain of KeyboardShortcutBinding((uint64_t)&v127);
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v15[7] + 8 * v22) = v14;
LABEL_5:
    ++v14;
    swift_bridgeObjectRelease();
    outlined release of KeyboardShortcutBinding((uint64_t)&v127);
    v16 += 4;
    if (a4 == v14)
    {
      v131 = v15;
      v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(_QWORD *a1, Swift::Int a2, uint64_t a3, Swift::Int a4, Swift::Int a5, uint64_t a6)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  char v65;
  Swift::Int v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  Swift::Int v75;
  BOOL v76;
  Swift::Int v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  Swift::Int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  Swift::Int v92;
  _QWORD *v93;
  Swift::Int v94;
  _QWORD *v95;
  _QWORD *v96;

  v87 = a5;
  v89 = a1;
  v90 = a3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionDifference<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0]);
  v85 = *((_QWORD *)v9 - 1);
  v86 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v84 = (char *)&v83 - v11;
  v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v96 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  type metadata accessor for [Int : Int](0, &lazy cache variable for type metadata for [Int : Int]);
  v14 = v13;
  Dictionary.reserveCapacity(_:)(a4);
  v88 = a6;
  if (!a4)
  {
LABEL_19:
    v95 = v12;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0)
        goto LABEL_109;
      v31 = 0;
      v32 = v95;
      while (1)
      {
        if (a2 == v31)
          goto LABEL_104;
        v33 = v89[v31];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v93 = v32;
        v36 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
        v37 = v32[2];
        v38 = (v35 & 1) == 0;
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          goto LABEL_105;
        v40 = v35;
        if (v32[3] >= v39)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v32 = v93;
            if ((v35 & 1) == 0)
              goto LABEL_32;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v32 = v93;
            if ((v40 & 1) == 0)
              goto LABEL_32;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
          v41 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_110;
          v36 = v41;
          v32 = v93;
          if ((v40 & 1) == 0)
          {
LABEL_32:
            v32[(v36 >> 6) + 8] |= 1 << v36;
            v43 = 8 * v36;
            *(_QWORD *)(v32[6] + v43) = v33;
            *(_QWORD *)(v32[7] + v43) = v31;
            v44 = v32[2];
            v29 = __OFADD__(v44, 1);
            v45 = v44 + 1;
            if (v29)
              goto LABEL_107;
            v32[2] = v45;
            goto LABEL_23;
          }
        }
        *(_QWORD *)(v32[7] + 8 * v36) = v31;
LABEL_23:
        ++v31;
        swift_bridgeObjectRelease();
        if (a2 == v31)
        {
          v95 = v32;
          a6 = v88;
          break;
        }
      }
    }
    if (v96[2] == a4 && v95[2] == a2)
    {
      if (a4 | a2)
      {
        v46 = 0;
        v47 = 0;
        v48 = MEMORY[0x1E0DEE9D8];
        v49 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v50 = *(_QWORD *)(v48 + 16);
              v51 = *((_QWORD *)v49 + 2);
              if (v51 + v50 > a6)
                goto LABEL_98;
              if (v47 != a2)
                break;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, (char *)v48);
              v53 = *(_QWORD *)(v48 + 16);
              v52 = *(_QWORD *)(v48 + 24);
              if (v53 >= v52 >> 1)
                v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, (char *)v48);
              *(_QWORD *)(v48 + 16) = v53 + 1;
              *(_QWORD *)(v48 + 8 * v53 + 32) = v46++;
              v47 = a2;
              if (v46 >= a4)
                goto LABEL_41;
            }
            if (v46 == a4)
            {
              v54 = v47;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51 + 1, 1, v49);
              v56 = *((_QWORD *)v49 + 2);
              v55 = *((_QWORD *)v49 + 3);
              if (v56 >= v55 >> 1)
                v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v49);
              *((_QWORD *)v49 + 2) = v56 + 1;
              *(_QWORD *)&v49[8 * v56 + 32] = v54;
              v47 = v54 + 1;
              v46 = a4;
              goto LABEL_41;
            }
            v57 = *(_QWORD *)(v90 + 8 * v46);
            if (v57 != v89[v47])
              break;
            ++v46;
LABEL_84:
            ++v47;
            if (v46 >= a4)
              goto LABEL_41;
          }
          v86 = v49;
          v87 = v47;
          v58 = v95;
          if (v95[2] && (v59 = specialized __RawDictionaryStorage.find<A>(_:)(v57), (v60 & 1) != 0))
          {
            v61 = 0;
            v62 = *(_QWORD *)(v58[7] + 8 * v59);
          }
          else
          {
            v62 = 0;
            v61 = 1;
          }
          v63 = v96;
          if (!v96[2] || (v64 = specialized __RawDictionaryStorage.find<A>(_:)(v89[v87]), (v65 & 1) == 0))
          {
            if ((v61 & 1) == 0)
            {
              v49 = v86;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51 + 1, 1, v49);
              a6 = v88;
              goto LABEL_81;
            }
LABEL_71:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, (char *)v48);
            a6 = v88;
            v69 = *(_QWORD *)(v48 + 16);
            v71 = *(_QWORD *)(v48 + 24);
            v70 = v69 + 1;
            if (v69 >= v71 >> 1)
              v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v69 + 1, 1, (char *)v48);
            v49 = v86;
            goto LABEL_76;
          }
          if (v61)
            goto LABEL_71;
          v66 = v62 - v87;
          if (v62 < v87)
            break;
          v75 = *(_QWORD *)(v63[7] + 8 * v64);
          v76 = v75 < v46;
          v77 = v75 - v46;
          a6 = v88;
          if (v76)
          {
            v49 = v86;
LABEL_94:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51 + 1, 1, v49);
LABEL_81:
            v73 = *((_QWORD *)v49 + 2);
            v72 = *((_QWORD *)v49 + 3);
            if (v73 >= v72 >> 1)
              v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v49);
            *((_QWORD *)v49 + 2) = v73 + 1;
            v74 = &v49[8 * v73];
            v47 = v87;
            *((_QWORD *)v74 + 4) = v87;
            goto LABEL_84;
          }
          v49 = v86;
          if (v77 >= v66)
            goto LABEL_94;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, (char *)v48);
          v69 = *(_QWORD *)(v48 + 16);
          v68 = *(_QWORD *)(v48 + 24);
          v70 = v69 + 1;
          if (v69 >= v68 >> 1)
            goto LABEL_93;
LABEL_76:
          *(_QWORD *)(v48 + 16) = v70;
          *(_QWORD *)(v48 + 8 * v69 + 32) = v46++;
          v47 = v87;
          if (v46 >= a4)
          {
LABEL_41:
            if (v47 >= a2)
              goto LABEL_98;
          }
        }
        v67 = swift_isUniquelyReferenced_nonNull_native();
        a6 = v88;
        if ((v67 & 1) == 0)
          v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, (char *)v48);
        v69 = *(_QWORD *)(v48 + 16);
        v68 = *(_QWORD *)(v48 + 24);
        v70 = v69 + 1;
        v49 = v86;
        if (v69 < v68 >> 1)
          goto LABEL_76;
LABEL_93:
        v48 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v70, 1, (char *)v48);
        goto LABEL_76;
      }
      v49 = (char *)MEMORY[0x1E0DEE9D8];
      v48 = MEMORY[0x1E0DEE9D8];
LABEL_98:
      if (*((_QWORD *)v49 + 2) + *(_QWORD *)(v48 + 16) <= a6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      v93 = v89;
      v94 = a2;
      v91 = v90;
      v92 = a4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>();
      v78 = v84;
      BidirectionalCollection<>.difference<A>(from:)();
      v79 = v86;
      v80 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      v48 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySi_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f30OyAL_GXEfU_AA13CountingIndexVyw86G_AvA0tuC0VyAA013ShadowSectionC0VyAA22TableDataSourceAdaptorVGGAXys15LazyMapSequenceVyV28AA0X8SectionsV4ItemVGSiGGTG50I2UI0dK0VyAO13CountingIndexVySiGATGTf1cn_nTf4nd_nTm(v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v81 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySi_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f30OyAL_GXEfU_AA13CountingIndexVyw86G_AvA0tuC0VyAA013ShadowSectionC0VyAA22TableDataSourceAdaptorVGGAXys15LazyMapSequenceVyV28AA0X8SectionsV4ItemVGSiGGTG50I2UI0dK0VyAO13CountingIndexVySiGATGTf1cn_nTf4nd_nTm(v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v85 + 8))(v78, v79);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v48;
  }
  if (a4 < 0)
    goto LABEL_108;
  v83 = v14;
  v15 = 0;
  v16 = v96;
  while (a4 != v15)
  {
    v17 = *(_QWORD *)(v90 + 8 * v15);
    v18 = swift_isUniquelyReferenced_nonNull_native();
    v93 = v16;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
    v21 = v16[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      goto LABEL_103;
    v24 = v19;
    if (v16[3] >= v23)
    {
      if ((v18 & 1) != 0)
      {
        v16 = v93;
        if ((v19 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v16 = v93;
        if ((v24 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, v18);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_110;
      v20 = v25;
      v16 = v93;
      if ((v24 & 1) == 0)
      {
LABEL_14:
        v16[(v20 >> 6) + 8] |= 1 << v20;
        v27 = 8 * v20;
        *(_QWORD *)(v16[6] + v27) = v17;
        *(_QWORD *)(v16[7] + v27) = v15;
        v28 = v16[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
          goto LABEL_106;
        v16[2] = v30;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(v16[7] + 8 * v20) = v15;
LABEL_5:
    ++v15;
    swift_bridgeObjectRelease();
    if (a4 == v15)
    {
      v96 = v16;
      a6 = v88;
      v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void key path getter for ListUpdate.inverse : <A>ListUpdate<A.SectionIDs.Index, A.RowIDs.Index>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

void sub_18789EB44(uint64_t a1)
{
  uint64_t v1;

  ListUpdate.inverse.getter(a1, v1);
}

_QWORD *specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v18;
  _BOOL8 v20;

  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v5 = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(v5 + 16) <= a3)
  {
LABEL_49:
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    goto LABEL_47;
  v7 = *(_QWORD *)(v5 + 96 * a3 + 112);
  v8 = a2 + 40 * v6 + 8;
  while (1)
  {
    v9 = *(_QWORD *)(v8 - 16);
    v10 = *(_QWORD *)(v8 - 8);
    v11 = *(unsigned __int8 *)(v8 + 16);
    if (v11 == 3)
    {
      if (v9 == a3)
      {
        v15 = a4 >= v10 && v7 < a4;
        a4 -= v15;
      }
      goto LABEL_6;
    }
    if (v11 != 4)
      break;
    if (v9 == a3 && a4 >= v10 && __OFADD__(a4++, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
LABEL_6:
    v8 -= 40;
    if (!--v6)
      goto LABEL_47;
  }
  if (v11 != 5)
    goto LABEL_6;
  v13 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  if (v9 == a3)
  {
    if (v10 == a4)
    {
      a3 = *(_QWORD *)v8;
      a4 = *(_QWORD *)(v8 + 8);
      goto LABEL_6;
    }
    v20 = v10 < a4 && v7 < a4;
    v18 = a4 - v20;
    if (v12 >= v10)
      goto LABEL_39;
LABEL_30:
    if (v13 != a3)
      goto LABEL_5;
    goto LABEL_43;
  }
  v18 = a4;
  if (v13 != a3)
    goto LABEL_6;
  if (v12 < v10)
    goto LABEL_30;
LABEL_39:
  if (v13 != a3)
  {
LABEL_5:
    a4 = v18;
    goto LABEL_6;
  }
  if (v9 == a3)
  {
    if (v12 < a4)
      goto LABEL_44;
    goto LABEL_5;
  }
LABEL_43:
  if (a4 < v12)
    goto LABEL_5;
LABEL_44:
  a4 = v18 + 1;
  if (!__OFADD__(v18, 1))
    goto LABEL_6;
  __break(1u);
LABEL_47:
  *result = a4;
  return (_QWORD *)a3;
}

_QWORD *specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v20;
  _BOOL8 v22;

  if ((a4 & 0x8000000000000000) != 0)
    goto LABEL_9;
  v6 = *(_QWORD *)(v12 + 40);
  a6 = *(_QWORD *)(v6 + 16);
  if (a6 <= a4)
    goto LABEL_10;
  a6 = 0;
  v6 = *(_QWORD *)(v6 + 96 * a4 + 112);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  if (!v7)
    goto LABEL_15;
LABEL_4:
  if (a6 < v7)
  {
    v13 = a2 + 40 * a6 + 32;
    v9 = a6 + 1 == v7;
    if (a6 + 1 == v7)
      a6 = 0;
    else
      ++a6;
    goto LABEL_18;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
LABEL_11:
  v14 = a4;
  if (__OFADD__(v10++, 1))
    __break(1u);
  while (1)
  {
    a4 = v14;
    a5 = v10;
    if (!v9)
      goto LABEL_4;
LABEL_15:
    if (a6 == v8)
    {
      *result = a5;
      return (_QWORD *)a4;
    }
    if (a6 >= v8)
      break;
    v13 = a3 + 40 * a6++ + 32;
    v9 = 1;
LABEL_18:
    v16 = *(unsigned __int8 *)(v13 + 32);
    v17 = *(_QWORD *)v13;
    v18 = *(_QWORD *)(v13 + 8);
    switch(v16)
    {
      case 3:
        if (v17 != a4)
          goto LABEL_49;
        v22 = a5 >= v18 && v6 < a5;
        v10 = a5 - v22;
        v14 = a4;
        break;
      case 4:
        if (v17 != a4 || a5 < v18)
          goto LABEL_49;
        v14 = a4;
        v10 = a5 + 1;
        if (__OFADD__(a5, 1))
        {
          __break(1u);
LABEL_45:
          v10 = a5;
          if (v14 == a4)
            goto LABEL_46;
LABEL_49:
          v14 = a4;
          v10 = a5;
        }
        break;
      case 5:
        v14 = *(_QWORD *)(v13 + 16);
        v11 = *(_QWORD *)(v13 + 24);
        if (v17 != a4)
          goto LABEL_45;
        v10 = *(_QWORD *)(v13 + 24);
        if (v18 != a5)
        {
          v20 = v18 < a5 && v6 < a5;
          v10 = a5 - v20;
LABEL_46:
          if (v11 >= v18)
          {
            if (v14 != a4)
              goto LABEL_55;
            if (v17 == a4)
            {
              if (v11 < a5)
                goto LABEL_11;
              goto LABEL_55;
            }
          }
          else if (v14 != a4)
          {
            goto LABEL_55;
          }
          if (a5 >= v11)
            goto LABEL_11;
LABEL_55:
          v14 = a4;
        }
        break;
      default:
        goto LABEL_49;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t result;
  uint64_t v5;
  int v6;
  BOOL v7;
  _BOOL8 v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL8 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return a2;
  for (i = a1 + 40 * v2; ; i -= 40)
  {
    v5 = *(_QWORD *)(i - 8);
    v6 = *(unsigned __int8 *)(i + 24);
    if (!*(_BYTE *)(i + 24))
    {
      v12 = a2 > 0 && a2 >= v5;
      result = a2 - v12;
      goto LABEL_4;
    }
    if (v6 == 1)
      break;
    if (v6 != 2)
      goto LABEL_3;
    result = *(_QWORD *)i;
    if (v5 != a2)
    {
      v7 = a2 > 0 && v5 < a2;
      v8 = v7;
      v9 = a2 - v8;
      v10 = result >= v5 ? result < a2 : a2 >= result;
      result = v9;
      if (v10)
      {
        result = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return a2;
        }
      }
    }
LABEL_4:
    a2 = result;
    if (!--v2)
      return result;
  }
  if (a2 < v5)
  {
LABEL_3:
    result = a2;
    goto LABEL_4;
  }
  result = a2 + 1;
  if (!__OFADD__(a2, 1))
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t specialized ShadowSectionCollection.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;

  result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, a2, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  v5 = 0;
  v6 = *(_QWORD *)(a1[5] + 16);
  v8 = a1[22];
  v7 = a1[23];
  v9 = *(_QWORD *)(v7 + 16);
  v10 = v9 == 0;
  v11 = *(_QWORD *)(v8 + 16);
  while (v10)
  {
    if (v5 == v11)
      goto LABEL_16;
    if (v5 >= v11)
      goto LABEL_18;
    v13 = v8 + 32 + 40 * v5++;
    v10 = 1;
LABEL_11:
    v14 = *(unsigned __int8 *)(v13 + 32);
    if (v14 == 1)
    {
      v12 = __OFADD__(v6++, 1);
      if (v12)
        goto LABEL_19;
    }
    else if (!v14)
    {
      v12 = __OFSUB__(v6--, 1);
      if (v12)
      {
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of ShadowListUpdateRecorder<TableDataSourceAdaptor>((uint64_t)a1);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(a2 + 192) = v6;
        return result;
      }
    }
  }
  if (v5 < v9)
  {
    v13 = v7 + 32 + 40 * v5;
    v10 = v5 + 1 == v9;
    if (v5 + 1 == v9)
      v5 = 0;
    else
      ++v5;
    goto LABEL_11;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized ShadowRowCollection.init(_:section:)@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, a3, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  *(_QWORD *)(a3 + 224) = a2;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_37;
  v7 = a1[5];
  if (*(_QWORD *)(v7 + 16) > a2)
  {
    v8 = 0;
    v9 = v7 + 96 * a2;
    result = *(_QWORD *)(v9 + 96);
    v10 = *(_BYTE *)(v9 + 104);
    v11 = *(_QWORD *)(v9 + 112);
    v12 = *(_QWORD *)(v9 + 120);
    *(_QWORD *)(a3 + 192) = result;
    *(_BYTE *)(a3 + 200) = v10;
    *(_QWORD *)(a3 + 208) = v11;
    *(_QWORD *)(a3 + 216) = v12;
    v14 = a1[22];
    v13 = a1[23];
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v15 == 0;
    v17 = *(_QWORD *)(v14 + 16);
    while (1)
    {
      if (v16)
      {
        if (v8 == v17)
          goto LABEL_34;
        if (v8 >= v17)
          goto LABEL_36;
        v19 = v14 + 32 + 40 * v8++;
        v16 = 1;
      }
      else
      {
        if (v8 >= v15)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          break;
        }
        v19 = v13 + 32 + 40 * v8;
        v16 = v8 + 1 == v15;
        if (v8 + 1 == v15)
          v8 = 0;
        else
          ++v8;
      }
      v20 = *(unsigned __int8 *)(v19 + 32);
      v21 = *(_QWORD *)v19;
      if (v20 == 5)
      {
        v23 = *(_QWORD *)(v19 + 16);
        if (v21 == a2)
        {
          if (v23 != a2)
          {
            v22 = __OFSUB__(v12--, 1);
            if (v22)
              goto LABEL_40;
          }
        }
        else if (v23 == a2)
        {
          v22 = __OFADD__(v12++, 1);
          if (v22)
            goto LABEL_41;
        }
      }
      else if (v20 == 4)
      {
        if (v21 == a2)
        {
          v22 = __OFADD__(v12++, 1);
          if (v22)
            goto LABEL_39;
        }
      }
      else if (v20 == 3 && v21 == a2)
      {
        v22 = __OFSUB__(v12--, 1);
        if (v22)
        {
          __break(1u);
LABEL_34:
          outlined copy of ResolvedTableRowIDs.Storage(result, v10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of ShadowListUpdateRecorder<TableDataSourceAdaptor>((uint64_t)a1);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          *(_QWORD *)(a3 + 232) = v12;
          return result;
        }
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized ShadowRowCollection.endIndex.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0[26];
  v2 = v0[27];
  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
  }
  else
  {
    v5 = v0[22];
    v4 = v0[23];
    v6 = *(_QWORD *)(v4 + 16);
    if (v6 || (v6 = *(_QWORD *)(v5 + 16)) != 0)
    {
      specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v8, v4, v5, v0[28], v3, v6);
      return v8;
    }
    return v3;
  }
  return result;
}

uint64_t specialized ShadowRowCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  void (*v16)(_QWORD *__return_ptr, unint64_t);
  _QWORD v17[6];
  uint64_t v18;

  v4 = result;
  v6 = v3[28];
  v8 = v3[22];
  v7 = v3[23];
  if (*(_QWORD *)(v7 + 16) || *(_QWORD *)(v8 + 16))
  {
    MEMORY[0x1E0C80A78](result, a2);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    v6 = (unint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v18, updated, v6, v4);
    result = swift_bridgeObjectRelease();
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v18 = result;
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_13;
LABEL_4:
  v10 = v3[5];
  if (v6 >= *(_QWORD *)(v10 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = v10 + 96 * v6;
  v12 = *(_QWORD *)(v11 + 112);
  v13 = v18 - v12;
  if (__OFSUB__(v18, v12))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = *(_QWORD **)(v11 + 96);
  v15 = *(_BYTE *)(v11 + 104);
  if (!v15)
  {
    v16 = *(void (**)(_QWORD *__return_ptr, unint64_t))(*v14 + 104);
    swift_retain();
    v16(v17, v13);
    goto LABEL_11;
  }
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v13 < v14[2])
  {
    outlined init with copy of TableRowID((uint64_t)&v14[6 * v13 + 4], (uint64_t)v17);
    swift_bridgeObjectRetain();
LABEL_11:
    outlined init with take of TableRowID((uint64_t)v17, a3);
    return outlined consume of ResolvedTableRowIDs.Storage((uint64_t)v14, v15);
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t *specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v3 = *(_QWORD *)(a2 + 40);
  if (v2 >= *(_QWORD *)(v3 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v4 = v3 + 96 * v2;
  v5 = *(_QWORD *)(v4 + 112);
  v6 = *(_QWORD *)(v4 + 120);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  if (!v7)
    return (unint64_t *)(v5 != v8);
LABEL_7:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<TableRowList.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<TableRowList.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<TableRowList.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<TableRowList.Key>, (uint64_t)&type metadata for TableRowList.Key, (uint64_t)&protocol witness table for TableRowList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<TableRowList.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static CollectionViewTableRoot._makeView(view:inputs:));
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<TableColumnListKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<TableColumnListKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<TableColumnListKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<TableColumnListKey>, (uint64_t)&type metadata for TableColumnListKey, (uint64_t)&protocol witness table for TableColumnListKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<TableColumnListKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #2 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in static CollectionViewTableRoot._makeView(view:inputs:));
}

uint64_t outlined init with copy of UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UpdateCollectionViewTableCoordinator(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator;
  if (!lazy protocol witness table cache variable for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateCollectionViewTableCoordinator, &type metadata for UpdateCollectionViewTableCoordinator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator);
  }
  return result;
}

uint64_t outlined destroy of UpdateCollectionViewTableCoordinator(uint64_t a1)
{
  destroy for UpdateCollectionViewTableCoordinator(a1);
  return a1;
}

void type metadata accessor for External<BridgedListState>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
}

void type metadata accessor for External<Scrollable>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<Scrollable>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>);
  }
}

uint64_t lazy protocol witness table accessor for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18789F68C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryProvider and conformance ScrollGeometryProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollGeometryProvider, &type metadata for ScrollGeometryProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollGeometryProvider, &unk_1E1ADDC08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryProvider and conformance ScrollGeometryProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6648], MEMORY[0x1E0CE6660]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE61D0], MEMORY[0x1E0CE61E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for Binding<EditMode>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<[SwiftUIAnySortComparator]>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<[SwiftUIAnySortComparator]>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, char *);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86[2];
  char v87;
  char v88[8];
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v73 = a3;
  v72 = a2;
  type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)?, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v63 - v6;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  v71 = v8;
  v91 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v70 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v64 = (uint64_t)&v63 - v13;
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v68 = (uint64_t)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for TableColumnCollection.Visitor(0);
  MEMORY[0x1E0C80A78](v67, v17);
  v19 = (unint64_t *)((char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = type metadata accessor for TableColumnCollection.Entry(0);
  v77 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v20);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v75 = (uint64_t)&v63 - v25;
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(0, &lazy cache variable for type metadata for (offset: Int, element: TableColumnCollection.Entry), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26, v28);
  v74 = (char *)&v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v69 = (uint64_t *)((char *)&v63 - v32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(a1, (uint64_t)v88, &lazy cache variable for type metadata for EnumeratedSequence<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC58]);
  v33 = 0;
  v89 = 0;
  v90 = 0;
  v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v76 = v22;
  v65 = v27;
  while (1)
  {
    outlined init with copy of TableColumnCollection.Backing((uint64_t)v88, (uint64_t)v86);
    if ((v87 & 1) != 0)
    {
      v34 = *(_QWORD *)(*(_QWORD *)&v86[0] + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v86, (uint64_t)&v82);
      v35 = v83;
      v36 = v84;
      __swift_project_boxed_opaque_existential_1(&v82, v83);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
    }
    if (v33 == v34)
    {
      outlined destroy of EnumeratedSequence<TableColumnCollection>.Iterator((uint64_t)v88);
      return (uint64_t)v78;
    }
    result = outlined init with copy of TableColumnCollection.Backing((uint64_t)v88, (uint64_t)v86);
    if ((v87 & 1) != 0)
    {
      if ((v33 & 0x8000000000000000) != 0)
        goto LABEL_28;
      if (v33 >= *(_QWORD *)(*(_QWORD *)&v86[0] + 16))
        goto LABEL_29;
      v38 = (uint64_t)v76;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)&v86[0]+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(_QWORD *)(v77 + 72) * v33, (uint64_t)v76, type metadata accessor for TableColumnCollection.Entry);
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = v7;
      outlined init with take of OptionalBinaryInteger(v86, (uint64_t)&v82);
      v40 = v67;
      v41 = (char *)v19 + *(int *)(v67 + 20);
      v42 = v77;
      v43 = v66;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v41, 1, 1, v66);
      *v19 = v33;
      v44 = v83;
      v45 = v84;
      __swift_project_boxed_opaque_existential_1(&v82, v83);
      TableColumnList.visitColumns<A>(applying:from:)((uint64_t)v19, v33, v44, v40, v45, (uint64_t)&protocol witness table for TableColumnCollection.Visitor);
      v46 = (uint64_t)v41;
      v47 = v68;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, v68, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnCollection.Entry?);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v47, 1, v43);
      if ((_DWORD)result == 1)
        goto LABEL_30;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, type metadata accessor for TableColumnCollection.Visitor);
      v38 = (uint64_t)v76;
      outlined init with take of TableCellFormula(v47, (uint64_t)v76, type metadata accessor for TableColumnCollection.Entry);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
      v7 = v39;
      v27 = v65;
    }
    outlined init with copy of TableColumnCollection((uint64_t)v88, (uint64_t)v86);
    v48 = v89;
    outlined init with copy of TableColumnCollection.Backing((uint64_t)v86, (uint64_t)&v82);
    if ((v85 & 1) != 0)
    {
      v49 = *(_QWORD *)(v82 + 16);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(&v82, (uint64_t)v79);
      v50 = v80;
      v51 = v81;
      __swift_project_boxed_opaque_existential_1(v79, v80);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    }
    if (v48 < 0 || v48 >= v49)
      break;
    v89 = v48 + 1;
    outlined destroy of TableColumnCollection((uint64_t)v86);
    v52 = v75;
    outlined init with take of TableCellFormula(v38, v75, type metadata accessor for TableColumnCollection.Entry);
    v53 = (uint64_t)&v74[*(int *)(v27 + 48)];
    v54 = v90;
    result = outlined init with take of TableCellFormula(v52, v53, type metadata accessor for TableColumnCollection.Entry);
    if (__OFADD__(v54, 1))
      goto LABEL_27;
    v90 = v54 + 1;
    v55 = *(int *)(v27 + 48);
    v56 = (uint64_t)v69;
    v57 = (char *)v69 + v55;
    *v69 = v54;
    outlined init with take of TableCellFormula(v53, v56 + v55, type metadata accessor for TableColumnCollection.Entry);
    v72(v54, v57);
    outlined destroy of UIBackgroundConfiguration?(v56, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TableColumnCollection.Entry), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v7, 1, v71) == 1)
    {
      outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)?, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?);
      v33 = v89;
    }
    else
    {
      v58 = v64;
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v7, v64, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v58, v70, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      v59 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v59 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
      v61 = v59[2];
      v60 = v59[3];
      if (v61 >= v60 >> 1)
        v59 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1, v59);
      v59[2] = v61 + 1;
      v62 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      v78 = v59;
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v70, (uint64_t)v59 + v62 + *(_QWORD *)(v91 + 72) * v61, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      v33 = v89;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;

  v40 = a2;
  type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?(0, &lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v32 - v5;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  v39 = v7;
  v41 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v38 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v33 = (uint64_t)&v32 - v12;
  type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TableCellFormula), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  v37 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v36 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (uint64_t *)((char *)&v32 - v18);
  v20 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v35 = v20;
  v32 = a1;
  if (v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(type metadata accessor for TableCellFormula() - 8);
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v24 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v34 = *(_QWORD *)(v22 + 72);
    do
    {
      v25 = v37;
      v26 = (uint64_t)&v36[*(int *)(v37 + 48)];
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v26, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v27 = (uint64_t)v19 + *(int *)(v25 + 48);
      *v19 = v21;
      outlined init with take of TableCellFormula(v26, v27, (uint64_t (*)(_QWORD))type metadata accessor for TableCellFormula);
      v40(v21, v27);
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TableCellFormula), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: ToolbarStorage.Item));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v6, 1, v39) == 1)
      {
        outlined destroy of TableRowList?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?);
      }
      else
      {
        v28 = v33;
        outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v6, v33, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
        outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v28, v38, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        v30 = v23[2];
        v29 = v23[3];
        if (v30 >= v29 >> 1)
          v23 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v23);
        v23[2] = v30 + 1;
        outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v38, (uint64_t)v23+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v30, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
      }
      ++v21;
      v24 += v34;
    }
    while (v35 != v21);
  }
  else
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t), uint64_t a8)
{
  void (*v9)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  char v95;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unsigned __int8 *v121;
  unint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t result;
  uint64_t v139;
  _QWORD *v140;
  unint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unsigned __int8 *v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  char v180;
  char v181;
  char v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  unint64_t *v197;
  char v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unsigned __int8 *v215;
  _QWORD v216[2];
  _QWORD *v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  unint64_t v220;
  uint64_t *v221;
  unsigned __int8 *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  char *v232;
  uint64_t v233;
  unsigned __int8 *v234;
  _QWORD *v235;
  _QWORD *v236;
  void (*v237)(uint64_t);
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;

  v9 = a7;
  v234 = (unsigned __int8 *)a5;
  v239 = a6;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  v238 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v236 = (_QWORD *)((char *)v216 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17, v18);
  v231 = (_QWORD *)((char *)v216 - v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v224 = (_QWORD *)((char *)v216 - v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (_QWORD *)((char *)v216 - v25);
  MEMORY[0x1E0C80A78](v27, v28);
  v225 = (_QWORD *)((char *)v216 - v29);
  MEMORY[0x1E0C80A78](v30, v31);
  v235 = (_QWORD *)((char *)v216 - v32);
  MEMORY[0x1E0C80A78](v33, v34);
  v230 = (_QWORD *)((char *)v216 - v35);
  MEMORY[0x1E0C80A78](v36, v37);
  v223 = (uint64_t)v216 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v222 = (unsigned __int8 *)v216 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v221 = (_QWORD *)((char *)v216 - v44);
  v46 = *(_QWORD *)(v45 + 72);
  if (!v46)
    goto LABEL_179;
  if (&a2[-a1] == (unsigned __int8 *)0x8000000000000000 && v46 == -1)
  {
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  v47 = a3 - (_QWORD)a2;
  if (a3 - (_QWORD)a2 == 0x8000000000000000 && v46 == -1)
    goto LABEL_181;
  v48 = (uint64_t)&a2[-a1] / v46;
  v242 = a1;
  v241 = a4;
  v49 = v47 / v46;
  v237 = v9;
  v216[0] = a8;
  if (v48 >= v47 / v46)
  {
    if (v49 < 0)
      goto LABEL_182;
    v51 = v49 * v46;
    if (a4 < (unint64_t)a2 || (unint64_t)&a2[v51] <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if ((unsigned __int8 *)a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v136 = a4 + v51;
    v240 = a4 + v51;
    v242 = (unint64_t)a2;
    if (v51 < 1 || a1 >= (unint64_t)a2)
      goto LABEL_102;
    v230 = (_QWORD *)*((_QWORD *)v234 + 2);
    v223 = -v46;
    v218 = v234 + 64;
    v220 = a4;
    v219 = (unsigned __int8 *)a1;
    v217 = v26;
LABEL_103:
    v226 = (unsigned __int8 *)a3;
    v139 = v223;
    v140 = v225;
    v141 = v239;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v136 + v223, (uint64_t)v225, v239, v9);
    v227 = a2;
    v222 = &a2[v139];
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)&a2[v139], (uint64_t)v26, v141, v9);
    v142 = v238;
    v143 = *(int *)(v238 + 48);
    v144 = (uint64_t)v224 + v143;
    v145 = *(int *)(v238 + 64);
    v146 = (char *)v224 + v145;
    v147 = (uint64_t)v140 + v145;
    *v224 = *v140;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v140 + v143, v144, (uint64_t (*)(_QWORD))v9);
    v148 = *(_QWORD **)v147;
    v234 = *(unsigned __int8 **)(v147 + 8);
    v149 = (uint64_t)v234;
    v235 = v148;
    v150 = *(_QWORD *)(v147 + 16);
    v151 = *(_QWORD *)(v147 + 24);
    v232 = v146;
    v233 = v150;
    v221 = (uint64_t *)v147;
    LOBYTE(v147) = *(_BYTE *)(v147 + 32);
    *(_QWORD *)v146 = v148;
    *((_QWORD *)v146 + 1) = v149;
    *((_QWORD *)v146 + 2) = v150;
    *((_QWORD *)v146 + 3) = v151;
    v146[32] = v147;
    v152 = *(int *)(v142 + 48);
    v153 = (uint64_t)v231 + v152;
    v154 = *(int *)(v142 + 64);
    v155 = (char *)v231 + v154;
    v156 = (char *)v26 + v154;
    *v231 = *v26;
    v229 = v153;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26 + v152, v153, (uint64_t (*)(_QWORD))v9);
    v157 = *(_QWORD *)v156;
    v158 = *((_QWORD *)v156 + 1);
    v159 = *((_QWORD *)v156 + 2);
    v160 = *((_QWORD *)v156 + 3);
    LOBYTE(v140) = v156[32];
    *(_QWORD *)v155 = *(_QWORD *)v156;
    *((_QWORD *)v155 + 1) = v158;
    *((_QWORD *)v155 + 2) = v159;
    *((_QWORD *)v155 + 3) = v160;
    v228 = v155;
    v155[32] = (char)v140;
    outlined copy of TableColumnCustomizationID.Base((uint64_t)v235, (uint64_t)v234, v233, v151, v147);
    v161 = v159;
    v9 = v237;
    outlined copy of TableColumnCustomizationID.Base(v157, v158, v161, v160, (char)v140);
    if (!v230)
    {
LABEL_141:
      v197 = v239;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v224, (uint64_t)v239, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v231, (uint64_t)v197, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v26 = v217;
      v198 = *v225 < *v217;
      goto LABEL_156;
    }
    v162 = 0;
    v163 = v218;
    while (1)
    {
      v170 = *((_QWORD *)v163 - 4);
      v169 = *((_QWORD *)v163 - 3);
      v171 = *((_QWORD *)v163 - 2);
      v172 = *((_QWORD *)v163 - 1);
      v173 = *v163;
      v174 = *(_QWORD *)v232;
      v175 = *((_QWORD *)v232 + 1);
      v176 = v232[32];
      v234 = v163;
      v235 = v162;
      LODWORD(v233) = v173;
      if ((v173 & 1) == 0)
        break;
      if ((v176 & 1) == 0)
        goto LABEL_120;
      v177 = *((_QWORD *)v232 + 2);
      v178 = *((_QWORD *)v232 + 3);
      v179 = v170 == v174 && v169 == v175;
      if (v179 || (v180 = _stringCompareWithSmolCheck(_:_:expecting:)(), v181 = 0, (v180 & 1) != 0))
      {
        if (v171 != v177 || v172 != v178)
          goto LABEL_125;
LABEL_126:
        v181 = 1;
      }
LABEL_127:
      v184 = v181;
      v185 = (uint64_t)v236 + *(int *)(v238 + 48);
      v186 = (char *)v236 + *(int *)(v238 + 64);
      *v236 = *v231;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v229, v185, (uint64_t (*)(_QWORD))v9);
      v188 = *(_QWORD *)v228;
      v187 = *((_QWORD *)v228 + 1);
      v167 = *((_QWORD *)v228 + 2);
      v168 = *((_QWORD *)v228 + 3);
      v189 = v228[32];
      *(_QWORD *)v186 = *(_QWORD *)v228;
      *((_QWORD *)v186 + 1) = v187;
      *((_QWORD *)v186 + 2) = v167;
      *((_QWORD *)v186 + 3) = v168;
      v186[32] = v189;
      if ((v184 & 1) != 0)
        goto LABEL_144;
      if ((v233 & 1) != 0)
      {
        if ((v189 & 1) != 0)
        {
          if (v170 == v188 && v169 == v187
            || (v190 = v167,
                v191 = v168,
                v192 = _stringCompareWithSmolCheck(_:_:expecting:)(),
                v167 = v190,
                v168 = v191,
                (v192 & 1) != 0))
          {
            if (v171 == v167 && v172 == v168)
            {
              v189 = 1;
              v170 = v188;
              v196 = v187;
              v167 = v171;
              v168 = v172;
              goto LABEL_145;
            }
            v193 = v167;
            v194 = v168;
            v195 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v167 = v193;
            v168 = v194;
            if ((v195 & 1) != 0)
            {
              v189 = 1;
              goto LABEL_144;
            }
          }
        }
      }
      else if ((v189 & 1) == 0)
      {
        v196 = v169;
        if (v170 == v188 && v169 == v187)
        {
          v189 = 0;
          goto LABEL_145;
        }
        v164 = v167;
        v165 = v168;
        v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v167 = v164;
        v168 = v165;
        if ((v166 & 1) != 0)
        {
          v189 = 0;
LABEL_144:
          v170 = v188;
          v196 = v187;
LABEL_145:
          outlined copy of TableColumnCustomizationID.Base(v170, v196, v167, v168, v189);
          v9 = v237;
          v199 = v239;
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v236, (uint64_t)v239, (uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v224, (uint64_t)v199, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v231, (uint64_t)v199, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          if (v235 >= v230)
            goto LABEL_178;
          v200 = *((_QWORD *)v234 - 4);
          v201 = *((_QWORD *)v234 - 3);
          v202 = *v221;
          v203 = v221[1];
          if ((*v234 & 1) == 0)
          {
            v26 = v217;
            if ((v221[4] & 1) == 0)
            {
              v208 = v226;
              v209 = v227;
              if (v200 == v202 && v201 == v203)
                goto LABEL_175;
LABEL_176:
              v198 = _stringCompareWithSmolCheck(_:_:expecting:)();
              goto LABEL_157;
            }
LABEL_155:
            v198 = 0;
LABEL_156:
            v208 = v226;
            v209 = v227;
            goto LABEL_157;
          }
          v26 = v217;
          if ((v221[4] & 1) == 0)
            goto LABEL_155;
          v204 = *((_QWORD *)v234 - 2);
          v205 = *((_QWORD *)v234 - 1);
          v206 = v221[2];
          v207 = v221[3];
          v208 = v226;
          v209 = v227;
          if (v200 == v202 && v201 == v203 || (v198 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            if (v204 != v206 || v205 != v207)
              goto LABEL_176;
LABEL_175:
            v198 = 1;
          }
LABEL_157:
          v210 = v223;
          v211 = (unint64_t)&v208[v223];
          v212 = v239;
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v26, (uint64_t)v239, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v225, (uint64_t)v212, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          if ((v198 & 1) != 0)
          {
            if (v208 < v209 || v211 >= (unint64_t)v209)
            {
              v209 = v222;
              swift_arrayInitWithTakeFrontToBack();
              v213 = v220;
              v214 = (unint64_t)v219;
            }
            else
            {
              v94 = v208 == v209;
              v213 = v220;
              v214 = (unint64_t)v219;
              v209 = v222;
              if (!v94)
                swift_arrayInitWithTakeBackToFront();
            }
            v242 += v210;
          }
          else
          {
            v215 = (unsigned __int8 *)v240;
            v240 += v210;
            if (v208 < v215 || v211 >= (unint64_t)v215)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v208 != v215)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v213 = v220;
            v214 = (unint64_t)v219;
          }
          v136 = v240;
          if (v240 <= v213)
            goto LABEL_102;
          a2 = v209;
          a3 = v211;
          if ((unint64_t)v209 <= v214)
            goto LABEL_102;
          goto LABEL_103;
        }
      }
      outlined copy of TableColumnCustomizationID.Base(v188, v187, v167, v168, v189);
      v9 = v237;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v236, (uint64_t)v239, (uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v162 = (_QWORD *)((char *)v235 + 1);
      v163 = v234 + 40;
      if (v230 == (_QWORD *)((char *)v235 + 1))
        goto LABEL_141;
    }
    if ((v176 & 1) != 0)
    {
LABEL_120:
      v181 = 0;
      goto LABEL_127;
    }
    if (v170 != v174 || v169 != v175)
    {
LABEL_125:
      v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  if ((v48 & 0x8000000000000000) == 0)
  {
    v50 = v48 * v46;
    if (a4 < a1 || a1 + v50 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v224 = (_QWORD *)(a4 + v50);
    v240 = a4 + v50;
    if (v50 < 1 || (unint64_t)a2 >= a3)
      goto LABEL_102;
    v231 = (_QWORD *)*((_QWORD *)v234 + 2);
    v219 = v234 + 64;
    v226 = (unsigned __int8 *)a3;
    v218 = (unsigned __int8 *)v46;
    while (1)
    {
      v227 = a2;
      v53 = (uint64_t)a2;
      v54 = v221;
      v55 = v239;
      outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v53, (uint64_t)v221, v239, v9);
      v56 = v222;
      outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(a4, (uint64_t)v222, v55, v9);
      v57 = v238;
      v58 = *(int *)(v238 + 48);
      v59 = v223 + v58;
      v60 = *(int *)(v238 + 64);
      v61 = (char *)(v223 + v60);
      v62 = (uint64_t)v54 + v60;
      *(_QWORD *)v223 = *v54;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v54 + v58, v59, (uint64_t (*)(_QWORD))v9);
      v63 = *(_QWORD *)(v62 + 8);
      v236 = *(_QWORD **)v62;
      v234 = (unsigned __int8 *)v63;
      v64 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v62 + 24);
      v225 = (uint64_t *)v62;
      LOBYTE(v62) = *(_BYTE *)(v62 + 32);
      *(_QWORD *)v61 = v236;
      *((_QWORD *)v61 + 1) = v63;
      *((_QWORD *)v61 + 2) = v64;
      *((_QWORD *)v61 + 3) = v65;
      v232 = v61;
      v61[32] = v62;
      v66 = *(int *)(v57 + 48);
      v67 = (uint64_t)v230 + v66;
      v68 = *(int *)(v57 + 64);
      v69 = (char *)v230 + v68;
      v70 = (char *)&v56[v68];
      *v230 = *(_QWORD *)v56;
      v229 = v67;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v56[v66], v67, (uint64_t (*)(_QWORD))v9);
      v71 = *(_QWORD *)v70;
      v72 = *((_QWORD *)v70 + 1);
      v73 = *((_QWORD *)v70 + 2);
      v74 = *((_QWORD *)v70 + 3);
      LOBYTE(v70) = v70[32];
      *(_QWORD *)v69 = v71;
      *((_QWORD *)v69 + 1) = v72;
      *((_QWORD *)v69 + 2) = v73;
      *((_QWORD *)v69 + 3) = v74;
      v228 = v69;
      v69[32] = (char)v70;
      outlined copy of TableColumnCustomizationID.Base((uint64_t)v236, (uint64_t)v234, v64, v65, v62);
      v75 = v73;
      v9 = v237;
      outlined copy of TableColumnCustomizationID.Base(v71, v72, v75, v74, (char)v70);
      if (!v231)
      {
LABEL_61:
        v115 = v239;
        outlined destroy of UIBackgroundConfiguration?(v223, (uint64_t)v239, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v230, (uint64_t)v115, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        v116 = (uint64_t)v221;
        v117 = *v221;
        v118 = *(_QWORD *)v222;
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v222, (uint64_t)v115, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of UIBackgroundConfiguration?(v116, (uint64_t)v115, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        v119 = v226;
        v120 = (unint64_t)v227;
        v121 = v218;
        if (v117 < v118)
          goto LABEL_80;
        goto LABEL_85;
      }
      v76 = 0;
      v77 = v219;
      while (1)
      {
        v84 = *((_QWORD *)v77 - 4);
        v83 = *((_QWORD *)v77 - 3);
        v86 = *((_QWORD *)v77 - 2);
        v85 = *((_QWORD *)v77 - 1);
        v87 = *v77;
        v88 = *(_QWORD *)v232;
        v89 = *((_QWORD *)v232 + 1);
        v90 = v232[32];
        v236 = v76;
        v234 = v77;
        LODWORD(v233) = v87;
        v91 = v9;
        if ((v87 & 1) == 0)
        {
          if ((v90 & 1) != 0)
          {
LABEL_40:
            v95 = 0;
            goto LABEL_47;
          }
          if (v84 != v88 || v83 != v89)
          {
LABEL_45:
            v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if ((v90 & 1) == 0)
          goto LABEL_40;
        v92 = *((_QWORD *)v232 + 2);
        v93 = *((_QWORD *)v232 + 3);
        v94 = v84 == v88 && v83 == v89;
        if (v94 || (v95 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (v86 != v92 || v85 != v93)
            goto LABEL_45;
LABEL_46:
          v95 = 1;
        }
LABEL_47:
        v98 = v85;
        v99 = v86;
        v100 = v83;
        v101 = v84;
        v102 = (uint64_t)v235 + *(int *)(v238 + 48);
        v103 = (char *)v235 + *(int *)(v238 + 64);
        v104 = v229;
        *v235 = *v230;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v104, v102, (uint64_t (*)(_QWORD))v91);
        v106 = *(_QWORD *)v228;
        v105 = *((_QWORD *)v228 + 1);
        v81 = *((_QWORD *)v228 + 2);
        v82 = *((_QWORD *)v228 + 3);
        v107 = v228[32];
        *(_QWORD *)v103 = *(_QWORD *)v228;
        *((_QWORD *)v103 + 1) = v105;
        *((_QWORD *)v103 + 2) = v81;
        *((_QWORD *)v103 + 3) = v82;
        v103[32] = v107;
        if ((v95 & 1) != 0)
          goto LABEL_65;
        if ((v233 & 1) == 0)
          break;
        if ((v107 & 1) != 0)
        {
          if (v101 == v106 && v100 == v105
            || (v108 = v81,
                v109 = v82,
                v110 = _stringCompareWithSmolCheck(_:_:expecting:)(),
                v81 = v108,
                v82 = v109,
                (v110 & 1) != 0))
          {
            if (v99 == v81 && v98 == v82)
            {
              v107 = 1;
              v101 = v106;
              v114 = v105;
              v81 = v99;
              v82 = v98;
              goto LABEL_66;
            }
            v111 = v81;
            v112 = v82;
            v113 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v81 = v111;
            v82 = v112;
            if ((v113 & 1) != 0)
            {
              v107 = 1;
              goto LABEL_65;
            }
          }
        }
LABEL_26:
        outlined copy of TableColumnCustomizationID.Base(v106, v105, v81, v82, v107);
        v9 = v237;
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v235, (uint64_t)v239, (uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        v76 = (_QWORD *)((char *)v236 + 1);
        v77 = v234 + 40;
        if (v231 == (_QWORD *)((char *)v236 + 1))
          goto LABEL_61;
      }
      if ((v107 & 1) != 0)
        goto LABEL_26;
      v114 = v100;
      if (v101 == v106 && v100 == v105)
      {
        v107 = 0;
        goto LABEL_66;
      }
      v78 = v81;
      v79 = v82;
      v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v81 = v78;
      v82 = v79;
      if ((v80 & 1) == 0)
        goto LABEL_26;
      v107 = 0;
LABEL_65:
      v101 = v106;
      v114 = v105;
LABEL_66:
      outlined copy of TableColumnCustomizationID.Base(v101, v114, v81, v82, v107);
      v122 = v239;
      v9 = v237;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v235, (uint64_t)v239, (uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?(v223, (uint64_t)v122, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v230, (uint64_t)v122, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      if (v236 >= v231)
      {
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
        goto LABEL_180;
      }
      v123 = *((_QWORD *)v234 - 4);
      v124 = *((_QWORD *)v234 - 3);
      v125 = *v225;
      v126 = v225[1];
      if ((*v234 & 1) == 0)
      {
        v119 = v226;
        v120 = (unint64_t)v227;
        v121 = v218;
        if ((v225[4] & 1) == 0)
        {
          if (v123 == v125 && v124 == v126)
            goto LABEL_79;
LABEL_78:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_79;
        }
LABEL_84:
        v134 = v239;
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v222, (uint64_t)v239, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v221, (uint64_t)v134, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_85:
        v132 = v242;
        v135 = (unint64_t)&v121[v241];
        if (v242 < v241 || v242 >= v135)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v242 != v241)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v241 = v135;
        v133 = (unsigned __int8 *)v120;
        goto LABEL_93;
      }
      v119 = v226;
      v120 = (unint64_t)v227;
      v121 = v218;
      if ((v225[4] & 1) == 0)
        goto LABEL_84;
      v127 = *((_QWORD *)v234 - 2);
      v128 = *((_QWORD *)v234 - 1);
      v129 = v225[2];
      v130 = v225[3];
      if ((v123 != v125 || v124 != v126) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_84;
      if (v127 != v129 || v128 != v130)
        goto LABEL_78;
LABEL_79:
      v131 = v239;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v222, (uint64_t)v239, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v221, (uint64_t)v131, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_80:
      v132 = v242;
      v133 = &v121[v120];
      if (v242 < v120 || v242 >= (unint64_t)v133)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v242 == v120)
      {
        v132 = v120;
      }
      else
      {
        swift_arrayInitWithTakeBackToFront();
      }
LABEL_93:
      v242 = (unint64_t)&v121[v132];
      a4 = v241;
      if (v241 < (unint64_t)v224)
      {
        a2 = v133;
        if (v133 < v119)
          continue;
      }
LABEL_102:
      ((void (*)(unint64_t *, unint64_t *, unint64_t *))v216[0])(&v242, &v241, &v240);
      return 1;
    }
  }
LABEL_182:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  void (*v7)(uint64_t);
  unint64_t *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  char v75;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _BYTE v109[16];
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  void (*v128)(uint64_t);
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  int v132;
  _BYTE *v133;
  unint64_t v134;
  _QWORD *v135;

  v7 = a7;
  v8 = a6;
  v123 = a4;
  v113 = a1;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  v129 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v119 = &v109[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v16);
  v135 = &v109[-v17];
  MEMORY[0x1E0C80A78](v18, v19);
  v130 = &v109[-v20];
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = &v109[-v23];
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = &v109[-v27];
  MEMORY[0x1E0C80A78](v29, v30);
  v33 = &v109[-v32];
  v110 = a2;
  if (a3 == a2)
    return;
  v127 = *(_QWORD *)(a5 + 16);
  v118 = *(_QWORD *)(v31 + 72);
  v112 = (unsigned __int8 *)(a5 + 64);
  v128 = v7;
  v126 = v8;
  v115 = v28;
  v116 = v24;
  v114 = &v109[-v32];
  while (1)
  {
    v111 = a3;
    v34 = a3;
LABEL_9:
    v35 = v34 - 1;
    v36 = *v123;
    v37 = v118;
    v121 = v118 * v34;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v36 + v118 * v34, (uint64_t)v33, v8, v7);
    v122 = v35;
    v120 = v37 * v35;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v36 + v37 * v35, (uint64_t)v28, v8, v7);
    v38 = v129;
    v39 = *(int *)(v129 + 48);
    v40 = *(int *)(v129 + 64);
    v41 = (char *)v24 + v40;
    v42 = (char *)v33 + v40;
    *v24 = *v33;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v33 + v39, (uint64_t)v24 + v39, (uint64_t (*)(_QWORD))v7);
    v43 = *(_QWORD *)v42;
    v133 = (_BYTE *)*((_QWORD *)v42 + 1);
    v44 = v133;
    v134 = v43;
    v45 = *((_QWORD *)v42 + 2);
    v46 = *((_QWORD *)v42 + 3);
    v117 = v42;
    v47 = v42[32];
    v132 = v47;
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v44;
    *((_QWORD *)v41 + 2) = v45;
    *((_QWORD *)v41 + 3) = v46;
    v131 = v41;
    v41[32] = v47;
    v48 = *(int *)(v38 + 48);
    v49 = (uint64_t)v130 + v48;
    v50 = *(int *)(v38 + 64);
    v51 = (char *)v130 + v50;
    v52 = (char *)v28 + v50;
    *v130 = *v28;
    v125 = v49;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v28 + v48, v49, (uint64_t (*)(_QWORD))v7);
    v53 = *(_QWORD *)v52;
    v54 = *((_QWORD *)v52 + 1);
    v55 = *((_QWORD *)v52 + 2);
    v56 = *((_QWORD *)v52 + 3);
    LOBYTE(v52) = v52[32];
    *(_QWORD *)v51 = v53;
    *((_QWORD *)v51 + 1) = v54;
    *((_QWORD *)v51 + 2) = v55;
    *((_QWORD *)v51 + 3) = v56;
    v124 = v51;
    v51[32] = (char)v52;
    outlined copy of TableColumnCustomizationID.Base(v134, (uint64_t)v133, v45, v46, v132);
    v7 = v128;
    outlined copy of TableColumnCustomizationID.Base(v53, v54, v55, v56, (char)v52);
    if (v127)
      break;
LABEL_47:
    v24 = v116;
    v8 = v126;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v116, (uint64_t)v126, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v130, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    v33 = v114;
    v28 = v115;
    v93 = *v114;
    v94 = *v115;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v115, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v33, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    if (v93 < v94)
      goto LABEL_66;
LABEL_5:
    a3 = v111 + 1;
    if (v111 + 1 == v110)
      return;
  }
  v57 = 0;
  v58 = v112;
  while (1)
  {
    v64 = *((_QWORD *)v58 - 4);
    v65 = *((_QWORD *)v58 - 3);
    v67 = *((_QWORD *)v58 - 2);
    v66 = *((_QWORD *)v58 - 1);
    v68 = *v58;
    v69 = *(_QWORD *)v131;
    v70 = *((_QWORD *)v131 + 1);
    v71 = v131[32];
    v133 = v58;
    v134 = v57;
    v132 = v68;
    if ((v68 & 1) == 0)
    {
      if ((v71 & 1) != 0)
      {
LABEL_26:
        v75 = 0;
        goto LABEL_33;
      }
      if (v64 != v69 || v65 != v70)
      {
LABEL_31:
        v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    if ((v71 & 1) == 0)
      goto LABEL_26;
    v72 = *((_QWORD *)v131 + 2);
    v73 = *((_QWORD *)v131 + 3);
    v74 = v64 == v69 && v65 == v70;
    if (v74 || (v75 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v67 != v72 || v66 != v73)
        goto LABEL_31;
LABEL_32:
      v75 = 1;
    }
LABEL_33:
    v78 = v66;
    v79 = v67;
    v80 = v64;
    v81 = (uint64_t)v135 + *(int *)(v129 + 48);
    v82 = (char *)v135 + *(int *)(v129 + 64);
    *v135 = *v130;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v125, v81, (uint64_t (*)(_QWORD))v7);
    v84 = *(_QWORD *)v124;
    v83 = *((_QWORD *)v124 + 1);
    v62 = *((_QWORD *)v124 + 2);
    v63 = *((_QWORD *)v124 + 3);
    v85 = v124[32];
    *(_QWORD *)v82 = *(_QWORD *)v124;
    *((_QWORD *)v82 + 1) = v83;
    *((_QWORD *)v82 + 2) = v62;
    *((_QWORD *)v82 + 3) = v63;
    v82[32] = v85;
    if ((v75 & 1) != 0)
      goto LABEL_51;
    if ((v132 & 1) == 0)
      break;
    if ((v85 & 1) != 0)
    {
      if (v80 == v84 && v65 == v83
        || (v86 = v62,
            v87 = v63,
            v88 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            v62 = v86,
            v63 = v87,
            (v88 & 1) != 0))
      {
        if (v79 == v62 && v78 == v63)
        {
          v85 = 1;
          v80 = v84;
          v92 = v83;
          v62 = v79;
          v63 = v78;
          goto LABEL_52;
        }
        v89 = v62;
        v90 = v63;
        v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v62 = v89;
        v63 = v90;
        if ((v91 & 1) != 0)
        {
          v85 = 1;
          goto LABEL_51;
        }
      }
    }
LABEL_12:
    outlined copy of TableColumnCustomizationID.Base(v84, v83, v62, v63, v85);
    v7 = v128;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v135, (uint64_t)v126, (uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    v57 = v134 + 1;
    v58 = v133 + 40;
    if (v127 == v134 + 1)
      goto LABEL_47;
  }
  if ((v85 & 1) != 0)
    goto LABEL_12;
  v92 = v65;
  if (v80 == v84 && v65 == v83)
  {
    v85 = 0;
    goto LABEL_52;
  }
  v59 = v62;
  v60 = v63;
  v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v62 = v59;
  v63 = v60;
  if ((v61 & 1) == 0)
    goto LABEL_12;
  v85 = 0;
LABEL_51:
  v80 = v84;
  v92 = v83;
LABEL_52:
  outlined copy of TableColumnCustomizationID.Base(v80, v92, v62, v63, v85);
  v95 = (uint64_t)v126;
  v7 = v128;
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v135, (uint64_t)v126, (uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  v24 = v116;
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v116, v95, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v130, v95, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  if (v134 >= v127)
  {
    __break(1u);
  }
  else
  {
    v96 = *((_QWORD *)v133 - 4);
    v97 = *((_QWORD *)v133 - 3);
    v98 = *(_QWORD *)v117;
    v99 = *((_QWORD *)v117 + 1);
    if ((*v133 & 1) == 0)
    {
      v33 = v114;
      v28 = v115;
      if ((v117[32] & 1) == 0)
      {
        if (v96 == v98 && v97 == v99)
          goto LABEL_65;
LABEL_64:
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_65;
      }
LABEL_4:
      v8 = v126;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v28, (uint64_t)v126, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v33, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      goto LABEL_5;
    }
    v33 = v114;
    v28 = v115;
    if ((v117[32] & 1) == 0)
      goto LABEL_4;
    v100 = *((_QWORD *)v133 - 2);
    v101 = *((_QWORD *)v133 - 1);
    v102 = *((_QWORD *)v117 + 2);
    v103 = *((_QWORD *)v117 + 3);
    if ((v96 != v98 || v97 != v99) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_4;
    if (v100 != v102 || v101 != v103)
      goto LABEL_64;
LABEL_65:
    v8 = v126;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v28, (uint64_t)v126, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v33, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_66:
    v104 = *v123;
    if (*v123)
    {
      v106 = v120;
      v105 = v121;
      v107 = v104 + v121;
      v108 = v104 + v120;
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v104 + v121, (uint64_t)v119, v8, v7);
      if (v105 < v106 || v107 >= v108 + v118)
        swift_arrayInitWithTakeFrontToBack();
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v119, v108, v8, v7);
      v34 = v122;
      if (v122 == v113)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v6;
  void (*v7)(uint64_t);
  unint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  Swift::Int v63;
  char *v64;
  Swift::Int v65;
  Swift::Int v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  uint64_t v73;
  Swift::Int v74;
  _QWORD *v75;
  void (*v76)(uint64_t);
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t);
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  char v115;
  char v116;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  Swift::Int v146;
  uint64_t v147;
  Swift::Int v148;
  Swift::Int v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int v152;
  Swift::Int v153;
  void (*v154)(uint64_t);
  Swift::Int v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  unsigned __int8 *v180;
  void (*v181)(uint64_t);
  uint64_t v182;
  char v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  char v196;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  uint64_t v227;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  Swift::Int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  unint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  BOOL v256;
  uint64_t v257;
  char v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  BOOL v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unsigned __int8 *v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  char *v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unsigned __int8 *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  char *v302;
  unint64_t v303;
  uint64_t v304;
  Swift::Int v305;
  uint64_t (*v306)(uint64_t, uint64_t, uint64_t);
  uint64_t v307;
  Swift::Int v308;
  uint64_t v309;
  _QWORD *v310;
  unint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  Swift::Int v318;
  uint64_t v319;
  char *v320;
  unsigned __int8 *v321;
  _QWORD *v322;
  Swift::Int v323;
  _QWORD *v324;
  Swift::Int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  Swift::Int v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t *v334;
  char *v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t *v338;
  _QWORD *v339;
  void (*v340)(uint64_t);
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  _BYTE *v345;
  _QWORD *v346;
  unint64_t v347;

  v312 = a6;
  v306 = a5;
  v7 = a4;
  v8 = a3;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  v341 = v11;
  v314 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v309 = (uint64_t)&v304 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v327 = (uint64_t)&v304 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v346 = (uint64_t *)((char *)&v304 - v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v339 = (uint64_t *)((char *)&v304 - v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v333 = (uint64_t *)((char *)&v304 - v25);
  MEMORY[0x1E0C80A78](v26, v27);
  v332 = (uint64_t *)((char *)&v304 - v28);
  MEMORY[0x1E0C80A78](v29, v30);
  v331 = (uint64_t *)((char *)&v304 - v31);
  MEMORY[0x1E0C80A78](v32, v33);
  v324 = (uint64_t *)((char *)&v304 - v34);
  MEMORY[0x1E0C80A78](v35, v36);
  v322 = (uint64_t *)((char *)&v304 - v37);
  MEMORY[0x1E0C80A78](v38, v39);
  v310 = (uint64_t *)((char *)&v304 - v40);
  MEMORY[0x1E0C80A78](v41, v42);
  v316 = (uint64_t *)((char *)&v304 - v43);
  MEMORY[0x1E0C80A78](v44, v45);
  v315 = (uint64_t *)((char *)&v304 - v46);
  MEMORY[0x1E0C80A78](v47, v48);
  v313 = (char *)&v304 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v307 = (uint64_t)&v304 - v52;
  v334 = a1;
  v53 = a1[1];
  v317 = a2;
  swift_bridgeObjectRetain_n();
  v54 = _minimumMergeRunLength(_:)(v53);
  if (v54 >= v53)
  {
    if (v53 < 0)
      goto LABEL_266;
    if (v53)
    {
      v60 = v317;
      swift_bridgeObjectRetain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v53, 1, v334, v60, v8, v7);
    }
    return swift_bridgeObjectRelease_n();
  }
  if (v53 >= 0)
    v55 = v53;
  else
    v55 = v53 + 1;
  if (v53 < -1)
    goto LABEL_274;
  v305 = v54;
  v340 = v7;
  v338 = v8;
  v56 = (uint64_t)v313;
  v319 = v6;
  if (v53 < 2)
  {
    v62 = MEMORY[0x1E0DEE9D8];
    v311 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v314 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v314 + 80));
    if (v53 != 1)
    {
      v231 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v320 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_229;
    }
    v304 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v57 = v55 >> 1;
    v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v58 + 16) = v57;
    v59 = *(unsigned __int8 *)(v314 + 80);
    v304 = v58;
    v311 = v58 + ((v59 + 32) & ~v59);
  }
  v63 = 0;
  v321 = (unsigned __int8 *)(v317 + 64);
  v64 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_15:
  v320 = v64;
  v65 = v63;
  v66 = v63 + 1;
  v323 = v63;
  if (v63 + 1 >= v53)
  {
    v72 = v63 + 1;
    v143 = v317;
    goto LABEL_95;
  }
  v67 = *v334;
  v68 = *(_QWORD *)(v314 + 72);
  outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(*v334 + v68 * v66, v307, v8, v7);
  v329 = v67;
  v330 = v68;
  v69 = v67 + v68 * v65;
  v70 = v307;
  outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v69, v56, v8, v7);
  v71 = v319;
  LODWORD(v326) = v306(v70, v56, v317);
  v319 = v71;
  if (v71)
  {
    outlined destroy of UIBackgroundConfiguration?(v56, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?(v70, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    goto LABEL_240;
  }
  outlined destroy of UIBackgroundConfiguration?(v56, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  outlined destroy of UIBackgroundConfiguration?(v70, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  v72 = v65 + 2;
  if (v65 + 2 >= v53)
    goto LABEL_81;
  v337 = *(_QWORD *)(v317 + 16);
  v325 = v53;
  while (2)
  {
    v318 = v72;
    v73 = v329;
    v74 = v330;
    v75 = v315;
    v76 = v7;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v329 + v72 * v330, (uint64_t)v315, v8, v7);
    v77 = v316;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v73 + v66 * v74, (uint64_t)v316, v8, v7);
    v78 = v341;
    v79 = *(int *)(v341 + 48);
    v80 = (uint64_t)v310 + v79;
    v81 = *(int *)(v341 + 64);
    v82 = (char *)v310 + v81;
    v83 = (char *)v75 + v81;
    *v310 = *v75;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v75 + v79, v80, (uint64_t (*)(_QWORD))v76);
    v84 = (_BYTE *)*((_QWORD *)v83 + 1);
    v347 = *(_QWORD *)v83;
    v86 = *((_QWORD *)v83 + 3);
    v344 = *((_QWORD *)v83 + 2);
    v85 = v344;
    v345 = v84;
    v328 = (uint64_t)v83;
    LOBYTE(v83) = v83[32];
    *(_QWORD *)v82 = v347;
    *((_QWORD *)v82 + 1) = v84;
    *((_QWORD *)v82 + 2) = v85;
    *((_QWORD *)v82 + 3) = v86;
    v343 = v82;
    v82[32] = (char)v83;
    v87 = *(int *)(v78 + 48);
    v88 = (uint64_t)v322 + v87;
    v89 = *(int *)(v78 + 64);
    v90 = (char *)v322 + v89;
    v91 = (char *)v77 + v89;
    *v322 = *v77;
    v336 = v88;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v77 + v87, v88, (uint64_t (*)(_QWORD))v76);
    v92 = *(_QWORD *)v91;
    v93 = *((_QWORD *)v91 + 1);
    v94 = *((_QWORD *)v91 + 2);
    v95 = *((_QWORD *)v91 + 3);
    LOBYTE(v77) = v91[32];
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = v93;
    *((_QWORD *)v90 + 2) = v94;
    *((_QWORD *)v90 + 3) = v95;
    v335 = v90;
    v90[32] = (char)v77;
    outlined copy of TableColumnCustomizationID.Base(v347, (uint64_t)v345, v344, v86, (char)v83);
    v96 = v92;
    v97 = v340;
    v98 = v94;
    v8 = v338;
    outlined copy of TableColumnCustomizationID.Base(v96, v93, v98, v95, (char)v77);
    if (!v337)
    {
LABEL_57:
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v310, (uint64_t)v8, (uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v7 = v97;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v322, (uint64_t)v8, (uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v134 = *v315 < *v316;
      goto LABEL_76;
    }
    v99 = 0;
    v100 = v321;
    while (1)
    {
      v104 = *((_QWORD *)v100 - 4);
      v105 = *((_QWORD *)v100 - 3);
      v107 = *((_QWORD *)v100 - 2);
      v106 = *((_QWORD *)v100 - 1);
      v108 = *v100;
      v109 = *(_QWORD *)v343;
      v110 = *((_QWORD *)v343 + 1);
      v111 = v343[32];
      v347 = v99;
      v345 = v100;
      LODWORD(v344) = v108;
      if ((v108 & 1) == 0)
      {
        if ((v111 & 1) != 0)
        {
LABEL_36:
          v116 = 0;
          goto LABEL_43;
        }
        if (v104 != v109 || v105 != v110)
        {
LABEL_41:
          v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      if ((v111 & 1) == 0)
        goto LABEL_36;
      v112 = *((_QWORD *)v343 + 2);
      v113 = *((_QWORD *)v343 + 3);
      v114 = v104 == v109 && v105 == v110;
      if (v114 || (v115 = _stringCompareWithSmolCheck(_:_:expecting:)(), v116 = 0, (v115 & 1) != 0))
      {
        if (v107 != v112 || v106 != v113)
          goto LABEL_41;
LABEL_42:
        v116 = 1;
      }
LABEL_43:
      v342 = v106;
      v119 = v107;
      v120 = v105;
      v121 = v104;
      v122 = v116;
      v123 = (uint64_t)v324 + *(int *)(v341 + 48);
      v124 = (char *)v324 + *(int *)(v341 + 64);
      *v324 = *v322;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v336, v123, (uint64_t (*)(_QWORD))v97);
      v126 = *(_QWORD *)v335;
      v125 = *((_QWORD *)v335 + 1);
      v127 = *((_QWORD *)v335 + 2);
      v103 = *((_QWORD *)v335 + 3);
      v128 = v335[32];
      *(_QWORD *)v124 = *(_QWORD *)v335;
      *((_QWORD *)v124 + 1) = v125;
      *((_QWORD *)v124 + 2) = v127;
      *((_QWORD *)v124 + 3) = v103;
      v124[32] = v128;
      if ((v122 & 1) != 0)
        goto LABEL_60;
      if ((v344 & 1) == 0)
        break;
      if ((v128 & 1) != 0)
      {
        if (v121 == v126 && v120 == v125
          || (v129 = v103, v130 = _stringCompareWithSmolCheck(_:_:expecting:)(), v103 = v129, (v130 & 1) != 0))
        {
          if (v119 == v127 && v342 == v103)
          {
            v128 = 1;
            v121 = v126;
            v133 = v125;
            v127 = v119;
            v103 = v342;
            goto LABEL_61;
          }
          v131 = v103;
          v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v103 = v131;
          if ((v132 & 1) != 0)
          {
            v128 = 1;
            goto LABEL_60;
          }
        }
      }
LABEL_22:
      outlined copy of TableColumnCustomizationID.Base(v126, v125, v127, v103, v128);
      v8 = v338;
      v97 = v340;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v324, (uint64_t)v338, (uint64_t)v340, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v99 = v347 + 1;
      v100 = v345 + 40;
      if (v337 == v347 + 1)
        goto LABEL_57;
    }
    if ((v128 & 1) != 0)
      goto LABEL_22;
    v133 = v120;
    if (v121 == v126 && v120 == v125)
    {
      v128 = 0;
      goto LABEL_61;
    }
    v101 = v103;
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v103 = v101;
    if ((v102 & 1) == 0)
      goto LABEL_22;
    v128 = 0;
LABEL_60:
    v121 = v126;
    v133 = v125;
LABEL_61:
    outlined copy of TableColumnCustomizationID.Base(v121, v133, v127, v103, v128);
    v8 = v338;
    v7 = v340;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v324, (uint64_t)v338, (uint64_t)v340, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v310, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v322, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    if (v347 >= v337)
      goto LABEL_259;
    v135 = *((_QWORD *)v345 - 4);
    v136 = *((_QWORD *)v345 - 3);
    v137 = *(_QWORD *)v328;
    v138 = *(_QWORD *)(v328 + 8);
    if ((*v345 & 1) == 0)
    {
      if ((*(_BYTE *)(v328 + 32) & 1) == 0)
      {
        if (v135 == v137 && v136 == v138)
          goto LABEL_74;
LABEL_75:
        v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_76;
      }
LABEL_71:
      v134 = 0;
      goto LABEL_76;
    }
    if ((*(_BYTE *)(v328 + 32) & 1) == 0)
      goto LABEL_71;
    v139 = *((_QWORD *)v345 - 2);
    v140 = *((_QWORD *)v345 - 1);
    v141 = *(_QWORD *)(v328 + 16);
    v142 = *(_QWORD *)(v328 + 24);
    if (v135 == v137 && v136 == v138 || (v134 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v139 != v141 || v140 != v142)
        goto LABEL_75;
LABEL_74:
      v134 = 1;
    }
LABEL_76:
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v316, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v315, (uint64_t)v8, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    if (((v326 ^ v134) & 1) == 0)
    {
      v66 = v318;
      v72 = v318 + 1;
      v53 = v325;
      if (v318 + 1 == v325)
      {
        v72 = v325;
        v65 = v323;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v72 = v318;
  v65 = v323;
  v53 = v325;
LABEL_81:
  v143 = v317;
  v144 = v329;
  if ((v326 & 1) == 0)
  {
LABEL_95:
    if (v72 >= v53)
      goto LABEL_174;
    if (__OFSUB__(v72, v65))
      goto LABEL_265;
    if (v72 - v65 >= v305)
      goto LABEL_174;
    if (__OFADD__(v65, v305))
      goto LABEL_267;
    if (v65 + v305 >= v53)
      v152 = v53;
    else
      v152 = v65 + v305;
    if (v152 < v65)
    {
LABEL_268:
      __break(1u);
      goto LABEL_269;
    }
    if (v72 == v152)
      goto LABEL_174;
    v337 = *(_QWORD *)(v143 + 16);
    v326 = *(_QWORD *)(v314 + 72);
    v308 = v152;
LABEL_107:
    v318 = v72;
    v153 = v72;
    v154 = v7;
LABEL_110:
    v155 = v153 - 1;
    v156 = *v334;
    v157 = v326;
    v329 = v326 * v153;
    v158 = v331;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v156 + v326 * v153, (uint64_t)v331, v8, v154);
    v330 = v155;
    v328 = v157 * v155;
    v159 = v156 + v157 * v155;
    v160 = v332;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v159, (uint64_t)v332, v8, v154);
    v161 = v341;
    v162 = *(int *)(v341 + 48);
    v163 = (uint64_t)v333 + v162;
    v164 = *(int *)(v341 + 64);
    v165 = (char *)v333 + v164;
    v166 = (char *)v158 + v164;
    *v333 = *v158;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v158 + v162, v163, (uint64_t (*)(_QWORD))v154);
    v167 = (_BYTE *)*((_QWORD *)v166 + 1);
    v347 = *(_QWORD *)v166;
    v169 = *((_QWORD *)v166 + 3);
    v344 = *((_QWORD *)v166 + 2);
    v168 = v344;
    v345 = v167;
    v325 = (Swift::Int)v166;
    LOBYTE(v166) = v166[32];
    *(_QWORD *)v165 = v347;
    *((_QWORD *)v165 + 1) = v167;
    *((_QWORD *)v165 + 2) = v168;
    *((_QWORD *)v165 + 3) = v169;
    v342 = (uint64_t)v165;
    v165[32] = (char)v166;
    v170 = *(int *)(v161 + 48);
    v171 = (uint64_t)v339 + v170;
    v172 = *(int *)(v161 + 64);
    v173 = (char *)v339 + v172;
    v174 = (char *)v160 + v172;
    *v339 = *v160;
    v336 = v171;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v160 + v170, v171, (uint64_t (*)(_QWORD))v154);
    v175 = *(_QWORD *)v174;
    v176 = *((_QWORD *)v174 + 1);
    v177 = *((_QWORD *)v174 + 2);
    v178 = *((_QWORD *)v174 + 3);
    LOBYTE(v160) = v174[32];
    *(_QWORD *)v173 = *(_QWORD *)v174;
    *((_QWORD *)v173 + 1) = v176;
    *((_QWORD *)v173 + 2) = v177;
    *((_QWORD *)v173 + 3) = v178;
    v335 = v173;
    v173[32] = (char)v160;
    outlined copy of TableColumnCustomizationID.Base(v347, (uint64_t)v345, v344, v169, (char)v166);
    outlined copy of TableColumnCustomizationID.Base(v175, v176, v177, v178, (char)v160);
    if (!v337)
    {
      v181 = v340;
      v8 = v338;
LABEL_149:
      v154 = v181;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v333, (uint64_t)v8, (uint64_t)v181, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v339, (uint64_t)v8, (uint64_t)v181, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v212 = v331;
      v213 = *v331;
      v214 = *v332;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v332, (uint64_t)v8, (uint64_t)v181, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v212, (uint64_t)v8, (uint64_t)v181, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v65 = v323;
      if (v213 < v214)
        goto LABEL_169;
      goto LABEL_106;
    }
    v179 = 0;
    v180 = v321;
    v181 = v340;
    while (1)
    {
      v185 = *((_QWORD *)v180 - 4);
      v186 = *((_QWORD *)v180 - 3);
      v188 = *((_QWORD *)v180 - 2);
      v187 = *((_QWORD *)v180 - 1);
      v189 = *v180;
      v190 = *(_QWORD *)v342;
      v191 = *(_QWORD *)(v342 + 8);
      v192 = *(_BYTE *)(v342 + 32);
      v344 = (uint64_t)v180;
      v345 = v179;
      v347 = v185;
      LODWORD(v343) = v189;
      if ((v189 & 1) == 0)
        break;
      if ((v192 & 1) == 0)
        goto LABEL_127;
      v193 = *(_QWORD *)(v342 + 16);
      v194 = *(_QWORD *)(v342 + 24);
      v195 = v185 == v190 && v186 == v191;
      if (v195 || (v196 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (v188 != v193 || v187 != v194)
          goto LABEL_132;
LABEL_133:
        v196 = 1;
      }
LABEL_134:
      v199 = v186;
      v200 = (uint64_t)v346 + *(int *)(v341 + 48);
      v201 = (char *)v346 + *(int *)(v341 + 64);
      *v346 = *v339;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v336, v200, (uint64_t (*)(_QWORD))v181);
      v202 = *(_QWORD *)v335;
      v203 = *((_QWORD *)v335 + 1);
      v204 = *((_QWORD *)v335 + 2);
      v184 = *((_QWORD *)v335 + 3);
      v205 = v335[32];
      *(_QWORD *)v201 = *(_QWORD *)v335;
      *((_QWORD *)v201 + 1) = v203;
      *((_QWORD *)v201 + 2) = v204;
      *((_QWORD *)v201 + 3) = v184;
      v201[32] = v205;
      if ((v196 & 1) != 0)
      {
        v210 = v202;
        v211 = v203;
        v8 = v338;
        goto LABEL_155;
      }
      if ((v343 & 1) == 0)
      {
        v8 = v338;
        v210 = v347;
        if ((v205 & 1) != 0)
          goto LABEL_113;
        if (v347 == v202 && v199 == v203)
        {
          v205 = 0;
          v211 = v199;
          goto LABEL_155;
        }
        v182 = v184;
        v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v184 = v182;
        if ((v183 & 1) == 0)
          goto LABEL_113;
        v205 = 0;
LABEL_154:
        v210 = v202;
        v211 = v203;
LABEL_155:
        outlined copy of TableColumnCustomizationID.Base(v210, v211, v204, v184, v205);
        v154 = v340;
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v346, (uint64_t)v8, (uint64_t)v340, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v333, (uint64_t)v8, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v339, (uint64_t)v8, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        if ((unint64_t)v345 >= v337)
        {
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
          goto LABEL_268;
        }
        v215 = *(_QWORD *)(v344 - 32);
        v216 = *(_QWORD *)(v344 - 24);
        v217 = *(_QWORD *)v325;
        v218 = *(_QWORD *)(v325 + 8);
        if ((*(_BYTE *)v344 & 1) != 0)
        {
          if ((*(_BYTE *)(v325 + 32) & 1) == 0)
            goto LABEL_105;
          v219 = *(_QWORD *)(v344 - 16);
          v220 = *(_QWORD *)(v344 - 8);
          v221 = *(_QWORD *)(v325 + 16);
          v222 = *(_QWORD *)(v325 + 24);
          if ((v215 != v217 || v216 != v218) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_105;
          if (v219 != v221 || v220 != v222)
            goto LABEL_167;
LABEL_168:
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v332, (uint64_t)v8, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of UIBackgroundConfiguration?((uint64_t)v331, (uint64_t)v8, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          v65 = v323;
LABEL_169:
          v223 = *v334;
          if (!*v334)
            goto LABEL_270;
          v225 = (char *)v328;
          v224 = v329;
          v226 = v223 + v329;
          v227 = v223 + v328;
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v223 + v329, v327, v8, v154);
          if (v224 < (uint64_t)v225 || v226 >= v227 + v326)
            swift_arrayInitWithTakeFrontToBack();
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v327, v227, v8, v154);
          v153 = v330;
          if (v330 == v65)
            goto LABEL_106;
          goto LABEL_110;
        }
        if ((*(_BYTE *)(v325 + 32) & 1) == 0)
        {
          if (v215 == v217 && v216 == v218)
            goto LABEL_168;
LABEL_167:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_168;
        }
LABEL_105:
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v332, (uint64_t)v8, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of UIBackgroundConfiguration?((uint64_t)v331, (uint64_t)v8, (uint64_t)v154, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        v65 = v323;
LABEL_106:
        v7 = v154;
        v72 = v318 + 1;
        if (v318 + 1 != v308)
          goto LABEL_107;
        v72 = v308;
LABEL_174:
        if (v72 < v65)
          goto LABEL_262;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v318 = v72;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          v64 = v320;
        else
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v320 + 2) + 1, 1, v320);
        v230 = *((_QWORD *)v64 + 2);
        v229 = *((_QWORD *)v64 + 3);
        v231 = v230 + 1;
        if (v230 >= v229 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v229 > 1), v230 + 1, 1, v64);
        *((_QWORD *)v64 + 2) = v231;
        v347 = (unint64_t)(v64 + 32);
        v232 = &v64[16 * v230 + 32];
        v233 = v318;
        *(_QWORD *)v232 = v65;
        *((_QWORD *)v232 + 1) = v233;
        v320 = v64;
        if (v230)
        {
          v56 = (uint64_t)v313;
          v234 = v347;
          while (1)
          {
            v235 = v231 - 1;
            if (v231 >= 4)
            {
              v240 = v234 + 16 * v231;
              v241 = *(_QWORD *)(v240 - 64);
              v242 = *(_QWORD *)(v240 - 56);
              v246 = __OFSUB__(v242, v241);
              v243 = v242 - v241;
              if (v246)
                goto LABEL_248;
              v245 = *(_QWORD *)(v240 - 48);
              v244 = *(_QWORD *)(v240 - 40);
              v246 = __OFSUB__(v244, v245);
              v238 = v244 - v245;
              v239 = v246;
              if (v246)
                goto LABEL_249;
              v247 = v231 - 2;
              v248 = (uint64_t *)(v234 + 16 * (v231 - 2));
              v250 = *v248;
              v249 = v248[1];
              v246 = __OFSUB__(v249, v250);
              v251 = v249 - v250;
              if (v246)
                goto LABEL_251;
              v246 = __OFADD__(v238, v251);
              v252 = v238 + v251;
              if (v246)
                goto LABEL_254;
              if (v252 >= v243)
              {
                v270 = (uint64_t *)(v234 + 16 * v235);
                v272 = *v270;
                v271 = v270[1];
                v246 = __OFSUB__(v271, v272);
                v273 = v271 - v272;
                if (v246)
                  goto LABEL_258;
                v263 = v238 < v273;
                goto LABEL_212;
              }
            }
            else
            {
              if (v231 != 3)
              {
                v264 = *((_QWORD *)v64 + 4);
                v265 = *((_QWORD *)v64 + 5);
                v246 = __OFSUB__(v265, v264);
                v257 = v265 - v264;
                v258 = v246;
                goto LABEL_206;
              }
              v237 = *((_QWORD *)v64 + 4);
              v236 = *((_QWORD *)v64 + 5);
              v246 = __OFSUB__(v236, v237);
              v238 = v236 - v237;
              v239 = v246;
            }
            if ((v239 & 1) != 0)
              goto LABEL_250;
            v247 = v231 - 2;
            v253 = (uint64_t *)(v234 + 16 * (v231 - 2));
            v255 = *v253;
            v254 = v253[1];
            v256 = __OFSUB__(v254, v255);
            v257 = v254 - v255;
            v258 = v256;
            if (v256)
              goto LABEL_253;
            v259 = (uint64_t *)(v234 + 16 * v235);
            v261 = *v259;
            v260 = v259[1];
            v246 = __OFSUB__(v260, v261);
            v262 = v260 - v261;
            if (v246)
              goto LABEL_256;
            if (__OFADD__(v257, v262))
              goto LABEL_257;
            if (v257 + v262 >= v238)
            {
              v263 = v238 < v262;
LABEL_212:
              if (v263)
                v235 = v247;
              goto LABEL_214;
            }
LABEL_206:
            if ((v258 & 1) != 0)
              goto LABEL_252;
            v266 = (uint64_t *)(v234 + 16 * v235);
            v268 = *v266;
            v267 = v266[1];
            v246 = __OFSUB__(v267, v268);
            v269 = v267 - v268;
            if (v246)
              goto LABEL_255;
            if (v269 < v257)
            {
              v64 = v320;
              goto LABEL_223;
            }
LABEL_214:
            v274 = v235 - 1;
            if (v235 - 1 >= v231)
              goto LABEL_244;
            v275 = *v334;
            if (!*v334)
              goto LABEL_271;
            v276 = (uint64_t *)(v234 + 16 * v274);
            v277 = *v276;
            v278 = (_QWORD *)(v234 + 16 * v235);
            v279 = v278[1];
            v280 = *(_QWORD *)(v314 + 72);
            v281 = v275 + v280 * *v276;
            v282 = (unsigned __int8 *)(v275 + v280 * *v278);
            v283 = v275 + v280 * v279;
            v284 = v317;
            swift_bridgeObjectRetain();
            v285 = v281;
            v286 = v319;
            specialized _merge<A>(low:mid:high:buffer:by:)(v285, v282, v283, v311, v284, v338, v340, v312);
            if (v286)
            {
LABEL_226:
              swift_bridgeObjectRelease();
              goto LABEL_240;
            }
            swift_bridgeObjectRelease();
            if (v279 < v277)
              goto LABEL_245;
            v287 = v320;
            if (v235 > *((_QWORD *)v320 + 2))
              goto LABEL_246;
            *v276 = v277;
            v234 = v347;
            *(_QWORD *)(v347 + 16 * v274 + 8) = v279;
            v288 = *((_QWORD *)v287 + 2);
            if (v235 >= v288)
              goto LABEL_247;
            v319 = 0;
            v231 = v288 - 1;
            memmove(v278, v278 + 2, 16 * (v288 - 1 - v235));
            v64 = v320;
            *((_QWORD *)v320 + 2) = v288 - 1;
            v7 = v340;
            v8 = v338;
            v56 = (uint64_t)v313;
            if (v288 <= 2)
              goto LABEL_223;
          }
        }
        v231 = 1;
        v56 = (uint64_t)v313;
LABEL_223:
        v53 = v334[1];
        v63 = v318;
        if (v318 >= v53)
        {
          v62 = v304;
LABEL_229:
          v304 = v62;
          if (v231 >= 2)
          {
            v289 = *v334;
            v290 = v320;
            v347 = *v334;
            v291 = v317;
            do
            {
              v292 = v231 - 2;
              if (v231 < 2)
                goto LABEL_260;
              if (!v289)
                goto LABEL_273;
              v293 = v290;
              v294 = *(_QWORD *)&v290[16 * v292 + 32];
              v295 = *(_QWORD *)&v290[16 * v231 + 24];
              v296 = *(_QWORD *)(v314 + 72);
              v297 = v289 + v296 * v294;
              v298 = (unsigned __int8 *)(v289 + v296 * *(_QWORD *)&v290[16 * v231 + 16]);
              v299 = v289 + v296 * v295;
              swift_bridgeObjectRetain();
              v300 = v297;
              v301 = v319;
              specialized _merge<A>(low:mid:high:buffer:by:)(v300, v298, v299, v311, v291, v338, v340, v312);
              v319 = v301;
              if (v301)
                goto LABEL_226;
              swift_bridgeObjectRelease();
              if (v295 < v294)
                goto LABEL_261;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v293 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v293);
              if (v292 >= *((_QWORD *)v293 + 2))
                goto LABEL_263;
              v302 = &v293[16 * v292 + 32];
              *(_QWORD *)v302 = v294;
              *((_QWORD *)v302 + 1) = v295;
              v303 = *((_QWORD *)v293 + 2);
              if (v231 > v303)
                goto LABEL_264;
              memmove(&v293[16 * v231 + 16], &v293[16 * v231 + 32], 16 * (v303 - v231));
              v290 = v293;
              *((_QWORD *)v293 + 2) = v303 - 1;
              v231 = v303 - 1;
              v289 = v347;
            }
            while (v303 > 2);
          }
LABEL_240:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v304 + 16) = 0;
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        goto LABEL_15;
      }
      v8 = v338;
      if ((v205 & 1) != 0)
      {
        if (v347 == v202 && v199 == v203
          || (v206 = v184, v207 = _stringCompareWithSmolCheck(_:_:expecting:)(), v184 = v206, (v207 & 1) != 0))
        {
          if (v188 == v204 && v187 == v184)
          {
            v205 = 1;
            v210 = v202;
            v211 = v203;
            v204 = v188;
            v184 = v187;
            goto LABEL_155;
          }
          v208 = v184;
          v209 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v184 = v208;
          if ((v209 & 1) != 0)
          {
            v205 = 1;
            goto LABEL_154;
          }
        }
      }
LABEL_113:
      outlined copy of TableColumnCustomizationID.Base(v202, v203, v204, v184, v205);
      v181 = v340;
      outlined destroy of UIBackgroundConfiguration?((uint64_t)v346, (uint64_t)v8, (uint64_t)v340, (uint64_t (*)(_QWORD))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v179 = v345 + 1;
      v180 = (unsigned __int8 *)(v344 + 40);
      if ((_BYTE *)v337 == v345 + 1)
        goto LABEL_149;
    }
    if ((v192 & 1) != 0)
    {
LABEL_127:
      v196 = 0;
      goto LABEL_134;
    }
    if (v185 != v190 || v186 != v191)
    {
LABEL_132:
      v196 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  if (v72 >= v65)
  {
    if (v65 < v72)
    {
      v325 = v53;
      v145 = 0;
      v146 = v65;
      v147 = v330 * (v72 - 1);
      v148 = v72 * v330;
      v149 = v146;
      v150 = v146 * v330;
      do
      {
        if (v149 != v72 + v145 - 1)
        {
          if (!v144)
            goto LABEL_272;
          v347 = v144 + v147;
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v144 + v150, v309, v8, v340);
          if (v150 < v147 || v144 + v150 >= (unint64_t)(v144 + v148))
          {
            v151 = v347;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            v151 = v347;
            if (v150 != v147)
              swift_arrayInitWithTakeBackToFront();
          }
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v309, v151, v8, v340);
          v143 = v317;
          v144 = v329;
        }
        ++v149;
        --v145;
        v147 -= v330;
        v148 -= v330;
        v150 += v330;
      }
      while (v149 < v72 + v145);
      v7 = v340;
      v65 = v323;
      v53 = v325;
    }
    goto LABEL_95;
  }
LABEL_269:
  __break(1u);
LABEL_270:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_271:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_272:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_273:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_274:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t), void (*a6)(_QWORD *, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = a5(v12);
  v13 = *(_QWORD *)(v12 + 16);
  v15[0] = v12 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v15[1] = v13;
  swift_bridgeObjectRetain();
  a6(v15, a2);
  swift_bridgeObjectRelease();
  *a1 = v12;
  return swift_bridgeObjectRelease_n();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;

  v16 = result;
  v2 = *(_QWORD *)(result + 16);
  v3 = v2 == 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v2)
  {
    if (v4)
    {
      v5 = 0;
      v6 = 1;
      goto LABEL_31;
    }
    return MEMORY[0x1E0DEE9D8];
  }
  v5 = 0;
  v6 = *(_QWORD *)(result + 16);
  while (v5 == v4)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    if (!v6)
      return v7;
    v21 = MEMORY[0x1E0DEE9D8];
    v8 = v6 & ~(v6 >> 63);
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v7 = v21;
    if (v2)
    {
      if ((v6 & 0x8000000000000000) == 0)
        goto LABEL_11;
      __break(1u);
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
LABEL_11:
      v9 = 0;
      while (v8)
      {
        if ((v3 & 1) != 0)
        {
          v4 = a2;
          v5 = *(_QWORD *)(a2 + 16);
          if (v9 >= v5)
            goto LABEL_28;
        }
        else
        {
          v4 = v16;
          if (v9 >= v2)
            goto LABEL_29;
        }
        result = swift_getAtKeyPath();
        v10 = v18;
        v11 = v19;
        v13 = *(_QWORD *)(v21 + 16);
        v12 = *(_QWORD *)(v21 + 24);
        if (v13 >= v12 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
          v11 = v19;
          v10 = v18;
        }
        *(_QWORD *)(v21 + 16) = v13 + 1;
        v4 = v21 + 40 * v13;
        v5 = v9 + 1 == v2;
        if (v9 + 1 == v2)
          v14 = 0;
        else
          v14 = v9 + 1;
        *(_OWORD *)(v4 + 32) = v10;
        *(_OWORD *)(v4 + 48) = v11;
        *(_BYTE *)(v4 + 64) = v20;
        if ((v3 & 1) != 0)
          ++v9;
        else
          v9 = v14;
        v3 |= v5;
        --v8;
        if (!--v6)
          return v7;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
LABEL_31:
    v15 = __OFADD__(v5++, 1);
    if (v15)
      goto LABEL_36;
  }
  v15 = __OFADD__(v6++, 1);
  if (!v15)
    goto LABEL_31;
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t updated;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[24];
  _QWORD v21[22];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[176];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[208];
  uint64_t v31;
  uint64_t v32;

  outlined init with copy of CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>(a1, (uint64_t)v30, &lazy cache variable for type metadata for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
  v4 = *(_QWORD *)(a1 + 200);
  v32 = v4;
  v5 = v31;
  if (v4 == v31)
  {
    v4 = 0;
LABEL_18:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    return v4;
  }
  else
  {
    v19 = (uint64_t)a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0x88);
    result = swift_beginAccess();
    v18 = v5;
    while (1)
    {
      v7 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v19, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      v8 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v21, (uint64_t)v20, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      v11 = v22;
      v10 = v23;
      if (*(_QWORD *)(v23 + 16) || *(_QWORD *)(v22 + 16))
      {
        MEMORY[0x1E0C80A78](v8, v9);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v10, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        v13 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v4);
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = v4;
      }
      specialized ShadowRowCollection.init(_:section:)(v20, v13, (uint64_t)v24);
      result = outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v21);
      v14 = v27;
      v15 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_20;
      v16 = *(_QWORD *)(v26 + 16);
      if (v16 || (v16 = *(_QWORD *)(v25 + 16)) != 0)
      {
        specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v21, v26, v25, v29, v15, v16);
        v15 = v21[0];
      }
      result = outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v24);
      if (v14 != v15)
      {
        v17 = v4 + 1;
LABEL_17:
        v32 = v17;
        goto LABEL_18;
      }
      ++v4;
      v17 = v18;
      if (v7 == v18)
      {
        v4 = 0;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySS_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_w1_wV8SSGATTG50I2UI0dK0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 5;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOys11AnyHashableV_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_y1_y6Says11gH7VGAVTG50K2UI0dM0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v5 = MEMORY[0x1E0DEC198];
    v6 = MEMORY[0x1E0DECDC8];
    do
    {
      outlined init with copy of AccessibilityScrollableContext?(v4, (uint64_t)&v11, &lazy cache variable for type metadata for CollectionDifference<AnyHashable>.Change, v5, (uint64_t (*)(_QWORD, uint64_t))v6);
      v7 = v11;
      outlined destroy of AnyHashable((uint64_t)&v12);
      v2 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v13;
      }
      v9 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      *(_QWORD *)(v2 + 8 * v9 + 32) = v7;
      v4 += 64;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI17SystemSegmentItemV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA17ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  uint64_t v18;

  type metadata accessor for CollectionDifference<SystemSegmentItem>.Change(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (_QWORD *)((char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v17[1] = v1;
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v10 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for CollectionDifference<SystemSegmentItem>.Change);
      v12 = *v7;
      type metadata accessor for (offset: Int, element: SystemSegmentItem, associatedWith: Int?)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7 + *(int *)(v13 + 48), (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      v9 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v18;
      }
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        v9 = v18;
      }
      *(_QWORD *)(v9 + 16) = v15 + 1;
      *(_QWORD *)(v9 + 8 * v15 + 32) = v12;
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA14iJ11V2IDVGAXTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 9;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV5EntryV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f23OyAL_GXEfU_Si_SiSayAA14ij2V5K11V2IDVGAZTG5AJ0dP0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v5 = MEMORY[0x1E0DECDC8];
    do
    {
      outlined init with copy of AccessibilityScrollableContext?(v4, (uint64_t)&v10, &lazy cache variable for type metadata for CollectionDifference<ToolbarStorage.Entry.ID>.Change, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))v5);
      v6 = v10;
      outlined destroy of ToolbarStorage.Entry.ID((uint64_t)&v11);
      v2 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v12;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v8 + 1;
      *(_QWORD *)(v2 + 8 * v8 + 32) = v6;
      v4 += 112;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI23KeyboardShortcutBindingV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA23ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 11;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI10TableRowIDO_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f54OyAL_GXEfU_AA13CountingIndexVySiG_AvA0tuC0VyAA09Shadowj8C0VyAA22I46DataSourceAdaptorVGGAXyAA08ResolvedxW3IDsVGTG5AJ0dO0VyAJ13CountingIndexVySiGAVGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v5 = MEMORY[0x1E0DECDC8];
    do
    {
      outlined init with copy of AccessibilityScrollableContext?(v4, (uint64_t)&v10, &lazy cache variable for type metadata for CollectionDifference<TableRowID>.Change, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))v5);
      v6 = v10;
      outlined destroy of TableRowID((uint64_t)&v11);
      v2 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v12;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v8 + 1;
      *(_QWORD *)(v2 + 8 * v8 + 32) = v6;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySi_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f30OyAL_GXEfU_AA13CountingIndexVyw86G_AvA0tuC0VyAA013ShadowSectionC0VyAA22TableDataSourceAdaptorVGGAXys15LazyMapSequenceVyV28AA0X8SectionsV4ItemVGSiGGTG50I2UI0dK0VyAO13CountingIndexVySiGATGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 4;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(uint64_t *, _QWORD);
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  id v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  uint64_t v65[4];
  _QWORD *v66;

  v56 = a2;
  v66 = a1;
  v52 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for IndexSet.Index();
  v6 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v7);
  v60 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v59 = (char *)&v50 - v11;
  v12 = type metadata accessor for IndexSet();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0];
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexSet>();
  v19 = v18;
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v14;
  v53 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  ((void (*)(char *, _QWORD *, uint64_t, double))v53)(v17, v66, v12, v21);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v13, MEMORY[0x1E0CB13D0]);
  v54 = v17;
  v58 = v12;
  dispatch thunk of Sequence.makeIterator()();
  v24 = &v23[*(int *)(v19 + 36)];
  v61 = v6;
  v57 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v51 = v23;
  v63 = v24;
  while (1)
  {
    v25 = v59;
    v26 = v62;
    v57(v59, v24, v62);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
    v27 = v60;
    v28 = v58;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
    v64 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29 = *(void (**)(char *, uint64_t))(v61 + 8);
    v29(v27, v26);
    v29(v25, v26);
    if ((v64 & 1) != 0)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<IndexSet>);
      return (uint64_t)v66;
    }
    v24 = v63;
    v30 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v32 = *v31;
    v30(v65, 0);
    v33 = v54;
    v53(v54, v23, v28);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v33, v28);
    result = (uint64_t)objc_msgSend(v56, sel_numberOfItemsInSection_, v32);
    if (result < 0)
      break;
    v35 = result;
    if (result)
    {
      v65[0] = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      v36 = 0;
      v37 = v65[0];
      v38 = v52;
      do
      {
        MEMORY[0x18D754BAC](v36, v32);
        v65[0] = v37;
        v40 = *(_QWORD *)(v37 + 16);
        v39 = *(_QWORD *)(v37 + 24);
        if (v40 >= v39 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          v37 = v65[0];
        }
        ++v36;
        *(_QWORD *)(v37 + 16) = v40 + 1;
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(v37+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v40, v5, v38);
      }
      while (v35 != v36);
      v24 = v63;
    }
    else
    {
      v37 = MEMORY[0x1E0DEE9D8];
    }
    v41 = *(_QWORD *)(v37 + 16);
    v42 = v66;
    v43 = v66[2];
    v44 = v43 + v41;
    if (__OFADD__(v43, v41))
      goto LABEL_27;
    result = swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)result || v44 > v42[3] >> 1)
    {
      if (v43 <= v44)
        v45 = v43 + v41;
      else
        v45 = v43;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v45, 1, v42);
      v42 = (_QWORD *)result;
    }
    v46 = *(_QWORD *)(v37 + 16);
    v66 = v42;
    if (v46)
    {
      if ((v42[3] >> 1) - v42[2] < v41)
        goto LABEL_29;
      result = swift_arrayInitWithCopy();
      v23 = v51;
      if (v41)
      {
        v47 = v66[2];
        v48 = __OFADD__(v47, v41);
        v49 = v47 + v41;
        if (v48)
          goto LABEL_30;
        v66[2] = v49;
      }
    }
    else
    {
      v23 = v51;
      if (v41)
        goto LABEL_28;
    }
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE __dst[288];
  _QWORD __src[36];
  _QWORD v65[32];
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD v70[39];
  _BYTE v71[176];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  double (*v88)@<D0>(__n128 *@<X0>, uint64_t@<X8>);
  uint64_t v89;

  v13 = MEMORY[0x1E0DEE9D8];
  v77 = MEMORY[0x1E0DEE9D8];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(a1, (uint64_t)v70, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  v53 = a2;
  v15 = specialized ShadowListUpdateRecorder.initialIndex(_:)(a2, v14);
  result = specialized ShadowRowCollection.init(_:section:)(v70, v15, (uint64_t)v71);
  if ((a6 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v17 = *(_QWORD *)(a5 + 40);
  if (*(_QWORD *)(v17 + 16) <= a6)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v18 = v17 + 96 * a6;
  v19 = *(_QWORD **)(v18 + 96);
  v20 = *(_BYTE *)(v18 + 104);
  v22 = *(_QWORD *)(v18 + 112);
  v21 = *(_QWORD *)(v18 + 120);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v71, (uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v65[0] = v13;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)v19, v20);
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v70, v19, v20, v22, v21);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v23 = *(_QWORD *)(v13 + 16);
  if (v23)
  {
    v24 = a4;
    v25 = 0;
    v58 = v65[0];
    v49 = v21;
    v26 = __OFADD__(v22, v21);
    v51 = v20;
    v52 = v26;
    v27 = v65[0] + 64;
    v47 = a8 & 1;
    v48 = v24 & 1;
    v45 = v19;
    v46 = a6;
    v50 = v22;
    v59 = *(_QWORD *)(v13 + 16);
    while (v25 < *(_QWORD *)(v13 + 16))
    {
      v31 = *(_QWORD *)(v27 - 32);
      v30 = *(_QWORD *)(v27 - 24);
      v33 = *(_QWORD *)(v27 - 16);
      v32 = *(_QWORD *)(v27 - 8);
      v34 = *(_QWORD *)(v27 + 8);
      v62 = *(_QWORD *)v27;
      if (*(_BYTE *)(v27 + 57))
      {
        if (*(_BYTE *)(v27 + 57) == 1)
        {
          if (v52)
            goto LABEL_27;
          LOBYTE(v70[0]) = v47;
          v60 = v32;
          v35 = v30;
          v36 = v31;
          v37 = swift_allocObject();
          *(_QWORD *)(v37 + 16) = a6;
          *(_QWORD *)(v37 + 24) = a7;
          *(_BYTE *)(v37 + 32) = v70[0];
          v78 = v19;
          v79 = v20;
          v80 = v22;
          v81 = v49;
          v82 = v36;
          v83 = v35;
          v84 = v33 & 1;
          v23 = v59;
          v13 = v58;
          v85 = v60;
          v86 = v62;
          v87 = v34 & 1;
          v88 = partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:);
          v89 = v37;
          outlined copy of ResolvedTableRowIDs.Storage((uint64_t)v19, v20);
          result = specialized Array.append<A>(contentsOf:)((uint64_t)&v78);
        }
      }
      else
      {
        v56 = *(_QWORD *)(v27 - 32);
        v57 = *(_QWORD *)(v27 - 24);
        v61 = *(_QWORD *)(v27 - 8);
        result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v71, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        v38 = v74;
        v28 = v74 + v75;
        if (__OFADD__(v74, v75))
          goto LABEL_28;
        v39 = v76;
        v40 = v73;
        v41 = v72;
        v42 = *(_QWORD *)(v73 + 16);
        if (v42 || (v42 = v74 + v75, *(_QWORD *)(v72 + 16)))
        {
          specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v70, v73, v72, v76, v74 + v75, v42);
          v42 = v70[0];
        }
        v65[30] = v38;
        v65[31] = 0;
        v66 = v38 == v42;
        v43 = *(_QWORD *)(v40 + 16);
        if (v43 || (v43 = *(_QWORD *)(v41 + 16)) != 0)
        {
          specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v70, v40, v41, v39, v28, v43);
          v28 = v70[0];
        }
        v19 = v45;
        a6 = v46;
        v13 = v58;
        v67 = v28;
        v68 = 0;
        v69 = 1;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v65, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        __src[30] = v56;
        __src[31] = v57;
        LOBYTE(__src[32]) = v33 & 1;
        __src[33] = v61;
        __src[34] = v62;
        LOBYTE(__src[35]) = v34 & 1;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
        memcpy(__dst, __src, 0x119uLL);
        LOBYTE(v70[0]) = v48;
        v29 = swift_allocObject();
        *(_QWORD *)(v29 + 16) = v53;
        *(_QWORD *)(v29 + 24) = a3;
        *(_BYTE *)(v29 + 32) = v70[0];
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__dst, (uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
        v70[36] = partial apply for specialized closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:);
        v70[37] = v29;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>);
        result = specialized Array.append<A>(contentsOf:)((uint64_t)v70);
        v20 = v51;
        v22 = v50;
        v23 = v59;
      }
      ++v25;
      v27 += 96;
      if (v23 == v25)
      {
        swift_bridgeObjectRelease();
        outlined consume of ResolvedTableRowIDs.Storage((uint64_t)v19, v20);
        v44 = v77;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTableRowIDs.Storage((uint64_t)v19, v20);
  v44 = MEMORY[0x1E0DEE9D8];
LABEL_25:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  return v44;
}

id specialized UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(char a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  Class isa;
  uint64_t v12;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC35D8]), sel_init);
  v12 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 1) != 0)
  {
    v3 = (void *)objc_opt_self();
    v4 = objc_msgSend(v3, sel_fractionalWidthDimension_, 1.0);
    if (one-time initialization token for tableHeaderMinHeight != -1)
      swift_once();
    v5 = objc_msgSend(v3, sel_absoluteDimension_, *(double *)&static ListMetrics.tableHeaderMinHeight);
    v6 = objc_msgSend((id)objc_opt_self(), sel_sizeWithWidthDimension_heightDimension_, v4, v5);

    v7 = (void *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BE36D0);
    v8 = objc_msgSend((id)objc_opt_self(), sel_boundarySupplementaryItemWithLayoutSize_elementKind_alignment_, v6, v7, 1);

    objc_msgSend(v8, sel_setZIndex_, 199);
    objc_msgSend(v8, sel_setPinToVisibleBounds_, 1);
    objc_msgSend(v8, sel_setExtendsBoundary_, 0);
    v9 = v8;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutBoundarySupplementaryItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setBoundarySupplementaryItems_, isa);

  return v2;
}

id specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t *v15;
  char *v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  char *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  objc_class *v55;
  id v56;
  objc_super v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[184];

  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x80)) = MEMORY[0x1E0DEE9E8];
  v10 = *(_QWORD *)((*v9 & *v6) + 0x90);
  v11 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  v12 = v6;
  v13 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  *(_QWORD *)&v13[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 4;
  v13[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(_QWORD *)((char *)v6 + v10) = v13;
  v14 = (_QWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x98));
  *v14 = 0;
  v14[1] = 0;
  v15 = (_QWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0xA0));
  *v15 = 1;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0xA8)) = 0;
  v16 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0xB0);
  IndexSet.init()();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  v18 = v17;
  IndexSet.init()();
  v19 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v16[v18[10]] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v16[v18[11]] = v19;
  *(_QWORD *)&v16[v18[12]] = v19;
  *(_QWORD *)&v16[v18[13]] = v19;
  IndexSet.init()();
  v20 = (uint64_t *)&v16[v18[15]];
  v21 = specialized Dictionary.init(dictionaryLiteral:)(v19);
  v22 = specialized Dictionary.init(dictionaryLiteral:)(v19);
  *v20 = v19;
  v20[1] = v19;
  v20[2] = v19;
  v20[3] = v21;
  v20[4] = v22;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0xB8)) = 1;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0xC0)) = 0;
  v23 = (_OWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0xC8));
  *v23 = 0u;
  v23[1] = 0u;
  v23[2] = 0u;
  v23[3] = 0u;
  v23[4] = 0u;
  v23[5] = 0u;
  v23[6] = 0u;
  v23[7] = 0u;
  v23[8] = 0u;
  v23[9] = 0u;
  *(_OWORD *)((char *)v23 + 155) = 0u;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0xD0)) = 0;
  v24 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0xD8);
  v25 = type metadata accessor for IndexPath();
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v24, 1, 1, v25);
  v26((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0xE0), 1, 1, v25);
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0xE8)) = 0;
  v27 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0xF0);
  *(_QWORD *)v27 = 0;
  *((_WORD *)v27 + 4) = 256;
  swift_unknownObjectWeakInit();
  v28 = (_OWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x100));
  *v28 = 0u;
  v28[1] = 0u;
  v28[2] = 0u;
  *(_OWORD *)((char *)v28 + 41) = 0u;
  v29 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x108);
  LOBYTE(v63) = 0;
  OptionalEdgeInsets.init()();
  v30 = *((_QWORD *)&v63 + 1);
  v31 = v64;
  v32 = *((_QWORD *)&v64 + 1);
  v33 = v65;
  v34 = *((_QWORD *)&v65 + 1);
  v35 = v66;
  v36 = *((_QWORD *)&v66 + 1);
  v37 = v67;
  *v29 = 0;
  *((_QWORD *)v29 + 1) = v30;
  v29[16] = v31;
  *((_QWORD *)v29 + 3) = v32;
  v29[32] = v33;
  *((_QWORD *)v29 + 5) = v34;
  v29[48] = v35;
  *((_QWORD *)v29 + 7) = v36;
  v29[64] = v37;
  v38 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x110);
  *(_QWORD *)v38 = 0;
  *((_QWORD *)v38 + 1) = 0;
  v38[16] = 0;
  v39 = (_OWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x118));
  *v39 = 0u;
  v39[1] = 0u;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0x120)) = 0;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0x128)) = 0;
  v40 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x130);
  *(_QWORD *)v40 = 0;
  *((_WORD *)v40 + 4) = 256;
  v41 = (char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x138);
  *(_QWORD *)v41 = 0;
  v41[8] = 1;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0x140)) = 0;
  *((_BYTE *)v12 + *(_QWORD *)((*v9 & *v12) + 0x148)) = 0;
  *(_QWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x150)) = 0;
  outlined init with copy of TableDataSourceAdaptor(a1, (uint64_t)v75);
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v75, (uint64_t)&v63);
  *(_QWORD *)&v74 = v19;
  *((_QWORD *)&v74 + 1) = v19;
  outlined destroy of TableDataSourceAdaptor((uint64_t)v75);
  v42 = (_OWORD *)((char *)v12 + *(_QWORD *)((*v9 & *v12) + 0x88));
  v43 = v74;
  v44 = v71;
  v45 = v72;
  v42[10] = v73;
  v42[11] = v43;
  v42[8] = v44;
  v42[9] = v45;
  v46 = v70;
  v47 = v67;
  v48 = v68;
  v42[6] = v69;
  v42[7] = v46;
  v42[4] = v47;
  v42[5] = v48;
  v49 = v66;
  v50 = v63;
  v51 = v64;
  v42[2] = v65;
  v42[3] = v49;
  *v42 = v50;
  v42[1] = v51;
  swift_beginAccess();
  outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(a2, (uint64_t)v28);
  swift_endAccess();
  v52 = *(_QWORD *)v38;
  v53 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v38 = a3;
  *((_QWORD *)v38 + 1) = a4;
  v38[16] = a5;
  outlined consume of Binding<NavigationSplitViewColumn>?(v52, v53);
  swift_beginAccess();
  v54 = *v15;
  *v15 = a6;
  outlined copy of Transaction?(a6);
  outlined consume of Transaction?(v54);

  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, &lazy cache variable for type metadata for UICollectionViewListCoordinatorBase<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for UICollectionViewListCoordinatorBase);
  v62.receiver = v12;
  v62.super_class = v55;
  v56 = objc_msgSendSuper2(&v62, sel_init);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a2, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  outlined destroy of TableDataSourceAdaptor(a1);
  return v56;
}

uint64_t outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>;
  if (!lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>;
  if (!lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>);
  }
  return result;
}

unint64_t partial apply for specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(unint64_t *a1)
{
  uint64_t v1;

  return (unint64_t)specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1878A5398()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ShadowRowCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowRowCollection);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ShadowListUpdateRecorder<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1878A548C()
{
  return 16;
}

__n128 sub_1878A5498(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1878A5500()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  specialized closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_BYTE *)(v0 + 16), *(_QWORD **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t outlined assign with copy of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1878A5604()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878A5628()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1878A5660()
{
  return swift_deallocObject();
}

void type metadata accessor for IndexPath?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1878A568C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a1, *(void **)(v1 + 16), *(_QWORD **)(v1 + 24), *(_BYTE *)(v1 + 32), *(_BYTE *)(v1 + 33));
}

uint64_t sub_1878A56C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for specialized closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_layoutIfNeeded);
  specialized UICollectionViewListCoordinatorBase.updateListContents(_:)(v1);
}

uint64_t sub_1878A5728()
{
  return swift_deallocObject();
}

uint64_t sub_1878A5738()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    swift_bridgeObjectRelease();
  else
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 144))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 168))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  return specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_QWORD **)(v0 + 16), v0 + 24, *(void **)(v0 + 200));
}

uint64_t sub_1878A57F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)()
{
  uint64_t v0;

  return specialized closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(*(void **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t outlined init with take of SelectionManagerBox<AnyHashable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>();
    v6 = type metadata accessor for _RowVisitationContext(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
  }
}

unint64_t lazy protocol witness table accessor for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>;
  if (!lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>;
  if (!lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>);
  }
  return result;
}

uint64_t outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with copy of TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  assignWithCopy for TableDataSourceAdaptor(a2, a1);
  return a2;
}

uint64_t partial apply for specialized closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  return specialized closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1878A5A28()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of CountingIndexListDataSource<TableDataSourceAdaptor>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CountingIndexListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CountingIndexListDataSource);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>();
    v6 = type metadata accessor for CountingIndexListDataSource(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>);
  }
}

void type metadata accessor for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>)
  {
    type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(255);
    lazy protocol witness table accessor for type TableRowID and conformance TableRowID();
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>);
  }
}

void type metadata accessor for _NativeDictionary<Int, (Int, CountingIndex<Int>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<Int, (Int, CountingIndex<Int>)>)
  {
    type metadata accessor for (Int, CountingIndex<Int>)();
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<Int, (Int, CountingIndex<Int>)>);
  }
}

void type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    v9 = v8;
    v10 = a3();
    v11 = a4(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_1878A5D40()
{
  return swift_deallocObject();
}

double partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, 4, a2).n128_u64[0];
  return result;
}

uint64_t sub_1878A5D58()
{
  return swift_deallocObject();
}

double partial apply for specialized closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, 3, a2).n128_u64[0];
  return result;
}

__n128 partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<Q0>(__n128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 v4;
  char v5;
  __n128 result;

  v4 = a1[1].n128_u8[0];
  v5 = *(_BYTE *)(v3 + 32);
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 16);
  *(_BYTE *)(a3 + 16) = v5;
  result = *a1;
  *(__n128 *)(a3 + 24) = *a1;
  *(_BYTE *)(a3 + 40) = v4;
  *(_BYTE *)(a3 + 89) = a2;
  return result;
}

void type metadata accessor for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E0DEA218]);
    v0 = type metadata accessor for LazySequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>);
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void type metadata accessor for (TableRowID, TableRowID)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (TableRowID, TableRowID))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TableRowID, TableRowID));
  }
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8]);
    lazy protocol witness table accessor for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>();
    v0 = type metadata accessor for DefaultIndices();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
  }
}

unint64_t lazy protocol witness table accessor for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>;
  if (!lazy protocol witness table cache variable for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>)
  {
    type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>(255, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>);
  }
  return result;
}

void type metadata accessor for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>();
    type metadata accessor for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>();
    v0 = MEMORY[0x1E0DEA218];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E0DEA218]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>> and conformance DefaultIndices<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>, v0);
    v1 = type metadata accessor for Zip2Sequence.Iterator();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator);
  }
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>)
  {
    type metadata accessor for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>> and conformance CountingIndexCollection<A>, (uint64_t (*)(uint64_t))type metadata accessor for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>, MEMORY[0x1E0CE5A00]);
    v0 = type metadata accessor for DefaultIndices();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>);
  }
}

void type metadata accessor for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>, (uint64_t (*)(uint64_t))type metadata accessor for LazyMapSequence<[TableSections.Item], Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE59E8]);
}

void type metadata accessor for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E0DEA228]);
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>);
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

uint64_t outlined init with copy of CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>(255, &lazy cache variable for type metadata for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
    lazy protocol witness table accessor for type DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance DefaultIndices<A>();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance DefaultIndices<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance DefaultIndices<A>;
  if (!lazy protocol witness table cache variable for type DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance DefaultIndices<A>)
  {
    type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>(255, &lazy cache variable for type metadata for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA228], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance DefaultIndices<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:));
}

{
  return partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:));
}

uint64_t outlined destroy of EnumeratedSequence<TableColumnCollection>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EnumeratedSequence<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC58]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD **)(v1 + 24);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = *(_BYTE *)(a1 + 32);
  return specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)((uint64_t)v6, v2, v3) & 1;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD **)(v1 + 24);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = *(_BYTE *)(a1 + 32);
  return specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)((uint64_t)v6, v2, v3) & 1;
}

void type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(255, a3, a4);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined destroy of EnumeratedSequence<TableColumnCollection>.Iterator(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EnumeratedSequence<TableColumnCollection>.Iterator, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
}

uint64_t partial apply for closure #1 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:));
}

uint64_t partial apply for closure #2 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:));
}

uint64_t partial apply for closure #3 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:));
}

void type metadata accessor for _GraphValue<Binding<AnyTableColumnCustomization>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Binding<AnyTableColumnCustomization>?>)
  {
    type metadata accessor for Binding<EditMode>?(255, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<AnyTableColumnCustomization>?>);
  }
}

uint64_t outlined retain of ToolbarStorage.ID(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ToolbarStorage.ID(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void type metadata accessor for UnsafeBufferPointer<SystemSegmentItem>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for UnsafeBufferPointer<SystemSegmentItem>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA5B8]);
}

void type metadata accessor for CollectionDifference<SystemSegmentItem>.Change(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for CollectionDifference<SystemSegmentItem>.Change, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DECDC8]);
}

void type metadata accessor for (offset: Int, element: SystemSegmentItem, associatedWith: Int?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: SystemSegmentItem, associatedWith: Int?))
  {
    type metadata accessor for SystemSegmentItem();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: SystemSegmentItem, associatedWith: Int?));
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

uint64_t outlined retain of KeyboardShortcutBinding(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of KeyboardShortcutBinding(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void destroy for UpdateCollectionViewTableCoordinator(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(a1 + 112))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a1 + 176) & 1) != 0)
      swift_bridgeObjectRelease();
    else
      __swift_destroy_boxed_opaque_existential_1(a1 + 136);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 208))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 232))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

}

uint64_t initializeWithCopy for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  id v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  swift_unknownObjectWeakCopyInit();
  v5 = (_OWORD *)(a1 + 88);
  v6 = (_OWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 112);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v7;
    *(_QWORD *)(a1 + 120) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v9 = *(_BYTE *)(a2 + 176);
    swift_bridgeObjectRetain();
    if ((v9 & 1) != 0)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 136, a2 + 136);
    }
    *(_BYTE *)(a1 + 176) = v9;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v16 = *(_QWORD *)(a2 + 208);
    swift_bridgeObjectRetain();
    if (v16)
    {
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v16;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v17 = *(_QWORD *)(a2 + 232);
      if (v17)
      {
LABEL_8:
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = v17;
        v18 = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 248) = v18;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_11:
        *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
        *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v17 = *(_QWORD *)(a2 + 232);
      if (v17)
        goto LABEL_8;
    }
    v19 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v19;
    goto LABEL_11;
  }
  v10 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v10;
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  v11 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v11;
  v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v12;
  v13 = *(_OWORD *)(a2 + 104);
  *v5 = *v6;
  *(_OWORD *)(a1 + 104) = v13;
  v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v14;
LABEL_12:
  v20 = *(void **)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v20;
  v21 = v20;
  return a1;
}

uint64_t assignWithCopy for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  void *v41;
  id v42;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_unknownObjectWeakCopyAssign();
  v4 = (__int128 *)(a1 + 88);
  v5 = (__int128 *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 112);
  if (!*(_QWORD *)(a1 + 112))
  {
    if (!v6)
    {
      v16 = *v5;
      v17 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v17;
      *v4 = v16;
      v18 = *(_OWORD *)(a2 + 136);
      v19 = *(_OWORD *)(a2 + 152);
      v20 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v20;
      *(_OWORD *)(a1 + 136) = v18;
      *(_OWORD *)(a1 + 152) = v19;
      v21 = *(_OWORD *)(a2 + 200);
      v22 = *(_OWORD *)(a2 + 216);
      v23 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
      *(_OWORD *)(a1 + 216) = v22;
      *(_OWORD *)(a1 + 232) = v23;
      *(_OWORD *)(a1 + 200) = v21;
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 112) = v6;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v7 = *(_BYTE *)(a2 + 176);
    swift_bridgeObjectRetain();
    if ((v7 & 1) != 0)
    {
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v28;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 136, a2 + 136);
    }
    *(_BYTE *)(a1 + 176) = v7;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v29 = *(_QWORD *)(a2 + 208);
    swift_bridgeObjectRetain();
    if (v29)
    {
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 232))
      {
LABEL_20:
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_24:
        *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
        *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
        v33 = *(_BYTE *)(a2 + 258);
LABEL_34:
        *(_BYTE *)(a1 + 258) = v33;
        goto LABEL_35;
      }
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v31;
      if (*(_QWORD *)(a2 + 232))
        goto LABEL_20;
    }
    v32 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v32;
    goto LABEL_24;
  }
  if (v6)
  {
    __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (a1 != a2)
    {
      outlined destroy of TableColumnCollection.Backing(a1 + 136);
      if ((*(_BYTE *)(a2 + 176) & 1) != 0)
      {
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 176) = 1;
        swift_bridgeObjectRetain();
      }
      else
      {
        v24 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 160) = v24;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 136, a2 + 136);
        *(_BYTE *)(a1 + 176) = 0;
      }
    }
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    v25 = (_OWORD *)(a1 + 200);
    v26 = (_OWORD *)(a2 + 200);
    v27 = *(_QWORD *)(a2 + 208);
    if (*(_QWORD *)(a1 + 208))
    {
      if (v27)
      {
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 200, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
        v30 = *(_QWORD *)(a2 + 216);
        *v25 = *v26;
        *(_QWORD *)(a1 + 216) = v30;
      }
    }
    else if (v27)
    {
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v34 = *v26;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *v25 = v34;
    }
    v35 = (_OWORD *)(a1 + 224);
    v36 = (_OWORD *)(a2 + 224);
    v37 = *(_QWORD *)(a2 + 232);
    if (*(_QWORD *)(a1 + 232))
    {
      if (v37)
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of AccessibilityScrollableContext?(a1 + 224, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
        v38 = *(_OWORD *)(a2 + 240);
        *v35 = *v36;
        *(_OWORD *)(a1 + 240) = v38;
      }
    }
    else if (v37)
    {
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v39 = *(_OWORD *)(a2 + 240);
      *v35 = *v36;
      *(_OWORD *)(a1 + 240) = v39;
    }
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
    v33 = *(_BYTE *)(a2 + 258);
    goto LABEL_34;
  }
  outlined destroy of TableDataSourceAdaptor(a1 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *v4 = *v5;
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  v10 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  v14 = *(_OWORD *)(a2 + 216);
  v13 = *(_OWORD *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 200) = v15;
LABEL_35:
  v40 = *(void **)(a2 + 264);
  v41 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v40;
  v42 = v40;

  return a1;
}

uint64_t initializeWithTake for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  swift_unknownObjectWeakTakeInit();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  return a1;
}

uint64_t assignWithTake for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_unknownObjectWeakTakeAssign();
  v6 = (_OWORD *)(a1 + 88);
  v7 = (_OWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 112))
  {
    if (*(_QWORD *)(a2 + 112))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 88);
      v8 = *(_OWORD *)(a2 + 104);
      *v6 = *v7;
      *(_OWORD *)(a1 + 104) = v8;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        outlined destroy of TableColumnCollection.Backing(a1 + 136);
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
      }
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      if (*(_QWORD *)(a1 + 208))
      {
        if (*(_QWORD *)(a2 + 208))
        {
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
          swift_release();
          *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
          swift_release();
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 200, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      }
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
LABEL_12:
      if (*(_QWORD *)(a1 + 232))
      {
        if (*(_QWORD *)(a2 + 232))
        {
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
          swift_release();
          *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
          swift_release();
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
          swift_bridgeObjectRelease();
LABEL_17:
          *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
          *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
          *(_BYTE *)(a1 + 258) = *(_BYTE *)(a2 + 258);
          goto LABEL_18;
        }
        outlined destroy of AccessibilityScrollableContext?(a1 + 224, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      }
      v14 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v14;
      goto LABEL_17;
    }
    outlined destroy of TableDataSourceAdaptor(a1 + 88);
  }
  v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v11;
  v12 = *(_OWORD *)(a2 + 104);
  *v6 = *v7;
  *(_OWORD *)(a1 + 104) = v12;
  v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v13;
LABEL_18:
  v15 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateCollectionViewTableCoordinator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 272))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 264);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateCollectionViewTableCoordinator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 264) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 272) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateCollectionViewTableCoordinator()
{
  return &type metadata for UpdateCollectionViewTableCoordinator;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEA5B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(uint64_t a1@<X5>, int a2@<W6>, int a3@<W7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = Text.init(_:tableName:bundle:comment:)();
  View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(v13, v14, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1878A7914()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, int a4@<W6>, int a5@<W7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD v16[10];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];

  v25 = a5;
  v16[9] = a4;
  v29 = a3;
  v28 = a6;
  v18 = a8;
  v17 = a7;
  v27 = a11;
  v19 = a12;
  v26 = a9;
  v24 = *(_QWORD *)(a10 - 8);
  v21 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v12 = type metadata accessor for ModifiedContent();
  v23 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v20 = (char *)v16 - v14;
  v15 = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  v34[0] = a12;
  v34[1] = v15;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v34);
  v30 = v12;
  v31 = MEMORY[0x1E0CE7C38];
  v32 = v22;
  v33 = MEMORY[0x1E0CE7C28];
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A7A9C(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v10 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v9 - 256) = a1;
  *(_QWORD *)(v9 - 248) = v10;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v25 - v11;
  *(_QWORD *)(v9 - 176) = 0;
  v13 = v6 & 1;
  *(_QWORD *)(v9 - 344) = v5;
  *(_QWORD *)(v9 - 336) = v3;
  *(_QWORD *)(v9 - 352) = v4;
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)(v9 - 328) = v8;
  v14 = *(_QWORD *)(v9 - 192);
  *(_QWORD *)(v9 - 176) = v8;
  *(_QWORD *)(v9 - 168) = v14;
  *(_BYTE *)(v9 - 160) = v2;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8]();
  *(_DWORD *)(v9 - 320) = *(unsigned __int8 *)(v9 - 113);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v5, v3, v6 & 1);
  v15 = swift_bridgeObjectRetain();
  (*(void (**)(uint64_t))(v9 - 312))(v15);
  KeyPath = swift_getKeyPath();
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  *(_QWORD *)(v9 - 176) = KeyPath;
  *(_BYTE *)(v9 - 168) = 0;
  *(_QWORD *)(v9 - 160) = v17;
  *(_BYTE *)(v9 - 152) = 0;
  *(_QWORD *)(v9 - 144) = v18;
  *(_BYTE *)(v9 - 136) = 0;
  *(_QWORD *)(v9 - 128) = v19;
  *(_BYTE *)(v9 - 120) = 0;
  lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
  v20 = *(_QWORD *)(v9 - 288);
  v21 = *(_QWORD *)(v9 - 280);
  View.buttonStyle<A>(_:)(v9 - 176, v21, (uint64_t)&type metadata for PlatformItemListButtonStyle, *(_QWORD *)(v9 - 296));
  outlined consume of Environment<Color?>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v17, 0);
  outlined consume of Environment<Bool>.Content(v18, 0);
  outlined consume of Environment<Bool>.Content(v19, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 240) + 8))(v7, v21);
  ConfirmationDialogModifier.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(*(_DWORD *)(v9 - 320), *(_QWORD *)(v9 - 328), *(_QWORD *)(v9 - 192), *(_DWORD *)(v9 - 316), *(_QWORD *)(v9 - 344), *(_QWORD *)(v9 - 336), v13, *(_QWORD *)(v9 - 352), (uint64_t)v12, *(_DWORD *)(v9 - 228), v20, v24, *(_QWORD *)(v9 - 264), MEMORY[0x1E0CE7C38], *(_QWORD *)(v9 - 272), MEMORY[0x1E0CE7C28]);
  v22 = *(_QWORD *)(v9 - 256);
  MEMORY[0x18D75B4AC](v12, *(_QWORD *)(v9 - 224), v22, *(_QWORD *)(v9 - 216));
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 248) + 8))(v12, v22);
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>)
  {
    v2 = lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
    v4 = type metadata accessor for PrimitiveButtonStyleContainerModifier(a1, (uint64_t)&type metadata for PlatformItemListButtonStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>);
  }
}

void View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  v25 = a4;
  v26 = a5;
  v23 = a2;
  v24 = a3;
  v22 = a11;
  v17 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v20 = Text.init<A>(_:)();
  View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(v20, v21, v24, v25, v26, a9, a6, a7, a8, v22, *((uint64_t *)&v22 + 1), a13);
}

uint64_t sub_1878A7E94()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = Text.init(_:tableName:bundle:comment:)();
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(v19, v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_1878A7FCC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD v24[12];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v39 = a6;
  v24[11] = a5;
  v41 = a3;
  v42 = a4;
  v40 = a7;
  v35 = a10;
  v36 = a11;
  v28 = a9;
  v27 = a8;
  v30 = a17;
  v25 = a16;
  v37 = a12;
  v38 = a15;
  v32 = a14;
  MEMORY[0x1E0C80A78](a1, a2);
  v34 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(a13 - 8);
  v29 = a13;
  MEMORY[0x1E0C80A78](v18, v19);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v20 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v20, v21);
  v26 = (char *)v24 - v22;
  v23 = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  v47[0] = a16;
  v47[1] = v23;
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v47);
  v43 = v20;
  v44 = a14;
  v45 = v31;
  v46 = a17;
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A819C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  *(_QWORD *)(v9 - 288) = a1;
  *(_QWORD *)(v9 - 280) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v27 - v10;
  *(_QWORD *)(v9 - 176) = 0;
  v12 = v2 & 1;
  v13 = v7;
  *(_QWORD *)(v9 - 376) = v7;
  *(_QWORD *)(v9 - 368) = v6;
  *(_DWORD *)(v9 - 380) = v12;
  *(_QWORD *)(v9 - 392) = v4;
  Text.assertUnstyled(_:options:)();
  v14 = *(_QWORD *)(v9 - 192);
  *(_QWORD *)(v9 - 176) = *(_QWORD *)(v9 - 200);
  *(_QWORD *)(v9 - 168) = v14;
  *(_BYTE *)(v9 - 160) = v3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8]();
  *(_DWORD *)(v9 - 360) = *(unsigned __int8 *)(v9 - 113);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v13, v6, v12);
  v15 = swift_bridgeObjectRetain();
  v16 = v8;
  (*(void (**)(uint64_t))(v9 - 336))(v15);
  KeyPath = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  *(_QWORD *)(v9 - 176) = KeyPath;
  *(_BYTE *)(v9 - 168) = 0;
  *(_QWORD *)(v9 - 160) = v18;
  *(_BYTE *)(v9 - 152) = 0;
  *(_QWORD *)(v9 - 144) = v19;
  *(_BYTE *)(v9 - 136) = 0;
  *(_QWORD *)(v9 - 128) = v20;
  *(_BYTE *)(v9 - 120) = 0;
  lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
  v21 = *(_QWORD *)(v9 - 344);
  v22 = *(_QWORD *)(v9 - 320);
  View.buttonStyle<A>(_:)(v9 - 176, v22, (uint64_t)&type metadata for PlatformItemListButtonStyle, *(_QWORD *)(v9 - 352));
  outlined consume of Environment<Color?>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v18, 0);
  outlined consume of Environment<Bool>.Content(v19, 0);
  outlined consume of Environment<Bool>.Content(v20, 0);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 272) + 8))(v16, v22);
  v24 = *(_QWORD *)(v9 - 264);
  (*(void (**)(uint64_t))(v9 - 256))(v23);
  ConfirmationDialogModifier.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(*(_DWORD *)(v9 - 360), *(_QWORD *)(v9 - 200), *(_QWORD *)(v9 - 192), *(_DWORD *)(v9 - 356), *(_QWORD *)(v9 - 376), *(_QWORD *)(v9 - 368), *(_DWORD *)(v9 - 380), *(_QWORD *)(v9 - 392), (uint64_t)v11, *(_DWORD *)(v9 - 220), v21, v24, v5, *(_QWORD *)(v9 - 296), *(_QWORD *)(v9 - 304), *(_QWORD *)(v9 - 312));
  v25 = *(_QWORD *)(v9 - 288);
  MEMORY[0x18D75B4AC](v11, *(_QWORD *)(v9 - 240), v25, *(_QWORD *)(v9 - 232));
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 280) + 8))(v11, v25);
}

void View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v25 = a8;
  v26 = a7;
  v29 = a4;
  v30 = a5;
  v27 = a2;
  v28 = a3;
  v23 = a12;
  v24 = a10;
  v18 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v20 + 16))((char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  v21 = Text.init<A>(_:)();
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(v21, v22, v27, v28, v29, v30, a9, a6, v26, v25, v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), a13, a15, a16);
}

uint64_t sub_1878A8554()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, __int128 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = Text.init(_:tableName:bundle:comment:)();
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(v16, v17, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1878A867C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>, __int128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;

  v23 = a10;
  v24 = a11;
  v25 = a12;
  v26 = a13;
  v27 = a14;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a8;
  v32 = a9;
  v19 = type metadata accessor for Optional();
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v19, &a14);
  View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(a1, a2, a4, a5, a6, a7, (uint64_t)partial apply for closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:), (uint64_t)v22, a10, v19, a13, v20);
}

void View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v24 = a8;
  v25 = a7;
  v26 = a6;
  v27 = a2;
  v29 = a4;
  v30 = a5;
  v28 = a3;
  v23 = a9;
  v16 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v18 + 16))((char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  v19 = Text.init<A>(_:)();
  *((_QWORD *)&v21 + 1) = v25;
  *(_QWORD *)&v21 = v26;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(v19, v20, v27, v28, v29, v30, v23, v21, v24, a10, a12, a13, a14, a16);
}

uint64_t sub_1878A8890()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Text.init(_:tableName:bundle:comment:)();
  View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(v21, v22, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1878A89D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v46 = a13;
  v47 = a14;
  v48 = a15;
  v49 = a16;
  v50 = a17;
  v51 = a18;
  v52 = a19;
  v53 = a3;
  v54 = a4;
  v55 = a5;
  v56 = a8;
  v57 = a9;
  v58 = a10;
  v32 = a13;
  v33 = a14;
  v34 = a15;
  v35 = a16;
  v36 = a17;
  v37 = a18;
  v38 = a19;
  v39 = a3;
  v40 = a4;
  v41 = a5;
  v42 = a8;
  v43 = a11;
  v44 = a12;
  v22 = type metadata accessor for Optional();
  v23 = type metadata accessor for Optional();
  v24 = MEMORY[0x1E0CE83F8];
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v22, &a18);
  v26 = MEMORY[0x18D75FFDC](v24, v23, &a19);
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:), (uint64_t)v45, (uint64_t)partial apply for closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:), (uint64_t)v31, a13, v22, v23, a17, v25, v26);
}

void View.confirmationDialog<A, B, C, D>(_:isPresented:titleVisibility:presenting:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;

  v28 = a8;
  v29 = a7;
  v30 = a6;
  v31 = a2;
  v33 = a4;
  v34 = a5;
  v32 = a3;
  v27 = a9;
  v26 = a10;
  v24 = a14;
  v25 = a13;
  v19 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v21 + 16))((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  v22 = Text.init<A>(_:)();
  View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(v22, v23, v31, v32, v33, v34, v27, v30, v29, v28, v26, *((uint64_t *)&v26 + 1), a11, v25, v24, a15, a16, a18, a19);
}

uint64_t sub_1878A8C64()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

void sub_1878A8CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A8D1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[14];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A8D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 40);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A8DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[14];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A8E3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 32);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A8EB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[16];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A8F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 48);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A8F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[16];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A8FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = type metadata accessor for Optional();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v3 = type metadata accessor for ModifiedContent();
  v5 = v1;
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v5);
  v4[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A9078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[17];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A90CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = type metadata accessor for Optional();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v3 = type metadata accessor for ModifiedContent();
  v5 = v1;
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v5);
  v4[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A917C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[17];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A91D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = type metadata accessor for Optional();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for Optional();
  v9 = v1;
  v6 = MEMORY[0x1E0CE83F8];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v9);
  v8[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  v7 = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  MEMORY[0x18D75FFDC](v6, v5, &v7);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A92A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[20];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

void sub_1878A92F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = type metadata accessor for Optional();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255);
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for Optional();
  v9 = v1;
  v6 = MEMORY[0x1E0CE83F8];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v9);
  v8[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  v7 = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  MEMORY[0x18D75FFDC](v6, v5, &v7);
  type metadata accessor for ConfirmationDialogModifier();
}

uint64_t sub_1878A93C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[20];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

uint64_t key path getter for EnvironmentValues.searchText : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.searchText : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<AttributedString>?(a1, (uint64_t)v5);
  return EnvironmentValues.searchText.setter((uint64_t)v5);
}

void ContentUnavailableView.init(label:description:actions:)()
{
  type metadata accessor for ContentUnavailableView();
}

uint64_t sub_1878A95EC()
{
  uint64_t (*v0)(uint64_t);
  uint64_t (*v1)(void);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v3 = v1();
  v4 = v0(v3);
  return v2(v4);
}

void type metadata accessor for ContentUnavailableView()
{
  JUMPOUT(0x18D75FF28);
}

void ContentUnavailableView.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v20 = a3;
  v3 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v17 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = *(_QWORD *)(v8 + 16);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = v11[5];
  v15 = v11[6];
  v16 = v12;
  v14 = v11[7];
  v21 = v9;
  v22 = v6;
  v23 = v3;
  v24 = v12;
  v25 = v15;
  v26 = v14;
  type metadata accessor for ResolvedContentUnavailableView();
}

void sub_1878A9730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v23;

  *(_QWORD *)(v16 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 16);
  v23 = *(_QWORD *)(v16 - 160);
  v22(v15, v23, v14, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 176) + 16))(v13, v23 + *(int *)(v12 + 68), v10);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 144) + 16))(*(_QWORD *)(v16 - 152), v23 + *(int *)(v12 + 72), v9);
  ResolvedContentUnavailableView.init(label:description:actions:)((uint64_t)v18);
}

uint64_t sub_1878A97FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedContentUnavailableView<A, B, C>, v2);
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 168) + 8);
  v5(v1, v2);
  static ViewBuilder.buildBlock<A>(_:)(v0, v2, *(_QWORD *)(v3 - 136));
  return v5(v0, v2);
}

uint64_t ContentUnavailableView<>.init(_:image:description:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;

  outlined copy of Text?(a1, a2, a4, a5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = Text.init(_:tableName:bundle:comment:)();
  v16 = v8;
  v10 = v9;
  v14 = v11;
  v12 = Image.init(_:bundle:)();
  outlined consume of Text?(a1, a2, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v14 & 1;
  *(_QWORD *)(a3 + 24) = v16;
  *(_QWORD *)(a3 + 32) = v12;
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = a2;
  *(_QWORD *)(a3 + 56) = a4;
  *(_QWORD *)(a3 + 64) = a5;
  return result;
}

uint64_t ContentUnavailableView<>.init(_:systemImage:description:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;

  outlined copy of Text?(a3, a4, a6, a7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Text.init(_:tableName:bundle:comment:)();
  v18 = v12;
  v19 = v13;
  v17 = v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  *(_DWORD *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 36) = 1;
  *(_OWORD *)(v15 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v15 + 56) = a1;
  *(_QWORD *)(v15 + 64) = a2;
  *(_OWORD *)(v15 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v15 + 88) = 0;
  swift_bridgeObjectRetain();
  outlined consume of Text?(a3, a4, a6, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v18;
  *(_BYTE *)(a5 + 16) = v17 & 1;
  *(_QWORD *)(a5 + 24) = v19;
  *(_QWORD *)(a5 + 32) = v15;
  *(_QWORD *)(a5 + 40) = a3;
  *(_QWORD *)(a5 + 48) = a4;
  *(_QWORD *)(a5 + 56) = a6;
  *(_QWORD *)(a5 + 64) = a7;
  return result;
}

double ContentUnavailableView<>.init<A>(_:image:description:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  double result;

  *(_QWORD *)&result = ContentUnavailableView<>.init<A>(_:image:description:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:)).n128_u64[0];
  return result;
}

double ContentUnavailableView<>.init<A>(_:systemImage:description:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  double result;

  *(_QWORD *)&result = ContentUnavailableView<>.init<A>(_:image:description:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:)).n128_u64[0];
  return result;
}

__n128 ContentUnavailableView<>.init<A>(_:image:description:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v13;
  char v20;
  __n128 result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;

  v13 = a6;
  *(_QWORD *)&v27 = a4;
  *((_QWORD *)&v27 + 1) = a5;
  *(_QWORD *)&v28 = a6;
  *((_QWORD *)&v28 + 1) = a7;
  outlined copy of Text?(a4, a5, a6, a7);
  closure #1 in ContentUnavailableView<>.init<A>(_:image:description:)(a1, a2, a3, a8, a10, a11, (uint64_t)&v24);
  outlined consume of Text?(a4, a5, v13, a7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
  v20 = v25;
  result = v26;
  v22 = v27;
  v23 = v28;
  *(_OWORD *)a9 = v24;
  *(_BYTE *)(a9 + 16) = v20;
  *(__n128 *)(a9 + 24) = result;
  *(_OWORD *)(a9 + 40) = v22;
  *(_OWORD *)(a9 + 56) = v23;
  return result;
}

__n128 closure #1 in ContentUnavailableView<>.init<A>(_:image:description:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(__int128 *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  __n128 result;
  __int128 v19;
  char v20;
  __n128 v21;

  v13 = MEMORY[0x1E0C80A78](a1, a1);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  swift_bridgeObjectRetain();
  a6(&v19, v15, a2, a3, a4, a5);
  v17 = v20;
  result = v21;
  *(_OWORD *)a7 = v19;
  *(_BYTE *)(a7 + 16) = v17;
  *(__n128 *)(a7 + 24) = result;
  return result;
}

uint64_t static ContentUnavailableView<>.search.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;

  v2 = type metadata accessor for SearchUnavailableContent.Label();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v5 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)((char *)v5 + *(int *)(v2 + 20));
  *v6 = 0;
  v6[1] = 0;
  return outlined init with take of SearchUnavailableContent.Label((uint64_t)v5, a1);
}

uint64_t type metadata accessor for SearchUnavailableContent.Label()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SearchUnavailableContent.Label;
  if (!type metadata singleton initialization cache for SearchUnavailableContent.Label)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with take of SearchUnavailableContent.Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchUnavailableContent.Label();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static ContentUnavailableView<>.search(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v12;

  v6 = type metadata accessor for SearchUnavailableContent.Label();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  swift_storeEnumTagMultiPayload();
  v10 = (uint64_t *)((char *)v9 + *(int *)(v6 + 20));
  *v10 = a1;
  v10[1] = a2;
  outlined init with take of SearchUnavailableContent.Label((uint64_t)v9, a3);
  return swift_bridgeObjectRetain();
}

uint64_t SearchUnavailableContent.Label.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ObjCClassFromMetadata;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  SearchUnavailableContent.Label.resolvedKey.getter();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = objc_msgSend((id)v3, sel_bundleForClass_, ObjCClassFromMetadata);
  v18 = Text.init(_:tableName:bundle:comment:)();
  v19 = v5;
  v7 = v6;
  LOBYTE(v3) = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LocalizedStringKey.init(stringLiteral:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = Text.init(_:tableName:bundle:comment:)();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0x697966696E67616DLL;
  *(_QWORD *)(v16 + 24) = 0xEF7373616C67676ELL;
  *(_DWORD *)(v16 + 32) = 0;
  *(_BYTE *)(v16 + 36) = 1;
  *(_OWORD *)(v16 + 40) = xmmword_187BF9F90;
  *(_OWORD *)(v16 + 56) = xmmword_187C67C70;
  *(_OWORD *)(v16 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v16 + 88) = 0;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v3 & 1;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v13 & 1;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  return result;
}

uint64_t SearchUnavailableContent.Label.resolvedKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;

  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString?(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v48 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v49 = (char *)&v47 - v15;
  v16 = type metadata accessor for CharacterSet();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SearchUnavailableContent.Label() + 20));
  v22 = (void *)v21[1];
  if (!v22)
    goto LABEL_6;
  v47 = *v21;
  v51 = v47;
  v52 = v22;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v50 = v0;
  v23 = StringProtocol.trimmingCharacters(in:)();
  v24 = v8;
  v25 = v10;
  v26 = v9;
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  swift_bridgeObjectRelease();
  v29 = HIBYTE(v28) & 0xF;
  v30 = (v28 & 0x2000000000000000) == 0;
  v9 = v26;
  v10 = v25;
  v8 = v24;
  if (v30)
    v29 = v23 & 0xFFFFFFFFFFFFLL;
  if (!v29)
  {
LABEL_6:
    specialized Environment.wrappedValue.getter((uint64_t)v4);
    type metadata accessor for Binding<AttributedString>();
    v36 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v4, 1, v35) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    else
    {
      MEMORY[0x18D75B9C8](v36);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
      {
        v38 = v8;
        v39 = v49;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v49, v38, v9);
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v48, v39, v9);
        v51 = String.init(_:)();
        v52 = v40;
        static CharacterSet.whitespacesAndNewlines.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v41 = StringProtocol.trimmingCharacters(in:)();
        v43 = v42;
        (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = HIBYTE(v43) & 0xF;
        if ((v43 & 0x2000000000000000) == 0)
          v44 = v41 & 0xFFFFFFFFFFFFLL;
        if (v44)
        {
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v45._object = (void *)0x8000000187BEA390;
          v45._countAndFlagsBits = 0xD000000000000023;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v45);
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
          v46._countAndFlagsBits = 0;
          v46._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v46);
          v34 = v51;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v39, v9);
          return v34;
        }
        (*(void (**)(char *, uint64_t))(v10 + 8))(v39, v9);
        return LocalizedStringKey.init(stringLiteral:)();
      }
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AttributedString?);
    return LocalizedStringKey.init(stringLiteral:)();
  }
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v31._object = (void *)0x8000000187BEA390;
  v31._countAndFlagsBits = 0xD000000000000023;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v31);
  v32._countAndFlagsBits = v47;
  v32._object = v22;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v32);
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v33);
  return v51;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchUnavailableContent.Label()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t SearchUnavailableContent.Description.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  LocalizedStringKey.init(stringLiteral:)();
  v2 = static Text.System.kitLocalized(_:tableName:comment:)();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v8;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance SearchUnavailableContent.Description@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  LocalizedStringKey.init(stringLiteral:)();
  v2 = static Text.System.kitLocalized(_:tableName:comment:)();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v8;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ContentUnavailableView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchUnavailableContent.Label()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchUnavailableContent.Description()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchUnavailableContent.Actions()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ContentUnavailableView(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for ContentUnavailableView(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

ValueMetadata *type metadata accessor for SearchUnavailableContent()
{
  return &type metadata for SearchUnavailableContent;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchUnavailableContent.Label(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v21;
  char *v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<AttributedString>();
      v8 = v7;
      v9 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
      {
        type metadata accessor for Binding<AttributedString>?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        v13 = *(int *)(v8 + 32);
        v21 = (char *)a2 + v13;
        v22 = (char *)a1 + v13;
        v14 = type metadata accessor for AttributedString();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
        swift_retain();
        swift_retain();
        v15(v22, v21, v14);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v16 = *(int *)(a3 + 20);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SearchUnavailableContent.Label(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    v3 = v2;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2))
    {
      swift_release();
      swift_release();
      v4 = a1 + *(int *)(v3 + 32);
      v5 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SearchUnavailableContent.Label(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v19;
  char *v20;

  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    v7 = v6;
    v8 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
    {
      type metadata accessor for Binding<AttributedString>?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = *(int *)(v7 + 32);
      v19 = (char *)a2 + v11;
      v20 = (char *)a1 + v11;
      v12 = type metadata accessor for AttributedString();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_retain();
      swift_retain();
      v13(v20, v19, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v14 = *(int *)(a3 + 20);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SearchUnavailableContent.Label(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v17;
  char *v18;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Environment<Binding<AttributedString>?>.Content);
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<AttributedString>();
      v7 = v6;
      v8 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
      {
        type metadata accessor for Binding<AttributedString>?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v10 = *(int *)(v7 + 32);
        v17 = (char *)a2 + v10;
        v18 = (char *)a1 + v10;
        v11 = type metadata accessor for AttributedString();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
        swift_retain();
        swift_retain();
        v12(v18, v17, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for SearchUnavailableContent.Label(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    v9 = v8;
    v10 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
    {
      type metadata accessor for Binding<AttributedString>?(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = *(int *)(v9 + 32);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for SearchUnavailableContent.Label(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Environment<Binding<AttributedString>?>.Content);
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<AttributedString>();
      v9 = v8;
      v10 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
      {
        type metadata accessor for Binding<AttributedString>?(0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        v13 = *(int *)(v9 + 32);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for AttributedString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v17 = *(int *)(a3 + 20);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchUnavailableContent.Label()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878AB430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchUnavailableContent.Label()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1878AB4E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
}

void type metadata completion function for SearchUnavailableContent.Label()
{
  unint64_t v0;

  type metadata accessor for Environment<Binding<AttributedString>?>.Content(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for SearchUnavailableContent.Description()
{
  return &type metadata for SearchUnavailableContent.Description;
}

ValueMetadata *type metadata accessor for SearchUnavailableContent.Actions()
{
  return &type metadata for SearchUnavailableContent.Actions;
}

void sub_1878AB604()
{
  type metadata accessor for ResolvedContentUnavailableView();
}

uint64_t sub_1878AB62C(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedContentUnavailableView<A, B, C>, a1);
}

uint64_t sub_1878AB648()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
}

uint64_t type metadata accessor for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>;
  if (!lazy cache variable for type metadata for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for Label();
  }
  return result;
}

void type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for Label<Text, Image>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1878AB7F4()
{
  return MEMORY[0x1E0CE6C58];
}

uint64_t sub_1878AB800()
{
  return MEMORY[0x1E0CE7C28];
}

void type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>)
  {
    type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>);
  }
}

uint64_t type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for AttributedString?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined init with copy of Binding<AttributedString>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>);
  }
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];
  _QWORD v22[4];

  v4 = v3;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v11);
  v12 = type metadata accessor for TaskPriority();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v11);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v14 = dispatch thunk of Actor.unownedExecutor.getter();
      v16 = v15;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v14 = 0;
  v16 = 0;
LABEL_6:
  v17 = *v4;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  v19 = (_QWORD *)(v16 | v14);
  if (v16 | v14)
  {
    v22[0] = 0;
    v22[1] = 0;
    v19 = v22;
    v22[2] = v14;
    v22[3] = v16;
  }
  v21[1] = 1;
  v21[2] = v19;
  v21[3] = v17;
  swift_task_create();
  return swift_release();
}

id one-time initialization function for shared()
{
  uint64_t v0;
  id result;
  uint64_t v2;

  type metadata accessor for BGTaskSchedulerWrapper();
  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  result = objc_msgSend((id)objc_opt_self(), sel_shared);
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 112) = result;
  *(_QWORD *)(v0 + 120) = v2;
  static BGTaskSchedulerWrapper.shared = v0;
  return result;
}

uint64_t closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = lazy protocol witness table accessor for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = v13;
  v14[4] = a2;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a1;
  swift_retain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BGTaskSchedulerWrapper.observeTask(_:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return BGTaskSchedulerWrapper.performAction(for:with:)(a5, a6, a7);
}

uint64_t BGTaskSchedulerWrapper.performAction(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for TaskPriority?(0);
  v4[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BGTaskSchedulerWrapper.performAction(for:with:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  v1 = v0[12];
  v3 = v0[9];
  v2 = (void *)v0[10];
  v4 = v0[8];
  v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v4;
  v6[5] = v3;
  swift_bridgeObjectRetain();
  v7 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in BGTaskSchedulerWrapper.performAction(for:with:), (uint64_t)v6);
  v0[13] = v7;
  v0[6] = partial apply for closure #2 in BGTaskSchedulerWrapper.performAction(for:with:);
  v0[7] = v7;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_65;
  v8 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_setExpirationHandler_, v8);
  _Block_release(v8);
  v9 = (_QWORD *)swift_task_alloc();
  v0[14] = v9;
  *v9 = v0;
  v9[1] = BGTaskSchedulerWrapper.performAction(for:with:);
  return Task.result.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 80), sel_setTaskCompletedWithSuccess_, (*(_BYTE *)(v0 + 120) & 1) == 0);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in BGTaskSchedulerWrapper.performAction(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t closure #1 in BGTaskSchedulerWrapper.performAction(for:with:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[4];
  v2 = specialized static BackgroundTaskProtocol.currentTasks()();
  v0[5] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = closure #1 in BGTaskSchedulerWrapper.performAction(for:with:);
  return specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(v0[2], v0[3], v1, v2);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BGTaskSchedulerWrapper.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for BGTaskSchedulerWrapper()
{
  return objc_opt_self();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance BGTaskSchedulerWrapper()
{
  uint64_t v0;

  return v0;
}

unint64_t lazy protocol witness table accessor for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper;
  if (!lazy protocol witness table cache variable for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper)
  {
    v1 = type metadata accessor for BGTaskSchedulerWrapper();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BGTaskSchedulerWrapper, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper);
  }
  return result;
}

uint64_t sub_1878AC2D4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BGTaskSchedulerWrapper.observeTask(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[5];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return BGTaskSchedulerWrapper.performAction(for:with:)(v2, v4, v3);
}

uint64_t sub_1878AC39C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BGTaskSchedulerWrapper.performAction(for:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6[3] = v5;
  v6[4] = v4;
  v6[2] = a1;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

void partial apply for closure #2 in BGTaskSchedulerWrapper.performAction(for:with:)()
{
  JUMPOUT(0x18D75D204);
}

uint64_t specialized static BackgroundTaskProtocol.currentTasks()()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15[2];
  _BYTE v16[40];
  _BYTE v17[40];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v0 = MEMORY[0x1E0DEE9C0];
  type metadata accessor for TaskActionsContainer<(), ()>(0, (unint64_t *)&lazy cache variable for type metadata for TaskActionsContainer<(), ()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer);
  static Update.ensure<A>(_:)();
  if (*(_QWORD *)(v21 + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x69737365534C5255, 0xEA00000000006E6FLL), (v2 & 1) != 0)
    && (v3 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v1),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (v4 = *(_QWORD *)(v3 + 16)) != 0))
  {
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v3 + 32;
    v6 = v0 + 8;
    do
    {
      outlined init with copy of BackgroundTask<String, ()>(v5, (uint64_t)v17, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
      outlined init with copy of BackgroundTask<String, ()>((uint64_t)v17, (uint64_t)v15, &lazy cache variable for type metadata for BackgroundTask<(), ()>, v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTask);
      outlined init with take of OptionalBinaryInteger(v15, (uint64_t)v16);
      type metadata accessor for BackgroundTaskProtocol();
      swift_dynamicCast();
      v8 = v18;
      v7 = v19;
      swift_retain();
      outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry((uint64_t)v17, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6);
      v9 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v20;
      }
      v11 = *(_QWORD *)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1);
        v9 = v20;
      }
      *(_QWORD *)(v9 + 16) = v11 + 1;
      v12 = v9 + 32 * v11;
      *(_OWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 48) = v8;
      *(_QWORD *)(v12 + 56) = v7;
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v9;
}

{
  unint64_t v0;
  char v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14[2];
  _BYTE v15[40];
  _BYTE v16[40];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for TaskActionsContainer<(), ()>(0, (unint64_t *)&lazy cache variable for type metadata for TaskActionsContainer<String, ()>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer);
  static Update.ensure<A>(_:)();
  if (*(_QWORD *)(v20 + 16)
    && (v0 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x8000000187BEA410), (v1 & 1) != 0)
    && (v2 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v0),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (v3 = *(_QWORD *)(v2 + 16)) != 0))
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v2 + 32;
    v5 = MEMORY[0x1E0DEA968];
    do
    {
      outlined init with copy of BackgroundTask<String, ()>(v4, (uint64_t)v16, &lazy cache variable for type metadata for TaskActionsContainer<String, ()>.ContainerEntry, v5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
      outlined init with copy of BackgroundTask<String, ()>((uint64_t)v16, (uint64_t)v14, &lazy cache variable for type metadata for BackgroundTask<String, ()>, v5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTask);
      outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v15);
      type metadata accessor for BackgroundTaskProtocol();
      swift_dynamicCast();
      v7 = v17;
      v6 = v18;
      swift_retain();
      outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry((uint64_t)v16, &lazy cache variable for type metadata for TaskActionsContainer<String, ()>.ContainerEntry, v5);
      v8 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v19;
      }
      v10 = *(_QWORD *)(v8 + 16);
      v9 = *(_QWORD *)(v8 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1);
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v10 + 1;
      v11 = v8 + 32 * v10;
      *(_OWORD *)(v11 + 32) = v13;
      *(_QWORD *)(v11 + 48) = v7;
      *(_QWORD *)(v11 + 56) = v6;
      v4 += 56;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v8;
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  _BYTE v17[40];
  _BYTE v18[40];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v0 = MEMORY[0x1E0DEE9C0];
  type metadata accessor for TaskActionsContainer<(), ()>(0, (unint64_t *)&lazy cache variable for type metadata for TaskActionsContainer<(), ()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer);
  static Update.ensure<A>(_:)();
  if (*(_QWORD *)(v22 + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x6572666552707041, 0xEA00000000006873), (v2 & 1) != 0)
    && (v3 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v1),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (v4 = *(_QWORD *)(v3 + 16)) != 0))
  {
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v3 + 32;
    v6 = v0 + 8;
    do
    {
      outlined init with copy of BackgroundTask<String, ()>(v5, (uint64_t)v18, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
      outlined init with copy of BackgroundTask<String, ()>((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for BackgroundTask<(), ()>, v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for BackgroundTask);
      outlined init with take of OptionalBinaryInteger(v16, (uint64_t)v17);
      type metadata accessor for BackgroundTaskProtocol();
      swift_dynamicCast();
      v8 = v19;
      v7 = v20;
      swift_retain();
      outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry((uint64_t)v18, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6);
      v9 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v21;
      }
      v11 = *(_QWORD *)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1);
        v9 = v21;
      }
      *(_QWORD *)(v9 + 16) = v11 + 1;
      v12 = (_QWORD *)(v9 + 32 * v11);
      v12[4] = v14;
      v12[5] = v15;
      v12[6] = v8;
      v12[7] = v7;
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v9;
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  type metadata accessor for TaskPriority?(0);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  type metadata accessor for TaskPriority?(0);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[4];
  v1 = v0[5];
  v4 = v0[2];
  v3 = v0[3];
  v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v4;
  v6[6] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[6] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), (uint64_t)v6);
  v7 = (_QWORD *)swift_task_alloc();
  v0[7] = v7;
  *v7 = v0;
  v7[1] = specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return Task.result.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v6 = v0[2];
  v5 = v0[3];
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v4;
  v8[6] = v3;
  v8[7] = v6;
  v8[8] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[8] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), (uint64_t)v8);
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return Task.result.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v0[2] = v4;
  v0[3] = v3;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  outlined init with take of String?((uint64_t)(v0 + 2), (uint64_t)(v6 + 5));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[8] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), (uint64_t)v6);
  v7 = (_QWORD *)swift_task_alloc();
  v0[9] = v7;
  *v7 = v0;
  v7[1] = specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return Task.result.getter();
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  type metadata accessor for TaskPriority?(0);
  v6[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  type metadata accessor for TaskPriority?(0);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v5;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  type metadata accessor for TaskPriority?(0);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  __int128 v25;
  uint64_t (*v26)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
  if (v1)
  {
    v2 = (_QWORD *)(swift_bridgeObjectRetain() + 56);
    do
    {
      v5 = *(_QWORD *)(v0 + 96);
      v4 = *(_QWORD *)(v0 + 104);
      v6 = (uint64_t (*)(uint64_t, uint64_t))*(v2 - 3);
      v7 = *v2;
      v25 = *((_OWORD *)v2 - 1);
      swift_retain();
      swift_retain();
      if ((v6(v5, v4) & 1) != 0)
      {
        v24 = v1;
        v8 = v7;
        v10 = *(_QWORD *)(v0 + 112);
        v9 = *(_QWORD *)(v0 + 120);
        v11 = type metadata accessor for TaskPriority();
        v12 = *(_QWORD *)(v11 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v9, 1, 1, v11);
        v13 = swift_allocObject();
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = v6;
        *(_OWORD *)(v13 + 40) = v25;
        *(_QWORD *)(v13 + 56) = v8;
        outlined init with copy of TaskPriority?(v9, v10);
        LODWORD(v10) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
        swift_retain();
        swift_retain();
        v14 = *(_QWORD *)(v0 + 112);
        if ((_DWORD)v10 == 1)
        {
          outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 112));
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
        }
        if (*(_QWORD *)(v13 + 16))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          v15 = dispatch thunk of Actor.unownedExecutor.getter();
          v17 = v16;
          swift_unknownObjectRelease();
        }
        else
        {
          v15 = 0;
          v17 = 0;
        }
        v18 = **(_QWORD **)(v0 + 80);
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
        *(_QWORD *)(v19 + 24) = v13;
        v20 = v17 | v15;
        if (v17 | v15)
        {
          v20 = v0 + 16;
          *(_QWORD *)(v0 + 16) = 0;
          *(_QWORD *)(v0 + 24) = 0;
          *(_QWORD *)(v0 + 32) = v15;
          *(_QWORD *)(v0 + 40) = v17;
        }
        v1 = v24;
        v3 = *(_QWORD *)(v0 + 120);
        *(_QWORD *)(v0 + 48) = 1;
        *(_QWORD *)(v0 + 56) = v20;
        *(_QWORD *)(v0 + 64) = v18;
        swift_task_create();
        swift_release();
        outlined destroy of TaskPriority?(v3);
      }
      swift_release();
      swift_release();
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  v21 = **(_QWORD **)(v0 + 80);
  v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncSequence.reduce<A>(_:_:)
                                                 + async function pointer to specialized AsyncSequence.reduce<A>(_:_:));
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v22;
  *v22 = v0;
  v22[1] = specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v26(*(_QWORD *)(v0 + 72), v21);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t (*v26)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
  if (v1)
  {
    v2 = (_QWORD *)(swift_bridgeObjectRetain() + 56);
    do
    {
      v5 = *(_QWORD *)(v0 + 96);
      v4 = *(_QWORD *)(v0 + 104);
      v6 = (uint64_t (*)(uint64_t, uint64_t))*(v2 - 3);
      v7 = *v2;
      v25 = *((_OWORD *)v2 - 1);
      swift_retain();
      swift_retain();
      if ((v6(v5, v4) & 1) != 0)
      {
        v9 = *(_QWORD *)(v0 + 128);
        v8 = *(_QWORD *)(v0 + 136);
        v24 = *(_QWORD *)(v0 + 120);
        v23 = *(_QWORD *)(v0 + 112);
        v10 = type metadata accessor for TaskPriority();
        v11 = *(_QWORD *)(v10 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1, 1, v10);
        v12 = swift_allocObject();
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = v6;
        *(_OWORD *)(v12 + 40) = v25;
        *(_QWORD *)(v12 + 56) = v7;
        *(_QWORD *)(v12 + 64) = v23;
        *(_QWORD *)(v12 + 72) = v24;
        outlined init with copy of TaskPriority?(v8, v9);
        LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v13 = *(_QWORD *)(v0 + 128);
        if ((_DWORD)v9 == 1)
        {
          outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 128));
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
        }
        if (*(_QWORD *)(v12 + 16))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          v14 = dispatch thunk of Actor.unownedExecutor.getter();
          v16 = v15;
          swift_unknownObjectRelease();
        }
        else
        {
          v14 = 0;
          v16 = 0;
        }
        v17 = **(_QWORD **)(v0 + 80);
        v18 = swift_allocObject();
        *(_QWORD *)(v18 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
        *(_QWORD *)(v18 + 24) = v12;
        v19 = v16 | v14;
        if (v16 | v14)
        {
          v19 = v0 + 16;
          *(_QWORD *)(v0 + 16) = 0;
          *(_QWORD *)(v0 + 24) = 0;
          *(_QWORD *)(v0 + 32) = v14;
          *(_QWORD *)(v0 + 40) = v16;
        }
        v3 = *(_QWORD *)(v0 + 136);
        *(_QWORD *)(v0 + 48) = 1;
        *(_QWORD *)(v0 + 56) = v19;
        *(_QWORD *)(v0 + 64) = v17;
        swift_task_create();
        swift_release();
        outlined destroy of TaskPriority?(v3);
      }
      swift_release();
      swift_release();
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  v20 = **(_QWORD **)(v0 + 80);
  v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncSequence.reduce<A>(_:_:)
                                                 + async function pointer to specialized AsyncSequence.reduce<A>(_:_:));
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v21;
  *v21 = v0;
  v21[1] = specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v26(*(_QWORD *)(v0 + 72), v20);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 104);
    v3 = (_QWORD *)(swift_bridgeObjectRetain() + 56);
    v24 = v2;
    while (1)
    {
      if (v2)
      {
        v5 = *(v3 - 3);
        v6 = *((_OWORD *)v3 - 1);
        v26 = *v3;
        v25 = v6;
        v7 = v5 == *(_QWORD *)(v0 + 96) && *(_QWORD *)(v0 + 104) == (_QWORD)v6;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
LABEL_4:
      v3 += 4;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = type metadata accessor for TaskPriority();
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = 0;
    v13 = (_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = v5;
    *(_OWORD *)(v12 + 40) = v25;
    *(_QWORD *)(v12 + 56) = v26;
    outlined init with copy of TaskPriority?(v9, v8);
    LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v14 = *(_QWORD *)(v0 + 112);
    if ((_DWORD)v8 == 1)
    {
      outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 112));
      if (*v13)
      {
LABEL_13:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v15 = dispatch thunk of Actor.unownedExecutor.getter();
        v17 = v16;
        swift_unknownObjectRelease();
LABEL_16:
        v18 = **(_QWORD **)(v0 + 80);
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
        *(_QWORD *)(v19 + 24) = v12;
        v20 = v17 | v15;
        if (v17 | v15)
        {
          v20 = v0 + 16;
          *(_QWORD *)(v0 + 16) = 0;
          *(_QWORD *)(v0 + 24) = 0;
          *(_QWORD *)(v0 + 32) = v15;
          *(_QWORD *)(v0 + 40) = v17;
        }
        v2 = v24;
        v4 = *(_QWORD *)(v0 + 120);
        *(_QWORD *)(v0 + 48) = 1;
        *(_QWORD *)(v0 + 56) = v20;
        *(_QWORD *)(v0 + 64) = v18;
        swift_task_create();
        swift_release();
        outlined destroy of TaskPriority?(v4);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_4;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
      if (*v13)
        goto LABEL_13;
    }
    v15 = 0;
    v17 = 0;
    goto LABEL_16;
  }
LABEL_19:
  v21 = **(_QWORD **)(v0 + 80);
  v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncSequence.reduce<A>(_:_:)
                                                 + async function pointer to specialized AsyncSequence.reduce<A>(_:_:));
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v22;
  *v22 = v0;
  v22[1] = specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v27(*(_QWORD *)(v0 + 72), v21);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  v7[10] = a2;
  v7[11] = a3;
  v7[9] = a1;
  type metadata accessor for TaskPriority?(0);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized AsyncSequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DF0650]);
  v2[3] = v3;
  v2[4] = *(_QWORD *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DF0650]);
  v2[3] = v3;
  v2[4] = *(_QWORD *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DF0650]);
  v2[3] = v3;
  v2[4] = *(_QWORD *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized AsyncSequence.reduce<A>(_:_:)()
{
  uint64_t v0;
  _QWORD *v1;

  TaskGroup.makeAsyncIterator()();
  *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = specialized AsyncSequence.reduce<A>(_:_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[8] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v2;

  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = specialized AsyncSequence.reduce<A>(_:_:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[8] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  TaskGroup.makeAsyncIterator()();
  *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = specialized AsyncSequence.reduce<A>(_:_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[8] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v2;

  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = specialized AsyncSequence.reduce<A>(_:_:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[8] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  TaskGroup.makeAsyncIterator()();
  *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = specialized AsyncSequence.reduce<A>(_:_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[8] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v2;

  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = specialized AsyncSequence.reduce<A>(_:_:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[8] = v0;
    (*(void (**)(_QWORD, _QWORD))(v2[4] + 8))(v2[5], v2[3]);
  }
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[4] = a1;
  v5[5] = a4;
  v6 = a5[1];
  v5[2] = *a5;
  v5[3] = v6;
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[5];
  v2 = swift_task_alloc();
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[7];
  v2 = (_QWORD *)swift_task_alloc();
  v0[8] = v2;
  v2[2] = v1;
  v2[3] = v0 + 2;
  v2[4] = v0 + 4;
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  *v3 = v0;
  v3[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[5];
  v2 = swift_task_alloc();
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v8, v9);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *a4;
  v9 = a4[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v8, v9);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v8(a1);
}

{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v8(a1);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in static BackgroundTaskProtocol.currentTasks()(&lazy cache variable for type metadata for TaskActionsContainer<(), ()>.Key, MEMORY[0x1E0DEE9C0] + 8, &lazy protocol witness table cache variable for type TaskActionsContainer<(), ()>.Key and conformance TaskActionsContainer<A, B>.Key, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:), a1);
}

{
  return specialized closure #1 in static BackgroundTaskProtocol.currentTasks()(&lazy cache variable for type metadata for TaskActionsContainer<String, ()>.Key, MEMORY[0x1E0DEA968], &lazy protocol witness table cache variable for type TaskActionsContainer<String, ()>.Key and conformance TaskActionsContainer<A, B>.Key, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:), a1);
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[6] = a1;
  v6[7] = a4;
  v7 = a5[1];
  v8 = *a6;
  v9 = a6[1];
  v6[2] = *a5;
  v6[3] = v7;
  v6[4] = v8;
  v6[5] = v9;
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v9 = *a4;
  v10 = a4[1];
  v11 = *a5;
  v12 = a5[1];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v9, v10, v11, v12);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  int *v11;

  v7 = *(int **)(a4 + 16);
  v8 = a5[1];
  v5[2] = *a5;
  v5[3] = v8;
  v11 = (int *)((char *)v7 + *v7);
  v9 = (_QWORD *)swift_task_alloc();
  v5[4] = v9;
  *v9 = v5;
  v9[1] = specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return ((uint64_t (*)(uint64_t, _QWORD *))v11)(a1, v5 + 2);
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a4;
  *(_OWORD *)(v5 + 16) = *a5;
  return swift_task_switch();
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                               + async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, v4, v5, v6, (_OWORD *)(v1 + 40));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                                          + async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, v4, v5, v6, v1 + 5, v1 + 7);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))((char *)&async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                               + async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, v4, v5, v6, v1 + 5);
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(uint64_t **)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                       + async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, a2, v6, v7);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = (uint64_t *)v2[3];
  v8 = (uint64_t *)v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                                  + async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, a2, v6, v7, v8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(uint64_t **)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                       + async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, a2, v6, v7);
}

uint64_t sub_1878AEB78()
{
  return objectdestroy_19Tm_1((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                     + async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, v4, v5, v1 + 32);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                               + async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, v4, v5, (uint64_t)(v1 + 4), v1 + 8);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                     + async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)))(a1, v4, v5, v1 + 32);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TaskPriority?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1878AEC48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu))(a1, v4);
}

unint64_t lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator;
  if (!lazy protocol witness table cache variable for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DF0650]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator);
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA_33(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu))(a1, v4);
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v10;

  if (static AppGraph.shared)
  {
    type metadata accessor for TaskActionsContainer<(), ()>(0, a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.Key);
    lazy protocol witness table accessor for type TaskActionsContainer<String, ()>.Key and conformance TaskActionsContainer<A, B>.Key(a3, a1, a2);
    swift_retain();
    GraphHost.preferenceValue<A>(_:)();
    swift_release();
    result = v10;
  }
  else
  {
    result = a4(MEMORY[0x1E0DEE9D8]);
  }
  *a5 = result;
  return result;
}

uint64_t outlined init with copy of BackgroundTask<String, ()>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  type metadata accessor for TaskActionsContainer<(), ()>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t type metadata accessor for BackgroundTaskProtocol()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BackgroundTaskProtocol;
  if (!lazy cache variable for type metadata for BackgroundTaskProtocol)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BackgroundTaskProtocol);
  }
  return result;
}

uint64_t outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  type metadata accessor for TaskActionsContainer<(), ()>(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TaskActionsContainer<String, ()>.Key and conformance TaskActionsContainer<A, B>.Key(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TaskActionsContainer<(), ()>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.Key);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskActionsContainer<A, B>.Key, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1878AEFA0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1878AF0FC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for TaskActionsContainer<(), ()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3, MEMORY[0x1E0DEE9C0] + 8);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t objectdestroy_10Tm_1()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1878AF35C()
{
  return objectdestroy_19Tm_1((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_19Tm_1(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v1 + 40));
  swift_release();
  return swift_deallocObject();
}

Swift::Bool __swiftcall isVisionInterfaceIdiom()()
{
  return 0;
}

Swift::Void __swiftcall OpenSettingsAction.callAsFunction()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.openSettings.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1878AF468()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1878AF48C()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for OpenSettingsAction()
{
  return &type metadata for OpenSettingsAction;
}

uint64_t static MapKitUpdate.ensure<A>(_:)()
{
  return static Update.ensure<A>(_:)();
}

ValueMetadata *type metadata accessor for MapKitUpdate()
{
  return &type metadata for MapKitUpdate;
}

void InputAccessoryGenerator.updateHostIfNeeded()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  Class v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v19;

  v1 = *(void **)(v0 + 24);
  if (!v1)
    return;
  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v19 = v1;
  if (v3 >> 62)
  {
    v17 = v1;
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = *(_QWORD **)(v2 + 32);
    if (v18)
      goto LABEL_4;
LABEL_10:
    *(_QWORD *)(v2 + 32) = 0;

    InputAccessoryGenerator.RootUIView.host.setter(0);
    return;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v1;
  v6 = *(_QWORD **)(v2 + 32);
  if (!v4)
    goto LABEL_10;
LABEL_4:
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (!v6)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for InputAccessoryHost<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InputAccessoryHost);
    v10 = objc_allocWithZone(v9);
    v11 = swift_bridgeObjectRetain();
    v12 = specialized _UIHostingView.init(rootView:)(v11);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    static _ProposedSize.unspecified.getter();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    v13 = v12;
    InputAccessoryGenerator.RootUIView.host.setter(v12);
    v14 = *(void **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = v12;

    v6 = *(_QWORD **)(v2 + 32);
    if (!v6)
    {
      __break(1u);
      return;
    }
    v7 = *(_QWORD *)(v2 + 16);
  }
  v15 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v8 & *v6) + 0x60));
  swift_beginAccess();
  *v15 = v7;
  swift_bridgeObjectRetain_n();
  v16 = v6;
  swift_bridgeObjectRelease();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  swift_bridgeObjectRelease();
}

void InputAccessoryGenerator.RootUIView.host.setter(void *a1)
{
  char *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v3 = *(id *)&v1[OBJC_IVAR____TtCC7SwiftUI23InputAccessoryGeneratorP33_5C36F4A49E2E2562B910FE6399D2C51E10RootUIView_host];
  *(_QWORD *)&v1[OBJC_IVAR____TtCC7SwiftUI23InputAccessoryGeneratorP33_5C36F4A49E2E2562B910FE6399D2C51E10RootUIView_host] = a1;
  v4 = a1;
  if (!v3)
  {
    if (!a1)
    {
      v8 = v4;
      goto LABEL_8;
    }
    v6 = v4;
    objc_msgSend(v1, sel_addSubview_, v6);
    objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
    v5 = objc_msgSend(v1, sel_superview);
    v8 = 0;
    v3 = v5;
    v7 = v6;
    goto LABEL_6;
  }
  v8 = v4;
  if (!a1)
  {
    v3 = v3;
    objc_msgSend(v3, sel_removeFromSuperview);
    objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
    v5 = objc_msgSend(v1, sel_superview);
    v6 = v5;
    v7 = v3;
LABEL_6:
    objc_msgSend(v5, sel_setNeedsLayout);

    v8 = v7;
  }
LABEL_8:

}

uint64_t type metadata accessor for InputAccessoryGenerator.RootUIView()
{
  return objc_opt_self();
}

id InputAccessoryHost.init(coder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for InputAccessoryHost(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x990), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x998), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

id @objc InputAccessoryHost.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return InputAccessoryHost.init(coder:)(v3, v4, v5, v6);
}

id InputAccessoryHost.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for InputAccessoryHost(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x990), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x998), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t type metadata accessor for InputAccessoryHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InputAccessoryHost);
}

ValueMetadata *type metadata accessor for InputAccessoryBar()
{
  return &type metadata for InputAccessoryBar;
}

uint64_t associated type witness table accessor for View.Body : View in InputAccessoryBar()
{
  return swift_getOpaqueTypeConformance2();
}

double InputAccessoryBar.body.getter@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v4 = static HorizontalAlignment.center.getter();
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRetain();
      v6 = a1;
      if (!v5)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v6 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_7:
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_8:
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v9;
  *(_BYTE *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v11;
  *(_BYTE *)(a2 + 56) = v12;
  result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance InputAccessoryBar()
{
  type metadata accessor for VStack<UIKitToolbarAdaptor?>();
  lazy protocol witness table accessor for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance InputAccessoryBar@<D0>(uint64_t a1@<X8>)
{
  unint64_t *v1;

  return InputAccessoryBar.body.getter(*v1, a1);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitToolbarAdaptor()
{
  id v0;
  double v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitToolbar()), sel_init);
  LODWORD(v1) = 1112014848;
  objc_msgSend(v0, sel_setContentHuggingPriority_forAxis_, 0, v1);
  return v0;
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance UIKitToolbarAdaptor(void *a1)
{
  Class isa;

  type metadata accessor for UIBarButtonItem();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setItems_, isa);

}

void specialized closure #1 in InputAccessoryHost.setupSizeObserver()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_invalidateIntrinsicContentSize);
    v6 = objc_msgSend(v5, sel_superview);
    objc_msgSend(v6, sel_invalidateIntrinsicContentSize);

  }
}

uint64_t sub_1878AFE94()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in InputAccessoryHost.setupSizeObserver()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized closure #1 in InputAccessoryHost.setupSizeObserver()(a1, a2, v2);
}

void type metadata accessor for VStack<UIKitToolbarAdaptor?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<UIKitToolbarAdaptor?>)
  {
    type metadata accessor for UIKitToolbarAdaptor?();
    lazy protocol witness table accessor for type UIKitToolbarAdaptor? and conformance <A> A?();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<UIKitToolbarAdaptor?>);
  }
}

void type metadata accessor for UIKitToolbarAdaptor?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UIKitToolbarAdaptor?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitToolbarAdaptor?);
  }
}

unint64_t lazy protocol witness table accessor for type UIKitToolbarAdaptor? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type UIKitToolbarAdaptor? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UIKitToolbarAdaptor? and conformance <A> A?)
  {
    type metadata accessor for UIKitToolbarAdaptor?();
    v2 = &protocol witness table for UIKitToolbarAdaptor;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitToolbarAdaptor? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>)
  {
    type metadata accessor for VStack<UIKitToolbarAdaptor?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitToolbarAdaptor()
{
  return &type metadata for UIKitToolbarAdaptor;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>();
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>)
  {
    type metadata accessor for VStack<UIKitToolbarAdaptor?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>);
  }
}

uint64_t EnvironmentValues._resetFocus.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[8];

  outlined init with copy of _ResetFocusAction(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of _ResetFocusAction(a1);
}

uint64_t EnvironmentValues.focusScopes.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void View.prefersDefaultFocus(_:in:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.focusScope(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._prefersDefaultFocus(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View._prefersDefaultFocus(_:in:)(char a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[8];
  uint64_t v5;
  char v6;

  v4[0] = a1;
  v5 = a2;
  v6 = 0;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for _DefaultFocusModifier);
}

uint64_t View._focusScope(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for FocusNamespaceModifier, a3);
}

double static _DefaultFocusModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  double result;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v28 = *a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v19 = *(_DWORD *)(a2 + 76);
  v20 = *(_DWORD *)(a2 + 80);
  v40 = *(_QWORD *)a2;
  v37 = v6;
  LODWORD(v41) = v6;
  v42 = v7;
  v43 = v8;
  v44 = v9;
  v45 = v11;
  v46 = v10;
  v30 = v10;
  v31 = v20;
  v47 = v12;
  v48 = v13;
  v49 = v15;
  v50 = v14;
  v35 = v16;
  v36 = v14;
  v51 = v16;
  v52 = v17;
  v33 = v18;
  v34 = v17;
  v53 = v18;
  v54 = v19;
  v32 = v19;
  v55 = v20;
  a3(&v38, a1, &v40);
  v40 = v13;
  LODWORD(v41) = v15;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    type metadata accessor for DefaultFocusViewResponder(0);
    v21 = swift_allocObject();
    *(_BYTE *)(v21 + 208) = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(_QWORD *)(v21 + 256) = 0;
    *(_QWORD *)(v21 + 264) = 0;
    *(_QWORD *)(v21 + 272) = 0;
    *(_BYTE *)(v21 + 280) = 1;
    swift_release();
    v40 = v5;
    LODWORD(v41) = v37;
    v42 = v7;
    v43 = v8;
    v44 = v9;
    v45 = v11;
    v46 = v30;
    v47 = v12;
    v48 = v13;
    v49 = v15;
    v50 = v36;
    v51 = v35;
    v52 = v34;
    v53 = v33;
    v54 = v32;
    v55 = v31;
    v27 = DefaultLayoutViewResponder.init(inputs:)();
    LODWORD(v40) = v28;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_DefaultFocusModifier>, (uint64_t)&type metadata for _DefaultFocusModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v29 = _GraphValue.value.getter();
    v40 = v5;
    LODWORD(v41) = v37;
    v42 = v7;
    v43 = v8;
    v44 = v9;
    v45 = v11;
    v46 = v30;
    v47 = v12;
    v48 = v13;
    v49 = v15;
    v50 = v36;
    v51 = v35;
    v52 = v34;
    v53 = v33;
    v54 = v32;
    v55 = v31;
    v26 = _ViewInputs.transform.getter();
    v40 = v5;
    LODWORD(v41) = v37;
    v42 = v7;
    v43 = v8;
    v44 = v9;
    v45 = v11;
    v46 = v30;
    v47 = v12;
    v48 = v13;
    v49 = v15;
    v50 = v36;
    v51 = v35;
    v52 = v34;
    v53 = v33;
    v54 = v32;
    v55 = v31;
    v25 = _ViewInputs.animatedPosition()();
    v40 = v5;
    LODWORD(v41) = v37;
    v42 = v7;
    v43 = v8;
    v44 = v9;
    v45 = v11;
    v46 = v30;
    v47 = v12;
    v48 = v13;
    v49 = v15;
    v50 = v36;
    v51 = v35;
    v52 = v34;
    v53 = v33;
    v54 = v32;
    v55 = v31;
    v22 = _ViewInputs.animatedSize()();
    v40 = v38;
    v41 = *(_QWORD *)&v39;
    v23 = _ViewOutputs.viewResponders()();
    v40 = v27;
    v41 = __PAIR64__(v26, v29);
    v42 = __PAIR64__(v22, v25);
    v43 = v23;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v40) = 0;
    _ViewOutputs.subscript.setter();
  }
  *(_QWORD *)a4 = v38;
  result = v39;
  a4[1] = v39;
  return result;
}

uint64_t DefaultFocusViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 208) = 0;
  swift_retain();
  ViewTransform.init()();
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_BYTE *)(v0 + 280) = 1;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t type metadata accessor for DefaultFocusViewResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultFocusViewResponder);
}

void protocol witness for ViewModifier.body(content:) in conformance _DefaultFocusModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DefaultFocusViewResponderFilter.updateValue()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t Value;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v1 = v0;
  Value = AGGraphGetValue();
  v4 = v3;
  v5 = *(_BYTE *)Value;
  v6 = *(_QWORD *)(Value + 8);
  v7 = *(_BYTE *)(Value + 16);
  v8 = (uint64_t *)AGGraphGetValue();
  v10 = v9;
  v11 = *v8;
  v12 = v8[1];
  v13 = v8[2];
  v14 = v8[3];
  v15 = v8[4];
  AGGraphGetValue();
  v17 = v16;
  AGGraphGetValue();
  if ((v4 & 1) != 0
    || (v10 & 1) != 0
    || (v17 & 1) != 0
    || (v18 & 1) != 0
    || (type metadata accessor for [ViewResponder](), (result = AGGraphGetOutputValue()) == 0))
  {
    *(_QWORD *)&v28 = v12;
    *((_QWORD *)&v28 + 1) = v13;
    *(_QWORD *)&v29 = v14;
    *((_QWORD *)&v29 + 1) = v15;
    v20 = swift_retain_n();
    *(double *)&v21 = MEMORY[0x18D755E9C](v20);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v22, v21));
    v23 = *v1;
    *(_QWORD *)(v23 + 216) = v11;
    *(_OWORD *)(v23 + 224) = v28;
    *(_OWORD *)(v23 + 240) = v29;
    swift_retain();
    v24 = swift_release();
    *(double *)(v23 + 256) = MEMORY[0x18D75BE3C](v24);
    *(_QWORD *)(v23 + 264) = v25;
    *(_BYTE *)(v23 + 208) = v5;
    *(_QWORD *)(v23 + 272) = v6;
    *(_BYTE *)(v23 + 280) = v7;
    type metadata accessor for [ViewResponder]();
    AGGraphGetValue();
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
      MultiViewResponder.children.setter();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v27 + 32) = v23;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefaultFocusViewResponderFilter()
{
  return 0xD00000000000001FLL;
}

uint64_t DefaultFocusViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 208) = 0;
  swift_retain();
  ViewTransform.init()();
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_BYTE *)(v0 + 280) = 1;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t DefaultFocusViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for BaseFocusResponder.defaultFocusNamespace.getter in conformance DefaultFocusViewResponder()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

double static FocusNamespaceModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double result;
  int v35;
  int v36;
  int v37;
  char v38;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  double v55;
  unint64_t v56;
  double v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v41 = *a1;
  v52 = *(_QWORD *)a2;
  v53 = *(_DWORD *)(a2 + 8);
  v47 = *(_QWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 28);
  v6 = *(_DWORD *)(a2 + 36);
  v48 = *(_DWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_DWORD *)(a2 + 56);
  v36 = *(_DWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 72);
  v45 = *(_DWORD *)(a2 + 68);
  v46 = *(_DWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 76);
  v12 = *(_DWORD *)(a2 + 80);
  v72 = *(_QWORD *)a2;
  v73 = v53;
  v74 = v47;
  v49 = v5;
  v50 = v4;
  v75 = v4;
  v76 = v5;
  v77 = v48;
  v78 = v6;
  v44 = v12;
  v51 = v7;
  v79 = v7;
  v80 = v8;
  v81 = v9;
  v82 = v36;
  v83 = v46;
  v84 = v45;
  v37 = v10;
  v85 = v10;
  v86 = v11;
  v87 = v12;
  v38 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v35 = v9;
  if ((v38 & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<FocusNamespaceModifier>, (uint64_t)&type metadata for FocusNamespaceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    LODWORD(v57) = v53;
    v58 = v47;
    v59 = v4;
    v60 = v5;
    v61 = v48;
    v62 = v6;
    v63 = v7;
    v64 = swift_bridgeObjectRetain();
    v65 = v9;
    v66 = v36;
    v67 = v46;
    v68 = v45;
    v14 = v11;
    v13 = v10;
    v69 = v10;
    v70 = v11;
    v71 = v44;
    LODWORD(v56) = _GraphValue.value.getter();
    HIDWORD(v56) = _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.environment.setter();
    v15 = v72;
    v16 = v73;
    v17 = v74;
    v18 = v75;
    v19 = v76;
    v21 = v77;
    v20 = v78;
    v7 = v79;
    v22 = v80;
    v24 = v81;
    v23 = v82;
    v26 = v83;
    v25 = v84;
    v28 = v85;
    v27 = v86;
    v29 = v87;
  }
  else
  {
    v15 = v52;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v30 = swift_bridgeObjectRetain();
    v20 = v6;
    v29 = v12;
    v13 = v37;
    v27 = v11;
    v28 = v37;
    v25 = v45;
    v26 = v46;
    v23 = v36;
    v24 = v9;
    v22 = v30;
    v21 = v48;
    v19 = v5;
    v18 = v50;
    v17 = v47;
    v16 = v53;
    v14 = v11;
  }
  v56 = v15;
  LODWORD(v57) = v16;
  v58 = v17;
  v59 = v18;
  v60 = v19;
  v61 = v21;
  v62 = v20;
  v63 = v7;
  v64 = v22;
  v65 = v24;
  v66 = v23;
  v67 = v26;
  v68 = v25;
  v69 = v28;
  v70 = v27;
  v71 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v31 = swift_bridgeObjectRetain();
  a3(&v54, v31, &v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v38 & 1) != 0)
  {
    LODWORD(v56) = v41;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<FocusNamespaceModifier>, (uint64_t)&type metadata for FocusNamespaceModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v42 = _GraphValue.value.getter();
    v56 = v54;
    v57 = v55;
    v40 = _ViewOutputs.viewResponders()();
    type metadata accessor for FocusNamespaceViewResponder(0);
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 208) = 0;
    *(_BYTE *)(v32 + 216) = 1;
    v56 = v52;
    LODWORD(v57) = v53;
    v58 = v47;
    v59 = v50;
    v60 = v49;
    v61 = v48;
    v62 = v6;
    v63 = v51;
    v64 = v8;
    v65 = v35;
    v66 = v36;
    v67 = v46;
    v68 = v45;
    v69 = v13;
    v70 = v14;
    v71 = v44;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = DefaultLayoutViewResponder.init(inputs:)();
    v56 = __PAIR64__(v40, v42);
    v57 = *(double *)&v33;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type FocusNamespaceFilter and conformance FocusNamespaceFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v56) = 0;
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = v54;
  result = v55;
  a4[1] = v55;
  return result;
}

uint64_t FocusNamespaceViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  return DefaultLayoutViewResponder.init(inputs:)();
}

double FocusNamespaceModifier.ChildEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *(_QWORD *)&v10 = *Value;
  *((_QWORD *)&v10 + 1) = v3;
  v4 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v5 = (char *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
  v7 = *((_QWORD *)v5 + 2);
  v6 = *((_QWORD *)v5 + 3);
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v7 + 1;
  *(_QWORD *)&v5[8 * v7 + 32] = v4;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  result = *(double *)&v10;
  *a1 = v10;
  return result;
}

double protocol witness for Rule.value.getter in conformance FocusNamespaceModifier.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return FocusNamespaceModifier.ChildEnvironment.value.getter(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance FocusNamespaceModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t FocusNamespaceViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusNamespaceViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t FocusNamespaceFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)AGGraphGetValue();
  *(_BYTE *)(v1 + 216) = 0;
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall _FocusSystem.resetToDefault()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ResetFocusAction.callAsFunction(in:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.resetFocus.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _ResetFocusAction.callAsFunction(in:)(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t *);
  char v14;
  uint64_t v15;
  uint64_t v16;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    v4 = FocusBridge.host.getter();
    if (!v4)
    {
      swift_release();
      return;
    }
    v5 = (void *)v4;
    FocusBridge.focusedItem.getter((uint64_t)&v11);
    if (!v15 && v16 == 1)
    {
      outlined destroy of FocusItem?((uint64_t)&v11);
LABEL_16:
      swift_release();

      return;
    }
    v6 = swift_weakLoadStrong();
    outlined destroy of FocusItem?((uint64_t)&v11);
    if (!v6)
      goto LABEL_16;
    ResponderNode.sequence.getter();
    v7 = v13;
    v9 = v11;
    v10 = v12;
    if ((v14 & 1) != 0 || (swift_retain(), v7(&v11, &v9), swift_release(), !v11))
    {
LABEL_17:
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      type metadata accessor for FocusNamespaceViewResponder(0);
      while (1)
      {
        v8 = swift_dynamicCastClass();
        if (v8)
        {
          if (*(_BYTE *)(v8 + 216) != 1 && *(_QWORD *)(v8 + 208) == a1)
            break;
        }
        swift_release();
        swift_retain();
        v7(&v11, &v9);
        swift_release();
        if (!v11)
          goto LABEL_17;
      }
      *(_QWORD *)(v3 + 168) = a1;
      *(_BYTE *)(v3 + 176) = 0;
      swift_retain();
      objc_msgSend(v5, sel_setNeedsFocusUpdate);

      swift_release_n();
      swift_release();
      swift_release();
      swift_release();
    }
    swift_release();
  }
}

uint64_t EnvironmentValues._resetFocus.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues._resetFocus : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void EnvironmentValues._focusSystem.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._focusSystem.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._focusSystem.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FocusScopesKey(_QWORD **a1, _QWORD **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ResetFocusKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _ResetFocusAction((uint64_t)&static ResetFocusKey.defaultValue, a1);
}

unint64_t lazy protocol witness table accessor for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultFocusViewResponderFilter, &unk_1E1AFEFA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter);
  }
  return result;
}

uint64_t type metadata accessor for FocusNamespaceViewResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FocusNamespaceViewResponder);
}

_UNKNOWN **base witness table accessor for ViewModifier in _DefaultFocusModifier()
{
  return &protocol witness table for _DefaultFocusModifier;
}

uint64_t sub_1878B1D34(uint64_t a1)
{
  _BYTE v2[8];

  outlined init with copy of _ResetFocusAction(a1, (uint64_t)v2);
  return EnvironmentValues._resetFocus.setter((uint64_t)v2);
}

void sub_1878B1D68()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1878B1D8C(uint64_t *a1)
{
  outlined copy of AppIntentExecutor?(*a1);
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for _DefaultFocusModifier()
{
  return &type metadata for _DefaultFocusModifier;
}

uint64_t type metadata completion function for DefaultFocusViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for DefaultFocusViewResponder()
{
  return type metadata accessor for DefaultFocusViewResponder(0);
}

uint64_t type metadata completion function for FocusNamespaceViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for FocusNamespaceViewResponder()
{
  return type metadata accessor for FocusNamespaceViewResponder(0);
}

ValueMetadata *type metadata accessor for _FocusSystem()
{
  return &type metadata for _FocusSystem;
}

ValueMetadata *type metadata accessor for ResetFocusAction()
{
  return &type metadata for ResetFocusAction;
}

uint64_t sub_1878B1E9C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _DefaultFocusModifier, (uint64_t)&protocol witness table for _DefaultFocusModifier);
}

uint64_t sub_1878B1EB0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for FocusNamespaceModifier, (uint64_t)&protocol witness table for FocusNamespaceModifier);
}

ValueMetadata *type metadata accessor for ResetFocusKey()
{
  return &type metadata for ResetFocusKey;
}

void *type metadata accessor for DefaultFocusViewResponderFilter()
{
  return &unk_1E1AFEFA0;
}

ValueMetadata *type metadata accessor for FocusNamespaceModifier()
{
  return &type metadata for FocusNamespaceModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusNamespaceModifier()
{
  return &protocol witness table for FocusNamespaceModifier;
}

unint64_t lazy protocol witness table accessor for type FocusNamespaceFilter and conformance FocusNamespaceFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusNamespaceFilter and conformance FocusNamespaceFilter;
  if (!lazy protocol witness table cache variable for type FocusNamespaceFilter and conformance FocusNamespaceFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusNamespaceFilter, &unk_1E1AD2F00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusNamespaceFilter and conformance FocusNamespaceFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusNamespaceModifier.ChildEnvironment, &unk_1E1ADB980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment);
  }
  return result;
}

void *type metadata accessor for FocusNamespaceModifier.ChildEnvironment()
{
  return &unk_1E1ADB980;
}

void *type metadata accessor for FocusNamespaceFilter()
{
  return &unk_1E1AD2F00;
}

ValueMetadata *type metadata accessor for FocusScopesKey()
{
  return &type metadata for FocusScopesKey;
}

void _ControlWidgetAdaptor.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  Swift::String v5;

  _StringGuts.grow(_:)(41);
  type metadata accessor for _ControlWidgetAdaptor(0, a1, a2, v4);
  _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000187BEA650;
  v5._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for _ControlWidgetAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ControlWidgetAdaptor);
}

uint64_t _ControlWidgetAdaptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t _ControlWidgetAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in _ControlWidgetAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for Widget.init() in conformance _ControlWidgetAdaptor<A>(uint64_t a1)
{
  _ControlWidgetAdaptor.init()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_UNKNOWN **sub_1878B2174()
{
  return &protocol witness table for ControlWidgetConfigurationAdaptor<A>;
}

uint64_t getEnumTagSinglePayload for _ControlWidgetAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878B2230 + 4 * byte_187C68430[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _ControlWidgetAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ControlWidgetConfigurationAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetConfigurationAdaptor);
}

uint64_t static ControlWidgetConfigurationAdaptor._makeWidgetConfiguration(widget:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  Swift::String v18;
  int v19;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v19 = *a1;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v11 = a2[5];
  v10 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  type metadata accessor for ControlWidgetConfigurationAdaptor(0, a3, a4, a4);
  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    static DynamicPropertyCache.fields(of:)();
    v28 = v5;
    LODWORD(v29) = v6;
    v30 = v7;
    *(_QWORD *)&v31 = v8;
    *((_QWORD *)&v31 + 1) = v9;
    v32 = v11;
    v33 = v10;
    v34 = v12;
    v27 = v19;
    v14 = type metadata accessor for ControlWidgetConfigurationAdaptor.BodyAccessor(0, a3, a4, v13);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationAdaptor<A>.BodyAccessor, v14);
    BodyAccessor.makeBody(container:inputs:fields:)();
    outlined consume of DynamicPropertyCache.Fields.Layout();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v21[0] = v5;
    v21[1] = v29;
    v21[2] = v7;
    v22 = v31;
    v23 = v11;
    v24 = v10;
    v25 = v12;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v26, v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance ControlWidgetConfigurationAdaptor<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static ControlWidgetConfigurationAdaptor._makeWidgetConfiguration(widget:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for ControlWidgetConfigurationAdaptor.BodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetConfigurationAdaptor.BodyAccessor);
}

uint64_t ControlWidgetConfigurationAdaptor.BodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for ControlWidgetConfigurationAdaptor.BodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationAdaptor<A>.BodyAccessor, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetConfigurationAdaptor<A>.BodyAccessor(uint64_t result, uint64_t a2)
{
  return ControlWidgetConfigurationAdaptor.BodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t partial apply for closure #1 in ControlWidgetConfigurationAdaptor.BodyAccessor.updateBody(of:changed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 32))(*(_QWORD *)(v0 + 16));
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in AutomaticBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AutomaticBadgedViewStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  return outlined copy of BadgeLabel?(v3, v2, v4);
}

ValueMetadata *type metadata accessor for AutomaticBadgedViewStyle()
{
  return &type metadata for AutomaticBadgedViewStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedV()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalB;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalB)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyMod();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>,, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = &protocol witness table for BadgedViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalB);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyMod()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewS)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<HiddenBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle, (uint64_t)&type metadata for HiddenBadgedViewStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewS);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModi)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModi);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContainerStyleContext>, MEMORY[0x1E0CE5078], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ContainerStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SectionHeaderStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>(255);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>, (uint64_t)&type metadata for TabSectionStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TabSectionStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for BadgedView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>);
  }
}

void type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>)
  {
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<AutomaticBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle, (uint64_t)&type metadata for AutomaticBadgedViewStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    v2[0] = &protocol witness table for BadgeViewStyleConfiguration.Content;
    v2[1] = &protocol witness table for BadgedViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TraitBasedBadgedViewStyle, &type metadata for TraitBasedBadgedViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle, (uint64_t)&type metadata for TraitBasedBadgedViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<ListBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListBadgedViewStyle and conformance ListBadgedViewStyle, (uint64_t)&type metadata for ListBadgedViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListBadgedViewStyle and conformance ListBadgedViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListBadgedViewStyle and conformance ListBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type ListBadgedViewStyle and conformance ListBadgedViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListBadgedViewStyle, &type metadata for ListBadgedViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListBadgedViewStyle and conformance ListBadgedViewStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>)
  {
    type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>();
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<MultimodalBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle, (uint64_t)&type metadata for MultimodalBadgedViewStyle);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E0CE5A68]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>)
  {
    v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>);
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalBadgedViewStyle, &type metadata for MultimodalBadgedViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle);
  }
  return result;
}

void type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for BadgedViewStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HiddenBadgedViewStyle, &type metadata for HiddenBadgedViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>> and conformance BadgedView<A>, (uint64_t (*)(uint64_t))type metadata accessor for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, (uint64_t)&protocol conformance descriptor for BadgedView<A>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>, (uint64_t)&type metadata for TabSectionStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TabSectionStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for BadgedViewStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SectionHeaderStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for BadgedViewStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContainerStyleContext>, MEMORY[0x1E0CE5078], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ContainerStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for BadgedViewStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for BadgedViewStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = &protocol witness table for BadgedViewStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for BadgedViewStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t static ListItemReuseIdentifierTrait.defaultValue.getter()
{
  return 0x6C6C65437473694CLL;
}

uint64_t View.listItemReuseIdentifier(_:)()
{
  return View._trait<A>(_:_:)();
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ListItemReuseIdentifierTrait(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6C65437473694CLL;
  a1[1] = 0xE800000000000000;
}

ValueMetadata *type metadata accessor for ListItemReuseIdentifierTrait()
{
  return &type metadata for ListItemReuseIdentifierTrait;
}

uint64_t sub_1878B3590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<ListItemReuseIdentifierTrait>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<ListItemReuseIdentifierTrait>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListItemReuseIdentifierTrait>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListItemReuseIdentifierTrait>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ListItemReuseIdentifierTrait>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void specialized _UIHostingView.setWantsTransparentBackground(for:_:)(int a1, char a2)
{
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>);
}

{
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t)lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for VStack<TableHeaderViewCore>);
}

void specialized _UIHostingView.setWantsTransparentBackground(for:_:)(int a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)))
{
  _QWORD *v6;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  id v21;
  id v22;
  objc_super v23;
  objc_super v24;
  objc_super v25;
  objc_super v26;

  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0xD0);
  v13 = *(_DWORD *)((char *)v6 + v12);
  v14 = v13 & a1;
  if ((a2 & 1) != 0)
  {
    if (v14 == a1)
      v15 = 0;
    else
      v15 = a1;
    v16 = v15 | v13;
    *(_DWORD *)((char *)v6 + v12) = v16;
    if ((v13 == 0) == (v16 != 0))
    {
      v17 = (void *)MEMORY[0x18D760234]((char *)v6 + *(_QWORD *)((*v11 & *v6) + 0x130));

      if (v17)
      {
        if (*(_DWORD *)((char *)v6 + v12))
        {
          v24.receiver = v6;
          v24.super_class = (Class)a6(0, a3, a4, a5, type metadata accessor for _UIHostingView);
          objc_msgSendSuper2(&v24, sel_setBackgroundColor_, 0);
          return;
        }
        v21 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
        if ((*((_BYTE *)v6 + *(_QWORD *)((*v11 & *v6) + 0xC0)) & 1) == 0)
        {
          v22 = v21;
          v23.receiver = v6;
          v23.super_class = (Class)a6(0, a3, a4, a5, type metadata accessor for _UIHostingView);
          objc_msgSendSuper2(&v23, sel_setBackgroundColor_, v22);
LABEL_22:

          return;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (v14)
      v18 = ~a1;
    else
      v18 = -1;
    v19 = v18 & v13;
    *(_DWORD *)((char *)v6 + v12) = v19;
    if ((v13 == 0) == (v19 != 0))
    {
      v20 = (void *)MEMORY[0x18D760234]((char *)v6 + *(_QWORD *)((*v11 & *v6) + 0x130));

      if (v20)
      {
        if (!*(_DWORD *)((char *)v6 + v12))
        {
          v21 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
          if ((*((_BYTE *)v6 + *(_QWORD *)((*v11 & *v6) + 0xC0)) & 1) == 0)
          {
            v22 = v21;
            v25.receiver = v6;
            v25.super_class = (Class)a6(0, a3, a4, a5, type metadata accessor for _UIHostingView);
            objc_msgSendSuper2(&v25, sel_setBackgroundColor_, v22);
            goto LABEL_22;
          }
LABEL_20:

          return;
        }
        v26.receiver = v6;
        v26.super_class = (Class)a6(0, a3, a4, a5, type metadata accessor for _UIHostingView);
        objc_msgSendSuper2(&v26, sel_setBackgroundColor_, 0);
      }
    }
  }
}

_QWORD *_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI29PresentationOptionsPreferenceV_s5NeverOSSTg5(void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  _OWORD v5[7];
  _OWORD v6[2];
  _OWORD v7[7];
  _OWORD v8[2];
  uint64_t v9;

  outlined init with copy of SwiftUIAnySortComparator?(v1, (uint64_t)v7, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  if (!*(_QWORD *)&v7[0])
    return 0;
  v5[6] = v7[6];
  v6[0] = v8[0];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v8 + 9);
  v5[2] = v7[2];
  v5[3] = v7[3];
  v5[4] = v7[4];
  v5[5] = v7[5];
  v5[0] = v7[0];
  v5[1] = v7[1];
  a1(&v9, v5);
  result = outlined destroy of PresentationOptionsPreference(v5);
  if (!v2)
    return (_QWORD *)v9;
  return result;
}

Swift::Void __swiftcall UIKitInspectorV3Bridge.updateTransform()()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[48];

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = (char *)v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v4 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v5, v2, v4);
  __asm { BR              X10 }
}

void sub_1878B3AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;

  (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(&v15, v3);
  v5 = (_QWORD *)(v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation);
  swift_beginAccess();
  if (*v5)
  {
    v6 = *(void **)(v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v6)
    {
      v7 = v5[2];
      swift_retain();
      v8 = v6;
      v9 = objc_msgSend(v8, sel_presentationController);
      if (v9)
      {
        v10 = v9;
        v11 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v12 = (_QWORD *)swift_allocObject();
        v12[2] = v0;
        v12[3] = v2;
        v12[4] = v11;
        v12[5] = v10;
        v12[6] = v8;
        v12[7] = v7;
        swift_retain();
        v13 = v8;
        swift_retain();
        v14 = v10;
        onNextMainRunLoop(do:)();
        swift_release();

        swift_release();
        swift_release();
      }
      else
      {
        swift_release();

      }
    }
  }
}

uint64_t specialized _UIHostingView.didChangeColorScheme(from:)(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *((unsigned __int8 *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x180));
  if (result == 2)
  {
    if (v3 == 2)
      return result;
  }
  else if (v3 != 2 && ((v3 ^ result) & 1) == 0)
  {
    return result;
  }
  v5 = (void *)MEMORY[0x18D760234]((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x130));
  if (v5)
  {
    v6 = v5;
    v7 = 1;
    if ((v3 & 1) != 0)
      v7 = 2;
    if (v3 == 2)
      v8 = 0;
    else
      v8 = v7;
    objc_msgSend(v5, sel_setOverrideUserInterfaceStyle_, v8);
    v9 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x1D8));
    swift_retain();
    v10 = objc_msgSend(v6, sel_isBeingPresented);
    result = MEMORY[0x18D760234](v9 + 40);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v11 = (_QWORD *)result;
    v12 = swift_allocObject();
    v13 = (void *)MEMORY[0x18D760234]((char *)v11 + *(_QWORD *)((*v2 & *v11) + 0x130));

    swift_unknownObjectWeakInit();
    v14 = swift_allocObject();
    *(_BYTE *)(v14 + 16) = v10;
    *(_QWORD *)(v14 + 24) = partial apply for specialized closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:);
    *(_QWORD *)(v14 + 32) = v12;
    swift_retain_n();
    onNextMainRunLoop(do:)();

    swift_release();
    swift_release();
    swift_release_n();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  char v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = v1;
  v3 = direct field offset for UIHostingController.host;
  v4 = *(_QWORD **)(v1 + direct field offset for UIHostingController.host);
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *(_DWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xD0));
  v7 = a1;
  v8 = *(_BYTE *)(v1 + direct field offset for PresentationHostingController.presentationWantsTransparentBackground);
  v9 = v4;
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, v8, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>);

  if (v7 != 2)
  {
    v10 = *(id *)(v2 + v3);
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(8, v7 & 1, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>);

  }
  v11 = *(_QWORD **)(v2 + v3);
  if ((v6 == 0) == (*(_DWORD *)((char *)v11 + *(_QWORD *)((*v5 & *v11) + 0xD0)) != 0))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    v12 = v11;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

uint64_t specialized PresentationHostingController.updateSheet(with:)(uint64_t *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;

  specialized PresentationHostingController.setPassthrough(using:)((uint64_t)a1);
  v3 = objc_msgSend(v1, sel_presentationController);
  if (v3)
  {
    v4 = v3;
    objc_opt_self();
    v5 = (id)swift_dynamicCastObjCClass();
    if (v5)
    {
LABEL_6:
      specialized PresentationHostingController.configureDetents(of:using:)(v5, (uint64_t)a1);
      specialized PresentationHostingController.updateDetentsSelection(of:using:)(v5, a1);

      goto LABEL_7;
    }

  }
  v6 = objc_msgSend(v1, sel_popoverPresentationController);
  if (v6)
  {
    v7 = v6;
    v5 = objc_msgSend(v6, sel_adaptiveSheetPresentationController);

    if (v5)
      goto LABEL_6;
  }
LABEL_7:
  outlined init with copy of PresentationOptionsPreference((uint64_t)a1, (uint64_t)v10);
  v8 = (uint64_t)v1 + direct field offset for PresentationHostingController.lastPresentationOptions;
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v10, v8, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  swift_endAccess();
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  specialized PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(0, (uint64_t)v10);
  return outlined destroy of IntelligenceElement?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
}

uint64_t specialized PresentationHostingController.adaptivePresentationStyle(traitCollection:kind:)(void *a1, char a2)
{
  uint64_t v2;
  id v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  uint64_t v9;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v5 = objc_msgSend(a1, sel_verticalSizeClass);
  if (v5 == (id)1)
  {
    v6 = (_QWORD *)(v2 + direct field offset for PresentationHostingController.lastPresentationOptions);
    swift_beginAccess();
    if (!*v6)
      goto LABEL_9;
    v7 = (unsigned __int8 *)v6 + 41;
  }
  else
  {
    if (objc_msgSend(a1, sel_horizontalSizeClass) != (id)1)
      return -1;
    v8 = (_QWORD *)(v2 + direct field offset for PresentationHostingController.lastPresentationOptions);
    swift_beginAccess();
    if (!*v8)
      goto LABEL_17;
    v7 = (unsigned __int8 *)(v8 + 5);
  }
  v9 = *v7;
  if ((_DWORD)v9 != 6)
  {
    if ((_DWORD)v9 != 2 || a2 == 1)
      __asm { BR              X10 }
    _StringGuts.grow(_:)(162);
    v12._countAndFlagsBits = 8257;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._object = (void *)0x8000000187BEA930;
    v14._countAndFlagsBits = 0x100000000000009ELL;
    String.append(_:)(v14);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    return -1;
  }
  if (v5 == (id)1)
  {
LABEL_9:
    if (objc_msgSend(a1, sel_verticalSizeClass) == (id)2)
      return 5;
    else
      return qword_187C68848[a2];
  }
LABEL_17:
  if (a2 == 1)
    return 2;
  else
    return -1;
}

void sub_1878B4354()
{
  void *v0;
  uint64_t v1;

  if (objc_msgSend(v0, (SEL)(v1 + 4083)) == (id)2)
    JUMPOUT(0x1878B433CLL);
  JUMPOUT(0x1878B42A8);
}

uint64_t specialized OscillationDetector.insert(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BYTE v8[144];

  v2 = *(_QWORD *)(v1 + 24);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v8);
  swift_beginAccess();
  v3 = *(_QWORD **)(v1 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 16) = v3;
  if ((result & 1) != 0)
  {
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v3 = (_QWORD *)result;
  *(_QWORD *)(v1 + 16) = result;
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_9;
LABEL_3:
  if (v2 >= v3[2])
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v8, (uint64_t)&v3[18 * v2 + 4], &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  swift_endAccess();
  result = specialized OscillationDetector.enqueueDecay(at:)(*(_QWORD *)(v1 + 24));
  v5 = *(_QWORD *)(v1 + 24);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v7;
  if (v7 >= *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    v7 = 0;
  *(_QWORD *)(v1 + 24) = v7;
  return result;
}

uint64_t specialized OscillationDetector.enqueueDecay(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = v1;
  v4 = v1 + 56;
  swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16);
  swift_beginAccess();
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  v7 = v5 - v6;
  if (v5 < v6)
    goto LABEL_7;
  result = swift_beginAccess();
  if (v7 != -1)
  {
    if (v7 < -1)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(*(_QWORD *)v4 + 16) >= (unint64_t)(v7 + 1))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, v7 + 1);
      goto LABEL_6;
    }
    __break(1u);
    return result;
  }
LABEL_6:
  swift_endAccess();
LABEL_7:
  v9 = *(_QWORD *)(v2 + 56);
  v10 = *(_QWORD *)(v2 + 64);
  v11 = *(_QWORD *)(v2 + 48);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 56) = v9;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
    v9 = result;
    *(_QWORD *)v4 = result;
  }
  v13 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v9);
    v9 = result;
    *(_QWORD *)v4 = result;
  }
  *(_QWORD *)(v9 + 16) = v13 + 1;
  v14 = v9 + 16 * v13;
  *(_QWORD *)(v14 + 32) = v11 + v10;
  *(_QWORD *)(v14 + 40) = a1;
  if ((*(_BYTE *)(v2 + 72) & 1) == 0)
  {
    *(_BYTE *)(v2 + 72) = 1;
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    onNextMainRunLoop(do:)();
    return swift_release_n();
  }
  return result;
}

uint64_t specialized OscillationDetector.decay()()
{
  ValueMetadata *v0;
  void **p_Description;
  uint64_t v2;
  uint64_t v3;
  uint64_t Kind;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *Description;
  ValueMetadata *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  ValueMetadata *v17;
  _OWORD v18[9];

  ++v0[4].Kind;
  p_Description = &v0[3].Description;
  swift_beginAccess();
  v2 = *((_QWORD *)v0[3].Description + 2);
  v3 = swift_bridgeObjectRetain();
  if (v2)
  {
    Kind = v0[4].Kind;
    v5 = v2 + 1;
    v6 = 16 * v2 + 16;
    do
    {
      v7 = v5;
      v8 = *(_QWORD *)(v3 + v6);
      --v5;
      if (v7 == 2)
        break;
      v6 -= 16;
    }
    while (Kind != v8);
    result = swift_bridgeObjectRelease();
    if (Kind == v8)
    {
      if (v5 >= 1)
      {
        v17 = v0;
        Description = v0[3].Description;
        if (Description[2])
        {
          v11 = v0 + 1;
          v12 = 1;
          v13 = 5;
          v0 = &type metadata for PresentationOptionsPreference;
          while (1)
          {
            v14 = Description[v13];
            memset(v18, 0, 137);
            swift_beginAccess();
            v15 = (_QWORD *)v11->Kind;
            result = swift_isUniquelyReferenced_nonNull_native();
            v11->Kind = (uint64_t)v15;
            if ((result & 1) != 0)
            {
              if ((v14 & 0x8000000000000000) != 0)
                goto LABEL_17;
            }
            else
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
              v15 = (_QWORD *)result;
              v11->Kind = result;
              if ((v14 & 0x8000000000000000) != 0)
              {
LABEL_17:
                __break(1u);
                goto LABEL_18;
              }
            }
            if (v14 >= v15[2])
            {
              __break(1u);
              goto LABEL_27;
            }
            outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v18, (uint64_t)&v15[18 * v14 + 4], &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
            result = swift_endAccess();
            if (v5 == v12)
              break;
            Description = *p_Description;
            v13 += 2;
            if (v12++ >= *((_QWORD *)*p_Description + 2))
              goto LABEL_27;
          }
          result = swift_beginAccess();
          if (v5 < 0)
            goto LABEL_29;
          if (*((_QWORD *)*p_Description + 2) >= (unint64_t)v5)
          {
            specialized Array.replaceSubrange<A>(_:with:)(0, v5);
            result = swift_endAccess();
            v0 = v17;
            goto LABEL_22;
          }
          goto LABEL_30;
        }
LABEL_27:
        __break(1u);
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
  }
  else
  {
LABEL_18:
    result = swift_bridgeObjectRelease();
  }
LABEL_22:
  if (*((_QWORD *)*p_Description + 2))
  {
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    onNextMainRunLoop(do:)();
    return swift_release_n();
  }
  else
  {
    LOBYTE(v0[4].Description) = 0;
  }
  return result;
}

uint64_t specialized closure #1 in OscillationDetector.enqueueDecay(at:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    specialized OscillationDetector.decay()();
    return swift_release();
  }
  return result;
}

void UIKitInspectorV3Bridge.PresentationKind.viewID.getter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[48];

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
  __asm { BR              X10 }
}

uint64_t sub_1878B491C()
{
  unsigned int v1;

  return v1;
}

uint64_t UIKitInspectorV3Bridge.PresentationKind.isPopover.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[40];
  unsigned __int8 v7;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (v7 - 2 < 2)
    return 0;
  if (!v7)
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, a1);
  return 1;
}

void static UIKitInspectorV3Bridge.PresentationKind.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t, uint64_t);
  _BYTE v8[48];
  uint64_t v9;

  v6 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, a3, a4, a4);
  v7 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7((uint64_t *)v8, a1, v6);
  v7(&v9, a2, v6);
  __asm { BR              X10 }
}

uint64_t sub_1878B4A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *, _BYTE *, uint64_t);
  uint64_t TupleTypeMetadata2;
  char v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;
  _BYTE v10[48];
  _BYTE v11[176];

  v3(v10, v11, v0);
  if (v11[88])
  {
    outlined destroy of AnyHashable((uint64_t)v10);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 8))(v11, TupleTypeMetadata2);
    v5 = 0;
  }
  else
  {
    v6 = *(_OWORD *)(v1 + 16);
    v8[0] = *(_OWORD *)v1;
    v8[1] = v6;
    v9 = *(_QWORD *)(v1 + 32);
    v5 = MEMORY[0x18D75E284](v10, v8);
    outlined destroy of AnyHashable((uint64_t)v8);
    outlined destroy of AnyHashable((uint64_t)v10);
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v11, v0);
  }
  return v5 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance UIKitInspectorV3Bridge<A>.PresentationKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static UIKitInspectorV3Bridge.PresentationKind.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

id UIKitInspectorV3Bridge.popoverPresentationDelegate.getter()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  uint64_t ObjectType;
  objc_class *v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v1 = direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate;
  v2 = *(void **)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate];
  if (v2)
  {
    v3 = *(id *)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate];
  }
  else
  {
    v4 = v0;
    ObjectType = swift_getObjectType();
    v6 = (objc_class *)type metadata accessor for PopoverPresentationDelegate();
    v7 = v4;
    v8 = objc_allocWithZone(v6);
    v9 = specialized PopoverPresentationDelegate.init<A>(delegate:)((uint64_t)v7, ObjectType, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);

    v10 = *(void **)&v4[v1];
    *(_QWORD *)&v4[v1] = v9;
    v3 = v9;

    v2 = 0;
  }
  v11 = v2;
  return v3;
}

void UIKitInspectorV3Bridge.presentedVC.willset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  if (!a1)
  {
    v2 = *(_QWORD *)(v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v2)
    {
      v3 = *(void **)(v2 + direct field offset for UIHostingController.host);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      v4 = v3;
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

    }
  }
}

void UIKitInspectorV3Bridge.isParentPresentationFromLikeKindBridge.getter()
{
  uint64_t v0;

  swift_getObjectType();
  if (MEMORY[0x18D760234](v0 + direct field offset for UIKitInspectorV3Bridge.host))
    _UIHostingView.viewController.getter();
  __break(1u);
}

char *UIKitInspectorV3Bridge.makePresentedHost(_:)(uint64_t a1)
{
  void *v1;
  uint64_t ObjectType;
  Class v4;
  _BYTE *v5;
  id v6;
  char *v7;

  ObjectType = swift_getObjectType();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  v5 = objc_allocWithZone(v4);
  swift_retain();
  v6 = v1;
  v7 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(a1, (uint64_t)v6, 1, v5, ObjectType, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);
  swift_release();

  *(_QWORD *)(*(_QWORD *)&v7[direct field offset for UIHostingController.host]
            + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v7[direct field offset for UIHostingController.host])
                        + 0x240)
            + 8) = &protocol witness table for UIKitInspectorV3Bridge<A>;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  return v7;
}

uint64_t UIKitInspectorV3Bridge.reset()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  *(_QWORD *)((char *)v0 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = 0;
  swift_release();
  UIKitInspectorV3Bridge.presentedVC.willset(0);
  v2 = *(void **)((char *)v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  *(_QWORD *)((char *)v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC) = 0;

  v3 = (_QWORD *)((char *)v0 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
  swift_beginAccess();
  v4 = MEMORY[0x1E0DEE9E0];
  *v3 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)((char *)v0 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
  swift_beginAccess();
  *v5 = v4;
  swift_bridgeObjectRelease();
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = (uint64_t)v0 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v11, v6, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  swift_endAccess();
  *(_QWORD *)&v13 = 0;
  v11 = 0u;
  v12 = 0u;
  BYTE8(v13) = 3;
  v7 = (char *)v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v9 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v8);
  (*(void (**)(char *, __int128 *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, &v11, v9);
  result = swift_endAccess();
  *((_BYTE *)v0 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
  return result;
}

void closure #2 in UIKitInspectorV3Bridge.updateTransform()(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x18D760234](v3);
  if (v4)
  {
    v5 = (char *)v4;
    MEMORY[0x18D75B908]();
    if (*(_QWORD *)&v5[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor])
    {
      swift_retain();
      v6 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a2);
      swift_release();

    }
    static Update.end()();

  }
}

void closure #1 in UIKitInspectorV3Bridge.updateTransform()(uint64_t a1, void *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  Swift::Bool v10;
  Swift::Bool v11;
  id v12;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    MEMORY[0x18D75B908]();
    v8 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    v9 = &a3[direct field offset for PresentationHostingController.lastPresentationOptions];
    swift_beginAccess();
    if (*(_QWORD *)v9)
      v10 = v9[89] & 1;
    else
      v10 = 0;
    v11 = PopoverPresentationDelegate.shouldDismiss(presentationController:featureEnabled:)((UIPresentationController)a2, v10);

    if (v11)
      objc_msgSend(a3, sel_dismissViewControllerAnimated_completion_, 1, 0);
    v12 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a2);

    static Update.end()();
  }
}

Swift::Bool __swiftcall PopoverPresentationDelegate.shouldDismiss(presentationController:featureEnabled:)(UIPresentationController presentationController, Swift::Bool featureEnabled)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  id v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  _OWORD v39[4];
  uint64_t v40;
  id v41[9];
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  if (!featureEnabled
    && *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_clientAllowsAutomaticPopoverDismissal) != 1
    || (static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    return 0;
  }
  v4 = v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  if (!MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate))
  {
    v40 = 0;
    memset(v39, 0, sizeof(v39));
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v4 + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v5 + 8))(v39, v2, ObjectType, v5);
  swift_unknownObjectRelease();
  if (!*(_QWORD *)&v39[0])
  {
LABEL_10:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v39, &lazy cache variable for type metadata for PopoverPresentationDelegate.PopoverSource?, (uint64_t)&type metadata for PopoverPresentationDelegate.PopoverSource, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return 0;
  }
  outlined init with take of PopoverPresentationDelegate.PopoverSource((uint64_t)v39, (uint64_t)v41);
  v7 = -[objc_class presentedView](presentationController.super.isa, sel_presentedView);
  if (!v7)
  {
    outlined destroy of PopoverPresentationDelegate.PopoverSource(v41);
    return 0;
  }
  v8 = v7;
  objc_msgSend(v7, sel_bounds);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = v41[0];
  v18 = objc_msgSend(v41[0], sel_superview);
  objc_msgSend(v8, sel_convertRect_toView_, v18, v10, v12, v14, v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;

  v42.origin.x = v20;
  v42.origin.y = v22;
  v42.size.width = v24;
  v42.size.height = v26;
  if (CGRectIsInfinite(v42))
  {
    outlined destroy of PopoverPresentationDelegate.PopoverSource(v41);

    return 0;
  }
  objc_msgSend(v17, sel_frame);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  objc_msgSend(v17, sel_safeAreaInsets);
  v43.origin.x = UIEdgeInsetsInsetRect(v29, v31, v33, v35, v36, v37);
  v45.origin.x = v20;
  v45.origin.y = v22;
  v45.size.width = v24;
  v45.size.height = v26;
  v44 = CGRectIntersection(v43, v45);
  v46.origin.x = v20;
  v46.origin.y = v22;
  v46.size.width = v24;
  v46.size.height = v26;
  v38 = CGRectEqualToRect(v44, v46);

  outlined destroy of PopoverPresentationDelegate.PopoverSource(v41);
  return !v38;
}

void UIKitInspectorV3Bridge.dismissAndReset(viewController:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD v10[6];

  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  if ((objc_msgSend(a1, sel_isBeingDismissed) & 1) == 0)
  {
    v5 = v4 & v3;
    v6 = objc_msgSend(a1, sel_presentingViewController);
    if (!v6)
      v6 = a1;
    v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = *(_QWORD *)(v5 + 80);
    v8[3] = *(_QWORD *)(v5 + 88);
    v8[4] = v7;
    v10[4] = partial apply for closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:);
    v10[5] = v8;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_79_0;
    v9 = _Block_copy(v10);
    swift_release();
    objc_msgSend(v6, sel_dismissViewControllerAnimated_completion_, 1, v9);
    _Block_release(v9);

  }
}

void compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  int v36;
  char *v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v60 = a8;
  v62 = a7;
  v61 = a6;
  v64 = a5;
  v63 = a2;
  v12 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v59 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v18 = (char *)&v54 - v17;
  v19 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v24, v25);
  v30 = (char *)&v54 - v27;
  if (*(_BYTE *)(a4 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) != 2)
    return;
  v55 = v28;
  v54 = direct field offset for UIKitInspectorV3Bridge.dismissingReason;
  v58 = a3;
  v57 = a4;
  v31 = v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v54 - v27, a1, a9, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, a9);
  v56 = v31;
  v32 = &v18[*(int *)(v31 + 48)];
  v33 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v33(v18, v30, v14);
  v33(v32, v63, v14);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v34(v18, 1, a9) == 1)
  {
    v35 = *(void (**)(char *, uint64_t))(v19 + 8);
    v35(v30, v14);
    v36 = v34(v32, 1, a9);
    v37 = v58;
    if (v36 == 1)
    {
      v35(v18, v14);
LABEL_11:
      outlined init with copy of SwiftUIAnySortComparator?(v64, (uint64_t)&v67, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if ((_QWORD)v67)
      {
        v78 = v71;
        v79 = v72;
        v80 = v73;
        v74 = v67;
        v75 = v68;
        v76 = v69;
        v77 = v70;
        v42 = v67;
        v43 = direct field offset for UIHostingController.host;
        v44 = *(_QWORD **)&v37[direct field offset for UIHostingController.host];
        v45 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v46 = (_QWORD *)((char *)v44 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v44) + 0x60));
        swift_beginAccess();
        *v46 = v42;
        swift_retain_n();
        v47 = v44;
        swift_release();
        v66 = 1;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        swift_release_n();
        UIKitInspectorV3Bridge.updateTransform()();
        v48 = *(_QWORD **)&v37[v43];
        v49 = *((_QWORD *)&v79 + 1);
        v50 = v80;
        v51 = (_QWORD *)((char *)v48 + *(_QWORD *)((*v45 & *v48) + 0x120));
        swift_beginAccess();
        v52 = *v51;
        *v51 = v49;
        v51[1] = v50;
        swift_retain();
        v53 = v48;
        swift_retain();
        outlined consume of EnvironmentValues?(v52);
        v65 = 2;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        goto LABEL_13;
      }
      __break(1u);
      return;
    }
    goto LABEL_7;
  }
  v33(v23, v18, v14);
  if (v34(v32, 1, a9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v23, a9);
    v37 = v58;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v18, v56);
    goto LABEL_8;
  }
  v38 = v59;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v59, v32, a9);
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v40 = *(void (**)(char *, uint64_t))(v12 + 8);
  v40(v38, a9);
  v41 = *(void (**)(char *, uint64_t))(v19 + 8);
  v41(v30, v14);
  v40(v23, a9);
  v41(v18, v14);
  v37 = v58;
  if ((v39 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  outlined init with copy of SwiftUIAnySortComparator?(v64, (uint64_t)&v67, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  if ((_QWORD)v67)
  {
    v78 = v71;
    v79 = v72;
    v80 = v73;
    v74 = v67;
    v75 = v68;
    v76 = v69;
    v77 = v70;
    UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(v37, (uint64_t)&v74, v61, v62, v60 & 1);
LABEL_13:
    outlined destroy of PopoverPresentation((uint64_t)&v74);
    return;
  }
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v67, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_BYTE *)(v57 + v54) = 1;
  UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v37);
}

void UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  id v29;
  id v30;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];
  _OWORD v39[7];
  _OWORD v40[2];
  _OWORD v41[6];
  uint64_t v42;
  _BYTE v43[44];
  int v44;
  _BYTE v45[48];
  _DWORD v46[10];
  char v47;

  v6 = v5;
  v8 = *MEMORY[0x1E0DEEDD8] & *v5;
  v9 = MEMORY[0x1E0DEC198];
  outlined init with copy of SwiftUIAnySortComparator?(a2 + 48, (uint64_t)v39, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  v11 = *(_QWORD *)(v8 + 88);
  v36 = *(_QWORD *)(v8 + 80);
  v10 = v36;
  v37 = v11;
  v12 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v9, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v14 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, v36, v11, v13);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:), (uint64_t)v35, MEMORY[0x1E0DEDCE8], v14, v15, (uint64_t)v45);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v39, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v9, (uint64_t (*)(_QWORD, uint64_t))v12);
  outlined init with copy of PopoverPresentation(a2, (uint64_t)v43);
  if (v45[40] == 255)
  {
    v16 = v44;
    outlined destroy of PopoverPresentation((uint64_t)v43);
    v46[0] = v16;
    v47 = 1;
    v17 = type metadata accessor for Optional();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v45, v17);
  }
  else
  {
    outlined destroy of PopoverPresentation((uint64_t)v43);
    (*(void (**)(_DWORD *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v46, v45, v14);
  }
  v18 = (char *)v6 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  (*(void (**)(char *, _DWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v18, v46, v14);
  swift_endAccess();
  *((_BYTE *)v6 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 0;
  v19 = objc_msgSend(a1, sel_presentingViewController);
  if (!v19)
    v19 = a1;
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of PopoverPresentation(a2, (uint64_t)v41);
  outlined init with copy of PresentationOptionsPreference(a4, (uint64_t)v39);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 264) = v40[0];
  *(_OWORD *)(v21 + 273) = *(_OWORD *)((char *)v40 + 9);
  v22 = v41[5];
  *(_OWORD *)(v21 + 112) = v41[4];
  *(_OWORD *)(v21 + 128) = v22;
  v23 = v41[1];
  *(_OWORD *)(v21 + 48) = v41[0];
  *(_OWORD *)(v21 + 64) = v23;
  v24 = v41[3];
  *(_OWORD *)(v21 + 80) = v41[2];
  *(_OWORD *)(v21 + 96) = v24;
  v25 = v39[6];
  *(_OWORD *)(v21 + 232) = v39[5];
  *(_OWORD *)(v21 + 248) = v25;
  v26 = v39[0];
  *(_OWORD *)(v21 + 168) = v39[1];
  *(_OWORD *)(v21 + 184) = v39[2];
  v27 = v39[4];
  *(_OWORD *)(v21 + 200) = v39[3];
  *(_OWORD *)(v21 + 216) = v27;
  *(_QWORD *)(v21 + 16) = v10;
  *(_QWORD *)(v21 + 24) = v11;
  *(_QWORD *)(v21 + 32) = v20;
  *(_QWORD *)(v21 + 40) = a1;
  *(_QWORD *)(v21 + 144) = v42;
  *(_OWORD *)(v21 + 152) = v26;
  *(_BYTE *)(v21 + 289) = a5 & 1;
  *(_QWORD *)(v21 + 296) = a3;
  aBlock[4] = partial apply for closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_66;
  v28 = _Block_copy(aBlock);
  v29 = a1;
  v30 = a3;
  swift_release();
  objc_msgSend(v19, sel_dismissViewControllerAnimated_completion_, 1, v28);
  _Block_release(v28);

}

void UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)(uint64_t a1, UIViewController *a2, uint64_t *a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  char v18;
  UIViewController *v19;
  UIViewController *v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  _QWORD v35[5];
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41[5];
  int v42;
  _BYTE v43[48];
  _DWORD v44[10];
  char v45;

  v5 = (uint64_t)v4;
  v36 = a4;
  v40 = a3;
  ObjectType = swift_getObjectType();
  v9 = *MEMORY[0x1E0DEEDD8] & *v4;
  v10 = (char *)v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v11 = *(_QWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v9 + 88);
  v14 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(v41, v10, v14);
  v16 = UIKitInspectorV3Bridge.PresentationKind.isPopover.getter(v14);
  v38 = v15;
  (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v41, v14);
  if ((v16 & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v37 = ObjectType;
    v17 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    if (one-time initialization token for willPresent != -1)
      swift_once();
    v39 = v10;
    objc_msgSend(v17, sel_postNotificationName_object_, static SheetInspectorBridgeNotifications.willPresent, 0);

    static Transaction.current.getter();
    v18 = Transaction.isAnimated.getter();
    swift_release();
    v19 = -[UIViewController presentedViewController](a2, sel_presentedViewController);
    if (v19)
    {
      v20 = v19;
      if (!-[UIViewController isBeingDismissed](v19, sel_isBeingDismissed))
      {
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
          -[UIViewController dismissViewControllerAnimated:completion:](a2, sel_dismissViewControllerAnimated_completion_, v18 & 1, 0);
      }

    }
    v21 = UIKitInspectorV3Bridge.makePresentedHost(_:)(*(_QWORD *)a1);
    v22 = v21;
    UIKitInspectorV3Bridge.presentedVC.willset((uint64_t)v21);
    v23 = *(void **)(v5 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    *(_QWORD *)(v5 + direct field offset for UIKitInspectorV3Bridge.presentedVC) = v21;

    v24 = *(_QWORD *)(a1 + 96);
    v41[0] = *(_QWORD *)(a1 + 88);
    v41[1] = v24;
    v25 = *(_BYTE *)(a1 + 8);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(v22, v41, v40, v25, v36 & 1);
    swift_release();
    swift_release();
    v41[0] = v5;
    v40 = (uint64_t *)a2;
    PresentationHostingController.setupSheet<A>(for:presenter:style:)((uint64_t)v41, a2, 7, v37, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);
    v26 = MEMORY[0x1E0DEC198];
    v27 = outlined init with copy of SwiftUIAnySortComparator?(a1 + 48, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    MEMORY[0x1E0C80A78](v27, v28);
    v35[2] = v11;
    v35[3] = v12;
    v29 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v26, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:), (uint64_t)v35, MEMORY[0x1E0DEDCE8], v14, v30, (uint64_t)v43);
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v26, (uint64_t (*)(_QWORD, uint64_t))v29);
    outlined init with copy of PopoverPresentation(a1, (uint64_t)v41);
    if (v43[40] == 255)
    {
      v33 = v42;
      outlined destroy of PopoverPresentation((uint64_t)v41);
      v44[0] = v33;
      v45 = 1;
      v34 = type metadata accessor for Optional();
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v43, v34);
      v32 = v39;
      v31 = v38;
    }
    else
    {
      outlined destroy of PopoverPresentation((uint64_t)v41);
      v31 = v38;
      (*(void (**)(_DWORD *, _BYTE *, uint64_t))(v38 + 32))(v44, v43, v14);
      v32 = v39;
    }
    swift_beginAccess();
    (*(void (**)(char *, _DWORD *, uint64_t))(v31 + 40))(v32, v44, v14);
    swift_endAccess();
    objc_msgSend(v40, sel_presentViewController_animated_completion_, v22, 1, 0);

  }
}

void closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, char a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19[2];

  v11 = a1 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x18D760234](v11);
  if (v12)
  {
    v13 = (void *)v12;
    *(_BYTE *)(v12 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
    v14 = *a3;
    v15 = *(_QWORD **)&a2[direct field offset for UIHostingController.host];
    v16 = (_QWORD *)((char *)v15 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v15) + 0x60));
    swift_beginAccess();
    *v16 = v14;
    swift_retain_n();
    v17 = v15;
    swift_release();
    LOWORD(v19[0]) = 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    v18 = a3[12];
    v19[0] = a3[11];
    v19[1] = v18;
    LOBYTE(v17) = *((_BYTE *)a3 + 8);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(a2, v19, a4, (char)v17, a5 & 1);
    swift_release();
    swift_release();
    objc_msgSend(a6, sel_presentViewController_animated_completion_, a2, 1, 0);

  }
}

void UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4, char *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  UIViewController *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  Class v57;
  char *v58;
  void *v59;
  UIViewController *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v67;
  char v68;
  _OWORD v69[2];
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _BYTE v75[96];
  uint64_t v76;

  v6 = v5;
  ObjectType = swift_getObjectType();
  v11 = *v5;
  v12 = *MEMORY[0x1E0DEEDD8];
  v13 = *a5;
  v14 = UIKitInspectorV3Bridge.presenter.getter();
  if (!v14)
    return;
  v15 = (UIViewController *)v14;
  v16 = v12 & v11;
  v17 = (char *)v5 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v19 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v16 + 80), *(_QWORD *)(v16 + 88), v18);
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(_BYTE *, char *, uint64_t))(v20 + 16))(v75, v17, v19);
  UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v19);
  v22 = v21;
  v63 = v20;
  v64 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v75, v19);
  if ((v22 & 1) != 0)
  {
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v23 = a1;
  v24 = a1[11];
  outlined init with copy of InspectorStorage((uint64_t)a1, (uint64_t)v75);
  if (v24)
  {
    swift_retain();
    outlined destroy of InspectorStorage((uint64_t)v75);
  }
  else
  {
    v24 = v76;
    swift_retain();
    outlined destroy of InspectorStorage((uint64_t)v75);
    if (!v24)
      v24 = AnyView.init<A>(_:)();
  }
  v67 = UIKitInspectorV3Bridge.makePresentedHost(_:)(v24);
  swift_release();
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)(a1 + 6), (uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  v65 = v17;
  v61 = v15;
  v62 = ObjectType;
  if (!*((_QWORD *)&v73 + 1))
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    goto LABEL_17;
  }
  v69[0] = v72;
  v69[1] = v73;
  v70 = v74;
  if (!*(_QWORD *)(a3 + 16) || (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v69), (v26 & 1) == 0))
  {
    outlined destroy of AnyHashable((uint64_t)v69);
    goto LABEL_17;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v25);
  v28 = (void *)objc_opt_self();
  swift_retain();
  v29 = objc_msgSend(v28, sel_currentDevice);
  v30 = objc_msgSend(v29, sel_userInterfaceIdiom);

  if (v30 != (id)1)
    goto LABEL_16;
  *(_QWORD *)((char *)v6 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = v27;
  swift_retain();
  swift_release();
  v31 = a1[14];
  *(_QWORD *)&v72 = a1[13];
  *((_QWORD *)&v72 + 1) = v31;
  swift_retain();
  swift_retain();
  specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(v67, (uint64_t *)&v72, a4, 4, v13);
  swift_release();
  swift_release();
  v32 = objc_msgSend(v67, sel_popoverPresentationController);
  if (!v32)
  {
LABEL_16:
    outlined destroy of AnyHashable((uint64_t)v69);
    swift_release();
LABEL_17:
    v38 = direct field offset for UIHostingController.host;
    v39 = *(_QWORD **)&v67[direct field offset for UIHostingController.host];
    v40 = a1[13];
    v41 = a1[14];
    v42 = (_QWORD *)((char *)v39 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v39) + 0x120));
    v37 = 1;
    swift_beginAccess();
    v43 = *v42;
    *v42 = v40;
    v42[1] = v41;
    swift_retain();
    v44 = v39;
    swift_retain();
    outlined consume of EnvironmentValues?(v43);
    LOWORD(v69[0]) = 2;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    v23 = a1;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    v15 = v61;
    if (*(_BYTE *)(*(_QWORD *)&v67[v38] + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v67[v38]) + 0x180)) == 2)
    {
      *(_QWORD *)&v69[0] = v40;
      *((_QWORD *)&v69[0] + 1) = v41;
      EnvironmentValues.explicitPreferredColorScheme.getter();
      if (v68 != 2)
      {
        v45 = *(_QWORD **)&v67[v38];
        v46 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v45) + 0x180);
        v47 = *((unsigned __int8 *)v45 + v46);
        *((_BYTE *)v45 + v46) = v68;
        v48 = v67;
        v49 = v45;
        v50 = v47;
        v23 = a1;
        specialized _UIHostingView.didChangeColorScheme(from:)(v50);

      }
      v37 = 1;
    }
    goto LABEL_21;
  }
  v33 = v32;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_187BFF9C0;
  v35 = MEMORY[0x18D760234]((char *)v6 + direct field offset for UIKitInspectorV3Bridge.host);
  if (!v35)
  {
    __break(1u);
    goto LABEL_30;
  }
  *(_QWORD *)(v34 + 32) = v35;
  *(_QWORD *)&v72 = v34;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v33, sel_setPassthroughViews_, isa);
  swift_release();

  outlined destroy of AnyHashable((uint64_t)v69);
  v37 = 7;
LABEL_21:
  *(_QWORD *)&v69[0] = v6;
  PresentationHostingController.setupSheet<A>(for:presenter:style:)((uint64_t)v69, v15, v37, v62, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);
  v51 = objc_msgSend(v67, sel_presentationController);
  if (v51)
  {
    v52 = v51;
    objc_opt_self();
    v53 = swift_dynamicCastObjCClass();
    if (v53)
    {
      v54 = (void *)v53;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_187C34340;
      v56 = (void *)objc_opt_self();
      *(_QWORD *)(v55 + 32) = objc_msgSend(v56, sel_mediumDetent);
      *(_QWORD *)(v55 + 40) = objc_msgSend(v56, sel_largeDetent);
      *(_QWORD *)&v69[0] = v55;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISheetPresentationControllerDetent);
      v57 = Array._bridgeToObjectiveC()().super.isa;
      v23 = a1;
      swift_bridgeObjectRelease();
      objc_msgSend(v54, sel_setDetents_, v57);

      objc_msgSend(v54, sel_setLargestUndimmedDetentIdentifier_, *MEMORY[0x1E0DC5380]);
      objc_msgSend(v54, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
      objc_msgSend(v54, sel_setPrefersGrabberVisible_, 1);
    }

  }
  if (v23[1])
  {
    LOBYTE(v69[0]) = 1;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
  }
  v58 = v67;
  UIKitInspectorV3Bridge.presentedVC.willset((uint64_t)v67);
  v59 = *(void **)((char *)v6 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  *(_QWORD *)((char *)v6 + direct field offset for UIKitInspectorV3Bridge.presentedVC) = v67;

  LODWORD(v69[0]) = a2;
  v71 = 2;
  swift_beginAccess();
  (*(void (**)(char *, _OWORD *, uint64_t))(v63 + 40))(v65, v69, v64);
  swift_endAccess();
  -[UIViewController presentViewController:animated:completion:](v15, sel_presentViewController_animated_completion_, v58, 1, 0);

}

uint64_t UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(char *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[9];
  _OWORD v43[7];
  uint64_t v44;

  v3 = v2;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *MEMORY[0x1E0DEEDD8] & *v2;
  v8 = (char *)v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v10 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v9);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(__int128 *, char *, uint64_t))(v11 + 16))(&v39, v8, v10);
  UIKitInspectorV3Bridge.PresentationKind.viewID.getter(v10);
  v13 = v12;
  (*(void (**)(__int128 *, uint64_t))(v11 + 8))(&v39, v10);
  if (*(_QWORD *)(a2 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13), (v15 & 1) != 0))
  {
    outlined init with copy of InspectorStorage(*(_QWORD *)(a2 + 56) + 120 * v14, (uint64_t)v43);
  }
  else
  {
    v43[0] = xmmword_187BF9840;
    memset(&v43[1], 0, 96);
    v44 = 0;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v43, (uint64_t)&v39, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  v16 = *((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1) == 1)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v39, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_11:
    if (*((_BYTE *)v3 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
    {
      *((_BYTE *)v3 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 1;
      UIKitInspectorV3Bridge.dismissAndReset(viewController:)(a1);
    }
    v19 = 0;
    goto LABEL_14;
  }
  v17 = v39;
  v18 = v40;
  outlined copy of Binding<NavigationSplitViewColumn>?(v39, *((uint64_t *)&v39 + 1));
  outlined destroy of InspectorStorage((uint64_t)&v39);
  if (!v16)
    goto LABEL_11;
  *(_QWORD *)&v36 = v17;
  *((_QWORD *)&v36 + 1) = v16;
  LOBYTE(v37) = v18 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v35);
  swift_release();
  swift_release();
  if ((v35 & 1) == 0)
    goto LABEL_11;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v43, (uint64_t)&v39, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  if (*((_QWORD *)&v39 + 1) == 1)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v39, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
LABEL_24:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    goto LABEL_27;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v42, (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  outlined destroy of InspectorStorage((uint64_t)&v39);
  if (!*((_QWORD *)&v37 + 1))
    goto LABEL_24;
  v39 = v36;
  v40 = v37;
  v41 = v38;
  v23 = (_QWORD *)((char *)v3 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
  swift_beginAccess();
  v24 = *v23;
  if (*(_QWORD *)(v24 + 16) && (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v39), (v26 & 1) != 0))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
    swift_retain();
  }
  else
  {
    v27 = 0;
  }
  swift_endAccess();
  outlined destroy of AnyHashable((uint64_t)&v39);
  *(_QWORD *)((char *)v3 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = v27;
  swift_release();
LABEL_27:
  v28 = objc_msgSend(a1, sel_presentationController);
  if (v28)
  {
    v29 = v28;
    if (*(_QWORD *)((char *)v3 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor))
    {
      swift_retain();
      v30 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v29);

      swift_release();
      v29 = v30;
    }

  }
  result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v43, (uint64_t)&v39, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  if (*((_QWORD *)&v39 + 1) == 1)
  {
    __break(1u);
    goto LABEL_35;
  }
  v31 = v42[5];
  swift_retain();
  result = outlined destroy of InspectorStorage((uint64_t)&v39);
  if (!v31)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  v32 = *(_QWORD **)&a1[direct field offset for UIHostingController.host];
  v33 = (_QWORD *)((char *)v32 + *(_QWORD *)((*v6 & *v32) + 0x60));
  v19 = 1;
  swift_beginAccess();
  *v33 = v31;
  swift_retain_n();
  v34 = v32;
  swift_release();
  v35 = 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  swift_release_n();
LABEL_14:
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v43, (uint64_t)&v39, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  v20 = *((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1) == 1)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v43, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v21 = &v39;
  }
  else
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v39, *((uint64_t *)&v39 + 1));
    outlined destroy of InspectorStorage((uint64_t)&v39);
    if (v20)
    {
      LOBYTE(v35) = v19;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    v21 = v43;
  }
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)v21, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
}

void specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;

  if (a1 == 8 || a1 == 5)
    objc_msgSend(v2, sel_setModalPresentationCapturesStatusBarAppearance_, 1);
  objc_msgSend(v2, sel_setModalPresentationStyle_, a1);
  v5 = objc_msgSend(v2, sel_modalPresentationStyle);
  if (v5 == (id)7 || v5 == (id)2)
  {
    MEMORY[0x1E0C80A78](v5, v6);
    static Update.ensure<A>(_:)();
    specialized PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, 0);
  }
}

void closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    UIKitInspectorV3Bridge.reset()();

  }
}

uint64_t UIKitInspectorV3Bridge.popoverSource(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _OWORD v21[6];
  uint64_t v22;
  _OWORD v23[6];
  uint64_t v24;

  v2 = v1;
  v4 = v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v4, (uint64_t)v21, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  if (!*(_QWORD *)&v21[0])
  {
    result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v21, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v23[4] = v21[4];
  v23[5] = v21[5];
  v24 = v22;
  v23[0] = v21[0];
  v23[1] = v21[1];
  v23[2] = v21[2];
  v23[3] = v21[3];
  v5 = *(_QWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections);
  v6 = *(_BYTE *)(v2 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections + 8);
  outlined init with copy of PopoverPresentation((uint64_t)v23, (uint64_t)v21);
  if ((v6 & 1) != 0)
  {
    v7 = BYTE8(v21[0]);
    EnvironmentValues.layoutDirection.getter();
    outlined destroy of PopoverPresentation((uint64_t)v21);
    __asm { BR              X10 }
  }
  outlined destroy of PopoverPresentation((uint64_t)v21);
  v9 = MEMORY[0x18D760234](v2 + direct field offset for UIKitInspectorV3Bridge.barItemAnchor);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = MEMORY[0x18D760234](v2 + direct field offset for UIKitInspectorV3Bridge.host);
    if (v11)
      goto LABEL_10;
    __break(1u);
    goto LABEL_15;
  }
  v12 = MEMORY[0x18D760234](v2 + direct field offset for UIKitInspectorV3Bridge.tabItemAnchor);
  if (!v12)
  {
    MEMORY[0x1E0C80A78](0, v13);
    swift_retain();
    static Update.ensure<A>(_:)();
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, type metadata accessor for CGRect);
    Anchor.convert(to:)();
    v15 = MEMORY[0x18D760234](v2 + direct field offset for UIKitInspectorV3Bridge.host);
    if (v15)
    {
      *(_QWORD *)a1 = v15;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      swift_release();
      swift_release();
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v17;
      *(_QWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 48) = v19;
      v14 = v20;
      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
    JUMPOUT(0x1878B76C4);
  }
  v10 = (void *)v12;
  v11 = MEMORY[0x18D760234](v2 + direct field offset for UIKitInspectorV3Bridge.host);
  if (!v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_10:
  *(_QWORD *)a1 = v11;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v14 = 1;
LABEL_11:
  *(_BYTE *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v5;
  return outlined destroy of PopoverPresentation((uint64_t)v23);
}

uint64_t closure #1 in UIKitInspectorV3Bridge.popoverSource(for:)(uint64_t a1)
{
  uint64_t result;
  void *v2;

  result = MEMORY[0x18D760234](a1 + direct field offset for UIKitInspectorV3Bridge.host);
  if (result)
  {
    v2 = (void *)result;
    swift_retain();

    ViewGraph.transform.getter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for PresentationHostingControllerDelegate.didDismissViewController(_:wasPreempted:modifierRemoved:) in conformance UIKitInspectorV3Bridge<A>(uint64_t a1, uint64_t a2, char a3)
{
  return specialized UIKitInspectorV3Bridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(a3);
}

_QWORD *UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v7 = *a2;
  PreferenceList.subscript.getter();
  v5[2] = a1;
  v6 = v2;
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB5((_QWORD *(*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:), (uint64_t)v5, v8);
}

void closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  char v17;
  char v18;

  v5 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  _UIHostingView.colorScheme.getter(&v18);
  if (v18 == 2 || ((v9 ^ ((v18 & 1) == 0)) & 1) == 0)
  {
    v17 = v9;
    _UIHostingView.colorScheme.setter(&v17);
    if (v9)
      v10 = 2;
    else
      v10 = 1;
    v11 = direct field offset for UIKitInspectorV3Bridge.presentedVC;
    v12 = *(void **)(a3 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v12)
    {
      objc_msgSend(v12, sel_setOverrideUserInterfaceStyle_, v10);
      v13 = *(void **)(a3 + v11);
      if (v13)
      {
        v14 = objc_msgSend(v13, sel_presentationController);
        if (v14)
        {
          v15 = v14;
          MEMORY[0x18D75DB64]();
          UIMutableTraits.userInterfaceStyle.setter();
          MEMORY[0x18D75DB70](v8);

        }
      }
    }
  }
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance UIKitInspectorV3Bridge<A>()
{
  return specialized UIKitInspectorV3Bridge.hostingView<A>(_:willUpdate:)();
}

uint64_t closure #1 in variable initialization expression of PopoverPresentationDelegate.clientAllowsAutomaticPopoverDismissal()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD000000000000011 && v4 == 0x8000000187BEA8E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

UIModalPresentationStyle __swiftcall PopoverPresentationDelegate.adaptivePresentationStyle(for:traitCollection:)(UIPresentationController a1, UITraitCollection traitCollection)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;
  id v9;
  UIModalPresentationStyle v10;

  v5 = v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  if (MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate))
  {
    v6 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, ObjectType, v6);
    swift_unknownObjectRelease();
    if ((v8 & 1) != 0)
    {
      v9 = -[objc_class presentedViewController](a1.super.isa, sel_presentedViewController);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
      if (swift_dynamicCastClass())
      {
        v10 = specialized PresentationHostingController.adaptivePresentationStyle(traitCollection:kind:)(traitCollection.super.isa, 1);

        return v10;
      }

    }
  }
  if (-[objc_class horizontalSizeClass](traitCollection.super.isa, sel_horizontalSizeClass) == (id)1)
    return 2;
  if (-[objc_class verticalSizeClass](traitCollection.super.isa, sel_verticalSizeClass) == (id)1)
    return 2;
  return -1;
}

uint64_t type metadata accessor for PopoverPresentationDelegate()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for DismissingReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1878B7CE4 + 4 * byte_187C685C7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1878B7D18 + 4 * byte_187C685C2[v4]))();
}

uint64_t sub_1878B7D18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878B7D20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878B7D28);
  return result;
}

uint64_t sub_1878B7D34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878B7D3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1878B7D40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878B7D48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DismissingReason()
{
  return &unk_1E1ABED10;
}

uint64_t assignWithCopy for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIKitInspectorV3Bridge.PresentationKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t destructiveInjectEnumTag for UIKitInspectorV3Bridge.PresentationKind(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type DismissingReason and conformance DismissingReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DismissingReason and conformance DismissingReason;
  if (!lazy protocol witness table cache variable for type DismissingReason and conformance DismissingReason)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DismissingReason, &unk_1E1ABED10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DismissingReason and conformance DismissingReason);
  }
  return result;
}

uint64_t one-time initialization function for willPresent()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD00000000000001ALL, 0x8000000187BEA9D0);
  static SheetInspectorBridgeNotifications.willPresent = result;
  return result;
}

id specialized UIHostingController.idealSizeDidChange(from:to:)(double a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  double v14;
  double v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char *v24;
  id result;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;

  v3 = v2;
  v30 = a2;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v2, sel_view, v8);
  if (!v11)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = v11;
  objc_msgSend(v11, sel_effectiveUserInterfaceLayoutDirection);

  v13 = direct field offset for UIHostingController.host;
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  v31 = v33;
  v32 = v34;
  EnvironmentValues.pixelLength.getter();
  v15 = v14;
  swift_release();
  swift_release();
  v16 = objc_msgSend(v3, sel_view);
  if (!v16)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = v16;
  objc_msgSend(v16, sel_safeAreaInsets);

  CGSize.inset(by:)();
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, *MEMORY[0x1E0DED500], v5);
  v33 = v19;
  v31 = v21;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v15);
  v22 = v33;
  v23 = v31;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v24 = &v3[direct field offset for UIHostingController.sizingOptions];
  result = (id)swift_beginAccess();
  if (!*(_QWORD *)v24)
  {
LABEL_16:
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v22 != a1 || v23 != v30)
  {
    if ((*(_QWORD *)v24 & 1) == 0)
      goto LABEL_9;
    v26 = (_BYTE *)(*(_QWORD *)&v3[v13] + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v3[v13]) + 0x90));
    swift_beginAccess();
    if (*v26 == 1)
    {
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v3;
      *(double *)(v27 + 24) = v22;
      *(double *)(v27 + 32) = v23;
      v28 = v3;
      onNextMainRunLoop(do:)();
      result = (id)swift_release();
LABEL_9:
      if ((*v24 & 2) == 0)
        return result;
      return objc_msgSend(*(id *)&v3[v13], sel_invalidateIntrinsicContentSize);
    }
    result = objc_msgSend(v3, sel_setPreferredContentSize_, v22, v23);
    if ((*v24 & 2) != 0)
      return objc_msgSend(*(id *)&v3[v13], sel_invalidateIntrinsicContentSize);
  }
  return result;
}

uint64_t specialized UIHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;

  v2 = v1;
  v4 = (_QWORD *)(v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  v5 = *v4 & ~a1;
  if (one-time initialization token for idealSizeOptions != -1)
    swift_once();
  if ((static UIHostingControllerSizingOptions.idealSizeOptions & v5) != 0)
  {
    v6 = direct field offset for UIHostingController.host;
    v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    swift_retain();
    static _ProposedSize.unspecified.getter();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + v6) + *(_QWORD *)((*v7 & **(_QWORD **)(v2 + v6)) + 0x68));
    swift_beginAccess();
    if ((*(_BYTE *)(v8 + 128) & 1) != 0)
    {
      static CGSize.invalidValue.getter();
      v10 = v9;
      v12 = v11;
      v13 = *(id *)(v2 + v6);
      static _ProposedSize.unspecified.getter();
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.sizeThatFits(_:)();

      specialized UIHostingController.idealSizeDidChange(from:to:)(v10, v12);
    }
  }
  else if ((*v4 & static UIHostingControllerSizingOptions.idealSizeOptions) == 0)
  {
    swift_retain();
    static _ProposedSize.unspecified.getter();
    swift_beginAccess();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
    ViewGraphGeometryObservers.stopObserving(proposal:)();
    swift_endAccess();
    swift_release();
  }
  return specialized UIHostingController.updateWindowSizeObservers(_:)(v5);
}

uint64_t specialized UIHostingController.updateWindowSizeObservers(_:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _BYTE *v5;
  _BYTE *v6;

  v2 = v1;
  result = swift_weakLoadStrong();
  if (result)
  {
    if ((a1 & 4) != 0)
    {
      swift_retain();
      static _ProposedSize.zero.getter();
      swift_allocObject();
      swift_weakInit();
      swift_beginAccess();
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      swift_release();
      swift_release();
      if ((a1 & 8) == 0)
      {
LABEL_6:
        v6 = (_BYTE *)(v2 + direct field offset for UIHostingController.sizingOptions);
        swift_beginAccess();
        if ((*v6 & 8) == 0)
        {
          swift_retain();
          static _ProposedSize.infinity.getter();
          swift_beginAccess();
          type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
          ViewGraphGeometryObservers.stopObserving(proposal:)();
          swift_endAccess();
          swift_release();
        }
        return swift_release();
      }
    }
    else
    {
      v5 = (_BYTE *)(v1 + direct field offset for UIHostingController.sizingOptions);
      swift_beginAccess();
      if ((*v5 & 4) == 0)
      {
        swift_retain();
        static _ProposedSize.zero.getter();
        swift_beginAccess();
        type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
        ViewGraphGeometryObservers.stopObserving(proposal:)();
        swift_endAccess();
        swift_release();
      }
      if ((a1 & 8) == 0)
        goto LABEL_6;
    }
    swift_retain();
    static _ProposedSize.infinity.getter();
    swift_allocObject();
    swift_weakInit();
    swift_beginAccess();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  id v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 aBlock;
  __int128 v43;
  uint64_t (*v44)();
  uint64_t v45;
  _OWORD v46[2];
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[48];

  v2 = v1;
  v4 = &v1[direct field offset for PresentationHostingController.observedSize];
  if ((v1[direct field offset for PresentationHostingController.observedSize + 16] & 1) == 0)
  {
    v5 = v1;
    specialized closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)((uint64_t)v5);

  }
  v6 = objc_msgSend(v2, sel_presentingViewController);
  if (!v6)
    goto LABEL_15;
  v7 = v6;
  v8 = (uint64_t)&v2[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  if (!*(_QWORD *)v8)
  {
    v44 = 0;
    aBlock = 0u;
    v43 = 0u;
LABEL_14:

    outlined destroy of IntelligenceElement?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    goto LABEL_15;
  }
  outlined init with copy of PresentationOptionsPreference(v8, (uint64_t)v46);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v54, (uint64_t)&v39);
    if (v41)
    {
      outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&aBlock);
    }
    else
    {
      *((_QWORD *)&v43 + 1) = &type metadata for AutomaticPresentationSizing;
      v44 = (uint64_t (*)())&protocol witness table for AutomaticPresentationSizing;
      outlined destroy of IntelligenceElement?((uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
  }
  else
  {
    v44 = 0;
    aBlock = 0u;
    v43 = 0u;
  }
  outlined destroy of PresentationOptionsPreference(v46);
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_14;
  outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v58);
  v9 = &v2[direct field offset for UIHostingController.sizingOptions];
  swift_beginAccess();
  if (*(_QWORD *)v9
    || (v10 = objc_msgSend(v2, sel_sheetPresentationController)) == 0
    || (v11 = v10, v12 = objc_msgSend(v10, sel_presentationStyle), v11, v12 != (id)2)
    || *(_QWORD *)v8 && (*(_BYTE *)(v8 + 136) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);

LABEL_15:
    specialized UIHostingController.sizingOptionsDidChange(from:)(a1);
    return;
  }
  v13 = objc_msgSend(v2, sel_traitCollection);
  v14 = objc_msgSend(v13, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v14, (uint64_t)&aBlock);
  v15 = aBlock;
  if ((_QWORD)aBlock)
  {
    v16 = *((_QWORD *)&aBlock + 1);
    v46[0] = aBlock;
  }
  else
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    v16 = *((_QWORD *)&v46[0] + 1);
    v15 = *(_QWORD *)&v46[0];
  }
  v17 = v7;
  v18 = objc_msgSend(v17, sel_presentingViewController);
  v19 = v17;
  if (v18)
  {
    v20 = v17;
    do
    {
      v19 = v18;

      v18 = objc_msgSend(v19, sel_presentingViewController);
      v20 = v19;
    }
    while (v18);
  }
  v38 = v17;
  v21 = objc_msgSend(v19, sel_parentViewController);
  if (v21)
  {
    do
    {
      v22 = v21;

      v21 = objc_msgSend(v22, sel_parentViewController);
      v19 = v22;
    }
    while (v21);
  }
  else
  {
    v22 = v19;
  }
  v23 = objc_msgSend(v22, sel_view);

  if (v23)
  {
    v24 = *(_QWORD *)&v2[direct field offset for PresentationHostingController.lastColumnCount];
    outlined init with copy of TableColumnList((uint64_t)v58, (uint64_t)v46);
    v47 = v23;
    v48 = v24;
    v49 = 0;
    v50 = 0;
    v51 = 1;
    v52 = 0;
    v53 = 1;
    v54 = 0;
    v55 = 1;
    v56 = v15;
    v57 = v16;
    *((_QWORD *)&aBlock + 1) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    swift_unknownObjectWeakInit();
    v37 = v23;
    specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&aBlock);
    v26 = v25;
    v28 = v27;
    outlined destroy of weak FallbackResponderProvider?((uint64_t)&aBlock);
    v29 = objc_opt_self();
    v36 = v15;
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = v2;
    v30[3] = v26;
    v30[4] = v28;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter;
    *(_QWORD *)(v31 + 24) = v30;
    v44 = partial apply for thunk for @callee_guaranteed () -> ();
    v45 = v31;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v43 = thunk for @escaping @callee_guaranteed () -> ();
    *((_QWORD *)&v43 + 1) = &block_descriptor_36_0;
    v32 = _Block_copy(&aBlock);
    v33 = v2;
    swift_retain();
    swift_release();
    objc_msgSend((id)v29, sel_performWithoutAnimation_, v32);
    _Block_release(v32);
    LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v29 & 1) == 0)
    {
      *(_QWORD *)v4 = v26;
      *((_QWORD *)v4 + 1) = v28;
      v4[16] = 0;
      swift_retain();
      _ProposedSize.init(width:height:)();
      *(_QWORD *)&v39 = aBlock;
      BYTE8(v39) = BYTE8(aBlock);
      v40 = v43;
      LOBYTE(v41) = BYTE8(v43);
      v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v35 = (_QWORD *)swift_allocObject();
      v35[2] = v34;
      v35[3] = v36;
      v35[4] = v16;
      swift_beginAccess();
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();

      swift_release();
      swift_release();
      outlined destroy of SheetSizing((uint64_t)v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  swift_retain();
  _ProposedSize.init(width:height:)();
  swift_beginAccess();
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
  ViewGraphGeometryObservers.stopObserving(proposal:)();
  swift_endAccess();
  result = swift_release();
  v3 = a1 + direct field offset for PresentationHostingController.observedSize;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 1;
  return result;
}

uint64_t specialized closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  swift_retain();
  GraphHost.instantiateIfNeeded()();
  return swift_release();
}

void specialized PresentationHostingController.configureSizingOptions(for:sheetController:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _UNKNOWN **v19;
  _QWORD v20[12];
  uint64_t v21;

  v3 = v2;
  if (objc_msgSend(v2, sel_modalPresentationStyle) == (id)7)
  {
    v6 = (uint64_t *)&v2[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    v7 = *v6;
    *v6 = 1;
    specialized PresentationHostingController.sizingOptionsDidChange(from:)(v7);
    return;
  }
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v8 = (uint64_t *)&v2[direct field offset for UIHostingController.sizingOptions];
LABEL_5:
    swift_beginAccess();
    v9 = *v8;
    *v8 = 1;
LABEL_26:
    specialized PresentationHostingController.sizingOptionsDidChange(from:)(v9);
    if (a2)
      objc_msgSend(a2, sel_setPrefersPageSizing_, 0);
    return;
  }
  v10 = objc_msgSend(v2, sel_modalPresentationStyle);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v20);
  if (v10 == (id)2)
  {
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v21, (uint64_t)&v15);
      if (v16)
      {
        outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v17);
      }
      else
      {
        *((_QWORD *)&v18 + 1) = &type metadata for AutomaticPresentationSizing;
        v19 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of IntelligenceElement?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      }
    }
    else
    {
      v19 = 0;
      v17 = 0u;
      v18 = 0u;
    }
    outlined destroy of PresentationOptionsPreference(v20);
    v11 = *((_QWORD *)&v18 + 1);
    outlined destroy of IntelligenceElement?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (!v11)
    {
      v8 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
      goto LABEL_5;
    }
  }
  else
  {
    outlined destroy of PresentationOptionsPreference(v20);
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v15);
    if (v16)
    {
      outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v17);
    }
    else
    {
      *((_QWORD *)&v18 + 1) = &type metadata for AutomaticPresentationSizing;
      v19 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of IntelligenceElement?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
    outlined destroy of IntelligenceElement?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    v14 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    v9 = *v14;
    *v14 = 0;
    goto LABEL_26;
  }
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  outlined destroy of IntelligenceElement?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v15);
    if (v16)
    {
      outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v17);
    }
    else
    {
      *((_QWORD *)&v18 + 1) = &type metadata for AutomaticPresentationSizing;
      v19 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of IntelligenceElement?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
    outlined destroy of IntelligenceElement?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  }
  else
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    outlined destroy of IntelligenceElement?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (objc_msgSend(v3, sel_modalPresentationStyle) == (id)1)
    {
      v12 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
      swift_beginAccess();
      v13 = *v12;
      *v12 = 1;
      specialized PresentationHostingController.sizingOptionsDidChange(from:)(v13);
      if (a2)
        objc_msgSend(a2, sel_setPrefersPageSizing_, 1);
    }
  }
}

void specialized PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  id v6;
  id v7;
  id v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char isEscapingClosureAtFileLocation;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int128 aBlock;
  __int128 v55;
  uint64_t (*v56)();
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[40];

  v3 = v2;
  if (objc_msgSend(v3, sel_modalPresentationStyle) == (id)2)
  {
    v6 = objc_msgSend(v3, sel_traitCollection);
    v7 = objc_msgSend(v6, sel_horizontalSizeClass);

    if (v7 == (id)2)
    {
      outlined init with copy of PresentationSizing?(a2, (uint64_t)&v58);
      if (v59)
      {
        outlined init with take of OptionalBinaryInteger(&v58, (uint64_t)&aBlock);
        if (*((_QWORD *)&v55 + 1))
          goto LABEL_5;
      }
      else
      {
        v9 = &v3[direct field offset for PresentationHostingController.lastPresentationOptions];
        swift_beginAccess();
        if (*(_QWORD *)v9)
        {
          outlined init with copy of PresentationOptionsPreference((uint64_t)v9, (uint64_t)v42);
          if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
          {
            outlined init with copy of PresentationSizing?((uint64_t)&v50, (uint64_t)&v40);
            if (v41)
            {
              outlined init with take of OptionalBinaryInteger(&v40, (uint64_t)&aBlock);
            }
            else
            {
              *((_QWORD *)&v55 + 1) = &type metadata for AutomaticPresentationSizing;
              v56 = (uint64_t (*)())&protocol witness table for AutomaticPresentationSizing;
              outlined destroy of IntelligenceElement?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
            }
          }
          else
          {
            v56 = 0;
            aBlock = 0u;
            v55 = 0u;
          }
          outlined destroy of PresentationOptionsPreference(v42);
        }
        else
        {
          v56 = 0;
          aBlock = 0u;
          v55 = 0u;
        }
        outlined destroy of IntelligenceElement?((uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
        if (*((_QWORD *)&v55 + 1))
        {
LABEL_5:
          outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v60);
          if (a1)
          {
            v8 = a1;
          }
          else
          {
            v8 = objc_msgSend(v3, sel_presentingViewController);
            if (!v8)
            {
LABEL_37:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
              return;
            }
          }
          v10 = &v3[direct field offset for UIHostingController.sizingOptions];
          swift_beginAccess();
          v11 = *(_QWORD *)v10;
          v12 = a1;
          if (v11
            || (v13 = objc_msgSend(v3, sel_sheetPresentationController)) == 0
            || (v14 = v13, v15 = objc_msgSend(v13, sel_presentationStyle), v14, v15 != (id)2)
            || (v16 = &v3[direct field offset for PresentationHostingController.lastPresentationOptions],
                swift_beginAccess(),
                *(_QWORD *)v16)
            && (v16[136] & 1) != 0)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);

            return;
          }
          v17 = objc_msgSend(v3, sel_traitCollection);
          v18 = objc_msgSend(v17, sel_userInterfaceIdiom);

          UIUserInterfaceIdiom.idiom.getter((uint64_t)v18, (uint64_t)&aBlock);
          v19 = aBlock;
          if ((_QWORD)aBlock)
          {
            v20 = *((_QWORD *)&aBlock + 1);
            v42[0] = aBlock;
          }
          else
          {
            static _GraphInputs.defaultInterfaceIdiom.getter();
            v20 = *((_QWORD *)&v42[0] + 1);
            v19 = *(_QWORD *)&v42[0];
          }
          v21 = v8;
          v22 = objc_msgSend(v21, sel_presentingViewController);
          v23 = v21;
          if (v22)
          {
            v24 = v21;
            do
            {
              v23 = v22;

              v22 = objc_msgSend(v23, sel_presentingViewController);
              v24 = v23;
            }
            while (v22);
          }
          v25 = objc_msgSend(v23, sel_parentViewController);
          if (v25)
          {
            do
            {
              v26 = v25;

              v25 = objc_msgSend(v26, sel_parentViewController);
              v23 = v26;
            }
            while (v25);
          }
          else
          {
            v26 = v23;
          }
          v27 = objc_msgSend(v26, sel_view);

          if (v27)
          {
            v28 = *(_QWORD *)&v3[direct field offset for PresentationHostingController.lastColumnCount];
            outlined init with copy of TableColumnList((uint64_t)v60, (uint64_t)v42);
            v43 = v27;
            v44 = v28;
            v45 = 0;
            v46 = 0;
            v47 = 1;
            v48 = 0;
            v49 = 1;
            v50 = 0;
            v51 = 1;
            v52 = v19;
            v53 = v20;
            *((_QWORD *)&aBlock + 1) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
            swift_unknownObjectWeakInit();
            v29 = v27;
            specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&aBlock);
            v31 = v30;
            v33 = v32;
            outlined destroy of weak FallbackResponderProvider?((uint64_t)&aBlock);
            v34 = (void *)objc_opt_self();
            v35 = (_QWORD *)swift_allocObject();
            v35[2] = v3;
            v35[3] = v31;
            v35[4] = v33;
            v36 = swift_allocObject();
            *(_QWORD *)(v36 + 16) = partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter;
            *(_QWORD *)(v36 + 24) = v35;
            v56 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
            v57 = v36;
            *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v55 = thunk for @escaping @callee_guaranteed () -> ();
            *((_QWORD *)&v55 + 1) = &block_descriptor_72_0;
            v37 = _Block_copy(&aBlock);
            v38 = v3;
            swift_retain();
            swift_release();
            objc_msgSend(v34, sel_performWithoutAnimation_, v37);
            _Block_release(v37);
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();

            swift_release();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
            {
              outlined destroy of SheetSizing((uint64_t)v42);
              goto LABEL_37;
            }
            __break(1u);
          }
          __break(1u);
          return;
        }
      }
      outlined destroy of IntelligenceElement?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
  }
}

void specialized PresentationHostingController.configureDetents(of:using:)(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  id v6;
  id v7;
  id v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  double *v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  Class isa;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  double *v53;
  id v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _UNKNOWN **v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[25];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  uint64_t v78[3];

  v3 = v2;
  v6 = objc_msgSend(v2, sel_traitCollection);
  v7 = objc_msgSend(v6, sel_horizontalSizeClass);

  if (v7 != (id)2)
    goto LABEL_5;
  v8 = objc_msgSend(v3, sel_traitCollection);
  v9 = objc_msgSend(v8, sel_verticalSizeClass);

  if (v9 != (id)2
    || (v10 = &v3[direct field offset for PresentationHostingController.delegate],
        MEMORY[0x18D760234](&v3[direct field offset for PresentationHostingController.delegate]))
    && (v11 = *((_QWORD *)v10 + 1),
        ObjectType = swift_getObjectType(),
        LOBYTE(v11) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(ObjectType, v11),
        swift_unknownObjectRelease(),
        (v11 & 1) != 0))
  {
LABEL_5:
    if (one-time initialization token for clientNeedsOscillationSuppression != -1)
      goto LABEL_60;
    while (1)
    {
      v13 = clientNeedsOscillationSuppression;
      outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v59);
      if (v13)
      {
        v14 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined init with copy of SwiftUIAnySortComparator?(v14, (uint64_t)&v70, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        LOBYTE(v14) = PresentationOptionsPreference.sheetConfigurationChanged(from:)((uint64_t)&v70);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v70, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of PresentationOptionsPreference(&v59);
        if ((v14 & 1) == 0)
          return;
      }
      else
      {
        outlined destroy of PresentationOptionsPreference(&v59);
      }
      v15 = *(_QWORD *)&v3[direct field offset for PresentationHostingController.oscillationDetector];
      if (v15)
      {
        swift_beginAccess();
        v16 = *(_QWORD *)(v15 + 16);
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = v16 + 32;
          swift_bridgeObjectRetain();
          while (1)
          {
            v19 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32);
            swift_retain();
            LOBYTE(v19) = v19(a2, v18);
            swift_release();
            if ((v19 & 1) != 0)
              break;
            v18 += 144;
            if (!--v17)
            {
              swift_bridgeObjectRelease();
              goto LABEL_16;
            }
          }
          swift_bridgeObjectRelease();
          *(_QWORD *)&v70 = 0;
          *((_QWORD *)&v70 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(281);
          v58 = v70;
          v32._object = (void *)0x8000000187BEA9F0;
          v32._countAndFlagsBits = 0xD000000000000083;
          String.append(_:)(v32);
          v33 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
          swift_beginAccess();
          outlined init with copy of SwiftUIAnySortComparator?(v33, (uint64_t)&v56, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v56, (uint64_t)&v70, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
          if ((_QWORD)v70)
          {
            v68 = v76;
            *(_OWORD *)v69 = v77[0];
            *(_OWORD *)&v69[9] = *(_OWORD *)((char *)v77 + 9);
            v64 = v72;
            v65 = v73;
            v66 = v74;
            v67 = v75;
            v62 = v70;
            v63 = v71;
            closure #1 in PresentationHostingController.configureDetents(of:using:)((uint64_t *)&v62, v78);
            outlined destroy of PresentationOptionsPreference(&v62);
            v34 = v78[0];
            v35 = v78[1];
          }
          else
          {
            v35 = 0;
            v34 = 0;
          }
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v56, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          if (v35)
            v36 = v34;
          else
            v36 = 0;
          if (v35)
            v37 = v35;
          else
            v37 = 0xE000000000000000;
          v38 = v37;
          String.append(_:)(*(Swift::String *)&v36);
          swift_bridgeObjectRelease();
          v39._countAndFlagsBits = 0xD000000000000094;
          v39._object = (void *)0x8000000187BEAA80;
          String.append(_:)(v39);
          MEMORY[0x18D75AC90](v58, *((_QWORD *)&v58 + 1));
          swift_bridgeObjectRelease();
          return;
        }
LABEL_16:
        outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v70);
        v20 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v70, v20, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        swift_endAccess();
        specialized OscillationDetector.insert(_:)(a2);
      }
      else
      {
        outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v70);
        v21 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v70, v21, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        swift_endAccess();
      }
      v22 = *(_QWORD *)a2;
      v23 = MEMORY[0x1E0DEE9D8];
      if (!*(_QWORD *)(*(_QWORD *)a2 + 16))
      {
        v27 = MEMORY[0x1E0DEE9D8] >> 62;
        if (MEMORY[0x1E0DEE9D8] >> 62)
        {
          swift_bridgeObjectRetain();
          v42 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v42)
            goto LABEL_62;
LABEL_26:
          swift_bridgeObjectRetain();
        }
        else
        {
          if (*(_QWORD *)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_26;
LABEL_62:
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v43 = swift_allocObject();
          *(_OWORD *)(v43 + 16) = xmmword_187BFF9C0;
          *(_QWORD *)(v43 + 32) = objc_msgSend((id)objc_opt_self(), sel_largeDetent);
          *(_QWORD *)&v70 = v43;
          specialized Array._endMutation()();
        }
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISheetPresentationControllerDetent);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(a1, sel_setDetents_, isa);

        v45 = *(_QWORD *)(a2 + 48);
        if (!v45)
          goto LABEL_72;
        if (v45 != 1)
        {
          if (v45 == 2)
            objc_msgSend(a1, sel_setLargestUndimmedDetentIdentifier_, 0);
          else
            objc_msgSend(a1, sel_setLargestUndimmedDetentIdentifier_, *(_QWORD *)(a2 + 48));
          goto LABEL_74;
        }
        if (v27)
        {
          swift_bridgeObjectRetain();
          v50 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v50 < 2)
            goto LABEL_72;
LABEL_69:
          v46 = objc_msgSend((id)objc_opt_self(), sel_largeDetent);
          v47 = objc_msgSend(v46, sel_identifier);

          v48 = objc_msgSend((id)objc_opt_self(), sel_appearanceWithSmallestDimmedDetentIdentifier_, v47);
          objc_msgSend(a1, sel__setStandardAppearance_, v48);

          v49 = 1;
        }
        else
        {
          if (*(uint64_t *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2)
            goto LABEL_69;
LABEL_72:
          objc_msgSend(a1, sel_setLargestUndimmedDetentIdentifier_, 0);
          v49 = v45;
        }
        outlined consume of PresentationDimmingBehavior?((id)v49);
LABEL_74:
        objc_msgSend(a1, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, *(unsigned __int8 *)(a2 + 57) != 2);
        UISheetPresentationController.preferredCornerRadius.setter();
        objc_msgSend(a1, sel_setPrefersEdgeAttachedInCompactHeight_, (*(_BYTE *)(a2 + 41) & 0xFD) == 1);
        if (*(_BYTE *)(a2 + 58))
        {
          if (*(_BYTE *)(a2 + 58) == 1)
          {
            swift_bridgeObjectRelease();
            v51 = 1;
          }
          else
          {
            swift_bridgeObjectRelease();
            v51 = 0;
          }
        }
        else
        {
          if (v27)
          {
            swift_bridgeObjectRetain();
            v52 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v52 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v51 = v52 > 1;
        }
        objc_msgSend(a1, sel_setPrefersGrabberVisible_, v51);
        v53 = (double *)(a2 + 80);
        if (*(_BYTE *)(a2 + 88))
          v53 = (double *)MEMORY[0x1E0DC59D0];
        objc_msgSend(a1, sel__setGrabberTopSpacing_, *v53);
        v54 = objc_msgSend(a1, sel_prefersEdgeAttachedInCompactHeight);
        objc_msgSend(a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, v54);
        if ((v54 & 1) != 0 || objc_msgSend(v3, sel_modalPresentationStyle) == (id)2)
          v55 = 1;
        else
          v55 = objc_msgSend(a1, sel_prefersPageSizing) ^ 1;
        objc_msgSend(a1, sel__setMode_, v55);
        goto LABEL_89;
      }
      *(_QWORD *)&v62 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v24 = specialized Set.startIndex.getter(v22);
      a2 = v25;
      a1 = (void *)(v26 & 1);
      if (v24 < 0 || v24 >= 1 << *(_BYTE *)(v22 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(v22 + 56 + (((unint64_t)v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
      {
        if (*(_DWORD *)(v22 + 36) == (_DWORD)v25)
          __asm { BR              X10 }
        goto LABEL_59;
      }
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      swift_once();
    }
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v28 + 32) = objc_msgSend((id)objc_opt_self(), sel_largeDetent);
  *(_QWORD *)&v70 = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISheetPresentationControllerDetent);
  v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setDetents_, v29);

  objc_msgSend(a1, sel_setLargestUndimmedDetentIdentifier_, 0);
  objc_msgSend(a1, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
  UISheetPresentationController.preferredCornerRadius.setter();
  objc_msgSend(a1, sel_setPrefersEdgeAttachedInCompactHeight_, 0);
  objc_msgSend(a1, sel_setPrefersGrabberVisible_, *(unsigned __int8 *)(a2 + 58) == 1);
  v30 = (double *)(a2 + 80);
  if (*(_BYTE *)(a2 + 88))
    v30 = (double *)MEMORY[0x1E0DC59D0];
  objc_msgSend(a1, sel__setGrabberTopSpacing_, *v30);
  outlined init with copy of PresentationSizing?(a2 + 96, (uint64_t)&v70);
  v31 = *((_QWORD *)&v71 + 1);
  outlined destroy of IntelligenceElement?((uint64_t)&v70, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v70);
  if (v31)
  {
    outlined destroy of PresentationOptionsPreference(&v70);
    outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v62);
  }
  else
  {
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v76, (uint64_t)&v59);
      if (*((_QWORD *)&v60 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v59, (uint64_t)&v62);
      }
      else
      {
        *((_QWORD *)&v63 + 1) = &type metadata for AutomaticPresentationSizing;
        *(_QWORD *)&v64 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of IntelligenceElement?((uint64_t)&v59, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      }
    }
    else
    {
      *(_QWORD *)&v64 = 0;
      v62 = 0u;
      v63 = 0u;
    }
    outlined destroy of PresentationOptionsPreference(&v70);
    v40 = *((_QWORD *)&v63 + 1);
    outlined destroy of IntelligenceElement?((uint64_t)&v62, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v62);
    if (!v40)
    {
      outlined destroy of PresentationOptionsPreference(&v62);
      goto LABEL_53;
    }
  }
  v41 = v69[24];
  outlined destroy of PresentationOptionsPreference(&v62);
  if (v41 == 1)
  {
LABEL_53:
    objc_msgSend(a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
    objc_msgSend(a1, sel__setMode_, objc_msgSend(v3, sel_modalPresentationStyle) == (id)2);
    return;
  }
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?(a2 + 96, (uint64_t)&v56);
    if (v57)
    {
      outlined init with take of OptionalBinaryInteger(&v56, (uint64_t)&v59);
    }
    else
    {
      *((_QWORD *)&v60 + 1) = &type metadata for AutomaticPresentationSizing;
      v61 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of IntelligenceElement?((uint64_t)&v56, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
    outlined destroy of IntelligenceElement?((uint64_t)&v59, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (objc_msgSend(v3, sel_modalPresentationStyle) != (id)7)
    {
      objc_msgSend(a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
LABEL_89:
      specialized PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, a1);
    }
  }
  else
  {
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    outlined destroy of IntelligenceElement?((uint64_t)&v59, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  }
}

void specialized PresentationHostingController.setPassthrough(using:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  NSArray v9;
  id v10;

  v3 = objc_msgSend(v1, sel_popoverPresentationController);
  if (v3)
  {
    v10 = v3;
    if (*(_BYTE *)(a1 + 56) == 2
      && (v4 = objc_msgSend(v1, sel_presentingViewController)) != 0
      && (v5 = v4, v6 = objc_msgSend(v4, sel_view), v5, v6))
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_187BFF9C0;
      *(_QWORD *)(v7 + 32) = v6;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v8 = v6;
      v9.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_setPassthroughViews_, v9.super.isa);

    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v9.super.isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v10, sel_setPassthroughViews_, v9.super.isa);
    }

  }
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized closure #1 in UIHostingController.sizingOptionsDidChange(from:)(double *a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    specialized UIHostingController.idealSizeDidChange(from:to:)(v3, v4);

  }
}

uint64_t specialized UIKitInspectorV3Bridge.addPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  return GraphHost.addPreference<A>(_:)();
}

void specialized PresentationHostingController.updateDetentsSelection(of:using:)(void *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21[2];

  v2 = a2[2];
  if (v2)
  {
    v5 = *a2;
    v4 = a2[1];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v7 = v6;
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](v21, v7);
    if ((specialized Set.contains(_:)(v21[0], v21[1], v5) & 1) == 0)
    {
      MEMORY[0x18D75AC90](0xD000000000000052, 0x8000000187BE0E20);
      outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
      return;
    }
    MEMORY[0x18D75B9C8](v21, v7);
    PresentationDetent.uiSheetDetentId.getter();
    v9 = v8;
    v10 = objc_msgSend(a1, sel_selectedDetentIdentifier);
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;
      if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
      {
        v16 = v9;

        swift_bridgeObjectRelease_n();
LABEL_9:
        outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
LABEL_11:

        return;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v17 = v9;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a1;
    *(_QWORD *)(v18 + 24) = v9;
    v9 = v9;
    v19 = a1;
    onNextMainRunLoop(do:)();
    outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
    swift_release();
    goto LABEL_11;
  }
}

id specialized PopoverPresentationDelegate.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  objc_class *ObjectType;
  uint64_t v6;
  char *v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_clientAllowsAutomaticPopoverDismissal;
  v7 = v3;
  *((_BYTE *)v3 + v6) = closure #1 in variable initialization expression of PopoverPresentationDelegate.clientAllowsAutomaticPopoverDismissal() & 1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate + 8] = a3;
  swift_unknownObjectWeakInit();

  v9.receiver = v7;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

id specialized PopoverPresentationDelegate.__allocating_init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return specialized PopoverPresentationDelegate.init<A>(delegate:)(a1, a2, a3);
}

void specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  _OWORD v15[4];
  uint64_t v16;
  id v17;
  uint64_t v18;
  double v19[5];
  char v20;
  uint64_t v21;

  v3 = v1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  if (!MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate))
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v4 + 8))(v15, v1, ObjectType, v4);
  swift_unknownObjectRelease();
  if (!*(_QWORD *)&v15[0])
  {
LABEL_8:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v15, &lazy cache variable for type metadata for PopoverPresentationDelegate.PopoverSource?, (uint64_t)&type metadata for PopoverPresentationDelegate.PopoverSource, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    return;
  }
  outlined init with take of PopoverPresentationDelegate.PopoverSource((uint64_t)v15, (uint64_t)&v17);
  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (v6)
  {
    v7 = v21;
    v8 = a1;
    objc_msgSend(v6, sel_setPermittedArrowDirections_, v7);
  }
  v9 = MEMORY[0x18D760234](&v18);
  if (v9)
  {
    v10 = (void *)v9;
    objc_msgSend(a1, sel_setBarButtonItem_, v9);
LABEL_11:

    goto LABEL_12;
  }
  v11 = MEMORY[0x18D760234](v19);
  if (v11)
  {
    v10 = (void *)v11;
    objc_msgSend(a1, sel_setSourceItem_, v11);
    goto LABEL_11;
  }
  objc_msgSend(a1, sel_setSourceView_, v17);
  if ((v20 & 1) != 0)
  {
    outlined destroy of PopoverPresentationDelegate.PopoverSource(&v17);

    return;
  }
  objc_msgSend(a1, sel_setSourceRect_, v19[1], v19[2], v19[3], v19[4]);
  if (!v6)
    goto LABEL_13;
  v12 = v6;
  v13 = objc_msgSend(v12, sel_containerView);
  objc_msgSend(v13, sel_setNeedsLayout);

  v14 = objc_msgSend(v12, sel_containerView);
  if (!v14)
  {
    outlined destroy of PopoverPresentationDelegate.PopoverSource(&v17);

    return;
  }
  v6 = v14;
  objc_msgSend(v14, sel_layoutIfNeeded);

LABEL_12:
LABEL_13:
  outlined destroy of PopoverPresentationDelegate.PopoverSource(&v17);
}

void specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(char *a1, uint64_t *a2, uint64_t *a3, char a4, char a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v31;
  char v32;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = *a2;
  v9 = a2[1];
  v10 = direct field offset for UIHostingController.host;
  v11 = *(_QWORD **)&a1[direct field offset for UIHostingController.host];
  v12 = (_QWORD *)((char *)v11 + *(_QWORD *)((*v11 & *MEMORY[0x1E0DEEDD8]) + 0x120));
  swift_beginAccess();
  v13 = *v12;
  *v12 = v8;
  v12[1] = v9;
  swift_retain();
  v14 = v11;
  swift_retain();
  outlined consume of EnvironmentValues?(v13);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  if (*(_BYTE *)(*(_QWORD *)&a1[v10] + *(_QWORD *)((*v7 & **(_QWORD **)&a1[v10]) + 0x180)) == 2)
  {
    EnvironmentValues.explicitPreferredColorScheme.getter();
    if (v32 != 2)
    {
      v15 = *(_QWORD **)&a1[v10];
      v16 = *(_QWORD *)((*v7 & *v15) + 0x180);
      v17 = *((unsigned __int8 *)v15 + v16);
      *((_BYTE *)v15 + v16) = v32;
      v18 = a1;
      v19 = v15;
      specialized _UIHostingView.didChangeColorScheme(from:)(v17);

    }
  }
  specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(7, (uint64_t)a3);
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(a5 & 1);
  specialized PresentationHostingController.updateSheet(with:)(a3);
  v20 = objc_msgSend(a1, sel_presentationController);
  if (v20)
  {
    v21 = v20;
    objc_opt_self();
    v22 = swift_dynamicCastObjCClass();
    if (v22)
    {
      v23 = (void *)v22;
      v24 = v21;
      v25 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      objc_msgSend(v23, sel_setDelegate_, v25);

    }
    v26 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v21);

  }
  v27 = objc_msgSend(a1, sel_popoverPresentationController);
  if (v27)
  {
    v28 = v27;
    if (*(_BYTE *)(v31 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections + 8) == 1)
    {
      EnvironmentValues.layoutDirection.getter();
      __asm { BR              X11 }
    }
    objc_msgSend(v27, sel_setPermittedArrowDirections_, *(_QWORD *)(v31 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections));

  }
}

uint64_t specialized UIKitInspectorV3Bridge.hostingView<A>(_:willUpdate:)()
{
  char v1;

  _UIHostingView.colorScheme.getter(&v1);
  return EnvironmentValues.explicitPreferredColorScheme.setter();
}

uint64_t specialized UIKitInspectorV3Bridge.popoverShouldAdapt(for:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[40];
  unsigned __int8 v13;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = (void *)MEMORY[0x18D760234]((char *)v0 + direct field offset for UIKitInspectorV3Bridge.host);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_traitCollection);

    v6 = objc_msgSend(v5, sel_userInterfaceIdiom);
    if (v6 == (id)6)
      return 0;
  }
  v7 = (char *)v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v9 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v8);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(_BYTE *, char *, uint64_t))(v10 + 16))(v12, v7, v9);
  if (v13 - 2 < 2)
    return 0;
  if (!v13)
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  return 1;
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.popoverSource(for:)()
{
  uint64_t v0;

  return closure #1 in UIKitInspectorV3Bridge.popoverSource(for:)(*(_QWORD *)(v0 + 16));
}

uint64_t specialized UIKitInspectorV3Bridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *, char *, uint64_t);
  char v10;
  uint64_t (*v11)(_OWORD *, uint64_t);
  uint64_t result;
  Swift::UInt32 v13;
  Swift::UInt32 v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  _QWORD *v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  _OWORD v24[7];
  uint64_t v25;
  char v26;
  _OWORD v27[3];

  v2 = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *v1;
  v5 = (char *)v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  v7 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(_OWORD *, char *, uint64_t))(v8 + 16);
  v9(v24, v5, v7);
  UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v7);
  LOBYTE(v4) = v10;
  v11 = *(uint64_t (**)(_OWORD *, uint64_t))(v8 + 8);
  result = v11(v24, v7);
  if ((v4 & 1) != 0)
  {
    v9(v27, v5, v7);
    UIKitInspectorV3Bridge.PresentationKind.viewID.getter(v7);
    v14 = v13;
    v11(v27, v7);
    v15 = (_QWORD *)((char *)v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
    swift_beginAccess();
    v16 = *v15;
    if (*(_QWORD *)(v16 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v18 & 1) != 0))
    {
      outlined init with copy of InspectorStorage(*(_QWORD *)(v16 + 56) + 120 * v17, (uint64_t)v24);
      if (*((_QWORD *)&v24[0] + 1) >= 2uLL)
      {
        outlined copy of Binding<NavigationSplitViewColumn>?(*(uint64_t *)&v24[0], *((uint64_t *)&v24[0] + 1));
        swift_retain();
        swift_retain();
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        swift_endAccess();
        swift_release();
        swift_release();
        v26 = 0;
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        goto LABEL_14;
      }
    }
    else
    {
      v24[0] = xmmword_187BF9840;
      memset(&v24[1], 0, 96);
      v25 = 0;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v24, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_endAccess();
    return UIKitInspectorV3Bridge.reset()();
  }
  if ((a1 & 1) != 0)
  {
    result = static SemanticFeature.isEnabled.getter();
    if ((result & 1) != 0)
      return UIKitInspectorV3Bridge.reset()();
  }
  v19 = *((unsigned __int8 *)v2 + direct field offset for UIKitInspectorV3Bridge.dismissingReason);
  if (v19 == 2 || (v19 & 1) != 0)
  {
    v21 = (_QWORD *)((char *)v2 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation);
    swift_beginAccess();
    if (!*v21)
      return UIKitInspectorV3Bridge.reset()();
    v22 = (void (*)(uint64_t))v21[3];
    v23 = swift_retain();
    v22(v23);
LABEL_14:
    swift_release();
    return UIKitInspectorV3Bridge.reset()();
  }
  return result;
}

void partial apply for closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(unsigned __int8 *a1)
{
  uint64_t v1;

  closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined init with take of PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  v4 = *(_OWORD *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  return a2;
}

id *outlined destroy of PopoverPresentationDelegate.PopoverSource(id *a1)
{

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return a1;
}

id *specialized PopoverPresentationDelegate.popoverPresentationController(_:willRepositionPopoverTo:in:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  id *result;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  id v12[7];
  char v13;

  v3 = v1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  result = (id *)MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate);
  if (result)
  {
    v5 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t))(v5 + 8))(v12, v1, ObjectType, v5);
    swift_unknownObjectRelease();
    if (v12[0])
    {
      v7 = v12[3];
      v8 = v12[4];
      v9 = v12[5];
      v10 = v12[6];
      v11 = v13;
      result = outlined destroy of PopoverPresentationDelegate.PopoverSource(v12);
      if ((v11 & 1) == 0)
      {
        *a1 = v7;
        a1[1] = v8;
        a1[2] = v9;
        a1[3] = v10;
      }
    }
    else
    {
      return (id *)outlined destroy of AccessibilityScrollableContext?((uint64_t)v12, &lazy cache variable for type metadata for PopoverPresentationDelegate.PopoverSource?, (uint64_t)&type metadata for PopoverPresentationDelegate.PopoverSource, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
  }
  return result;
}

void specialized PopoverPresentationDelegate.presentationControllerDidAttemptToDismiss(_:)(void *a1)
{
  uint64_t v1;
  id v2;
  char *v3;
  void (*v4)(void);
  id v5;

  v5 = objc_msgSend(a1, sel_presentedViewController);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = *(id *)(v1 + direct field offset for UIHostingController.host);
    v3 = (char *)specialized _UIHostingView.sheetBridge.getter();

    if (v3)
    {
      v4 = *(void (**)(void))&v3[direct field offset for SheetBridge.interactiveDismissHandler];
      outlined copy of AppIntentExecutor?((uint64_t)v4);

      if (v4)
      {
        v4();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v4);
      }
    }
  }

}

uint64_t sub_1878BBDD4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878BBDF8()
{
  uint64_t v0;
  void *v1;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 120))
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 168))
  {
    swift_release();
    swift_release();
  }
  v1 = *(void **)(v0 + 200);
  if ((unint64_t)v1 >= 3)

  if (*(_QWORD *)(v0 + 272))
    __swift_destroy_boxed_opaque_existential_1(v0 + 248);

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)()
{
  uint64_t v0;

  closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(*(_QWORD *)(v0 + 32), *(char **)(v0 + 40), (uint64_t *)(v0 + 48), (uint64_t *)(v0 + 152), *(_BYTE *)(v0 + 289), *(void **)(v0 + 296));
}

BOOL partial apply for specialized closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  uint64_t v0;

  return closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(v0);
}

uint64_t sub_1878BBEC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1878BBEEC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)()
{
  uint64_t v0;

  return closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1878BBF20()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PresentationDetent.uiSheetDetent.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in PresentationDetent.uiSheetDetent.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1878BBF38()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in PresentationDetent.uiSheetDetent.getter()
{
  closure #2 in PresentationDetent.uiSheetDetent.getter();
}

uint64_t sub_1878BBF50()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in PresentationDetent.uiSheetDetent.getter(void *a1)
{
  uint64_t v1;

  return closure #1 in PresentationDetent.uiSheetDetent.getter(a1, *(double *)(v1 + 16));
}

uint64_t sub_1878BBF68()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in OscillationDetector.enqueueDecay(at:)()
{
  return specialized closure #1 in OscillationDetector.enqueueDecay(at:)();
}

uint64_t sub_1878BBFA4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1878BBFCC()
{
  return swift_deallocObject();
}

uint64_t sub_1878BBFDC()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)()
{
  uint64_t *v0;

  specialized closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(v0[2], v0[3], v0[4]);
}

uint64_t outlined destroy of SheetSizing(uint64_t a1)
{
  destroy for SheetSizing(a1);
  return a1;
}

void specialized closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  objc_class *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  __int128 aBlock;
  __int128 v36;
  uint64_t (*v37)();
  uint64_t v38;
  objc_super v39;
  _QWORD v40[9];
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[40];

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (char *)v6;
    v8 = (_QWORD *)(v6 + direct field offset for PresentationHostingController.lastPresentationOptions);
    swift_beginAccess();
    if (*v8)
    {
      outlined init with copy of PresentationOptionsPreference((uint64_t)v8, (uint64_t)v40);
      if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
      {
        outlined init with copy of PresentationSizing?((uint64_t)&v44, (uint64_t)&v33);
        if (v34)
        {
          outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)&aBlock);
        }
        else
        {
          *((_QWORD *)&v36 + 1) = &type metadata for AutomaticPresentationSizing;
          v37 = (uint64_t (*)())&protocol witness table for AutomaticPresentationSizing;
          outlined destroy of IntelligenceElement?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
        }
      }
      else
      {
        v37 = 0;
        aBlock = 0u;
        v36 = 0u;
      }
      outlined destroy of PresentationOptionsPreference(v40);
      if (*((_QWORD *)&v36 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v48);
        v9 = objc_msgSend(v7, sel_presentingViewController);
        if (!v9)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);

          return;
        }
        v10 = v9;
        v11 = objc_msgSend(v10, sel_presentingViewController);
        v12 = v10;
        if (v11)
        {
          v13 = v10;
          do
          {
            v12 = v11;

            v11 = objc_msgSend(v12, sel_presentingViewController);
            v13 = v12;
          }
          while (v11);
        }
        v14 = objc_msgSend(v12, sel_parentViewController);
        if (v14)
        {
          do
          {
            v15 = v14;

            v14 = objc_msgSend(v15, sel_parentViewController);
            v12 = v15;
          }
          while (v14);
        }
        else
        {
          v15 = v12;
        }
        v16 = objc_msgSend(v15, sel_view);

        if (v16)
        {
          v17 = *(_QWORD *)&v7[direct field offset for PresentationHostingController.lastColumnCount];
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
          v39.receiver = v7;
          v39.super_class = v18;
          objc_msgSendSuper2(&v39, sel_preferredContentSize);
          v20 = v19;
          v22 = v21;
          outlined init with copy of TableColumnList((uint64_t)v48, (uint64_t)v40);
          v40[5] = v16;
          v40[6] = v17;
          v40[7] = v20;
          v40[8] = v22;
          v41 = 0;
          v42 = 0;
          v43 = 1;
          v44 = 0;
          v45 = 1;
          v46 = a2;
          v47 = a3;
          *((_QWORD *)&aBlock + 1) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
          swift_unknownObjectWeakInit();
          v23 = v16;
          specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&aBlock);
          v25 = v24;
          v27 = v26;
          outlined destroy of weak FallbackResponderProvider?((uint64_t)&aBlock);
          v28 = objc_opt_self();
          v29 = (_QWORD *)swift_allocObject();
          v29[2] = v7;
          v29[3] = v25;
          v29[4] = v27;
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 16) = partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter;
          *(_QWORD *)(v30 + 24) = v29;
          v37 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
          v38 = v30;
          *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v36 = thunk for @escaping @callee_guaranteed () -> ();
          *((_QWORD *)&v36 + 1) = &block_descriptor_53_0;
          v31 = _Block_copy(&aBlock);
          v32 = v7;
          swift_retain();
          swift_release();
          objc_msgSend((id)v28, sel_performWithoutAnimation_, v31);
          _Block_release(v31);
          LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();

          swift_release();
          swift_release();
          if ((v28 & 1) == 0)
          {
            outlined destroy of SheetSizing((uint64_t)v40);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
            return;
          }
          __break(1u);
        }
        __break(1u);
        return;
      }
    }
    else
    {
      v37 = 0;
      aBlock = 0u;
      v36 = 0u;
    }

    outlined destroy of IntelligenceElement?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  }
}

id partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter()
{
  double *v0;
  void *v1;
  double v2;
  double v3;
  objc_class *v4;
  objc_super v6;

  v1 = (void *)*((_QWORD *)v0 + 2);
  v2 = v0[3];
  v3 = v0[4];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  v6.receiver = v1;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_setPreferredContentSize_, v2, v3);
}

uint64_t sub_1878BC508()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in UIHostingController.sizingOptionsDidChange(from:)(double *a1, uint64_t a2)
{
  uint64_t v2;

  specialized closure #1 in UIHostingController.sizingOptionsDidChange(from:)(a1, a2, v2);
}

id partial apply for specialized closure #1 in UIHostingController.idealSizeDidChange(from:to:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setPreferredContentSize_, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t partial apply for closure #1 in SceneBridge.updateMaximumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  return closure #1 in SceneBridge.updateMaximumSizeObserver(added:viewGraph:)(a1, a2);
}

uint64_t partial apply for closure #1 in SceneBridge.updateMinimumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  return closure #1 in SceneBridge.updateMinimumSizeObserver(added:viewGraph:)(a1, a2);
}

uint64_t sub_1878BC544()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  return specialized closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)();
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = outlined init with copy of AnyHashable(a1, a2);
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

void partial apply for closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)()
{
  uint64_t v0;

  closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(*(_QWORD *)(v0 + 32));
}

uint64_t outlined destroy of (key: ViewIdentity, value: InspectorStorage)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (key: ViewIdentity, value: InspectorStorage)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1878BC5E4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitInspectorV3Bridge.updateTransform()()
{
  uint64_t v0;

  closure #2 in UIKitInspectorV3Bridge.updateTransform()(*(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1878BC61C()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitInspectorV3Bridge.updateTransform()()
{
  uint64_t v0;

  closure #1 in UIKitInspectorV3Bridge.updateTransform()(*(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(char **)(v0 + 48));
}

uint64_t destroy for PopoverPresentationDelegate.PopoverSource(id *a1)
{

  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = v4;
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t initializeWithTake for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverPresentationDelegate.PopoverSource(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PopoverPresentationDelegate.PopoverSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PopoverPresentationDelegate.PopoverSource()
{
  return &type metadata for PopoverPresentationDelegate.PopoverSource;
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)(a1, a2);
}

double static EventModifiersGesture._makeGesture(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double result;
  __int128 v30;
  int v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = a2[5];
  v8 = a2[3];
  v47 = a2[4];
  v48 = v7;
  v9 = a2[5];
  v49[0] = a2[6];
  *(_OWORD *)((char *)v49 + 12) = *(__int128 *)((char *)a2 + 108);
  v10 = a2[1];
  v43 = *a2;
  v44 = v10;
  v11 = a2[3];
  v13 = *a2;
  v12 = a2[1];
  v45 = a2[2];
  v46 = v11;
  v14 = a2[6];
  v41 = v9;
  v42[0] = v14;
  *(_OWORD *)((char *)v42 + 12) = *(__int128 *)((char *)a2 + 108);
  v36 = v13;
  v37 = v12;
  v38 = v45;
  v15 = *a1;
  v39 = v8;
  v40 = v47;
  a3(&v30, &v36);
  LODWORD(v36) = v15;
  type metadata accessor for EventModifiersGesture(255, a4, v16, v17);
  type metadata accessor for _GraphValue();
  v18 = _GraphValue.value.getter();
  v41 = v48;
  v42[0] = v49[0];
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v49 + 12);
  v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  v19 = _GestureInputs.events.getter();
  v41 = v48;
  v42[0] = v49[0];
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v49 + 12);
  v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  v20 = _GestureInputs.resetSeed.getter();
  v36 = v30;
  LODWORD(v37) = v31;
  type metadata accessor for _GestureOutputs();
  v21 = _GestureOutputs.phase.getter();
  *(_QWORD *)&v36 = __PAIR64__(v19, v18);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v20);
  LODWORD(v37) = 0;
  BYTE4(v37) = 0;
  v33 = type metadata accessor for GesturePhase();
  v24 = type metadata accessor for EventModifiersGesturePhase(0, a4, v22, v23);
  v34 = v24;
  v35 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventModifiersGesturePhase<A>, v24);
  v25 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v32, v24, MEMORY[0x1E0DEDCE8], v25, MEMORY[0x1E0DEDD18], v26);
  _GestureOutputs.phase.setter();
  v27 = *((_QWORD *)&v30 + 1);
  v28 = v31;
  result = *(double *)&v30;
  *(_QWORD *)a5 = v30;
  *(_QWORD *)(a5 + 8) = v27;
  *(_DWORD *)(a5 + 16) = v28;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance EventModifiersGesture<A>@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static EventModifiersGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

void EventModifiersGesturePhase.resetPhase()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 20) = 0;
}

uint64_t EventModifiersGesturePhase.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t i;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t Value;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53[2];
  uint64_t v54;
  _BYTE v55[40];
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  __int128 v62[2];
  uint64_t v63;

  v2 = v1;
  v63 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for GesturePhase();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v46 - v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventModifiersGesturePhase<A>, a1, v12);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    if (*(_BYTE *)(v1 + 20) == 1)
    {
      v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
LABEL_33:
      Value = AGGraphGetValue();
      v42 = v16(v9, Value, v5);
      v44 = MEMORY[0x1E0C80A78](v42, v43);
      *(&v46 - 2) = a1;
      *(&v46 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventModifiersGesturePhase<A>, a1, v44);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v46 - 4), v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v45);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    v17 = AGGraphGetValue();
    v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v16(v14, v17, v5);
    if (swift_getEnumCaseMultiPayload() > 2)
      goto LABEL_33;
    v47 = v16;
    v48 = *(void (**)(char *, uint64_t))(v6 + 8);
    v48(v14, v5);
    type metadata accessor for EventModifiersGesture(0, v4, v18, v19);
    v51 = *(_QWORD *)AGGraphGetValue();
    type metadata accessor for [EventID : EventType]();
    v20 = *(_QWORD *)AGGraphGetValue();
    v21 = *(_QWORD *)(v20 + 64);
    v49 = v20 + 64;
    v22 = 1 << *(_BYTE *)(v20 + 32);
    v23 = -1;
    if (v22 < 64)
      v23 = ~(-1 << v22);
    v24 = v23 & v21;
    v50 = (unint64_t)(v22 + 63) >> 6;
    v52 = v20;
    swift_bridgeObjectRetain();
    v25 = 0;
    if (!v24)
      goto LABEL_9;
LABEL_8:
    v26 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    for (i = v26 | (v25 << 6); ; i = __clz(__rbit64(v29)) + (v25 << 6))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v52 + 56) + 40 * i, (uint64_t)v62);
      outlined init with take of OptionalBinaryInteger(v62, (uint64_t)v59);
      v31 = v60;
      v32 = v61;
      __swift_project_boxed_opaque_existential_1(v59, v60);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v32 + 8))(v56, v31, v32);
      if (LOBYTE(v56[0]))
        goto LABEL_31;
      outlined init with copy of TableColumnList((uint64_t)v59, (uint64_t)v55);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
      type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for ModifiersEventType);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      outlined init with take of OptionalBinaryInteger(v53, (uint64_t)v56);
      v33 = v57;
      v34 = v58;
      __swift_project_boxed_opaque_existential_1(v56, v57);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
      v36 = v51 & ~v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      if (v36)
        goto LABEL_31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
      if (v24)
        goto LABEL_8;
LABEL_9:
      v28 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v28 >= v50)
        goto LABEL_32;
      v29 = *(_QWORD *)(v49 + 8 * v28);
      ++v25;
      if (!v29)
      {
        v25 = v28 + 1;
        if (v28 + 1 >= v50)
          goto LABEL_32;
        v29 = *(_QWORD *)(v49 + 8 * v25);
        if (!v29)
        {
          v25 = v28 + 2;
          if (v28 + 2 >= v50)
            goto LABEL_32;
          v29 = *(_QWORD *)(v49 + 8 * v25);
          if (!v29)
          {
            v25 = v28 + 3;
            if (v28 + 3 >= v50)
              goto LABEL_32;
            v29 = *(_QWORD *)(v49 + 8 * v25);
            if (!v29)
            {
              v30 = v28 + 4;
              if (v30 >= v50)
              {
LABEL_32:
                swift_release();
                *(_BYTE *)(v2 + 20) = 1;
                v16 = v47;
                goto LABEL_33;
              }
              v29 = *(_QWORD *)(v49 + 8 * v30);
              if (!v29)
              {
                while (1)
                {
                  v25 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    break;
                  if (v25 >= v50)
                    goto LABEL_32;
                  v29 = *(_QWORD *)(v49 + 8 * v25);
                  ++v30;
                  if (v29)
                    goto LABEL_24;
                }
LABEL_36:
                __break(1u);
              }
              v25 = v30;
            }
          }
        }
      }
LABEL_24:
      v24 = (v29 - 1) & v29;
    }
    v54 = 0;
    memset(v53, 0, sizeof(v53));
    outlined destroy of ModifiersEventType?((uint64_t)v53);
LABEL_31:
    v37 = swift_storeEnumTagMultiPayload();
    v39 = MEMORY[0x1E0C80A78](v37, v38);
    *(&v46 - 2) = a1;
    *(&v46 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventModifiersGesturePhase<A>, a1, v39);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v46 - 4), v5, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v40);
    v48(v9, v5);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance EventModifiersGesturePhase<A>()
{
  return SequencePhase.resetSeed.getter();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance EventModifiersGesturePhase<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void Gesture.modifiers(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static _ModifiersGesture._makeGesture(gesture:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void base witness table accessor for Gesture in _ModifiersGesture<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for Gesture.body.getter in conformance _ModifiersGesture<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ModifiersGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t type metadata completion function for _ModifiersGesture()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for EventModifiersGesture(255, AssociatedTypeWitness, v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventModifiersGesture<A>, v5);
  result = type metadata accessor for ModifierGesture();
  if (v4 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _ModifiersGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _ModifiersGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ModifiersGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1878BD41C + 4 * byte_187C688A0[v8]))();
}

void storeEnumTagSinglePayload for _ModifiersGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1878BD55C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1878BD564(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878BD56CLL);
}

void sub_1878BD588()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1878BD590()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1878BD598(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x1878BD5A0);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for _ModifiersGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ModifiersGesture);
}

uint64_t type metadata accessor for EventModifiersGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventModifiersGesture);
}

uint64_t type metadata accessor for EventModifiersGesturePhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventModifiersGesturePhase);
}

void base witness table accessor for StatefulRule in EventModifiersGesturePhase<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in EventModifiersGesturePhase<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of ModifiersEventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiersEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ModifiersEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiersEventType?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for ModifiersEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiersEventType?);
  }
}

uint64_t closure #1 in StatefulRule.value.setterpartial apply()
{
  return partial apply for closure #1 in StatefulRule.value.setter();
}

uint64_t closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v22;

  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = UISceneSession.matchesSceneID(_:)(v16, v18, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, a6);
  if ((v19 & 1) != 0)
    v20 = UISceneSession.matchesPresentationValue<A>(_:)(v15, a6, a7, a8, a9);
  else
    v20 = 0;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a6);
  return v20 & 1;
}

uint64_t UISceneSession.matchesSceneID(_:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v7 = objc_msgSend(v3, sel_userInfo);
  if (!v7)
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_13;
  }
  v8 = v7;
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v9 + 16)
    || (v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000187BD33F0), (v11 & 1) == 0))
  {
    v21 = 0u;
    v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_13:
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  if (swift_dynamicCast())
  {
    v13 = v19;
    v12 = v20;
    if ((a3 & 1) != 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v13 = 0;
  v12 = 0;
  if ((a3 & 1) != 0)
  {
LABEL_7:
    *(_QWORD *)&v21 = _typeName(_:qualified:)();
    *((_QWORD *)&v21 + 1) = v14;
    v15._countAndFlagsBits = 45;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    a2 = *((_QWORD *)&v21 + 1);
    a1 = v21;
    if (v12)
      goto LABEL_8;
LABEL_16:
    v17 = 0;
    goto LABEL_19;
  }
LABEL_15:
  outlined copy of SceneID(a1, a2, 0);
  if (!v12)
    goto LABEL_16;
LABEL_8:
  if (v13 == a1 && v12 == a2)
    v17 = 1;
  else
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  return v17 & 1;
}

uint64_t UISceneSession.matchesPresentationValue<A>(_:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  int v56;
  __int128 v57;
  __int128 v58;

  v6 = v5;
  v50 = a5;
  v51 = a1;
  v54 = a3;
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v47 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v53 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v52 = (char *)&v47 - v18;
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v47 - v22;
  v24 = objc_msgSend(v6, sel_userInfo, v21);
  if (!v24)
  {
    v57 = 0u;
    v58 = 0u;
    goto LABEL_13;
  }
  v25 = v24;
  v49 = v12;
  v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v26 + 16))
    goto LABEL_10;
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x8000000187BD8250);
  if ((v28 & 1) == 0)
    goto LABEL_10;
  outlined init with copy of Any(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v57);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v58 + 1))
  {
LABEL_13:
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v57, (unint64_t *)&lazy cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_14;
  v29 = *((_QWORD *)&v55 + 1);
  v48 = v55;
  v30 = objc_msgSend(v6, sel_userInfo);
  if (!v30)
  {
LABEL_10:
    v57 = 0u;
    v58 = 0u;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v31 = v30;
  v32 = v29;
  v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v33 + 16)
    && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x8000000187BD8230), (v35 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v33 + 56) + 32 * v34, (uint64_t)&v57);
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v58 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v38 = v55;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v54 = *((_QWORD *)&v38 + 1);
    v39 = v49;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v11, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v23, v11, a2);
    makeStableTypeData(_:)();
    v55 = v57;
    v56 = v58;
    v40 = StrongHash.description.getter();
    if (v40 == v48 && v41 == v32)
    {
      swift_bridgeObjectRelease_n();
      v42 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v43 = v52;
      v42(v52, v23, a2);
      v42(v53, v51, a2);
    }
    else
    {
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v43 = v52;
      v45(v52, v23, a2);
      v45(v53, v51, a2);
      v36 = 0;
      if ((v44 & 1) == 0)
      {
LABEL_26:
        swift_release();
        outlined consume of Data._Representation(v38, v54);
        v46 = *(void (**)(char *, uint64_t))(v49 + 8);
        v46(*((char **)&v38 + 1), a2);
        v46(v43, a2);
        v46(v23, a2);
        return v36 & 1;
      }
    }
    v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
LABEL_14:
  v36 = 0;
  return v36 & 1;
}

void one-time initialization function for userActivityTypeOpenWindowByID()
{
  id v0;
  id v1;
  unint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(17);
  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;

  }
  else
  {
    v4 = (void *)0x8000000187BD8FE0;
    v2 = 0xD000000000000011;
  }
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E69576E65706F2ELL;
  v6._object = (void *)0xEF44497942776F64;
  String.append(_:)(v6);
  static NSUserActivity.userActivityTypeOpenWindowByID = 0;
  unk_1EDEFF840 = 0xE000000000000000;
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v5 = a1;
  v6 = a4 & 1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
    lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v5 = v25;
    v22 = v26;
    v7 = v27;
    v8 = v28;
    v9 = v29;
  }
  else
  {
    v8 = 0;
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v22 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    v7 = v11;
  }
  v21 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_35;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v17 = v24;
    swift_unknownObjectRelease();
    v16 = v8;
    v14 = v9;
    if (!v24)
      goto LABEL_35;
LABEL_33:
    if ((UISceneSession.matchesSceneID(_:)(a2, a3, v6) & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {

    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_32:
    v17 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    if (!v17)
      goto LABEL_35;
    goto LABEL_33;
  }
  v18 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v18 >= v21)
      goto LABEL_35;
    v19 = *(_QWORD *)(v22 + 8 * v18);
    v16 = v8 + 1;
    if (!v19)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v21)
        goto LABEL_35;
      v19 = *(_QWORD *)(v22 + 8 * v16);
      if (!v19)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v21)
          goto LABEL_35;
        v19 = *(_QWORD *)(v22 + 8 * v16);
        if (!v19)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v21)
            goto LABEL_35;
          v19 = *(_QWORD *)(v22 + 8 * v16);
          if (!v19)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v21)
              goto LABEL_35;
            v19 = *(_QWORD *)(v22 + 8 * v16);
            if (!v19)
            {
              v20 = v8 + 6;
              while (v21 != v20)
              {
                v19 = *(_QWORD *)(v22 + 8 * v20++);
                if (v19)
                {
                  v16 = v20 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

id specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  Class v18;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  _BYTE v23[40];

  if (one-time initialization token for userActivityTypeOpenWindowByID != -1)
    swift_once();
  v6 = static NSUserActivity.userActivityTypeOpenWindowByID;
  v7 = unk_1EDEFF840;
  v8 = objc_allocWithZone(MEMORY[0x1E0CB3B10]);
  swift_bridgeObjectRetain();
  v9 = (void *)MEMORY[0x18D75CC88](v6, v7);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initWithActivityType_, v9);

  *(_QWORD *)&v21 = 0xD000000000000019;
  *((_QWORD *)&v21 + 1) = 0x8000000187BD33F0;
  v11 = MEMORY[0x1E0DEA968];
  AnyHashable.init<A>(_:)();
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)&v21 = _typeName(_:qualified:)();
    *((_QWORD *)&v21 + 1) = v12;
    v13._countAndFlagsBits = 45;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    LOBYTE(v20[0]) = a2;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    a2 = *((_QWORD *)&v21 + 1);
    a1 = v21;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v22 = v11;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a2;
  outlined init with take of Any(&v21, v20);
  v15 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, (uint64_t)v23, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v23);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setUserInfo_, isa, v15);

  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:));
  swift_arrayDestroy();
  v18 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setRequiredUserInfoKeys_, v18);

  objc_msgSend(v10, sel_setEligibleForHandoff_, 0);
  return v10;
}

id specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow<A>(id:value:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  id result;
  void *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  NSDictionary v14;
  void *v15;
  uint64_t v16;
  NSSet v17;
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;
  Swift::Int v21;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v8 = v7;
  v9 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:)(a1, a2, a3 & 1);
  AnyHashable.init<A>(_:)();
  v20 = MEMORY[0x1E0CB0338];
  *(_QWORD *)&v19 = v6;
  *((_QWORD *)&v19 + 1) = v8;
  outlined copy of Data._Representation(v6, v8);
  result = objc_msgSend(v9, sel_userInfo);
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v11 = result;
  v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with take of Any(&v19, v18);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&v21, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v21);
  if (v12)
  {
    v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.isa = 0;
  }
  objc_msgSend(v9, sel_setUserInfo_, v14.super.isa);

  result = objc_msgSend(v9, sel_requiredUserInfoKeys);
  if (!result)
    goto LABEL_11;
  v15 = result;
  v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&v19 = v16;
  specialized Set._Variant.insert(_:)(&v21, 0xD00000000000001CLL, 0x8000000187BD8230);
  swift_bridgeObjectRelease();
  if ((_QWORD)v19)
  {
    v17.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v17.super.isa = 0;
  }
  objc_msgSend(v9, sel_setRequiredUserInfoKeys_, v17.super.isa);
  outlined consume of Data._Representation(v6, v8);

  swift_release();
  return v9;
}

uint64_t specialized SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[8];
  char v23;
  uint64_t v24;

  v16 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v17 = objc_msgSend(v16, sel_openSessions);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
  lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
  v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v22[2] = a5;
  v22[3] = a6;
  v22[4] = a7;
  v22[5] = a8;
  v22[6] = a1;
  v22[7] = a2;
  v23 = a3 & 1;
  v24 = a4;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:), (uint64_t)v22, v18);
  v20 = v19;
  swift_bridgeObjectRelease();
  return v20;
}

void specialized SceneNavigationStrategy_Phone.handleSceneActivation<A>(item:value:activationBehavior:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[8];

  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 136);
  v16 = *(_BYTE *)(a1 + 144);
  v17 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow<A>(id:value:)(v14, v15, v16);
  if (v17)
  {
    v18 = v17;
    v19 = (void *)specialized SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(v14, v15, v16, a2, a5, a6, a7, a8);
    _StringGuts.grow(_:)(20);
    aBlock[6] = 0;
    aBlock[7] = 0xE000000000000000;
    v20._countAndFlagsBits = 0x27203A65707974;
    v20._object = (void *)0xE700000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x27203A6469202C27;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 39;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    aBlock[4] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
    aBlock[3] = &block_descriptor_67;
    v25 = _Block_copy(aBlock);
    objc_msgSend(v24, sel_requestSceneSessionActivation_userActivity_options_errorHandler_, v19, v18, 0, v25);
    _Block_release(v25);

    if (a3)
      a3(2);

    swift_bridgeObjectRelease();
  }
  else
  {
    static os_log_type_t.fault.getter();
    v26 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_187BF9830;
    v28 = _typeName(_:qualified:)();
    v30 = v29;
    *(_QWORD *)(v27 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v30;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    if (a3)
      a3(0);
  }
}

void specialized SceneNavigationStrategy_Phone.openWindow<A>(presenting:withBehavior:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  id v26;
  uint64_t v27;
  _OWORD __src[17];
  uint64_t __dst[35];

  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v11 = objc_msgSend(v10, sel_supportsMultipleScenes);

  if (!v11)
  {
    static os_log_type_t.fault.getter();
    v26 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (!static AppGraph.shared)
  {
    memset(__src, 0, sizeof(__src));
    goto LABEL_8;
  }
  swift_retain();
  static Update.ensure<A>(_:)();
  SceneList.windowGroup(presenting:)(a2, v27, __src);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)&__src[16])
  {
LABEL_8:
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    v17 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
    v19 = _typeName(_:qualified:)();
    v21 = v20;
    *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  memcpy(__dst, __src, 0x110uLL);
  outlined init with copy of SceneList.Item.Value(__dst, (uint64_t)__src);
  if (BYTE9(__src[7]))
  {
    static os_log_type_t.fault.getter();
    v12 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
    v14 = _typeName(_:qualified:)();
    v16 = v15;
    *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item((uint64_t)__dst);
    outlined destroy of SceneList.Item.Value((uint64_t)__src);
  }
  else
  {
    v22 = *((_QWORD *)&__src[0] + 1);
    v23 = __src[1];
    v24 = *(_QWORD *)&__src[2];
    v25 = __src[3];
    swift_release();
    outlined consume of Text?(v22, v23, SBYTE8(v23), v24);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
    specialized SceneNavigationStrategy_Phone.handleSceneActivation<A>(item:value:activationBehavior:completion:)((uint64_t)__dst, a1, 0, 0, (uint64_t)a2, a3, a4, a5);
    outlined destroy of SceneList.Item((uint64_t)__dst);
  }
}

uint64_t specialized SceneNavigationStrategy_Phone.requestNewScene(item:activationBehavior:completion:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  _QWORD v12[2];
  void (*v13)(uint64_t, void *);
  void *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_BYTE *)(a1 + 144);
  v6 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:)(v3, v4, v5);
  v17 = 0;
  v18 = 0xE000000000000000;
  v7._countAndFlagsBits = 0x27203A6469;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  LOBYTE(v13) = v5;
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 39;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication, v3, v4, v13);
  v15 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v16 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
  v14 = &block_descriptor_7_0;
  v10 = _Block_copy(v12);
  objc_msgSend(v9, sel_requestSceneSessionActivation_userActivity_options_errorHandler_, 0, v6, 0, v10);
  _Block_release(v10);

  if (a2)
    a2(2);

  return swift_bridgeObjectRelease();
}

void specialized SceneNavigationStrategy_Phone.openWindow(id:withBehavior:)(uint64_t a1, uint64_t a2)
{
  id v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  char v13;
  char v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _BYTE v26[128];
  uint64_t v27;
  uint64_t v28;
  _QWORD __src[35];
  _QWORD __dst[34];
  uint64_t v31[36];

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v5 = objc_msgSend(v4, sel_supportsMultipleScenes);

  if (!v5)
  {
    static os_log_type_t.fault.getter();
    v25 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (!static AppGraph.shared)
  {
    memset(__dst, 0, sizeof(__dst));
LABEL_29:
    outlined destroy of AccessibilityValueStorage?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    v18 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v19 + 32) = a1;
    *(_QWORD *)(v19 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  static Update.ensure<A>(_:)();
  v6 = *(_QWORD *)(__src[0] + 16);
  if (v6)
  {
    v7 = __src[0] + 32;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of SceneList.Item(v7, (uint64_t)__src);
      v8 = __src[17];
      if ((__src[18] & 1) != 0)
      {
        v27 = _typeName(_:qualified:)();
        v28 = v9;
        v10._countAndFlagsBits = 45;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        v26[0] = v8;
        v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        if (v27 == a1 && v28 == a2)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)&v27);
LABEL_19:
          outlined init with copy of SceneList.Item.Value(&v27, (uint64_t)v26);
          v15 = v26[121];
          outlined destroy of SceneList.Item.Value((uint64_t)v26);
          outlined destroy of SceneList.Item((uint64_t)&v27);
          if (!v15)
          {
            swift_bridgeObjectRelease();
            memcpy(__dst, __src, sizeof(__dst));
            goto LABEL_26;
          }
          goto LABEL_6;
        }
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)&v27);
        if ((v14 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        if (__src[16] == a1 && __src[17] == a2)
          goto LABEL_17;
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)&v27);
        if ((v13 & 1) != 0)
          goto LABEL_19;
      }
      outlined destroy of SceneList.Item((uint64_t)&v27);
LABEL_6:
      outlined destroy of SceneList.Item((uint64_t)__src);
      v7 += 272;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_25:
  memset(__dst, 0, sizeof(__dst));
LABEL_26:
  swift_release();
  swift_bridgeObjectRelease_n();
  if (!__dst[32])
    goto LABEL_29;
  memcpy(v31, __dst, 0x110uLL);
  outlined init with copy of SceneList.Item.Value(v31, (uint64_t)__dst);
  if (BYTE1(__dst[15]))
  {
    static os_log_type_t.fault.getter();
    v16 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v17 + 32) = a1;
    *(_QWORD *)(v17 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item((uint64_t)v31);
    outlined destroy of SceneList.Item.Value((uint64_t)__dst);
  }
  else
  {
    v20 = __dst[1];
    v21 = __dst[2];
    v22 = __dst[3];
    v23 = __dst[4];
    v24 = __dst[6];
    swift_release();
    outlined consume of Text?(v20, v21, v22, v23);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v24);
    specialized SceneNavigationStrategy_Phone.requestNewScene(item:activationBehavior:completion:)((uint64_t)v31, 0);
    outlined destroy of SceneList.Item((uint64_t)v31);
  }
}

void specialized SceneNavigationStrategy_Phone.openWindow<A>(id:presenting:withBehavior:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  id v33;
  uint64_t v34;
  _OWORD __src[17];
  uint64_t __dst[35];

  v14 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v15 = objc_msgSend(v14, sel_supportsMultipleScenes);

  if (!v15)
  {
    static os_log_type_t.fault.getter();
    v33 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (!static AppGraph.shared)
  {
    memset(__src, 0, sizeof(__src));
    goto LABEL_8;
  }
  swift_retain();
  static Update.ensure<A>(_:)();
  SceneList.windowGroup<A>(id:presenting:)(a1, a2, a4, v34, __src);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)&__src[16])
  {
LABEL_8:
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BF9820;
    v25 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEA968];
    v26 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v24 + 64) = v26;
    *(_QWORD *)(v24 + 32) = a1;
    *(_QWORD *)(v24 + 40) = a2;
    swift_bridgeObjectRetain();
    v27 = _typeName(_:qualified:)();
    *(_QWORD *)(v24 + 96) = v25;
    *(_QWORD *)(v24 + 104) = v26;
    *(_QWORD *)(v24 + 72) = v27;
    *(_QWORD *)(v24 + 80) = v28;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  memcpy(__dst, __src, 0x110uLL);
  outlined init with copy of SceneList.Item.Value(__dst, (uint64_t)__src);
  if (BYTE9(__src[7]))
  {
    static os_log_type_t.fault.getter();
    v16 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_187BF9820;
    v18 = _typeName(_:qualified:)();
    v20 = v19;
    v21 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v20;
    *(_QWORD *)(v17 + 96) = v21;
    *(_QWORD *)(v17 + 104) = v22;
    *(_QWORD *)(v17 + 64) = v22;
    *(_QWORD *)(v17 + 72) = a1;
    *(_QWORD *)(v17 + 80) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item((uint64_t)__dst);
    outlined destroy of SceneList.Item.Value((uint64_t)__src);
  }
  else
  {
    v29 = *((_QWORD *)&__src[0] + 1);
    v30 = __src[1];
    v31 = *(_QWORD *)&__src[2];
    v32 = __src[3];
    swift_release();
    outlined consume of Text?(v29, v30, SBYTE8(v30), v31);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
    specialized SceneNavigationStrategy_Phone.handleSceneActivation<A>(item:value:activationBehavior:completion:)((uint64_t)__dst, a3, 0, 0, a4, a5, a6, a7);
    outlined destroy of SceneList.Item((uint64_t)__dst);
  }
}

uint64_t specialized SceneNavigationStrategy_Phone.handleSceneDestruction(id:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_sharedApplication);
  v8 = objc_msgSend(v6, sel_sharedApplication);
  v9 = objc_msgSend(v8, sel_openSessions);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
  lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v9) = a3 & 1;
  outlined copy of SceneID(a1, a2, a3 & 1);
  specialized Sequence.filter(_:)(v10, a1, a2, a3 & 1);
  v12 = v11;
  outlined consume of SceneID(a1, a2, (char)v9);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = objc_msgSend(v7, sel_openSessions);
  v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v15 & 0xC000000000000001) != 0)
    v16 = __CocoaSet.count.getter();
  else
    v16 = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease();
  specialized BidirectionalCollection.dropLast(_:)(v13 == v16, v12, &lazy cache variable for type metadata for UISceneSession);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  result = swift_bridgeObjectRelease();
  v24 = (v22 >> 1) - v20;
  if (v22 >> 1 == v20)
    goto LABEL_10;
  if ((uint64_t)(v22 >> 1) > v20)
  {
    v25 = (uint64_t *)(v18 + 8 * v20);
    do
    {
      v26 = *v25++;
      objc_msgSend(v7, sel_requestSceneSessionDestruction_options_errorHandler_, v26, 0, 0);
      --v24;
    }
    while (v24);
LABEL_10:

    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

void specialized SceneNavigationStrategy_Phone.dismissWindow(id:)(uint64_t a1, uint64_t a2)
{
  id v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD __src[35];
  _QWORD __dst[34];
  uint64_t v30[36];

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v5 = objc_msgSend(v4, sel_supportsMultipleScenes);

  if (!v5)
  {
    static os_log_type_t.fault.getter();
    v25 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (!static AppGraph.shared)
  {
    memset(__dst, 0, sizeof(__dst));
LABEL_26:
    outlined destroy of AccessibilityValueStorage?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    v15 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v16 + 32) = a1;
    *(_QWORD *)(v16 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  static Update.ensure<A>(_:)();
  v6 = *(_QWORD *)(__src[0] + 16);
  if (!v6)
  {
    swift_bridgeObjectRetain();
LABEL_21:
    memset(__dst, 0, sizeof(__dst));
    goto LABEL_23;
  }
  v7 = __src[0] + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of SceneList.Item(v7, (uint64_t)__src);
    if ((__src[18] & 1) != 0)
      break;
    v12 = __src[16] == a1 && __src[17] == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_22;
LABEL_6:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v7 += 272;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  v26 = _typeName(_:qualified:)();
  v27 = v9;
  v10._countAndFlagsBits = 45;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  if (v26 != a1 || v27 != a2)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_22;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease_n();
  if (!__dst[32])
    goto LABEL_26;
  memcpy(v30, __dst, 0x110uLL);
  outlined init with copy of SceneList.Item.Value(v30, (uint64_t)__dst);
  if (BYTE1(__dst[15]))
  {
    static os_log_type_t.fault.getter();
    v13 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v14 + 32) = a1;
    *(_QWORD *)(v14 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item((uint64_t)v30);
    outlined destroy of SceneList.Item.Value((uint64_t)__dst);
  }
  else
  {
    v17 = __dst[1];
    v18 = __dst[2];
    v19 = __dst[3];
    v20 = __dst[4];
    v21 = __dst[6];
    swift_release();
    outlined consume of Text?(v17, v18, v19, v20);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
    v22 = v30[16];
    v23 = v30[17];
    v24 = v30[18];
    outlined copy of SceneID(v30[16], v30[17], v30[18]);
    specialized SceneNavigationStrategy_Phone.handleSceneDestruction(id:)(v22, v23, v24);
    outlined consume of SceneID(v22, v23, v24);
    outlined destroy of SceneList.Item((uint64_t)v30);
  }
}

void specialized SceneNavigationStrategy_Phone.handleSceneDestruction<A>(id:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v15 = a3 & 1;
  v21 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v16 = (void *)specialized SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(a1, a2, v15, a4, a5, a6, a7, a8);
  v17 = v21;
  if (v16)
  {
    v18 = objc_msgSend(v21, sel_openSessions);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISceneSession);
    lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
    v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0)
      v20 = __CocoaSet.count.getter();
    else
      v20 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRelease();
    if (v20 >= 2)
      objc_msgSend(v21, sel_requestSceneSessionDestruction_options_errorHandler_, v16, 0, 0);

    v17 = v21;
  }

}

void specialized SceneNavigationStrategy_Phone.dismissWindow<A>(value:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  _OWORD __src[17];
  uint64_t __dst[35];

  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v11 = objc_msgSend(v10, sel_supportsMultipleScenes);

  if (!v11)
  {
    static os_log_type_t.fault.getter();
    v29 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (!static AppGraph.shared)
  {
    memset(__src, 0, sizeof(__src));
    goto LABEL_8;
  }
  swift_retain();
  static Update.ensure<A>(_:)();
  SceneList.windowGroup(presenting:)(a2, v30, __src);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)&__src[16])
  {
LABEL_8:
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    v17 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
    v19 = _typeName(_:qualified:)();
    v21 = v20;
    *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  memcpy(__dst, __src, 0x110uLL);
  outlined init with copy of SceneList.Item.Value(__dst, (uint64_t)__src);
  if (BYTE9(__src[7]))
  {
    static os_log_type_t.fault.getter();
    v12 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
    v14 = _typeName(_:qualified:)();
    v16 = v15;
    *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item((uint64_t)__dst);
    outlined destroy of SceneList.Item.Value((uint64_t)__src);
  }
  else
  {
    v22 = *((_QWORD *)&__src[0] + 1);
    v23 = __src[1];
    v24 = *(_QWORD *)&__src[2];
    v25 = __src[3];
    swift_release();
    outlined consume of Text?(v22, v23, SBYTE8(v23), v24);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
    v26 = __dst[16];
    v27 = __dst[17];
    v28 = __dst[18];
    outlined copy of SceneID(__dst[16], __dst[17], __dst[18]);
    specialized SceneNavigationStrategy_Phone.handleSceneDestruction<A>(id:value:)(v26, v27, v28, a1, (uint64_t)a2, a3, a4, a5);
    outlined consume of SceneID(v26, v27, v28);
    outlined destroy of SceneList.Item((uint64_t)__dst);
  }
}

void specialized SceneNavigationStrategy_Phone.dismissWindow<A>(id:value:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  _OWORD __src[17];
  uint64_t __dst[35];

  v14 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v15 = objc_msgSend(v14, sel_supportsMultipleScenes);

  if (!v15)
  {
    static os_log_type_t.fault.getter();
    v36 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  if (!static AppGraph.shared)
  {
    memset(__src, 0, sizeof(__src));
    goto LABEL_8;
  }
  swift_retain();
  static Update.ensure<A>(_:)();
  SceneList.windowGroup<A>(id:presenting:)(a1, a2, a4, v37, __src);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)&__src[16])
  {
LABEL_8:
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_187BF9820;
    v25 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEA968];
    v26 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v24 + 64) = v26;
    *(_QWORD *)(v24 + 32) = a1;
    *(_QWORD *)(v24 + 40) = a2;
    swift_bridgeObjectRetain();
    v27 = _typeName(_:qualified:)();
    *(_QWORD *)(v24 + 96) = v25;
    *(_QWORD *)(v24 + 104) = v26;
    *(_QWORD *)(v24 + 72) = v27;
    *(_QWORD *)(v24 + 80) = v28;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  memcpy(__dst, __src, 0x110uLL);
  outlined init with copy of SceneList.Item.Value(__dst, (uint64_t)__src);
  if (BYTE9(__src[7]))
  {
    static os_log_type_t.fault.getter();
    v16 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_187BF9820;
    v18 = _typeName(_:qualified:)();
    v20 = v19;
    v21 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v20;
    *(_QWORD *)(v17 + 96) = v21;
    *(_QWORD *)(v17 + 104) = v22;
    *(_QWORD *)(v17 + 64) = v22;
    *(_QWORD *)(v17 + 72) = a1;
    *(_QWORD *)(v17 + 80) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of SceneList.Item((uint64_t)__dst);
    outlined destroy of SceneList.Item.Value((uint64_t)__src);
  }
  else
  {
    v29 = *((_QWORD *)&__src[0] + 1);
    v30 = __src[1];
    v31 = *(_QWORD *)&__src[2];
    v32 = __src[3];
    swift_release();
    outlined consume of Text?(v29, v30, SBYTE8(v30), v31);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
    v33 = __dst[16];
    v34 = __dst[17];
    v35 = __dst[18];
    outlined copy of SceneID(__dst[16], __dst[17], __dst[18]);
    specialized SceneNavigationStrategy_Phone.handleSceneDestruction<A>(id:value:)(v33, v34, v35, a3, a4, a5, a6, a7);
    outlined consume of SceneID(v33, v34, v35);
    outlined destroy of SceneList.Item((uint64_t)__dst);
  }
}

unint64_t lazy protocol witness table accessor for type UISceneSession and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UISceneSession and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UISceneSession and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UISceneSession);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UISceneSession and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40)) & 1;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t a1, unint64_t a2)
{
  return specialized BidirectionalCollection.dropLast(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v8 = -v7;
    if (!__OFSUB__(0, v7))
      goto LABEL_4;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v4 = a3;
  v3 = a2;
  v5 = result;
  v6 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_23;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = -v7;
  if (__OFSUB__(0, v7))
    goto LABEL_25;
LABEL_4:
  v9 = -v5;
  if (v8 > 0 || v8 <= v9)
  {
    v10 = v7 - v5;
    if (__OFADD__(v7, v9))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v10 < 0)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v10 = 0;
    if (!v6)
    {
LABEL_7:
      v11 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v12 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
LABEL_13:
  if (v11 < v10)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v3 & 0xC000000000000001) != 0 && v10)
  {
    type metadata accessor for NSObject(0, v4);
    v13 = 0;
    do
    {
      v14 = v13 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v13);
      v13 = v14;
    }
    while (v10 != v14);
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v15;
}

void __swiftcall CardButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CardButtonStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in CardButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CardButtonStyle()
{
  return &type metadata for CardButtonStyle;
}

ValueMetadata *type metadata accessor for NavigationCommonModifier()
{
  return &type metadata for NavigationCommonModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationCommonModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.navigationColumn(searchAdjustment:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for NavigationColumnModifier, a3);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationColumnModifier@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *v1;
  KeyPath = swift_getKeyPath();
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  result = static Alignment.center.getter();
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v3;
  return result;
}

uint64_t View.navigationColumn(isSearchEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v5;

  if ((a1 & 1) != 0)
    v3 = 2;
  else
    v3 = 1;
  v5 = v3;
  return MEMORY[0x18D75B4AC](&v5, a2, &type metadata for NavigationColumnModifier, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationColumnEnvironmentTransform(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationColumnEnvironmentTransform(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationColumnEnvironmentTransform()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance NavigationColumnEnvironmentTransform(uint64_t a1, uint64_t a2)
{
  char *Value;

  specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(a2);
  Value = (char *)AGGraphGetValue();
  return specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(*Value, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationColumnEnvironmentTransform()
{
  lazy protocol witness table accessor for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

ValueMetadata *type metadata accessor for NavigationCommonTransformEnvironment()
{
  return &type metadata for NavigationCommonTransformEnvironment;
}

ValueMetadata *type metadata accessor for NavigationColumnModifier()
{
  return &type metadata for NavigationColumnModifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>, (uint64_t)&protocol witness table for ToolbarScopeModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>);
    type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<NavigationCommonModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier, (uint64_t)&type metadata for NavigationCommonModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for NavigationCommonTransformEnvironment);
    v3[1] = &protocol witness table for IsSearchImplementedModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, NavigationCommonTransformEnvironment>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for UpdateEnvironmentToAllowedBehaviors);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<NavigationCommonModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier, (uint64_t)&type metadata for NavigationCommonModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationCommonModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationColumnModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationCommonTransformEnvironment(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationCommonTransformEnvironment(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationCommonTransformEnvironment()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance NavigationCommonTransformEnvironment(uint64_t a1, uint64_t a2)
{
  return specialized static NavigationCommonTransformEnvironment.makeEnvironment(environment:)(a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationCommonTransformEnvironment()
{
  lazy protocol witness table accessor for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in NavigationCommonTransformEnvironment()
{
  return &protocol witness table for NavigationCommonTransformEnvironment;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationCommonTransformEnvironment()
{
  return &protocol witness table for NavigationCommonTransformEnvironment;
}

uint64_t SearchOverlayView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 32);
  outlined copy of Environment<Bool>.Content(v3, v4);
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v5 != 7 && (*(_BYTE *)v1 & 1) != 0)
  {
    v6 = 0;
    if ((*(_BYTE *)(v1 + 1) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v6 = 1;
  if ((*(_BYTE *)(v1 + 1) & 1) != 0)
  {
LABEL_4:
    outlined copy of Environment<Bool>.Content(v3, v4);
    specialized Environment.wrappedValue.getter(v3, v4);
    outlined consume of Environment<Bool>.Content(v3, v4);
  }
LABEL_5:
  *(_BYTE *)a1 = v6;
  *(_OWORD *)(a1 + 8) = xmmword_187BF9840;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  outlined copy of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return outlined consume of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchOverlayView()
{
  type metadata accessor for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)();
  return static TupleView._viewListCount(inputs:)();
}

uint64_t specialized static NavigationCommonTransformEnvironment.makeEnvironment(environment:)(uint64_t a1)
{
  uint64_t v2;
  _OWORD *inited;

  v2 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement.Role>();
  inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_187BF9820;
  inited[3] = 0u;
  inited[4] = 0u;
  inited[2] = 0u;
  inited[5] = 0u;
  inited[6] = xmmword_187C304D0;
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment;
  if (!lazy protocol witness table cache variable for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationCommonTransformEnvironment, &type metadata for NavigationCommonTransformEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationCommonTransformEnvironment and conformance NavigationCommonTransformEnvironment);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1878C16E8 + 4 * byte_187C68AF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1878C171C + 4 * asc_187C68AF0[v4]))();
}

uint64_t sub_1878C171C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878C1724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878C172CLL);
  return result;
}

uint64_t sub_1878C1738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878C1740);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1878C1744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878C174C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnEnvironmentTransform()
{
  return &type metadata for NavigationColumnEnvironmentTransform;
}

uint64_t destroy for SearchOverlayView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for SearchOverlayView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = a2;
  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(v2 + 40);
  LOBYTE(v2) = *(_BYTE *)(v2 + 48);
  outlined copy of Environment<Bool>.Content(v8, v2);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v2;
  return a1;
}

uint64_t assignWithCopy for SearchOverlayView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(v2 + 40);
  LOBYTE(v2) = *(_BYTE *)(v2 + 48);
  outlined copy of Environment<Bool>.Content(v12, v2);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 48) = v2;
  outlined consume of Environment<Bool>.Content(v13, v14);
  return a1;
}

uint64_t assignWithTake for SearchOverlayView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchOverlayView(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[49])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchOverlayView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchOverlayView()
{
  return &type metadata for SearchOverlayView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for NavigationColumnEnvironmentTransform;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>, NavigationColumnEnvironmentTransform> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>();
    type metadata accessor for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<NavigationColumnModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier, (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate;
  if (!lazy protocol witness table cache variable for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSearchAllowedPredicate, &type metadata for IsSearchAllowedPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<SearchOverlayView>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView, (uint64_t)&type metadata for SearchOverlayView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
    lazy protocol witness table accessor for type IsSearchAllowedPredicate and conformance IsSearchAllowedPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>, StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>, (uint64_t)&protocol witness table for SearchDisabledAdjustmentModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationColumnModifier>, StaticIf<IsSearchAllowedPredicate, SearchDisabledAdjustmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<NavigationColumnModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier, (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationColumnModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsSearchAllowed;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    IsSearchAllowed = type metadata accessor for StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsSearchAllowed, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsSearchAllowedPredicate, _OverlayModifier<SearchOverlayView>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>;
  if (!lazy protocol witness table cache variable for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<SearchOverlayView>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView, (uint64_t)&type metadata for SearchOverlayView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayModifier<SearchOverlayView> and conformance _OverlayModifier<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SearchOverlayView()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in NavigationColumnEnvironmentTransform()
{
  return &protocol witness table for NavigationColumnEnvironmentTransform;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationColumnEnvironmentTransform()
{
  return &protocol witness table for NavigationColumnEnvironmentTransform;
}

unint64_t lazy protocol witness table accessor for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform;
  if (!lazy protocol witness table cache variable for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationColumnEnvironmentTransform, &type metadata for NavigationColumnEnvironmentTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationColumnEnvironmentTransform and conformance NavigationColumnEnvironmentTransform);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char v16;
  char v17;
  uint64_t result;

  if (a2 != 1)
  {
    v16 = a5 & 1;
    v17 = a7 & 1;
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(a4, v16);
    outlined copy of Environment<Bool>.Content(a6, v17);
    outlined copy of Environment<Bool>.Content(a8, a9 & 1);
    swift_retain();
    return outlined copy of Binding<NavigationSplitViewColumn>?(a12, a13);
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char v16;
  char v17;
  uint64_t result;

  if (a2 != 1)
  {
    v16 = a5 & 1;
    v17 = a7 & 1;
    swift_bridgeObjectRelease();
    outlined consume of Environment<Bool>.Content(a4, v16);
    outlined consume of Environment<Bool>.Content(a6, v17);
    outlined consume of Environment<Bool>.Content(a8, a9 & 1);
    swift_release();
    return outlined consume of Binding<NavigationSplitViewColumn>?(a12, a13);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!lazy cache variable for type metadata for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?))
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>, v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?));
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SearchFieldStyleModifier<ToolbarSearchFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle, (uint64_t)&type metadata for ToolbarSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SearchFieldStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>);
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    type metadata accessor for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>);
  }
}

void type metadata accessor for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>)
  {
    type metadata accessor for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>(255);
    v3 = type metadata accessor for ToolbarModifier(a1, MEMORY[0x1E0DEE9C0] + 8, v2, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>);
  }
}

void type metadata accessor for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>, (uint64_t)&type metadata for SearchFieldConfiguration.Scopes, (uint64_t)&protocol witness table for SearchFieldConfiguration.Scopes, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SearchScopeToolbarContent);
    v5 = type metadata accessor for TupleToolbarContent(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<EnvironmentValues.SearchField, SearchFieldStyleModifier<ToolbarSearchFieldStyle>>?, ModifiedContent<_UnaryViewAdaptor<EmptyView>, ToolbarModifier<(), TupleToolbarContent<SearchScopeToolbarContent<SearchFieldConfiguration.Scopes>>>>?)> and conformance TupleView<A>);
  }
  return result;
}

void View.shareConfiguration<A, B, C, D>(_:)(uint64_t a1)
{
  specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(a1, 0);
}

uint64_t sub_1878C23F4()
{
  uint64_t v1;

  View.preference<A>(key:value:)();
  return outlined retain of AnyShareConfiguration((uint64_t)&v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
}

unint64_t type metadata accessor for UIActivityItemsConfiguration()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIActivityItemsConfiguration;
  if (!lazy cache variable for type metadata for UIActivityItemsConfiguration)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIActivityItemsConfiguration);
  }
  return result;
}

uint64_t *outlined retain of AnyShareConfiguration?(uint64_t *a1, void (*a2)(void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  outlined copy of AnyShareConfiguration?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a2, a3);
  return a1;
}

uint64_t specialized ShareConfigurationBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t UIKitHoverGestureRecognizer._hoverEntered(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;

  v4 = 1;
  v2 = UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(a1, a2, &v4);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t @objc UIKitHoverGestureRecognizer._hoverEntered(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  id v7;
  id v8;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a4;
  v8 = a1;
  UIKitHoverGestureRecognizer._hoverEntered(_:with:)(v6, v7);

  return swift_bridgeObjectRelease();
}

uint64_t UIKitHoverGestureRecognizer._hoverCancelled(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;

  v4 = 3;
  v2 = UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(a1, a2, &v4);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t UIKitHoverGestureRecognizer._hoverExited(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;

  v4 = 2;
  v2 = UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(a1, a2, &v4);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t @objc UIKitHoverGestureRecognizer._hoverCancelled(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

uint64_t UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(uint64_t a1, void *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  Swift::UInt *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t result;
  int64_t v45;
  uint64_t v46;
  char v47;
  id v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v47 = *a3;
  v50 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = v52;
    v46 = v53;
    v4 = v54;
    v5 = v55;
    v6 = v56;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v46 = a1 + 56;
    v8 = ~v7;
    v9 = -v7;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v4 = v8;
    v5 = 0;
  }
  v45 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    if (a1 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_40;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v15 = v51;
      swift_unknownObjectRelease();
      v14 = v5;
      v12 = v6;
      if (!v51)
        goto LABEL_40;
    }
    else
    {
      if (v6)
      {
        v12 = (v6 - 1) & v6;
        v13 = __clz(__rbit64(v6)) | (v5 << 6);
        v14 = v5;
      }
      else
      {
        v16 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_43;
        if (v16 >= v45)
          goto LABEL_40;
        v17 = *(_QWORD *)(v46 + 8 * v16);
        v14 = v5 + 1;
        if (!v17)
        {
          v14 = v5 + 2;
          if (v5 + 2 >= v45)
            goto LABEL_40;
          v17 = *(_QWORD *)(v46 + 8 * v14);
          if (!v17)
          {
            v14 = v5 + 3;
            if (v5 + 3 >= v45)
              goto LABEL_40;
            v17 = *(_QWORD *)(v46 + 8 * v14);
            if (!v17)
            {
              v14 = v5 + 4;
              if (v5 + 4 >= v45)
                goto LABEL_40;
              v17 = *(_QWORD *)(v46 + 8 * v14);
              if (!v17)
              {
                v18 = v5 + 5;
                while (v45 != v18)
                {
                  v17 = *(_QWORD *)(v46 + 8 * v18++);
                  if (v17)
                  {
                    v14 = v18 - 1;
                    goto LABEL_29;
                  }
                }
LABEL_40:
                outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
                return (uint64_t)v50;
              }
            }
          }
        }
LABEL_29:
        v12 = (v17 - 1) & v17;
        v13 = __clz(__rbit64(v17)) + (v14 << 6);
      }
      v15 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v13);
      if (!v15)
        goto LABEL_40;
    }
    type metadata accessor for (UITouch, HoverEvent)();
    v20 = v19;
    v21 = v15;
    v22 = objc_msgSend(v49, sel_view);
    v23 = a2;
    objc_msgSend(v21, sel_locationInView_, 0);
    v25 = v24;
    v27 = v26;
    objc_msgSend(v21, sel_timestamp);
    v29 = v28;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = v50;
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v20, (Swift::UInt)v15);
    v33 = v50[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v50[3] >= v35)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v20, (Swift::UInt)v15);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_44;
      v32 = v37;
    }
    if ((v36 & 1) != 0)
    {
      v11 = v50[7] + 40 * v32;
      swift_release();
      *(_QWORD *)v11 = v29;
      *(_BYTE *)(v11 + 8) = v47;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = v25;
      *(_QWORD *)(v11 + 32) = v27;
    }
    else
    {
      v50[(v32 >> 6) + 8] |= 1 << v32;
      v39 = (Swift::UInt *)(v50[6] + 16 * v32);
      *v39 = v20;
      v39[1] = (Swift::UInt)v15;
      v40 = v50[7] + 40 * v32;
      *(_QWORD *)v40 = v29;
      *(_BYTE *)(v40 + 8) = v47;
      *(_QWORD *)(v40 + 16) = 0;
      *(_QWORD *)(v40 + 24) = v25;
      *(_QWORD *)(v40 + 32) = v27;
      v41 = v50[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_42;
      v50[2] = v43;
    }

    swift_bridgeObjectRelease();
    v5 = v14;
    v6 = v12;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t UIKitHoverGestureRecognizer.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  if (result != a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  v9 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  if (*(_QWORD *)(v8 + 64) == 8)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 16))(a3, &v9, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a3, 0, 1, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for EventBindingSource.attach(to:) in conformance UIKitHoverGestureRecognizer()
{
  return swift_weakAssign();
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer;
  if (!lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer)
  {
    v1 = type metadata accessor for UIKitHoverGestureRecognizer();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitHoverGestureRecognizer, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer);
  }
  return result;
}

void type metadata accessor for (UITouch, HoverEvent)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UITouch, HoverEvent))
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UITouch, HoverEvent));
  }
}

uint64_t Scene.commandsRemoved()(uint64_t a1, uint64_t a2)
{
  return Scene.modifier<A>(_:)(a1, a1, &type metadata for CommandsRemovedModifier, a2);
}

uint64_t Scene.commandsReplaced<A>(content:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  _QWORD v19[2];

  v18[0] = a4;
  v18[1] = a6;
  v10 = type metadata accessor for ModifiedContent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v18 - v13;
  Scene.modifier<A>(_:)(v15, a3, &type metadata for CommandsRemovedModifier, a5);
  v19[0] = a5;
  v19[1] = &protocol witness table for CommandsRemovedModifier;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v10, v19);
  Scene.commands<A>(content:)(a1, a2, v10, v18[0], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1878C3110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for CommandsRemovedModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t sub_1878C3164(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  v1 = a1[1];
  v3 = a1[2];
  v2 = a1[3];
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for CommandsModifier(255, v1, v2, v5);
  v6 = type metadata accessor for ModifiedContent();
  v9[0] = v3;
  v9[1] = &protocol witness table for CommandsRemovedModifier;
  v8[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v9);
  v8[1] = &protocol witness table for CommandsModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v6, v8);
}

ValueMetadata *type metadata accessor for CommandsRemovedModifier()
{
  return &type metadata for CommandsRemovedModifier;
}

uint64_t static CommandsRemovedModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v8 = a1[5];
  v7 = a1[6];
  v9 = *((_DWORD *)a1 + 14);
  v22 = *a1;
  v23 = v5;
  v24 = v6;
  v25 = *(_OWORD *)(a1 + 3);
  v26 = v8;
  v27 = v7;
  v28 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  v13 = v22;
  v14 = v23;
  v15 = v6;
  v16 = v25;
  v17 = v8;
  v18 = v7;
  v19 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a2(&v20, v10, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v7;
  v14 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v12 = v21;
  *(_QWORD *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

uint64_t implicit closure #1 in static CommandsRemovedModifier._makeScene(modifier:inputs:body:)()
{
  type metadata accessor for (_:)();
  type metadata accessor for External<(_:)>();
  lazy protocol witness table accessor for type External<(_:)> and conformance External<A>();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in implicit closure #1 in static CommandsRemovedModifier._makeScene(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_11:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = result;
    }
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 16);
    v6 = 208;
    do
    {
      if (v4 >= v5)
      {
        __break(1u);
        goto LABEL_11;
      }
      if ((*(_BYTE *)(v1 + v6) & 1) == 0)
        *(_BYTE *)(v1 + v6) |= 1u;
      ++v4;
      v6 += 272;
    }
    while (v2 != v4);
    *v3 = v1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyEventDispatcher()
{
  return &type metadata for KeyEventDispatcher;
}

uint64_t KeyEventDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t result;
  int64_t v20;
  void (*v21)();
  ValueMetadata *v22;
  void (*v23)();
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  Swift::UInt v33;
  void (*v34)();
  uint64_t v35;
  ValueMetadata *v36;
  __int128 *v37;
  __int128 *v38;
  void (*v39)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  Swift::UInt *v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  Swift::UInt v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75[40];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _BYTE v90[40];
  _QWORD v91[3];
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint64_t v96;

  v3 = v2;
  v6 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18D760234](v6))
    return MEMORY[0x1E0DEE9E8];
  v7 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7);
  swift_unknownObjectRelease();
  v10 = MEMORY[0x1E0DEE9E8];
  if (!v9)
    return v10;
  v11 = swift_conformsToProtocol2();
  if (v11)
    v12 = v11;
  else
    v12 = 0;
  if (v11)
    v13 = (_QWORD *)v9;
  else
    v13 = 0;
  if (!v13)
  {
    swift_release();
    return v10;
  }
  v62 = v3;
  v60 = v13;
  v61 = v12;
  v96 = v10;
  v64 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 64);
  v17 = &v84;
  v18 = (__int128 *)&v95;
  v65 = (unint64_t)(v14 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v63 = (char *)MEMORY[0x1E0DEE9D8];
  v21 = type metadata accessor for (key: EventID, value: EventType)?;
  v22 = &type metadata for KeyEvent;
  v23 = type metadata accessor for KeyEvent?;
  if (!v16)
    goto LABEL_15;
LABEL_13:
  v24 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v25 = v24 | (v20 << 6);
  while (2)
  {
    v26 = *(_QWORD *)(a1 + 56);
    v27 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v25);
    v29 = *v27;
    v28 = v27[1];
    *(_QWORD *)&v83 = v29;
    *((_QWORD *)&v83 + 1) = v28;
    outlined init with copy of TableColumnList(v26 + 40 * v25, (uint64_t)v17);
    while (1)
    {
      outlined init with take of TableCellFormula((uint64_t)&v83, (uint64_t)v94, (uint64_t (*)(_QWORD))v21);
      v33 = v94[0];
      if (!v94[0])
      {
        swift_release();
        v49 = *((_QWORD *)v63 + 2);
        if (v49)
        {
          v50 = (Swift::UInt *)(v63 + 40);
          do
          {
            v51 = specialized __RawDictionaryStorage.find<A>(_:)(*(v50 - 1), *v50);
            if ((v52 & 1) != 0)
            {
              v53 = v51;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v55 = *v62;
              *(_QWORD *)&v83 = *v62;
              *v62 = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v55 = v83;
              }
              specialized _NativeDictionary._delete(at:)(v53, v55);
              *v62 = v55;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v50 += 2;
            --v49;
          }
          while (v49);
        }
        swift_release();
        swift_bridgeObjectRelease();
        return v96;
      }
      v67 = v94[1];
      outlined init with take of OptionalBinaryInteger(v18, (uint64_t)v91);
      outlined init with copy of TableColumnList((uint64_t)v91, (uint64_t)v90);
      outlined init with copy of TableColumnList((uint64_t)v90, (uint64_t)v75);
      type metadata accessor for EventType();
      if ((swift_dynamicCast() & 1) == 0)
      {
        v74 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v68, (uint64_t (*)(_QWORD))v23);
        v76 = 0u;
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v82 = 0;
LABEL_41:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v76, (uint64_t (*)(_QWORD))v23);
        goto LABEL_42;
      }
      v80 = v72;
      v81 = v73;
      v82 = v74;
      v78 = v70;
      v79 = v71;
      v76 = v68;
      v77 = v69;
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_41;
      v66 = v20;
      v34 = v23;
      v35 = a1;
      v36 = v22;
      v37 = v18;
      v38 = v17;
      v39 = v21;
      v87 = v80;
      v88 = v81;
      v89 = v82;
      v83 = v76;
      v84 = v77;
      v85 = v78;
      v86 = v79;
      outlined init with copy of KeyEvent((uint64_t)&v83, (uint64_t)&v76);
      v40 = HIBYTE(*((_QWORD *)&v78 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v78 + 1) & 0x2000000000000000) == 0)
        v40 = v78 & 0xFFFFFFFFFFFFLL;
      if (v40)
      {
        swift_bridgeObjectRetain();
        v58 = String.subscript.getter();
        v59 = v41;
        outlined destroy of KeyEvent((uint64_t)&v76);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
        v42 = qword_187C68F00[(char)v83];
        v43 = *((_QWORD *)&v85 + 1);
        v56 = v85;
        v57 = *((_QWORD *)&v84 + 1);
        swift_bridgeObjectRetain();
        outlined destroy of KeyEvent((uint64_t)&v83);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v67;
        *(_QWORD *)&v83 = v42;
        *((_QWORD *)&v83 + 1) = v58;
        *(_QWORD *)&v84 = v59;
        *((_QWORD *)&v84 + 1) = v56;
        *(_QWORD *)&v85 = v43;
        *((_QWORD *)&v85 + 1) = v57;
        LOBYTE(v42) = KeyEventDispatcher.bind(_:_:_:)((Swift::UInt *)&v76, (uint64_t *)&v83, v60, v61);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
          specialized Set._Variant.insert(_:)((Swift::UInt *)&v83, v33, v67);
        v45 = v92;
        v44 = v93;
        __swift_project_boxed_opaque_existential_1(v91, v92);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v44 + 8))(&v83, v45, v44);
        if (v83 == 2 || v83 == 3)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v63 + 2) + 1, 1, v63);
          v47 = *((_QWORD *)v63 + 2);
          v46 = *((_QWORD *)v63 + 3);
          if (v47 >= v46 >> 1)
            v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v63);
          *((_QWORD *)v63 + 2) = v47 + 1;
          v48 = &v63[16 * v47];
          *((_QWORD *)v48 + 4) = v33;
          *((_QWORD *)v48 + 5) = v67;
        }
        v21 = v39;
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
        v17 = v38;
        v18 = v37;
        v22 = v36;
        a1 = v35;
        v23 = v34;
        v20 = v66;
        if (v16)
          goto LABEL_13;
        goto LABEL_15;
      }
      outlined destroy of KeyEvent((uint64_t)&v76);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
      outlined destroy of KeyEvent((uint64_t)&v83);
      v17 = v38;
      v18 = v37;
      v22 = v36;
      a1 = v35;
      v23 = v34;
      v20 = v66;
LABEL_42:
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
      if (v16)
        goto LABEL_13;
LABEL_15:
      v30 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        goto LABEL_67;
      }
      if (v30 < v65)
      {
        v31 = *(_QWORD *)(v64 + 8 * v30);
        if (v31)
          goto LABEL_18;
        v32 = v20 + 2;
        ++v20;
        if (v30 + 1 < v65)
        {
          v31 = *(_QWORD *)(v64 + 8 * v32);
          if (v31)
            goto LABEL_21;
          v20 = v30 + 1;
          if (v30 + 2 < v65)
          {
            v31 = *(_QWORD *)(v64 + 8 * (v30 + 2));
            if (v31)
            {
              v30 += 2;
              goto LABEL_18;
            }
            v32 = v30 + 3;
            v20 = v30 + 2;
            if (v30 + 3 < v65)
              break;
          }
        }
      }
LABEL_32:
      v16 = 0;
      *(_QWORD *)&v86 = 0;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
    }
    v31 = *(_QWORD *)(v64 + 8 * v32);
    if (v31)
    {
LABEL_21:
      v30 = v32;
LABEL_18:
      v16 = (v31 - 1) & v31;
      v25 = __clz(__rbit64(v31)) + (v30 << 6);
      v20 = v30;
      continue;
    }
    break;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v65)
    {
      v20 = v65 - 1;
      goto LABEL_32;
    }
    v31 = *(_QWORD *)(v64 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_18;
  }
LABEL_67:
  __break(1u);
  return result;
}

uint64_t KeyEventDispatcher.bind(_:_:_:)(Swift::UInt *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int EnumCaseMultiPayload;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  char v62;
  char *v63;
  char *v64;
  uint64_t v65;
  Swift::Int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  BOOL v71;
  void (*v72)(uint64_t *__return_ptr, uint64_t *);
  char v73;
  uint64_t v74;
  _QWORD *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  char v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char v99;
  void (*v100)(uint64_t *__return_ptr, uint64_t *);
  char v101;
  uint64_t *v103;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v105;
  uint64_t *v106;
  Swift::UInt v107;
  Swift::UInt v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v5 = v4;
  v125 = a4;
  v121 = a3;
  v116 = type metadata accessor for CharacterSet();
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116, v8);
  v114 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v113 = (char *)&v105 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v112 = (char *)&v105 - v15;
  v16 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v110 = (uint64_t *)((char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19, v20);
  v127 = (uint64_t)&v105 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v105 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v105 - v28;
  v118 = type metadata accessor for KeyPress.Handler(0);
  v30 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118, v31);
  v126 = (uint64_t)&v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v105 - v35;
  v39.n128_f64[0] = MEMORY[0x1E0C80A78](v37, v38);
  v41 = (char *)&v105 - v40;
  v43 = *a1;
  v42 = a1[1];
  v44 = *a2;
  v45 = a2[1];
  v119 = a2[2];
  v120 = v45;
  v123 = a2[3];
  v124 = v44;
  v122 = a2[4];
  v111 = a2[5];
  v46 = *v5;
  v47 = *(_QWORD *)(*v5 + 16);
  v117 = v16;
  if (v47)
  {
    v48 = v42;
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v42);
    v42 = v48;
    if ((v50 & 1) != 0)
    {
      v51 = *(_QWORD **)(*(_QWORD *)(v46 + 56) + 8 * v49);
      v127 = v51[2];
      if (v127)
      {
        v126 = (uint64_t)v51
             + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
        v125 = *(_QWORD *)(v30 + 72);
        v121 = v51;
        swift_bridgeObjectRetain();
        v52 = 0;
        v53 = v118;
        v54 = v120;
        while (1)
        {
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v126 + v125 * v52, (uint64_t)v41, type metadata accessor for KeyPress.Handler);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v41, (uint64_t)v29, type metadata accessor for KeyPress.Handler.Subject);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v25, type metadata accessor for KeyPress.Handler.Subject);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (!EnumCaseMultiPayload)
            break;
          if (EnumCaseMultiPayload != 1)
            goto LABEL_20;
          v56 = v115;
          v57 = v112;
          v58 = v116;
          (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v112, v25, v116);
          v59 = v114;
          CharacterSet.init(charactersIn:)();
          v60 = v113;
          CharacterSet.intersection(_:)();
          v61 = *(void (**)(_QWORD, _QWORD))(v56 + 8);
          v61(v59, v58);
          lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x1E0CAE4D0]);
          dispatch thunk of SetAlgebra.init()();
          lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x1E0CAE4C8]);
          v62 = dispatch thunk of static Equatable.== infix(_:_:)();
          v63 = v59;
          v53 = v118;
          v61(v63, v58);
          v61(v60, v58);
          v64 = v57;
          v54 = v120;
          v61(v64, v58);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for KeyPress.Handler.Subject);
          if ((v62 & 1) != 0)
            goto LABEL_6;
LABEL_21:
          if ((v124 & ~*(_QWORD *)&v41[*(int *)(v53 + 20)]) != 0)
            goto LABEL_6;
          v72 = *(void (**)(_QWORD *__return_ptr, _QWORD))&v41[*(int *)(v53 + 24)];
          v128 = v124;
          v129 = v54;
          v130 = v119;
          v131 = v123;
          v132 = v122;
          v133 = v111;
          v72(&v134, &v128);
          v73 = v134;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, type metadata accessor for KeyPress.Handler);
          if ((v73 & 1) == 0)
            goto LABEL_53;
LABEL_7:
          if (++v52 == v127)
            goto LABEL_51;
        }
        v65 = *(_QWORD *)v25;
        if (!*(_QWORD *)(*(_QWORD *)v25 + 16))
          goto LABEL_5;
        Hasher.init(_seed:)();
        String.hash(into:)();
        v66 = Hasher._finalize()();
        v67 = -1 << *(_BYTE *)(v65 + 32);
        v68 = v66 & ~v67;
        if (((*(_QWORD *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) == 0)
          goto LABEL_5;
        v69 = *(_QWORD *)(v65 + 48);
        v70 = (_QWORD *)(v69 + 16 * v68);
        v71 = *v70 == v54 && v70[1] == v119;
        if (!v71 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v74 = ~v67;
          while (1)
          {
            v68 = (v68 + 1) & v74;
            if (((*(_QWORD *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) == 0)
              break;
            v75 = (_QWORD *)(v69 + 16 * v68);
            v76 = *v75 == v54 && v75[1] == v119;
            if (v76 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_19;
          }
LABEL_5:
          swift_bridgeObjectRelease();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for KeyPress.Handler.Subject);
          v53 = v118;
LABEL_6:
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, type metadata accessor for KeyPress.Handler);
          goto LABEL_7;
        }
LABEL_19:
        swift_bridgeObjectRelease();
        v53 = v118;
LABEL_20:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for KeyPress.Handler.Subject);
        goto LABEL_21;
      }
      return 0;
    }
  }
  v107 = v42;
  v108 = v43;
  v77 = (*(uint64_t (**)(_QWORD, __n128))(v125 + 48))(*v121, v39);
  v78 = *(_QWORD *)(v77 + 16);
  if (!v78)
  {
LABEL_50:
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRelease();
    return 0;
  }
  v106 = v5;
  v79 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v109 = v77;
  v121 = (_QWORD *)v79;
  v80 = v77 + v79;
  v125 = *(_QWORD *)(v30 + 72);
  v81 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v82 = v118;
  v83 = v119;
  v84 = v110;
  while (1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v80, (uint64_t)v36, type metadata accessor for KeyPress.Handler);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v36, v126, type metadata accessor for KeyPress.Handler);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v81 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81[2] + 1, 1, v81);
    v86 = v81[2];
    v85 = v81[3];
    if (v86 >= v85 >> 1)
      v81 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v81);
    v81[2] = v86 + 1;
    outlined init with take of TableCellFormula(v126, (uint64_t)v121 + (_QWORD)v81 + v86 * v125, type metadata accessor for KeyPress.Handler);
    v87 = v127;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v36, v127, type metadata accessor for KeyPress.Handler.Subject);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v87, (uint64_t)v84, type metadata accessor for KeyPress.Handler.Subject);
    v88 = swift_getEnumCaseMultiPayload();
    if (v88)
      break;
    v99 = specialized Set.contains(_:)(v120, v83, *v84);
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v127, type metadata accessor for KeyPress.Handler.Subject);
    if ((v99 & 1) != 0)
      goto LABEL_47;
LABEL_34:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, type metadata accessor for KeyPress.Handler);
LABEL_35:
    v80 += v125;
    if (!--v78)
      goto LABEL_50;
  }
  if (v88 == 1)
  {
    v89 = v115;
    v90 = v112;
    v91 = v116;
    (*(void (**)(char *, uint64_t *, uint64_t))(v115 + 32))(v112, v84, v116);
    v92 = v114;
    CharacterSet.init(charactersIn:)();
    v93 = v113;
    CharacterSet.intersection(_:)();
    v94 = *(void (**)(_QWORD, _QWORD))(v89 + 8);
    v94(v92, v91);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x1E0CAE4D0]);
    dispatch thunk of SetAlgebra.init()();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, MEMORY[0x1E0CAE4C8]);
    v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    v96 = v92;
    v84 = v110;
    v94(v96, v91);
    v94(v93, v91);
    v97 = v90;
    v98 = v91;
    v82 = v118;
    v83 = v119;
    v94(v97, v98);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v127, type metadata accessor for KeyPress.Handler.Subject);
    if ((v95 & 1) == 0)
      goto LABEL_47;
    goto LABEL_34;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v127, type metadata accessor for KeyPress.Handler.Subject);
LABEL_47:
  if ((v124 & ~*(_QWORD *)&v36[*(int *)(v82 + 20)]) != 0)
    goto LABEL_34;
  v100 = *(void (**)(_QWORD *__return_ptr, _QWORD))&v36[*(int *)(v82 + 24)];
  v128 = v124;
  v129 = v120;
  v130 = v83;
  v131 = v123;
  v132 = v122;
  v133 = v111;
  v100(&v134, &v128);
  v101 = v134;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, type metadata accessor for KeyPress.Handler);
  if ((v101 & 1) != 0)
    goto LABEL_35;
  swift_bridgeObjectRelease();
  v103 = v106;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v128 = *v103;
  *v103 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v81, v108, v107, isUniquelyReferenced_nonNull_native);
  *v103 = v128;
LABEL_53:
  swift_bridgeObjectRelease();
  return 1;
}

BOOL protocol witness for ForwardedEventDispatcher.isActive.getter in conformance KeyEventDispatcher()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) != 0;
}

uint64_t protocol witness for ForwardedEventDispatcher.reset() in conformance KeyEventDispatcher()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  result = swift_bridgeObjectRelease();
  *v0 = v1;
  return result;
}

uint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CharacterSet();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void static _DigitalCrownModifier._makeView(modifier:inputs:body:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for ViewModifier.body(content:) in conformance _DigitalCrownModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for ViewModifier in _DigitalCrownModifier()
{
  return &protocol witness table for _DigitalCrownModifier;
}

uint64_t destroy for _DigitalCrownModifier(uint64_t a1)
{
  int v2;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2 = *(unsigned __int8 *)(a1 + 144);
  if (v2 != 255)
    outlined consume of _CrownHapticsConfiguration(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v2);
  return swift_release();
}

uint64_t initializeWithCopy for _DigitalCrownModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  v8 = *(unsigned __int8 *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 128);
    v10 = *(_QWORD *)(a2 + 136);
    outlined copy of _CrownHapticsConfiguration(v9, v10, v8);
    *(_QWORD *)(a1 + 128) = v9;
    *(_QWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 144) = v8;
  }
  *(_DWORD *)(a1 + 145) = *(_DWORD *)(a2 + 145);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _DigitalCrownModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v7 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v8 = (__int128 *)(a1 + 128);
  v9 = (__int128 *)(a2 + 128);
  v10 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned __int8 *)(a1 + 144) == 255)
  {
    if (v10 == 255)
    {
      v19 = *v9;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *v8 = v19;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 128);
      v17 = *(_QWORD *)(a2 + 136);
      outlined copy of _CrownHapticsConfiguration(v16, v17, *(_BYTE *)(a2 + 144));
      *(_QWORD *)(a1 + 128) = v16;
      *(_QWORD *)(a1 + 136) = v17;
      *(_BYTE *)(a1 + 144) = v10;
    }
  }
  else if (v10 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 128);
    v18 = *(_BYTE *)(a2 + 144);
    *v8 = *v9;
    *(_BYTE *)(a1 + 144) = v18;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 128);
    v12 = *(_QWORD *)(a2 + 136);
    outlined copy of _CrownHapticsConfiguration(v11, v12, *(_BYTE *)(a2 + 144));
    v13 = *(_QWORD *)(a1 + 128);
    v14 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v12;
    v15 = *(_BYTE *)(a1 + 144);
    *(_BYTE *)(a1 + 144) = v10;
    outlined consume of _CrownHapticsConfiguration(v13, v14, v15);
  }
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  v20 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _DigitalCrownModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v4 = (_OWORD *)(a2 + 128);
  v5 = *(unsigned __int8 *)(a1 + 144);
  if (v5 == 255)
    goto LABEL_5;
  v6 = *(unsigned __int8 *)(a2 + 144);
  if (v6 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 128);
LABEL_5:
    *(_OWORD *)(a1 + 128) = *v4;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *v4;
  *(_BYTE *)(a1 + 144) = v6;
  outlined consume of _CrownHapticsConfiguration(v7, v8, v5);
LABEL_6:
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_WORD *)(a1 + 146) = *(_WORD *)(a2 + 146);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _DigitalCrownModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DigitalCrownModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _DigitalCrownModifier()
{
  return &type metadata for _DigitalCrownModifier;
}

uint64_t static FileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void sub_1878C4D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v22 = type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v20);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>, a1);
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  a19 = v23;
  a20 = v24;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, &a19);
  ObservableDocumentBoxInputView.init(modelType:content:)(v20, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:));
  swift_retain();
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_1878C4DF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1[8] = AnyView.init<A>(_:)();
  v1[9] = v5;
  v1[10] = v6;
  v1[11] = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v2);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v0, v2);
  swift_release();
  result = swift_release();
  v1[12] = v3;
  return result;
}

void sub_1878C4FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  v22 = type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v20);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.ViewerFileDocumentContainer<A, B>, a1);
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>, MEMORY[0x1E0CE4530]);
  a19 = v23;
  a20 = v24;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, &a19);
  ObservableDocumentBoxInputView.init(modelType:content:)(v20, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:));
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
}

uint64_t sub_1878C5084()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v0[8] = AnyView.init<A>(_:)();
  v0[9] = v5;
  v0[10] = v6;
  v0[11] = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  result = swift_release();
  v0[12] = v3;
  return result;
}

uint64_t FileDocumentConfiguration.document.getter(uint64_t a1)
{
  return FileDocumentConfiguration.document.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
}

uint64_t FileDocumentConfiguration.document.setter(uint64_t a1, uint64_t a2)
{
  specialized FocusState.Binding.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*FileDocumentConfiguration.document.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = malloc(0x38uLL);
  *a1 = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *v4 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[1] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[2] = malloc(v7);
  v4[3] = malloc(v7);
  v8 = type metadata accessor for Binding();
  v4[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[5] = v9;
  v4[6] = malloc(*(_QWORD *)(v9 + 64));
  (*(void (**)(void))(v9 + 16))();
  MEMORY[0x18D75B9C8](v8);
  return FileDocumentConfiguration.document.modify;
}

void FileDocumentConfiguration.document.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v4 = (*a1)[5];
  v3 = (void *)(*a1)[6];
  v5 = (void *)(*a1)[3];
  v6 = (*a1)[4];
  v8 = (*a1)[1];
  v7 = (void *)(*a1)[2];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[2], v5, v9);
    specialized Binding.wrappedValue.setter();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v7, v9);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v10(v5, v9);
  }
  else
  {
    specialized Binding.wrappedValue.setter();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v9);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
  }
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t FileDocumentConfiguration.$document.getter(uint64_t a1)
{
  return FileDocumentConfiguration.document.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7548]);
}

uint64_t FileDocumentConfiguration.document.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  v2 = type metadata accessor for Binding();
  return a2(v2);
}

uint64_t FileDocumentConfiguration.fileURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of URL?(v2 + *(int *)(a1 + 36), a2);
}

uint64_t FileDocumentConfiguration.fileURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of URL?(a1, v2 + *(int *)(a2 + 36));
}

uint64_t (*FileDocumentConfiguration.fileURL.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FileDocumentConfiguration.isEditable.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t FileDocumentConfiguration.isEditable.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*FileDocumentConfiguration.isEditable.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FileDocumentConfiguration.init(document:fileURL:isEditable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v14 = type metadata accessor for FileDocumentConfiguration(0, a4, a5, v13);
  result = outlined init with take of URL?(a2, a6 + *(int *)(v14 + 36));
  *(_BYTE *)(a6 + *(int *)(v14 + 40)) = a3;
  return result;
}

uint64_t property wrapper backing initializer of FileDocumentBox.base(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v9 - v6, a1, v2, v5);
  Published.init(wrappedValue:)((uint64_t)v7, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t FileDocumentBox.base.didset(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  BOOL v14;
  uint64_t result;
  void **v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;

  v23 = *v1;
  v3 = *(_QWORD *)(v23 + 80);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - v11;
  FileDocumentBox.base.getter();
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48);
  v14 = v13(v12, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 120)) = v14;
  static Transaction.current.getter();
  Transaction.subscript.getter();
  result = swift_release();
  if ((v24 & 1) == 0)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a1, 1, v3);
    if ((_DWORD)result != 1)
    {
      v16 = (void **)((char *)v1 + *(_QWORD *)(*v1 + 128));
      result = swift_beginAccess();
      v17 = *v16;
      if (v17)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
        v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = v3;
        v20 = *(_QWORD *)(v23 + 88);
        *(_QWORD *)(v19 + 24) = v20;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, v8, v4);
        type metadata accessor for FileDocumentBox(0, v3, v20, v21);
        v22 = v17;
        NSUndoManager.registerUndo<A>(withTarget:handler:)();

        return swift_release();
      }
    }
  }
  return result;
}

uint64_t FileDocumentBox.base.getter()
{
  return FileDocumentBox.base.getter();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

void (*FileDocumentBox.base.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for Optional();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  FileDocumentBox.base.getter();
  return FileDocumentBox.base.modify;
}

void FileDocumentBox.base.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    specialized FileDocumentBox.base.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    specialized FileDocumentBox.base.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t FileDocumentBox.fileURL.getter()
{
  return FileDocumentBox.base.getter();
}

uint64_t FileDocumentBox.fileURL.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v3 = *v1;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v3 + 88);
  v12 = *(_QWORD *)(v3 + 80);
  v8 = v12;
  v13 = v9;
  swift_getKeyPath();
  v11[0] = v8;
  v11[1] = v9;
  swift_getKeyPath();
  outlined init with copy of URL?(a1, (uint64_t)v7);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t (*FileDocumentBox.fileURL.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

uint64_t FileDocumentBox.isEditable.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t FileDocumentBox.isEditable.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t (*FileDocumentBox.isEditable.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

uint64_t FileDocumentBox.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  FileDocumentBox.init()();
  return v0;
}

uint64_t *FileDocumentBox.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v1 = *v0;
  type metadata accessor for Published<Bool>();
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v32 - v7;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 80);
  v14 = type metadata accessor for Optional();
  v33 = v14;
  v15 = type metadata accessor for Published();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v32 - v18;
  v32 = *(_QWORD *)(v14 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v32 - v23;
  v25 = (uint64_t)v0 + *(_QWORD *)(v1 + 96);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v13 - 8) + 56);
  v26((char *)&v32 - v23, 1, 1, v13, v22);
  property wrapper backing initializer of FileDocumentBox.base((uint64_t)v24);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v25, v19, v15);
  v27 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v28 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 1, 1, v28);
  property wrapper backing initializer of ReferenceFileDocumentBox.fileURL((uint64_t)v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v27, v8, v35);
  v29 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v39 = 0;
  v30 = v36;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v29, v30, v38);
  *((_BYTE *)v0 + *(_QWORD *)(*v0 + 120)) = 0;
  *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)) = 0;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v26)(v24, 1, 1, v13);
  specialized FileDocumentBox.base.setter((uint64_t)v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v33);
  return v0;
}

id FileDocumentBox.read(from:contentType:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  uint64_t Configuration;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  id *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = (_QWORD *)*v2;
  Configuration = type metadata accessor for FileDocumentReadConfiguration(0);
  MEMORY[0x1E0C80A78](Configuration, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v6[10];
  v12 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - v14;
  v16 = (id *)((char *)v3 + v6[16]);
  swift_beginAccess();
  objc_msgSend(*v16, sel_disableUndoRegistration);
  v17 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v10, a2, v17);
  *(_QWORD *)&v10[*(int *)(Configuration + 20)] = a1;
  v18 = v6[11];
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 24);
  v20 = a1;
  v21 = v26;
  v19(v10, v11, v18);
  if (!v21)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v15, 0, 1, v11);
    specialized FileDocumentBox.base.setter((uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v25);
  }
  v22 = (id *)((char *)v3 + *(_QWORD *)(*v3 + 128));
  swift_beginAccess();
  return objc_msgSend(*v22, sel_enableUndoRegistration);
}

uint64_t (*FileDocumentBox.snapshotForSerialization(contentType:)(uint64_t a1))(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v28[0] = a1;
  v2 = *v1;
  v3 = type metadata accessor for UTType();
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v28[1] = v5;
  v29 = v2;
  v32 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v2 + 80);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v28 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v28 - v19;
  FileDocumentBox.base.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return 0;
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v22(v20, v11, v6);
    v22(v16, v20, v6);
    v24 = v30;
    v23 = v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 16))(v32, v28[0], v31);
    v25 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v26 = (v13 + *(unsigned __int8 *)(v24 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v6;
    *(_QWORD *)(v27 + 24) = *(_QWORD *)(v29 + 88);
    v22((char *)(v27 + v25), v16, v6);
    (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v27 + v26, v32, v23);
    return partial apply for closure #1 in FileDocumentBox.snapshotForSerialization(contentType:);
  }
}

uint64_t closure #1 in FileDocumentBox.snapshotForSerialization(contentType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v18;

  v9 = type metadata accessor for FileDocumentWriteConfiguration(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, a3, v13);
  *(_QWORD *)&v12[*(int *)(v9 + 20)] = a1;
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32);
  v15 = a1;
  v16 = v14(v12, a4, a5);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for FileDocumentWriteConfiguration);
  return v16;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FileDocumentBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;

  type metadata accessor for FileDocumentBox(0, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a2);
  result = ObservableObject<>.objectWillChange.getter();
  *a3 = result;
  return result;
}

id protocol witness for FileWrapperObservableDocumentBox.read(from:contentType:) in conformance FileDocumentBox<A>(void *a1, uint64_t a2)
{
  return FileDocumentBox.read(from:contentType:)(a1, a2);
}

uint64_t (*protocol witness for FileWrapperObservableDocumentBox.snapshotForSerialization(contentType:) in conformance FileDocumentBox<A>(uint64_t a1))(void *a1)
{
  return FileDocumentBox.snapshotForSerialization(contentType:)(a1);
}

uint64_t protocol witness for DocumentBaseBox.base.setter in conformance FileDocumentBox<A>(uint64_t a1)
{
  uint64_t v2;

  specialized FileDocumentBox.base.setter(a1);
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t (*protocol witness for DocumentBaseBox.base.modify in conformance FileDocumentBox<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FileDocumentBox.base.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ObservableDocumentBox.fileURL.modify in conformance FileDocumentBox<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FileDocumentBox.fileURL.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ObservableDocumentBox.isEditable.modify in conformance FileDocumentBox<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FileDocumentBox.isEditable.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ObservableDocumentBox.readableContentTypes.getter in conformance FileDocumentBox<A>(uint64_t a1)
{
  return specialized FileDocumentBox.readableContentTypes.getter(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

uint64_t protocol witness for ObservableDocumentBox.writableContentTypes.getter in conformance FileDocumentBox<A>(uint64_t a1)
{
  return specialized FileDocumentBox.writableContentTypes.getter(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
}

uint64_t DocumentGroupConfiguration.NewFileDocument.provideNewDocument(to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v17 - v12;
  type metadata accessor for FileDocumentBox(0, a5, a6, v14);
  swift_dynamicCastClassUnconditional();
  v15 = swift_unknownObjectRetain();
  a3(v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v13, 0, 1, a5);
  specialized FileDocumentBox.base.setter((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for NewDocumentProvider.provideNewDocument(to:) in conformance DocumentGroupConfiguration.NewFileDocument<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return DocumentGroupConfiguration.NewFileDocument.provideNewDocument(to:)(a1, a2, *(void (**)(uint64_t))v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a5;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v23 - v15;
  v18 = type metadata accessor for FileDocumentBox(0, a1, a3, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v18);
  ObservedObject.projectedValue.getter();
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  swift_getKeyPath();
  v20 = type metadata accessor for FileDocumentBox(255, a1, a3, v19);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v20);
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  swift_retain();
  FileDocumentBox.fileURL.getter();
  swift_release();
  swift_retain();
  v21 = FileDocumentBox.isEditable.getter();
  swift_release();
  return FileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v16, (uint64_t)v12, v21 & 1, a1, a3, v24);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>(a1, (void (*)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.EditorFileDocumentContainer.configuration.getter, a2);
}

uint64_t property wrapper backing initializer of DocumentGroupConfiguration.EditorFileDocumentContainer.modelBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for FileDocumentBox(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v4);
  return ObservedObject.init(wrappedValue:)();
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v56[2];
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  uint64_t v75;

  v69 = a8;
  v70 = a9;
  v61 = a1;
  v62 = a3;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a5;
  v63 = a7;
  v21 = type metadata accessor for FileDocumentConfiguration(0, a5, a7, v20);
  v59 = *(_QWORD *)(v21 - 8);
  v60 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v56 - v23;
  v64 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v29 = type metadata accessor for ModifiedContent();
  v65 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v56 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v56 - v35;
  v37 = type metadata accessor for _ConditionalContent();
  v67 = *(_QWORD *)(v37 - 8);
  v68 = v37;
  v39 = MEMORY[0x1E0C80A78](v37, v38);
  v66 = (char *)v56 - v40;
  if (*(_BYTE *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 120)) == 1)
  {
    v57 = v32;
    v56[1] = a2;
    v41 = a6;
    v56[0] = a6;
    v42 = v62;
    v58 = v36;
    v43 = v69;
    a10(v61, a2, (void (*)(_QWORD))v62, a4, v19, v41, v63, v69, v39);
    v42(v24);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v24, v60);
    swift_getKeyPath();
    v44 = v56[0];
    DocumentGroupConfiguration.EditorFileDocumentContainer.documentConfiguration.getter(v18);
    v45 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v18, 0, 1, v45);
    v46 = (uint64_t)v57;
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v28, v44);
    v47 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v71[0] = v43;
    v71[1] = v47;
    v48 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v71);
    v49 = (uint64_t)v58;
    static ViewBuilder.buildExpression<A>(_:)(v46, v29, v48);
    v50 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v50(v46, v29);
    static ViewBuilder.buildBlock<A>(_:)(v49, v29, v46);
    v51 = (uint64_t)v66;
    static ViewBuilder.buildEither<A, B>(first:)(v46, v29);
    v50(v46, v29);
    v50(v49, v29);
  }
  else
  {
    v75 = static Color.clear.getter();
    v52 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
    v43 = v69;
    v74[0] = v69;
    v74[1] = v52;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v74);
    v51 = (uint64_t)v66;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v75, v29, MEMORY[0x1E0CE7170]);
    swift_release();
  }
  v53 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
  v73[0] = v43;
  v73[1] = v53;
  v72[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v73);
  v72[1] = MEMORY[0x1E0CE7140];
  v54 = v68;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v68, v72);
  static ViewBuilder.buildBlock<A>(_:)(v51, v54, v70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v51, v54);
}

uint64_t DocumentGroupConfiguration.ViewerFileDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a5;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v22 - v15;
  v18 = type metadata accessor for FileDocumentBox(0, a1, a3, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v18);
  ObservedObject.projectedValue.getter();
  v24 = a1;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  swift_getKeyPath();
  v20 = type metadata accessor for FileDocumentBox(255, a1, a3, v19);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileDocumentBox<A>, v20);
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  swift_retain();
  FileDocumentBox.fileURL.getter();
  swift_release();
  return FileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v16, (uint64_t)v12, 0, a1, a3, v23);
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.documentConfiguration.getter@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  swift_retain();
  v2 = FileDocumentBox.isEditable.getter();
  swift_release();
  type metadata accessor for DocumentConfiguration();
  swift_retain();
  FileDocumentBox.fileURL.getter();
  result = swift_release();
  *a1 = v2 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.ViewerFileDocumentContainer<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>(a1, (void (*)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.ViewerFileDocumentContainer.configuration.getter, a2);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t, uint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(void (**)(char *))(v3 + 16), *(_QWORD *)(v3 + 24), a1[2], a1[3], a1[4], a1[5], a3, a2);
}

uint64_t Published.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v5);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t key path setter for FileDocumentBox.fileURL : <A>FileDocumentBox<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v5);
  return FileDocumentBox.fileURL.setter((uint64_t)v5);
}

uint64_t specialized FileDocumentBox.base.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v16 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v15 - v11;
  v13 = *(_QWORD *)(v2 + 88);
  v23 = v3;
  v24 = v13;
  swift_getKeyPath();
  v21 = v3;
  v22 = v13;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v19 = v3;
  v20 = v13;
  swift_getKeyPath();
  v17 = v3;
  v18 = v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v16, v4);
  swift_retain();
  static Published.subscript.setter();
  FileDocumentBox.base.didset((uint64_t)v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

uint64_t sub_1878C7278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for FileDocumentConfiguration(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  return FileDocumentConfiguration.document.getter(v4);
}

uint64_t sub_1878C72B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FileDocumentConfiguration(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return specialized FocusState.Binding.wrappedValue.setter();
}

uint64_t sub_1878C72EC()
{
  return 16;
}

__n128 sub_1878C72F8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static FileDocument.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static FileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FileDocument.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of FileDocument.fileWrapper(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

void type metadata completion function for FileDocumentConfiguration()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Binding();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocumentConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = ((v7 + 16) & ~(unint64_t)v7) + v8 + v11;
  if (*(_DWORD *)(v10 + 84))
    v13 = *(_QWORD *)(v10 + 64);
  else
    v13 = *(_QWORD *)(v10 + 64) + 1;
  v14 = (*(_DWORD *)(v10 + 80) | v7) & 0x100000;
  v15 = *a2;
  *a1 = *a2;
  if ((v11 | (unint64_t)v7) > 7 || v14 != 0 || v13 + (v12 & ~v11) + 1 > 0x18)
  {
    a1 = (uint64_t *)(v15
                   + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
    swift_retain();
  }
  else
  {
    v28 = v5;
    v29 = ~v11;
    v18 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = ((unint64_t)v18 + v7 + 8) & ~(unint64_t)v7;
    v21 = v9;
    v22 = ((unint64_t)v19 + v7 + 8) & ~(unint64_t)v7;
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v24 = v21;
    v23(v20, v22, v28);
    v25 = (void *)(((unint64_t)a1 + v12) & v29);
    v26 = (const void *)(((unint64_t)a2 + v12) & v29);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v26, 1, v24))
    {
      memcpy(v25, v26, v13);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v25, v26, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v24);
    }
    *((_BYTE *)v25 + v13) = *((_BYTE *)v26 + v13);
  }
  return a1;
}

uint64_t destroy for FileDocumentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (v7 + a1 + *(unsigned __int8 *)(v9 + 80) + ((v6 + 16) & ~v6)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(v10, v8);
  return result;
}

_QWORD *initializeWithCopy for FileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  int v20;
  size_t v21;
  size_t v22;
  size_t v23;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((v9 + 16) & ~v9) + v13 + v16;
  v18 = (void *)(((unint64_t)a1 + v17) & ~v16);
  v19 = (const void *)(((unint64_t)a2 + v17) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    v20 = *(_DWORD *)(v15 + 84);
    v21 = *(_QWORD *)(v15 + 64);
    if (v20)
      v22 = v21;
    else
      v22 = v21 + 1;
    memcpy(v18, v19, v22);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
    v20 = *(_DWORD *)(v15 + 84);
    v21 = *(_QWORD *)(v15 + 64);
  }
  if (v20)
    v23 = v21;
  else
    v23 = v21 + 1;
  *((_BYTE *)v18 + v23) = *((_BYTE *)v19 + v23);
  return a1;
}

_QWORD *assignWithCopy for FileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;
  uint64_t v21;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = (v9 + 16) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v10 + v11 + v14;
  v16 = (void *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (void *)(((unint64_t)a2 + v15) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16, 1, v12);
  v19 = v18(v17, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v16, v17, v12);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  }
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  memcpy(v16, v17, v20);
LABEL_10:
  if (*(_DWORD *)(v13 + 84))
    v21 = *(_QWORD *)(v13 + 64);
  else
    v21 = *(_QWORD *)(v13 + 64) + 1;
  *((_BYTE *)v16 + v21) = *((_BYTE *)v17 + v21);
  return a1;
}

_QWORD *initializeWithTake for FileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = (v8 + 16) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v9 + v10 + v13;
  v15 = (void *)(((unint64_t)a1 + v14) & ~v13);
  v16 = (const void *)(((unint64_t)a2 + v14) & ~v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    v17 = *(_DWORD *)(v12 + 84);
    v18 = *(_QWORD *)(v12 + 64);
    if (v17)
      v19 = v18;
    else
      v19 = v18 + 1;
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v15, v16, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    v17 = *(_DWORD *)(v12 + 84);
    v18 = *(_QWORD *)(v12 + 64);
  }
  if (v17)
    v20 = v18;
  else
    v20 = v18 + 1;
  *((_BYTE *)v15 + v20) = *((_BYTE *)v16 + v20);
  return a1;
}

_QWORD *assignWithTake for FileDocumentConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;
  uint64_t v21;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = (v9 + 16) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v10 + v11 + v14;
  v16 = (void *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (void *)(((unint64_t)a2 + v15) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16, 1, v12);
  v19 = v18(v17, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v16, v17, v12);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  }
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  memcpy(v16, v17, v20);
LABEL_10:
  if (*(_DWORD *)(v13 + 84))
    v21 = *(_QWORD *)(v13 + 64);
  else
    v21 = *(_QWORD *)(v13 + 64) + 1;
  *((_BYTE *)v16 + v21) = *((_BYTE *)v17 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = v11;
  if (v10)
    v13 = 1;
  else
    v13 = 2;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = ((v14 + 16) & ~v14) + *(_QWORD *)(v6 + 64) + v15;
  if (a2 > v12)
  {
    v17 = v13 + *(_QWORD *)(v9 + 64) + (v16 & ~v15);
    v18 = 8 * v17;
    if (v17 > 3)
      goto LABEL_16;
    v20 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_32;
      goto LABEL_23;
    }
    if (v20 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_32;
      goto LABEL_23;
    }
    if (v20 >= 2)
    {
LABEL_16:
      v19 = *(unsigned __int8 *)(a1 + v17);
      if (!*(_BYTE *)(a1 + v17))
        goto LABEL_32;
LABEL_23:
      v21 = (v19 - 1) << v18;
      if (v17 > 3)
        v21 = 0;
      if ((_DWORD)v17)
      {
        if (v17 <= 3)
          v22 = v17;
        else
          v22 = 4;
        __asm { BR              X12 }
      }
      return v12 + v21 + 1;
    }
  }
LABEL_32:
  if (v8 >= v11)
  {
    v23 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v23 + v14 + 8) & ~v14, v7, v5);
    }
    else
    {
      v24 = *v23;
      if (v24 >= 0xFFFFFFFF)
        LODWORD(v24) = -1;
      return (v24 + 1);
    }
  }
  else
  {
    if (v10 < 2)
      return 0;
    v25 = (*(uint64_t (**)(uint64_t))(v9 + 48))((v16 + a1) & ~v15);
    if (v25 >= 2)
      return v25 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for FileDocumentConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = 0u;
  v10 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  v14 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v14;
  v15 = v14
      + ((((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(_QWORD *)(v7 + 64)
        + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + 1;
  if (a3 > v13)
  {
    if (v15 > 3)
    {
      v9 = 1u;
      if (v13 >= a2)
        goto LABEL_15;
LABEL_21:
      v17 = ~v13 + a2;
      if (v15 < 4)
      {
        if ((_DWORD)v14
           + ((((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))
             + *(_DWORD *)(v7 + 64)
             + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80)) != -1)
        {
          v18 = v17 & ~(-1 << (8 * v15));
          bzero(a1, v15);
          if ((_DWORD)v15 == 3)
          {
            *(_WORD *)a1 = v18;
            a1[2] = BYTE2(v18);
          }
          else if ((_DWORD)v15 == 2)
          {
            *(_WORD *)a1 = v18;
          }
          else
          {
            *a1 = v18;
          }
        }
      }
      else
      {
        bzero(a1, v15);
        *(_DWORD *)a1 = v17;
      }
      __asm { BR              X10 }
    }
    v16 = ((a3 - v13 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v16))
    {
      v9 = 4u;
      if (v13 < a2)
        goto LABEL_21;
LABEL_15:
      __asm { BR              X17 }
    }
    if (v16 >= 0x100)
      v9 = 2;
    else
      v9 = v16 > 1;
  }
  if (v13 < a2)
    goto LABEL_21;
  goto LABEL_15;
}

uint64_t type metadata accessor for FileDocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FileDocumentConfiguration);
}

void type metadata completion function for FileDocumentBox()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Optional();
  type metadata accessor for Published();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Bool>();
      if (v2 <= 0x3F)
        swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for FileDocumentBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FileDocumentBox);
}

uint64_t sub_1878C8290()
{
  return FileDocumentBox.base.getter();
}

uint64_t sub_1878C82B0(uint64_t a1)
{
  return specialized FileDocumentBox.base.setter(a1);
}

uint64_t sub_1878C82D0()
{
  return 16;
}

__n128 sub_1878C82DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1878C82E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileDocumentBox.base.didset()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  return specialized FileDocumentBox.base.setter(v0 + ((v1 + 32) & ~v1));
}

uint64_t specialized FileDocumentBox.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t specialized FileDocumentBox.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1878C8404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileDocumentBox.snapshotForSerialization(contentType:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UTType() - 8) + 80);
  return closure #1 in FileDocumentBox.snapshotForSerialization(contentType:)(a1, v1 + v6, v1 + ((v6 + v7 + v8) & ~v8), v3, v4);
}

uint64_t sub_1878C8530@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FileDocumentBox.isEditable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1878C855C()
{
  return FileDocumentBox.isEditable.setter();
}

uint64_t sub_1878C8580()
{
  return 16;
}

__n128 sub_1878C858C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1878C8598()
{
  return FileDocumentBox.fileURL.getter();
}

uint64_t sub_1878C85BC()
{
  return 16;
}

__n128 sub_1878C85C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1878C85D4()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for DocumentGroupConfiguration.ViewerFileDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for DocumentGroupConfiguration.NewFileDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DocumentGroupConfiguration.NewFileDocument);
}

void type metadata accessor for DocumentGroupConfiguration.EditorFileDocumentContainer()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.ViewerFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t sub_1878C8694()
{
  return FileDocumentBox.base.getter();
}

uint64_t sub_1878C86B4(uint64_t a1)
{
  return specialized FileDocumentBox.base.setter(a1);
}

uint64_t sub_1878C86D4()
{
  return 32;
}

__n128 sub_1878C86E0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1878C86EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for _ConditionalContent();
  v6[0] = v1;
  v6[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>, MEMORY[0x1E0CE65C0]);
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6);
  v5[1] = MEMORY[0x1E0CE7140];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v3, v5);
}

uint64_t WidgetCurvesContentModifier.curvesContent.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t WidgetCurvesContentModifier.curvesContent.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*WidgetCurvesContentModifier.curvesContent.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::WidgetCurvesContentModifier __swiftcall WidgetCurvesContentModifier.init(curvesContent:)(SwiftUI::WidgetCurvesContentModifier curvesContent)
{
  SwiftUI::WidgetCurvesContentModifier *v1;

  v1->curvesContent = curvesContent.curvesContent;
  return curvesContent;
}

void WidgetCurvesContentModifier.body(content:)(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

double static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v33 = *a1;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v11 = a2[5];
  v12 = a2[6];
  v13 = *((_DWORD *)a2 + 14);
  v14 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 16);
  v16 = *((_DWORD *)a2 + 17);
  v17 = *((_DWORD *)a2 + 18);
  v18 = *((_DWORD *)a2 + 19);
  v19 = *((_DWORD *)a2 + 20);
  v66 = *a2;
  v67 = v5;
  v68 = v6;
  v69 = __PAIR64__(v8, v7);
  v70 = v10;
  v71 = v9;
  v48 = v9;
  *(_QWORD *)&v72 = v11;
  *((_QWORD *)&v72 + 1) = v12;
  v46 = v13;
  *(_QWORD *)&v73 = __PAIR64__(v14, v13);
  v44 = v14;
  v42 = v15;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v16, v15);
  v40 = v16;
  v38 = v17;
  v74 = __PAIR64__(v18, v17);
  v36 = v18;
  v34 = v19;
  v75 = v19;
  a3(&v54, a1, &v66);
  lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v66 == 1)
  {
    LODWORD(v66) = v33;
    type metadata accessor for _GraphValue<WidgetCurvesContentBaseModifier>();
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    v56 = v4;
    v57 = v5;
    v58 = v6;
    v59 = __PAIR64__(v8, v7);
    v60 = v10;
    v61 = v48;
    *(_QWORD *)&v62 = v11;
    *((_QWORD *)&v62 + 1) = v12;
    *(_QWORD *)&v63 = __PAIR64__(v44, v46);
    *((_QWORD *)&v63 + 1) = __PAIR64__(v40, v42);
    v64 = __PAIR64__(v36, v38);
    v65 = v34;
    _ViewInputs.withoutGeometryDependencies.getter();
    _ViewInputs.hasWidgetMetadata.setter();
    specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
    type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryViewMetadata.Key>);
    lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<WidgetAuxiliaryViewMetadata.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryViewMetadata.Key>);
    PreferenceKeys.add(_:)();
    type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryURLPreferenceKey>);
    lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<WidgetAuxiliaryURLPreferenceKey> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryURLPreferenceKey>);
    PreferenceKeys.add(_:)();
    v71 |= 0x10u;
    v56 = v66;
    v57 = v67;
    v58 = v68;
    v59 = v69;
    v60 = v70;
    v61 = v71;
    v62 = v72;
    v63 = v73;
    v64 = v74;
    v65 = v75;
    LODWORD(v56) = _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.environment.setter();
    type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
    lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
    PreferenceKeys.add(_:)();
    v20 = v66;
    v21 = v68;
    v22 = v72;
    v23 = DWORD2(v73);
    v56 = v66;
    v47 = v67;
    v57 = v67;
    v58 = v68;
    v45 = v69;
    v59 = v69;
    v43 = HIDWORD(v69);
    v41 = v70;
    v60 = v70;
    v61 = v71;
    v39 = v71;
    v62 = v72;
    v49 = v73;
    v63 = v73;
    v37 = DWORD1(v73);
    v35 = HIDWORD(v73);
    v32 = v74;
    v64 = v74;
    v31 = HIDWORD(v74);
    v30 = v75;
    v65 = v75;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = swift_bridgeObjectRetain();
    a3(&v52, (int *)v24, &v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v25 = v52;
    v26 = v53;
    v56 = v52;
    v57 = v53;
    if ((PreferencesOutputs.subscript.getter() & 0x100000000) != 0)
    {
      v56 = v20;
      v57 = v47;
      v58 = v21;
      v59 = __PAIR64__(v43, v45);
      v60 = v41;
      v61 = v39;
      v62 = v22;
      *(_QWORD *)&v63 = __PAIR64__(v37, v49);
      *((_QWORD *)&v63 + 1) = __PAIR64__(v35, v23);
      v64 = __PAIR64__(v31, v32);
      v65 = v30;
      v52 = MEMORY[0x1E0DEE9D8];
      _ViewInputs.intern<A>(_:id:)();
    }
    v56 = v25;
    v57 = v26;
    PreferencesOutputs.subscript.getter();
    v56 = v25;
    v57 = v26;
    PreferencesOutputs.subscript.getter();
    v56 = v25;
    v57 = v26;
    PreferencesOutputs.subscript.getter();
    v27 = swift_bridgeObjectRelease();
    v56 = *((_QWORD *)&v22 + 1);
    v57 = v49;
    MEMORY[0x1E0C80A78](v27, v28);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(_QWORD *)a4 = v54;
  result = v55;
  a4[1] = v55;
  return result;
}

uint64_t implicit closure #2 in static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)()
{
  _ViewInputs.environment.getter();
  _GraphInputs.interfaceIdiom.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  lazy protocol witness table accessor for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter.value.getter@<X0>(id *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  id *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;
  id *v39;
  __int128 v40;
  _OWORD v41[2];
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v39 = a1;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v35 - v4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v35 - v8;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v35 - v12;
  v14 = *(_DWORD *)(v1 + 4);
  v15 = *(_DWORD *)(v1 + 8);
  v16 = *(_DWORD *)(v1 + 12);
  v38 = *(_OWORD *)(v1 + 24);
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v36 = v16;
    v37 = v14;
    AGGraphGetValue();
    v17 = swift_bridgeObjectRetain();
    PlatformItemList.mergedContentItem.getter(v17, (uint64_t)v13);
    swift_bridgeObjectRelease();
    v18 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 0, 1, v18);
    v19 = *MEMORY[0x1E0CFED28];
    if (v15 == *MEMORY[0x1E0CFED28])
    {
      v20 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
    }
    else
    {
      Value = AGGraphGetValue();
      outlined init with copy of PlatformItemList.Item?(Value, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    }
    if (v36 == v19)
    {
      v24 = xmmword_187BF9840;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
    }
    else
    {
      v28 = AGGraphGetValue();
      v29 = *(_BYTE *)(v28 + 16);
      v41[1] = *(_OWORD *)v28;
      v42 = v29;
      v30 = *(_OWORD *)AGGraphGetValue();
      v40 = v38;
      v41[0] = v30;
      AccessibilityAttachment.Tree.metadataAccessibility(in:idiom:)((uint64_t *)v41, (uint64_t)&v43);
      v24 = v43;
      v25 = v44;
      v26 = v45;
      v27 = v46;
    }
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v31 = v39;
    if (v37 == v19)
    {
      v32 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v5, 1, 1, v32);
    }
    else
    {
      v33 = AGGraphGetValue();
      outlined init with copy of PlatformItemList.Item?(v33, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
    }
    WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v13, (uint64_t)v9, (uint64_t *)&v43, (uint64_t)v5, v31);
    v34 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    return (*(uint64_t (**)(id *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 0, 1, v34);
  }
  else
  {
    v21 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    return (*(uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v39, 1, 1, v21);
  }
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void protocol witness for ViewModifier.body(content:) in conformance WidgetCurvesContentBaseModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static WidgetAuxiliaryCurvedContentKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryCurvedContentKey.defaultValue);
  return outlined init with copy of PlatformItemList.Item?(v3, a1, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t static WidgetAuxiliaryCurvedContentKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with take of WidgetAuxiliaryViewMetadata?(a1, (uint64_t)v7);
  v12 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
  {
    a2();
    outlined destroy of WidgetAuxiliaryViewMetadata?((uint64_t)v7);
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v7, (uint64_t)v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  }
  return outlined init with take of WidgetAuxiliaryViewMetadata?((uint64_t)v11, a1);
}

uint64_t outlined init with take of WidgetAuxiliaryViewMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance WidgetAuxiliaryCurvedContentKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryCurvedContentKey.defaultValue);
  return outlined init with copy of PlatformItemList.Item?(v3, a1, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WidgetAuxiliaryCurvedContentKey(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with take of WidgetAuxiliaryViewMetadata?(a1, (uint64_t)v7);
  v12 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
  {
    a2();
    outlined destroy of WidgetAuxiliaryViewMetadata?((uint64_t)v7);
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v7, (uint64_t)v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  }
  return outlined init with take of WidgetAuxiliaryViewMetadata?((uint64_t)v11, a1);
}

uint64_t View.widgetCurvedContentAllowed()(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();
  return View.input<A>(_:)((uint64_t)&type metadata for WidgetCurvedContentAllowed, a1, (uint64_t)&type metadata for WidgetCurvedContentAllowed, a2, v4);
}

unint64_t lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvedContentAllowed, &type metadata for WidgetCurvedContentAllowed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvedContentAllowed, &type metadata for WidgetCurvedContentAllowed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvedContentAllowed, &type metadata for WidgetCurvedContentAllowed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvedContentAllowed, &type metadata for WidgetCurvedContentAllowed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvedContentAllowed, &type metadata for WidgetCurvedContentAllowed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance WidgetCurvedContentAllowed()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WidgetCurvedContentAllowed()
{
  lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();
  return PropertyList.subscript.setter();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in WidgetCurvesContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for WidgetCurvesContentModifier()
{
  return &type metadata for WidgetCurvesContentModifier;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryCurvedContentKey()
{
  return &type metadata for WidgetAuxiliaryCurvedContentKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for WidgetCurvesContentBaseModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetCurvesContentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier, (uint64_t)&type metadata for WidgetCurvesContentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier;
  if (!lazy protocol witness table cache variable for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvesContentModifier, &type metadata for WidgetCurvesContentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetCurvesContentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier, (uint64_t)&type metadata for WidgetCurvesContentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_1878C9C54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<WidgetCurvedContentAllowed>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed, (uint64_t)&type metadata for WidgetCurvedContentAllowed, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t storeEnumTagSinglePayload for WidgetCurvesContentModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1878C9D1C + 4 * byte_187C69375[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1878C9D50 + 4 * byte_187C69370[v4]))();
}

uint64_t sub_1878C9D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878C9D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878C9D60);
  return result;
}

uint64_t sub_1878C9D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878C9D74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1878C9D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878C9D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetCurvesContentBaseModifier()
{
  return &type metadata for WidgetCurvesContentBaseModifier;
}

ValueMetadata *type metadata accessor for WidgetCurvedContentAllowed()
{
  return &type metadata for WidgetCurvedContentAllowed;
}

_UNKNOWN **base witness table accessor for ViewModifier in WidgetCurvesContentBaseModifier()
{
  return &protocol witness table for WidgetCurvesContentBaseModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in WidgetCurvedContentAllowed()
{
  return &protocol witness table for WidgetCurvedContentAllowed;
}

void type metadata accessor for _GraphValue<WidgetCurvesContentBaseModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<WidgetCurvesContentBaseModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WidgetCurvesContentBaseModifier>);
  }
}

uint64_t partial apply for implicit closure #2 in static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter;
  if (!lazy protocol witness table cache variable for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter, &unk_1E1B00328);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter);
  }
  return result;
}

void *type metadata accessor for WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter()
{
  return &unk_1E1B00328;
}

void specialized Sequence.first(where:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[2];
  char *v24;
  uint64_t v25;
  int v26;
  void (*v27)(char *, uint64_t, uint64_t);

  v24 = a4;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v23[1] = a1;
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v25 = *(_QWORD *)(v8 + 72);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    v26 = a3 & 1;
    while (1)
    {
      v27(v15, v17, v7);
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v18(v15, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7) == 1)
        break;
      v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v19(v11, v15, v7);
      if ((DocumentBrowserViewController.presentDocument(at:animated:)((uint64_t)v11, v26) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v22 = v24;
        v19(v24, v11, v7);
        v20 = v22;
        v21 = 0;
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v17 += v25;
      if (!--v16)
        goto LABEL_8;
    }
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
LABEL_8:
    v18(v15, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  v20 = v24;
  v21 = 1;
LABEL_11:
  v18(v20, v21, 1, v7);

}

uint64_t (*DocumentBrowserViewController.configurationMap.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t DocumentBrowserViewController.init(configurations:rootModifier:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  Class isa;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v30;
  _BYTE v31[88];
  uint64_t v32;

  v5 = OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_configurationMap] = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v2[v5] = a1;
  v7 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of RootModifier(a2, (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier]);

  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_19:
    type metadata accessor for UTType();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v30.receiver = v7;
    v30.super_class = (Class)type metadata accessor for DocumentBrowserViewController();
    v22 = objc_msgSendSuper2(&v30, sel_initForOpeningContentTypes_, isa);

    v23 = v22;
    objc_msgSend(v23, sel_setDelegate_, v23);
    objc_msgSend(v23, sel_setDefinesPresentationContext_, 1);
    if (v8)
    {
      v24 = a1 + 32;
      swift_bridgeObjectRetain();
      v25 = v23;
      while (1)
      {
        outlined init with copy of IdentifiedDocumentGroupConfiguration(v24, (uint64_t)v31);
        v26 = v31[0];
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v31);
        if ((v26 & 1) == 0)
          break;
        v24 += 128;
        if (!--v8)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease_n();
      v28 = 1;
    }
    else
    {
      v27 = v23;
      swift_bridgeObjectRelease();
LABEL_25:
      v28 = 0;
    }
    objc_msgSend(v23, sel_setAllowsDocumentCreation_, v28, v29);

    outlined destroy of RootModifier(a2);
    return (uint64_t)v23;
  }
  v29 = a2;
  v9 = a1 + 32;
  swift_bridgeObjectRetain();
  v10 = v8;
  while (1)
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v9, (uint64_t)v31);
    v11 = v32;
    swift_bridgeObjectRetain();
    result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v31);
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v6[2];
    v15 = v14 + v13;
    if (__OFADD__(v14, v13))
      break;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v15 <= v6[3] >> 1)
    {
      if (*(_QWORD *)(v11 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v14 <= v15)
        v16 = v14 + v13;
      else
        v16 = v14;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v16, 1, v6);
      v6 = (_QWORD *)result;
      if (*(_QWORD *)(v11 + 16))
      {
LABEL_14:
        v17 = (v6[3] >> 1) - v6[2];
        result = type metadata accessor for UTType();
        if (v17 < v13)
          goto LABEL_30;
        result = swift_arrayInitWithCopy();
        if (v13)
        {
          v18 = v6[2];
          v19 = __OFADD__(v18, v13);
          v20 = v18 + v13;
          if (v19)
            goto LABEL_31;
          v6[2] = v20;
        }
        goto LABEL_4;
      }
    }
    if (v13)
      goto LABEL_29;
LABEL_4:
    swift_bridgeObjectRelease();
    v9 += 128;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      a2 = v29;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(char a1, void (*a2)(char *, _QWORD), uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[6];

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = MEMORY[0x1E0C80A78](v14, v17);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)aBlock - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v14, v18);
    v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a2;
    *(_QWORD *)(v20 + 24) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, (char *)aBlock - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    aBlock[4] = partial apply for closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_19_0;
    v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a4, sel_closeWithCompletionHandler_, v21);
    _Block_release(v21);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v15 + 56))(v13, 1, 1, v14, v18);
    a2(v13, 0);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
}

Swift::OpaquePointer_optional __swiftcall DocumentBrowserViewController.presentDocuments(at:animated:)(Swift::OpaquePointer at, Swift::Bool animated)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  Swift::Bool v18;
  uint64_t v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v21;
  void *v22;
  _BYTE v23[16];
  Swift::OpaquePointer_optional result;

  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v23[-v16];
  specialized Sequence.first(where:)((uint64_t)at._rawValue, v2, animated, &v23[-v16]);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    v19 = 0;
  }
  else
  {
    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32);
    v20(v9, v13, v5);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v21 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BF9830;
    v20((_BYTE *)(v19 + v21), v9, v5);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
  v22 = (void *)v19;
  result.value._rawValue = v22;
  result.is_nil = v18;
  return result;
}

uint64_t DocumentBrowserViewController.presentDocument(at:animated:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[6];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[3];

  v3 = v2;
  v48 = type metadata accessor for URL();
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v6);
  v47 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UTType?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UTType();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v3;
  v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations);
  swift_bridgeObjectRetain();
  static DocumentUtils.contentType(of:)(a1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for UTType?);
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    memset(v56, 0, 25);
    swift_bridgeObjectRelease();
LABEL_17:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v50, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v42 = a2;
    v44 = v17 + 32;
    swift_bridgeObjectRetain();
    v19 = 0;
    v43 = a1;
    v41 = v18;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v44 + (v19 << 7), (uint64_t)&v57);
      v20 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 16);
      if (v20)
        break;
LABEL_5:
      ++v19;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v57);
      if (v19 == v18)
      {
        swift_bridgeObjectRelease();
        LOBYTE(a2) = v42;
        goto LABEL_13;
      }
    }
    v21 = *((_QWORD *)&v62 + 1)
        + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    swift_bridgeObjectRetain_n();
    v22 = *(_QWORD *)(v13 + 72);
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v21 += v22;
      if (!--v20)
      {
        swift_bridgeObjectRelease_n();
        a1 = v43;
        v18 = v41;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v54 = v61;
    v55 = v62;
    v56[0] = v63[0];
    *(_OWORD *)((char *)v56 + 9) = *(_OWORD *)((char *)v63 + 9);
    v50 = v57;
    v51 = v58;
    v52 = v59;
    v53 = v60;
    LOBYTE(a2) = v42;
    a1 = v43;
  }
  else
  {
LABEL_13:
    v55 = 0u;
    memset(v56, 0, 25);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v50 + 1))
    goto LABEL_17;
  v61 = v54;
  v62 = v55;
  v63[0] = v56[0];
  *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)((char *)v56 + 9);
  v57 = v50;
  v58 = v51;
  v59 = v52;
  v60 = v53;
  v23 = *((_QWORD *)&v50 + 1);
  v24 = v51;
  v25 = (*(uint64_t (**)(_QWORD, _QWORD))(v51 + 8))(*((_QWORD *)&v50 + 1), v51);
  v26 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v47, a1, v48);
  v27 = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 120))(v26, v23, v24);
  outlined init with copy of NewDocumentProvider?((uint64_t)&v58 + 8, (uint64_t)&v50);
  v28 = *((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v29 = v52;
    __swift_project_boxed_opaque_existential_1(&v50, *((uint64_t *)&v51 + 1));
    v30 = *(_QWORD *)&v27[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8);
    v32 = swift_unknownObjectRetain();
    v31(v32, v30, v28, v29);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  }
  else
  {
    outlined destroy of NewDocumentProvider?((uint64_t)&v50);
  }
  v34 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)&v57, (uint64_t)&v50);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 24) = v27;
  v36 = v55;
  *(_OWORD *)(v35 + 96) = v54;
  *(_OWORD *)(v35 + 112) = v36;
  *(_OWORD *)(v35 + 128) = v56[0];
  *(_OWORD *)(v35 + 137) = *(_OWORD *)((char *)v56 + 9);
  v37 = v51;
  *(_OWORD *)(v35 + 32) = v50;
  *(_OWORD *)(v35 + 48) = v37;
  v38 = v53;
  *(_OWORD *)(v35 + 64) = v52;
  *(_OWORD *)(v35 + 80) = v38;
  *(_BYTE *)(v35 + 153) = a2 & 1;
  v49[4] = partial apply for closure #1 in DocumentBrowserViewController.presentDocument(at:animated:);
  v49[5] = v35;
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 1107296256;
  v49[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v49[3] = &block_descriptor_68;
  v39 = _Block_copy(v49);
  v40 = v27;
  swift_release();
  objc_msgSend(v40, sel_openWithCompletionHandler_, v39);
  _Block_release(v39);

  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v57);
  return 1;
}

void closure #1 in DocumentBrowserViewController.presentDocument(at:animated:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  if ((a1 & 1) != 0)
  {
    v8 = a2 + 16;
    swift_beginAccess();
    v9 = MEMORY[0x18D760234](v8);
    if (v9)
    {
      v10 = (void *)v9;
      v11 = DocumentBrowserViewController.makeHost(document:configuration:)(a3, a4);
      v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v11);
      objc_msgSend(v12, sel_loadViewIfNeeded);
      objc_msgSend(v12, sel_setModalPresentationStyle_, 0);
      objc_msgSend(v12, sel_setTransitioningDelegate_, v10);
      objc_msgSend(v10, sel_presentViewController_animated_completion_, v12, a5 & 1, 0);

    }
  }
}

id DocumentBrowserViewController.makeHost(document:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t (*v16)();
  _QWORD *v17;
  void (*v18)(uint64_t);
  _QWORD **v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v28;
  char v29[8];
  char v30[8];
  _QWORD v31[4];
  _BYTE v32[32];
  _BYTE v33[128];

  v3 = v2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IdentifiedDocumentGroupConfiguration>, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, v6 + 32);
  v7 = objc_allocWithZone((Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation());
  v8 = IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)(v6, MEMORY[0x1E0DEE9D8]);
  v9 = objc_allocWithZone((Class)type metadata accessor for DocumentViewController());
  v10 = v8;
  v11 = specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(v10, 0, 0);
  v12 = v2 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier;
  swift_beginAccess();
  outlined init with copy of RootModifier(v12, (uint64_t)v33);
  DocumentViewController.rootModifier.setter((uint64_t)v33);
  IdentifiedDocumentGroupDocumentCreation.updateCurrentDocument(with:configuration:)(a1, a2);
  v13 = v3 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_configurationMap;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v13 + 16)
    && (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(a2),
        v15 = v14,
        swift_bridgeObjectRelease(),
        (v15 & 1) != 0))
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v33);
    v16 = DocumentBrowserViewController.configurationMap.modify();
    v18 = specialized Dictionary.subscript.modify(v31, (uint64_t)v33);
    if (*v17)
    {
      v19 = (_QWORD **)v17;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<DocumentViewController>((uint64_t)v29, (uint64_t)v30);
      v20 = *v19;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v19 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        *v19 = v20;
      }
      v23 = v20[2];
      v22 = v20[3];
      v24 = v23 + 1;
      if (v23 >= v22 >> 1)
      {
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
        v24 = v23 + 1;
        v20 = v28;
        *v19 = v28;
      }
      v20[2] = v24;
      outlined init with take of WeakBox<DocumentViewController>((uint64_t)v30, (uint64_t)&v20[v23 + 4]);
    }
    ((void (*)(_QWORD *, _QWORD))v18)(v31, 0);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v33);
    ((void (*)(_BYTE *, _QWORD))v16)(v32, 0);
  }
  else
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v33);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<DocumentViewController>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_187BF9830;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<DocumentViewController>((uint64_t)v32, v25 + 32);
    swift_beginAccess();
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v31[0] = *(_QWORD *)v13;
    *(_QWORD *)v13 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, (uint64_t)v33, v26);
    *(_QWORD *)v13 = v31[0];
    swift_bridgeObjectRelease();
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v33);
    swift_endAccess();
  }

  return v11;
}

uint64_t DocumentBrowserViewController.updateHosts()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t *v8;
  ValueMetadata *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  ValueMetadata *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  _BYTE v36[48];
  uint64_t v37;
  _BYTE v38[104];
  _BYTE v39[104];
  char v40[8];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_configurationMap);
  swift_beginAccess();
  v31 = *v1 + 64;
  v2 = 1 << *(_BYTE *)(*v1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(*v1 + 64);
  v5 = v0 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier;
  v32 = (unint64_t)(v2 + 63) >> 6;
  v33 = *v1;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = &OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier;
  v9 = &type metadata for RootModifier;
  v10 = &lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>;
  while (v4)
  {
    v11 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v12 = v11 | (v7 << 6);
LABEL_23:
    result = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v12);
    v16 = *(_QWORD *)(result + 16);
    if (v16)
    {
      v34 = v4;
      v35 = v7;
      v17 = result + 32;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      do
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v17, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<DocumentViewController>);
        v18 = MEMORY[0x18D760234](v40);
        if (v18)
        {
          v19 = (char *)v18;
          outlined init with copy of RootModifier(v5, (uint64_t)v39);
          v20 = (uint64_t)&v19[*v8];
          swift_beginAccess();
          outlined assign with copy of RootModifier?((uint64_t)v39, v20);
          swift_endAccess();
          outlined init with copy of RootModifier?(v20, (uint64_t)v36);
          if (v37 == 1)
          {
            outlined destroy of AccessibilityTableContext?((uint64_t)v36, &lazy cache variable for type metadata for RootModifier?, (uint64_t)v9);
          }
          else
          {
            outlined init with take of RootModifier((uint64_t)v36, (uint64_t)v38);
            v21 = MEMORY[0x18D760234](&v19[v10[352]]);
            if (v21)
            {
              v22 = (void *)v21;
              type metadata accessor for DocumentHostingController();
              v23 = swift_dynamicCastClass();
              if (v23)
              {
                v24 = v23;
                outlined init with copy of RootModifier((uint64_t)v38, (uint64_t)v36);
                v25 = v5;
                v26 = v10;
                v27 = v9;
                v28 = v8;
                v29 = v24 + direct field offset for DocumentHostingController.rootModifier;
                swift_beginAccess();
                v30 = v29;
                v8 = v28;
                v9 = v27;
                v10 = v26;
                v5 = v25;
                outlined assign with copy of RootModifier((uint64_t)v36, v30);
                swift_endAccess();
                DocumentHostingController.scenesDidChange(phaseChanged:)(1);
                outlined destroy of RootModifier((uint64_t)v36);
              }

            }
            outlined destroy of RootModifier((uint64_t)v38);
          }
          outlined destroy of AccessibilityTableContext?((uint64_t)v39, &lazy cache variable for type metadata for RootModifier?, (uint64_t)v9);

        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<DocumentViewController>);
        v17 += 8;
        --v16;
      }
      while (v16);
      result = swift_bridgeObjectRelease();
      v4 = v34;
      v7 = v35;
    }
  }
  v13 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v32)
    return swift_release();
  v14 = *(_QWORD *)(v31 + 8 * v13);
  ++v7;
  if (v14)
    goto LABEL_22;
  v7 = v13 + 1;
  if (v13 + 1 >= v32)
    return swift_release();
  v14 = *(_QWORD *)(v31 + 8 * v7);
  if (v14)
    goto LABEL_22;
  v7 = v13 + 2;
  if (v13 + 2 >= v32)
    return swift_release();
  v14 = *(_QWORD *)(v31 + 8 * v7);
  if (v14)
    goto LABEL_22;
  v7 = v13 + 3;
  if (v13 + 3 >= v32)
    return swift_release();
  v14 = *(_QWORD *)(v31 + 8 * v7);
  if (v14)
  {
LABEL_22:
    v4 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_23;
  }
  v15 = v13 + 4;
  if (v15 >= v32)
    return swift_release();
  v14 = *(_QWORD *)(v31 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v32)
      return swift_release();
    v14 = *(_QWORD *)(v31 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_37:
  __break(1u);
  return result;
}

void DocumentBrowserViewController.animationController(forDismissed:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v9 = (void *)swift_dynamicCastObjCClassUnconditional();
  v10 = a1;
  v11 = objc_msgSend(v9, sel_childViewControllers);
  type metadata accessor for UIViewController();
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v12 >> 62))
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23)
    goto LABEL_10;
LABEL_3:
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_11:
    v13 = (id)MEMORY[0x18D75E3BC](0, v12);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  v13 = *(id *)(v12 + 32);
LABEL_6:
  v14 = v13;
  swift_bridgeObjectRelease();
  type metadata accessor for DocumentViewController();
  v15 = objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_document);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_fileURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v21 = objc_msgSend(v2, sel_transitionControllerForDocumentAtURL_, v20);

    v22 = objc_msgSend(v9, sel_view);
    objc_msgSend(v21, sel_setTargetView_, v22);

  }
  else
  {

  }
}

id DocumentBrowserViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DocumentBrowserViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DocumentBrowserViewController()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of RootModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RootModifier?, (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of WeakBox<DocumentViewController>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<DocumentViewController>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NewDocumentProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for NewDocumentProvider?, (unint64_t *)&lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NewDocumentProvider?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for NewDocumentProvider?, (unint64_t *)&lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1878CBDD0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878CBDF4()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_BYTE *)(v0 + 152));
  return swift_deallocObject();
}

void partial apply for closure #1 in DocumentBrowserViewController.presentDocument(at:animated:)(char a1)
{
  uint64_t v1;

  closure #1 in DocumentBrowserViewController.presentDocument(at:animated:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, *(_BYTE *)(v1 + 153));
}

void specialized DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  void (*v44)(_QWORD, uint64_t, uint64_t);
  id v45;
  NSURL *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _OWORD v70[6];
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  __int128 i;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[5];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  Swift::String v100;

  v62 = a1;
  v63 = a2;
  v3 = type metadata accessor for UTType();
  v68 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v67 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  v7 = *(_QWORD *)(v65 + 64);
  MEMORY[0x1E0C80A78](v6, v8);
  v61 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v58 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v64 = (char *)&v58 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v69 = (char *)&v58 - v18;
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations);
  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRetain();
  v21 = 0;
  if (v20)
    goto LABEL_3;
LABEL_2:
  v84 = 0u;
  memset(v85, 0, 25);
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v21 = v20;
  for (i = 0u; ; outlined init with copy of IdentifiedDocumentGroupConfiguration(v19 + 32 + (v21++ << 7), (uint64_t)&i))
  {
    outlined init with take of IdentifiedDocumentGroupConfiguration?((uint64_t)&i, (uint64_t)&v72);
    if (!*((_QWORD *)&v72 + 1))
      goto LABEL_10;
    v70[4] = v76;
    v70[5] = v77;
    v71[0] = v78[0];
    *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)((char *)v78 + 9);
    v70[0] = v72;
    v70[1] = v73;
    v70[2] = v74;
    v70[3] = v75;
    outlined init with copy of DocumentGroupConfiguration((uint64_t)v70, (uint64_t)&v86);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v70);
    if (!*((_QWORD *)&v86 + 1))
    {
LABEL_10:
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v98 = 0u;
      v99 = 0;
      swift_bridgeObjectRelease();
LABEL_11:
      outlined destroy of AccessibilityTableContext?((uint64_t)&v93, (unint64_t *)&lazy cache variable for type metadata for DocumentGroupConfiguration?, (uint64_t)&type metadata for DocumentGroupConfiguration);
      return;
    }
    v83 = v90;
    v84 = v91;
    v85[0] = v92;
    i = v86;
    v80 = v87;
    v81 = v88;
    v82 = v89;
    if ((v86 & 1) == 0)
      break;
    outlined destroy of DocumentGroupConfiguration((uint64_t)&i);
    if (v21 == v20)
      goto LABEL_2;
LABEL_3:
    if (v21 >= *(_QWORD *)(v19 + 16))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      return;
    }
  }
  v97 = v90;
  v98 = v91;
  v99 = v92;
  v93 = v86;
  v94 = v87;
  v95 = v88;
  v96 = v89;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v93 + 1))
    goto LABEL_11;
  v83 = v97;
  v84 = v98;
  v85[0] = v99;
  i = v93;
  v80 = v94;
  v81 = v95;
  v82 = v96;
  v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v23 = objc_msgSend(v22, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v100._object = (void *)0x8000000187BD9E80;
  v26._countAndFlagsBits = 0x64656C7469746E55;
  v26._object = (void *)0xE800000000000000;
  v27.value._countAndFlagsBits = 0x746E656D75636F44;
  v27.value._object = (void *)0xE900000000000073;
  v28._countAndFlagsBits = 0x64656C7469746E55;
  v28._object = (void *)0xE800000000000000;
  v100._countAndFlagsBits = 0xD00000000000001DLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v100);

  if (!*(_QWORD *)(*((_QWORD *)&v84 + 1) + 16))
    goto LABEL_19;
  v29 = *((_QWORD *)&v84 + 1)
      + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
  v30 = *(void (**)(char *, unint64_t, uint64_t))(v68 + 16);
  v60 = v3;
  v30(v67, v29, v3);
  v31 = v64;
  URL.appendingPathComponent(_:conformingTo:)();
  swift_bridgeObjectRelease();
  v32 = *((_QWORD *)&i + 1);
  v33 = v80;
  v34 = (*(uint64_t (**)(_QWORD, _QWORD))(v80 + 8))(*((_QWORD *)&i + 1), v80);
  v35 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v35(v12, v31, v66);
  v36 = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 120))(v12, v32, v33);
  outlined init with copy of NewDocumentProvider?((uint64_t)&v80 + 8, (uint64_t)&v72);
  v37 = *((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v38 = v74;
    __swift_project_boxed_opaque_existential_1(&v72, *((uint64_t *)&v73 + 1));
    v59 = v36;
    v39 = *(_QWORD *)&v36[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8);
    v41 = swift_unknownObjectRetain();
    v40(v41, v39, v37, v38);
    v36 = v59;
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
  }
  else
  {
    outlined destroy of NewDocumentProvider?((uint64_t)&v72);
  }
  v42 = *(_QWORD *)&v36[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
  ObjectType = swift_getObjectType();
  v44 = *(void (**)(_QWORD, uint64_t, uint64_t))(v42 + 40);
  swift_unknownObjectRetain();
  v44(0, ObjectType, v42);
  swift_unknownObjectRelease();
  v45 = objc_msgSend(v36, sel_fileURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v46);
  v59 = v47;
  v48 = v61;
  v49 = v66;
  v35(v61, v12, v66);
  v50 = v65;
  v51 = (*(unsigned __int8 *)(v65 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v52 = (char *)swift_allocObject();
  v53 = v63;
  *((_QWORD *)v52 + 2) = v62;
  *((_QWORD *)v52 + 3) = v53;
  *((_QWORD *)v52 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v52[v51], v48, v49);
  *(_QWORD *)&v74 = partial apply for closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:);
  *((_QWORD *)&v74 + 1) = v52;
  *(_QWORD *)&v72 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v72 + 1) = 1107296256;
  *(_QWORD *)&v73 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  *((_QWORD *)&v73 + 1) = &block_descriptor_13_2;
  v54 = _Block_copy(&v72);
  swift_retain();
  v55 = v36;
  swift_release();
  v56 = v59;
  objc_msgSend(v55, sel_saveToURL_forSaveOperation_completionHandler_, v59, 0, v54);
  _Block_release(v54);

  v57 = *(void (**)(char *, uint64_t))(v50 + 8);
  v57(v12, v49);
  v57(v64, v49);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v60);
  v57(v69, v49);
  outlined destroy of DocumentGroupConfiguration((uint64_t)&i);
}

uint64_t specialized DocumentBrowserViewController.documentBrowser(_:didPickDocumentsAt:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t, double))(v7 + 16))(v5, a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
      DocumentBrowserViewController.presentDocument(at:animated:)((uint64_t)v11, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v7 + 56))(v5, 1, 1, v6, v9);
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

void specialized DocumentBrowserViewController.documentBrowser(_:failedToImportDocumentAt:error:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjCClassFromMetadata;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::String_optional v33;
  Swift::String v34;
  Swift::String v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;

  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_bundleForClass_, ObjCClassFromMetadata);
  v42._countAndFlagsBits = 0xD000000000000037;
  v42._object = (void *)0x8000000187BEB1B0;
  v7._object = (void *)0x8000000187BEB180;
  v7._countAndFlagsBits = 0xD000000000000020;
  v8.value._countAndFlagsBits = 0x746E656D75636F44;
  v8.value._object = (void *)0xE900000000000073;
  v9._countAndFlagsBits = 0xD000000000000020;
  v9._object = (void *)0x8000000187BEB180;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v42);

  v11 = objc_msgSend(v5, sel_bundleForClass_, ObjCClassFromMetadata);
  v43._countAndFlagsBits = 0xD000000000000081;
  v43._object = (void *)0x8000000187BEB230;
  v12._object = (void *)0x8000000187BEB1F0;
  v12._countAndFlagsBits = 0x1000000000000031;
  v13.value._countAndFlagsBits = 0x746E656D75636F44;
  v13.value._object = (void *)0xE900000000000073;
  v14._countAndFlagsBits = 0x1000000000000031;
  v14._object = (void *)0x8000000187BEB1F0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v43);

  if (a3)
  {
    swift_getErrorValue();
    v15 = Error.localizedDescription.getter();
    v17 = v16;
  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v19 = URL.absoluteString.getter();
  v20 = (void *)MEMORY[0x18D75CC88](v19);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_displayNameAtPath_, v20);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_187BF9820;
  v26 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v25 + 56) = MEMORY[0x1E0DEA968];
  v27 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v25 + 32) = v22;
  *(_QWORD *)(v25 + 40) = v24;
  *(_QWORD *)(v25 + 96) = v26;
  *(_QWORD *)(v25 + 104) = v27;
  *(_QWORD *)(v25 + 64) = v27;
  *(_QWORD *)(v25 + 72) = v15;
  *(_QWORD *)(v25 + 80) = v17;
  v28 = String.init(format:_:)();
  v30 = v29;
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v5, sel_bundleForClass_, ObjCClassFromMetadata);
  v44._countAndFlagsBits = 0xD000000000000029;
  v44._object = (void *)0x8000000187BEB2C0;
  v32._countAndFlagsBits = 19279;
  v32._object = (void *)0xE200000000000000;
  v33.value._countAndFlagsBits = 0x746E656D75636F44;
  v33.value._object = (void *)0xE900000000000073;
  v34._countAndFlagsBits = 19279;
  v34._object = (void *)0xE200000000000000;
  v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v44);

  v36 = (void *)MEMORY[0x18D75CC88](v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease();
  v37 = (void *)MEMORY[0x18D75CC88](v28, v30);
  swift_bridgeObjectRelease();
  v38 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, v36, v37, 1);

  v39 = (void *)MEMORY[0x18D75CC88](v35._countAndFlagsBits, v35._object);
  swift_bridgeObjectRelease();
  v40 = objc_msgSend((id)objc_opt_self(), sel_actionWithTitle_style_handler_, v39, 1, 0);

  objc_msgSend(v38, sel_addAction_, v40);
  objc_msgSend(a1, sel_presentViewController_animated_completion_, v38, 1, 0);

}

void specialized DocumentBrowserViewController.animationController(forPresented:presenting:source:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v9 = (void *)swift_dynamicCastObjCClassUnconditional();
  v10 = a1;
  v11 = objc_msgSend(v9, sel_childViewControllers);
  type metadata accessor for UIViewController();
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v12 >> 62))
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_10;
LABEL_3:
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_11:
    v13 = (id)MEMORY[0x18D75E3BC](0, v12);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  v13 = *(id *)(v12 + 32);
LABEL_6:
  v14 = v13;
  swift_bridgeObjectRelease();
  type metadata accessor for DocumentViewController();
  v15 = objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_document);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_fileURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v21 = objc_msgSend(v2, sel_transitionControllerForDocumentAtURL_, v20);

    v22 = objc_msgSend(v9, sel_view);
    objc_msgSend(v21, sel_setTargetView_, v22);

    v23 = objc_msgSend(v16, sel_progress);
    objc_msgSend(v21, sel_setLoadingProgress_, v23);

  }
  else
  {

  }
}

uint64_t sub_1878CCCF0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1878CCD14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(a1, *(void (**)(char *, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1878CCDD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI11GeneralItem33_69F00159ECCD7162D5EDC19B53BBB085LLVs5NeverOTg503_s7d42UI10GridLayoutV5CacheV13sizeGenerally33_69hijklm9LLyyFAA11fG12AGLLVSiXEfU_AG0qR0V0T0VAG4AxisO3SetVTf1cn_n(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v35 = result;
  v4 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_32;
  v5 = MEMORY[0x1E0DEE9D8];
  if (!v4)
    return v5;
  v7 = a2;
  v37 = MEMORY[0x1E0DEE9D8];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (v7 < v35 || v4 < 0)
    goto LABEL_33;
  v32 = v7;
  v5 = v37;
  v8 = v35;
  v9 = 104 * v35 + 112;
  v33 = a3;
  while (v7 != v8)
  {
    result = LayoutSubviews.subscript.getter();
    if (v35 < 0)
      goto LABEL_30;
    v10 = *(_QWORD *)(a3 + 136);
    if (v8 >= *(_QWORD *)(v10 + 16))
      goto LABEL_31;
    v11 = *a4;
    v36 = *(unsigned __int8 *)(v10 + v9);
    LayoutProxy.layoutPriority.getter();
    v13 = v12;
    static ProposedViewSize.zero.getter();
    LayoutSubview.sizeThatFits(_:)();
    v15 = v14;
    v17 = v16;
    static ProposedViewSize.infinity.getter();
    result = LayoutSubview.sizeThatFits(_:)();
    if (v11 == 1)
    {
      v27 = v15;
      v7 = v32;
      a3 = v33;
    }
    else
    {
      v7 = v32;
      if (v11 == 3)
      {
        v20 = v15 + v17;
        v21 = v18 + v19 - (v15 + v17);
        v22 = v18 - v15;
        v23 = v19 - v17;
        if (v23 < v22)
          v22 = v23;
        if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) != 0)
          v24 = 0.0;
        else
          v24 = v22;
        v25 = -v20;
        if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
          v26 = 0.0;
        else
          v26 = -v20;
        a3 = v33;
        goto LABEL_25;
      }
      v18 = v19;
      v27 = v17;
      a3 = v33;
    }
    v21 = v18 - v27;
    v28 = v18 - v27;
    v25 = -v27;
    v26 = 0.0;
    if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) != 0)
      v24 = 0.0;
    else
      v24 = -v27;
LABEL_25:
    v30 = *(_QWORD *)(v37 + 16);
    v29 = *(_QWORD *)(v37 + 24);
    if (v30 >= v29 >> 1)
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1);
    LODWORD(v25) = v36 & v11;
    *(_QWORD *)(v37 + 16) = v30 + 1;
    v31 = v37 + (v30 << 6);
    *(_QWORD *)(v31 + 32) = v8;
    *(_QWORD *)(v31 + 40) = v13;
    *(double *)(v31 + 48) = v15;
    *(double *)(v31 + 56) = v17;
    *(double *)(v31 + 64) = v21;
    *(double *)(v31 + 72) = v24;
    *(double *)(v31 + 80) = v26;
    *(_BYTE *)(v31 + 88) = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)&v25));
    ++v8;
    v9 += 104;
    if (v7 == v8)
      return v5;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Grid._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Grid._tree.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*Grid._tree.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t Grid.init(alignment:horizontalSpacing:verticalSpacing:content:)()
{
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t static Grid._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v12 = type metadata accessor for _VariadicView.Tree();
  LODWORD(v21) = v7;
  type metadata accessor for Grid(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  v14 = a2[3];
  v15 = a2[4];
  v18 = *(_OWORD *)(a2 + 7);
  v19 = *(_OWORD *)(a2 + 5);
  v16 = a2[9];
  _GraphValue.subscript.getter();
  v20[1] = a4;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v14;
  v25 = v15;
  v26 = v19;
  v27 = v18;
  v28 = v16;
  v29 = v11;
  v20[0] = &protocol witness table for GridLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static Grid._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for Grid(0, a2, a3, a4);
  v9 = type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t partial apply for closure #1 in static Grid._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static Grid._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for Grid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Grid);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Grid<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static Grid._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t GridRow.alignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t GridRow.alignment.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*GridRow.alignment.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridRow.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t GridRow.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*GridRow.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridRow.init(alignment:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = a1;
  *(_BYTE *)(a7 + 8) = a2 & 1;
  type metadata accessor for GridRow(0, a5, a6, a4);
  return a3();
}

uint64_t type metadata accessor for GridRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GridRow);
}

uint64_t static GridRow._makeView(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  _BYTE v26[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  type metadata accessor for GridRow(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v11 = a2[3];
  v12 = a2[4];
  v15 = *(_OWORD *)(a2 + 7);
  v16 = *(_OWORD *)(a2 + 5);
  v13 = a2[9];
  _GraphValue.subscript.getter();
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v11;
  v21 = v12;
  v22 = v16;
  v23 = v15;
  v24 = v13;
  v25 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v26, &v17, a3, a4);
}

uint64_t partial apply for closure #1 in static GridRow._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GridRow._makeView(view:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t static GridRow._makeViewList(view:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  _BYTE v28[4];
  int v29[3];

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v17 = *(_OWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 56);
  v15 = *(_DWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_BYTE *)(a2 + 80);
  LODWORD(v18) = *a1;
  type metadata accessor for GridRow(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E0CE4020], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v12;
  v22 = v13;
  v23 = v17;
  v24 = v16;
  v25 = v15;
  v26 = v10;
  v27 = v11;
  return static RowTransformTrait.makeViewList<A>(content:alignment:inputs:)(v29, (uint64_t)v28, &v18, a3, a4);
}

uint64_t closure #1 in static GridRow._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v7 = type metadata accessor for GridRow(0, a2, a3, a4);
  v8 = a1 + *(int *)(v7 + 36);
  v12[2] = v7;
  v12[3] = a2;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, a4, (uint64_t)v12, a2, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t partial apply for closure #1 in static GridRow._makeViewList(view:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GridRow._makeView(view:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #2 in static GridRow._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for GridRow(0, a2, a3, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E0CE4020], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_20, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t partial apply for closure #2 in static GridRow._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static GridRow._makeViewList(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t static RowTransformTrait.makeViewList<A>(content:alignment:inputs:)(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = *((_DWORD *)a3 + 2);
  v9 = a3[2];
  v10 = *((_DWORD *)a3 + 6);
  v11 = *((_DWORD *)a3 + 7);
  v12 = *((_DWORD *)a3 + 8);
  v13 = *((_DWORD *)a3 + 9);
  v15 = a3[5];
  v14 = a3[6];
  v16 = a3[7];
  v17 = *((_DWORD *)a3 + 16);
  v18 = a3[9];
  v19 = *((_BYTE *)a3 + 80);
  v35 = *a3;
  v36 = v8;
  v37 = v9;
  *(_QWORD *)&v38 = __PAIR64__(v11, v10);
  *((_QWORD *)&v38 + 1) = __PAIR64__(v13, v12);
  v39 = v15;
  *(_QWORD *)&v40 = v14;
  *((_QWORD *)&v40 + 1) = v16;
  v41 = v17;
  v42 = v18;
  v43 = v19;
  v26 = v35;
  v27 = v8;
  v28 = v9;
  *(_QWORD *)&v29 = __PAIR64__(v11, v10);
  *((_QWORD *)&v29 + 1) = __PAIR64__(v13, v12);
  v30 = v15;
  *(_QWORD *)&v31 = v14;
  *((_QWORD *)&v31 + 1) = v16;
  v32 = v17;
  v33 = v18;
  v34 = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = _ViewListInputs.traits.getter();
  if ((v20 & 0x100000000) != 0)
    v21 = *MEMORY[0x1E0CFED28];
  else
    v21 = v20;
  type metadata accessor for _GraphValue<VerticalAlignment?>();
  LODWORD(v26) = v21;
  HIDWORD(v26) = _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RowTransformTrait and conformance RowTransformTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v26) = 0;
  _ViewListInputs.traits.setter();
  v22 = v43;
  if (v42)
  {
    v26 = v42;
    LOBYTE(v27) = v43 & 1;
    specialized Set._Variant.insert(_:)(&v25, (uint64_t)&type metadata for GridMetadata);
    v23 = v26;
    v22 = v27;
  }
  else
  {
    v23 = 0;
  }
  LODWORD(v25) = v7;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v40;
  v32 = v41;
  v33 = v23;
  v34 = v22;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a5 + 32))(&v25, &v26, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static GridRow._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 3);
  v6 = *a1;
  v7 = v3;
  v8 = v4;
  return (*(uint64_t (**)(__int128 *))(a3 + 40))(&v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GridRow<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static GridRow._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GridRow<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static GridRow._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GridRow<A>(__int128 *a1, uint64_t a2)
{
  return static GridRow._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t RowTransformTrait.value.getter@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (*MEMORY[0x1E0CFED28] == a1)
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v5 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  RowTransformTrait.update(data:)(&v4);
  result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

uint64_t RowTransformTrait.update(data:)(uint64_t *a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = AGMakeUniqueID();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E0CE4020], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetValue();
  v4 = *(_QWORD *)result;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 16);
  if (v6)
  {
    v7 = (char *)(v5 + 48);
    v8 = *(_QWORD *)(*a1 + 16);
    while (1)
    {
      v9 = *v7;
      v7 += 24;
      if ((v9 & 0xE0) == 0x20)
        break;
      if (!--v8)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v10 = *(_BYTE *)(result + 8) | 0x20;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, (char *)v5);
      v5 = result;
    }
    v12 = *(_QWORD *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 24);
    if (v12 >= v11 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v5);
      v5 = result;
    }
    *(_QWORD *)(v5 + 16) = v12 + 1;
    v13 = v5 + 24 * v12;
    *(_QWORD *)(v13 + 32) = v2;
    *(_QWORD *)(v13 + 40) = v4;
    *(_BYTE *)(v13 + 48) = v10;
    *a1 = v5;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance RowTransformTrait@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return RowTransformTrait.value.getter(*v1, a1);
}

uint64_t View.gridCellColumns(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = 0;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _GridCellSizeModifier, a3);
}

uint64_t View.gridCellAnchor(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18D75B4AC](v5, a1, &type metadata for _GridAnchorModifier, a2);
}

uint64_t View.gridCellUnsizedAxes(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _GridUnsizedAxesModifier, a3);
}

uint64_t View.gridCell(x:y:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD v6[4];

  if (result > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((int)a2 < (int)result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000
    || a2 < (uint64_t)0xFFFFFFFF80000000
    || a3 < (uint64_t)0xFFFFFFFF80000000
    || a4 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_16;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((int)a4 >= (int)a3)
  {
    v6[0] = result;
    v6[1] = a2;
    v6[2] = a3;
    v6[3] = a4;
    return MEMORY[0x18D75B4AC](v6, a5, &type metadata for _GridCellRangeModifier, a6);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t View.gridRowAlignment(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _GridAlignmentModifier, a3);
}

uint64_t _GridCellRangeModifier.horizontal.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_GridCellRangeModifier.horizontal.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _GridCellRangeModifier.vertical.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _GridCellRangeModifier.vertical.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_GridCellRangeModifier.vertical.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridCellRangeModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  v17 = *(_BYTE *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 64);
  v33 = *(_QWORD *)a2;
  v34 = v3;
  v35 = v4;
  *(_QWORD *)&v36 = __PAIR64__(v6, v5);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v7);
  v37 = v8;
  *(_QWORD *)&v38 = v20;
  *((_QWORD *)&v38 + 1) = v19;
  v39 = v18;
  v40 = v9;
  v41 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_GridCellRangeModifier>, (uint64_t)&type metadata for _GridCellRangeModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = _GraphValue.value.getter();
  v24 = v33;
  v25 = v3;
  v26 = v4;
  *(_QWORD *)&v27 = __PAIR64__(v6, v5);
  *((_QWORD *)&v27 + 1) = __PAIR64__(v21, v7);
  v28 = v8;
  *(_QWORD *)&v29 = v20;
  *((_QWORD *)&v29 + 1) = v19;
  v30 = v18;
  v31 = v9;
  v32 = v17;
  v11 = _ViewListInputs.traits.getter();
  v12 = *MEMORY[0x1E0CFED28];
  if ((v11 & 0x100000000) == 0)
    v12 = v11;
  v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  v13 = v41;
  if (v40)
  {
    v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    v14 = v24;
    v13 = v25;
  }
  else
  {
    v14 = 0;
  }
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v14;
  v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridCellRangeModifier.CellRangeTrait.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v14 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  Value = (unsigned int *)AGGraphGetValue();
  v4 = *Value;
  v5 = Value[1];
  v6 = Value[2];
  v7 = Value[3];
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v8 = (char *)v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1, (char *)v13);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v8);
  *((_QWORD *)v8 + 2) = v10 + 1;
  v11 = &v8[24 * v10];
  *((_QWORD *)v11 + 4) = v4 | (v6 << 32);
  *((_QWORD *)v11 + 5) = v5 | (v7 << 32);
  v11[48] = 0;
  result = ViewTraitCollection.subscript.setter();
  *a2 = v14;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridCellRangeModifier.CellRangeTrait@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return _GridCellRangeModifier.CellRangeTrait.value.getter(*v1, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridCellRangeModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t _GridCellSizeModifier.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_GridCellSizeModifier.count.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _GridCellSizeModifier.axis.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t _GridCellSizeModifier.axis.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result & 1;
  return result;
}

uint64_t (*_GridCellSizeModifier.axis.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridCellSizeModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  v17 = *(_BYTE *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 64);
  v33 = *(_QWORD *)a2;
  v34 = v3;
  v35 = v4;
  *(_QWORD *)&v36 = __PAIR64__(v6, v5);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v7);
  v37 = v8;
  *(_QWORD *)&v38 = v20;
  *((_QWORD *)&v38 + 1) = v19;
  v39 = v18;
  v40 = v9;
  v41 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_GridCellSizeModifier>, (uint64_t)&type metadata for _GridCellSizeModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = _GraphValue.value.getter();
  v24 = v33;
  v25 = v3;
  v26 = v4;
  *(_QWORD *)&v27 = __PAIR64__(v6, v5);
  *((_QWORD *)&v27 + 1) = __PAIR64__(v21, v7);
  v28 = v8;
  *(_QWORD *)&v29 = v20;
  *((_QWORD *)&v29 + 1) = v19;
  v30 = v18;
  v31 = v9;
  v32 = v17;
  v11 = _ViewListInputs.traits.getter();
  v12 = *MEMORY[0x1E0CFED28];
  if ((v11 & 0x100000000) == 0)
    v12 = v11;
  v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  v13 = v41;
  if (v40)
  {
    v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    v14 = v24;
    v13 = v25;
  }
  else
  {
    v14 = 0;
  }
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v14;
  v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridCellSizeModifier.MergedCellTrait.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(a1, (void (*)(_BYTE *, uint64_t))_GridCellSizeModifier.MergedCellTrait.update(data:), a2);
}

uint64_t _GridCellSizeModifier.MergedCellTrait.update(data:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)AGGraphGetValue();
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (!v4)
  {
LABEL_5:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, (char *)v3);
      v3 = result;
    }
    v9 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    if (v9 >= v8 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v3);
      v3 = result;
    }
    *(_QWORD *)(v3 + 16) = v9 + 1;
    v10 = v3 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v2;
    v11 = v10 + 32;
    goto LABEL_14;
  }
  v5 = 0;
  v6 = 32;
  while ((*(_BYTE *)(v3 + v6 + 16) & 0xE0) != 0x40)
  {
    ++v5;
    v6 += 24;
    if (v4 == v5)
      goto LABEL_5;
  }
  v12 = *(_QWORD *)(v3 + v6);
  v13 = v2 * v12;
  if ((unsigned __int128)(v2 * (__int128)v12) >> 64 == (v2 * v12) >> 63)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v3 = result;
LABEL_12:
  if (v5 < *(_QWORD *)(v3 + 16))
  {
    v11 = v3 + v6;
    *(_QWORD *)(v3 + v6) = v13;
LABEL_14:
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = 64;
    *a1 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridCellSizeModifier.MergedCellTrait@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return _GridCellSizeModifier.MergedCellTrait.value.getter(*v1, (void (*)(_BYTE *, uint64_t))_GridCellSizeModifier.MergedCellTrait.update(data:), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridCellSizeModifier()
{
  specialized ViewModifier.bodyError()();
}

void _GridAnchorModifier.anchor.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*_GridAnchorModifier.anchor.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridAnchorModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  v17 = *(_BYTE *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 64);
  v33 = *(_QWORD *)a2;
  v34 = v3;
  v35 = v4;
  *(_QWORD *)&v36 = __PAIR64__(v6, v5);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v7);
  v37 = v8;
  *(_QWORD *)&v38 = v20;
  *((_QWORD *)&v38 + 1) = v19;
  v39 = v18;
  v40 = v9;
  v41 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_GridAnchorModifier>, (uint64_t)&type metadata for _GridAnchorModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = _GraphValue.value.getter();
  v24 = v33;
  v25 = v3;
  v26 = v4;
  *(_QWORD *)&v27 = __PAIR64__(v6, v5);
  *((_QWORD *)&v27 + 1) = __PAIR64__(v21, v7);
  v28 = v8;
  *(_QWORD *)&v29 = v20;
  *((_QWORD *)&v29 + 1) = v19;
  v30 = v18;
  v31 = v9;
  v32 = v17;
  v11 = _ViewListInputs.traits.getter();
  v12 = *MEMORY[0x1E0CFED28];
  if ((v11 & 0x100000000) == 0)
    v12 = v11;
  v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  v13 = v41;
  if (v40)
  {
    v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    v14 = v24;
    v13 = v25;
  }
  else
  {
    v14 = 0;
  }
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v14;
  v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridAnchorModifier.AnchoredCellTrait.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v10 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  v8 = *(_OWORD *)AGGraphGetValue();
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v3 = (char *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
  v5 = *((_QWORD *)v3 + 2);
  v4 = *((_QWORD *)v3 + 3);
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v5 + 1;
  v6 = &v3[24 * v5];
  *((_OWORD *)v6 + 2) = v8;
  v6[48] = 96;
  result = ViewTraitCollection.subscript.setter();
  *a2 = v10;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridAnchorModifier.AnchoredCellTrait@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return _GridAnchorModifier.AnchoredCellTrait.value.getter(*v1, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridAnchorModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t _GridAlignmentModifier.alignment.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_GridAlignmentModifier.alignment.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridAlignmentModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  v17 = *(_BYTE *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 64);
  v33 = *(_QWORD *)a2;
  v34 = v3;
  v35 = v4;
  *(_QWORD *)&v36 = __PAIR64__(v6, v5);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v7);
  v37 = v8;
  *(_QWORD *)&v38 = v20;
  *((_QWORD *)&v38 + 1) = v19;
  v39 = v18;
  v40 = v9;
  v41 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_GridAlignmentModifier>, (uint64_t)&type metadata for _GridAlignmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = _GraphValue.value.getter();
  v24 = v33;
  v25 = v3;
  v26 = v4;
  *(_QWORD *)&v27 = __PAIR64__(v6, v5);
  *((_QWORD *)&v27 + 1) = __PAIR64__(v21, v7);
  v28 = v8;
  *(_QWORD *)&v29 = v20;
  *((_QWORD *)&v29 + 1) = v19;
  v30 = v18;
  v31 = v9;
  v32 = v17;
  v11 = _ViewListInputs.traits.getter();
  v12 = *MEMORY[0x1E0CFED28];
  if ((v11 & 0x100000000) == 0)
    v12 = v11;
  v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  v13 = v41;
  if (v40)
  {
    v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    v14 = v24;
    v13 = v25;
  }
  else
  {
    v14 = 0;
  }
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v14;
  v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridAlignmentModifier.AlignedCellTrait.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(a1, (void (*)(_BYTE *, uint64_t))_GridAlignmentModifier.AlignedCellTrait.update(data:), a2);
}

uint64_t _GridAlignmentModifier.AlignedCellTrait.update(data:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)AGGraphGetValue();
  AlignmentKey.id.getter();
  if ((v2 & 1) != 0)
  {
    v11 = VerticalAlignment.init(_:)();
    v4 = *a1;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
      v4 = result;
    }
    v13 = *(_QWORD *)(v4 + 16);
    v12 = *(_QWORD *)(v4 + 24);
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v4);
      v4 = result;
    }
    *(_QWORD *)(v4 + 16) = v13 + 1;
    v14 = v4 + 24 * v13;
    *(_QWORD *)(v14 + 32) = v11;
    v9 = v14 + 32;
    v10 = -96;
  }
  else
  {
    v3 = AlignmentKey.init(id:axis:)();
    v4 = *a1;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, (char *)v4);
      v4 = result;
    }
    v7 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 24);
    if (v7 >= v6 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
      v4 = result;
    }
    *(_QWORD *)(v4 + 16) = v7 + 1;
    v8 = v4 + 24 * v7;
    *(_QWORD *)(v8 + 32) = v3;
    v9 = v8 + 32;
    v10 = 0x80;
  }
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = v10;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridAlignmentModifier.AlignedCellTrait@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return _GridCellSizeModifier.MergedCellTrait.value.getter(*v1, (void (*)(_BYTE *, uint64_t))_GridAlignmentModifier.AlignedCellTrait.update(data:), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridAlignmentModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t _GridUnsizedAxesModifier.axes.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_GridUnsizedAxesModifier.axes.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridUnsizedAxesModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  v17 = *(_BYTE *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 64);
  v33 = *(_QWORD *)a2;
  v34 = v3;
  v35 = v4;
  *(_QWORD *)&v36 = __PAIR64__(v6, v5);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v21, v7);
  v37 = v8;
  *(_QWORD *)&v38 = v20;
  *((_QWORD *)&v38 + 1) = v19;
  v39 = v18;
  v40 = v9;
  v41 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_GridUnsizedAxesModifier>, (uint64_t)&type metadata for _GridUnsizedAxesModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = _GraphValue.value.getter();
  v24 = v33;
  v25 = v3;
  v26 = v4;
  *(_QWORD *)&v27 = __PAIR64__(v6, v5);
  *((_QWORD *)&v27 + 1) = __PAIR64__(v21, v7);
  v28 = v8;
  *(_QWORD *)&v29 = v20;
  *((_QWORD *)&v29 + 1) = v19;
  v30 = v18;
  v31 = v9;
  v32 = v17;
  v11 = _ViewListInputs.traits.getter();
  v12 = *MEMORY[0x1E0CFED28];
  if ((v11 & 0x100000000) == 0)
    v12 = v11;
  v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  v13 = v41;
  if (v40)
  {
    v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    v14 = v24;
    v13 = v25;
  }
  else
  {
    v14 = 0;
  }
  v24 = v33;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v31 = v14;
  v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridUnsizedAxesModifier.UnsizedAxesCellTrait.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(a1, (void (*)(_BYTE *, uint64_t))_GridUnsizedAxesModifier.UnsizedAxesCellTrait.update(data:), a2);
}

uint64_t _GridCellSizeModifier.MergedCellTrait.value.getter@<X0>(uint64_t a1@<X0>, void (*a2)(_BYTE *, uint64_t)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _BYTE v7[8];
  uint64_t v8;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v8 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  a2(v7, a1);
  result = ViewTraitCollection.subscript.setter();
  *a3 = v8;
  return result;
}

uint64_t _GridUnsizedAxesModifier.UnsizedAxesCellTrait.update(data:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (!v3)
  {
LABEL_5:
    v6 = *(unsigned __int8 *)AGGraphGetValue();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 1, (char *)v2);
      v2 = result;
    }
    v9 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    if (v9 >= v8 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v2);
      v2 = result;
    }
    *(_QWORD *)(v2 + 16) = v9 + 1;
    v10 = v2 + 24 * v9;
    *(_QWORD *)(v10 + 32) = v6;
    v11 = v10 + 32;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 32;
  while ((*(_BYTE *)(v2 + v5 + 16) & 0xE0) != 0xC0)
  {
    ++v4;
    v5 += 24;
    if (v3 == v4)
      goto LABEL_5;
  }
  v12 = *(_BYTE *)(v2 + v5);
  v13 = *(_BYTE *)AGGraphGetValue();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = result;
  }
  if (v4 < *(_QWORD *)(v2 + 16))
  {
    v11 = v2 + v5;
    *(_QWORD *)(v2 + v5) = (v13 | v12);
LABEL_14:
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = -64;
    *a1 = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return _GridCellSizeModifier.MergedCellTrait.value.getter(*v1, (void (*)(_BYTE *, uint64_t))_GridUnsizedAxesModifier.UnsizedAxesCellTrait.update(data:), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridUnsizedAxesModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t GridLayout.alignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t GridLayout.alignment.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*GridLayout.alignment.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.horizontalSpacing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t GridLayout.horizontalSpacing.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*GridLayout.horizontalSpacing.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.verticalSpacing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t GridLayout.verticalSpacing.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*GridLayout.verticalSpacing.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static GridLayout._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GridLayout._makeView(root:inputs:body:)(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type GridLayout and conformance GridLayout);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type GridLayout and conformance GridLayout);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance GridLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance GridLayout(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1, 0x6F79614C64697247, (void *)0xEA00000000007475);
}

uint64_t GridLayout.makeCache(subviews:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_BYTE *)a1 + 16);
  v7 = *((_BYTE *)a1 + 17);
  *(_QWORD *)(a2 + 72) = 0x7FF8000000000000;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 1;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 104) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 112) = v8;
  *(_QWORD *)(a2 + 120) = v8;
  *(_QWORD *)(a2 + 128) = v8;
  v9 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(a2 + 136) = v8;
  *(_QWORD *)(a2 + 144) = v9;
  v10 = *v2;
  v11 = v2[1];
  *(_OWORD *)(a2 + 25) = *(__int128 *)((char *)v2 + 25);
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 65) = v7;
  swift_bridgeObjectRetain();
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t GridLayout.updateCache(_:subviews:)(uint64_t a1, int *a2)
{
  _OWORD *v2;
  int v4;
  uint64_t v5;
  char v6;
  char v7;
  __int128 v8;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_BYTE *)a2 + 16);
  v7 = *((_BYTE *)a2 + 17);
  v8 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v2 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 65) = v7;
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t GridLayout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X8>)
{
  return GridLayout.Cache.spacing()(a1);
}

uint64_t GridLayout.Cache.spacing()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v2 = *(_QWORD *)(v1[13] + 16);
  if (!v2)
    return static ViewSpacing.zero.getter();
  v3 = v1[14];
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return static ViewSpacing.zero.getter();
  v18 = v1[13];
  v5 = v1[18];
  result = ViewSpacing.init()();
  v7 = 0;
  v20 = (*(_QWORD *)(v3 + 16) << 32) - 0x100000000;
  do
  {
    if (*(_QWORD *)(v5 + 16))
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v8 & 1) != 0)
      {
        LayoutSubviews.subscript.getter();
        LayoutSubview.spacing.getter();
        v9 = v21;
        if (v23 != 2)
          v9 = v23;
        v23 = v9;
        AbsoluteEdge.Set.init(_:layoutDirection:)();
        Spacing.incorporate(_:of:)();
        result = swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v5 + 16))
      {
        result = specialized __RawDictionaryStorage.find<A>(_:)(v7 | (unint64_t)v20);
        if ((v10 & 1) != 0)
        {
          LayoutSubviews.subscript.getter();
          LayoutSubview.spacing.getter();
          v11 = v21;
          if (v23 != 2)
            v11 = v23;
          v23 = v11;
          AbsoluteEdge.Set.init(_:layoutDirection:)();
          Spacing.incorporate(_:of:)();
          result = swift_bridgeObjectRelease();
        }
      }
    }
    ++v7;
  }
  while (v2 != v7);
  v12 = 0;
  v13 = (*(_DWORD *)(v18 + 16) - 1);
  do
  {
    if (*(_QWORD *)(v5 + 16))
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
      if ((v14 & 1) != 0)
      {
        LayoutSubviews.subscript.getter();
        LayoutSubview.spacing.getter();
        v15 = v21;
        if (v23 != 2)
          v15 = v23;
        v23 = v15;
        AbsoluteEdge.Set.init(_:layoutDirection:)();
        Spacing.incorporate(_:of:)();
        result = swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v5 + 16))
      {
        result = specialized __RawDictionaryStorage.find<A>(_:)(v13 + v12);
        if ((v16 & 1) != 0)
        {
          LayoutSubviews.subscript.getter();
          LayoutSubview.spacing.getter();
          v17 = v21;
          if (v23 != 2)
            v17 = v23;
          v23 = v17;
          AbsoluteEdge.Set.init(_:layoutDirection:)();
          Spacing.incorporate(_:of:)();
          result = swift_bridgeObjectRelease();
        }
      }
    }
    v12 += 0x100000000;
    --v4;
  }
  while (v4);
  *(_QWORD *)a1 = v22;
  *(_BYTE *)(a1 + 8) = v23;
  return result;
}

double GridLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double result;

  GridLayout.Cache.setProposal(_:)(a1, a2 & 1, a3, a4 & 1);
  *(_QWORD *)&result = *(_OWORD *)&GridLayout.Cache.size()();
  return result;
}

uint64_t GridLayout.Cache.setProposal(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t i;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(unsigned __int8 *)(v4 + 80);
  LOBYTE(v33) = a2 & 1;
  result = static ProposedViewSize.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    if (v10)
      v12 = 0x7FF0000000000000;
    else
      v12 = v9;
    v13 = ~v12 & 0x7FF0000000000000;
    v14 = v12 & 0xFFFFFFFFFFFFFLL;
    if (v13)
      v15 = 1;
    else
      v15 = v14 == 0;
    if (v15)
    {
      v16 = *(char **)(v4 + 104);
      v17 = *((_QWORD *)v16 + 2);
      if (!v17)
        goto LABEL_16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_40;
      while (1)
      {
        v18 = 0;
        v19 = *((_QWORD *)v16 + 2);
        v20 = 56;
        do
        {
          if (v18 >= v19)
          {
            __break(1u);
            goto LABEL_38;
          }
          ++v18;
          v21 = &v16[v20];
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          v20 += 64;
        }
        while (v17 != v18);
        *(_QWORD *)(v4 + 104) = v16;
LABEL_16:
        v16 = *(char **)(v4 + 112);
        v17 = *((_QWORD *)v16 + 2);
        if (v17)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          v22 = 0;
          v23 = *((_QWORD *)v16 + 2);
          v24 = 56;
          while (v22 < v23)
          {
            ++v22;
            v25 = &v16[v24];
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            v24 += 64;
            if (v17 == v22)
            {
              *(_QWORD *)(v4 + 112) = v16;
              goto LABEL_23;
            }
          }
LABEL_38:
          __break(1u);
        }
        else
        {
LABEL_23:
          v16 = *(char **)(v4 + 136);
          v17 = *((_QWORD *)v16 + 2);
          if (!v17)
            break;
          v32 = a4;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          v26 = 0;
          v27 = v16 + 64;
          while (v26 < *((_QWORD *)v16 + 2))
          {
            ++v26;
            static ViewDimensions.invalidValue.getter();
            a4 = v34;
            swift_release();
            *((_QWORD *)v27 - 2) = v33;
            *((_QWORD *)v27 - 1) = v34;
            *(_QWORD *)v27 = v35;
            *(_OWORD *)(v27 + 8) = v36;
            *((_QWORD *)v27 + 3) = v37;
            *((_QWORD *)v27 + 7) = 0;
            *((_QWORD *)v27 + 8) = 0;
            v27 += 104;
            if (v17 == v26)
            {
              *(_QWORD *)(v4 + 136) = v16;
              a4 = v32;
              goto LABEL_30;
            }
          }
        }
        __break(1u);
LABEL_40:
        v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
      }
    }
LABEL_30:
    *(_QWORD *)(v4 + 72) = a1;
    *(_BYTE *)(v4 + 80) = a2 & 1;
    *(_QWORD *)(v4 + 88) = a3;
    *(_BYTE *)(v4 + 96) = a4 & 1;
    static ProposedViewSize.unspecified.getter();
    if ((static ProposedViewSize.== infix(_:_:)() & 1) != 0)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 16);
      if (v28)
      {
        for (i = 0; i != v28; ++i)
        {
          v30 = static ProposedViewSize.unspecified.getter();
          GridLayout.Cache.resize(at:proposal:)(i, v30, v31 & 1);
        }
      }
    }
    else
    {
      GridLayout.Cache.sizeGenerally()();
    }
    GridLayout.Cache.finalizeSizes()();
    GridLayout.Cache.applyAlignment(in:)(0);
    GridLayout.Cache.applyAlignment(in:)(1);
    assignPositions #1 (to:) in GridLayout.Cache.assignPositions()(v4 + 104);
    return assignPositions #1 (to:) in GridLayout.Cache.assignPositions()(v4 + 112);
  }
  return result;
}

CGSize __swiftcall GridLayout.Cache.size()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  CGSize result;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = 0.0;
  v5 = 0.0;
  if (v3)
  {
    v6 = (double *)(v2 + 64);
    do
    {
      v7 = *(v6 - 4);
      v8 = *v6;
      v6 += 8;
      v5 = v5 + v7 + v8;
      --v3;
    }
    while (v3);
  }
  v9 = *(_QWORD *)(v1 + 16);
  if (v9)
  {
    v10 = (double *)(v1 + 64);
    v4 = 0.0;
    do
    {
      v11 = *(v10 - 4);
      v12 = *v10;
      v10 += 8;
      v4 = v4 + v11 + v12;
      --v9;
    }
    while (v9);
  }
  result.height = v4;
  result.width = v5;
  return result;
}

void GridLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  GridLayout.Cache.setProposal(_:)(a1, a2 & 1, a3, a4 & 1);
  GridLayout.Cache.placeSubviews(at:)((CGPoint)__PAIR128__(*(unint64_t *)&a6, *(unint64_t *)&a5));
}

Swift::Void __swiftcall GridLayout.Cache.placeSubviews(at:)(CGPoint at)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1[17];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = 0;
    v6 = v1[13];
    v5 = v1[14];
    for (i = v2 + 64; ; i += 104)
    {
      v8 = *(int *)(i - 32);
      if ((v8 & 0x80000000) != 0)
        break;
      if (*(_QWORD *)(v6 + 16) <= v8)
        goto LABEL_10;
      v9 = *(int *)(i - 28);
      if ((v9 & 0x80000000) != 0)
        goto LABEL_11;
      if (*(_QWORD *)(v5 + 16) <= v9)
        goto LABEL_12;
      v10 = v4 + 1;
      LayoutSubviews.subscript.getter();
      swift_retain();
      default argument 1 of LayoutSubview.place(at:anchor:dimensions:)();
      LayoutSubview.place(at:anchor:dimensions:)();
      swift_release();
      v4 = v10;
      if (v3 == v10)
        return;
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
}

uint64_t GridLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  char v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  LOBYTE(v24) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  v11 = *(_OWORD *)(a8 + 96);
  v12 = *(_OWORD *)(a8 + 128);
  v31 = *(_OWORD *)(a8 + 112);
  v32 = v12;
  v33 = *(_QWORD *)(a8 + 144);
  v13 = *(_OWORD *)(a8 + 48);
  v26 = *(_OWORD *)(a8 + 32);
  v27 = v13;
  v14 = *(_OWORD *)(a8 + 80);
  v28 = *(_OWORD *)(a8 + 64);
  v29 = v14;
  v30 = v11;
  v15 = *(_OWORD *)(a8 + 16);
  v24 = *(_OWORD *)a8;
  v25 = v15;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  AlignmentKey.id.getter();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 120) = v30;
  v17 = v32;
  *(_OWORD *)(v16 + 136) = v31;
  *(_OWORD *)(v16 + 152) = v17;
  v18 = v27;
  *(_OWORD *)(v16 + 56) = v26;
  *(_OWORD *)(v16 + 72) = v18;
  v19 = v29;
  *(_OWORD *)(v16 + 88) = v28;
  *(_OWORD *)(v16 + 104) = v19;
  v20 = v25;
  *(_OWORD *)(v16 + 24) = v24;
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 168) = v33;
  *(_OWORD *)(v16 + 40) = v20;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  v21 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a8) = v22;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v24);
  if ((a8 & 1) != 0)
    *(double *)&result = v21;
  else
    *(double *)&result = v21 + a6;
  return result;
}

uint64_t GridLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  char v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  LOBYTE(v25) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  v12 = *(_OWORD *)(a9 + 96);
  v13 = *(_OWORD *)(a9 + 128);
  v32 = *(_OWORD *)(a9 + 112);
  v33 = v13;
  v34 = *(_QWORD *)(a9 + 144);
  v14 = *(_OWORD *)(a9 + 48);
  v27 = *(_OWORD *)(a9 + 32);
  v28 = v14;
  v15 = *(_OWORD *)(a9 + 80);
  v29 = *(_OWORD *)(a9 + 64);
  v30 = v15;
  v31 = v12;
  v16 = *(_OWORD *)(a9 + 16);
  v25 = *(_OWORD *)a9;
  v26 = v16;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  AlignmentKey.id.getter();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 120) = v31;
  v18 = v33;
  *(_OWORD *)(v17 + 136) = v32;
  *(_OWORD *)(v17 + 152) = v18;
  v19 = v28;
  *(_OWORD *)(v17 + 56) = v27;
  *(_OWORD *)(v17 + 72) = v19;
  v20 = v30;
  *(_OWORD *)(v17 + 88) = v29;
  *(_OWORD *)(v17 + 104) = v20;
  v21 = v26;
  *(_OWORD *)(v17 + 24) = v25;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 168) = v34;
  *(_OWORD *)(v17 + 40) = v21;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  v22 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a9) = v23;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v25);
  if ((a9 & 1) != 0)
    *(double *)&result = v22;
  else
    *(double *)&result = v22 + a7;
  return result;
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance GridLayout(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(_BYTE *)(v2 + 40);
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 1);
  v10 = *((_BYTE *)a2 + 16);
  v11 = *((_BYTE *)a2 + 17);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 65) = v11;
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance GridLayout@<X0>(uint64_t a1@<X8>)
{
  return GridLayout.Cache.spacing()(a1);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double result;

  GridLayout.Cache.setProposal(_:)(a1, a2 & 1, a3, a4 & 1);
  *(_QWORD *)&result = *(_OWORD *)&GridLayout.Cache.size()();
  return result;
}

void protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  GridLayout.Cache.setProposal(_:)(a1, a2 & 1, a3, a4 & 1);
  GridLayout.Cache.placeSubviews(at:)((CGPoint)__PAIR128__(*(unint64_t *)&a6, *(unint64_t *)&a5));
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  char v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  LOBYTE(v24) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  v11 = *(_OWORD *)(a8 + 96);
  v12 = *(_OWORD *)(a8 + 128);
  v31 = *(_OWORD *)(a8 + 112);
  v32 = v12;
  v33 = *(_QWORD *)(a8 + 144);
  v13 = *(_OWORD *)(a8 + 48);
  v26 = *(_OWORD *)(a8 + 32);
  v27 = v13;
  v14 = *(_OWORD *)(a8 + 80);
  v28 = *(_OWORD *)(a8 + 64);
  v29 = v14;
  v30 = v11;
  v15 = *(_OWORD *)(a8 + 16);
  v24 = *(_OWORD *)a8;
  v25 = v15;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  AlignmentKey.id.getter();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 120) = v30;
  v17 = v32;
  *(_OWORD *)(v16 + 136) = v31;
  *(_OWORD *)(v16 + 152) = v17;
  v18 = v27;
  *(_OWORD *)(v16 + 56) = v26;
  *(_OWORD *)(v16 + 72) = v18;
  v19 = v29;
  *(_OWORD *)(v16 + 88) = v28;
  *(_OWORD *)(v16 + 104) = v19;
  v20 = v25;
  *(_OWORD *)(v16 + 24) = v24;
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 168) = v33;
  *(_OWORD *)(v16 + 40) = v20;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  v21 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a8) = v22;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v24);
  if ((a8 & 1) != 0)
    *(double *)&result = v21;
  else
    *(double *)&result = v21 + a6;
  return result;
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  char v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  LOBYTE(v25) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  v12 = *(_OWORD *)(a9 + 96);
  v13 = *(_OWORD *)(a9 + 128);
  v32 = *(_OWORD *)(a9 + 112);
  v33 = v13;
  v34 = *(_QWORD *)(a9 + 144);
  v14 = *(_OWORD *)(a9 + 48);
  v27 = *(_OWORD *)(a9 + 32);
  v28 = v14;
  v15 = *(_OWORD *)(a9 + 80);
  v29 = *(_OWORD *)(a9 + 64);
  v30 = v15;
  v31 = v12;
  v16 = *(_OWORD *)(a9 + 16);
  v25 = *(_OWORD *)a9;
  v26 = v16;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  AlignmentKey.id.getter();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 120) = v31;
  v18 = v33;
  *(_OWORD *)(v17 + 136) = v32;
  *(_OWORD *)(v17 + 152) = v18;
  v19 = v28;
  *(_OWORD *)(v17 + 56) = v27;
  *(_OWORD *)(v17 + 72) = v19;
  v20 = v30;
  *(_OWORD *)(v17 + 88) = v29;
  *(_OWORD *)(v17 + 104) = v20;
  v21 = v26;
  *(_OWORD *)(v17 + 24) = v25;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 168) = v34;
  *(_OWORD *)(v17 + 40) = v21;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  v22 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a9) = v23;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v25);
  if ((a9 & 1) != 0)
    *(double *)&result = v22;
  else
    *(double *)&result = v22 + a7;
  return result;
}

uint64_t (*_GridLayout.alignment.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*_GridLayout.horizontalSpacing.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*_GridLayout.verticalSpacing.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.init(alignment:horizontalSpacing:verticalSpacing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_BYTE *)(a7 + 24) = a4 & 1;
  *(_QWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 40) = a6 & 1;
  return result;
}

uint64_t static _GridLayout._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GridLayout._makeView(root:inputs:body:)(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout);
}

uint64_t static GridLayout._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  return static Layout._makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  a7();
  return static Layout._makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _GridLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _GridLayout(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1, 0x79614C646972475FLL, (void *)0xEB0000000074756FLL);
}

__n128 _GridLayout.base.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  unsigned __int8 v5;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u8[8];
  v4 = v1[2].n128_u64[0];
  v5 = v1[2].n128_u8[8];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u8[8] = v5;
  return result;
}

__n128 protocol witness for DerivedLayout.base.getter in conformance _GridLayout@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  unsigned __int8 v5;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u8[8];
  v4 = v1[2].n128_u64[0];
  v5 = v1[2].n128_u8[8];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u8[8] = v5;
  return result;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance GridMetadata@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static GridMetadata.defaultValue;
  return swift_bridgeObjectRetain();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GridRange()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GridRange()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GridRange()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GridRange(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  return a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t GridLayout.Cache.assignSubviews()()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  char **v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  Swift::Bool v11;
  uint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v29;
  unint64_t v30;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v36;
  unint64_t v37;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  int v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  int v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  _QWORD *v89;
  unsigned int *v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char *v107;
  int v108;
  int v109;
  unint64_t v110;
  char v111;
  char **v112;
  char *v113;
  char v114;
  _QWORD *v115;
  char v116;
  unint64_t v117;
  uint64_t v118;
  _BOOL8 v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  char v123;
  _QWORD *v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  char **v134;
  char *v135;
  char *v136;
  char **v137;
  char **v138;
  int v139;
  char *v140;
  unint64_t v141;
  int64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  __int16 v157;
  uint64_t v158;

  v1 = v0;
  v2 = (char **)(v0 + 104);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(_QWORD *)(v0 + 104);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v5 = (char **)(v1 + 112);
  v6 = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v1 + 112);
  if (v6)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v7 + 16));
  }
  else
  {
    *v5 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v7 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v8 = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v1 + 136);
  if (v8)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
  }
  else
  {
    *(_QWORD *)(v1 + 136) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 144) + 16))
  {
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v149 = *(_QWORD **)(v1 + 144);
    *(_QWORD *)(v1 + 144) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<GridIndex, Int>();
    v11 = v10;
    v5 = (char **)(v1 + 112);
    _NativeDictionary.removeAll(isUnique:)(v11);
    *(_QWORD *)(v1 + 144) = v149;
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(v1 + 56);
  v13 = *(_BYTE *)(v1 + 64);
  v14 = *(_BYTE *)(v1 + 65);
  v155 = *(_DWORD *)(v1 + 48);
  v156 = v12;
  LOBYTE(v157) = v13;
  HIBYTE(v157) = v14;
  v158 = 0;
  swift_bridgeObjectRetain();
  v148 = v1;
  v138 = v2;
  v134 = (char **)(v1 + 136);
  if (!LayoutSubviews.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    v15 = 0;
    v130 = 0;
    v57 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_110;
  }
  v130 = 0;
  v15 = 0;
  v16 = 0;
  v135 = (char *)MEMORY[0x1E0DEE9D8];
  v137 = v5;
  while (1)
  {
    LayoutSubviews.subscript.getter();
    v17 = v149;
    v18 = v150;
    LODWORD(v149) = v155;
    v150 = v156;
    LOWORD(v151) = v157;
    v19 = LayoutSubviews.endIndex.getter();
    if (v16 < 0 || v16 >= v19)
      goto LABEL_168;
    v158 = v16 + 1;
    static UnitPoint.infinity.getter();
    v21 = v20;
    v23 = v22;
    v149 = v17;
    LODWORD(v150) = v18;
    LayoutProxy.subscript.getter();
    v24 = *(_QWORD *)(v154 + 16);
    if (v24)
    {
      v25 = 1;
      v26 = *(_QWORD *)(v154 + 32);
      v27 = *(_QWORD *)(v154 + 40);
      if (*(unsigned __int8 *)(v154 + 48) >> 5)
        __asm { BR              X16 }
      v1 = (v27 - v26);
      v29 = (int)v27 < (int)v26;
      if (__OFSUB__((_DWORD)v27, (_DWORD)v26))
        goto LABEL_155;
      v30 = HIDWORD(v27);
      if (v29 || (int)v30 < SHIDWORD(v26))
        goto LABEL_156;
      v143 = v30 - HIDWORD(v26);
      if (__OFSUB__((_DWORD)v30, HIDWORD(v26)))
        goto LABEL_157;
      if (v24 != 1)
      {
        v32 = (unsigned __int8 *)(v154 + 72);
        while (1)
        {
          v33 = v25 + 1;
          if (__OFADD__(v25, 1))
          {
            __break(1u);
            goto LABEL_154;
          }
          v26 = *((_QWORD *)v32 - 2);
          v34 = *((_QWORD *)v32 - 1);
          if (*v32 >> 5)
            __asm { BR              X15 }
          v1 = (v34 - v26);
          v36 = (int)v34 < (int)v26;
          if (__OFSUB__((_DWORD)v34, (_DWORD)v26))
            break;
          v37 = HIDWORD(v34);
          if (v36 || (int)v37 < SHIDWORD(v26))
            goto LABEL_156;
          v143 = v37 - HIDWORD(v26);
          if (__OFSUB__((_DWORD)v37, HIDWORD(v26)))
            goto LABEL_157;
          ++v25;
          v32 += 24;
          if (v33 == v24)
            goto LABEL_38;
        }
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
        goto LABEL_158;
      }
LABEL_38:
      v39 = v26;
      swift_bridgeObjectRelease();
      v40 = 0;
      v141 = HIDWORD(v39);
    }
    else
    {
      swift_bridgeObjectRelease();
      v143 = 1;
      LODWORD(v1) = 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        LODWORD(v1) = 1;
      else
        v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v135 + 2) + 1, 1, v135);
      v42 = *((_QWORD *)v135 + 2);
      v41 = *((_QWORD *)v135 + 3);
      if (v42 >= v41 >> 1)
        v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v135);
      *((_QWORD *)v135 + 2) = v42 + 1;
      v43 = &v135[8 * v42];
      *((_DWORD *)v43 + 8) = v15;
      *((_DWORD *)v43 + 9) = v130;
      LODWORD(v39) = 0;
      if (v15)
      {
        v15 = 0;
        v141 = ++v130;
      }
      else
      {
        v141 = v130;
      }
      v40 = 1;
    }
    v133 = v39;
    v44 = v39 + v1;
    if (__OFADD__((_DWORD)v39, (_DWORD)v1))
      goto LABEL_169;
    v131 = v40;
    v132 = v15;
    v139 = v39 + v1;
    v45 = v44;
    v46 = *v2;
    v47 = *((_QWORD *)*v2 + 2);
    if (v47 < v44)
    {
      v48 = swift_isUniquelyReferenced_nonNull_native();
      *v2 = v46;
      if ((v48 & 1) == 0)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 + 1, 1, v46);
      v49 = *((_QWORD *)v46 + 2);
      do
      {
        v50 = 0;
        if (v49 && (*(_BYTE *)(v148 + 24) & 1) == 0)
          v50 = *(_QWORD *)(v148 + 16);
        *v2 = v46;
        v51 = *((_QWORD *)v46 + 3);
        if (v49 >= v51 >> 1)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v49 + 1, 1, v46);
        *((_QWORD *)v46 + 2) = v49 + 1;
        v52 = &v46[64 * v49];
        *((_QWORD *)v52 + 4) = v50;
        *((_QWORD *)v52 + 5) = 0;
        v52[48] = 1;
        *(_OWORD *)(v52 + 56) = 0u;
        *(_OWORD *)(v52 + 72) = 0u;
        *((_QWORD *)v52 + 11) = 0;
        *v2 = v46;
        v49 = *((_QWORD *)v46 + 2);
      }
      while (v49 < v45);
    }
    if ((int)v1 < 2)
    {
      v1 = v148;
      v53 = v141;
    }
    else
    {
      v1 = v148;
      v53 = v141;
      if ((~v21 & 0x7FF0000000000000) == 0)
      {
        v149 = *(_QWORD **)v148;
        lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
        AlignmentGuide.fraction.getter();
        v21 = v54;
      }
    }
    v55 = v53 + v143;
    if (__OFADD__(v53, v143))
    {
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
      JUMPOUT(0x1878D20B8);
    }
    v145 = v53 + v143;
    v56 = v55;
    v57 = *v5;
    v58 = *((_QWORD *)*v5 + 2);
    if (v58 < v55)
    {
      v59 = swift_isUniquelyReferenced_nonNull_native();
      *v5 = v57;
      if ((v59 & 1) == 0)
        v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58 + 1, 1, v57);
      v60 = *((_QWORD *)v57 + 2);
      do
      {
        v61 = 0;
        if (v60 && (*(_BYTE *)(v1 + 40) & 1) == 0)
          v61 = *(_QWORD *)(v1 + 32);
        *v5 = v57;
        v62 = *((_QWORD *)v57 + 3);
        if (v60 >= v62 >> 1)
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v60 + 1, 1, v57);
        *((_QWORD *)v57 + 2) = v60 + 1;
        v63 = &v57[64 * v60];
        *((_QWORD *)v63 + 4) = v61;
        *((_QWORD *)v63 + 5) = 0;
        v63[48] = 1;
        *(_OWORD *)(v63 + 56) = 0u;
        *(_OWORD *)(v63 + 72) = 0u;
        *((_QWORD *)v63 + 11) = 0;
        *v5 = v57;
        v60 = *((_QWORD *)v57 + 2);
      }
      while (v60 < v56);
    }
    if (v143 < 2)
    {
      v15 = v39;
    }
    else
    {
      v15 = v39;
      if ((~v23 & 0x7FF0000000000000) == 0)
      {
        v149 = *(_QWORD **)(v1 + 8);
        lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
        v57 = (char *)&v149;
        AlignmentGuide.fraction.getter();
        v23 = v64;
      }
    }
    v65 = v139;
    if (v139 < (int)v15)
      goto LABEL_171;
    v66 = v145;
    if (v15 != v139)
      break;
LABEL_80:
    static ViewDimensions.invalidValue.getter();
    v67 = v149;
    v68 = v150;
    v69 = v151;
    v146 = v152;
    v70 = v153;
    v71 = *v134;
    v72 = swift_isUniquelyReferenced_nonNull_native();
    *v134 = v71;
    if ((v72 & 1) == 0)
    {
      v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
      *v134 = v71;
    }
    v74 = *((_QWORD *)v71 + 2);
    v73 = *((_QWORD *)v71 + 3);
    if (v74 >= v73 >> 1)
      v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *((_QWORD *)v71 + 2) = v74 + 1;
    v75 = &v71[104 * v74];
    *((_DWORD *)v75 + 8) = v133;
    *((_DWORD *)v75 + 9) = v141;
    *((_DWORD *)v75 + 10) = v139;
    *((_DWORD *)v75 + 11) = v66;
    *((_QWORD *)v75 + 6) = v67;
    *((_QWORD *)v75 + 7) = v68;
    *((_QWORD *)v75 + 8) = v69;
    *(_OWORD *)(v75 + 72) = v146;
    *((_QWORD *)v75 + 11) = v70;
    *((_QWORD *)v75 + 12) = v21;
    *((_QWORD *)v75 + 13) = v23;
    v75[112] = 0;
    *((_QWORD *)v75 + 15) = 0;
    *((_QWORD *)v75 + 16) = 0;
    *v134 = v71;
    v15 = v131 + v132;
    v16 = v158;
    if (v16 == LayoutSubviews.endIndex.getter())
      goto LABEL_151;
  }
  if (v145 < (int)v141)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_175;
  }
  v15 = v39;
  while (1)
  {
    if ((int)v15 >= v65)
      goto LABEL_159;
    if ((_DWORD)v141 != v66)
      break;
LABEL_88:
    ++v15;
    v2 = v138;
    v65 = v139;
    v5 = v137;
    if (v15 == v139)
      goto LABEL_80;
  }
  v76 = v143;
  v77 = v141;
  while ((int)v77 < v66)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 144) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v15 | (v77 << 32));
      if ((v78 & 1) != 0)
        goto LABEL_176;
    }
    v79 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 16);
    v80 = swift_isUniquelyReferenced_nonNull_native();
    v149 = *(_QWORD **)(v1 + 144);
    v81 = v149;
    *(_QWORD *)(v1 + 144) = 0x8000000000000000;
    v83 = specialized __RawDictionaryStorage.find<A>(_:)(v15 | (v77 << 32));
    v84 = v81[2];
    v85 = (v82 & 1) == 0;
    v86 = v84 + v85;
    if (__OFADD__(v84, v85))
      goto LABEL_149;
    v1 = v82;
    if (v81[3] >= v86)
    {
      if ((v80 & 1) != 0)
      {
        v89 = v149;
        if ((v82 & 1) != 0)
          goto LABEL_92;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v89 = v149;
        if ((v1 & 1) != 0)
          goto LABEL_92;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v86, v80);
      v87 = specialized __RawDictionaryStorage.find<A>(_:)(v15 | (v77 << 32));
      if ((v1 & 1) != (v88 & 1))
      {
        while (1)
        {
LABEL_177:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_176:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      v83 = v87;
      v89 = v149;
      if ((v1 & 1) != 0)
      {
LABEL_92:
        *(_QWORD *)(v89[7] + 8 * v83) = v79;
        goto LABEL_93;
      }
    }
    v89[(v83 >> 6) + 8] |= 1 << v83;
    v90 = (unsigned int *)(v89[6] + 8 * v83);
    *v90 = v15;
    v90[1] = v77;
    *(_QWORD *)(v89[7] + 8 * v83) = v79;
    v91 = v89[2];
    v92 = __OFADD__(v91, 1);
    v93 = v91 + 1;
    if (v92)
      goto LABEL_150;
    v89[2] = v93;
LABEL_93:
    v1 = v148;
    *(_QWORD *)(v148 + 144) = v89;
    swift_bridgeObjectRelease();
    v77 = (v77 + 1);
    --v76;
    v66 = v145;
    if (!v76)
      goto LABEL_88;
  }
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  swift_bridgeObjectRelease();
LABEL_154:
  v57 = v135;
LABEL_110:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_175:
    v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
  v95 = *((_QWORD *)v57 + 2);
  v94 = *((_QWORD *)v57 + 3);
  v142 = v95 + 1;
  if (v95 >= v94 >> 1)
    v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v94 > 1), v142, 1, v57);
  *((_QWORD *)v57 + 2) = v142;
  v96 = &v57[8 * v95];
  *((_DWORD *)v96 + 8) = v15;
  *((_DWORD *)v96 + 9) = v130;
  v97 = 0;
  v140 = v57 + 32;
  v136 = v57;
  while (2)
  {
    if (v97 >= *((_QWORD *)v57 + 2))
      goto LABEL_161;
    v98 = *(_QWORD *)(v1 + 144);
    if (*(_QWORD *)(v98 + 16))
    {
      v147 = *(unsigned int *)&v140[8 * v97 + 4];
      v99 = specialized __RawDictionaryStorage.find<A>(_:)((*(_DWORD *)&v140[8 * v97] - 1) | ((unint64_t)v147 << 32));
      if ((v100 & 1) != 0)
      {
        v101 = *(_QWORD *)(*(_QWORD *)(v98 + 56) + 8 * v99);
        if ((v101 & 0x8000000000000000) != 0)
          goto LABEL_163;
        v102 = *v134;
        v103 = *((_QWORD *)*v134 + 2);
        if (v101 >= v103)
          goto LABEL_164;
        if ((~*(_QWORD *)&v102[104 * v101 + 96] & 0x7FF0000000000000) == 0)
        {
          v149 = *(_QWORD **)v1;
          lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
          AlignmentGuide.fraction.getter();
          v105 = v104;
          v102 = *(char **)(v1 + 136);
          v106 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v1 + 136) = v102;
          if ((v106 & 1) == 0)
            v102 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v102);
          if (v101 >= *((_QWORD *)v102 + 2))
            goto LABEL_172;
          *(_QWORD *)&v102[104 * v101 + 96] = v105;
          *v134 = v102;
          v103 = *((_QWORD *)v102 + 2);
        }
        if (v101 >= v103)
          goto LABEL_165;
        v107 = &v102[104 * v101];
        v108 = *((_DWORD *)v107 + 8);
        v109 = *((_DWORD *)v107 + 10);
        if (v109 < v108)
          goto LABEL_166;
        v110 = *((_QWORD *)*v138 + 2);
        if (v110 >> 31)
          goto LABEL_167;
        if (v109 < (int)v110)
        {
          v111 = swift_isUniquelyReferenced_nonNull_native();
          v112 = v134;
          *v134 = v102;
          if ((v111 & 1) == 0)
          {
            v128 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v102);
            v112 = v134;
            v102 = v128;
          }
          if (v101 >= *((_QWORD *)v102 + 2))
            goto LABEL_173;
          v113 = &v102[104 * v101];
          *((_DWORD *)v113 + 8) = v108;
          *((_DWORD *)v113 + 10) = v110;
          *v112 = v102;
          if (v108 != (_DWORD)v110)
          {
            v144 = v147 << 32;
            while (v108 < (int)v110)
            {
              if (v108 >= v109)
              {
                v114 = swift_isUniquelyReferenced_nonNull_native();
                v149 = *(_QWORD **)(v1 + 144);
                v115 = v149;
                *(_QWORD *)(v1 + 144) = 0x8000000000000000;
                v117 = specialized __RawDictionaryStorage.find<A>(_:)(v144 | v108);
                v118 = v115[2];
                v119 = (v116 & 1) == 0;
                v120 = v118 + v119;
                if (__OFADD__(v118, v119))
                  goto LABEL_160;
                v121 = v116;
                if (v115[3] >= v120)
                {
                  if ((v114 & 1) == 0)
                    specialized _NativeDictionary.copy()();
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v120, v114);
                  v122 = specialized __RawDictionaryStorage.find<A>(_:)(v144 | v108);
                  if ((v121 & 1) != (v123 & 1))
                    goto LABEL_177;
                  v117 = v122;
                }
                v124 = v149;
                if ((v121 & 1) != 0)
                {
                  *(_QWORD *)(v149[7] + 8 * v117) = v101;
                }
                else
                {
                  v149[(v117 >> 6) + 8] |= 1 << v117;
                  v125 = (int *)(v124[6] + 8 * v117);
                  *v125 = v108;
                  v125[1] = v147;
                  *(_QWORD *)(v124[7] + 8 * v117) = v101;
                  v126 = v124[2];
                  v92 = __OFADD__(v126, 1);
                  v127 = v126 + 1;
                  if (v92)
                    goto LABEL_162;
                  v124[2] = v127;
                }
                v1 = v148;
                *(_QWORD *)(v148 + 144) = v124;
                swift_bridgeObjectRelease();
              }
              if ((_DWORD)v110 == ++v108)
                goto LABEL_114;
            }
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
            goto LABEL_170;
          }
        }
      }
    }
LABEL_114:
    ++v97;
    v57 = v136;
    if (v97 != v142)
      continue;
    return swift_bridgeObjectRelease();
  }
}

uint64_t GridLayout.Cache.sizeGenerally()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  double v8;
  int64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double *v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int32x2_t v78;
  __int32 *v79;
  uint64_t v80;
  int32x2_t v81;
  int32x2_t v82;
  int32x2_t v83;
  int32x2_t v84;
  unint64_t v85;
  int *v86;
  int v87;
  int v88;
  double v89;
  double v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  double *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double *v102;
  double v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  double v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  int32x2_t v114;
  __int32 *v115;
  uint64_t v116;
  int32x2_t v117;
  int32x2_t v118;
  int32x2_t v119;
  int32x2_t v120;
  unint64_t v121;
  int *v122;
  int v123;
  int v124;
  double v125;
  double v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  double *v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  double v147;
  char *v148;
  double v149;
  double v150;
  double v151;
  BOOL v152;
  double v153;
  double v154;
  double v155;
  double v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  char v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  unsigned __int8 v217[9];

  v1 = v0;
  v209 = *(_BYTE *)(v0 + 80);
  v2 = v209 ^ 1;
  v217[0] = v209 ^ 1;
  if ((*(_BYTE *)(v1 + 96) & 1) == 0)
  {
    v2 |= 2u;
    v217[0] = v2;
  }
  v216 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI11GeneralItem33_69F00159ECCD7162D5EDC19B53BBB085LLVs5NeverOTg503_s7d42UI10GridLayoutV5CacheV13sizeGenerally33_69hijklm9LLyyFAA11fG12AGLLVSiXEfU_AG0qR0V0T0VAG4AxisO3SetVTf1cn_n(0, *(_QWORD *)(*(_QWORD *)(v1 + 136) + 16), v1, v217);
  result = specialized MutableCollection<>.sort(by:)(&v216);
  v4 = v216;
  v5 = *((_QWORD *)v216 + 2);
  if (!v5)
    return swift_bridgeObjectRelease();
  v208 = v2;
  v6 = 0;
  v7 = v216 + 32;
  v205 = v216 + 40;
  v215 = v216;
  while (1)
  {
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_351;
    if (v6 >= *((_QWORD *)v4 + 2))
      goto LABEL_352;
    v210 = v6;
    if ((uint64_t)v6 < v5)
    {
      v8 = *(double *)&v205[64 * v6];
      v9 = v6;
      while ((v9 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v9 >= *((_QWORD *)v4 + 2))
          goto LABEL_323;
        v10 = &v7[64 * v9];
        if (*((double *)v10 + 1) != v8)
          goto LABEL_65;
        v11 = *(_QWORD *)v10;
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_329;
        v12 = *(_QWORD *)(v1 + 136);
        if (v11 >= *(_QWORD *)(v12 + 16))
          goto LABEL_330;
        v13 = (int *)(v12 + 104 * v11);
        v14 = v13[8];
        v15 = v13[10];
        if ((int)v15 < (int)v14)
          goto LABEL_331;
        v16 = v13[9];
        v17 = v13[11];
        if ((_DWORD)v15 == (_DWORD)v14)
          goto LABEL_41;
        if ((int)v17 < (int)v16)
          goto LABEL_340;
        if (__OFSUB__((_DWORD)v17, (_DWORD)v16))
          goto LABEL_341;
        v18 = *(_QWORD *)(v1 + 104);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          v18 = result;
        }
        v19 = (int)(v15 ^ v14) >= 0;
        if ((int)v14 >= 0)
          v20 = v14;
        else
          v20 = -(int)v14;
        if ((int)v15 >= 0)
          v21 = v15;
        else
          v21 = -(int)v15;
        v22 = v15 - v14;
        if (!__OFSUB__((_DWORD)v15, (_DWORD)v14))
          v19 = 0;
        v23 = v22;
        v24 = (v21 + v20);
        if ((int)(v15 ^ v14) < 0)
          v23 = -v24;
        v25 = (_DWORD *)(v18 + (v14 << 6) + 92);
        v26 = v14;
        do
        {
          if (v26 >= v15)
          {
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
            goto LABEL_311;
          }
          if ((v14 & 0x80000000) != 0)
            goto LABEL_304;
          v27 = *(_QWORD *)(v18 + 16);
          if (v27 <= v26)
            goto LABEL_305;
          *(v25 - 1) += v17 - v16;
          if (v19)
            goto LABEL_309;
          if (v23 != v27)
            ++*v25;
          v25 += 16;
          ++v26;
          --v22;
        }
        while (v22);
        *(_QWORD *)(v1 + 104) = v18;
        v4 = v215;
LABEL_41:
        if ((int)v17 < (int)v16)
          goto LABEL_332;
        if ((_DWORD)v17 == (_DWORD)v16)
          goto LABEL_10;
        v28 = __OFSUB__((_DWORD)v15, (_DWORD)v14);
        v29 = v15 - v14;
        if (v28)
          goto LABEL_344;
        v30 = *(_QWORD *)(v1 + 112);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          v30 = result;
        }
        v31 = (int)(v17 ^ v16) >= 0;
        if ((int)v16 >= 0)
          v32 = v16;
        else
          v32 = -(int)v16;
        if ((int)v17 >= 0)
          v33 = v17;
        else
          v33 = -(int)v17;
        v34 = v17 - v16;
        if (!__OFSUB__((_DWORD)v17, (_DWORD)v16))
          v31 = 0;
        v35 = v34;
        v36 = (v33 + v32);
        if ((int)(v17 ^ v16) < 0)
          v35 = -v36;
        v37 = (_DWORD *)(v30 + (v16 << 6) + 92);
        v38 = v16;
        do
        {
          if (v38 >= v17)
            goto LABEL_306;
          if ((v16 & 0x80000000) != 0)
            goto LABEL_307;
          v39 = *(_QWORD *)(v30 + 16);
          if (v39 <= v38)
            goto LABEL_308;
          *(v37 - 1) += v29;
          if (v31)
            goto LABEL_310;
          if (v35 != v39)
            ++*v37;
          v37 += 16;
          ++v38;
          --v34;
        }
        while (v34);
        *(_QWORD *)(v1 + 112) = v30;
LABEL_10:
        if (++v9 >= v5)
          goto LABEL_65;
      }
      goto LABEL_322;
    }
    v9 = v6;
LABEL_65:
    if (v5 < v9)
      goto LABEL_353;
    if (v9 != v5)
      break;
LABEL_67:
    if ((*(_BYTE *)(v1 + 80) & 1) != 0)
    {
      v40 = v210;
      goto LABEL_140;
    }
    v63 = *(_QWORD *)(v1 + 104);
    v64 = *(_QWORD *)(v63 + 16);
    v65 = 0.0;
    v40 = v210;
    if (v64)
    {
      v66 = (double *)(v63 + 72);
      v67 = 0.0;
      v68 = *(_QWORD *)(v63 + 16);
      do
      {
        v69 = *(v66 - 1);
        if (v69 <= *v66)
          v69 = *v66;
        v67 = v67 + *(v66 - 5) + v69;
        v66 += 8;
        --v68;
      }
      while (v68);
    }
    else
    {
      v67 = 0.0;
    }
    v70 = *(_QWORD *)(v1 + 120);
    v71 = *(_QWORD *)(v70 + 16);
    if (v71)
    {
      v72 = (double *)(v70 + 40);
      v65 = 0.0;
      do
      {
        v73 = *v72;
        v72 += 3;
        v65 = v65 + v73;
        --v71;
      }
      while (v71);
    }
    v74 = *(_QWORD *)(v1 + 112);
    v75 = *(_QWORD *)(v74 + 16);
    if (v75)
    {
      if (v75 >= 4)
      {
        v76 = v75 & 0x7FFFFFFFFFFFFFFCLL;
        v78 = 0;
        v79 = (__int32 *)(v74 + 280);
        v80 = v75 & 0x7FFFFFFFFFFFFFFCLL;
        v81 = 0;
        do
        {
          v82.i32[0] = *(v79 - 48);
          v82.i32[1] = *(v79 - 32);
          v83.i32[0] = *(v79 - 16);
          v83.i32[1] = *v79;
          v78 = vmax_s32(v82, v78);
          v81 = vmax_s32(v83, v81);
          v79 += 64;
          v80 -= 4;
        }
        while (v80);
        v84 = vmax_s32(v78, v81);
        v77 = vpmax_s32(v84, v84).u32[0];
        if (v75 == v76)
          goto LABEL_122;
      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
      v85 = v75 - v76;
      v86 = (int *)(v74 + (v76 << 6) + 88);
      do
      {
        v88 = *v86;
        v86 += 16;
        v87 = v88;
        if (v88 > v77)
          v77 = v87;
        --v85;
      }
      while (v85);
    }
    else
    {
      v77 = 0;
    }
LABEL_122:
    v89 = (*(double *)(v1 + 72) - v67 - v65) / (double)v77;
    if (v89 < 0.0)
      v90 = 0.0;
    else
      v90 = v89;
    if (v64)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v63);
        v63 = result;
      }
      v91 = *(_QWORD *)(v63 + 16);
      v92 = v64 - 1;
      if (v91 < v64 - 1)
        v92 = *(_QWORD *)(v63 + 16);
      if (v92 >= 2)
      {
        v94 = v92 + 1;
        v95 = v94 & 1;
        if ((v94 & 1) == 0)
          v95 = 2;
        v93 = v94 - v95;
        v96 = (double *)(v63 + 144);
        v97 = v93;
        do
        {
          *(v96 - 8) = v90;
          *v96 = v90;
          v96 += 16;
          v97 -= 2;
        }
        while (v97);
      }
      else
      {
        v93 = 0;
      }
      v98 = (v93 << 6) + 80;
      do
      {
        if (v93 >= v91)
          goto LABEL_313;
        ++v93;
        *(double *)(v63 + v98) = v90;
        v98 += 64;
      }
      while (v64 != v93);
      *(_QWORD *)(v1 + 104) = v63;
    }
LABEL_140:
    if ((*(_BYTE *)(v1 + 96) & 1) != 0)
      goto LABEL_180;
    v99 = *(_QWORD *)(v1 + 112);
    v100 = *(_QWORD *)(v99 + 16);
    v101 = 0.0;
    if (v100)
    {
      v102 = (double *)(v99 + 72);
      v103 = 0.0;
      v104 = *(_QWORD *)(v99 + 16);
      do
      {
        v105 = *(v102 - 1);
        if (v105 <= *v102)
          v105 = *v102;
        v103 = v103 + *(v102 - 5) + v105;
        v102 += 8;
        --v104;
      }
      while (v104);
    }
    else
    {
      v103 = 0.0;
    }
    v106 = *(_QWORD *)(v1 + 128);
    v107 = *(_QWORD *)(v106 + 16);
    if (v107)
    {
      v108 = (double *)(v106 + 40);
      v101 = 0.0;
      do
      {
        v109 = *v108;
        v108 += 3;
        v101 = v101 + v109;
        --v107;
      }
      while (v107);
    }
    v110 = *(_QWORD *)(v1 + 104);
    v111 = *(_QWORD *)(v110 + 16);
    if (v111)
    {
      if (v111 >= 4)
      {
        v112 = v111 & 0x7FFFFFFFFFFFFFFCLL;
        v114 = 0;
        v115 = (__int32 *)(v110 + 280);
        v116 = v111 & 0x7FFFFFFFFFFFFFFCLL;
        v117 = 0;
        do
        {
          v118.i32[0] = *(v115 - 48);
          v118.i32[1] = *(v115 - 32);
          v119.i32[0] = *(v115 - 16);
          v119.i32[1] = *v115;
          v114 = vmax_s32(v118, v114);
          v117 = vmax_s32(v119, v117);
          v115 += 64;
          v116 -= 4;
        }
        while (v116);
        v120 = vmax_s32(v114, v117);
        v113 = vpmax_s32(v120, v120).u32[0];
        if (v111 == v112)
          goto LABEL_162;
      }
      else
      {
        v112 = 0;
        v113 = 0;
      }
      v121 = v111 - v112;
      v122 = (int *)(v110 + (v112 << 6) + 88);
      do
      {
        v124 = *v122;
        v122 += 16;
        v123 = v124;
        if (v124 > v113)
          v113 = v123;
        --v121;
      }
      while (v121);
    }
    else
    {
      v113 = 0;
    }
LABEL_162:
    v125 = (*(double *)(v1 + 88) - v103 - v101) / (double)v113;
    if (v125 < 0.0)
      v126 = 0.0;
    else
      v126 = v125;
    if (v100)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v99);
        v99 = result;
      }
      v127 = *(_QWORD *)(v99 + 16);
      v128 = v100 - 1;
      if (v127 < v100 - 1)
        v128 = *(_QWORD *)(v99 + 16);
      if (v128 >= 2)
      {
        v130 = v128 + 1;
        v131 = v130 & 1;
        if ((v130 & 1) == 0)
          v131 = 2;
        v129 = v130 - v131;
        v132 = (double *)(v99 + 144);
        v133 = v129;
        do
        {
          *(v132 - 8) = v126;
          *v132 = v126;
          v132 += 16;
          v133 -= 2;
        }
        while (v133);
      }
      else
      {
        v129 = 0;
      }
      v134 = (v129 << 6) + 80;
      do
      {
        if (v129 >= v127)
          goto LABEL_314;
        ++v129;
        *(double *)(v99 + v134) = v126;
        v134 += 64;
      }
      while (v100 != v129);
      *(_QWORD *)(v1 + 112) = v99;
    }
LABEL_180:
    if (v9 < v40)
      goto LABEL_355;
    v204 = v5;
    if (v40 != v9)
    {
      v142 = v40;
      v214 = v7;
      do
      {
        if (v142 == v9)
          goto LABEL_347;
        v145 = *((_QWORD *)v4 + 2);
        if (v40 < v142)
        {
          if (v142 >= v145)
            goto LABEL_354;
          v146 = &v7[64 * v142];
          v147 = *((double *)v146 + 1);
          v148 = &v7[64 * v40];
          v149 = *((double *)v148 + 1);
          if (v147 == v149)
          {
            v150 = *((double *)v146 + 4);
            v151 = *((double *)v148 + 4);
            v152 = v150 < v151;
            if (v150 == v151)
            {
              v153 = *((double *)v146 + 5);
              v154 = *((double *)v148 + 5);
              v152 = v153 < v154;
              if (v153 == v154)
              {
                v155 = *((double *)v146 + 6);
                v156 = *((double *)v148 + 6);
                v152 = v155 < v156;
                if (v155 == v156)
                {
                  if (v146[56] > v148[56])
                    goto LABEL_211;
                  goto LABEL_204;
                }
              }
            }
          }
          else
          {
            v152 = v149 < v147;
          }
          if (!v152)
          {
LABEL_211:
            while (v40 < *((_QWORD *)v4 + 2))
            {
              v168 = *(_QWORD *)&v7[64 * v40];
              if ((v168 & 0x8000000000000000) != 0)
                goto LABEL_325;
              v169 = *(_QWORD *)(v1 + 136);
              if (v168 >= *(_QWORD *)(v169 + 16))
                goto LABEL_326;
              v170 = (int *)(v169 + 104 * v168);
              v171 = v170[8];
              v172 = v170[10];
              if ((int)v172 < (int)v171)
                goto LABEL_327;
              v173 = v40;
              v174 = v170[9];
              v175 = v170[11];
              if ((_DWORD)v172 != (_DWORD)v171)
              {
                if ((int)v175 < (int)v174)
                  goto LABEL_335;
                if (!__OFSUB__((_DWORD)v175, (_DWORD)v174))
                {
                  v176 = *(_QWORD *)(v1 + 104);
                  result = swift_isUniquelyReferenced_nonNull_native();
                  if ((result & 1) == 0)
                  {
                    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v176);
                    v176 = result;
                  }
                  v177 = (v171 << 6) + 88;
                  v178 = v172 - v171;
                  v179 = v171;
                  while (v179 < v172)
                  {
                    if ((v171 & 0x80000000) != 0)
                      goto LABEL_298;
                    if (*(_QWORD *)(v176 + 16) <= v179)
                      goto LABEL_299;
                    *(_DWORD *)(v176 + v177) -= v175 - v174;
                    v177 += 64;
                    ++v179;
                    if (!--v178)
                    {
                      *(_QWORD *)(v1 + 104) = v176;
                      v4 = v215;
                      goto LABEL_226;
                    }
                  }
                  goto LABEL_297;
                }
                goto LABEL_336;
              }
LABEL_226:
              if (((v172 ^ v171) & 0x80000000) != 0)
              {
                if ((int)v171 >= 0)
                  v181 = v171;
                else
                  v181 = -(int)v171;
                if ((int)v172 >= 0)
                  v182 = v172;
                else
                  v182 = -(int)v172;
                v183 = __CFADD__(v181, v182);
                v180 = (v181 + v182);
                if (v183)
                  goto LABEL_345;
                if ((int)v171 >= 0)
                  v180 = -v180;
              }
              else
              {
                LODWORD(v180) = v172 - v171;
                if (__OFSUB__((_DWORD)v172, (_DWORD)v171))
                  goto LABEL_333;
                v180 = (int)v180;
              }
              v184 = *(_QWORD *)(v1 + 104);
              if (v180 != *(_QWORD *)(v184 + 16))
              {
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) != 0)
                {
                  if ((v171 & 0x80000000) != 0)
                    goto LABEL_339;
                }
                else
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v184);
                  v184 = result;
                  if ((v171 & 0x80000000) != 0)
                    goto LABEL_339;
                }
                if (*(_QWORD *)(v184 + 16) <= v171)
                  goto LABEL_337;
                v185 = v184 + (v171 << 6);
                --*(_DWORD *)(v185 + 92);
                *(_QWORD *)(v1 + 104) = v184;
                if (!*(_DWORD *)(v185 + 92))
                  result = GridLayout.Cache.reassignAvailability(in:at:)(0, v171);
              }
              if ((int)v175 < (int)v174)
                goto LABEL_328;
              if ((_DWORD)v175 != (_DWORD)v174)
              {
                v28 = __OFSUB__((_DWORD)v172, (_DWORD)v171);
                v186 = v172 - v171;
                if (v28)
                  goto LABEL_338;
                v187 = *(_QWORD *)(v1 + 112);
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v187);
                  v187 = result;
                }
                v188 = (v174 << 6) + 88;
                v189 = v175 - v174;
                v190 = v174;
                while (v190 < v175)
                {
                  if ((v174 & 0x80000000) != 0)
                    goto LABEL_301;
                  if (*(_QWORD *)(v187 + 16) <= v190)
                    goto LABEL_302;
                  *(_DWORD *)(v187 + v188) -= v186;
                  v188 += 64;
                  ++v190;
                  if (!--v189)
                  {
                    *(_QWORD *)(v1 + 112) = v187;
                    goto LABEL_255;
                  }
                }
                goto LABEL_300;
              }
LABEL_255:
              if (((v175 ^ v174) & 0x80000000) != 0)
              {
                if ((int)v174 >= 0)
                  v192 = v174;
                else
                  v192 = -(int)v174;
                if ((int)v175 >= 0)
                  v193 = v175;
                else
                  v193 = -(int)v175;
                v183 = __CFADD__(v192, v193);
                v191 = (v192 + v193);
                if (v183)
                  goto LABEL_346;
                if ((int)v174 >= 0)
                  v191 = -v191;
              }
              else
              {
                LODWORD(v191) = v175 - v174;
                if (__OFSUB__((_DWORD)v175, (_DWORD)v174))
                  goto LABEL_334;
                v191 = (int)v191;
              }
              v194 = *(_QWORD *)(v1 + 112);
              v195 = v173;
              v7 = v214;
              if (v191 != *(_QWORD *)(v194 + 16))
              {
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) != 0)
                {
                  if ((v174 & 0x80000000) != 0)
                    goto LABEL_343;
                }
                else
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v194);
                  v194 = result;
                  if ((v174 & 0x80000000) != 0)
                    goto LABEL_343;
                }
                if (*(_QWORD *)(v194 + 16) <= v174)
                  goto LABEL_342;
                v196 = v194 + (v174 << 6);
                --*(_DWORD *)(v196 + 92);
                *(_QWORD *)(v1 + 112) = v194;
                if (!*(_DWORD *)(v196 + 92))
                  result = GridLayout.Cache.reassignAvailability(in:at:)(1, v174);
              }
              v40 = v195 + 1;
              if (v40 >= v142)
              {
                if (v142 < *((_QWORD *)v4 + 2))
                  goto LABEL_205;
                goto LABEL_350;
              }
            }
            goto LABEL_324;
          }
        }
LABEL_204:
        if (v142 >= v145)
          goto LABEL_350;
LABEL_205:
        v157 = *(_QWORD *)&v7[64 * v142];
        if ((v157 & 0x8000000000000000) != 0)
          goto LABEL_348;
        v158 = *(_QWORD *)(v1 + 136);
        if (v157 >= *(_QWORD *)(v158 + 16))
          goto LABEL_349;
        v211 = v40;
        v159 = v158 + 104 * v157;
        v160 = *(unsigned int *)(v159 + 32);
        v161 = *(unsigned int *)(v159 + 36);
        v162 = *(unsigned int *)(v159 + 40);
        v163 = *(unsigned int *)(v159 + 44);
        v164 = *(_BYTE *)(v159 + 112);
        v165 = static ProposedViewSize.unspecified.getter();
        v206 = v162;
        v207 = v161;
        if ((v209 & 1) != 0)
        {
          v144 = v165;
          v167 = v166 & 1;
          if ((v208 & 2) == 0)
            goto LABEL_191;
        }
        else
        {
          GridLayout.Cache.proposal(for:in:includeAvailable:)(0, v160 | (v161 << 32), v162 | (v163 << 32), (v164 & 1) == 0);
          v167 = 0;
          v144 = v197;
          if ((v208 & 2) == 0)
            goto LABEL_191;
        }
        v143 = v144;
        GridLayout.Cache.proposal(for:in:includeAvailable:)(1, v160 | (v207 << 32), v206 | (v163 << 32), (v164 & 2) == 0);
        v144 = v143;
LABEL_191:
        v4 = v215;
        ++v142;
        result = GridLayout.Cache.resize(at:proposal:)(v157, v144, v167);
        v40 = v211;
        v7 = v214;
      }
      while (v142 != v9);
    }
    v135 = v7;
    v136 = *(_QWORD *)(v1 + 104);
    v137 = *(_QWORD *)(v136 + 16);
    if (v137)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v5 = v204;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v136);
        v136 = result;
      }
      v138 = 0;
      v139 = *(_QWORD *)(v136 + 16);
      v140 = 72;
      while (v138 < v139)
      {
        ++v138;
        v141 = (_QWORD *)(v136 + v140);
        *v141 = 0;
        v141[1] = 0;
        v141[2] = 0;
        v140 += 64;
        if (v137 == v138)
        {
          *(_QWORD *)(v1 + 104) = v136;
          goto LABEL_282;
        }
      }
LABEL_311:
      __break(1u);
      goto LABEL_312;
    }
    v5 = v204;
LABEL_282:
    v198 = *(_QWORD *)(v1 + 112);
    v199 = *(_QWORD *)(v198 + 16);
    if (v199)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v198);
        v198 = result;
      }
      v200 = 0;
      v201 = *(_QWORD *)(v198 + 16);
      v202 = 72;
      while (v200 < v201)
      {
        ++v200;
        v203 = (_QWORD *)(v198 + v202);
        *v203 = 0;
        v203[1] = 0;
        v203[2] = 0;
        v202 += 64;
        if (v199 == v200)
        {
          *(_QWORD *)(v1 + 112) = v198;
          goto LABEL_289;
        }
      }
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
      goto LABEL_315;
    }
LABEL_289:
    v6 = v9;
    v7 = v135;
    if (v9 >= v5)
      return swift_bridgeObjectRelease();
  }
  v213 = *(_QWORD *)(v1 + 136);
  v212 = v9;
  v41 = v9;
  while (v41 != v5)
  {
    if (v9 < 0)
      goto LABEL_316;
    if (v41 >= *((_QWORD *)v4 + 2))
      goto LABEL_317;
    v42 = &v7[64 * v41];
    v43 = *(_QWORD *)v42;
    if ((*(_QWORD *)v42 & 0x8000000000000000) != 0)
      goto LABEL_318;
    if (v43 >= *(_QWORD *)(v213 + 16))
      goto LABEL_319;
    v44 = v7;
    v45 = v5;
    v46 = (int *)(v213 + 32 + 104 * v43);
    v47 = *v46;
    v48 = v46[2];
    if ((int)v48 < (int)v47)
      goto LABEL_320;
    v49 = *((double *)v42 + 3);
    v50 = v46[1];
    v51 = v46[3];
    if ((_DWORD)v48 == (_DWORD)v47)
      goto LABEL_89;
    v52 = *((double *)v42 + 2);
    v53 = *(_QWORD *)(v1 + 104);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v53);
      v53 = result;
    }
    v54 = v52 / (double)((int)v48 - (int)v47);
    v55 = (v47 << 6) + 72;
    v56 = v48 - v47;
    v57 = v47;
    do
    {
      if (v57 >= v48)
      {
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
        goto LABEL_303;
      }
      if ((v47 & 0x80000000) != 0)
        goto LABEL_292;
      if (*(_QWORD *)(v53 + 16) <= v57)
        goto LABEL_293;
      if (v54 < *(double *)(v53 + v55))
        *(double *)(v53 + v55) = v54;
      v55 += 64;
      ++v57;
      --v56;
    }
    while (v56);
    *(_QWORD *)(v1 + 104) = v53;
LABEL_89:
    if ((int)v51 < (int)v50)
      goto LABEL_321;
    v5 = v45;
    if ((_DWORD)v51 == (_DWORD)v50)
    {
      v7 = v44;
      v9 = v212;
    }
    else
    {
      v58 = *(_QWORD *)(v1 + 112);
      result = swift_isUniquelyReferenced_nonNull_native();
      v7 = v44;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
        v58 = result;
      }
      v9 = v212;
      v59 = v49 / (double)((int)v51 - (int)v50);
      v60 = (v50 << 6) + 72;
      v61 = v51 - v50;
      v62 = v50;
      do
      {
        if (v62 >= v51)
          goto LABEL_294;
        if ((v50 & 0x80000000) != 0)
          goto LABEL_295;
        if (*(_QWORD *)(v58 + 16) <= v62)
          goto LABEL_296;
        if (v59 < *(double *)(v58 + v60))
          *(double *)(v58 + v60) = v59;
        v60 += 64;
        ++v62;
        --v61;
      }
      while (v61);
      *(_QWORD *)(v1 + 112) = v58;
    }
    ++v41;
    v4 = v215;
    if (v41 == v5)
      goto LABEL_67;
  }
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  __break(1u);
LABEL_334:
  __break(1u);
LABEL_335:
  __break(1u);
LABEL_336:
  __break(1u);
LABEL_337:
  __break(1u);
LABEL_338:
  __break(1u);
LABEL_339:
  __break(1u);
LABEL_340:
  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  __break(1u);
LABEL_343:
  __break(1u);
LABEL_344:
  __break(1u);
LABEL_345:
  __break(1u);
LABEL_346:
  __break(1u);
LABEL_347:
  __break(1u);
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
  return result;
}

uint64_t GridLayout.Cache.finalizeSizes()()
{
  __int128 *v0;
  uint64_t result;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  unsigned int *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  double v38;
  double v39;
  char *v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  double v44;
  __int128 *v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  char v52;
  __int128 v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  finalize #1 (_:rowsOrColumns:) in GridLayout.Cache.finalizeSizes()((uint64_t *)v0 + 15, (uint64_t *)v0 + 13);
  result = finalize #1 (_:rowsOrColumns:) in GridLayout.Cache.finalizeSizes()((uint64_t *)v0 + 16, (uint64_t *)v0 + 14);
  v2 = (char *)*((_QWORD *)v0 + 17);
  v3 = *((_QWORD *)v2 + 2);
  if (!v3)
    return result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_68:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v4 = 0;
  v50 = *((_DWORD *)v0 + 12);
  v49 = *((_QWORD *)v0 + 7);
  v5 = *((_QWORD *)v0 + 13);
  v6 = *((_QWORD *)v0 + 14);
  v7 = v2 + 32;
  v47 = *((_BYTE *)v0 + 65);
  v48 = *((_BYTE *)v0 + 64);
  v46 = v0;
  while (1)
  {
    if (v4 == v3)
      goto LABEL_56;
    if (v4 >= *((_QWORD *)v2 + 2))
      goto LABEL_57;
    v11 = (unsigned int *)&v7[104 * v4];
    v12 = (int)*v11;
    v13 = v11[2];
    if ((int)v13 < (int)v12)
      goto LABEL_58;
    v14 = *v11;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_59;
    v15 = *(_QWORD *)(v5 + 16);
    if ((uint64_t)v15 <= v12)
      goto LABEL_60;
    v16 = (int)v11[1];
    v17 = v11[3];
    v18 = *(double *)(v5 + 32 + (v12 << 6) + 32);
    if ((_DWORD)v13 != (_DWORD)v12)
    {
      if ((_DWORD)v12 == 0x7FFFFFFF)
        goto LABEL_64;
      if ((int)v13 < (int)v12 + 1)
        goto LABEL_65;
      if ((_DWORD)v12 + 1 != (_DWORD)v13)
      {
        v19 = (v13 + ~(_DWORD)v12);
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        v20 = ~v14;
        v21 = v15 + ~v14;
        v22 = v13 - v14 - 2;
        if (v21 < v22)
          v22 = v21;
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = (double *)(v5 + 128 + (v14 << 6));
        v25 = v20 + v13;
        while (v22 < v19)
        {
          if (v21 == v23)
            goto LABEL_53;
          v26 = *(v24 - 4);
          v27 = *v24;
          v24 += 8;
          v18 = v18 + v26 + v27;
          if (!--v25)
            goto LABEL_26;
        }
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
    }
LABEL_26:
    if ((int)v17 < (int)v16)
      goto LABEL_61;
    v28 = v16;
    if ((v16 & 0x80000000) != 0)
      goto LABEL_62;
    v29 = *(_QWORD *)(v6 + 16);
    if ((uint64_t)v29 <= v16)
      goto LABEL_63;
    v30 = *(double *)(v6 + 32 + (v16 << 6) + 32);
    if ((_DWORD)v17 != (_DWORD)v16)
    {
      if ((_DWORD)v16 == 0x7FFFFFFF)
        goto LABEL_66;
      if ((int)v17 < (int)v16 + 1)
        goto LABEL_67;
      if ((_DWORD)v16 + 1 != (_DWORD)v17)
      {
        v31 = (v17 + ~(_DWORD)v16);
        if (v29 <= v28 + 1)
          v29 = v28 + 1;
        v32 = ~v28;
        v33 = v29 + ~v28;
        v34 = v17 - v28 - 2;
        if (v33 < v34)
          v34 = v33;
        if (v34 >= v31)
          v35 = v31;
        else
          v35 = v34;
        v36 = (double *)(v6 + 128 + (v28 << 6));
        v37 = v32 + v17;
        while (v34 < v31)
        {
          if (v33 == v35)
            goto LABEL_55;
          v38 = *(v36 - 4);
          v39 = *v36;
          v36 += 8;
          v30 = v30 + v38 + v39;
          if (!--v37)
            goto LABEL_44;
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
LABEL_44:
    v40 = &v7[104 * v4];
    v42 = *((_OWORD *)v40 + 2);
    v41 = v40 + 32;
    v43 = v41[1];
    v55 = v42;
    v56 = v43;
    v0 = &v55;
    if (MEMORY[0x18D75BE3C]() != v18 || v44 != v30)
      break;
LABEL_5:
    ++v4;
    result = 104;
    if (v4 == v3)
      goto LABEL_50;
  }
  LODWORD(v55) = v50;
  *((_QWORD *)&v55 + 1) = v49;
  LOBYTE(v56) = v48;
  BYTE1(v56) = v47;
  LayoutSubviews.subscript.getter();
  v51 = v53;
  v52 = v54;
  LOBYTE(v55) = 0;
  v0 = &v51;
  result = LayoutSubview.dimensions(in:)();
  if (v4 < *((_QWORD *)v2 + 2))
  {
    v8 = v41 - 1;
    v9 = *((_QWORD *)&v55 + 1);
    *v8 = v55;
    v8[1] = v9;
    v10 = v57;
    *v41 = v56;
    v41[1] = v10;
    swift_release();
    goto LABEL_5;
  }
  __break(1u);
LABEL_50:
  *((_QWORD *)v46 + 17) = v2;
  return result;
}

uint64_t closure #1 in GridLayout.Cache.alignment(of:)@<X0>(double *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;

  v8 = *(int *)a1;
  v7 = *((int *)a1 + 1);
  v9 = a1[11];
  v10 = a1[12];
  *(double *)&result = COERCE_DOUBLE(ViewDimensions.subscript.getter());
  if ((v12 & 1) != 0)
  {
LABEL_12:
    *(double *)a4 = *(double *)&result;
    *(_BYTE *)(a4 + 8) = v12 & 1;
    return result;
  }
  if ((v8 & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(a3 + 104);
  if (*(_QWORD *)(v13 + 16) <= v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v7 & 0x80000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(a3 + 112);
  if (*(_QWORD *)(v14 + 16) > v7)
  {
    v15 = *(double *)(v13 + (v8 << 6) + 56);
    if ((a2 & 1) != 0)
      v16 = v10;
    else
      v16 = v9;
    if ((a2 & 1) != 0)
      v15 = *(double *)(v14 + (v7 << 6) + 56);
    *(double *)&result = v16 + v15 + *(double *)&result;
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t (*GridLayout.Cache.subscript.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.Cache.assignSpacing(in:)(uint64_t result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  double v30;
  double v31;
  uint64_t (*v32)(_QWORD);
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;

  v38 = result & 1;
  v2 = (_BYTE *)(v1 + 24);
  if ((result & 1) != 0)
    v2 = (_BYTE *)(v1 + 40);
  if (*v2 != 1)
    return result;
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (!v5)
    {
LABEL_18:
      v6 = *(_QWORD *)(v3 + 16);
      if (!v6)
        return result;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 16);
    if (!v5)
    {
      v6 = *(_QWORD *)(v4 + 16);
      if (!v6)
        return result;
LABEL_19:
      v13 = 0;
      v40 = v1;
      v36 = v6;
      while (v13 != v6)
      {
        v37 = v13;
        if (v38)
          v14 = *(_QWORD *)(v1 + 112);
        else
          v14 = *(_QWORD *)(v1 + 104);
        v39 = *(_QWORD *)(v14 + 16);
        if (v39)
        {
          v15 = 0;
          v16 = 0;
          v17 = 0;
          LOBYTE(v18) = 2;
          v19 = 32;
          do
          {
            v20 = v18;
            v21 = v16;
            v22 = v15;
            if (*(_QWORD *)(*(_QWORD *)(v40 + 144) + 16)
              && ((v23 = *(_DWORD *)(v40 + 48),
                   v24 = *(_QWORD *)(v40 + 56),
                   v25 = *(_BYTE *)(v40 + 64),
                   v26 = *(_BYTE *)(v40 + 65),
                   v38)
                ? (v27 = v17)
                : (v27 = v37),
                  v38 ? (v28 = v37) : (v28 = v17),
                  result = specialized __RawDictionaryStorage.find<A>(_:)(v28 | ((unint64_t)v27 << 32)),
                  (v29 & 1) != 0))
            {
              LODWORD(v46) = v23;
              v47 = v24;
              v48 = v25;
              v49 = v26;
              result = LayoutSubviews.subscript.getter();
              v15 = v43;
              v16 = v44;
              v18 = v45;
            }
            else
            {
              v15 = 0;
              v16 = 0;
              v18 = 2;
            }
            if (v20 != 2 && v18 != 2)
            {
              v46 = v22;
              v47 = v21;
              v48 = v20;
              v43 = v15;
              v44 = v16;
              v45 = v18;
              result = MEMORY[0x18D7571EC](&v46, &v43);
              if ((result & 1) == 0)
              {
                v46 = v22;
                v47 = v21;
                v48 = v20;
                LayoutSubview.spacing.getter();
                v46 = v15;
                v47 = v16;
                v48 = v18;
                LayoutSubview.spacing.getter();
                v46 = v41;
                LOBYTE(v47) = v42;
                ViewSpacing.distance(to:along:)();
                v31 = v30;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v32 = GridLayout.Cache.subscript.modify();
                v34 = v33;
                v35 = *v33;
                result = swift_isUniquelyReferenced_nonNull_native();
                *v34 = v35;
                if ((result & 1) != 0)
                {
                  if ((v17 & 0x8000000000000000) != 0)
                    goto LABEL_48;
                }
                else
                {
                  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
                  v35 = result;
                  *v34 = result;
                  if ((v17 & 0x8000000000000000) != 0)
                  {
LABEL_48:
                    __break(1u);
                    return result;
                  }
                }
                if (v17 >= *(_QWORD *)(v35 + 16))
                {
                  __break(1u);
                  goto LABEL_51;
                }
                if (*(double *)(v35 + v19) < v31)
                  *(double *)(v35 + v19) = v31;
                result = ((uint64_t (*)(uint64_t *, _QWORD))v32)(&v46, 0);
              }
            }
            ++v17;
            v19 += 64;
          }
          while (v39 != v17);
        }
        v13 = v37 + 1;
        v6 = v36;
        v1 = v40;
        if (v37 + 1 == v36)
          return result;
      }
LABEL_52:
      __break(1u);
      return result;
    }
  }
  v7 = 0;
  v8 = 32;
  do
  {
    v9 = GridLayout.Cache.subscript.modify();
    v11 = v10;
    v12 = *v10;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v11 = v12;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      v12 = result;
      *v11 = result;
    }
    if (v7 >= *(_QWORD *)(v12 + 16))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    ++v7;
    *(_QWORD *)(v12 + v8) = 0;
    result = ((uint64_t (*)(uint64_t *, _QWORD))v9)(&v46, 0);
    v8 += 64;
  }
  while (v5 != v7);
  if (v38)
  {
    v3 = *(_QWORD *)(v1 + 104);
    goto LABEL_18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
  if (v6)
    goto LABEL_19;
  return result;
}

uint64_t GridLayout.Cache.applyAlignment(in:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  double v19;
  double v20;
  double *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  unint64_t v43;
  int *v44;
  int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double *v51;
  uint64_t v52;
  unint64_t v53;
  double v54;
  double v55;
  unint64_t v56;
  signed int v57;
  signed int v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double *v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  __int128 v74;
  double v75;
  double v76;
  uint64_t v77;
  double *v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v2 = *(_QWORD *)(v1 + 104);
  v81 = *(_QWORD *)(v1 + 112);
  if ((result & 1) != 0)
  {
    v3 = *(__int128 **)(*(_QWORD *)(v1 + 112) + 16);
    if (!v3)
      return result;
  }
  else
  {
    v3 = *(__int128 **)(v2 + 16);
    if (!v3)
      return result;
  }
  v4 = result & 1;
  v87 = *(_QWORD *)(v86 + 136);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_145:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v87);
    v87 = result;
  }
  v5 = 0;
  v85 = 0;
  *(_QWORD *)(v86 + 136) = v87;
  v6 = v81;
  if (!v4)
    v6 = v2;
  v84 = v6;
  v82 = v3;
  v83 = v6 + 32;
  v88 = v87 + 32;
  v80 = v2;
  do
  {
    if ((__int128 *)v5 == v3)
    {
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if (v5 >= *(_QWORD *)(v84 + 16))
      goto LABEL_131;
    if (*(_BYTE *)(v83 + (v5 << 6) + 16) == 1)
    {
      if (!v4)
        goto LABEL_17;
    }
    else if (!v4)
    {
LABEL_17:
      v7 = *(_QWORD *)(v81 + 16);
      if (!v7)
        goto LABEL_10;
      goto LABEL_20;
    }
    v7 = *(_QWORD *)(v2 + 16);
    if (!v7)
      goto LABEL_10;
LABEL_20:
    v8 = 0;
    v9 = *(_QWORD *)(v86 + 144);
    v10 = INFINITY;
    v11 = -INFINITY;
    do
    {
      if (v4)
        v22 = v5;
      else
        v22 = v8;
      if (v4)
        v2 = v8;
      else
        v2 = v5;
      if (*(_QWORD *)(v9 + 16))
      {
        v3 = (__int128 *)v9;
        result = specialized __RawDictionaryStorage.find<A>(_:)(v2 | ((unint64_t)v22 << 32));
        if ((v23 & 1) != 0)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * result);
          if ((v24 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (v24 >= *(_QWORD *)(v87 + 16))
            goto LABEL_126;
          v25 = (int *)(v88 + 104 * v24);
          v27 = *v25;
          v26 = v25[1];
          if (v27 == (_DWORD)v2 && v26 == v22)
          {
            v29 = *(_QWORD *)(v86 + 56);
            v30 = *(_BYTE *)(v86 + 64);
            v31 = *(_BYTE *)(v86 + 65);
            LODWORD(v89) = *(_DWORD *)(v86 + 48);
            *((_QWORD *)&v89 + 1) = v29;
            LOBYTE(v90) = v30;
            BYTE1(v90) = v31;
            v3 = &v89;
            LayoutSubviews.subscript.getter();
            v2 = 0x7FF0000000000000;
            if (v24 >= *(_QWORD *)(v87 + 16))
              goto LABEL_127;
            result = UnitPoint.subscript.getter();
            if ((~v32 & 0x7FF0000000000000) != 0)
            {
              v85 = 1;
            }
            else
            {
              v12 = v88 + 104 * v24;
              v13 = *(_QWORD *)(v12 + 24);
              *(_QWORD *)&v89 = *(_QWORD *)(v12 + 16);
              *((_QWORD *)&v89 + 1) = v13;
              v14 = *(_OWORD *)(v12 + 48);
              v90 = *(_OWORD *)(v12 + 32);
              v91 = v14;
              ViewDimensions.subscript.getter();
              v16 = INFINITY;
              if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) == 0)
                v16 = v15;
              if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
                v17 = v15;
              else
                v17 = v16;
              v18 = *(_OWORD *)(v12 + 48);
              if (v10 > -v17)
                v10 = -v17;
              v89 = *(_OWORD *)(v12 + 32);
              v90 = v18;
              result = ViewSize.subscript.getter();
              v20 = v19 - v17;
              if (v11 < v20)
                v11 = v20;
              v21 = (double *)(v12 + 88);
              if (v4)
                v21 = (double *)(v12 + 96);
              *v21 = -v17;
            }
          }
        }
      }
      ++v8;
    }
    while (v7 != v8);
    v3 = v82;
    if (v10 > v11)
    {
      v2 = v80;
      goto LABEL_10;
    }
    if (v5 >= *(_QWORD *)(v84 + 16))
      goto LABEL_134;
    v33 = *(double *)(v83 + (v5 << 6) + 32);
    result = AlignmentKey.fraction.getter();
    v34 = 0.0;
    v2 = v80;
    if (v35 != 0.0)
    {
      result = AlignmentKey.fraction.getter();
      v34 = (v33 - (v11 - v10)) * v36;
    }
    v37 = v34 - v10;
    if (v37 != 0.0)
    {
      if (v4)
      {
        v38 = *(_QWORD *)(v80 + 16);
        if (!v38)
          goto LABEL_10;
      }
      else
      {
        v38 = *(_QWORD *)(v81 + 16);
        if (!v38)
          goto LABEL_10;
      }
      v39 = 0;
      v3 = *(__int128 **)(v86 + 144);
      do
      {
        if (v4)
          v40 = v5;
        else
          v40 = v39;
        if (v4)
          v41 = v39;
        else
          v41 = v5;
        if (*((_QWORD *)v3 + 2))
        {
          result = specialized __RawDictionaryStorage.find<A>(_:)(v41 | ((unint64_t)v40 << 32));
          if ((v42 & 1) != 0)
          {
            v43 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 8 * result);
            if ((v43 & 0x8000000000000000) != 0)
              goto LABEL_132;
            if (v43 >= *(_QWORD *)(v87 + 16))
              goto LABEL_133;
            v44 = (int *)(v88 + 104 * v43);
            v46 = *v44;
            v45 = v44[1];
            if (v46 == v41 && v45 == v40)
            {
              result = UnitPoint.subscript.getter();
              if ((~v48 & 0x7FF0000000000000) == 0)
              {
                v49 = v88 + 104 * v43;
                v50 = (double *)(v49 + 96);
                v51 = (double *)(v49 + 88);
                if (v4)
                  v51 = v50;
                *v51 = v37 + *v51;
              }
            }
          }
        }
        ++v39;
      }
      while (v38 != v39);
      v3 = v82;
    }
LABEL_10:
    ++v5;
  }
  while ((__int128 *)v5 != v3);
  *(_QWORD *)(v86 + 136) = v87;
  if ((v85 & 1) != 0)
  {
    v52 = *(_QWORD *)(v87 + 16);
    if (v52)
    {
      v53 = 0;
      while (v53 < *(_QWORD *)(v87 + 16))
      {
        v3 = (__int128 *)(v88 + 104 * v53);
        result = UnitPoint.subscript.getter();
        v55 = v54;
        if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) != 0)
        {
          v56 = *(_QWORD *)(v87 + 16);
          if (v53 >= v56)
            goto LABEL_136;
          if (v4)
          {
            v57 = *((_DWORD *)v3 + 3);
            v58 = *((_DWORD *)v3 + 1);
            if (v57 < v58)
              goto LABEL_142;
            v59 = v81;
          }
          else
          {
            v57 = *((_DWORD *)v3 + 2);
            v58 = *(_DWORD *)v3;
            if (v57 < *(_DWORD *)v3)
              goto LABEL_141;
            v59 = v2;
          }
          if (v58 < 0)
            goto LABEL_137;
          v60 = *(_QWORD *)(v59 + 16);
          if ((uint64_t)v60 <= v58)
            goto LABEL_138;
          v61 = *(double *)(v59 + ((uint64_t)v58 << 6) + 64);
          if (v57 < 0 || v57 != v58)
          {
            if (v58 == 0x7FFFFFFF)
              goto LABEL_143;
            if (v57 <= v58)
              goto LABEL_144;
            ++v58;
          }
          v62 = (v57 - v58);
          if (v57 < v58)
            goto LABEL_139;
          if (v57 != v58)
          {
            v63 = v58;
            v64 = v57;
            v65 = ~(unint64_t)v58 + v57;
            v66 = v60 - v63;
            if (v60 < v63)
              v66 = 0;
            if (v65 >= v66)
              v65 = v66;
            if (v65 >= v62)
              v67 = v62;
            else
              v67 = v65;
            v68 = (double *)(v59 + (v63 << 6) + 64);
            v69 = v64 - v63;
            while (v65 < v62)
            {
              if (v66 == v67)
                goto LABEL_129;
              v70 = *(v68 - 4);
              v71 = *v68;
              v68 += 8;
              v61 = v61 + v70 + v71;
              if (!--v69)
                goto LABEL_115;
            }
            goto LABEL_128;
          }
LABEL_115:
          if (v55 == 0.0)
          {
            v72 = 0.0;
            if (v53 >= v56)
              goto LABEL_140;
          }
          else
          {
            v73 = v88 + 104 * v53;
            v74 = *(_OWORD *)(v73 + 48);
            v89 = *(_OWORD *)(v73 + 32);
            v90 = v74;
            v3 = &v89;
            result = MEMORY[0x18D75BE3C](result);
            if (v4)
              v75 = v76;
            v72 = v55 * (v61 - v75);
            if (v53 >= *(_QWORD *)(v87 + 16))
              goto LABEL_140;
          }
          v77 = v88 + 104 * v53;
          v78 = (double *)(v77 + 88);
          v79 = (double *)(v77 + 96);
          if (!v4)
            v79 = v78;
          *v79 = v72;
          *(_QWORD *)(v86 + 136) = v87;
        }
        if (++v53 == v52)
          return result;
      }
      goto LABEL_135;
    }
  }
  return result;
}

uint64_t assignPositions #1 (to:) in GridLayout.Cache.assignPositions()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  double *v4;
  double v5;
  double v6;
  double v7;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = result;
    }
    v4 = (double *)(v1 + 64);
    v5 = 0.0;
    do
    {
      v6 = v5 + *(v4 - 4);
      *(v4 - 1) = v6;
      v7 = *v4;
      v4 += 8;
      v5 = v6 + v7;
      --v2;
    }
    while (v2);
    *v3 = v1;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GeneralItem.FlexibilityEstimate(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t GeneralItem.order(to:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v14;

  v2 = *(double *)(v1 + 8);
  v3 = *(double *)(a1 + 8);
  if (v2 == v3)
  {
    v4 = *(double *)(v1 + 32);
    v5 = *(double *)(a1 + 32);
    v6 = v4 < v5;
    if (v4 == v5)
    {
      v7 = *(double *)(v1 + 40);
      v8 = *(double *)(a1 + 40);
      v6 = v7 < v8;
      if (v7 == v8)
      {
        v9 = *(double *)(v1 + 48);
        v10 = *(double *)(a1 + 48);
        v6 = v9 < v10;
        if (v9 == v10)
        {
          v11 = *(unsigned __int8 *)(v1 + 56);
          v12 = *(unsigned __int8 *)(a1 + 56);
          if (v11 == v12)
            return 1;
          else
            return 2 * ((char)v11 >= (char)v12);
        }
      }
    }
  }
  else
  {
    v6 = v3 < v2;
  }
  v14 = !v6;
  return (2 * v14);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance GeneralItem(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  int v4;
  _OWORD v6[2];
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v2 = a1[1];
  v8 = *a1;
  v9 = v2;
  v10[0] = a1[2];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a1 + 41);
  v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a2 + 41);
  v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4)
    return 1;
  if (v4 == 1)
    return (uint64_t)v8 < *(_QWORD *)&v6[0];
  return 0;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance GeneralItem(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  int v4;
  _OWORD v6[2];
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v8 = *a2;
  v9 = v3;
  v10[0] = a2[2];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 41);
  v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4)
    return 0;
  if (v4 == 1)
    return (uint64_t)v8 >= *(_QWORD *)&v6[0];
  return 1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance GeneralItem(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  int v4;
  _OWORD v6[2];
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v2 = a1[1];
  v8 = *a1;
  v9 = v2;
  v10[0] = a1[2];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a1 + 41);
  v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a2 + 41);
  v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4)
    return 0;
  if (v4 == 1)
    return (uint64_t)v8 >= *(_QWORD *)&v6[0];
  return 1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance GeneralItem(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  int v4;
  _OWORD v6[2];
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v8 = *a2;
  v9 = v3;
  v10[0] = a2[2];
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 41);
  v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4)
    return 1;
  if (v4 == 1)
    return (uint64_t)v8 < *(_QWORD *)&v6[0];
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GeneralItem(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static GeneralItem.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t GridLayout.Cache.resize(at:proposal:)(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(v3 + 136);
  if (*(_QWORD *)(v15 + 16) <= a1)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    v8 = result;
    goto LABEL_8;
  }
  v27 = *(_QWORD *)(v3 + 136);
  v31 = *(_QWORD *)(v15 + 104 * a1 + 88);
  swift_retain();
  ViewSize.proposal.getter();
  HIDWORD(v28) = v34;
  v30 = v35;
  LOBYTE(v31) = v36;
  ProposedViewSize.init(_:)();
  swift_release();
  v17 = a3 & 1;
  result = static ProposedViewSize.== infix(_:_:)();
  if ((result & 1) != 0)
    return result;
  v7 = v3;
  LODWORD(v28) = *(_DWORD *)(v3 + 48);
  v29 = *(_QWORD *)(v3 + 56);
  LOWORD(v30) = *(_WORD *)(v3 + 64);
  v4 = a1;
  LayoutSubviews.subscript.getter();
  LOBYTE(v28) = v17;
  v19 = LayoutSubview.dimensions(in:)();
  v6 = v29;
  v5 = v28;
  v12 = v31;
  v11 = v30;
  v14 = v33;
  v13 = v32;
  v20 = MEMORY[0x18D75BE3C](v19);
  v8 = v27;
  if (*(_QWORD *)(v27 + 16) <= a1)
    goto LABEL_15;
  v10 = v21;
  v9 = v22;
  if (MEMORY[0x18D75BE3C](v20) == v21 && v23 == v9)
    return swift_release();
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_16;
LABEL_8:
  if (*(_QWORD *)(v8 + 16) <= v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  v24 = (_QWORD *)(v8 + 32 + 104 * v4);
  v24[2] = v5;
  v24[3] = v6;
  v24[4] = v11;
  v24[5] = v12;
  v24[6] = v13;
  v24[7] = v14;
  result = swift_release();
  *(_QWORD *)(v7 + 136) = v8;
  if (*(_QWORD *)(v8 + 16) <= v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = GridLayout.Cache.resize(axis:size:in:)(0, *(_QWORD *)(v8 + 32 + 104 * v4), *(char **)(v8 + 32 + 104 * v4 + 8), v10);
  v25 = *(_QWORD *)(v7 + 136);
  if (*(_QWORD *)(v25 + 16) > v4)
  {
    GridLayout.Cache.resize(axis:size:in:)(1uLL, *(_QWORD *)(v25 + 104 * v4 + 32), *(char **)(v25 + 104 * v4 + 40), v9);
    return swift_release();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t GridLayout.Cache.reassignAvailability(in:at:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  double v31;
  _BOOL4 v32;
  uint64_t *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  double v38;
  int v39;
  double v40;
  uint64_t *v41;
  uint64_t v42;
  char **v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  char **v48;
  char **v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _BYTE v57[32];

  v9 = a2;
  v10 = v2 + 13;
  if ((result & 1) != 0)
    v10 = v2 + 14;
  v11 = *v10;
  v12 = *(_QWORD *)(*v10 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = v11 + 32;
    v15 = (int *)(v11 + 92);
    v16 = v12;
    do
    {
      v17 = *v15;
      v15 += 16;
      v18 = v17 != 0;
      v19 = __OFADD__(v13, v18);
      v13 += v18;
      if (v19)
      {
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      --v16;
    }
    while (v16);
    if (v13 > 0)
    {
      if ((a2 & 0x80000000) != 0)
        goto LABEL_83;
      v6 = (int)a2;
      if (v12 <= (int)a2)
        goto LABEL_84;
      v20 = v14 + ((uint64_t)(int)a2 << 6);
      v7 = *(double *)(v20 + 48);
      v8 = *(double *)(v20 + 32);
      v56 = result & 1;
      v3 = (char *)GridLayout.Cache.subscript.modify();
      v5 = (char *)v21;
      v4 = *v21;
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v5 = v4;
      if ((result & 1) == 0)
        goto LABEL_85;
      while (*(_QWORD *)(v4 + 16) > v6)
      {
        v7 = v7 - v8;
        *(double *)(v4 + (v6 << 6) + 80) = *(double *)(v4 + (v6 << 6) + 80) - v7;
        ((void (*)(_BYTE *, _QWORD))v3)(v57, 0);
        v22 = v2 + 15;
        v4 = v56;
        if ((_BYTE)v56)
          v22 = v2 + 16;
        result = *v22;
        v3 = *(char **)(*v22 + 16);
        if (v3)
        {
          v5 = (char *)(result + 32);
          v23 = swift_bridgeObjectRetain();
          v24 = 0;
          v8 = 0.0;
          v53 = v23;
          v54 = v9;
          v51 = v5;
          v52 = v3;
          while (v24 < *(_QWORD *)(v23 + 16))
          {
            v25 = &v5[24 * v24];
            LODWORD(v27) = *(_DWORD *)v25;
            v26 = *((_DWORD *)v25 + 1);
            v27 = (int)v27;
            if ((int)v27 <= (int)v9 && v26 > (int)v9)
            {
              v29 = v26;
              v55 = v24;
              v30 = &v5[24 * v24];
              if (v7 > *((double *)v30 + 1))
                v31 = v7;
              else
                v31 = *((double *)v30 + 1);
              if ((_DWORD)v29 != (_DWORD)v27)
              {
                v32 = 0;
                v33 = v2 + 14;
                if (!(_BYTE)v4)
                  v33 = v2 + 13;
                v34 = *v33;
                v9 = (uint64_t)(int)v27 << 6;
                v35 = (_DWORD *)(v34 + v9 + 92);
                v36 = (int)v27;
                while (1)
                {
                  if ((v27 & 0x80000000) != 0)
                  {
                    __break(1u);
LABEL_72:
                    __break(1u);
LABEL_73:
                    __break(1u);
LABEL_74:
                    __break(1u);
                    goto LABEL_75;
                  }
                  if (*(_QWORD *)(v34 + 16) <= v36)
                    goto LABEL_72;
                  v19 = __OFADD__(v32, *v35);
                  v37 = v32 + *v35;
                  if (v19)
                    goto LABEL_73;
                  if (v29 - 1 == v36)
                    break;
                  v32 = v37 != 0;
                  if ((_DWORD)v27 != 0x7FFFFFFF)
                  {
                    v35 += 16;
                    if (++v36 < v29)
                      continue;
                  }
                  goto LABEL_74;
                }
                if (v37)
                  v38 = 1.0;
                else
                  v38 = 0.0;
                v39 = v29 - v27;
                v40 = v31 / v38;
                while (v27 < v29)
                {
                  if (v6 != v27)
                  {
                    v41 = v2 + 13;
                    if ((_BYTE)v4)
                      v41 = v2 + 14;
                    if (v27 < 0)
                      goto LABEL_77;
                    v42 = *v41;
                    if (*(_QWORD *)(v42 + 16) <= (unint64_t)v27)
                      goto LABEL_78;
                    if (*(_DWORD *)(v42 + v9 + 92))
                    {
                      v3 = (char *)v6;
                      v4 = (uint64_t)GridLayout.Cache.subscript.modify();
                      v6 = (uint64_t)v43;
                      v5 = *v43;
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)v6 = v5;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
                        *(_QWORD *)v6 = v5;
                      }
                      if (*((_QWORD *)v5 + 2) <= (unint64_t)v27)
                        goto LABEL_79;
                      v6 = (uint64_t)v3;
                      *(double *)&v5[v9 + 80] = v40 + *(double *)&v5[v9 + 80];
                      ((void (*)(_BYTE *, _QWORD))v4)(v57, 0);
                      v4 = v56;
                    }
                  }
                  v9 += 64;
                  ++v27;
                  if (!--v39)
                    goto LABEL_16;
                }
LABEL_75:
                __break(1u);
                goto LABEL_76;
              }
LABEL_16:
              v7 = v7 - v31;
              v23 = v53;
              v9 = v54;
              v5 = v51;
              v3 = v52;
              v24 = v55;
            }
            if ((char *)++v24 == v3)
            {
              result = swift_bridgeObjectRelease();
              goto LABEL_55;
            }
          }
        }
        else
        {
LABEL_55:
          if ((_BYTE)v4)
          {
            v9 = *(_QWORD *)(v2[14] + 16);
            if (!v9)
              return result;
          }
          else
          {
            v9 = *(_QWORD *)(v2[13] + 16);
            if (!v9)
              return result;
          }
          v5 = 0;
          v6 = 0;
          v7 = v7 / (double)v13;
          while (1)
          {
            v45 = v2 + 13;
            if ((_BYTE)v4)
              v45 = v2 + 14;
            v46 = *v45;
            if ((unint64_t)v6 >= *(_QWORD *)(v46 + 16))
              break;
            if (*(_DWORD *)&v5[v46 + 92])
            {
              v47 = GridLayout.Cache.subscript.modify();
              v49 = v48;
              v3 = *v48;
              v50 = swift_isUniquelyReferenced_nonNull_native();
              *v49 = v3;
              if ((v50 & 1) == 0)
              {
                v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
                *v49 = v3;
              }
              v4 = v56;
              if ((unint64_t)v6 >= *((_QWORD *)v3 + 2))
                goto LABEL_82;
              *(double *)&v5[(_QWORD)v3 + 80] = v7 + *(double *)&v5[(_QWORD)v3 + 80];
              result = ((uint64_t (*)(_BYTE *, _QWORD))v47)(v57, 0);
            }
            ++v6;
            v5 += 64;
            if (v9 == v6)
              return result;
          }
LABEL_80:
          __break(1u);
        }
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        v4 = result;
        *(_QWORD *)v5 = result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t GridLayout.Cache.proposal(for:in:includeAvailable:)(char a1, unint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  double v18;
  int v19;
  int v20;
  uint64_t v21;
  int64_t v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  double v35;
  double v36;
  double v37;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  int v43;
  double v44;
  double v45;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  double v53;
  double *v54;
  int v55;

  v8 = a1 & 1;
  v9 = v4[13];
  v10 = v4[14];
  v11 = v4[15];
  v12 = v4[16];
  *(double *)&result = COERCE_DOUBLE(ProposedViewSize.subscript.getter());
  if ((v14 & 1) != 0)
    goto LABEL_77;
  if (*(double *)&result >= INFINITY)
    return result;
  if (!v8)
  {
    v15 = v9;
    if ((int)a3 >= (int)a2)
      goto LABEL_7;
    __break(1u);
  }
  v15 = v10;
  a2 >>= 32;
  a3 >>= 32;
  if ((int)a3 < (int)a2)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
LABEL_7:
  if ((a2 & 0x80000000) != 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v16 = (int)a2;
  v17 = *(_QWORD *)(v15 + 16);
  if (v17 <= v16)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v18 = *(double *)(v15 + (v16 << 6) + 64);
  *(double *)&result = COERCE_DOUBLE(specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v16, 1, a3, v16 | ((unint64_t)a3 << 32)));
  if ((result & 0x100000000) != 0)
    v19 = a3;
  else
    v19 = result;
  v20 = a3 - v19;
  if ((int)a3 < v19)
    goto LABEL_72;
  if ((_DWORD)a3 != v19)
  {
    v21 = v19;
    if (v17 <= v19)
      v22 = v19;
    else
      v22 = v17;
    v23 = (double *)(v15 + ((uint64_t)v19 << 6) + 64);
    while (v21 < (int)a3)
    {
      if (v19 < 0)
        goto LABEL_68;
      if (v22 == v21)
        goto LABEL_69;
      v24 = *(v23 - 4);
      v25 = *v23;
      v23 += 8;
      v18 = v18 + v24 + v25;
      ++v21;
      if (!--v20)
        goto LABEL_22;
    }
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
LABEL_22:
  if (v8)
    v26 = v12;
  else
    v26 = v11;
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
    goto LABEL_48;
  if (v27 == 1)
  {
    v28 = 0;
LABEL_41:
    v40 = v27 - v28;
    v41 = (_QWORD *)(v26 + 24 * v28 + 40);
    do
    {
      v42 = *((_DWORD *)v41 - 2);
      v43 = *((_DWORD *)v41 - 1);
      v44 = *(double *)v41;
      v41 += 3;
      v45 = v44;
      if ((int)a3 < v43 || v42 < (int)v16)
        v45 = -0.0;
      v18 = v18 + v45;
      --v40;
    }
    while (v40);
    goto LABEL_48;
  }
  v28 = v27 & 0x7FFFFFFFFFFFFFFELL;
  v29 = (_QWORD *)(v26 + 64);
  v30 = v27 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v31 = *((_DWORD *)v29 - 8);
    v32 = *((_DWORD *)v29 - 7);
    v33 = *((_DWORD *)v29 - 2);
    v34 = *((_DWORD *)v29 - 1);
    v35 = *((double *)v29 - 3);
    v36 = *(double *)v29;
    v29 += 6;
    v37 = v36;
    if ((int)a3 < v32 || v31 < (int)v16)
      v35 = -0.0;
    if ((int)a3 < v34 || v33 < (int)v16)
      v37 = -0.0;
    v18 = v18 + v35 + v37;
    v30 -= 2;
  }
  while (v30);
  if (v27 != v28)
    goto LABEL_41;
LABEL_48:
  if ((a4 & 1) != 0)
  {
    v47 = v8 ? v10 : v9;
    if ((_DWORD)v16 != (_DWORD)a3)
    {
      if ((int)a3 < (int)v16)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v48 = *(_QWORD *)(v47 + 16);
      v49 = (a3 + ~(_DWORD)v16);
      if (v48 <= v16)
        v48 = v16;
      v50 = v48 - v16;
      if (v49 >= v50)
        v51 = v50;
      else
        v51 = (a3 + ~(_DWORD)v16);
      if ((int)a3 - v16 <= v51)
        goto LABEL_75;
      if (v50 <= v49)
      {
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
        return result;
      }
      v52 = v16 + 1;
      v53 = *(double *)(v47 + 32 + (v16 << 6) + 48) + 0.0;
      if ((_DWORD)a3 != (_DWORD)v16 + 1)
      {
        v54 = (double *)(v47 + (v16 << 6) + 96);
        v55 = ~(_DWORD)v16 + a3;
        do
        {
          v53 = v53 + v54[6];
          if (v52 > v16)
            v53 = v53 + *v54;
          v54 += 8;
          ++v52;
          --v55;
        }
        while (v55);
      }
    }
  }
  return result;
}

unint64_t GridLayout.Cache.resize(axis:size:in:)(unint64_t result, unint64_t a2, char *a3, double a4)
{
  uint64_t (*v4)(_QWORD);
  char *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  double v9;
  double v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  char v17;
  char **v18;
  int *v19;
  int v20;
  int v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  double v45;
  double v46;
  double v47;
  unint64_t v48;
  unint64_t *v49;
  int v50;
  int v51;
  double v52;
  double v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char v62;
  char v63;
  _BYTE v64[32];

  v10 = a4;
  v11 = a3;
  if ((result & 1) == 0)
  {
    LODWORD(v12) = a2;
    LODWORD(v13) = (_DWORD)a3;
    if ((int)a3 >= (int)a2)
      goto LABEL_5;
    __break(1u);
  }
  v12 = HIDWORD(a2);
  v13 = (unint64_t)a3 >> 32;
  if (SHIDWORD(a3) < SHIDWORD(a2))
    goto LABEL_107;
LABEL_5:
  if (__OFSUB__((_DWORD)v13, (_DWORD)v12))
    goto LABEL_106;
  v4 = (uint64_t (*)(_QWORD))(result & 1);
  if ((_DWORD)v13 - (_DWORD)v12 != 1)
  {
    v7 = (unint64_t *)*((_QWORD *)v5 + 15);
    v8 = *((_QWORD *)v5 + 16);
    if ((result & 1) != 0)
    {
      if (SHIDWORD(a3) < SHIDWORD(a2))
        goto LABEL_114;
      v26 = v5 + 112;
      a2 >>= 32;
      v11 = (char *)((unint64_t)a3 >> 32);
    }
    else
    {
      if ((int)a3 < (int)a2)
        goto LABEL_113;
      v26 = v5 + 104;
    }
    if ((a2 & 0x80000000) != 0)
      goto LABEL_110;
    v27 = *(_QWORD *)v26;
    v6 = (int)a2;
    v28 = *(_QWORD *)(*(_QWORD *)v26 + 16);
    if (v28 <= (int)a2)
      goto LABEL_111;
    v9 = *(double *)(v27 + ((uint64_t)(int)a2 << 6) + 64);
    result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)((int)a2, 1, (int)v11, a2 | ((unint64_t)v11 << 32));
    if ((result & 0x100000000) != 0)
      v29 = (int)v11;
    else
      v29 = result;
    v30 = (_DWORD)v11 - v29;
    if ((int)v11 < v29)
      goto LABEL_112;
    if ((_DWORD)v11 != v29)
    {
      v31 = v29;
      if (v28 <= v29)
        v32 = v29;
      else
        v32 = v28;
      v33 = (double *)(v27 + ((uint64_t)v29 << 6) + 64);
      while (v31 < (int)v11)
      {
        if (v29 < 0)
          goto LABEL_102;
        if (v32 == v31)
          goto LABEL_103;
        v34 = *(v33 - 4);
        v35 = *v33;
        v33 += 8;
        v9 = v9 + v34 + v35;
        ++v31;
        if (!--v30)
          goto LABEL_51;
      }
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
LABEL_51:
    if ((_DWORD)v4)
      v36 = (unint64_t *)v8;
    else
      v36 = v7;
    v37 = v36[2];
    if (v37)
    {
      if (v37 == 1)
      {
        v38 = 0;
LABEL_72:
        v48 = v37 - v38;
        v49 = &v36[3 * v38 + 5];
        do
        {
          v50 = *((_DWORD *)v49 - 2);
          v51 = *((_DWORD *)v49 - 1);
          v52 = *(double *)v49;
          v49 += 3;
          v53 = v52;
          if (v50 <= (int)v6)
            v50 = v6;
          if (v51 >= (int)v11)
            v51 = (int)v11;
          if (v50 >= v51)
            v53 = -0.0;
          v9 = v9 + v53;
          --v48;
        }
        while (v48);
        goto LABEL_80;
      }
      v38 = v37 & 0x7FFFFFFFFFFFFFFELL;
      v39 = v36 + 8;
      v40 = v37 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v41 = *((_DWORD *)v39 - 8);
        v42 = *((_DWORD *)v39 - 7);
        v43 = *((_DWORD *)v39 - 2);
        v44 = *((_DWORD *)v39 - 1);
        v45 = *((double *)v39 - 3);
        v46 = *(double *)v39;
        v39 += 6;
        v47 = v46;
        if (v41 <= (int)v6)
          v41 = v6;
        if (v43 <= (int)v6)
          v43 = v6;
        if (v42 >= (int)v11)
          v42 = (int)v11;
        if (v44 >= (int)v11)
          v44 = (int)v11;
        if (v41 >= v42)
          v45 = -0.0;
        if (v43 >= v44)
          v47 = -0.0;
        v9 = v9 + v45 + v47;
        v40 -= 2;
      }
      while (v40);
      if (v37 != v38)
        goto LABEL_72;
    }
LABEL_80:
    v10 = v10 - v9;
    if (v10 <= 0.0)
      return result;
    v4 = GridLayout.Cache.subscript.modify();
    v11 = v54;
    v5 = *(char **)v54;
    v55 = *(_QWORD *)(*(_QWORD *)v54 + 16);
    if (!v55)
    {
LABEL_88:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v11 = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_89:
        v60 = *((_QWORD *)v5 + 2);
        v59 = *((_QWORD *)v5 + 3);
        if (v60 >= v59 >> 1)
        {
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v5);
          *(_QWORD *)v11 = v5;
        }
        *((_QWORD *)v5 + 2) = v60 + 1;
        v61 = &v5[24 * v60];
        *((_DWORD *)v61 + 8) = v12;
        *((_DWORD *)v61 + 9) = v13;
        *((double *)v61 + 5) = v10;
        *((_QWORD *)v61 + 6) = 0;
        return ((uint64_t (*)(_BYTE *, _QWORD))v4)(v64, 0);
      }
LABEL_117:
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      *(_QWORD *)v11 = v5;
      goto LABEL_89;
    }
    v6 = 0;
    v56 = 0;
    while (*(_DWORD *)&v5[v6 + 32] != (_DWORD)v12 || *(_DWORD *)&v5[v6 + 36] != (_DWORD)v13)
    {
      ++v56;
      v6 += 24;
      if (v55 == v56)
        goto LABEL_88;
    }
    v62 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v5;
    if ((v62 & 1) == 0)
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
      *(_QWORD *)v11 = v5;
    }
    if (v56 >= *((_QWORD *)v5 + 2))
    {
      __break(1u);
LABEL_119:
      v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
      *(_QWORD *)v5 = v11;
LABEL_97:
      if (v6 >= *((_QWORD *)v11 + 2))
      {
        __break(1u);
LABEL_121:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      *(double *)&v11[24 * v6 + 40] = *(double *)&v11[24 * v6 + 40] - v10;
      *(double *)(*(_QWORD *)v5 + 24 * v6 + 48) = v10 + *(double *)(*(_QWORD *)v5 + 24 * v6 + 48);
    }
    else
    {
      *(double *)&v5[v6 + 40] = v10 + *(double *)&v5[v6 + 40];
    }
    return ((uint64_t (*)(_BYTE *, _QWORD))v4)(v64, 0);
  }
  v14 = (uint64_t *)(v5 + 104);
  if ((result & 1) != 0)
    v14 = (uint64_t *)(v5 + 112);
  if ((v12 & 0x80000000) != 0)
    goto LABEL_108;
  v15 = *v14;
  v8 = (int)v12;
  if (*(_QWORD *)(v15 + 16) <= (int)v12)
    goto LABEL_109;
  v9 = *(double *)(v15 + ((uint64_t)(int)v12 << 6) + 64);
  if (v9 < a4)
  {
    v11 = (char *)GridLayout.Cache.subscript.modify();
    v7 = v16;
    v6 = *v16;
    v17 = swift_isUniquelyReferenced_nonNull_native();
    *v7 = v6;
    if ((v17 & 1) == 0)
      goto LABEL_115;
    while (*(_QWORD *)(v6 + 16) > v8)
    {
      *(double *)(v6 + (v8 << 6) + 64) = v10;
      ((void (*)(_BYTE *, _QWORD))v11)(v64, 0);
      v4 = GridLayout.Cache.subscript.modify();
      v11 = *v18;
      v7 = (unint64_t *)*((_QWORD *)*v18 + 2);
      if (!v7)
        return ((uint64_t (*)(_QWORD, _QWORD))v4)(v64, 0);
      v5 = (char *)v18;
      v6 = 0;
      v10 = v10 - v9;
      v8 = 24;
      while (v6 < *((_QWORD *)v11 + 2))
      {
        v19 = (int *)&v11[24 * v6 + 32];
        v21 = *v19;
        v20 = v19[1];
        if ((int)v12 > v21)
          v21 = v12;
        if ((int)v13 < v20)
          v20 = v13;
        if (v21 >= v20)
        {
          if ((uint64_t)++v6 >= (uint64_t)v7)
            return ((uint64_t (*)(_QWORD, _QWORD))v4)(v64, 0);
        }
        else
        {
          v9 = *(double *)&v11[24 * v6 + 40];
          if (v10 < v9)
          {
            v63 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v5 = v11;
            if ((v63 & 1) == 0)
              goto LABEL_119;
            goto LABEL_97;
          }
          v22 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v5 = v11;
          if ((v22 & 1) == 0)
          {
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            *(_QWORD *)v5 = v11;
          }
          v23 = *((_QWORD *)v11 + 2);
          if (v6 >= v23)
            goto LABEL_105;
          v24 = v23 - 1;
          v25 = v23 - 1 - v6;
          if (v25 < 0)
            goto LABEL_121;
          v10 = v10 - v9;
          memmove(&v11[24 * v6 + 32], &v11[24 * v6 + 56], 24 * v25);
          *((_QWORD *)v11 + 2) = v24;
          *(_QWORD *)v5 = v11;
          if (v10 <= 0.0)
            return ((uint64_t (*)(_QWORD, _QWORD))v4)(v64, 0);
          v7 = (unint64_t *)((char *)v7 - 1);
          if ((uint64_t)v6 >= (uint64_t)v7)
            return ((uint64_t (*)(_QWORD, _QWORD))v4)(v64, 0);
        }
      }
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      v6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      *v7 = v6;
    }
    __break(1u);
    goto LABEL_117;
  }
  return result;
}

uint64_t finalize #1 (_:rowsOrColumns:) in GridLayout.Cache.finalizeSizes()(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v7;
  double *v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  BOOL v22;
  double v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;

  v2 = a1;
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (!v4)
  {
LABEL_49:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    if (isUniquelyReferenced_nonNull_native)
      return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v28 + 16));
    if (*(_QWORD *)(v28 + 24) >= 2uLL)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Earmark>, (uint64_t)&type metadata for GridLayout.Cache.Earmark, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v29 = (_QWORD *)swift_allocObject();
      v30 = _swift_stdlib_malloc_size_2(v29);
      v29[2] = 0;
      v29[3] = 2 * ((uint64_t)(v30 - 32) / 24);
    }
    else
    {
      v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    *v2 = (uint64_t)v29;
    return swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v7 >= *(_QWORD *)(v3 + 16))
      goto LABEL_63;
    v8 = (double *)(v3 + 32 + 24 * v7);
    v9 = *(int *)v8;
    v10 = *((int *)v8 + 1);
    v11 = v8[1];
    if ((_DWORD)v10 != (_DWORD)v9)
    {
      if ((int)v10 < (int)v9)
        goto LABEL_65;
      v12 = 0;
      v13 = *(_QWORD *)(*a2 + 16);
      if (v13 <= (uint64_t)v9)
        v13 = v9;
      v14 = (double *)(*a2 + (v9 << 6) + 64);
      v15 = v10 - v9;
      v16 = v9;
      while (v16 < v10)
      {
        if ((v9 & 0x80000000) != 0)
          goto LABEL_58;
        if (v13 == v16)
          goto LABEL_59;
        v17 = *v14 == 0.0;
        v18 = __OFADD__(v12, v17);
        v12 += v17;
        if (v18)
          goto LABEL_60;
        v14 += 8;
        ++v16;
        if (!--v15)
        {
          if (!v12)
            goto LABEL_17;
          v19 = 0;
          goto LABEL_33;
        }
      }
      goto LABEL_57;
    }
LABEL_17:
    if (((v10 ^ v9) & 0x80000000) == 0)
      break;
    if ((v9 & 0x80000000) == 0)
      v20 = v9;
    else
      v20 = -(int)v9;
    if ((int)v10 >= 0)
      v21 = v10;
    else
      v21 = -(int)v10;
    v22 = __CFADD__(v20, v21);
    v12 = (v20 + v21);
    if (v22)
      goto LABEL_67;
    if ((v9 & 0x80000000) != 0)
    {
      if ((_DWORD)v10 != (_DWORD)v9)
        goto LABEL_32;
    }
    else if ((_DWORD)v9 != (_DWORD)v10)
    {
      v12 = -v12;
      goto LABEL_32;
    }
LABEL_3:
    if (++v7 == v4)
    {
LABEL_48:
      swift_bridgeObjectRelease();
      v2 = a1;
      goto LABEL_49;
    }
  }
  LODWORD(v12) = v10 - v9;
  if (__OFSUB__((_DWORD)v10, (_DWORD)v9))
    goto LABEL_66;
  if ((_DWORD)v10 == (_DWORD)v9)
    goto LABEL_3;
  v12 = (int)v12;
LABEL_32:
  v19 = 1;
LABEL_33:
  if ((int)v10 >= (int)v9)
  {
    v23 = v11 / (double)v12;
    v24 = (v9 << 6) + 64;
    v25 = v10 - v9;
    while ((uint64_t)v9 < v10)
    {
      v26 = *a2;
      if ((v19 & 1) != 0)
        goto LABEL_42;
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_61;
      if (*(_QWORD *)(v26 + 16) <= v9)
        goto LABEL_62;
      if (*(double *)(v26 + v24) == 0.0)
      {
LABEL_42:
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_47;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          v26 = result;
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
        }
        if (*(_QWORD *)(v26 + 16) <= v9)
          goto LABEL_56;
        *(double *)(v26 + v24) = v23 + *(double *)(v26 + v24);
        *a2 = v26;
      }
      v24 += 64;
      ++v9;
      if (!--v25)
        goto LABEL_3;
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait;
  if (!lazy protocol witness table cache variable for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridCellRangeModifier.CellRangeTrait, &unk_1E1ADF1D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = (double *)(*a4 + (a3 << 6));
LABEL_5:
    v6 = result;
    v7 = v5;
    while (1)
    {
      v8 = *v7;
      v9 = v7[1];
      v10 = v7[4];
      v11 = v7[5];
      v12 = v7[6];
      v13 = *((char *)v7 + 56);
      v14 = *(v7 - 7);
      if (v9 == v14)
      {
        v15 = *(v7 - 4);
        v16 = v10 < v15;
        if (v10 == v15
          && (v17 = *(v7 - 3), v16 = v11 < v17, v11 == v17)
          && (v18 = *(v7 - 2), v16 = v12 < v18, v12 == v18))
        {
          v19 = *((char *)v7 - 8);
          if (v13 == v19)
          {
            if (*(uint64_t *)&v8 >= *((_QWORD *)v7 - 8))
              goto LABEL_4;
          }
          else if (v13 >= v19)
          {
LABEL_4:
            ++a3;
            v5 += 8;
            if (a3 == a2)
              return result;
            goto LABEL_5;
          }
        }
        else if (!v16)
        {
          goto LABEL_4;
        }
      }
      else if (v14 >= v9)
      {
        goto LABEL_4;
      }
      if (!v4)
        break;
      v20 = *((_OWORD *)v7 + 1);
      v21 = *((_OWORD *)v7 - 3);
      *(_OWORD *)v7 = *((_OWORD *)v7 - 4);
      *((_OWORD *)v7 + 1) = v21;
      v22 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v7 + 2) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v7 + 3) = v22;
      *(v7 - 7) = v9;
      *((_OWORD *)v7 - 3) = v20;
      *(v7 - 4) = v10;
      *(v7 - 3) = v11;
      *(v7 - 2) = v12;
      *((_BYTE *)v7 - 8) = v13;
      ++v6;
      *(v7 - 8) = v8;
      v7 -= 8;
      if (a3 == v6)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  uint64_t v17;

  v17 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 16 * a3 - 16;
LABEL_5:
    v7 = *(void **)(v5 + 16 * v4);
    v8 = v17;
    v9 = v6;
    while (1)
    {
      v10 = *(void **)v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v7, sel_frame);
      v12 = v11;
      objc_msgSend(v10, sel_frame);
      v14 = v13;
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      if (v12 >= v14)
      {
LABEL_4:
        ++v4;
        v6 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)v9;
      *(_OWORD *)v9 = v15;
      v9 -= 16;
      v7 = (void *)v15;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait;
  if (!lazy protocol witness table cache variable for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridCellSizeModifier.MergedCellTrait, &unk_1E1ADA1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait;
  if (!lazy protocol witness table cache variable for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridAnchorModifier.AnchoredCellTrait, &unk_1E1AD15A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait;
  if (!lazy protocol witness table cache variable for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridAlignmentModifier.AlignedCellTrait, &unk_1E1ADF128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait;
  if (!lazy protocol witness table cache variable for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GridUnsizedAxesModifier.UnsizedAxesCellTrait, &unk_1E1AE7EA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GridLayout and conformance GridLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridLayout and conformance GridLayout;
  if (!lazy protocol witness table cache variable for type GridLayout and conformance GridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridLayout, &type metadata for GridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridLayout and conformance GridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridLayout and conformance GridLayout;
  if (!lazy protocol witness table cache variable for type GridLayout and conformance GridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridLayout, &type metadata for GridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridLayout and conformance GridLayout);
  }
  return result;
}

uint64_t outlined retain of GridLayout.Cache(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in GridLayout.Cache.alignment(of:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in GridLayout.Cache.alignment(of:)(a1, *(_QWORD *)(v2 + 16), v2 + 24, a2);
}

void type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [GridLayout.Cache.Cell], (uint64_t)&type metadata for GridLayout.Cache.Cell, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type [GridLayout.Cache.Cell] and conformance [A]();
    v0 = type metadata accessor for LazyMapSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>);
  }
}

unint64_t lazy protocol witness table accessor for type [GridLayout.Cache.Cell] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [GridLayout.Cache.Cell] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GridLayout.Cache.Cell] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [GridLayout.Cache.Cell], (uint64_t)&type metadata for GridLayout.Cache.Cell, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [GridLayout.Cache.Cell] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>)
  {
    type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC858], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>);
  }
  return result;
}

uint64_t outlined release of GridLayout.Cache(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_UNKNOWN **base witness table accessor for View in Grid<A>()
{
  return &protocol witness table for Grid<A>;
}

_UNKNOWN **base witness table accessor for View in GridRow<A>()
{
  return &protocol witness table for GridRow<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridCellRangeModifier()
{
  return &protocol witness table for _GridCellRangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridCellSizeModifier()
{
  return &protocol witness table for _GridCellSizeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridAnchorModifier()
{
  return &protocol witness table for _GridAnchorModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridAlignmentModifier()
{
  return &protocol witness table for _GridAlignmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridUnsizedAxesModifier()
{
  return &protocol witness table for _GridUnsizedAxesModifier;
}

unint64_t instantiation function for generic protocol witness table for GridLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GridLayout and conformance GridLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _GridLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for Grid()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Grid(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __int128 v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 41) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    v9 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v9;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 41) & ~v5, ((unint64_t)a2 + v5 + 41) & ~v5);
  }
  return v3;
}

uint64_t destroy for Grid(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_OWORD *initializeWithCopy for Grid(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithCopy for Grid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 41 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 41 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for Grid(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for Grid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 41 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 41 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Grid(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 41) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 41) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878D6CF8 + 4 * byte_187C696D0[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for Grid(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 41) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 41) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for GridRow()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for GridRow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 9) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 9) & ~v5, ((unint64_t)a2 + v5 + 9) & ~v5);
  }
  return v3;
}

uint64_t destroy for GridRow(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for GridRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for GridRow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for GridRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for GridRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 9) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 9) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878D7230 + 4 * byte_187C696DE[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for GridRow(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 9) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 9) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for _GridCellRangeModifier()
{
  return &type metadata for _GridCellRangeModifier;
}

uint64_t getEnumTagSinglePayload for _GridCellSizeModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for _GridCellSizeModifier()
{
  return &type metadata for _GridCellSizeModifier;
}

ValueMetadata *type metadata accessor for _GridAnchorModifier()
{
  return &type metadata for _GridAnchorModifier;
}

ValueMetadata *type metadata accessor for _GridAlignmentModifier()
{
  return &type metadata for _GridAlignmentModifier;
}

ValueMetadata *type metadata accessor for _GridUnsizedAxesModifier()
{
  return &type metadata for _GridUnsizedAxesModifier;
}

uint64_t getEnumTagSinglePayload for GridLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GridLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _GridLayout()
{
  return &type metadata for _GridLayout;
}

uint64_t destroy for GridLayout.Cache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GridLayout.Cache(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v5;
  v6 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v6;
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GridLayout.Cache(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  LOBYTE(v5) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v6 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GridLayout.Cache(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GridLayout.Cache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GridLayout.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GridLayout.Cache()
{
  return &type metadata for GridLayout.Cache;
}

uint64_t sub_1878D7940(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _GridCellSizeModifier, (uint64_t)&protocol witness table for _GridCellSizeModifier);
}

uint64_t sub_1878D7954(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _GridAnchorModifier, (uint64_t)&protocol witness table for _GridAnchorModifier);
}

uint64_t sub_1878D7968(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _GridAlignmentModifier, (uint64_t)&protocol witness table for _GridAlignmentModifier);
}

uint64_t sub_1878D797C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _GridUnsizedAxesModifier, (uint64_t)&protocol witness table for _GridUnsizedAxesModifier);
}

uint64_t sub_1878D7990(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _GridCellRangeModifier, (uint64_t)&protocol witness table for _GridCellRangeModifier);
}

ValueMetadata *type metadata accessor for GridIndex()
{
  return &type metadata for GridIndex;
}

ValueMetadata *type metadata accessor for GridLayout.Cache.Earmark()
{
  return &type metadata for GridLayout.Cache.Earmark;
}

ValueMetadata *type metadata accessor for GridLayout.Cache.RowOrColumn()
{
  return &type metadata for GridLayout.Cache.RowOrColumn;
}

uint64_t initializeWithCopy for GridLayout.Cache.Cell(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GridLayout.Cache.Cell(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for GridLayout.Cache.Cell(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

ValueMetadata *type metadata accessor for GridLayout.Cache.Cell()
{
  return &type metadata for GridLayout.Cache.Cell;
}

void *type metadata accessor for _GridUnsizedAxesModifier.UnsizedAxesCellTrait()
{
  return &unk_1E1AE7EA8;
}

void *type metadata accessor for _GridAlignmentModifier.AlignedCellTrait()
{
  return &unk_1E1ADF128;
}

void *type metadata accessor for _GridAnchorModifier.AnchoredCellTrait()
{
  return &unk_1E1AD15A0;
}

void *type metadata accessor for _GridCellSizeModifier.MergedCellTrait()
{
  return &unk_1E1ADA1E0;
}

uint64_t getEnumTagSinglePayload for GridMetadata(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 122);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x79)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GridMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 122;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for GridMetadata(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 5;
}

uint64_t destructiveProjectEnumData for GridMetadata(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for GridMetadata(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for GridMetadata()
{
  return &type metadata for GridMetadata;
}

void *type metadata accessor for _GridCellRangeModifier.CellRangeTrait()
{
  return &unk_1E1ADF1D0;
}

BOOL specialized static GeneralItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && (*(double *)(a1 + 40) == *(double *)(a2 + 40) ? (v2 = *(double *)(a1 + 48) == *(double *)(a2 + 48)) : (v2 = 0), v2))
  {
    return *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  else
  {
    return 0;
  }
}

void specialized _VariadicView_ViewRoot<>.body(children:)(uint64_t a1)
{
  specialized _VariadicView_ViewRoot<>.body(children:)(a1, 0xD000000000000010, (void *)0x8000000187BEB320);
}

void specialized _VariadicView_ViewRoot<>.body(children:)(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = a2;
  v5._object = a3;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for _NativeDictionary<GridIndex, Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NativeDictionary<GridIndex, Int>)
  {
    lazy protocol witness table accessor for type GridIndex and conformance GridIndex();
    v0 = type metadata accessor for _NativeDictionary();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<GridIndex, Int>);
  }
}

void type metadata accessor for _GraphValue<VerticalAlignment?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<VerticalAlignment?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E0CE4020], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<VerticalAlignment?>);
  }
}

unint64_t lazy protocol witness table accessor for type RowTransformTrait and conformance RowTransformTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RowTransformTrait and conformance RowTransformTrait;
  if (!lazy protocol witness table cache variable for type RowTransformTrait and conformance RowTransformTrait)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RowTransformTrait, &unk_1E1AC6550);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RowTransformTrait and conformance RowTransformTrait);
  }
  return result;
}

void *type metadata accessor for RowTransformTrait()
{
  return &unk_1E1AC6550;
}

ValueMetadata *type metadata accessor for GeneralItem()
{
  return &type metadata for GeneralItem;
}

void *type metadata accessor for GridRange()
{
  return &unk_1E1B0D128;
}

unint64_t lazy protocol witness table accessor for type GridRange and conformance GridRange()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridRange and conformance GridRange;
  if (!lazy protocol witness table cache variable for type GridRange and conformance GridRange)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridRange, &unk_1E1B0D128);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridRange and conformance GridRange);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeneralItem and conformance GeneralItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeneralItem and conformance GeneralItem;
  if (!lazy protocol witness table cache variable for type GeneralItem and conformance GeneralItem)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GeneralItem, &type metadata for GeneralItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeneralItem and conformance GeneralItem);
  }
  return result;
}

void *type metadata accessor for GeneralItem.FlexibilityEstimate()
{
  return &unk_1E1AAF6A0;
}

BOOL SearchFieldState.isSearching.getter()
{
  unsigned __int8 *v0;

  return *v0 != 2;
}

Swift::Void __swiftcall SearchFieldState.endEditing()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  uint64_t (*v8)(_QWORD);
  int v9;
  int v10;
  char v11;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = v1[2];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)v5, v8);
  if (v7 == 2)
  {
    v9 = v5[3];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v9 == 2 || (v9 & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if ((v7 & 1) == 0)
      goto LABEL_14;
  }
  if (v1[1] == 1)
  {
    v10 = *v1;
    if (v10 != 2 && v6 != 2 && (v10 & 1) != 0)
    {
      if ((AttributedString.isEmpty.getter() & 1) != 0)
        v11 = 2;
      else
        v11 = 0;
      *v1 = v11;
    }
  }
LABEL_14:
  v1[*(int *)(v2 + 40)] = 0;
}

uint64_t SearchFieldState.hasCustomAccessory.setter(unsigned __int8 a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t (*v12)(_QWORD);
  uint64_t result;
  int v14;
  char v15;
  int v16;
  uint64_t v17;

  v3 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v17 - v9;
  v1[3] = a1;
  v11 = v1[2];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)&v17 - v9, v12);
  if (v11 == 2)
  {
    v11 = v10[3];
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v11 == 2)
      return result;
  }
  else
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  v14 = *v1;
  if ((v11 & 1) == 0)
  {
    if (v14 == 2)
      return result;
    v15 = 0;
LABEL_15:
    *v1 = v15;
    return result;
  }
  if (v14 == 2)
    return result;
  v16 = v1[2];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v16 != 2)
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    goto LABEL_13;
  }
  v16 = v6[3];
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v16 != 2)
  {
LABEL_13:
    if ((v16 & 1) == 0)
      return result;
    v15 = 1;
    goto LABEL_15;
  }
  return result;
}

uint64_t SearchField<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[2];

  type metadata accessor for Binding<SearchFieldState>(0);
  v28[0] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (_QWORD *)((char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v11 = 2;
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_currentTraitCollection);
  v14 = objc_msgSend(v13, sel_horizontalSizeClass);

  v15 = objc_msgSend(v12, sel_currentTraitCollection);
  v16 = objc_msgSend(v15, sel_userInterfaceIdiom);

  v17 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v14, (uint64_t)v16, 2u);
  v11[1] = (v17 == 2) | v17 & 1;
  *((_WORD *)v11 + 1) = 2;
  *((_DWORD *)v11 + 1) = 0;
  v11[8] = 1;
  AttributedString.init()();
  v11[*(int *)(v8 + 40)] = 0;
  v18 = &v11[*(int *)(v8 + 44)];
  *(_DWORD *)v18 = 0;
  v18[4] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, a2, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  type metadata accessor for State<SearchFieldState>(0);
  *(_QWORD *)(a2 + *(int *)(v19 + 28)) = 0;
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  type metadata accessor for SearchField<SearchFieldConfiguration.Control>(0, v20, v21, v22);
  v24 = a2 + *(int *)(v23 + 36);
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_WORD *)(v24 + 16) = 0;
  *(_BYTE *)(a2 + *(int *)(v23 + 44)) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a2, (uint64_t (*)(_QWORD))type metadata accessor for StateOrBinding<SearchFieldState>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v28[1] = swift_getKeyPath();
  LOBYTE(v11) = *((_BYTE *)v7 + *(int *)(v28[0] + 32)) != 2;
  type metadata accessor for WritableKeyPath<SearchFieldState, Bool>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, Bool> and conformance WritableKeyPath<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WritableKeyPath<SearchFieldState, Bool>, MEMORY[0x1E0CE83C8]);
  v25 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v26 = *v7;
  swift_retain();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for SearchFieldConfiguration);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  result = outlined consume of StateOrBinding<Bool>(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(unsigned __int8 *)(v24 + 16), *(_BYTE *)(v24 + 17));
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(v24 + 8) = v25;
  *(_BYTE *)(v24 + 16) = (_BYTE)v11;
  *(_BYTE *)(v24 + 17) = 1;
  return result;
}

uint64_t SearchField.init(state:isPresented:control:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  char *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v29 = a5;
  v30 = a2;
  v32 = a4;
  v31 = a3;
  v28 = a1;
  v11 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v14 = 2;
  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_currentTraitCollection);
  v17 = objc_msgSend(v16, sel_horizontalSizeClass);

  v18 = objc_msgSend(v15, sel_currentTraitCollection);
  v19 = objc_msgSend(v18, sel_userInterfaceIdiom);

  v20 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v17, (uint64_t)v19, 2u);
  v14[1] = (v20 == 2) | v20 & 1;
  *((_WORD *)v14 + 1) = 2;
  *((_DWORD *)v14 + 1) = 0;
  v14[8] = 1;
  AttributedString.init()();
  v14[*(int *)(v11 + 40)] = 0;
  v21 = &v14[*(int *)(v11 + 44)];
  *(_DWORD *)v21 = 0;
  v21[4] = 0;
  property wrapper backing initializer of SearchField.state((uint64_t)v14, a8);
  v23 = (int *)type metadata accessor for SearchField(0, a6, a7, v22);
  v24 = a8 + v23[9];
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_WORD *)(v24 + 16) = 0;
  *(_BYTE *)(a8 + v23[11]) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a8, (uint64_t (*)(_QWORD))type metadata accessor for StateOrBinding<SearchFieldState>);
  outlined init with take of TableCellFormula(v28, a8, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8 + v23[10], v29, a6);
  result = outlined consume of StateOrBinding<Bool>(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(unsigned __int8 *)(v24 + 16), *(_BYTE *)(v24 + 17));
  v26 = v31;
  *(_QWORD *)v24 = v30;
  *(_QWORD *)(v24 + 8) = v26;
  *(_BYTE *)(v24 + 16) = v32;
  *(_BYTE *)(v24 + 17) = 1;
  return result;
}

uint64_t SearchFieldState.init()@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  *(_BYTE *)a1 = 2;
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_currentTraitCollection);
  v4 = objc_msgSend(v3, sel_horizontalSizeClass);

  v5 = objc_msgSend(v2, sel_currentTraitCollection);
  v6 = objc_msgSend(v5, sel_userInterfaceIdiom);

  v7 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v4, (uint64_t)v6, 2u);
  *(_BYTE *)(a1 + 1) = (v7 == 2) | v7 & 1;
  *(_WORD *)(a1 + 2) = 2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v8 = type metadata accessor for SearchFieldState();
  result = AttributedString.init()();
  *(_BYTE *)(a1 + *(int *)(v8 + 40)) = 0;
  v10 = a1 + *(int *)(v8 + 44);
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 0;
  return result;
}

uint64_t SearchField.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v19;

  v1 = v0;
  type metadata accessor for Binding<SearchFieldState>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for State<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v14, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    MEMORY[0x18D75B9C8](v3);
    v16 = (uint64_t)v6;
    v17 = type metadata accessor for Binding<SearchFieldState>;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for State<SearchFieldState>);
    State.wrappedValue.getter();
    v16 = (uint64_t)v10;
    v17 = type metadata accessor for State<SearchFieldState>;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v16, (uint64_t (*)(_QWORD))v17);
}

uint64_t SearchField.$state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v13;

  type metadata accessor for State<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v10, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of TableCellFormula((uint64_t)v10, a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for State<SearchFieldState>);
  State.projectedValue.getter();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for State<SearchFieldState>);
}

uint64_t property wrapper backing initializer of SearchField.state@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  type metadata accessor for State<SearchFieldState>(0);
  *(_QWORD *)(a2 + *(int *)(v4 + 28)) = 0;
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  swift_storeEnumTagMultiPayload();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
}

uint64_t SearchField.$isPresented.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v3 = *v2;
  if ((*((_BYTE *)v2 + 17) & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

void SearchField.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[12];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v18 = a3;
  v15 = *(_QWORD *)(a1 - 8);
  v17 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v14[4] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvedSearchFieldStyle(255);
  v8 = *(_QWORD *)(a1 + 16);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  v14[10] = v8;
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
  v10 = type metadata accessor for ModifiedContent();
  v11 = lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  v24[0] = *(_QWORD *)(a1 + 24);
  v24[1] = &protocol witness table for TextFieldStyleModifier<A>;
  v12 = MEMORY[0x1E0CE2E70];
  v23[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v24);
  v23[1] = &protocol witness table for TokenFieldStyleModifier<A>;
  v13 = MEMORY[0x18D75FFDC](v12, v10, v23);
  v19 = &type metadata for SearchFieldConfiguration.Control;
  v20 = v10;
  v14[7] = v10;
  v21 = v11;
  v22 = v13;
  v14[5] = v13;
  type metadata accessor for StaticSourceWriter();
}

void sub_1878D8E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t IsNotConfiguredFromStyle;
  uint64_t v5;
  unint64_t HasSuggestions;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for ModifiedContent();
  IsNotConfiguredFromStyle = type metadata accessor for SearchField.IsNotConfiguredFromStyle(255, v0, v1, v3);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchField<A>.IsNotConfiguredFromStyle, IsNotConfiguredFromStyle);
  HasSuggestions = lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions();
  *(_QWORD *)(v2 - 152) = IsNotConfiguredFromStyle;
  *(_QWORD *)(v2 - 144) = &type metadata for SearchHasSuggestions;
  *(_QWORD *)(v2 - 136) = v5;
  *(_QWORD *)(v2 - 128) = HasSuggestions;
  v7 = type metadata accessor for AndOperationViewInputPredicate();
  v8 = type metadata accessor for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>();
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6530], v7);
  *(_QWORD *)(v2 - 152) = v7;
  *(_QWORD *)(v2 - 144) = v8;
  *(_QWORD *)(v2 - 136) = MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v2 - 128) = v9;
  type metadata accessor for StaticIf();
}

void sub_1878D8EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 168) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
  *(_QWORD *)(v5 - 160) = &protocol witness table for StaticSourceWriter<A, B>;
  v8 = MEMORY[0x18D75FFDC](v1, v2, v5 - 168);
  v9 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v5 - 184) = &protocol witness table for StaticSourceWriter<A, B>;
  *(_QWORD *)(v5 - 176) = v9;
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v5 - 184);
  *(_QWORD *)(v5 - 200) = v8;
  *(_QWORD *)(v5 - 192) = v10;
  *(_QWORD *)(v5 - 304) = v7;
  v11 = MEMORY[0x18D75FFDC](v1, v7, v5 - 200);
  *(_QWORD *)(v5 - 320) = v11;
  *(_QWORD *)(v5 - 152) = v7;
  *(_QWORD *)(v5 - 144) = v3;
  *(_QWORD *)(v5 - 136) = v11;
  *(_QWORD *)(v5 - 128) = v4;
  type metadata accessor for SearchFieldConfigurationReader();
}

void sub_1878D8F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v12 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = v9;
  v18 = *(_QWORD *)(v12 - 280);
  SearchField.$state.getter(v17);
  v19 = v10;
  *(_QWORD *)(v12 - 368) = v10;
  v20 = v10;
  v21 = v18;
  *(_QWORD *)(v12 - 344) = SearchField.$isPresented.getter(v20);
  *(_QWORD *)(v12 - 352) = v22;
  *(_DWORD *)(v12 - 356) = v23;
  v24 = *(_QWORD *)(v12 - 272);
  v25 = *(_QWORD *)(v12 - 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v18, v19);
  v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v27 = swift_allocObject();
  v28 = *(_QWORD *)(v12 - 288);
  *(_QWORD *)(v27 + 16) = v28;
  *(_QWORD *)(v27 + 24) = v11;
  (*(void (**)(unint64_t, uint64_t, _QWORD))(v24 + 32))(v27 + v26, v25, *(_QWORD *)(v12 - 368));
  *(_QWORD *)(v12 - 224) = v28;
  *(_QWORD *)(v12 - 216) = v11;
  *(_QWORD *)(v12 - 208) = v21;
  SearchFieldConfigurationReader.init(state:isPresented:content:source:)(*(_QWORD *)(v12 - 336), (uint64_t)v14);
}

uint64_t sub_1878D90D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v2, v0, &protocol witness table for SearchFieldConfigurationReader<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 296) + 8);
  v4(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v3 - 248));
  return v4(v1, v0);
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle;
  if (!lazy protocol witness table cache variable for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfigurationTextFieldStyle, &type metadata for SearchFieldConfigurationTextFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfiguration.Control, &type metadata for SearchFieldConfiguration.Control);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfiguration.Control, &type metadata for SearchFieldConfiguration.Control);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  }
  return result;
}

uint64_t type metadata accessor for SearchField.IsNotConfiguredFromStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchField.IsNotConfiguredFromStyle);
}

uint64_t type metadata accessor for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>)
  {
    type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(255);
    lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>, MEMORY[0x1E0CE4108]);
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
}

void type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>, (uint64_t (*)(uint64_t))type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, (uint64_t)&type metadata for DynamicHiddenModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextInputSuggestions);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, (uint64_t)&type metadata for OnChangeOfSuggestionsModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>, (uint64_t)&type metadata for SearchSuggestionsPlacement, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>);
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?(255);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for OnChangeOfSuggestionsModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>();
    v2 = v1;
    v3[0] = &protocol witness table for EnvironmentValues.SearchSuggestions;
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<AttributedString>?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>, (uint64_t)&type metadata for SearchSuggestionsPlacement, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?(255);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>, lazy protocol witness table accessor for type TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?> and conformance TextInputSuggestions<A>, (uint64_t)&protocol witness table for DynamicHiddenModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?> and conformance TextInputSuggestions<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?> and conformance TextInputSuggestions<A>, (uint64_t (*)(uint64_t))type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, (uint64_t)&protocol conformance descriptor for TextInputSuggestions<A>);
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfiguration.Suggestions, &type metadata for SearchFieldConfiguration.Suggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfiguration.Suggestions, &type metadata for SearchFieldConfiguration.Suggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  }
  return result;
}

void closure #1 in SearchField.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[3];

  v8 = type metadata accessor for ResolvedSearchFieldStyle(0);
  MEMORY[0x1E0C80A78](v8, v5);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
  v9 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  v11[0] = a4;
  v11[1] = &protocol witness table for TextFieldStyleModifier<A>;
  v7 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v11);
  v10[1] = &protocol witness table for TokenFieldStyleModifier<A>;
  MEMORY[0x18D75FFDC](v7, v9, v10);
  type metadata accessor for StaticSourceWriter();
}

void sub_1878D9860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t IsNotConfiguredFromStyle;
  uint64_t v17;
  unint64_t HasSuggestions;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 304) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 - 400) = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v11 - 408) = (char *)&a9 - v14;
  IsNotConfiguredFromStyle = type metadata accessor for SearchField.IsNotConfiguredFromStyle(255, v9, v10, v15);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchField<A>.IsNotConfiguredFromStyle, IsNotConfiguredFromStyle);
  HasSuggestions = lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions();
  *(_QWORD *)(v11 - 152) = IsNotConfiguredFromStyle;
  *(_QWORD *)(v11 - 144) = &type metadata for SearchHasSuggestions;
  *(_QWORD *)(v11 - 136) = v17;
  *(_QWORD *)(v11 - 128) = HasSuggestions;
  v19 = type metadata accessor for AndOperationViewInputPredicate();
  v20 = type metadata accessor for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>();
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6530], v19);
  *(_QWORD *)(v11 - 384) = v21;
  *(_QWORD *)(v11 - 152) = v19;
  *(_QWORD *)(v11 - 144) = v20;
  *(_QWORD *)(v11 - 136) = MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v11 - 128) = v21;
  type metadata accessor for StaticIf();
}

void sub_1878D9944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v12 - 344) = a1;
  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 320) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v12 - 392) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v12 - 352) = (char *)&a9 - v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v12 - 376), v10, type metadata accessor for SearchFieldConfiguration);
  *(_QWORD *)(v12 - 224) = v9;
  *(_QWORD *)(v12 - 216) = v11;
  *(_QWORD *)(v12 - 208) = *(_QWORD *)(v12 - 312);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SearchFieldConfiguration.Control, (uint64_t)partial apply for closure #1 in closure #1 in SearchField.body.getter);
}

void sub_1878D9A60()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, v0);
  *(_QWORD *)(v8 - 272) = v4;
  *(_QWORD *)(v8 - 264) = v7;
  *(_QWORD *)(v8 - 256) = v6;
  *(_QWORD *)(v8 - 248) = v5;
  type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(0);
  *(_QWORD *)(v8 - 168) = v2;
  *(_QWORD *)(v8 - 160) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v8 - 400), v8 - 168);
  lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>, MEMORY[0x1E0CE4108]);
  View.viewAlias<A, B, C>(if:_:source:)(v3, (uint64_t)&type metadata for SearchFieldConfiguration.Suggestions);
}

uint64_t sub_1878D9B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 304) + 8))(v1, v0);
  v7 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v6 - 184) = v4;
  *(_QWORD *)(v6 - 176) = v7;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, *(_QWORD *)(v6 - 344), v6 - 184);
  *(_QWORD *)(v6 - 200) = v5;
  *(_QWORD *)(v6 - 192) = v8;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v6 - 200);
  v10 = *(_QWORD *)(v6 - 352);
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v9);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 8);
  v11(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v10, v3, *(_QWORD *)(v6 - 296));
  return v11(v10, v3);
}

uint64_t sub_1878D9C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for SearchField(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    swift_release();
    type metadata accessor for Binding<SearchFieldState>(0);
    v10 = *(int *)(v9 + 32);
    v11 = v8 + v10 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v12 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    v13 = v8 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v14 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    type metadata accessor for State<SearchFieldState>(0);
    swift_release();
  }
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)(v8 + *(int *)(v6 + 36)), *(_QWORD *)(v8 + *(int *)(v6 + 36) + 8), *(unsigned __int8 *)(v8 + *(int *)(v6 + 36) + 16), *(_BYTE *)(v8 + *(int *)(v6 + 36) + 17));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 40), v5);
  return swift_deallocObject();
}

uint64_t type metadata accessor for SearchField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchField);
}

void type metadata accessor for StateOrBinding<SearchFieldState>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for StateOrBinding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE2A10]);
}

void type metadata accessor for State<SearchFieldState>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for State<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
}

void partial apply for closure #1 in SearchField.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SearchField(0, v6, v7, a4) - 8) + 80);
  closure #1 in SearchField.body.getter(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t SearchField.resolvedControl.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[2];

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  v3 = type metadata accessor for ModifiedContent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v13 - v6;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle();
  View.textFieldStyle<A>(_:)(v9, v2, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, v8);
  v13[0] = v8;
  v13[1] = &protocol witness table for TextFieldStyleModifier<A>;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v13);
  v11 = lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle();
  View.tokenFieldStyle<A>(_:)(v11, v3, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t closure #1 in closure #1 in SearchField.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[2];
  _QWORD v23[2];

  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v22 - v14;
  v17 = type metadata accessor for SearchField(0, a1, a2, v16);
  SearchField.resolvedControl.getter(v17);
  v23[0] = a2;
  v23[1] = &protocol witness table for TextFieldStyleModifier<A>;
  v18 = MEMORY[0x1E0CE2E70];
  v22[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v23);
  v22[1] = &protocol witness table for TokenFieldStyleModifier<A>;
  v19 = MEMORY[0x18D75FFDC](v18, v7, v22);
  static ViewBuilder.buildExpression<A>(_:)(v11, v7, v19);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v7, a3);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, v7);
}

uint64_t closure #1 in SearchField.suggestionsList(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t KeyPath;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;

  v61 = a2;
  v9 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v9, v10);
  v62 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v63 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SearchField(0, a3, a4, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v55 - v19;
  type metadata accessor for Binding<SearchFieldState>(0);
  v22 = v21;
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (uint64_t *)((char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>(0);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>(0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v35, v36);
  if (*(_BYTE *)(a1 + *(int *)(v16 + 44)) != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v39 + 56))(a5, 1, 1, v40);
  v56 = v27;
  v58 = v37;
  v59 = (uint64_t)&v55 - v38;
  v60 = v39;
  SearchField.$state.getter((uint64_t)v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v61, v63, type metadata accessor for SearchFieldConfiguration);
  KeyPath = swift_getKeyPath();
  v61 = a5;
  v64 = KeyPath;
  v42 = (char *)v25 + *(int *)(v22 + 32);
  v57 = a1;
  v43 = v42[1];
  type metadata accessor for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role> and conformance WritableKeyPath<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>, MEMORY[0x1E0CE83C8]);
  v44 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v55 = v17;
  v45 = *v25;
  swift_retain();
  swift_release();
  v64 = v45;
  v65 = v44;
  v66 = v43;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<SearchSuggestionsPlacement.Role>, (uint64_t)&type metadata for SearchSuggestionsPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v67);
  swift_release();
  swift_release();
  *v30 = v67;
  v46 = v63;
  SearchField.multiSuggestions(_:)(v63, v16, (uint64_t)&v30[*(int *)(v56 + 36)]);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v16);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, type metadata accessor for SearchFieldConfiguration);
  v47 = v62;
  SearchField.state.getter();
  v48 = *v47;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>);
  v49 = v58;
  v50 = &v34[*(int *)(v58 + 36)];
  *v50 = (v48 & 1) == 0;
  *((_QWORD *)v50 + 1) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>);
  v51 = v59;
  outlined init with take of TableCellFormula((uint64_t)v34, v59, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>);
  v52 = v51;
  v53 = v61;
  outlined init with take of TableCellFormula(v52, v61, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v53, 0, 1, v49);
}

uint64_t SearchField.multiSuggestions(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v70 = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>(0);
  v66 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  v69 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (uint64_t *)((char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>();
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>();
  v65 = v26;
  MEMORY[0x1E0C80A78](v26, v27);
  v68 = (uint64_t)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>(0);
  v30 = v29;
  MEMORY[0x1E0C80A78](v29, v31);
  v67 = (uint64_t)&v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + *(int *)(a2 + 44)) != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(a3, 1, 1, v30);
  v34 = v32;
  v35 = SearchField.renderSuggestions(_:)(v70);
  v32 = v34;
  if ((v35 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(a3, 1, 1, v30);
  v64 = v34;
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v70, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v59 = swift_getKeyPath();
  v71 = v59;
  v36 = *(int *)(v69 + 32);
  v62 = v30;
  v37 = (uint64_t)v17 + v36;
  type metadata accessor for Binding<AttributedString>();
  v61 = v3;
  v39 = v38;
  v40 = *(int *)(v38 + 32);
  v63 = a3;
  v41 = (char *)v21 + v40;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  v42 = &v13[*(int *)(v10 + 36)];
  v43 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  type metadata accessor for WritableKeyPath<SearchFieldState, AttributedString>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, AttributedString> and conformance WritableKeyPath<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WritableKeyPath<SearchFieldState, AttributedString>, MEMORY[0x1E0CE83C8]);
  v44 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *v21 = *v17;
  v21[1] = v44;
  swift_retain();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v21, 0, 1, v39);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)v9 + *(int *)(v66 + 28), (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
  *v9 = KeyPath;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<AttributedString>?>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
  v45 = swift_getKeyPath();
  v46 = v69;
  MEMORY[0x18D75B9C8](v69);
  v47 = v13[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  v48 = v68;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v25, v68, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>);
  v49 = v48 + *(int *)(v65 + 36);
  *(_QWORD *)v49 = v45;
  *(_BYTE *)(v49 + 8) = v47;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>);
  SearchField.$state.getter((uint64_t)v17);
  v71 = swift_getKeyPath();
  v50 = *((_BYTE *)v17 + *(int *)(v46 + 32) + 2);
  type metadata accessor for WritableKeyPath<SearchFieldState, Bool?>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, Bool?> and conformance WritableKeyPath<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WritableKeyPath<SearchFieldState, Bool?>, MEMORY[0x1E0CE83C8]);
  v51 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v52 = *v17;
  swift_retain();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v53 = v67;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v48, v67, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>);
  v54 = v62;
  v55 = v53 + *(int *)(v62 + 36);
  *(_QWORD *)v55 = v52;
  *(_QWORD *)(v55 + 8) = v51;
  *(_BYTE *)(v55 + 16) = v50;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v48, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>);
  v56 = v63;
  outlined init with take of TableCellFormula(v53, v63, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, _EnvironmentKeyWritingModifier<Binding<AttributedString>?>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v56, 0, 1, v54);
}

uint64_t SearchField.renderSuggestions(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v1 = type metadata accessor for AttributedString.Index();
  v32 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v31 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - v6;
  v8 = type metadata accessor for AttributedString.CharacterView();
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (unsigned __int8 *)&v30 - v22;
  SearchField.state.getter();
  v24 = *v23;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v33, (uint64_t)v15, type metadata accessor for SearchFieldConfiguration);
  if (v24 == 2)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    MEMORY[0x18D75B9C8]();
    AttributedString.characters.getter();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF30]);
    dispatch thunk of Collection.startIndex.getter();
    v25 = v31;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C8]);
    v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    v27 = *(void (**)(char *, uint64_t))(v32 + 8);
    v27(v25, v1);
    v27(v7, v1);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for SearchFieldConfiguration);
    v28 = v26 ^ 1;
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for SearchFieldConfiguration);
    v28 = 1;
  }
  return v28 & 1;
}

uint64_t SearchFieldState.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for SearchFieldState.text : SearchFieldState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, v8);
  v9 = &v7[*(int *)(v4 + 36)];
  v10 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a2, v9, v10);
}

uint64_t key path setter for SearchFieldState.text : SearchFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v18 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v14((char *)&v18 - v12, a1, v4, v11);
  v15 = a2 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  ((void (*)(char *, uint64_t, uint64_t))v14)(v8, v15, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v15, v13, v4);
  SearchFieldState.textDidChange(from:)();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v13, v4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v8, v4);
}

uint64_t SearchFieldState.hasSuggestions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t SearchFieldState.hasSuggestions.setter(unsigned __int8 a1)
{
  char *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t result;
  int v14;
  char v15;
  int v16;
  uint64_t v17;

  v3 = a1;
  v4 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v17 - v10;
  v1[2] = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)&v17 - v10, v12);
  if (v3 == 2)
  {
    v3 = v11[3];
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v3 == 2)
      return result;
  }
  else
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  }
  v14 = *v1;
  if ((v3 & 1) == 0)
  {
    if (v14 == 2)
      return result;
    v15 = 0;
LABEL_15:
    *v1 = v15;
    return result;
  }
  if (v14 == 2)
    return result;
  v16 = v1[2];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v16 != 2)
  {
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    goto LABEL_13;
  }
  v16 = v7[3];
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v16 != 2)
  {
LABEL_13:
    if ((v16 & 1) == 0)
      return result;
    v15 = 1;
    goto LABEL_15;
  }
  return result;
}

uint64_t SearchField.init(state:isPresented:control:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t result;

  property wrapper backing initializer of SearchField.state(a1, a6);
  v12 = (int *)type metadata accessor for SearchField(0, a4, a5, v11);
  v13 = a6 + v12[9];
  *(_QWORD *)v13 = a2 & 1;
  *(_QWORD *)(v13 + 8) = 0;
  *(_WORD *)(v13 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6 + v12[10], a3, a4);
  *(_BYTE *)(a6 + v12[11]) = 0;
  return result;
}

uint64_t SearchFieldState.textDidChange(from:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString.CharacterView();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.characters.getter();
  v11 = AttributedString.CharacterView._count.getter();
  v12 = *(void (**)(char *, uint64_t))(v7 + 8);
  v12(v10, v6);
  AttributedString.characters.getter();
  v13 = AttributedString.CharacterView._count.getter();
  result = ((uint64_t (*)(char *, uint64_t))v12)(v10, v6);
  v15 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v15 < 0)
  {
    v16 = __OFSUB__(0, v15);
    v15 = v11 - v13;
    if (v16)
      goto LABEL_17;
  }
  v17 = v15 != 1 || v13 < 1;
  if (!v17 && *v1 != 2)
  {
    v18 = v1[2];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v18 == 2)
    {
      v19 = v5[3];
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v19 != 2 && (v19 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if ((v18 & 1) != 0)
LABEL_12:
        *v1 = 1;
    }
  }
  return result;
}

Swift::Void __swiftcall SearchFieldState.updateIsSearching(_:)(Swift::Bool a1)
{
  _BYTE *v1;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v3 = a1;
  v4 = type metadata accessor for AttributedString.CharacterView();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedString();
  v46 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v45 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v43 - v14;
  v16 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v43 - v23;
  v25 = *v1;
  if ((v25 != 2) != v3)
  {
    v26 = (uint64_t)v1;
    if (a1)
    {
      if ((v25 & 1) != 0)
        return;
      v27 = v22;
      v28 = v26;
      v29 = *(unsigned __int8 *)(v26 + 2);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v26, (uint64_t)&v43 - v23, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v29 == 2)
      {
        v29 = v24[3];
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        if (v29 == 2)
        {
          v30 = 0;
LABEL_18:
          v40 = v27;
          *(_BYTE *)v28 = v30;
          v41 = 1;
LABEL_25:
          *(_BYTE *)(v28 + *(int *)(v40 + 40)) = v41;
          return;
        }
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      }
      v30 = v29 & 1;
      goto LABEL_18;
    }
    v28 = (uint64_t)v1;
    *v1 = 2;
    v31 = v22;
    AttributedString.init(stringLiteral:)();
    v44 = v31;
    v32 = v28 + *(int *)(v31 + 36);
    v33 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v32, v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 24))(v32, v15, v9);
    AttributedString.characters.getter();
    v34 = AttributedString.CharacterView._count.getter();
    v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    AttributedString.characters.getter();
    v36 = AttributedString.CharacterView._count.getter();
    v35(v8, v4);
    v37 = v36 - v34;
    if (__OFSUB__(v36, v34))
    {
      __break(1u);
    }
    else if ((v37 & 0x8000000000000000) == 0 || (v38 = __OFSUB__(0, v37), v37 = v34 - v36, !v38))
    {
      if (v37 == 1 && v36 >= 1 && *(_BYTE *)v28 != 2)
      {
        v39 = *(unsigned __int8 *)(v28 + 2);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        if (v39 == 2)
        {
          v39 = v19[3];
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
          if (v39 == 2)
            goto LABEL_22;
        }
        else
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        }
        if ((v39 & 1) != 0)
          *(_BYTE *)v28 = 1;
      }
LABEL_22:
      v42 = *(void (**)(char *, uint64_t))(v46 + 8);
      v42(v15, v9);
      v42(v45, v9);
      v41 = 0;
      if ((*(_BYTE *)(v28 + 8) & 1) == 0)
      {
        *(_DWORD *)(v28 + 4) = 0;
        *(_BYTE *)(v28 + 8) = 1;
      }
      v40 = v44;
      goto LABEL_25;
    }
    __break(1u);
  }
}

BOOL static SearchField.IsNotConfiguredFromStyle.evaluate(inputs:)(uint64_t a1, ValueMetadata *a2)
{
  return a2 != &type metadata for SearchFieldConfiguration.Control;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchField<A>.IsNotConfiguredFromStyle(uint64_t a1, uint64_t a2)
{
  return static SearchField.IsNotConfiguredFromStyle.evaluate(inputs:)(a1, *(ValueMetadata **)(a2 + 16));
}

void SearchField.init<A, B>(text:tokens:prompt:token:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[26];

  v24[9] = a8;
  v24[6] = a3;
  v24[7] = a7;
  v24[11] = a6;
  v24[17] = a4;
  v24[18] = a5;
  v24[15] = a1;
  v24[16] = a2;
  v24[13] = a9;
  v24[4] = a11;
  v24[5] = a10;
  v24[3] = a12;
  v18 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v18, v19);
  v24[12] = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Binding();
  v22 = *(_QWORD *)(v21 - 8);
  v24[8] = v21;
  v24[10] = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  v24[19] = a13;
  v24[20] = a14;
  v24[21] = a15;
  v24[22] = a16;
  v24[23] = a17;
  v24[24] = a18;
  type metadata accessor for SearchFieldTokenControl();
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[28];

  v24[8] = a7;
  v24[9] = a8;
  v24[14] = a6;
  v24[19] = a2;
  v24[20] = a5;
  v24[10] = a3;
  v24[11] = a4;
  v24[18] = a1;
  v24[16] = a9;
  v24[6] = a10;
  v24[7] = a11;
  v24[1] = a14;
  v24[5] = a12;
  v18 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v18, v19);
  v24[15] = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Binding();
  v22 = *(_QWORD *)(v21 - 8);
  v24[12] = v21;
  v24[13] = v22;
  MEMORY[0x1E0C80A78](v21, v23);
  v24[21] = a13;
  v24[22] = a14;
  v24[23] = a15;
  v24[24] = a16;
  v24[25] = a17;
  v24[26] = a18;
  type metadata accessor for SearchFieldTokenControl();
}

void sub_1878DB670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  *(_QWORD *)(v18 - 280) = a1;
  *(_QWORD *)(v18 - 176) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v18 - 288) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (uint64_t *)((char *)&a9 - v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v13, *(_QWORD *)(v18 - 144), v16, v22);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v12;
  v25[3] = v17;
  v25[4] = v10;
  v25[5] = v9;
  v25[6] = v15;
  v25[7] = v14;
  v26 = *(_QWORD *)(v18 - 264);
  v25[8] = *(_QWORD *)(v18 - 256);
  v25[9] = v26;
  *(_QWORD *)(v18 - 272) = v24;
  SearchFieldTokenControl.init(text:tokens:token:prompt:)(*(_QWORD *)(v18 - 168), *(_QWORD *)(v18 - 160), *(_QWORD *)(v18 - 240), *(_QWORD *)(v18 - 152), v24);
}

uint64_t sub_1878DB77C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v5 - 288);
  v7 = v0;
  v8 = *(_QWORD *)(v5 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 16))(v6, v7, v8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Text?(v4, v3, v2, v1);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldTokenControl<A, B>, v8);
  v10 = *(_QWORD *)(v5 - 192);
  SearchFieldState.init()(v10);
  SearchField.init(state:isPresented:control:)(v10, 0, v6, v8, v9, *(_QWORD *)(v5 - 184));
  swift_release();
  outlined consume of Text?(v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 208) + 8))(*(_QWORD *)(v5 - 144), *(_QWORD *)(v5 - 224));
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 176) + 8))(*(_QWORD *)(v5 - 272), v8);
}

void type metadata accessor for SearchFieldTokenControl()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v7 = (char *)&v10 - v6;
  v8 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v8);
  a2(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t sub_1878DB970()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:)(a1, *(void (**)(char *))(v1 + 64));
}

void SearchFieldTokenControl.init(text:tokens:token:prompt:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  type metadata accessor for SearchFieldTokenControl();
}

__n128 sub_1878DBA30(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;

  v8 = v5 + a1[17];
  v9 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, v4, v9);
  v10 = (_QWORD *)(v5 + a1[18]);
  *v10 = v3;
  v10[1] = v2;
  v11 = v5 + a1[19];
  *(_QWORD *)v11 = v1;
  result = v13;
  *(__n128 *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 24) = v6;
  return result;
}

void sub_1878DBBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;

  *(_QWORD *)(v12 - 280) = a1;
  *(_QWORD *)(v12 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v12 - 288) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (uint64_t *)((char *)&a9 - v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v10, *(_QWORD *)(v12 - 144), v9, v16);
  *(_QWORD *)(v12 - 272) = v18;
  SearchFieldTokenControl.init(text:tokens:token:prompt:)(*(_QWORD *)(v12 - 160), *(_QWORD *)(v12 - 152), *(_QWORD *)(v12 - 224), *(_QWORD *)(v12 - 216), v18);
}

uint64_t sub_1878DBC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = v2;
  v8 = *(_QWORD *)(v6 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 168) + 16))(v7, v5, v8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = v1;
  outlined copy of Text?(v0, v4, v3, v1);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldTokenControl<A, B>, v8);
  v11 = *(_QWORD *)(v6 - 184);
  SearchFieldState.init()(v11);
  SearchField.init(state:isPresented:control:)(v11, 0, *(_QWORD *)(v6 - 288), v8, v10, *(_QWORD *)(v6 - 176));
  swift_release();
  outlined consume of Text?(v0, v4, v3, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 200) + 8))(*(_QWORD *)(v6 - 144), *(_QWORD *)(v6 - 208));
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 168) + 8))(*(_QWORD *)(v6 - 272), v8);
}

void SearchFieldTokenControl.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1E0C80A78](v0, v1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TokenField();
}

void sub_1878DBE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 - 160) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  *(_QWORD *)(v4 - 144) = v2;
  SearchFieldTokenControl.attributedText.getter(v3, v2);
}

void sub_1878DBEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t *)(v0 + *(int *)(v1 + 76));
  v4 = *v3;
  v5 = v3[1];
  v7 = v3[2];
  v6 = v3[3];
  if (v6)
  {
    *(_QWORD *)(v2 - 200) = v5;
    *(_QWORD *)(v2 - 192) = v4;
    *(_QWORD *)(v2 - 208) = v6;
  }
  else
  {
    v8 = static Text.System.search.getter();
    *(_QWORD *)(v2 - 200) = v9;
    *(_QWORD *)(v2 - 192) = v8;
    *(_QWORD *)(v2 - 208) = v10;
  }
  outlined copy of Text?(v4, v5, v7, v6);
  swift_retain();
  TokenField.init(valueType:text:prompt:token:label:)(*(_QWORD *)(v2 - 152), *(_QWORD *)(v2 - 144));
}

uint64_t sub_1878DBF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, v0);
  static ViewBuilder.buildExpression<A>(_:)(v2, v0, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 160) + 8);
  v5(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v3 - 136));
  return v5(v1, v0);
}

void SearchFieldTokenControl.attributedText.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = a2;
  v3 = a1[2];
  v4 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - v6;
  swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for Binding();
  v18 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  Binding.projectedValue.getter();
  v20 = TextField.$text.getter();
  v21 = v10;
  v22 = v11;
  v23 = v12;
  Binding.zip<A>(with:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v4);
  v13 = a1[4];
  v14 = a1[5];
  v15 = a1[7];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v3);
  v20 = v3;
  v21 = v13;
  v22 = v14;
  v23 = v15;
  type metadata accessor for StringTokensToAttributedStringProjection();
}

uint64_t sub_1878DC170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StringTokensToAttributedStringProjection<A>, a1);
  Binding.projecting<A>(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 128) + 8))(v2, v1);
}

uint64_t associated type witness table accessor for View.Body : View in SearchField<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchFieldTokenControl<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for SearchField()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for StateOrBinding<SearchFieldState>(319);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchField(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, unint64_t, uint64_t);
  unint64_t v41;
  unint64_t v42;
  int v43;
  char v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 9) & ~v8) + v9;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  if ((v17 | v8) > 7
    || ((*(_DWORD *)(v16 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || *(_QWORD *)(v16 + 64) + ((v17 + (v14 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + 1 > 0x18)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + (((v17 | v8) & 0xF8 ^ 0x1F8) & ((v17 | v8) + 16));
    swift_retain();
  }
  else
  {
    v21 = *((unsigned __int8 *)a2 + v14);
    v61 = *(_QWORD *)(v15 - 8);
    if (v21 >= 2)
    {
      if (v14 <= 3)
        v22 = v14;
      else
        v22 = 4;
      __asm { BR              X15 }
    }
    v60 = *(_QWORD *)(v16 + 64);
    v62 = *(_QWORD *)(a3 + 16);
    v23 = ~v8;
    v24 = v14 + 1;
    if (v21 == 1)
    {
      v25 = (unint64_t)a2 + 15;
      v27 = *a2;
      v26 = (uint64_t)a2 + 7;
      *(_QWORD *)a1 = v27;
      v28 = a1 + 7;
      v29 = ~v13;
      v30 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v25 &= 0xFFFFFFFFFFFFFFF8;
      v59 = v6;
      *v30 = *(_QWORD *)v25;
      v31 = (char *)v30 + v13;
      v32 = (char *)(v25 + v13);
      v33 = (unint64_t)(v31 + 8) & v29;
      v34 = (unint64_t)(v32 + 8) & v29;
      *(_BYTE *)v33 = *(_BYTE *)v34;
      *(_BYTE *)(v33 | 1) = *(_BYTE *)(v34 | 1);
      *(_BYTE *)(v33 | 2) = *(_BYTE *)(v34 | 2);
      *(_BYTE *)(v33 | 3) = *(_BYTE *)(v34 | 3);
      v35 = (v33 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v36 = (v34 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v29) = *(_DWORD *)v36;
      *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
      *(_DWORD *)v35 = v29;
      v37 = v8 + 5;
      v38 = (v37 + v35) & v23;
      v39 = (v37 + v36) & v23;
      v40 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      swift_retain();
      swift_retain();
      v40(v38, v39, v59);
      v24 = v14 + 1;
      *(_BYTE *)(v38 + v9) = *(_BYTE *)(v39 + v9);
      v41 = (v38 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v42 = (v39 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v43 = *(_DWORD *)(v42 + 4);
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_DWORD *)(v41 + 4) = v43;
      v44 = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
      *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
      *(_BYTE *)(a1 + 3) = *((_BYTE *)a2 + 3);
      v28 = a1 + 7;
      v45 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v26 = (uint64_t)a2 + 7;
      v46 = *(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      *(_BYTE *)(v45 + 4) = *(_BYTE *)((v26 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(_DWORD *)v45 = v46;
      v47 = (v45 + v8 + 5) & v23;
      v48 = ((v26 & 0xFFFFFFFFFFFFFFFCLL) + v8 + 5) & v23;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v47, v48, v6);
      *(_BYTE *)(v47 + v9) = *(_BYTE *)(v48 + v9);
      v49 = (v47 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v50 = (v48 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v51 = *(_DWORD *)(v50 + 4);
      *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
      *(_DWORD *)(v49 + 4) = v51;
      *(_QWORD *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v26 + v11) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      v44 = 0;
    }
    *(_BYTE *)(a1 + v14) = v44;
    v52 = (v28 + v24) & 0xFFFFFFFFFFFFFFF8;
    v53 = (v26 + v24) & 0xFFFFFFFFFFFFFFF8;
    v54 = *(unsigned __int8 *)(v53 + 17);
    if (v54 >= 2)
      v54 = *(_DWORD *)v53 + 2;
    v55 = ~v17;
    if (v54 == 1)
    {
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_QWORD *)(v52 + 8) = *(_QWORD *)(v53 + 8);
      *(_BYTE *)(v52 + 16) = *(_BYTE *)(v53 + 16);
      swift_retain();
      v56 = 1;
    }
    else
    {
      v56 = 0;
      *(_BYTE *)v52 = *(_BYTE *)v53;
      *(_QWORD *)(v52 + 8) = *(_QWORD *)(v53 + 8);
    }
    swift_retain();
    *(_BYTE *)(v52 + 17) = v56;
    v57 = (v17 + 18 + v53) & v55;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v61 + 16))((v17 + 18 + v52) & v55, v57, v62);
    *(_BYTE *)(((v17 + 18 + v52) & v55) + v60) = *(_BYTE *)(v57 + v60);
  }
  return a1;
}

uint64_t destroy for SearchField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((v6 + 9) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v8 + ((v6 + 16) & ~(v6 | 3)) <= v9)
    v10 = v9;
  else
    v10 = v8 + ((v6 + 16) & ~(v6 | 3));
  v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  v13 = ~v6;
  if (v11 == 1)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + (v6 | 3) + 8) & ~(v6 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v13, v4);
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 5) & v13, v4);
    swift_release();
  }
  v14 = (a1 + v10 + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v14 + 17);
  if (v15 >= 2)
    v15 = *(_DWORD *)v14 + 2;
  if (v15 == 1)
    swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v14 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for SearchField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(unint64_t, unint64_t, uint64_t);
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 9) & ~v8) + v9;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X15 }
  }
  v17 = ~v8;
  if (v15 == 1)
  {
    v18 = ~v13;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = (char *)v19 + v13;
    v22 = (char *)v20 + v13;
    v23 = (unint64_t)(v21 + 8) & v18;
    v24 = (unint64_t)(v22 + 8) & v18;
    v25 = v6;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_BYTE *)(v23 | 1) = *(_BYTE *)(v24 | 1);
    *(_BYTE *)(v23 | 2) = *(_BYTE *)(v24 | 2);
    *(_BYTE *)(v23 | 3) = *(_BYTE *)(v24 | 3);
    v26 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v27 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v23) = *(_DWORD *)v27;
    *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
    *(_DWORD *)v26 = v23;
    v28 = v8 + 5;
    v29 = (v28 + v26) & v17;
    v30 = (v28 + v27) & v17;
    v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v31(v29, v30, v25);
    *(_BYTE *)(v29 + v9) = *(_BYTE *)(v30 + v9);
    v32 = (v29 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v33 = (v30 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = *(_DWORD *)(v33 + 4);
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    *(_DWORD *)(v32 + 4) = v34;
    v35 = 1;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
    *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
    *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
    v36 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v37 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v38 = *(_DWORD *)v37;
    *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
    *(_DWORD *)v36 = v38;
    v39 = (v36 + v8 + 5) & v17;
    v40 = (v37 + v8 + 5) & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v39, v40, v6);
    *(_BYTE *)(v39 + v9) = *(_BYTE *)(v40 + v9);
    v41 = (v39 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v42 = (v40 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v43 = *(_DWORD *)(v42 + 4);
    *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
    *(_DWORD *)(v41 + 4) = v43;
    *(_QWORD *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v11) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v35 = 0;
  }
  *(_BYTE *)(a1 + v14) = v35;
  v44 = (v14 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v14 + 8 + a2) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(unsigned __int8 *)(v45 + 17);
  if (v46 >= 2)
    v46 = *(_DWORD *)v45 + 2;
  if (v46 == 1)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
    *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
    swift_retain();
    v47 = 1;
  }
  else
  {
    v47 = 0;
    *(_BYTE *)v44 = *(_BYTE *)v45;
    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
  }
  swift_retain();
  *(_BYTE *)(v44 + 17) = v47;
  v48 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = (v44 + v49 + 18) & ~v49;
  v51 = (v45 + v49 + 18) & ~v49;
  (*(void (**)(uint64_t, uint64_t))(v48 + 16))(v50, v51);
  *(_BYTE *)(v50 + *(_QWORD *)(v48 + 64)) = *(_BYTE *)(v51 + *(_QWORD *)(v48 + 64));
  return a1;
}

uint64_t assignWithCopy for SearchField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, unint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (a1 != a2)
  {
    v59 = type metadata accessor for AttributedString();
    v6 = *(_QWORD *)(v59 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v57 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 9) & ~v7) + v57;
    v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10)
      v12 = v10;
    else
      v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v58 = a3;
    v15 = ~v7;
    v16 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v16) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v15, v59);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v15, v59);
      swift_release();
    }
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v19 = *v20;
      v21 = ((unint64_t)v19 + v11 + 8) & v16;
      v22 = ((unint64_t)v20 + v11 + 8) & v16;
      *(_BYTE *)v21 = *(_BYTE *)v22;
      *(_BYTE *)(v21 | 1) = *(_BYTE *)(v22 | 1);
      *(_BYTE *)(v21 | 2) = *(_BYTE *)(v22 | 2);
      *(_BYTE *)(v21 | 3) = *(_BYTE *)(v22 | 3);
      v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = *(_DWORD *)v24;
      *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
      *(_DWORD *)v23 = v25;
      v26 = v7 + 5;
      v27 = (v7 + 5 + v23) & v15;
      v28 = (v26 + v24) & v15;
      v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v29(v27, v28, v59);
      *(_BYTE *)(v27 + v57) = *(_BYTE *)(v28 + v57);
      v30 = (v27 + v57) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = (v28 + v57) & 0xFFFFFFFFFFFFFFFCLL;
      v32 = *(_DWORD *)(v31 + 4);
      *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
      *(_DWORD *)(v30 + 4) = v32;
      *(_BYTE *)(a1 + v12) = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
      *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
      v33 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v34 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v35 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
      *(_DWORD *)v33 = v35;
      v36 = (v33 + v7 + 5) & v15;
      v37 = (v34 + v7 + 5) & v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v36, v37, v59);
      *(_BYTE *)(v36 + v57) = *(_BYTE *)(v37 + v57);
      v38 = (v36 + v57) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = (v37 + v57) & 0xFFFFFFFFFFFFFFFCLL;
      v40 = *(_DWORD *)(v39 + 4);
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_DWORD *)(v38 + 4) = v40;
      *(_QWORD *)((a1 + 7 + v9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v9) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(a1 + v12) = 0;
      swift_retain();
    }
    a3 = v58;
  }
  v41 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v42 = *(_DWORD *)(v41 + 80);
  v43 = ((v42 + 9) & ~(unint64_t)v42) + *(_QWORD *)(v41 + 64);
  v44 = v43 & 0xFFFFFFFFFFFFFFFCLL;
  v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 24;
  v46 = ((v42 & 0xFC ^ 0x1FCu) & (v42 + 16)) + v44 + 9;
  if (v46 > v45)
    v45 = v46;
  v47 = v45 + 8;
  v48 = (v47 + a1) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v47 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v48 != v49)
  {
    v50 = *(unsigned __int8 *)(v48 + 17);
    if (v50 >= 2)
      v50 = *(_DWORD *)v48 + 2;
    if (v50 == 1)
      swift_release();
    swift_release();
    v51 = *(unsigned __int8 *)(v49 + 17);
    if (v51 >= 2)
      v51 = *(_DWORD *)v49 + 2;
    if (v51 == 1)
    {
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
      *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
      *(_BYTE *)(v48 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v48 = *(_BYTE *)v49;
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
      *(_BYTE *)(v48 + 17) = 0;
    }
    swift_retain();
  }
  v52 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = (v48 + v53 + 18) & ~v53;
  v55 = (v49 + v53 + 18) & ~v53;
  (*(void (**)(uint64_t, uint64_t))(v52 + 24))(v54, v55);
  *(_BYTE *)(v54 + *(_QWORD *)(v52 + 64)) = *(_BYTE *)(v55 + *(_QWORD *)(v52 + 64));
  return a1;
}

uint64_t initializeWithTake for SearchField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 9) & ~v8) + v9;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X15 }
  }
  v17 = ~v8;
  if (v15 == 1)
  {
    v18 = ~v13;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = (char *)v19 + v13;
    v22 = (char *)v20 + v13;
    v23 = (unint64_t)(v21 + 8) & v18;
    v24 = (unint64_t)(v22 + 8) & v18;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_BYTE *)(v23 | 1) = *(_BYTE *)(v24 | 1);
    *(_BYTE *)(v23 | 2) = *(_BYTE *)(v24 | 2);
    *(_BYTE *)(v23 | 3) = *(_BYTE *)(v24 | 3);
    v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v23) = *(_DWORD *)v26;
    *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
    *(_DWORD *)v25 = v23;
    v27 = v8 + 5;
    v28 = (v27 + v25) & v17;
    v29 = (v27 + v26) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v28, v29, v6);
    *(_BYTE *)(v28 + v9) = *(_BYTE *)(v29 + v9);
    v30 = (v28 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v31 = (v29 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v32 = *(_DWORD *)(v31 + 4);
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(_DWORD *)(v30 + 4) = v32;
    v33 = 1;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
    *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
    *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
    v34 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v36 = *(_DWORD *)v35;
    *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
    *(_DWORD *)v34 = v36;
    v37 = (v34 + v8 + 5) & v17;
    v38 = (v35 + v8 + 5) & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v37, v38, v6);
    v33 = 0;
    *(_BYTE *)(v37 + v9) = *(_BYTE *)(v38 + v9);
    v39 = (v37 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v40 = (v38 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v41 = *(_DWORD *)(v40 + 4);
    *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
    *(_DWORD *)(v39 + 4) = v41;
    *(_QWORD *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  }
  *(_BYTE *)(a1 + v14) = v33;
  v42 = (v14 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v14 + 8 + a2) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(unsigned __int8 *)(v43 + 17);
  if (v44 >= 2)
    v44 = *(_DWORD *)v43 + 2;
  if (v44 == 1)
  {
    v45 = *(_OWORD *)v43;
    *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
    *(_OWORD *)v42 = v45;
    v46 = 1;
  }
  else
  {
    v46 = 0;
    *(_OWORD *)v42 = *(_OWORD *)v43;
  }
  *(_BYTE *)(v42 + 17) = v46;
  v47 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = (v42 + v48 + 18) & ~v48;
  v50 = (v43 + v48 + 18) & ~v48;
  (*(void (**)(uint64_t, uint64_t))(v47 + 32))(v49, v50);
  *(_BYTE *)(v49 + *(_QWORD *)(v47 + 64)) = *(_BYTE *)(v50 + *(_QWORD *)(v47 + 64));
  return a1;
}

uint64_t assignWithTake for SearchField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v61;

  v3 = a3;
  if (a1 != a2)
  {
    v61 = type metadata accessor for AttributedString();
    v6 = *(_QWORD *)(v61 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v59 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 9) & ~v7) + v59;
    v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10)
      v12 = v10;
    else
      v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v7;
    v16 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v16) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v15, v61);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v15, v61);
      swift_release();
    }
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v19 = *v20;
      v21 = ((unint64_t)v19 + v11 + 8) & v16;
      v22 = ((unint64_t)v20 + v11 + 8) & v16;
      *(_BYTE *)v21 = *(_BYTE *)v22;
      *(_BYTE *)(v21 | 1) = *(_BYTE *)(v22 | 1);
      *(_BYTE *)(v21 | 2) = *(_BYTE *)(v22 | 2);
      *(_BYTE *)(v21 | 3) = *(_BYTE *)(v22 | 3);
      v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = *(_DWORD *)v24;
      *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
      *(_DWORD *)v23 = v25;
      v26 = v7 + 5;
      v27 = (v7 + 5 + v23) & v15;
      v28 = (v26 + v24) & v15;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v27, v28, v61);
      *(_BYTE *)(v27 + v59) = *(_BYTE *)(v28 + v59);
      v29 = (v27 + v59) & 0xFFFFFFFFFFFFFFFCLL;
      v30 = (v28 + v59) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = *(_DWORD *)(v30 + 4);
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_DWORD *)(v29 + 4) = v31;
      *(_BYTE *)(a1 + v12) = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
      *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
      v32 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v33 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v34 = *(_DWORD *)v33;
      *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
      *(_DWORD *)v32 = v34;
      v35 = v33 + v7;
      v36 = (v32 + v7 + 5) & v15;
      v37 = (v35 + 5) & v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v36, v37, v61);
      *(_BYTE *)(v36 + v59) = *(_BYTE *)(v37 + v59);
      v38 = (v36 + v59) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = (v37 + v59) & 0xFFFFFFFFFFFFFFFCLL;
      v40 = *(_DWORD *)(v39 + 4);
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_DWORD *)(v38 + 4) = v40;
      *(_QWORD *)((a1 + 7 + v9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v9) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(a1 + v12) = 0;
    }
    v3 = a3;
  }
  v41 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v42 = *(_DWORD *)(v41 + 80);
  v43 = ((v42 + 9) & ~(unint64_t)v42) + *(_QWORD *)(v41 + 64);
  v44 = v43 & 0xFFFFFFFFFFFFFFFCLL;
  v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 24;
  v46 = ((v42 & 0xFC ^ 0x1FCu) & (v42 + 16)) + v44 + 9;
  if (v46 > v45)
    v45 = v46;
  v47 = v45 + 8;
  v48 = (v47 + a1) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v47 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v48 != v49)
  {
    v50 = *(unsigned __int8 *)(v48 + 17);
    if (v50 >= 2)
      v50 = *(_DWORD *)v48 + 2;
    if (v50 == 1)
      swift_release();
    swift_release();
    v51 = *(unsigned __int8 *)(v49 + 17);
    if (v51 >= 2)
      v51 = *(_DWORD *)v49 + 2;
    if (v51 == 1)
    {
      v52 = *(_OWORD *)v49;
      *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
      *(_OWORD *)v48 = v52;
      v53 = 1;
    }
    else
    {
      v53 = 0;
      *(_OWORD *)v48 = *(_OWORD *)v49;
    }
    *(_BYTE *)(v48 + 17) = v53;
  }
  v54 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = (v48 + v55 + 18) & ~v55;
  v57 = (v49 + v55 + 18) & ~v55;
  (*(void (**)(uint64_t, uint64_t))(v54 + 40))(v56, v57);
  *(_BYTE *)(v56 + *(_QWORD *)(v54 + 64)) = *(_BYTE *)(v57 + *(_QWORD *)(v54 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchField(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;

  v6 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 9) & ~(unint64_t)v7) + *(_QWORD *)(v6 + 64);
  v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
  v11 = ((v7 & 0xFC ^ 0x1FCu) & (v7 + 16)) + v9 + 9;
  if (v11 <= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14 <= 0xFE)
    v15 = 254;
  else
    v15 = *(_DWORD *)(v13 + 84);
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v13 + 80);
  if (a2 <= v15)
    goto LABEL_27;
  v17 = *(_QWORD *)(v13 + 64) + ((v16 + (v12 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v16) + 1;
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((a2 - v15 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if (v14 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v13 + 48))((v16
                                                                       + ((a1 + v12 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 18) & ~v16);
      v24 = *(unsigned __int8 *)(a1 + v12);
      if (v24 >= 2)
        return (v24 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = v17;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v15 + v22 + 1;
}

void storeEnumTagSinglePayload for SearchField(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  size_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;

  v8 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((v9 + 9) & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64);
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = ((v9 & 0xFC ^ 0x1FCu) & (v9 + 16)) + v11 + 9;
  if (v13 > v12)
    v12 = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v14 + 84) <= 0xFEu)
    v15 = 254;
  else
    v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_QWORD *)(v14 + 64)
      + ((*(unsigned __int8 *)(v14 + 80) + (v12 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + 1;
  if (a3 <= v15)
  {
    v17 = 0u;
  }
  else if (v16 <= 3)
  {
    v19 = ((a3 - v15 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v19))
    {
      v17 = 4u;
    }
    else if (v19 >= 0x100)
    {
      v17 = 2;
    }
    else
    {
      v17 = v19 > 1;
    }
  }
  else
  {
    v17 = 1u;
  }
  if (v15 < a2)
  {
    v18 = ~v15 + a2;
    if (v16 < 4)
    {
      if (*(_DWORD *)(v14 + 64)
         + ((*(unsigned __int8 *)(v14 + 80) + (v12 & 0xFFFFFFF8) + 26) & ~*(unsigned __int8 *)(v14 + 80)) != -1)
      {
        v20 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if ((_DWORD)v16 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if ((_DWORD)v16 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_1878DDEB4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1878DDEA0);
}

void sub_1878DDEC4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1878DDEA0);
}

void sub_1878DDECC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1878DDEA0);
}

uint64_t type metadata completion function for SearchFieldTokenControl()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchFieldTokenControl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  void (*v33)(unint64_t, unint64_t, uint64_t);
  unint64_t v34;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + 7;
  v10 = v6 & 0x100000;
  v11 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v10 != 0
    || ((((v9 + (v8 & (v7 + 32))) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    a1 = (uint64_t *)(v11 + (v8 & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = ~v7;
    v15 = a2[2];
    a1[1] = a2[1];
    a1[2] = v15;
    a1[3] = a2[3];
    v16 = (_QWORD *)(v8 & ((unint64_t)a1 + 39));
    v17 = (_QWORD *)(v8 & ((unint64_t)a2 + 39));
    *v16 = *v17;
    v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = v7 + 8;
    v21 = ((unint64_t)v19 + v20) & v14;
    v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    v34 = ((unint64_t)v18 + v20) & v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v33(v34, v21, v4);
    v22 = (_QWORD *)(((unint64_t)v16 + v9) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v17 + v9) & 0xFFFFFFFFFFFFFFF8);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v26 + 24);
    swift_retain();
    if (v27 < 0xFFFFFFFF)
    {
      v31 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16) = v31;
    }
    else
    {
      v28 = *(_QWORD *)v26;
      v29 = *(_QWORD *)(v26 + 8);
      v30 = *(_BYTE *)(v26 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v26, v29, v30);
      *(_QWORD *)v25 = v28;
      *(_QWORD *)(v25 + 8) = v29;
      *(_BYTE *)(v25 + 16) = v30;
      *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t destroy for SearchFieldTokenControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 32) & ~(v6 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  v8 = (((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = swift_release();
  v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for SearchFieldTokenControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 32;
  v11 = (_QWORD *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  v10 = (_QWORD *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v26 = ((unint64_t)v13 + v8 + 8) & ~v8;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v28 = ((unint64_t)v12 + v8 + 8) & ~v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v27(v28, v26, v6);
  v14 = *(_QWORD *)(v7 + 64) + ((v8 + 16) & ~v8) + 7;
  v15 = (_QWORD *)(((unint64_t)v10 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v11 + v14) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v19 + 24);
  swift_retain();
  if (v20 < 0xFFFFFFFF)
  {
    v24 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v24;
  }
  else
  {
    v21 = *(_QWORD *)v19;
    v22 = *(_QWORD *)(v19 + 8);
    v23 = *(_BYTE *)(v19 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v19, v22, v23);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v22;
    *(_BYTE *)(v18 + 16) = v23;
    *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRetain();
  }
  return a1;
}

