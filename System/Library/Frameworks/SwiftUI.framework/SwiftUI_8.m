void ProgressView.init<A>(value:total:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v19[14];
  char v20;
  char v21;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = &v19[-v17];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v14 + 16))(&v19[-v17], a1, v13, v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a3);
  v21 = 1;
  v20 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v18, (uint64_t)v12, (uint64_t)&v21, (uint64_t)&v20, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C38], a3, MEMORY[0x1E0CE7C28], a5, MEMORY[0x1E0CE7C28], a4);
}

uint64_t sub_1871EE90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v0, v3);
}

void ProgressView.init<A>(value:total:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[3];
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v30 = a3;
  v31 = a8;
  v32 = a9;
  v33 = a7;
  v29[1] = a1;
  v29[2] = a4;
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v29 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional();
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)v29 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)v29 - v26, a1, v22, v25);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, a2, a6);
  v30(v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v16, 0, 1, a5);
  v34 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v27, (uint64_t)v21, (uint64_t)v16, (uint64_t)&v34, a5, MEMORY[0x1E0CE7C38], a6, v33, v32, MEMORY[0x1E0CE7C28], v31);
}

uint64_t sub_1871EEAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v5 - 136), v4);
}

void ProgressView.init<A>(value:total:label:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v41 = a8;
  v42 = a6;
  v39 = a4;
  v40 = a3;
  v37[1] = a1;
  v38 = a2;
  v46 = a9;
  v45 = a12;
  v43 = a5;
  v44 = a13;
  v47 = a11;
  v15 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v37 - v17;
  v19 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v37 - v21;
  v37[0] = *(_QWORD *)(a10 - 8);
  v23 = v37[0];
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Optional();
  v29 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  v33 = (char *)v37 - v32;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)v37 - v32, a1, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v27, v38, a10);
  v40(v34);
  v35 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 56))(v22, 0, 1, a7);
  v43(v35);
  v36 = v41;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v18, 0, 1, v41);
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v33, (uint64_t)v27, (uint64_t)v22, (uint64_t)v18, a7, v36, a10, v47, v46, v45, v44);
}

uint64_t sub_1871EECD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(v1, v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v4 - 168), v3);
}

void ProgressView.init<A>(_:value:total:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[5];

  v26 = a5;
  v27 = a8;
  v25 = a4;
  v24[3] = a3;
  v28 = a9;
  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)v24 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v24 - v19, a5, v15, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, a7);
  v30[0] = Text.init(_:tableName:bundle:comment:)();
  v30[1] = v22;
  v30[2] = v21 & 1;
  v30[3] = v23;
  v29 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v20, (uint64_t)v14, (uint64_t)v30, (uint64_t)&v29, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE7C38], a7, MEMORY[0x1E0CE6C58], v28, MEMORY[0x1E0CE7C28], v27);
}

uint64_t sub_1871EEE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v4, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v5 - 152), v3);
}

void ProgressView.init<A, B>(_:value:total:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD v36[4];

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a2;
  v34 = a8;
  v29[0] = *(_QWORD *)(a4 - 8);
  v29[1] = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)v29 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)v29 - v24, a2, v20, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v29[0] + 16))(v13, a1, v30);
  v36[0] = Text.init<A>(_:)();
  v36[1] = v27;
  v36[2] = v26 & 1;
  v36[3] = v28;
  v35 = 1;
  ProgressView.init<A>(value:total:label:currentValueLabel:)((uint64_t)v25, (uint64_t)v19, (uint64_t)v36, (uint64_t)&v35, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE7C38], a5, MEMORY[0x1E0CE6C58], v34, MEMORY[0x1E0CE7C28], v33);
}

uint64_t sub_1871EF03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v3);
  (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v7 - 152), v5);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v7 - 168), v4);
}

uint64_t ProgressView.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  type metadata accessor for CustomProgressView<EmptyView, EmptyView>(0, &lazy cache variable for type metadata for ProgressView<EmptyView, EmptyView>.Base, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a2;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v19 - v6;
  v8 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v19 - v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, type metadata accessor for ProgressViewStyleConfiguration);
  v16 = *(int *)(v4 + 52);
  v17 = *(int *)(v4 + 56);
  v7[v17] = 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, type metadata accessor for ProgressViewValue);
  v7[v16] = v11[*(int *)(v8 + 28)];
  LOBYTE(v16) = v11[*(int *)(v8 + 32)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for ProgressViewStyleConfiguration);
  v7[v17] = v16;
  outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v7, (uint64_t)v15, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for ProgressViewStyleConfiguration);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v15, v20, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
}

void type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD *))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!*a2)
  {
    v6[0] = &type metadata for ProgressViewStyleConfiguration.Label;
    v6[1] = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
    v6[2] = &protocol witness table for ProgressViewStyleConfiguration.Label;
    v6[3] = &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
    v4 = a3(0, v6);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, _QWORD *))
{
  uint64_t v6;

  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in ProgressView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for ProgressView()
{
  type metadata accessor for ProgressView.Base();
}

uint64_t destroy for ProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + ((v6 + v7) & ~v7);
  v10 = 10;
  if ((unint64_t)(v9 + 1) > 0xA)
    v10 = v9 + 1;
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v10 + v14 + 1;
  if (*(_DWORD *)(v13 + 84))
    v16 = *(_QWORD *)(v13 + 64);
  else
    v16 = *(_QWORD *)(v13 + 64) + 1;
  v17 = *(_QWORD *)(v11 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  if (*(_DWORD *)(v17 + 84))
    v19 = *(_QWORD *)(v17 + 64);
  else
    v19 = *(_QWORD *)(v17 + 64) + 1;
  v20 = v19 + ((v16 + v18 + (v15 & ~v14)) & ~v18);
  if (v20 <= 0x40)
    v20 = 64;
  v21 = *(unsigned __int8 *)(a1 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X17 }
  }
  if (v21 == 1)
  {

    if (*(_QWORD *)(a1 + 32))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  else
  {
    v24 = *(unsigned __int8 *)(a1 + v10);
    if (v24 >= 2)
    {
      if (v10 <= 3)
        v25 = v10;
      else
        v25 = 4;
      __asm { BR              X16 }
    }
    v26 = ~v14;
    if (v24 == 1)
    {
      v34 = v11;
      v35 = v16;
      v27 = ~v7;
      v36 = v12;
      v28 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v29 = v8;
      v30 = v10 + v14 + 1;
      v28(a1, v4);
      v31 = (v29 + a1) & v27;
      v11 = v34;
      v28(v31, v4);
      v15 = v30;
      v16 = v35;
      v12 = v36;
    }
    v32 = (v15 + a1) & v26;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v32, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v32, v12);
    v33 = (v32 + v16 + v18) & ~v18;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v33, 1, v11);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v33, v11);
  }
  return result;
}

uint64_t initializeWithCopy for ProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  char v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  void *v39;
  const void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t __n;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v12 + v16 + 1;
  if (*(_DWORD *)(v15 + 84))
    v18 = *(_QWORD *)(v15 + 64);
  else
    v18 = *(_QWORD *)(v15 + 64) + 1;
  v19 = *(_QWORD *)(v14 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  if (*(_DWORD *)(v19 + 84))
    v21 = *(_QWORD *)(v19 + 64);
  else
    v21 = *(_QWORD *)(v19 + 64) + 1;
  if (((v18 + v20 + (v17 & ~v16)) & (unint64_t)~v20) + v21 <= 0x40)
    v22 = 64;
  else
    v22 = ((v18 + v20 + (v17 & ~v16)) & ~v20) + v21;
  v23 = *(unsigned __int8 *)(a2 + v22);
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X15 }
  }
  if (v23 == 1)
  {
    v25 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v26 = *(_QWORD *)(a2 + 32);
    v27 = v25;
    if (v26)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v26;
      v28 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v29;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + v22) = 1;
    swift_retain();
  }
  else
  {
    v30 = *(unsigned __int8 *)(a2 + v12);
    if (v30 >= 2)
    {
      if (v12 <= 3)
        v31 = v12;
      else
        v31 = 4;
      __asm { BR              X15 }
    }
    __n = v18;
    v47 = v21;
    v49 = v13;
    v50 = v22;
    v32 = ~v16;
    v48 = v18 + v20;
    if (v30 == 1)
    {
      v33 = ~v9;
      v44 = v12 + v16 + 1;
      v45 = v14;
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v42 = v6;
      v43 = *(unsigned __int8 *)(v19 + 80);
      v34(a1, a2, v6);
      v34((v10 + a1) & v33, (v10 + a2) & v33, v42);
      v20 = v43;
      v17 = v44;
      v14 = v45;
      *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
      v35 = 1;
    }
    else
    {
      v35 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + v12) = v35;
    v36 = ~v20;
    v37 = (void *)((v17 + a1) & v32);
    v38 = (const void *)((v17 + a2) & v32);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v38, 1, v49))
    {
      memcpy(v37, v38, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v37, v38, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v37, 0, 1, v49);
    }
    v39 = (void *)(((unint64_t)v37 + v48) & v36);
    v40 = (const void *)(((unint64_t)v38 + v48) & v36);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v40, 1, v14))
    {
      memcpy(v39, v40, v47);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v39, v40, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v39, 0, 1, v14);
    }
    *(_BYTE *)(a1 + v50) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for ProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  char v40;
  void *v41;
  void *v42;
  const void *v43;
  void *v44;
  const void *v45;
  size_t __n;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v50 = v8 + v9;
    v51 = v6;
    v10 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v10 + 1) > 0xA)
      v11 = v10 + 1;
    else
      v11 = 10;
    v12 = *(_QWORD *)(a3 + 24);
    v55 = *(_QWORD *)(a3 + 16);
    v56 = v12;
    v13 = *(_QWORD *)(v55 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v15 = v11 + v14 + 1;
    v16 = *(_QWORD *)(v13 + 64);
    if (!*(_DWORD *)(v13 + 84))
      ++v16;
    v17 = *(_QWORD *)(v12 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    __n = v16;
    v54 = v16 + v18;
    v19 = (v16 + v18 + (v15 & ~v14)) & ~v18;
    if (*(_DWORD *)(v17 + 84))
      v20 = *(_QWORD *)(v17 + 64);
    else
      v20 = *(_QWORD *)(v17 + 64) + 1;
    v48 = v20;
    v21 = v19 + v20;
    if (v21 <= 0x40)
      v22 = 64;
    else
      v22 = v21;
    v23 = *(unsigned __int8 *)(a1 + v22);
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X15 }
    }
    v49 = ~v9;
    v52 = ~v14;
    v53 = ~v18;
    if (v23 == 1)
    {

      if (*(_QWORD *)(a1 + 32))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      v25 = *(unsigned __int8 *)(a1 + v11);
      if (v25 >= 2)
      {
        if (v11 <= 3)
          v26 = v11;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      if (v25 == 1)
      {
        v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v27(a1, v6);
        v27((v50 + a1) & v49, v51);
      }
      v28 = (v15 + a1) & v52;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v28, 1, v55))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v55);
      v29 = (v54 + v28) & v53;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v29, 1, v56))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v29, v56);
    }
    v30 = *(unsigned __int8 *)(a2 + v22);
    if (v30 >= 2)
    {
      if (v22 <= 3)
        v31 = v22;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {
      v32 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 32);
      v34 = v32;
      if (v33)
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v35 = *(_OWORD *)(a2 + 8);
        v36 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = v36;
        *(_OWORD *)(a1 + 8) = v35;
      }
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + v22) = 1;
      swift_retain();
    }
    else
    {
      v37 = *(unsigned __int8 *)(a2 + v11);
      if (v37 >= 2)
      {
        if (v11 <= 3)
          v38 = v11;
        else
          v38 = 4;
        __asm { BR              X12 }
      }
      if (v37 == 1)
      {
        v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
        v39(a1, a2, v51);
        v39((v50 + a1) & v49, (v50 + a2) & v49, v51);
        *(_BYTE *)(v10 + a1) = *(_BYTE *)(v10 + a2);
        v40 = 1;
      }
      else
      {
        v40 = 0;
        v41 = *(void **)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        *(_QWORD *)a1 = v41;
      }
      *(_BYTE *)(a1 + v11) = v40;
      v42 = (void *)((v15 + a1) & v52);
      v43 = (const void *)((v15 + a2) & v52);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v43, 1, v55))
      {
        memcpy(v42, v43, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v42, v43, v55);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v42, 0, 1, v55);
      }
      v44 = (void *)(((unint64_t)v42 + v54) & v53);
      v45 = (const void *)(((unint64_t)v43 + v54) & v53);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v45, 1, v56))
      {
        memcpy(v44, v45, v48);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v44, v45, v56);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v44, 0, 1, v56);
      }
      *(_BYTE *)(a1 + v22) = 0;
    }
  }
  return a1;
}

uint64_t initializeWithTake for ProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t __n;
  size_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15 + 1;
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = *(_QWORD *)(v14 + 64) + 1;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  if (*(_DWORD *)(v18 + 84))
    v20 = *(_QWORD *)(v18 + 64);
  else
    v20 = *(_QWORD *)(v18 + 64) + 1;
  if (((v17 + v19 + (v16 & ~v15)) & (unint64_t)~v19) + v20 <= 0x40)
    v21 = 64;
  else
    v21 = ((v17 + v19 + (v16 & ~v15)) & ~v19) + v20;
  v22 = *(unsigned __int8 *)(a2 + v21);
  if (v22 >= 2)
  {
    if (v21 <= 3)
      v23 = v21;
    else
      v23 = 4;
    __asm { BR              X15 }
  }
  if (v22 == 1)
  {
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    v25 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v25;
    v26 = 1;
  }
  else
  {
    v27 = *(unsigned __int8 *)(a2 + v12);
    if (v27 >= 2)
    {
      if (v12 <= 3)
        v28 = v12;
      else
        v28 = 4;
      __asm { BR              X15 }
    }
    __n = v17;
    v49 = v20;
    v50 = v17 + v19;
    v51 = *(_QWORD *)(a3 + 24);
    v29 = ~v15;
    if (v27 == 1)
    {
      v30 = ~v9;
      v46 = v13;
      v47 = v21;
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v43 = v6;
      v44 = *(unsigned __int8 *)(v18 + 80);
      v45 = v12 + v15 + 1;
      v32 = v10;
      v31(a1, a2, v6);
      v33 = (v32 + a1) & v30;
      v34 = v32 + a2;
      v19 = v44;
      v31(v33, v34 & v30, v43);
      v16 = v45;
      v13 = v46;
      v21 = v47;
      *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
      v35 = 1;
    }
    else
    {
      v35 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + v12) = v35;
    v36 = ~v19;
    v37 = (void *)((v16 + a1) & v29);
    v38 = (const void *)((v16 + a2) & v29);
    v39 = v13;
    if ((*(unsigned int (**)(const void *, uint64_t))(v14 + 48))(v38, 1))
    {
      memcpy(v37, v38, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v37, v38, v39);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v37, 0, 1, v39);
    }
    v40 = (void *)(((unint64_t)v37 + v50) & v36);
    v41 = (const void *)(((unint64_t)v38 + v50) & v36);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v41, 1, v51))
    {
      memcpy(v40, v41, v49);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v40, v41, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v40, 0, 1, v51);
    }
    v26 = 0;
  }
  *(_BYTE *)(a1 + v21) = v26;
  return a1;
}

uint64_t assignWithTake for ProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  char v38;
  void *v39;
  const void *v40;
  void *v41;
  const void *v42;
  size_t __n;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v47 = v8 + v9;
    v48 = v6;
    v10 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v10 + 1) > 0xA)
      v11 = v10 + 1;
    else
      v11 = 10;
    v12 = *(_QWORD *)(a3 + 24);
    v52 = *(_QWORD *)(a3 + 16);
    v53 = v12;
    v13 = *(_QWORD *)(v52 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v15 = v11 + v14 + 1;
    v16 = *(_QWORD *)(v13 + 64);
    if (!*(_DWORD *)(v13 + 84))
      ++v16;
    v17 = *(_QWORD *)(v12 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    __n = v16;
    v51 = v16 + v18;
    v19 = (v16 + v18 + (v15 & ~v14)) & ~v18;
    if (*(_DWORD *)(v17 + 84))
      v20 = *(_QWORD *)(v17 + 64);
    else
      v20 = *(_QWORD *)(v17 + 64) + 1;
    v45 = v20;
    v21 = v19 + v20;
    if (v21 <= 0x40)
      v22 = 64;
    else
      v22 = v21;
    v23 = *(unsigned __int8 *)(a1 + v22);
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X15 }
    }
    v46 = ~v9;
    v49 = ~v14;
    v50 = ~v18;
    if (v23 == 1)
    {

      if (*(_QWORD *)(a1 + 32))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      v25 = *(unsigned __int8 *)(a1 + v11);
      if (v25 >= 2)
      {
        if (v11 <= 3)
          v26 = v11;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      if (v25 == 1)
      {
        v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v27(a1, v6);
        v27((v47 + a1) & v46, v48);
      }
      v28 = (v15 + a1) & v49;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v28, 1, v52))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v52);
      v29 = (v51 + v28) & v50;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v29, 1, v53))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v29, v53);
    }
    v30 = *(unsigned __int8 *)(a2 + v22);
    if (v30 >= 2)
    {
      if (v22 <= 3)
        v31 = v22;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {
      v32 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v32;
      v33 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v33;
      v34 = 1;
    }
    else
    {
      v35 = *(unsigned __int8 *)(a2 + v11);
      if (v35 >= 2)
      {
        if (v11 <= 3)
          v36 = v11;
        else
          v36 = 4;
        __asm { BR              X12 }
      }
      if (v35 == 1)
      {
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
        v37(a1, a2, v48);
        v37((v47 + a1) & v46, (v47 + a2) & v46, v48);
        *(_BYTE *)(v10 + a1) = *(_BYTE *)(v10 + a2);
        v38 = 1;
      }
      else
      {
        v38 = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      }
      *(_BYTE *)(a1 + v11) = v38;
      v39 = (void *)((v15 + a1) & v49);
      v40 = (const void *)((v15 + a2) & v49);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v40, 1, v52))
      {
        memcpy(v39, v40, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v39, v40, v52);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v39, 0, 1, v52);
      }
      v41 = (void *)(((unint64_t)v39 + v51) & v50);
      v42 = (const void *)(((unint64_t)v40 + v51) & v50);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v42, 1, v53))
      {
        memcpy(v41, v42, v45);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v41, v42, v53);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v41, 0, 1, v53);
      }
      v34 = 0;
    }
    *(_BYTE *)(a1 + v22) = v34;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  unsigned int v28;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80));
  if (v7 + 1 > 0xA)
    v8 = v7 + 1;
  else
    v8 = 10;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + v8 + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 84);
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v11 == 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 84);
  v17 = *(_QWORD *)(v14 + 64);
  if (v13)
    ++v12;
  v18 = (v12 + v15 + v10) & ~v15;
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = v19 + v18;
  v21 = 64;
  if (v20 > 0x40)
    v21 = v20;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_29;
  v22 = v21 + 1;
  v23 = 8 * (v21 + 1);
  if ((v21 + 1) <= 3)
  {
    v26 = ((a2 + ~(-1 << v23) - 254) >> v23) + 1;
    if (HIWORD(v26))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v26 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v26 < 2)
    {
LABEL_29:
      v28 = *(unsigned __int8 *)(a1 + v21);
      if (v28 >= 2)
        return (v28 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_29;
LABEL_22:
  v27 = (v24 - 1) << v23;
  if (v22 > 3)
    v27 = 0;
  if ((_DWORD)v22)
  {
    if (v22 > 3)
      LODWORD(v22) = 4;
    __asm { BR              X11 }
  }
  return (v27 + 255);
}

void storeEnumTagSinglePayload for ProgressView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;

  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80));
  if (v9 + 1 > 0xA)
    v10 = v9 + 1;
  else
    v10 = 10;
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + v10 + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 84);
  v14 = *(_QWORD *)(v11 + 64);
  v15 = v13 == 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = *(_DWORD *)(v16 + 84);
  v19 = *(_QWORD *)(v16 + 64);
  if (v15)
    ++v14;
  v20 = (v14 + v17 + v12) & ~v17;
  if (v18)
    v21 = v19;
  else
    v21 = v19 + 1;
  v22 = v21 + v20;
  if (v22 <= 0x40)
    v22 = 64;
  v23 = v22 + 1;
  if (a3 < 0xFF)
  {
    v24 = 0u;
  }
  else if (v23 <= 3)
  {
    v26 = ((a3 + ~(-1 << (8 * v23)) - 254) >> (8 * v23)) + 1;
    if (HIWORD(v26))
    {
      v24 = 4u;
    }
    else if (v26 >= 0x100)
    {
      v24 = 2;
    }
    else
    {
      v24 = v26 > 1;
    }
  }
  else
  {
    v24 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v25 = a2 - 255;
  if (v23 < 4)
  {
    if ((_DWORD)v22 != -1)
    {
      v27 = v25 & ~(-1 << (8 * v23));
      bzero(a1, v23);
      if ((_DWORD)v23 == 3)
      {
        *(_WORD *)a1 = v27;
        a1[2] = BYTE2(v27);
      }
      else if ((_DWORD)v23 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v22 + 1);
    *(_DWORD *)a1 = v25;
  }
  __asm { BR              X10 }
}

void type metadata accessor for ProgressView()
{
  JUMPOUT(0x18D75FF28);
}

void sub_1871F0DE8()
{
  type metadata accessor for CustomProgressView();
}

uint64_t sub_1871F0E08()
{
  uint64_t v0;
  _QWORD v2[8];

  v0 = type metadata accessor for _ConditionalContent();
  v2[0] = &protocol witness table for CustomProgressView<A, B>;
  v2[1] = &protocol witness table for FoundationProgressView;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v0, v2);
}

_QWORD *initializeBufferWithCopyOfBuffer for ProgressViewValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 36)), (_QWORD *)((char *)a2 + *(int *)(v9 + 36)), v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    *((_BYTE *)a1 + *(int *)(v10 + 48)) = *((_BYTE *)a2 + *(int *)(v10 + 48));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for ProgressViewValue(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for Date();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v5(a1, v3);
    type metadata accessor for ClosedRange<Date>();
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v4 + 36), v3);
  }
  return result;
}

_BYTE *initializeWithCopy for ProgressViewValue(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Date();
    v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithCopy for ProgressViewValue(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Date();
      v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *initializeWithTake for ProgressViewValue(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Date();
    v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for ProgressViewValue(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Date();
      v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for ProgressViewValue()
{
  unint64_t v0;
  _QWORD v1[6];

  v1[4] = "\n";
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t type metadata completion function for CustomProgressView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for ProgressViewValue(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomProgressView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t *, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  void *v34;
  const void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t __n;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v12 + v14 + 1;
  if (*(_DWORD *)(v13 + 84))
    v16 = *(_QWORD *)(v13 + 64);
  else
    v16 = *(_QWORD *)(v13 + 64) + 1;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v18 = *(_DWORD *)(v17 + 80);
  if (*(_DWORD *)(v17 + 84))
    v19 = *(_QWORD *)(v17 + 64);
  else
    v19 = *(_QWORD *)(v17 + 64) + 1;
  v20 = v14 | v9 | v18;
  if (v20 > 7
    || ((*(_DWORD *)(v13 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v17 + 80)) & 0x100000) != 0
    || ((v16 + v18 + (v15 & ~v14)) & (unint64_t)~v18) + v19 > 0x18)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v23 + ((v20 & 0xF8 ^ 0x1F8) & (v20 + 16));
    swift_retain();
  }
  else
  {
    v24 = *((unsigned __int8 *)a2 + v12);
    if (v24 >= 2)
    {
      if (v12 <= 3)
        v25 = v12;
      else
        v25 = 4;
      __asm { BR              X15 }
    }
    __n = v16;
    v41 = v19;
    v43 = *(_QWORD *)(a3 + 16);
    v44 = *(_QWORD *)(a3 + 24);
    v26 = ~v14;
    v42 = v16 + v18;
    if (v24 == 1)
    {
      v27 = ~v9;
      v28 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v7 + 16);
      v37 = v6;
      v38 = v26;
      v29 = v10;
      v39 = v15;
      v28(a1, a2, v6);
      v28((v29 + a1) & v27, (uint64_t *)(((unint64_t)a2 + v29) & v27), v37);
      v26 = v38;
      v15 = v39;
      *(_BYTE *)(v11 + a1) = *((_BYTE *)a2 + v11);
      v30 = 1;
    }
    else
    {
      v30 = 0;
      *(_QWORD *)a1 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    }
    *(_BYTE *)(a1 + v12) = v30;
    v31 = ~v18;
    v32 = (void *)((v15 + a1) & v26);
    v33 = (const void *)(((unint64_t)a2 + v15) & v26);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v33, 1, v43))
    {
      memcpy(v32, v33, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v32, v33, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v43);
    }
    v34 = (void *)(((unint64_t)v32 + v42) & v31);
    v35 = (const void *)(((unint64_t)v33 + v42) & v31);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v35, 1, v44))
    {
      memcpy(v34, v35, v41);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v34, v35, v44);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v34, 0, 1, v44);
    }
  }
  return a1;
}

uint64_t destroy for CustomProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + ((v6 + v7) & ~v7);
  if ((unint64_t)(v9 + 1) > 0xA)
    v10 = v9 + 1;
  else
    v10 = 10;
  v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 1)
  {
    v13 = ~v7;
    v14 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v14(a1, v4);
    v14((v8 + a1) & v13, v4);
  }
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (a1 + v10 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15))
    (*(void (**)(unint64_t, uint64_t))(v16 + 8))(v17, v15);
  v18 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v16 + 64) + v17;
  if (!*(_DWORD *)(v16 + 84))
    ++v20;
  v21 = (v20 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v18);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v19 + 8))(v21, v18);
  return result;
}

uint64_t initializeWithCopy for CustomProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  int v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  size_t v34;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 1)
  {
    v15 = ~v9;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v16(a1, a2, v6);
    v16((v10 + a1) & v15, (v10 + a2) & v15, v6);
    *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
    v17 = 1;
  }
  else
  {
    v17 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  }
  *(_BYTE *)(a1 + v12) = v17;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v12 + v20 + 1;
  v22 = (void *)((v21 + a1) & ~v20);
  v23 = (const void *)((v21 + a2) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v23, 1, v18))
  {
    v24 = *(_DWORD *)(v19 + 84);
    v25 = *(_QWORD *)(v19 + 64);
    if (v24)
      v26 = *(_QWORD *)(v19 + 64);
    else
      v26 = v25 + 1;
    memcpy(v22, v23, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v22, v23, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
    v24 = *(_DWORD *)(v19 + 84);
    v25 = *(_QWORD *)(v19 + 64);
  }
  if (v24)
    v27 = v25;
  else
    v27 = v25 + 1;
  v28 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v27 + v30;
  v32 = (void *)(((unint64_t)v22 + v31) & ~v30);
  v33 = (const void *)(((unint64_t)v23 + v31) & ~v30);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v33, 1, v28))
  {
    if (*(_DWORD *)(v29 + 84))
      v34 = *(_QWORD *)(v29 + 64);
    else
      v34 = *(_QWORD *)(v29 + 64) + 1;
    memcpy(v32, v33, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v32, v33, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
  }
  return a1;
}

uint64_t assignWithCopy for CustomProgressView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  unsigned int v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t (*v42)(void *, uint64_t, uint64_t);
  int v43;
  int v44;
  size_t v45;

  if ((uint64_t *)a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = v8 + v9;
    v11 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v11 + 1) > 0xA)
      v12 = v11 + 1;
    else
      v12 = 10;
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    v15 = ~v9;
    if (v13 == 1)
    {
      v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v16(a1, v6);
      v16((v10 + a1) & v15, v6);
    }
    v17 = *((unsigned __int8 *)a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      v19 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v7 + 16);
      v19(a1, a2, v6);
      v19((v10 + a1) & v15, (uint64_t *)(((unint64_t)a2 + v10) & v15), v6);
      *(_BYTE *)(v11 + a1) = *((_BYTE *)a2 + v11);
      v20 = 1;
    }
    else
    {
      v20 = 0;
      v21 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(_QWORD *)a1 = v21;
    }
    *(_BYTE *)(a1 + v12) = v20;
  }
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64)
      + ((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80));
  if (v23 + 1 > 0xA)
    v24 = v23 + 1;
  else
    v24 = 10;
  v25 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v24 + v27 + 1;
  v29 = (void *)((v28 + a1) & ~v27);
  v30 = (void *)(((unint64_t)a2 + v28) & ~v27);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v32 = v31(v29, 1, v25);
  v33 = v31(v30, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v29, v30, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
      goto LABEL_33;
    }
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v29, v30, v25);
      goto LABEL_33;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
  }
  if (*(_DWORD *)(v26 + 84))
    v34 = *(_QWORD *)(v26 + 64);
  else
    v34 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v29, v30, v34);
LABEL_33:
  if (*(_DWORD *)(v26 + 84))
    v35 = *(_QWORD *)(v26 + 64);
  else
    v35 = *(_QWORD *)(v26 + 64) + 1;
  v36 = *(_QWORD *)(a3 + 24);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = v35 + v38;
  v40 = (void *)(((unint64_t)v29 + v39) & ~v38);
  v41 = (void *)(((unint64_t)v30 + v39) & ~v38);
  v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  v43 = v42(v40, 1, v36);
  v44 = v42(v41, 1, v36);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 16))(v40, v41, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v36);
      return a1;
    }
  }
  else
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 24))(v40, v41, v36);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v37 + 8))(v40, v36);
  }
  if (*(_DWORD *)(v37 + 84))
    v45 = *(_QWORD *)(v37 + 64);
  else
    v45 = *(_QWORD *)(v37 + 64) + 1;
  memcpy(v40, v41, v45);
  return a1;
}

uint64_t initializeWithTake for CustomProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  int v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  size_t v34;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 1)
  {
    v15 = ~v9;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v16(a1, a2, v6);
    v16((v10 + a1) & v15, (v10 + a2) & v15, v6);
    *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
    v17 = 1;
  }
  else
  {
    v17 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  }
  *(_BYTE *)(a1 + v12) = v17;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v12 + v20 + 1;
  v22 = (void *)((v21 + a1) & ~v20);
  v23 = (const void *)((v21 + a2) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v23, 1, v18))
  {
    v24 = *(_DWORD *)(v19 + 84);
    v25 = *(_QWORD *)(v19 + 64);
    if (v24)
      v26 = *(_QWORD *)(v19 + 64);
    else
      v26 = v25 + 1;
    memcpy(v22, v23, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v22, v23, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
    v24 = *(_DWORD *)(v19 + 84);
    v25 = *(_QWORD *)(v19 + 64);
  }
  if (v24)
    v27 = v25;
  else
    v27 = v25 + 1;
  v28 = *(_QWORD *)(a3 + 24);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v27 + v30;
  v32 = (void *)(((unint64_t)v22 + v31) & ~v30);
  v33 = (const void *)(((unint64_t)v23 + v31) & ~v30);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v33, 1, v28))
  {
    if (*(_DWORD *)(v29 + 84))
      v34 = *(_QWORD *)(v29 + 64);
    else
      v34 = *(_QWORD *)(v29 + 64) + 1;
    memcpy(v32, v33, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v32, v33, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
  }
  return a1;
}

uint64_t assignWithTake for CustomProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  unsigned int v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  size_t v44;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = v8 + v9;
    v11 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v11 + 1) > 0xA)
      v12 = v11 + 1;
    else
      v12 = 10;
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    v15 = ~v9;
    if (v13 == 1)
    {
      v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v16(a1, v6);
      v16((v10 + a1) & v15, v6);
    }
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v19(a1, a2, v6);
      v19((v10 + a1) & v15, (v10 + a2) & v15, v6);
      *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
      v20 = 1;
    }
    else
    {
      v20 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + v12) = v20;
  }
  v21 = type metadata accessor for Date();
  v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64)
      + ((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80));
  if (v22 + 1 > 0xA)
    v23 = v22 + 1;
  else
    v23 = 10;
  v24 = *(_QWORD *)(a3 + 16);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v23 + v26 + 1;
  v28 = (void *)((v27 + a1) & ~v26);
  v29 = (void *)((v27 + a2) & ~v26);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v31 = v30(v28, 1, v24);
  v32 = v30(v29, 1, v24);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v28, v29, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v24);
      goto LABEL_33;
    }
  }
  else
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v28, v29, v24);
      goto LABEL_33;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v28, v24);
  }
  if (*(_DWORD *)(v25 + 84))
    v33 = *(_QWORD *)(v25 + 64);
  else
    v33 = *(_QWORD *)(v25 + 64) + 1;
  memcpy(v28, v29, v33);
LABEL_33:
  if (*(_DWORD *)(v25 + 84))
    v34 = *(_QWORD *)(v25 + 64);
  else
    v34 = *(_QWORD *)(v25 + 64) + 1;
  v35 = *(_QWORD *)(a3 + 24);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = v34 + v37;
  v39 = (void *)(((unint64_t)v28 + v38) & ~v37);
  v40 = (void *)(((unint64_t)v29 + v38) & ~v37);
  v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  v42 = v41(v39, 1, v35);
  v43 = v41(v40, 1, v35);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v36 + 32))(v39, v40, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v35);
      return a1;
    }
  }
  else
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v36 + 40))(v39, v40, v35);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v39, v35);
  }
  if (*(_DWORD *)(v36 + 84))
    v44 = *(_QWORD *)(v36 + 64);
  else
    v44 = *(_QWORD *)(v36 + 64) + 1;
  memcpy(v39, v40, v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomProgressView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80));
  if (v7 + 1 > 0xA)
    v8 = v7 + 1;
  else
    v8 = 10;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = v13 - 1;
  if (!v13)
    v14 = 0;
  if (v11 <= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 <= 0xFE)
    v16 = 254;
  else
    v16 = v15;
  v17 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v17;
  if (v13)
    v18 = *(_QWORD *)(v12 + 64);
  else
    v18 = *(_QWORD *)(v12 + 64) + 1;
  if (!a2)
    return 0;
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = v8 + v19 + 1;
  v21 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v16)
    goto LABEL_39;
  v22 = v18 + ((v17 + v21 + (v20 & ~v19)) & ~v21);
  v23 = 8 * v22;
  if (v22 <= 3)
  {
    v25 = ((a2 - v16 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v25))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_39;
      goto LABEL_30;
    }
    if (v25 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_39;
      goto LABEL_30;
    }
    if (v25 < 2)
    {
LABEL_39:
      if (v15 <= 0xFE)
      {
        v28 = *(unsigned __int8 *)(a1 + v8);
        if (v28 >= 2)
          return (v28 ^ 0xFF) + 1;
        else
          return 0;
      }
      v29 = (v20 + a1) & ~v19;
      if (v11 == v16)
      {
        if (v10 >= 2)
        {
          v30 = (*(uint64_t (**)(uint64_t, _QWORD))(v9 + 48))(v29, *(unsigned int *)(v9 + 84));
          goto LABEL_49;
        }
      }
      else if (v13 >= 2)
      {
        v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v29 + v17 + v21) & ~v21);
LABEL_49:
        if (v30 >= 2)
          return v30 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_39;
LABEL_30:
  v26 = (v24 - 1) << v23;
  if (v22 > 3)
    v26 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v27 = v22;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  return v16 + v26 + 1;
}

void storeEnumTagSinglePayload for CustomProgressView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;

  v8 = type metadata accessor for Date();
  v9 = 0u;
  v10 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
      + ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80));
  if (v10 + 1 > 0xA)
    v11 = v10 + 1;
  else
    v11 = 10;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  if (v13)
    v14 = v13 - 1;
  else
    v14 = 0;
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = v16 - 1;
  if (!v16)
    v17 = 0;
  if (v14 <= v17)
    v18 = v17;
  else
    v18 = v14;
  if (v18 <= 0xFE)
    v19 = 254;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v12 + 64);
  if (!v13)
    ++v20;
  v21 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v21;
  v22 = v21
      + ((v20
        + *(unsigned __int8 *)(v15 + 80)
        + ((v11 + 1 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  if (a3 > v19)
  {
    if (v22 > 3)
    {
      v9 = 1u;
      if (v19 >= a2)
LABEL_35:
        __asm { BR              X22 }
LABEL_28:
      v24 = ~v19 + a2;
      if (v22 < 4)
      {
        if ((_DWORD)v22)
        {
          v25 = v24 & ~(-1 << (8 * v22));
          bzero(a1, v22);
          if ((_DWORD)v22 == 3)
          {
            *(_WORD *)a1 = v25;
            a1[2] = BYTE2(v25);
          }
          else if ((_DWORD)v22 == 2)
          {
            *(_WORD *)a1 = v25;
          }
          else
          {
            *a1 = v25;
          }
        }
      }
      else
      {
        bzero(a1, v22);
        *(_DWORD *)a1 = v24;
      }
      __asm { BR              X10 }
    }
    v23 = ((a3 - v19 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
    if (HIWORD(v23))
    {
      v9 = 4u;
      if (v19 >= a2)
        goto LABEL_35;
      goto LABEL_28;
    }
    if (v23 >= 0x100)
      v9 = 2;
    else
      v9 = v23 > 1;
  }
  if (v19 >= a2)
    goto LABEL_35;
  goto LABEL_28;
}

void sub_1871F2AFC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1871F2B04()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_1871F2B24()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1871F2B34()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1871F2B3C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void type metadata completion function for ProgressView.Base()
{
  type metadata accessor for CustomProgressView();
}

char *initializeBufferWithCopyOfBuffer for ProgressView(char *a1, char **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char **, uint64_t);
  size_t __n;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v14 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v12 + v16 + 1;
  if (*(_DWORD *)(v15 + 84))
    v18 = *(_QWORD *)(v15 + 64);
  else
    v18 = *(_QWORD *)(v15 + 64) + 1;
  v19 = *(_QWORD *)(v13 - 8);
  v20 = *(_DWORD *)(v19 + 80);
  v21 = (v18 + v20 + (v17 & ~v16)) & ~v20;
  if (*(_DWORD *)(v19 + 84))
    v22 = *(_QWORD *)(v19 + 64);
  else
    v22 = *(_QWORD *)(v19 + 64) + 1;
  if ((unint64_t)(v21 + v22) <= 0x40)
    v23 = 64;
  else
    v23 = v21 + v22;
  v24 = v16 | v9 | v20;
  if (v24 > 7
    || ((*(_DWORD *)(v15 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v19 + 80)) & 0x100000) != 0
    || (unint64_t)(v23 + 1) > 0x18)
  {
    v27 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v27[(v24 & 0xF8 ^ 0x1F8) & (v24 + 16)];
LABEL_34:
    swift_retain();
    return a1;
  }
  v28 = *((unsigned __int8 *)a2 + v23);
  if (v28 >= 2)
    v28 = *(_DWORD *)a2 + 2;
  if (v28 == 1)
  {
    v29 = v23;
    v30 = *a2;
    *(_QWORD *)a1 = *a2;
    v31 = a2[4];
    v32 = v30;
    if (v31)
    {
      *((_QWORD *)a1 + 1) = a2[1];
      a1[16] = *((_BYTE *)a2 + 16);
      *((_QWORD *)a1 + 3) = a2[3];
      *((_QWORD *)a1 + 4) = v31;
      v33 = a2[6];
      *((_QWORD *)a1 + 5) = a2[5];
      *((_QWORD *)a1 + 6) = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v36 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = v36;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    }
    *((_QWORD *)a1 + 7) = a2[7];
    a1[v29] = 1;
    goto LABEL_34;
  }
  v34 = *((unsigned __int8 *)a2 + v12);
  if (v34 >= 2)
  {
    if (v12 <= 3)
      v35 = v12;
    else
      v35 = 4;
    __asm { BR              X15 }
  }
  __n = v18;
  v51 = v22;
  v37 = ~v16;
  v53 = v13;
  v54 = v23;
  v52 = v18 + v20;
  if (v34 == 1)
  {
    v46 = ~v9;
    v47 = v37;
    v48 = v14;
    v49 = *(void (**)(char *, char **, uint64_t))(v7 + 16);
    v49(a1, a2, v6);
    v49((char *)((unint64_t)&a1[v10] & v46), (char **)(((unint64_t)a2 + v10) & v46), v6);
    v37 = v47;
    v14 = v48;
    a1[v11] = *((_BYTE *)a2 + v11);
    v38 = 1;
  }
  else
  {
    v38 = 0;
    *(_QWORD *)a1 = *a2;
    *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
  }
  a1[v12] = v38;
  v39 = ~v20;
  v40 = (void *)((unint64_t)&a1[v17] & v37);
  v41 = (const void *)(((unint64_t)a2 + v17) & v37);
  v42 = v14;
  if ((*(unsigned int (**)(const void *, uint64_t))(v15 + 48))(v41, 1))
  {
    memcpy(v40, v41, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v40, v41, v42);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v42);
  }
  v43 = (void *)(((unint64_t)v40 + v52) & v39);
  v44 = (const void *)(((unint64_t)v41 + v52) & v39);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v44, 1, v53))
  {
    memcpy(v43, v44, v51);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v43, v44, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v43, 0, 1, v53);
  }
  a1[v54] = 0;
  return a1;
}

uint64_t destroy for ProgressView.Base(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + ((v6 + v7) & ~v7);
  v10 = 10;
  if ((unint64_t)(v9 + 1) > 0xA)
    v10 = v9 + 1;
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v10 + v14 + 1;
  if (*(_DWORD *)(v13 + 84))
    v16 = *(_QWORD *)(v13 + 64);
  else
    v16 = *(_QWORD *)(v13 + 64) + 1;
  v17 = *(_QWORD *)(v11 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  if (*(_DWORD *)(v17 + 84))
    v19 = *(_QWORD *)(v17 + 64);
  else
    v19 = *(_QWORD *)(v17 + 64) + 1;
  v20 = v19 + ((v16 + v18 + (v15 & ~v14)) & ~v18);
  if (v20 <= 0x40)
    v20 = 64;
  v21 = *(unsigned __int8 *)(a1 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X17 }
  }
  if (v21 == 1)
  {

    if (*(_QWORD *)(a1 + 32))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  else
  {
    v24 = *(unsigned __int8 *)(a1 + v10);
    if (v24 >= 2)
    {
      if (v10 <= 3)
        v25 = v10;
      else
        v25 = 4;
      __asm { BR              X16 }
    }
    v26 = ~v14;
    if (v24 == 1)
    {
      v34 = v11;
      v35 = v16;
      v27 = ~v7;
      v36 = v12;
      v28 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v29 = v8;
      v30 = v10 + v14 + 1;
      v28(a1, v4);
      v31 = (v29 + a1) & v27;
      v11 = v34;
      v28(v31, v4);
      v15 = v30;
      v16 = v35;
      v12 = v36;
    }
    v32 = (v15 + a1) & v26;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v32, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v32, v12);
    v33 = (v32 + v16 + v18) & ~v18;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v33, 1, v11);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v33, v11);
  }
  return result;
}

uint64_t initializeWithCopy for ProgressView.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  char v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  void *v39;
  const void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t __n;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v12 + v16 + 1;
  if (*(_DWORD *)(v15 + 84))
    v18 = *(_QWORD *)(v15 + 64);
  else
    v18 = *(_QWORD *)(v15 + 64) + 1;
  v19 = *(_QWORD *)(v14 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  if (*(_DWORD *)(v19 + 84))
    v21 = *(_QWORD *)(v19 + 64);
  else
    v21 = *(_QWORD *)(v19 + 64) + 1;
  if (((v18 + v20 + (v17 & ~v16)) & (unint64_t)~v20) + v21 <= 0x40)
    v22 = 64;
  else
    v22 = ((v18 + v20 + (v17 & ~v16)) & ~v20) + v21;
  v23 = *(unsigned __int8 *)(a2 + v22);
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X15 }
  }
  if (v23 == 1)
  {
    v25 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v26 = *(_QWORD *)(a2 + 32);
    v27 = v25;
    if (v26)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v26;
      v28 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v29;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + v22) = 1;
    swift_retain();
  }
  else
  {
    v30 = *(unsigned __int8 *)(a2 + v12);
    if (v30 >= 2)
    {
      if (v12 <= 3)
        v31 = v12;
      else
        v31 = 4;
      __asm { BR              X15 }
    }
    __n = v18;
    v47 = v21;
    v49 = v13;
    v50 = v22;
    v32 = ~v16;
    v48 = v18 + v20;
    if (v30 == 1)
    {
      v33 = ~v9;
      v44 = v12 + v16 + 1;
      v45 = v14;
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v42 = v6;
      v43 = *(unsigned __int8 *)(v19 + 80);
      v34(a1, a2, v6);
      v34((v10 + a1) & v33, (v10 + a2) & v33, v42);
      v20 = v43;
      v17 = v44;
      v14 = v45;
      *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
      v35 = 1;
    }
    else
    {
      v35 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + v12) = v35;
    v36 = ~v20;
    v37 = (void *)((v17 + a1) & v32);
    v38 = (const void *)((v17 + a2) & v32);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v38, 1, v49))
    {
      memcpy(v37, v38, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v37, v38, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v37, 0, 1, v49);
    }
    v39 = (void *)(((unint64_t)v37 + v48) & v36);
    v40 = (const void *)(((unint64_t)v38 + v48) & v36);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v40, 1, v14))
    {
      memcpy(v39, v40, v47);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v39, v40, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v39, 0, 1, v14);
    }
    *(_BYTE *)(a1 + v50) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for ProgressView.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  char v40;
  void *v41;
  void *v42;
  const void *v43;
  void *v44;
  const void *v45;
  size_t __n;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v50 = v8 + v9;
    v51 = v6;
    v10 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v10 + 1) > 0xA)
      v11 = v10 + 1;
    else
      v11 = 10;
    v12 = *(_QWORD *)(a3 + 24);
    v55 = *(_QWORD *)(a3 + 16);
    v56 = v12;
    v13 = *(_QWORD *)(v55 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v15 = v11 + v14 + 1;
    v16 = *(_QWORD *)(v13 + 64);
    if (!*(_DWORD *)(v13 + 84))
      ++v16;
    v17 = *(_QWORD *)(v12 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    __n = v16;
    v54 = v16 + v18;
    v19 = (v16 + v18 + (v15 & ~v14)) & ~v18;
    if (*(_DWORD *)(v17 + 84))
      v20 = *(_QWORD *)(v17 + 64);
    else
      v20 = *(_QWORD *)(v17 + 64) + 1;
    v48 = v20;
    v21 = v19 + v20;
    if (v21 <= 0x40)
      v22 = 64;
    else
      v22 = v21;
    v23 = *(unsigned __int8 *)(a1 + v22);
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X15 }
    }
    v49 = ~v9;
    v52 = ~v14;
    v53 = ~v18;
    if (v23 == 1)
    {

      if (*(_QWORD *)(a1 + 32))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      v25 = *(unsigned __int8 *)(a1 + v11);
      if (v25 >= 2)
      {
        if (v11 <= 3)
          v26 = v11;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      if (v25 == 1)
      {
        v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v27(a1, v6);
        v27((v50 + a1) & v49, v51);
      }
      v28 = (v15 + a1) & v52;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v28, 1, v55))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v55);
      v29 = (v54 + v28) & v53;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v29, 1, v56))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v29, v56);
    }
    v30 = *(unsigned __int8 *)(a2 + v22);
    if (v30 >= 2)
    {
      if (v22 <= 3)
        v31 = v22;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {
      v32 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v33 = *(_QWORD *)(a2 + 32);
      v34 = v32;
      if (v33)
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v35 = *(_OWORD *)(a2 + 8);
        v36 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = v36;
        *(_OWORD *)(a1 + 8) = v35;
      }
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + v22) = 1;
      swift_retain();
    }
    else
    {
      v37 = *(unsigned __int8 *)(a2 + v11);
      if (v37 >= 2)
      {
        if (v11 <= 3)
          v38 = v11;
        else
          v38 = 4;
        __asm { BR              X12 }
      }
      if (v37 == 1)
      {
        v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
        v39(a1, a2, v51);
        v39((v50 + a1) & v49, (v50 + a2) & v49, v51);
        *(_BYTE *)(v10 + a1) = *(_BYTE *)(v10 + a2);
        v40 = 1;
      }
      else
      {
        v40 = 0;
        v41 = *(void **)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        *(_QWORD *)a1 = v41;
      }
      *(_BYTE *)(a1 + v11) = v40;
      v42 = (void *)((v15 + a1) & v52);
      v43 = (const void *)((v15 + a2) & v52);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v43, 1, v55))
      {
        memcpy(v42, v43, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v42, v43, v55);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v42, 0, 1, v55);
      }
      v44 = (void *)(((unint64_t)v42 + v54) & v53);
      v45 = (const void *)(((unint64_t)v43 + v54) & v53);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v45, 1, v56))
      {
        memcpy(v44, v45, v48);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v44, v45, v56);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v44, 0, 1, v56);
      }
      *(_BYTE *)(a1 + v22) = 0;
    }
  }
  return a1;
}

uint64_t initializeWithTake for ProgressView.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t __n;
  size_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if ((unint64_t)(v11 + 1) > 0xA)
    v12 = v11 + 1;
  else
    v12 = 10;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15 + 1;
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = *(_QWORD *)(v14 + 64) + 1;
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  if (*(_DWORD *)(v18 + 84))
    v20 = *(_QWORD *)(v18 + 64);
  else
    v20 = *(_QWORD *)(v18 + 64) + 1;
  if (((v17 + v19 + (v16 & ~v15)) & (unint64_t)~v19) + v20 <= 0x40)
    v21 = 64;
  else
    v21 = ((v17 + v19 + (v16 & ~v15)) & ~v19) + v20;
  v22 = *(unsigned __int8 *)(a2 + v21);
  if (v22 >= 2)
  {
    if (v21 <= 3)
      v23 = v21;
    else
      v23 = 4;
    __asm { BR              X15 }
  }
  if (v22 == 1)
  {
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    v25 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v25;
    v26 = 1;
  }
  else
  {
    v27 = *(unsigned __int8 *)(a2 + v12);
    if (v27 >= 2)
    {
      if (v12 <= 3)
        v28 = v12;
      else
        v28 = 4;
      __asm { BR              X15 }
    }
    __n = v17;
    v49 = v20;
    v50 = v17 + v19;
    v51 = *(_QWORD *)(a3 + 24);
    v29 = ~v15;
    if (v27 == 1)
    {
      v30 = ~v9;
      v46 = v13;
      v47 = v21;
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v43 = v6;
      v44 = *(unsigned __int8 *)(v18 + 80);
      v45 = v12 + v15 + 1;
      v32 = v10;
      v31(a1, a2, v6);
      v33 = (v32 + a1) & v30;
      v34 = v32 + a2;
      v19 = v44;
      v31(v33, v34 & v30, v43);
      v16 = v45;
      v13 = v46;
      v21 = v47;
      *(_BYTE *)(v11 + a1) = *(_BYTE *)(v11 + a2);
      v35 = 1;
    }
    else
    {
      v35 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    }
    *(_BYTE *)(a1 + v12) = v35;
    v36 = ~v19;
    v37 = (void *)((v16 + a1) & v29);
    v38 = (const void *)((v16 + a2) & v29);
    v39 = v13;
    if ((*(unsigned int (**)(const void *, uint64_t))(v14 + 48))(v38, 1))
    {
      memcpy(v37, v38, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v37, v38, v39);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v37, 0, 1, v39);
    }
    v40 = (void *)(((unint64_t)v37 + v50) & v36);
    v41 = (const void *)(((unint64_t)v38 + v50) & v36);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v41, 1, v51))
    {
      memcpy(v40, v41, v49);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v40, v41, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v40, 0, 1, v51);
    }
    v26 = 0;
  }
  *(_BYTE *)(a1 + v21) = v26;
  return a1;
}

uint64_t assignWithTake for ProgressView.Base(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  char v38;
  void *v39;
  const void *v40;
  void *v41;
  const void *v42;
  size_t __n;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v47 = v8 + v9;
    v48 = v6;
    v10 = ((v8 + v9) & ~v9) + v8;
    if ((unint64_t)(v10 + 1) > 0xA)
      v11 = v10 + 1;
    else
      v11 = 10;
    v12 = *(_QWORD *)(a3 + 24);
    v52 = *(_QWORD *)(a3 + 16);
    v53 = v12;
    v13 = *(_QWORD *)(v52 - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v15 = v11 + v14 + 1;
    v16 = *(_QWORD *)(v13 + 64);
    if (!*(_DWORD *)(v13 + 84))
      ++v16;
    v17 = *(_QWORD *)(v12 - 8);
    v18 = *(unsigned __int8 *)(v17 + 80);
    __n = v16;
    v51 = v16 + v18;
    v19 = (v16 + v18 + (v15 & ~v14)) & ~v18;
    if (*(_DWORD *)(v17 + 84))
      v20 = *(_QWORD *)(v17 + 64);
    else
      v20 = *(_QWORD *)(v17 + 64) + 1;
    v45 = v20;
    v21 = v19 + v20;
    if (v21 <= 0x40)
      v22 = 64;
    else
      v22 = v21;
    v23 = *(unsigned __int8 *)(a1 + v22);
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X15 }
    }
    v46 = ~v9;
    v49 = ~v14;
    v50 = ~v18;
    if (v23 == 1)
    {

      if (*(_QWORD *)(a1 + 32))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    else
    {
      v25 = *(unsigned __int8 *)(a1 + v11);
      if (v25 >= 2)
      {
        if (v11 <= 3)
          v26 = v11;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      if (v25 == 1)
      {
        v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v27(a1, v6);
        v27((v47 + a1) & v46, v48);
      }
      v28 = (v15 + a1) & v49;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v28, 1, v52))
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v52);
      v29 = (v51 + v28) & v50;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v29, 1, v53))
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v29, v53);
    }
    v30 = *(unsigned __int8 *)(a2 + v22);
    if (v30 >= 2)
    {
      if (v22 <= 3)
        v31 = v22;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {
      v32 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v32;
      v33 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v33;
      v34 = 1;
    }
    else
    {
      v35 = *(unsigned __int8 *)(a2 + v11);
      if (v35 >= 2)
      {
        if (v11 <= 3)
          v36 = v11;
        else
          v36 = 4;
        __asm { BR              X12 }
      }
      if (v35 == 1)
      {
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
        v37(a1, a2, v48);
        v37((v47 + a1) & v46, (v47 + a2) & v46, v48);
        *(_BYTE *)(v10 + a1) = *(_BYTE *)(v10 + a2);
        v38 = 1;
      }
      else
      {
        v38 = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      }
      *(_BYTE *)(a1 + v11) = v38;
      v39 = (void *)((v15 + a1) & v49);
      v40 = (const void *)((v15 + a2) & v49);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v40, 1, v52))
      {
        memcpy(v39, v40, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v39, v40, v52);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v39, 0, 1, v52);
      }
      v41 = (void *)(((unint64_t)v39 + v51) & v50);
      v42 = (const void *)(((unint64_t)v40 + v51) & v50);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v42, 1, v53))
      {
        memcpy(v41, v42, v45);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v41, v42, v53);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v41, 0, 1, v53);
      }
      v34 = 0;
    }
    *(_BYTE *)(a1 + v22) = v34;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressView.Base(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  unsigned int v28;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80));
  if (v7 + 1 > 0xA)
    v8 = v7 + 1;
  else
    v8 = 10;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + v8 + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 84);
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v11 == 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 84);
  v17 = *(_QWORD *)(v14 + 64);
  if (v13)
    ++v12;
  v18 = (v12 + v15 + v10) & ~v15;
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = v19 + v18;
  v21 = 64;
  if (v20 > 0x40)
    v21 = v20;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_29;
  v22 = v21 + 1;
  v23 = 8 * (v21 + 1);
  if ((v21 + 1) <= 3)
  {
    v26 = ((a2 + ~(-1 << v23) - 254) >> v23) + 1;
    if (HIWORD(v26))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v26 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v26 < 2)
    {
LABEL_29:
      v28 = *(unsigned __int8 *)(a1 + v21);
      if (v28 >= 2)
        return (v28 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_29;
LABEL_22:
  v27 = (v24 - 1) << v23;
  if (v22 > 3)
    v27 = 0;
  if ((_DWORD)v22)
  {
    if (v22 > 3)
      LODWORD(v22) = 4;
    __asm { BR              X11 }
  }
  return (v27 + 255);
}

void storeEnumTagSinglePayload for ProgressView.Base(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;

  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80));
  if (v9 + 1 > 0xA)
    v10 = v9 + 1;
  else
    v10 = 10;
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + v10 + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 84);
  v14 = *(_QWORD *)(v11 + 64);
  v15 = v13 == 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = *(_DWORD *)(v16 + 84);
  v19 = *(_QWORD *)(v16 + 64);
  if (v15)
    ++v14;
  v20 = (v14 + v17 + v12) & ~v17;
  if (v18)
    v21 = v19;
  else
    v21 = v19 + 1;
  v22 = v21 + v20;
  if (v22 <= 0x40)
    v22 = 64;
  v23 = v22 + 1;
  if (a3 < 0xFF)
  {
    v24 = 0u;
  }
  else if (v23 <= 3)
  {
    v26 = ((a3 + ~(-1 << (8 * v23)) - 254) >> (8 * v23)) + 1;
    if (HIWORD(v26))
    {
      v24 = 4u;
    }
    else if (v26 >= 0x100)
    {
      v24 = 2;
    }
    else
    {
      v24 = v26 > 1;
    }
  }
  else
  {
    v24 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v25 = a2 - 255;
  if (v23 < 4)
  {
    if ((_DWORD)v22 != -1)
    {
      v27 = v25 & ~(-1 << (8 * v23));
      bzero(a1, v23);
      if ((_DWORD)v23 == 3)
      {
        *(_WORD *)a1 = v27;
        a1[2] = BYTE2(v27);
      }
      else if ((_DWORD)v23 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v22 + 1);
    *(_DWORD *)a1 = v25;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for ProgressView.Base(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80));
  if (v5 + 1 > 0xA)
    v6 = v5 + 1;
  else
    v6 = 10;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(v7 + 64);
  if (!v9)
    ++v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 84);
  v14 = *(_QWORD *)(v11 + 64);
  if (v13)
    v15 = v14;
  else
    v15 = v14 + 1;
  v16 = v15 + v12;
  if (v16 <= 0x40)
    v16 = 64;
  result = *(unsigned __int8 *)(a1 + v16);
  if (result >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ProgressView.Base(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char v20;
  int v21;

  result = type metadata accessor for Date();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64)
     + ((*(_QWORD *)(*(_QWORD *)(result - 8) + 64) + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80));
  if (v7 + 1 > 0xA)
    v8 = v7 + 1;
  else
    v8 = 10;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + v8 + 1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 84);
  v12 = *(_QWORD *)(v9 + 64);
  if (!v11)
    ++v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = (v12 + *(unsigned __int8 *)(v13 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 84);
  v16 = *(_QWORD *)(v13 + 64);
  if (v15)
    v17 = v16;
  else
    v17 = v16 + 1;
  v18 = v17 + v14;
  if (v18 <= 0x40)
    v19 = 64;
  else
    v19 = v18;
  if (a2 > 1)
  {
    if (v19 <= 3)
      v20 = ((a2 - 2) >> (8 * v19)) + 2;
    else
      v20 = 2;
    a1[v19] = v20;
    if (v19 >= 4)
      v21 = 4;
    else
      v21 = v19;
    bzero(a1, v19);
    __asm { BR              X10 }
  }
  a1[v19] = a2;
  return result;
}

_UNKNOWN **base witness table accessor for View in CustomProgressView<A, B>()
{
  return &protocol witness table for CustomProgressView<A, B>;
}

uint64_t type metadata accessor for ResolvedProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedProgressView);
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleConfiguration.CurrentValueLabel, &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleConfiguration.CurrentValueLabel, &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleConfiguration.Label, &type metadata for ProgressViewStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewStyleConfiguration.Label, &type metadata for ProgressViewStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  }
  return result;
}

void type metadata accessor for CustomProgressView.Child()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for implicit closure #1 in static CustomProgressView._makeView(view:inputs:)()
{
  uint64_t v0;

  implicit closure #1 in static CustomProgressView._makeView(view:inputs:)(*(_DWORD *)(v0 + 48), *(_DWORD *)(v0 + 52), *(_QWORD *)(v0 + 56), *(_DWORD *)(v0 + 64), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void type metadata accessor for WidgetAuxiliaryTextImagePreference?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?);
  }
}

void type metadata accessor for CustomProgressView.WidgetMetadataWriter()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for WidgetAuxiliaryViewMetadata?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, type metadata accessor for WidgetAuxiliaryViewMetadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t lazy protocol witness table accessor for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.DateRelativeCodingKeys, &unk_1E1AC6378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.DateRelativeCodingKeys, &unk_1E1AC6378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.DateRelativeCodingKeys, &unk_1E1AC6378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.DateRelativeCodingKeys, &unk_1E1AC6378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.DateRelativeCodingKeys and conformance ProgressViewValue.DateRelativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.AbsoluteCodingKeys, &unk_1E1AC62E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.AbsoluteCodingKeys, &unk_1E1AC62E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.AbsoluteCodingKeys, &unk_1E1AC62E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.AbsoluteCodingKeys, &unk_1E1AC62E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.AbsoluteCodingKeys and conformance ProgressViewValue.AbsoluteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.CodingKeys, &unk_1E1AC6258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.CodingKeys, &unk_1E1AC6258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.CodingKeys, &unk_1E1AC6258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProgressViewValue.CodingKeys, &unk_1E1AC6258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewValue.CodingKeys and conformance ProgressViewValue.CodingKeys);
  }
  return result;
}

void *type metadata accessor for ProgressViewValue.CodingKeys()
{
  return &unk_1E1AC6258;
}

void *type metadata accessor for ProgressViewValue.AbsoluteCodingKeys()
{
  return &unk_1E1AC62E8;
}

uint64_t storeEnumTagSinglePayload for ProgressViewValue.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1871F4E1C + 4 * byte_187C16295[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1871F4E50 + 4 * byte_187C16290[v4]))();
}

uint64_t sub_1871F4E50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871F4E58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1871F4E60);
  return result;
}

uint64_t sub_1871F4E6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1871F4E74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1871F4E78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1871F4E80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ProgressViewValue.DateRelativeCodingKeys()
{
  return &unk_1E1AC6378;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedProgressView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Date();
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((_QWORD *)((char *)a1 + *(int *)(v10 + 36)), (_QWORD *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v13 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  }
  return a1;
}

uint64_t destroy for ResolvedProgressView(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  type metadata accessor for ProgressViewValue(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for Date();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v5(a1, v3);
    type metadata accessor for ClosedRange<Date>();
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v4 + 36), v3);
  }
  return result;
}

_BYTE *initializeWithCopy for ResolvedProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v11] = a2[v11];
  return a1;
}

_BYTE *assignWithCopy for ResolvedProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *initializeWithTake for ResolvedProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v11] = a2[v11];
  return a1;
}

_BYTE *assignWithTake for ResolvedProgressView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for ProgressViewValue);
    v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v11] = a2[v11];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedProgressView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871F5420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for ProgressViewValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ResolvedProgressView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1871F54B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ProgressViewValue(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for ResolvedProgressView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ProgressViewValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void base witness table accessor for _AttributeBody in CustomProgressView<A, B>.WidgetMetadataWriter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in CustomProgressView<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in CustomProgressView.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t partial apply for closure #2 in CustomProgressView.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

void type metadata accessor for (ClosedRange<Date>, Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ClosedRange<Date>, Bool))
  {
    type metadata accessor for ClosedRange<Date>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool));
  }
}

uint64_t specialized ProgressViewValue.AbsoluteCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000187BDA280
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000187BDA2A0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ProgressViewValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574756C6F736261 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616C655265746164 && a2 == 0xEC00000065766974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ProgressViewValue.DateRelativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t outlined copy of WidgetAuxiliaryTextImagePreference?(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of WidgetAuxiliaryTextImagePreference?(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined assign with take of WidgetAuxiliaryViewMetadata.Progress?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Progress?, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1871F5CE0()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v13;
  int64_t v14;

  v13 = (_QWORD *)(a1 + 56);
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v14 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_19;
  }
  if (v14 > 1)
  {
    v8 = v13[1];
    v9 = 1;
    if (v8)
      goto LABEL_18;
    v9 = 2;
    if (v14 <= 2)
      goto LABEL_20;
    v8 = v13[2];
    if (v8)
      goto LABEL_18;
    v9 = 3;
    if (v14 <= 3)
      goto LABEL_20;
    v8 = v13[3];
    if (v8)
      goto LABEL_18;
    v9 = 4;
    if (v14 <= 4)
      goto LABEL_20;
    v8 = v13[4];
    if (v8)
      goto LABEL_18;
    v10 = 5;
    if (v14 <= 5)
      goto LABEL_20;
    v8 = v13[5];
    v9 = 5;
    if (v8)
    {
LABEL_18:
      v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_19:
      __asm { BR              X9 }
    }
    while (1)
    {
      v9 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        JUMPOUT(0x1871F6050);
      }
      if (v9 >= v14)
        break;
      v8 = v13[v9];
      ++v10;
      if (v8)
        goto LABEL_18;
    }
  }
LABEL_20:

  result = swift_release();
  *a3 = 0;
  a3[1] = 0xF000000000000007;
  return result;
}

uint64_t specialized _UIHostingView.beginDescendingAllowUIKitAnimations(depth:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;
  id v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB0);
  ++*(_DWORD *)((char *)v1 + v3);
  v4 = objc_msgSend(v1, sel_subviews);
  type metadata accessor for UIView();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v33 = (_QWORD *)v5;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9B0] + 8;
  while (1)
  {
    v26 = a1;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0)
        goto LABEL_36;
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v9 < 0 || v10 < v9)
        goto LABEL_37;
      if (v9)
        goto LABEL_9;
    }
    else
    {
      swift_bridgeObjectRetain();
      v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0)
      {
        result = specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10));
        goto LABEL_16;
      }
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_9:
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, v25, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size_2(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 25;
        v11[2] = 0;
        v11[3] = (2 * (v13 >> 3)) | 1;
        goto LABEL_14;
      }
    }
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_14:
    v33 = v11;
    result = swift_bridgeObjectRelease();
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v14)
        goto LABEL_31;
      goto LABEL_17;
    }
    v7 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    v14 = *(_QWORD *)(v7 + 16);
    if (!v14)
      goto LABEL_31;
LABEL_17:
    if (v14 < 1)
      goto LABEL_35;
    v15 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x18D75E3BC](v15, v5);
      else
        v18 = *(id *)(v5 + 8 * v15 + 32);
      v19 = v18;
      v29 = v18;
      type metadata accessor for UIKitAnimationCooperating();
      v20 = v19;
      if (swift_dynamicCast())
      {
        outlined init with take of OptionalBinaryInteger(v27, (uint64_t)v30);
        v21 = v31;
        v22 = v32;
        __swift_project_boxed_opaque_existential_1(v30, v31);
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
        outlined init with copy of TableColumnList((uint64_t)v30, (uint64_t)v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v24 = v6[2];
        v23 = v6[3];
        if (v24 >= v23 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v6);
        v6[2] = v24 + 1;
        outlined init with take of OptionalBinaryInteger(v27, (uint64_t)&v6[5 * v24 + 4]);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      }
      else
      {
        v28 = 0;
        memset(v27, 0, sizeof(v27));
        outlined destroy of IntelligenceElement?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for UIKitAnimationCooperating?, (void (*)(uint64_t))type metadata accessor for UIKitAnimationCooperating);
      }
      ++v15;
      v16 = objc_msgSend(v20, sel_subviews, v25);
      v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Array.append<A>(contentsOf:)(v17);
    }
    while (v14 != v15);
LABEL_31:
    result = swift_bridgeObjectRelease();
    a1 = v26 - 1;
    if (__OFSUB__(v26, 1))
      break;
    v5 = (unint64_t)v33;
    if (a1 <= 0)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void SheetBridge.seed.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + direct field offset for SheetBridge.seed);
}

_DWORD *SheetBridge.seed.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + direct field offset for SheetBridge.seed) = *result;
  return result;
}

void SheetBridge.backgroundSeed.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + direct field offset for SheetBridge.backgroundSeed);
}

_DWORD *SheetBridge.backgroundSeed.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + direct field offset for SheetBridge.backgroundSeed) = *result;
  return result;
}

void SheetBridge.presentationOptionsSeed.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + direct field offset for SheetBridge.presentationOptionsSeed);
}

_DWORD *SheetBridge.presentationOptionsSeed.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + direct field offset for SheetBridge.presentationOptionsSeed) = *result;
  return result;
}

uint64_t SheetBridge.interactiveDismissHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + direct field offset for SheetBridge.interactiveDismissHandler);
  v4 = *(_QWORD *)(v2 + direct field offset for SheetBridge.interactiveDismissHandler);
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

uint64_t SheetBridge.hasWindow.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for SheetBridge.hasWindow) = result;
  return result;
}

void SheetBridge.isParentPresentationFromLikeKindBridge.getter()
{
  uint64_t v0;

  if (MEMORY[0x18D760234](v0 + direct field offset for SheetBridge.host))
    _UIHostingView.viewController.getter();
  __break(1u);
}

uint64_t SheetBridge.requiresTransparentHostKey.getter()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *v3;
  id v4;

  result = MEMORY[0x18D760234](v0 + direct field offset for SheetBridge.host);
  if (result)
  {
    v2 = (void *)result;
    v3 = (void *)specialized _UIHostingView.inspectorBridge.getter();
    v4 = v3;

    if (v3)
    return v3 != 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char v26;
  char *v27;

  v4 = a1;
  if (a4)
  {
    v5 = *a1;
    v6 = *(_QWORD **)(a4 + direct field offset for UIHostingController.host);
    v7 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v6 & *MEMORY[0x1E0DEEDD8]) + 0x60));
    swift_beginAccess();
    *v7 = v5;
    swift_retain_n();
    v8 = v6;
    swift_release();
    v4 = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for willPresent != -1)
    swift_once();
  objc_msgSend(v9, sel_postNotificationName_object_, static SheetInspectorBridgeNotifications.willPresent, 0);

  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  static Update.ensure<A>(_:)();
  v12 = direct field offset for UIHostingController.host;
  v13 = *(_QWORD **)&v27[direct field offset for UIHostingController.host];
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v13 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v13) + 0x240) + 8) = &protocol witness table for SheetBridge<A, B>;
  swift_unknownObjectWeakAssign();
  v15 = v4[11];
  v16 = v4[12];
  v17 = (_QWORD *)((char *)v13 + *(_QWORD *)((*v14 & *v13) + 0x120));
  swift_beginAccess();
  v18 = *v17;
  *v17 = v15;
  v17[1] = v16;
  swift_retain();
  v19 = v13;
  swift_retain();
  outlined consume of EnvironmentValues?(v18);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  swift_retain();
  swift_retain();
  EnvironmentValues.explicitPreferredColorScheme.getter();
  swift_release();
  swift_release();
  if (v26 != 2)
  {
    v20 = *(_QWORD **)&v27[v12];
    v21 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v20) + 0x180);
    v22 = *((unsigned __int8 *)v20 + v21);
    *((_BYTE *)v20 + v21) = v26;
    v23 = v27;
    v24 = v20;
    specialized _UIHostingView.didChangeColorScheme(from:)(v22);

  }
  type metadata accessor for SheetBridge();
}

void makeHostingController #1 <A, B>() in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(uint64_t a1, void *a2)
{
  Class v3;
  id v4;
  id v5;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  v4 = objc_allocWithZone(v3);
  swift_retain();
  v5 = a2;
  type metadata accessor for SheetBridge();
}

char *sub_1871F6BC0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  char v3;
  _BYTE *v4;
  char *v5;

  v5 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(v2, (uint64_t)v1, v3, v4, a1, (uint64_t)&protocol witness table for SheetBridge<A, B>);
  swift_release();

  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  return v5;
}

uint64_t closure #1 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  uint64_t result;
  _BYTE v9[112];

  outlined init with copy of SheetPreference(a2, (uint64_t)v9);
  if (!a1)
    makeHostingController #1 <A, B>() in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)((uint64_t)v9, a3);
  v7 = a1;
  result = outlined destroy of SheetPreference((uint64_t)v9);
  *a4 = v7;
  return result;
}

void closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(uint64_t a1, char a2, void *a3, char a4, int a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  char isEscapingClosureAtFileLocation;
  int v25;
  char v26;
  _BYTE v27[112];
  id v28;
  unsigned __int8 v29;
  _QWORD aBlock[30];

  v11 = a1 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x18D760234](v11);
  if (v12)
  {
    v13 = (void *)v12;
    v14 = v12 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v14, (uint64_t)aBlock);
    outlined init with copy of PresentationState.Base((uint64_t)aBlock, (uint64_t)v27);
    if (v29 >= 2u)
    {
      outlined destroy of PresentationState.Base((uint64_t)v27);
      outlined destroy of PresentationState((uint64_t)aBlock);
      goto LABEL_16;
    }

    outlined destroy of SheetPreference((uint64_t)v27);
    outlined destroy of PresentationState((uint64_t)aBlock);
    if ((a2 & 1) == 0)
    {
      v15 = objc_msgSend(a3, sel_presentedViewController);
      if (v15)
      {
        v16 = v15;
        if ((objc_msgSend(v15, sel_isBeingDismissed) & 1) == 0)
        {
          objc_opt_self();
          if (!swift_dynamicCastObjCClass())
            objc_msgSend(a3, sel_dismissViewControllerAnimated_completion_, a4 & 1, 0);
        }

      }
    }
    v17 = (uint64_t)v13 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v17, (uint64_t)aBlock);
    PresentationState.Base.presentationSeed.getter();
    outlined destroy of PresentationState((uint64_t)aBlock);
    if (v26 == 1 || v25 == -1 || a5 == -1 || v25 != a5)
      goto LABEL_16;
    if ((a4 & 1) != 0)
    {
      objc_msgSend(a3, sel_presentViewController_animated_completion_, a6, 1, 0);
LABEL_16:

      return;
    }
    v18 = (void *)objc_opt_self();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a3;
    *(_QWORD *)(v19 + 24) = a6;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = partial apply for closure #1 in closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:);
    *(_QWORD *)(v20 + 24) = v19;
    aBlock[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_42;
    v21 = _Block_copy(aBlock);
    v22 = a3;
    v23 = a6;
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel__performWithoutDeferringTransitions_, v21);

    _Block_release(v21);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

uint64_t SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(_QWORD *a1, _BYTE *a2, char a3, Swift::Bool a4, void *a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  Swift::Bool v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  id v19;
  _BYTE v21[112];

  v11 = *v5;
  v12 = *MEMORY[0x1E0DEEDD8];
  v13 = *a1 != 0;
  swift_beginAccess();
  PresentationState.dismiss(willPresentAgain:hasNoModifier:)(v13, a4);
  swift_endAccess();
  if (a4)
    a2[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 1;
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)a1, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = *(_QWORD *)((v12 & v11) + 0x50);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)((v12 & v11) + 0x58);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)((v12 & v11) + 0x68);
  *(_QWORD *)(v15 + 48) = v14;
  outlined init with take of SheetPreference?((uint64_t)v21, v15 + 56);
  *(_QWORD *)(v15 + 168) = a2;
  *(_QWORD *)(v15 + 176) = a5;
  v16 = a3 & 1;
  *(_BYTE *)(v15 + 184) = v16;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = partial apply for closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:);
  *(_QWORD *)(v17 + 32) = v15;
  *(_BYTE *)(v17 + 40) = v16;
  v18 = a2;
  v19 = a5;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

void closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[74];
  id v34;
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[10];
  _OWORD v42[5];
  _BYTE v43[25];

  v14 = a1 + 16;
  swift_beginAccess();
  v15 = MEMORY[0x18D760234](v14);
  if (v15)
  {
    v16 = (void *)v15;
    outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if ((_QWORD)v36)
    {
      v42[4] = v40;
      *(_OWORD *)v43 = v41[0];
      *(_OWORD *)&v43[9] = *(_OWORD *)((char *)v41 + 9);
      v42[0] = v36;
      v42[1] = v37;
      v17 = (uint64_t)v16 + direct field offset for SheetBridge.presentationState;
      v42[2] = v38;
      v42[3] = v39;
      swift_beginAccess();
      outlined init with copy of PresentationState(v17, (uint64_t)&v36);
      outlined init with copy of PresentationState.Base((uint64_t)&v36, (uint64_t)v33);
      if (v35 >= 2u)
      {
        outlined destroy of PresentationState.Base((uint64_t)v33);
        outlined destroy of PresentationState((uint64_t)&v36);
        v18 = *(_QWORD *)&v42[0];
        v31 = a8;
        v32 = a7;
        v19 = direct field offset for UIHostingController.host;
        v30 = a6;
        v20 = *(_QWORD **)(a3 + direct field offset for UIHostingController.host);
        v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v22 = (_QWORD *)((char *)v20 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v20) + 0x60));
        swift_beginAccess();
        *v22 = v18;
        swift_retain_n();
        v23 = v20;
        swift_release();
        LOWORD(v36) = 1;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        swift_release_n();
        v24 = *(_QWORD **)(a3 + v19);
        v25 = *(_QWORD *)&v43[8];
        v26 = *(_QWORD *)&v43[16];
        v27 = (_QWORD *)((char *)v24 + *(_QWORD *)((*v21 & *v24) + 0x120));
        swift_beginAccess();
        v28 = *v27;
        *v27 = v25;
        v27[1] = v26;
        swift_retain();
        v29 = v24;
        swift_retain();
        outlined consume of EnvironmentValues?(v28);
        LOWORD(v36) = 2;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        *(_QWORD *)&v36 = v30;
        *((_QWORD *)&v36 + 1) = v32;
        *(_QWORD *)&v37 = v31;
        *((_QWORD *)&v37 + 1) = a9;
        type metadata accessor for SheetBridge();
      }

      outlined destroy of SheetPreference((uint64_t)v33);
      outlined destroy of PresentationState((uint64_t)&v36);
      outlined destroy of SheetPreference((uint64_t)v42);

    }
    else
    {

      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    }
  }
}

void closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(void *a1, uint64_t (*a2)(), uint64_t a3, char a4)
{
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t (*v25)();
  uint64_t v26;

  v8 = objc_msgSend(a1, sel_transitionCoordinator);
  if (!v8)
  {
LABEL_6:
    if ((a4 & 1) == 0)
      goto LABEL_12;
LABEL_7:
    v11 = objc_msgSend(a1, sel_presentingViewController);
    if (!v11)
      v11 = a1;
    v25 = a2;
    v26 = a3;
    v21 = MEMORY[0x1E0C809B0];
    v22 = 1107296256;
    v23 = thunk for @escaping @callee_guaranteed () -> ();
    v24 = &block_descriptor_19;
    v14 = _Block_copy(&v21);
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_dismissViewControllerAnimated_completion_, 1, v14);
    _Block_release(v14);
    goto LABEL_10;
  }
  v9 = v8;
  v10 = objc_msgSend(a1, sel_presentationController);
  if (!v10)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  v11 = v10;
  if ((objc_msgSend(v10, sel_dismissing) & 1) != 0)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 24) = a3;
    v25 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
    v26 = v12;
    v21 = MEMORY[0x1E0C809B0];
    v22 = 1107296256;
    v23 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v24 = &block_descriptor_25;
    v13 = _Block_copy(&v21);
    swift_retain();
    swift_release();
    objc_msgSend(v9, sel_animateAlongsideTransition_completion_, 0, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();
LABEL_10:

    return;
  }
  swift_unknownObjectRelease();

  if ((a4 & 1) != 0)
    goto LABEL_7;
LABEL_12:
  v15 = (void *)objc_opt_self();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:);
  *(_QWORD *)(v17 + 24) = v16;
  v25 = partial apply for thunk for @callee_guaranteed () -> ();
  v26 = v17;
  v21 = MEMORY[0x1E0C809B0];
  v22 = 1107296256;
  v23 = thunk for @escaping @callee_guaranteed () -> ();
  v24 = &block_descriptor_15;
  v18 = _Block_copy(&v21);
  swift_retain();
  v19 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel__performWithoutDeferringTransitions_, v18);
  _Block_release(v18);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  _QWORD v8[6];

  v6 = objc_msgSend(a1, sel_presentingViewController);
  if (!v6)
    v6 = a1;
  v8[4] = a2;
  v8[5] = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_28;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_dismissViewControllerAnimated_completion_, 0, v7);
  _Block_release(v7);

}

uint64_t closure #1 in SheetBridge.preferencesDidChange(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *a1;
  if (*a1)
    v4 = a1[1];
  else
    v4 = 0;
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*a1, a1[1]);
  v5 = (_QWORD *)(a2 + direct field offset for SheetBridge.interactiveDismissHandler);
  v6 = *(_QWORD *)(a2 + direct field offset for SheetBridge.interactiveDismissHandler);
  *v5 = v3;
  v5[1] = v4;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
}

void closure #2 in SheetBridge.preferencesDidChange(_:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14;
  id v15;
  _QWORD *v16;
  void *v17;
  _QWORD v18[6];

  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for willDismiss != -1)
    swift_once();
  objc_msgSend(v14, sel_postNotificationName_object_, static SheetBridgeNotifications.willDismiss, 0);

  v15 = objc_msgSend(a1, sel_presentingViewController);
  if (!v15)
    v15 = a1;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a3;
  v18[4] = partial apply for closure #1 in closure #2 in SheetBridge.preferencesDidChange(_:);
  v18[5] = v16;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed () -> ();
  v18[3] = &block_descriptor_55;
  v17 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, a2 & 1, v17);
  _Block_release(v17);

}

void closure #1 in closure #2 in SheetBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a1 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = (void *)MEMORY[0x18D760234](v7 + direct field offset for SheetBridge.host);

    if (v9)
    {
      v11 = type metadata accessor for _UIHostingView(0, a2, a4, v10);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v11);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
    else
    {
      __break(1u);
    }
  }
}

void SheetBridge.update(presentation:in:transaction:)(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char v18;

  v4 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v4);
  swift_release();
  v5 = direct field offset for UIHostingController.host;
  v6 = *(_QWORD **)&a2[direct field offset for UIHostingController.host];
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x120));
  swift_beginAccess();
  v11 = *v10;
  *v10 = v7;
  v10[1] = v8;
  swift_retain();
  v12 = v6;
  swift_retain();
  outlined consume of EnvironmentValues?(v11);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  if (*(_BYTE *)(*(_QWORD *)&a2[v5] + *(_QWORD *)((*v9 & **(_QWORD **)&a2[v5]) + 0x180)) == 2)
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.explicitPreferredColorScheme.getter();
    swift_release();
    swift_release();
    if (v18 != 2)
    {
      v13 = *(_QWORD **)&a2[v5];
      v14 = *(_QWORD *)((*v9 & *v13) + 0x180);
      v15 = *((unsigned __int8 *)v13 + v14);
      *((_BYTE *)v13 + v14) = v18;
      v16 = a2;
      v17 = v13;
      specialized _UIHostingView.didChangeColorScheme(from:)(v15);

    }
  }
}

uint64_t SheetBridge.contingentlyPresent(_:from:animated:)(_QWORD *a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[240];

  v4 = v3;
  v8 = v3 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v8, (uint64_t)v19);
  PresentationState.isDismissing.getter();
  LOBYTE(v8) = v9;
  outlined destroy of PresentationState((uint64_t)v19);
  if ((v8 & 1) == 0)
  {
    v15 = v4 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v15, (uint64_t)v19);
    PresentationState.Base.presentedVC.getter();
    v17 = v16;
    outlined destroy of PresentationState((uint64_t)v19);
    SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(a1, (uint64_t)a2, a3 & 1, v17);
  }
  v10 = v4 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v10, (uint64_t)v19);
  PresentationState.isDismissalPreemptable.getter();
  LOBYTE(v10) = v11;
  outlined destroy of PresentationState((uint64_t)v19);
  if ((v10 & 1) != 0 && objc_msgSend(a2, sel__willPreemptRunningPresentationTransition))
  {
    v12 = v4 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v12, (uint64_t)v19);
    PresentationState.Base.presentedVC.getter();
    v14 = v13;
    outlined destroy of PresentationState((uint64_t)v19);
    if (v14)
    {
      v14[direct field offset for PresentationHostingController.wasPreempted] = 1;

    }
    SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(a1, (uint64_t)a2, a3 & 1, 0);
  }
  swift_beginAccess();
  PresentationState.enqueueDelayedPresentation(_:animated:)((uint64_t)a1, a3 & 1);
  return swift_endAccess();
}

Swift::Void __swiftcall SheetBridge.sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:)(UISheetPresentationController a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  _BYTE v6[240];

  v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v3, (uint64_t)v6);
  PresentationState.Base.presentedVC.getter();
  v5 = v4;
  outlined destroy of PresentationState((uint64_t)v6);
  if (v5)
  {
    specialized PresentationHostingController.didChangeSelectedDetent(sheet:)(a1.super.super.isa);

  }
}

void specialized PresentationHostingController.didChangeSelectedDetent(sheet:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD v18[7];
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  v2 = v1;
  v4 = direct field offset for UIHostingController.host;
  v5 = *(id *)(v1 + direct field offset for UIHostingController.host);
  v6 = specialized _UIHostingView.beginDescendingAllowUIKitAnimations(depth:)(10);

  v7 = *(void **)(v2 + v4);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = v7;
  onNextMainRunLoop(do:)();

  swift_release();
  v10 = v2 + direct field offset for PresentationHostingController.lastPresentationOptions;
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v10, (uint64_t)v18, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  if (*(_QWORD *)&v18[0])
  {
    v26 = v18[6];
    v27[0] = v19[0];
    *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v19 + 9);
    v22 = v18[2];
    v23 = v18[3];
    v24 = v18[4];
    v25 = v18[5];
    v20 = v18[0];
    v21 = v18[1];
    v11 = objc_msgSend(a1, sel_selectedDetentIdentifier);
    if (!v11)
    {
LABEL_7:
      outlined destroy of PresentationOptionsPreference(&v20);
      return;
    }
    v12 = v11;
    v13 = v21;
    if ((_QWORD)v21)
    {
      v14 = v20;
      v15 = v11;
      swift_bridgeObjectRetain();
      outlined copy of Binding<NavigationSplitViewColumn>?(*((uint64_t *)&v14 + 1), v13);
      specialized Sequence.first(where:)(v14, v15, v18);
      swift_bridgeObjectRelease();
      v17 = *((_QWORD *)&v18[0] + 1);
      v16 = *(_QWORD *)&v18[0];
      if ((*((_QWORD *)&v18[0] + 1) & 0xF000000000000007) == 0xF000000000000007)
      {
        v16 = 2;
        v17 = 0xC000000000000000;
      }
      *(_QWORD *)&v18[0] = v16;
      *((_QWORD *)&v18[0] + 1) = v17;
      dispatch thunk of AnyLocation.set(_:transaction:)();

      outlined consume of Binding<NavigationSplitViewColumn>?(*((uint64_t *)&v14 + 1), v13);
      goto LABEL_7;
    }
    outlined destroy of PresentationOptionsPreference(&v20);

  }
  else
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v18, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
}

void @objc SheetBridge.sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SheetBridge.sheetPresentationControllerDidChangeSelectedDetentIdentifier(_:)((UISheetPresentationController)v4);

}

Swift::Void __swiftcall SheetBridge._sheetPresentationControllerDidChangeHosting(_:)(UISheetPresentationController a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _BYTE v14[240];

  v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v3, (uint64_t)v14);
  PresentationState.Base.presentedVC.getter();
  v5 = v4;
  outlined destroy of PresentationState((uint64_t)v14);
  if (v5)
  {
    if ((-[objc_class _isHosting](a1.super.super.isa, sel__isHosting) & 1) != 0)
    {
      v6 = objc_msgSend(v5, sel_view);
      if (!v6)
      {
        __break(1u);
        return;
      }
      v7 = v6;
      v8 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
      objc_msgSend(v7, sel_setBackgroundColor_, v8);

      v9 = *(_QWORD **)&v5[direct field offset for UIHostingController.host];
      v10 = (_QWORD *)((char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x108));
      swift_beginAccess();
      v11 = *v10;
      *v10 = 0;
      if (v11)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        v12 = v5;
        v13 = v9;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        return;
      }
    }

  }
}

void @objc SheetBridge._sheetPresentationControllerDidChangeHosting(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SheetBridge._sheetPresentationControllerDidChangeHosting(_:)((UISheetPresentationController)v4);

}

uint64_t @objc SheetBridge.adaptivePresentationStyle(for:traitCollection:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized SheetBridge.adaptivePresentationStyle(for:traitCollection:)(v7);

  return v9;
}

void @objc SheetBridge.presentationControllerDidAttemptToDismiss(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized SheetBridge.presentationControllerDidAttemptToDismiss(_:)();

}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didMoveTo:) in conformance SheetBridge<A, B>(uint64_t a1, uint64_t a2)
{
  return specialized SheetBridge.hostingView<A>(_:didMoveTo:)(a1, a2);
}

void protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance SheetBridge<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  specialized SheetBridge.hostingView<A>(_:didChangePreferences:)(a1, a2, a5[10], a5[11], a5[12], a5[13]);
}

Swift::Void __swiftcall SheetBridge.didBeginInteractiveDismissal(_:)(UIViewController *a1)
{
  uint64_t v1;
  uint64_t v3;
  UIViewController *v4;
  UIViewController *v5;
  _BYTE v6[240];

  v3 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v3, (uint64_t)v6);
  PresentationState.Base.presentedVC.getter();
  v5 = v4;
  outlined destroy of PresentationState((uint64_t)v6);
  if (v5)
  {

    if (v5 == a1 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      swift_beginAccess();
      PresentationState.presentationDidBeginInteractiveDismissal()();
      swift_endAccess();
    }
  }
}

uint64_t protocol witness for PresentationHostingControllerDelegate.didDismissViewController(_:wasPreempted:modifierRemoved:) in conformance SheetBridge<A, B>(uint64_t a1, uint64_t a2, char a3)
{
  return specialized SheetBridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(a2, a3);
}

uint64_t protocol witness for PresentationHostingControllerDelegate.isBackingV5Inspector.getter in conformance SheetBridge<A, B>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t protocol witness for PresentationHostingControllerDelegate.willTransitionToRegularSizeClass() in conformance SheetBridge<A, B>()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t one-time initialization function for willDismiss()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD000000000000016, 0x8000000187BDA3E0);
  static SheetBridgeNotifications.willDismiss = result;
  return result;
}

uint64_t specialized UIHostingController.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = *(_QWORD **)(v1 + direct field offset for UIHostingController.host);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x60));
  swift_beginAccess();
  *v4 = a1;
  v5 = v3;
  swift_retain();
  swift_release();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();

  return swift_release_n();
}

_QWORD *specialized closure #1 in PresentationHostingController.didChangeSelectedDetent(sheet:)(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0xB0);
  v3 = *(_DWORD *)((char *)result + v2);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)((char *)result + v2) = v5 & ~(v5 >> 31);
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      v7 = (_QWORD *)(a2 + 32);
      do
      {
        v8 = v7[3];
        v9 = v7[4];
        __swift_project_boxed_opaque_existential_1(v7, v8);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
        v7 += 5;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t specialized SheetBridge.host.setter()
{
  return swift_unknownObjectWeakAssign();
}

void specialized SheetBridge.hostingView<A>(_:didChangePreferences:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v11[7];
  unsigned __int8 v12;
  uint64_t v13;

  v13 = *a2;
  PreferenceList.subscript.getter();
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a6;
  v11[6] = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB5((_QWORD *(*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in SheetBridge.hostingView<A>(_:didChangePreferences:), (uint64_t)v11, v12);
  _UIHostingView.viewController.getter();
}

void sub_1871F8880(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = v4;
      *(_QWORD *)(v2 - 72) = v1;
      PreferenceList.subscript.getter();
      *(_QWORD *)(v5 + direct field offset for PresentationHostingController.lastColumnCount) = v6;
    }

  }
}

void partial apply for closure #1 in SheetBridge.hostingView<A>(_:didChangePreferences:)(char *a1)
{
  char v1;

  v1 = *a1;
  _UIHostingView.colorScheme.setter(&v1);
}

uint64_t specialized SheetBridge.hostingView<A>(_:didMoveTo:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    GraphHost.addPreference<A>(_:)();
    return GraphHost.addPreference<A>(_:)();
  }
  else
  {
    GraphHost.removePreference<A>(_:)();
    return GraphHost.removePreference<A>(_:)();
  }
}

uint64_t specialized SheetBridge.adaptivePresentationStyle(for:traitCollection:)(void *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _BYTE v12[240];

  v3 = (void *)MEMORY[0x18D760234](v1 + direct field offset for SheetBridge.host);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_traitCollection);

    v6 = objc_msgSend(v5, sel_userInterfaceIdiom);
    if (v6 == (id)6)
      return -1;
  }
  v7 = v1 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v7, (uint64_t)v12);
  PresentationState.Base.presentedVC.getter();
  v9 = v8;
  outlined destroy of PresentationState((uint64_t)v12);
  if (!v9)
    return -1;
  v10 = specialized PresentationHostingController.adaptivePresentationStyle(traitCollection:kind:)(a1, 2);

  return v10;
}

void specialized SheetBridge.presentationControllerDidAttemptToDismiss(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  id v4;
  char *v5;
  void (*v6)(void);
  _BYTE v7[240];

  v1 = v0 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v1, (uint64_t)v7);
  PresentationState.Base.presentedVC.getter();
  v3 = v2;
  outlined destroy of PresentationState((uint64_t)v7);
  if (v3)
  {
    v4 = *(id *)&v3[direct field offset for UIHostingController.host];
    v5 = (char *)specialized _UIHostingView.sheetBridge.getter();

    if (v5)
    {
      v6 = *(void (**)(void))&v5[direct field offset for SheetBridge.interactiveDismissHandler];
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v6, *(_QWORD *)&v5[direct field offset for SheetBridge.interactiveDismissHandler + 8]);

      if (v6)
      {
        v6();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
      }
    }

  }
}

uint64_t specialized SheetBridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _BYTE *v8;
  _OWORD v9[5];
  _OWORD v10[2];
  id v11;
  unsigned __int8 v12;
  _OWORD v13[5];
  _OWORD v14[2];
  id v15;
  unsigned __int8 v16;
  _BYTE v17[128];

  if ((result & 1) == 0)
  {
    if ((a2 & 1) != 0 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      swift_beginAccess();
      PresentationState.dismiss(willPresentAgain:hasNoModifier:)(0, 1);
      swift_endAccess();
    }
    v3 = v2 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v3, (uint64_t)v13);
    PresentationState.delayedPresentation.getter((uint64_t)v17);
    outlined destroy of PresentationState((uint64_t)v13);
    swift_beginAccess();
    PresentationState.presentationDidDisappear()();
    swift_endAccess();
    outlined init with copy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?((uint64_t)v17, (uint64_t)v9);
    if (*(_QWORD *)&v9[0])
    {
      v13[4] = v9[4];
      v14[0] = v10[0];
      *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)v10 + 9);
      v13[0] = v9[0];
      v13[1] = v9[1];
      v13[2] = v9[2];
      v13[3] = v9[3];
      v4 = (uint64_t)v11;
      v15 = v11;
      v5 = v12;
      v16 = v12;
      v6 = v11;
      v7 = SheetBridge.presenter.getter();
      if (v7)
        SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(v13, v7, v5, v4);

      outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)((uint64_t)v13);
      v8 = v17;
    }
    else
    {
      outlined destroy of IntelligenceElement?((uint64_t)v17, &lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?, (void (*)(uint64_t))type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
      v8 = v9;
    }
    return outlined destroy of IntelligenceElement?((uint64_t)v8, &lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?, (void (*)(uint64_t))type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
  }
  return result;
}

uint64_t outlined init with copy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)?, (void (*)(uint64_t))type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool))
  {
    type metadata accessor for PresentationHostingController<AnyView>?();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool));
  }
}

void type metadata accessor for PresentationHostingController<AnyView>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PresentationHostingController<AnyView>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>?);
  }
}

uint64_t outlined destroy of (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (presentation: SheetPreference, presentedVC: PresentationHostingController<AnyView>?, animated: Bool)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1871F8EF0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1871F8F1C()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 56))
  {
    swift_release();
    if (*(_QWORD *)(v0 + 64))
      swift_release();
    if (*(_QWORD *)(v0 + 112))
      __swift_destroy_boxed_opaque_existential_1(v0 + 88);
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of SheetPreference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)()
{
  uint64_t v0;

  closure #1 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(*(_QWORD *)(v0 + 48), v0 + 56, *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(unsigned __int8 *)(v0 + 184), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1871F9028()
{
  return objectdestroy_9Tm_2();
}

void partial apply for closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)()
{
  uint64_t v0;

  closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(*(void **)(v0 + 16), *(uint64_t (**)())(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1871F9040()
{
  return objectdestroy_9Tm_2();
}

uint64_t objectdestroy_9Tm_2()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)()
{
  uint64_t v0;

  closure #2 in closure #2 in SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1871F908C()
{
  return swift_deallocObject();
}

uint64_t sub_1871F909C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of SheetPreference(uint64_t a1)
{
  destroy for SheetPreference(a1);
  return a1;
}

uint64_t partial apply for closure #1 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_1871F9110()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)()
{
  uint64_t v0;

  closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 72), *(_DWORD *)(v0 + 76), *(void **)(v0 + 80));
}

uint64_t sub_1871F9184()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_presentViewController_animated_completion_, *(_QWORD *)(v0 + 24), 0, 0);
}

uint64_t sub_1871F91C8()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of SheetPreference(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SheetPreference(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_1871F927C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *partial apply for specialized closure #1 in PresentationHostingController.didChangeSelectedDetent(sheet:)()
{
  uint64_t v0;

  return specialized closure #1 in PresentationHostingController.didChangeSelectedDetent(sheet:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *outlined destroy of PresentationOptionsPreference(_QWORD *a1)
{
  destroy for PresentationOptionsPreference(a1);
  return a1;
}

unint64_t type metadata accessor for UIKitAnimationCooperating()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIKitAnimationCooperating;
  if (!lazy cache variable for type metadata for UIKitAnimationCooperating)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKitAnimationCooperating);
  }
  return result;
}

uint64_t partial apply for closure #1 in SheetBridge.preferencesDidChange(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in SheetBridge.preferencesDidChange(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1871F9340()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in SheetBridge.preferencesDidChange(_:)()
{
  uint64_t v0;

  closure #2 in SheetBridge.preferencesDidChange(_:)(*(void **)(v0 + 48), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1871F9384()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in SheetBridge.preferencesDidChange(_:)()
{
  uint64_t *v0;

  closure #1 in closure #2 in SheetBridge.preferencesDidChange(_:)(v0[6], v0[2], v0[3], v0[4]);
}

uint64_t LabeledContent<>.init(content:label:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = *(int *)(type metadata accessor for LabeledContent(0, a4, a5, a3) + 40);
  v10 = a1();
  result = a2(v10);
  *(_BYTE *)(a6 + v9) = 2;
  return result;
}

uint64_t type metadata accessor for LabeledContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LabeledContent);
}

void LabeledContent<>.body.getter()
{
  lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_1871F94AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 296) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v11 - 280) = (char *)&a9 - v14;
  v15 = *(_QWORD *)(v10 + 24);
  v16 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
  *(_QWORD *)(v11 - 320) = v16;
  *(_QWORD *)(v11 - 120) = &type metadata for LabeledContentStyleConfiguration.Content;
  *(_QWORD *)(v11 - 112) = v15;
  *(_QWORD *)(v11 - 104) = v16;
  *(_QWORD *)(v11 - 96) = v9;
  type metadata accessor for StaticSourceWriter();
}

void sub_1871F9528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 304) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v15 - 328) = (char *)&a9 - v20;
  *(_BYTE *)(v15 - 120) = *(_BYTE *)(v10 + *(int *)(v11 + 40));
  *(_QWORD *)(v15 - 192) = v13;
  *(_QWORD *)(v15 - 184) = v14;
  *(_QWORD *)(v15 - 176) = v12;
  *(_QWORD *)(v15 - 168) = v9;
  *(_QWORD *)(v15 - 160) = v10;
  lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter);
}

void sub_1871F95FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 256) = v5;
  *(_QWORD *)(v7 - 248) = v6;
  *(_QWORD *)(v7 - 240) = v3;
  *(_QWORD *)(v7 - 232) = v0;
  *(_QWORD *)(v7 - 224) = v4;
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7 - 136);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)partial apply for closure #2 in LabeledContent<>.body.getter);
}

uint64_t sub_1871F9674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 296) + 8))(v0, v2);
  *(_QWORD *)(v7 - 152) = v5;
  *(_QWORD *)(v7 - 144) = v6;
  v8 = MEMORY[0x18D75FFDC](v1, v3, v7 - 152);
  v9 = *(_QWORD *)(v7 - 328);
  static ViewBuilder.buildExpression<A>(_:)(v4, v3, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 304) + 8);
  v10(v4, v3);
  static ViewBuilder.buildBlock<A>(_:)(v9, v3, *(_QWORD *)(v7 - 288));
  return v10(v9, v3);
}

unint64_t lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledContentStyleConfiguration.Label, &type metadata for LabeledContentStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledContentStyleConfiguration.Label, &type metadata for LabeledContentStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledContentStyleConfiguration.Content, &type metadata for LabeledContentStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledContentStyleConfiguration.Content, &type metadata for LabeledContentStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent;
  if (!lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabeledContent, &type metadata for ResolvedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent;
  if (!lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabeledContent, &type metadata for ResolvedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent);
  }
  return result;
}

uint64_t closure #2 in LabeledContent<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LabeledContent(0, v12, v13, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 36), a3, a4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t partial apply for closure #2 in LabeledContent<>.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in LabeledContent<>.body.getter);
}

void protocol witness for View.body.getter in conformance <> LabeledContent<A, B>()
{
  LabeledContent<>.body.getter();
}

uint64_t LabeledContent<>.init(_:content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v11 = type metadata accessor for LabeledContent(0, MEMORY[0x1E0CE6CF8], a4, a1);
  v12 = *(int *)(v11 + 40);
  closure #1 in LabeledContent<>.init(_:content:)(a2, a3, a4, a5, a6 + *(int *)(v11 + 36));
  *(_QWORD *)a6 = closure #2 in LabeledContent<>.init(_:content:)();
  *(_QWORD *)(a6 + 8) = v13;
  *(_BYTE *)(a6 + 16) = v14 & 1;
  *(_QWORD *)(a6 + 24) = v15;
  *(_BYTE *)(a6 + v12) = 1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LabeledContent<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t closure #2 in LabeledContent<>.init(_:content:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t LabeledContent<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v14 = type metadata accessor for LabeledContent(0, MEMORY[0x1E0CE6CF8], a4, a4);
  v15 = *(int *)(v14 + 40);
  closure #1 in LabeledContent<>.init<A>(_:content:)(a2, a3, a4, a6, a7 + *(int *)(v14 + 36));
  *(_QWORD *)a7 = closure #2 in LabeledContent<>.init<A>(_:content:)(a1);
  *(_QWORD *)(a7 + 8) = v16;
  *(_BYTE *)(a7 + 16) = v17 & 1;
  *(_QWORD *)(a7 + 24) = v18;
  *(_BYTE *)(a7 + v15) = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t closure #1 in LabeledContent<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t closure #2 in LabeledContent<>.init<A>(_:content:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return Text.init<A>(_:)();
}

uint64_t LabeledContent<>.init<A>(_:value:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v18);
  v6 = v18[0];
  v7 = v18[1];
  v8 = v19;
  v17 = v20;
  v9 = Text.init(_:tableName:bundle:comment:)();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v13 & 1;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v6;
  *(_QWORD *)(a3 + 40) = v7;
  *(_BYTE *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 56) = v17;
  *(_BYTE *)(a3 + 64) = 1;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

double LabeledContent<>.init<A, B>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  double result;
  __int128 v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  char v37;

  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, double))(v14 + 16))(v17, a1, v15);
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v30 = a2;
  LabeledContent<>.init<A>(_:content:)((uint64_t)v17, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A>(_:value:), (uint64_t)v25, MEMORY[0x1E0CE6CF8], a3, MEMORY[0x1E0CE6C58], (uint64_t)&v31);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  v18 = v32;
  v19 = v33;
  v20 = v35;
  v21 = v36;
  v22 = v37;
  result = *(double *)&v31;
  v24 = v34;
  *(_OWORD *)a7 = v31;
  *(_BYTE *)(a7 + 16) = v18;
  *(_QWORD *)(a7 + 24) = v19;
  *(_OWORD *)(a7 + 32) = v24;
  *(_BYTE *)(a7 + 48) = v20;
  *(_QWORD *)(a7 + 56) = v21;
  *(_BYTE *)(a7 + 64) = v22;
  return result;
}

uint64_t LabeledContent<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  closure #1 in LabeledContent<>.init<A>(_:value:format:)(a1, a2, a3, (uint64_t)v21);
  v8 = v21[0];
  v20 = v21[1];
  v19 = v22;
  v18 = v23;
  v9 = Text.init(_:tableName:bundle:comment:)();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v13 & 1;
  *(_QWORD *)(a4 + 24) = v15;
  *(_QWORD *)(a4 + 32) = v8;
  *(_QWORD *)(a4 + 40) = v20;
  *(_BYTE *)(a4 + 48) = v19;
  *(_QWORD *)(a4 + 56) = v18;
  *(_BYTE *)(a4 + 64) = 1;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v20 - v15, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  result = Text.init<A>(_:format:)();
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v17;
  *(_BYTE *)(a4 + 16) = v18 & 1;
  *(_QWORD *)(a4 + 24) = v19;
  return result;
}

double LabeledContent<>.init<A, B>(_:value:format:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  double result;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  char v46;

  v31 = a8;
  v17 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v21, v18);
  v33 = a4;
  v34 = a5;
  v35 = a6;
  v36 = a7;
  v37 = v31;
  v38 = a2;
  v39 = a3;
  LabeledContent<>.init<A>(_:content:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:format:), (uint64_t)v32, MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE6C58], (uint64_t)&v40);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  v23 = v41;
  v24 = v42;
  v25 = v44;
  v26 = v45;
  v27 = v46;
  result = *(double *)&v40;
  v29 = v43;
  *(_OWORD *)a9 = v40;
  *(_BYTE *)(a9 + 16) = v23;
  *(_QWORD *)(a9 + 24) = v24;
  *(_OWORD *)(a9 + 32) = v29;
  *(_BYTE *)(a9 + 48) = v25;
  *(_QWORD *)(a9 + 56) = v26;
  *(_BYTE *)(a9 + 64) = v27;
  return result;
}

uint64_t closure #1 in LabeledContent<>.init<A, B>(_:value:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v20 - v15, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  result = Text.init<A>(_:format:)();
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v17;
  *(_BYTE *)(a4 + 16) = v18 & 1;
  *(_QWORD *)(a4 + 24) = v19;
  return result;
}

uint64_t partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:format:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in LabeledContent<>.init<A, B>(_:value:format:)(v1[7], v1[8], v1[3], a1);
}

void LabeledContent<>.init(_:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t associated type witness table accessor for View.Body : View in <> LabeledContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for LabeledContent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LabeledContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFD)
    v8 = 253;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_26;
  v13 = v11 + (v10 & ~v9) + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_26:
      if (v5 == v8)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v20 = (v10 + a1) & ~v9;
      if (v7 == v8)
        return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
      v21 = *(unsigned __int8 *)(v20 + v11);
      v22 = v21 >= 2;
      v23 = v21 - 2;
      if (!v22)
        v23 = -1;
      if (v23 + 1 >= 2)
        return v23;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_26;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v11 + (v10 & ~(_DWORD)v9) == -1)
    return v8 + v18 + 1;
  if (v13 <= 3)
    v19 = v11 + (v10 & ~(_DWORD)v9) + 1;
  else
    v19 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1871FA67C + 4 * byte_187C16A38[v19 - 1]))();
}

void storeEnumTagSinglePayload for LabeledContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD)
    v7 = 253;
  v8 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_1871FA92C()
{
  lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_1871FA968()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1871FA9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[12];

  v1 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

uint64_t EnvironmentValues.mapKitTint.getter()
{
  return EnvironmentValues.tint.getter();
}

uint64_t (*EnvironmentValues.mapKitTint.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = EnvironmentValues.tint.getter();
  return EnvironmentValues.mapKitTint.modify;
}

uint64_t EnvironmentValues.mapKitTint.modify(uint64_t *a1, char a2)
{
  return EnvironmentValues.mapKitTint.modify(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3C48]);
}

uint64_t (*EnvironmentValues.mapKitTintColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = EnvironmentValues.tintColor.getter();
  return EnvironmentValues.mapKitTintColor.modify;
}

uint64_t EnvironmentValues.mapKitTintColor.modify(uint64_t *a1, char a2)
{
  return EnvironmentValues.mapKitTint.modify(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3CC0]);
}

uint64_t EnvironmentValues._tintColor.getter()
{
  return EnvironmentValues.tintColor.getter();
}

uint64_t (*EnvironmentValues._tintColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = EnvironmentValues.tintColor.getter();
  return EnvironmentValues.mapKitTintColor.modify;
}

uint64_t EnvironmentValues.mapKitTint.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if ((a2 & 1) == 0)
    return a3(*a1);
  v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t sub_1871FABB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_getTm_1(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE3C40], a3);
}

uint64_t sub_1871FABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3C48]);
}

uint64_t sub_1871FABC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_getTm_1(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE3CB8], a3);
}

uint64_t sub_1871FABD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3CC0]);
}

uint64_t sub_1871FABE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_getTm_1(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE3CB8], a3);
}

uint64_t keypath_getTm_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = a3(a1, a2);
  *a4 = result;
  return result;
}

uint64_t sub_1871FAC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3CC0]);
}

uint64_t keypath_setTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_retain();
  return a5(v6);
}

uint64_t outlined init with copy of UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UpdateViewDestinationRequest(a2, a1);
  return a2;
}

uint64_t outlined destroy of UpdateViewDestinationRequest(uint64_t a1)
{
  destroy for UpdateViewDestinationRequest(a1);
  return a1;
}

uint64_t outlined init with take of NavigationRequest?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for NavigationRequest?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of NavigationRequest?(uint64_t a1)
{
  outlined consume of NavigationRequest?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_OWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  return a1;
}

uint64_t outlined consume of NavigationRequest?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a14 >> 1 != 0xFFFFFFFF)
  {
    outlined consume of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    return swift_release();
  }
  return result;
}

uint64_t static Color.transferRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  type metadata accessor for UTType?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v24 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v24 - v17;
  UTType.init(_identifier:allowUndeclared:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of UTType?((uint64_t)v5);
    static UTType.item.getter();
    lazy protocol witness table accessor for type Color and conformance Color();
    return DataRepresentation.init(exportedContentType:exporting:)();
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v20(v18, v5, v6);
    v24[1] = a1;
    v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v21(v14, v18, v6);
    v21(v10, v18, v6);
    v22 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v24[0] = swift_allocObject();
    v20((char *)(v24[0] + v22), v10, v6);
    v21(v10, v18, v6);
    v23 = swift_allocObject();
    v20((char *)(v23 + v22), v10, v6);
    lazy protocol witness table accessor for type Color and conformance Color();
    DataRepresentation.init(contentType:exporting:importing:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
}

void type metadata accessor for UTType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UTType?)
  {
    type metadata accessor for UTType();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UTType?);
  }
}

uint64_t closure #1 in static Color.transferRepresentation.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *(_QWORD *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t closure #1 in static Color.transferRepresentation.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[4];
  type metadata accessor for UIColor();
  v2 = swift_retain();
  v3 = UIColor.init(_:)(v2);
  v0[6] = v3;
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = v5;
  *v5 = v0;
  v5[1] = closure #1 in static Color.transferRepresentation.getter;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in static Color.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t closure #2 in static Color.transferRepresentation.getter()
{
  uint64_t v0;
  void *v1;
  Class isa;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t *v7;
  id v8;
  id v9;

  v1 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = UTType.identifier.getter();
  v4 = (void *)MEMORY[0x18D75CC88](v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = 0;
  v5 = objc_msgSend(v1, sel_objectWithItemProviderData_typeIdentifier_error_, isa, v4, v0 + 16);

  v6 = *(void **)(v0 + 16);
  if (v5)
  {
    v7 = *(uint64_t **)(v0 + 24);
    *(_QWORD *)(v0 + 16) = v5;
    type metadata accessor for UIColor();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
    v8 = v6;
    *v7 = Color.init<A>(provider:)();
  }
  else
  {
    v9 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static Color.errorRepresentation.getter()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for TransferableError();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
  swift_allocError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v2, *MEMORY[0x1E0CA8738], v1);
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Color, MEMORY[0x1E0CE7170]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

uint64_t sub_1871FB520()
{
  return objectdestroyTm_8((uint64_t (*)(_QWORD))MEMORY[0x1E0DF0340]);
}

uint64_t partial apply for closure #1 in static Color.transferRepresentation.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UTType() - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in static Color.transferRepresentation.getter;
  v7 = *a1;
  v6[4] = v5;
  v6[5] = v7;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in static Color.transferRepresentation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1871FB60C()
{
  return objectdestroyTm_8((uint64_t (*)(_QWORD))MEMORY[0x1E0DF0340]);
}

uint64_t partial apply for closure #2 in static Color.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UTType() - 8) + 80);
  v9 = v3 + ((v8 + 16) & ~v8);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  v10[5] = a3;
  v10[6] = v9;
  v10[3] = a1;
  v10[4] = a2;
  return swift_task_switch();
}

uint64_t associated type witness table accessor for Transferable.Representation : TransferRepresentation in Color()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1871FB6BC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DataRepresentation<Color> and conformance DataRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for DataRepresentation<Color>, MEMORY[0x1E0CA8780]);
}

void type metadata accessor for DataRepresentation<Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DataRepresentation<Color>)
  {
    lazy protocol witness table accessor for type Color and conformance Color();
    v0 = type metadata accessor for DataRepresentation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataRepresentation<Color>);
  }
}

void closure #1 in UIColor.loadData(for:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD aBlock[6];

  type metadata accessor for CheckedContinuation<Data, Error>();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v4, v8);
  v9 = UTType.identifier.getter();
  v10 = (void *)MEMORY[0x18D75CC88](v9);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v12 + v11, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = partial apply for closure #1 in closure #1 in UIColor.loadData(for:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Data?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_16;
  v13 = _Block_copy(aBlock);
  swift_release();
  v14 = objc_msgSend(a2, sel_loadDataWithTypeIdentifier_forItemProviderCompletionHandler_, v10, v13);
  _Block_release(v13);

}

void partial apply for closure #1 in UIColor.loadData(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in UIColor.loadData(for:)(a1, *(void **)(v1 + 16));
}

void type metadata accessor for CheckedContinuation<Data, Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<Data, Error>)
  {
    type metadata accessor for Error();
    v0 = type metadata accessor for CheckedContinuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<Data, Error>);
  }
}

uint64_t closure #1 in closure #1 in UIColor.loadData(for:)(uint64_t a1, unint64_t a2, id a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (a2 >> 60 == 15)
  {
    if (!a3)
    {
      v5 = type metadata accessor for TransferableError();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
      swift_allocError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v6, *MEMORY[0x1E0CA8738], v5);
    }
    v7 = a3;
    type metadata accessor for CheckedContinuation<Data, Error>();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    outlined copy of Data._Representation(a1, a2);
    type metadata accessor for CheckedContinuation<Data, Error>();
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1871FB9F4()
{
  return objectdestroyTm_8((uint64_t (*)(_QWORD))type metadata accessor for CheckedContinuation<Data, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in UIColor.loadData(for:)(uint64_t a1, unint64_t a2, void *a3)
{
  type metadata accessor for CheckedContinuation<Data, Error>();
  return closure #1 in closure #1 in UIColor.loadData(for:)(a1, a2, a3);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  outlined consume of Data?((uint64_t)v4, v8);
  return swift_release();
}

_QWORD *specialized _UIHostingView.init(rootView:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  void (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  Class v117;
  id v118;
  uint64_t v119;
  void *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  void *v139;
  uint64_t inited;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t i;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t ObjectType;
  objc_super v163;
  _BYTE v164[16];
  __int128 v165;
  uint64_t v166;
  ValueMetadata *v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v3 = v0;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v0 + v2) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x90)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x98)) = 0;
  v4 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xA0);
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xA8)) = 0;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xB0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xB8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xC0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xC8)) = 1;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xD0)) = 0;
  v5 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xD8);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  v6 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xE0);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xE8)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xF0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xF8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x100)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x108)) = -1;
  *(_OWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x138)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x148)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x150)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x158)) = 1;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x160)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x168)) = 0;
  v7 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x170);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x178)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x180)) = 2;
  v8 = *(_QWORD *)((*v1 & *v3) + 0x188);
  v9 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<EmptyView, Alert.Presentation>());
  *(_QWORD *)((char *)v3 + v8) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<EmptyView, Alert.Presentation>);
  v10 = *(_QWORD *)((*v1 & *v3) + 0x190);
  v11 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v3 + v10) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x198)) = 1;
  v12 = *(_QWORD *)((*v1 & *v3) + 0x1A0);
  type metadata accessor for FocusBridge();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  swift_unknownObjectWeakInit();
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = v15;
  EnvironmentValues.init()();
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_QWORD *)(v13 + 136) = 1;
  *(_DWORD *)(v13 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v13 + 160) = 0;
  *(_QWORD *)(v13 + 168) = 0;
  *(_WORD *)(v13 + 176) = 1;
  *(_QWORD *)((char *)v3 + v12) = v13;
  v16 = *(_QWORD *)((*v1 & *v3) + 0x1A8);
  v17 = MEMORY[0x1E0CE7C38];
  v18 = MEMORY[0x1E0CE7C28];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for DragAndDropBridge<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v3 + v16) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x1B0)) = 0;
  v20 = *(_QWORD *)((*v1 & *v3) + 0x1B8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TooltipBridge<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v3 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  v22 = *(_QWORD *)((*v1 & *v3) + 0x1C0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EditMenuBridge<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v3 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x1D0)) = 0;
  v24 = *(_QWORD *)((*v1 & *v3) + 0x1D8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(_QWORD *)(v25 + 24) = v14;
  *(_QWORD *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v3 + v24) = v25;
  swift_weakInit();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x1E8)) = 0;
  v26 = *(_QWORD *)((*v1 & *v3) + 0x1F0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v3 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  v28 = *(_QWORD *)((*v1 & *v3) + 0x1F8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PencilEventsBridge<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v3 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x200)) = 0;
  v30 = *(_QWORD *)((*v1 & *v3) + 0x208);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v14);
  *(_QWORD *)((char *)v3 + v30) = v31;
  v32 = *(_QWORD *)((*v1 & *v3) + 0x210);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContextMenuBridge<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v3 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x218)) = 0;
  v34 = *(_QWORD *)((*v1 & *v3) + 0x220);
  *(_QWORD *)((char *)v3 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x228)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x230)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x238)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x248)) = 0;
  v35 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x250);
  *(_QWORD *)v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  v36 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x258));
  v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v14);
  *v36 = 0;
  v36[1] = v37;
  v36[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  v38 = swift_unknownObjectWeakInit();
  v39 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x278)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x280)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x288)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x290)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x298)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x2A0)) = 0;
  v40 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v165, v40);
  type metadata accessor for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v41 = swift_retain();
  v42 = specialized FocusViewGraph.init(graph:)(v41);
  v44 = v43;
  v46 = v45;
  LODWORD(v24) = v47;
  swift_release();
  *(_QWORD *)&v165 = v42;
  *((_QWORD *)&v165 + 1) = v44;
  v166 = v46;
  LOWORD(v167) = v24 & 0x101;
  BYTE2(v167) = BYTE2(v24) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v165 = 0;
  WORD4(v165) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v165 = 0uLL;
  v166 = 0;
  LOBYTE(v167) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v14);
  v167 = &type metadata for HoverEventDispatcher;
  v168 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v165 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilDoubleTapEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilSqueezeEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v14);
  v167 = &type metadata for KeyEventDispatcher;
  v168 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v165 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, v17, v18, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v163.receiver = v3;
  v163.super_class = v50;
  v51 = objc_msgSendSuper2(&v163, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>();
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = qword_1ECE02220;
    v57 = qword_1ECE02228;
    v58 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v59 = swift_retain();
      outlined copy of RepresentableContextValues?(v59, v55, v56, v57, v58);
      v60 = ViewGraph.preferenceBridge.getter();
      if (!v60 || (v61 = v60, swift_release(), v54 != v61))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v62 = swift_release();
      if ((v58 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v62 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, v58 & 1);
      if ((v58 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v62, v63);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
LABEL_10:
        v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v64 = (_QWORD *)((char *)v53 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v53) + 0x110));
        v65 = *v64;
        *(_OWORD *)v64 = v165;
        outlined consume of EnvironmentValues?(v65);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v165 = v56;
    *((_QWORD *)&v165 + 1) = v57;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
    goto LABEL_10;
  }
LABEL_11:
  v66 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v67 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v1 & *v66) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v68 = (char **)(v67 + 24);
  swift_beginAccess();
  v69 = *(char **)(v67 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v67 + 24) = v69;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    *v68 = v69;
  }
  v72 = *((_QWORD *)v69 + 2);
  v71 = *((_QWORD *)v69 + 3);
  if (v72 >= v71 >> 1)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v69);
    *v68 = v69;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v74 = v73;
  v75 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v69 + 2) = v72 + 1;
  v76 = &v69[24 * v72];
  *((_QWORD *)v76 + 4) = v74;
  *((_QWORD *)v76 + 5) = v75;
  *((_DWORD *)v76 + 12) = -1;
  swift_release();
  swift_release();
  v77 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v78 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x210);
  swift_unknownObjectWeakAssign();
  v79 = *(void **)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x188));
  swift_unknownObjectWeakAssign();
  v80 = v79;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v81 = *(void **)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x190));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    v84 = v83;
    swift_unknownObjectWeakAssign();

  }
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    v86 = v85;
    v87 = *(void (**)(uint64_t))((*v77 & *v85) + 0x1D0);
    v88 = swift_retain();
    v87(v88);

    swift_release();
  }
  v89 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x1A0));
  v90 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v89 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v89 + 40) = v90;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v91 = FocusBridge.host.getter();
  if (v91)
  {
    v93 = (void *)v91;
    v94 = v92;
    v95 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v94 + 8) + 16))(v95);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v96 = *(void **)((char *)v66 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x1A8));
  v97 = swift_unknownObjectWeakAssign();
  v98 = MEMORY[0x18D760234](v97);
  if (!v98)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v99 = (void *)v98;
  v100 = swift_getObjectType();
  v101 = v96;
  swift_retain();

  if (((*(uint64_t (**)(void))(v100 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v102 = *(void **)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v103 = v102;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v104 = *(void **)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v107 = v106;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v108 = *(void **)((char *)v66 + *(_QWORD *)((*v77 & *v66) + 0x1F0));
  v109 = swift_unknownObjectWeakAssign();
  v110 = MEMORY[0x18D760234](v109);
  if (!v110)
    goto LABEL_48;
  v111 = (void *)v110;
  v112 = v108;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v113 = objc_msgSend(v66, sel_traitCollection);
  v114 = objc_msgSend(v113, sel_userInterfaceIdiom);

  if (v114 == (id)1
    || (v115 = objc_msgSend(v66, sel_traitCollection),
        v116 = objc_msgSend(v115, sel_userInterfaceIdiom),
        v115,
        v116 == (id)6))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PointerBridge<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v118 = objc_msgSend(objc_allocWithZone(v117), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v119 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x200);
    v120 = *(void **)((char *)v66 + v119);
    *(_QWORD *)((char *)v66 + v119) = v118;

  }
  v121 = *(char **)((char *)v66 + v78);
  v122 = MEMORY[0x18D760234](&v121[direct field offset for ContextMenuBridge.host]);
  if (!v122)
LABEL_49:
    __break(1u);
  v123 = (void *)v122;
  v124 = swift_getObjectType();
  v125 = v121;
  swift_retain();

  if (((*(uint64_t (**)(void))(v124 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v126 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v127 = *(char **)((char *)v66 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v52;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v131 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v126 & *v66) + 0x78));
  v132 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v131 + 24) = v132;
  swift_unknownObjectWeakAssign();
  v133 = *(_QWORD *)((*v126 & *v66) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v131 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v134 = (void *)objc_opt_self();
  v135 = objc_msgSend(v134, sel_defaultCenter);
  v136 = v66;
  v137 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v136, sel_willBeginSnapshotSession, v137, 0);

  v138 = v136;
  v139 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_didEndSnapshotSession, v139, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v141 = (void *)*MEMORY[0x1E0C99720];
  v142 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v142;
  v143 = (void *)*MEMORY[0x1E0DC5320];
  v144 = v141;
  v145 = v142;
  v146 = v143;
  v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v147[2] = 3;
  v147[6] = v146;
  v148 = v147[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v148, 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[5], 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[6], 0);
  swift_bridgeObjectRelease_n();
  v149 = *(_QWORD *)((char *)v66 + v133);
  v150 = *(_QWORD *)(v149 + 48);
  if (v150)
  {
    v151 = v138;
    swift_retain();
    objc_msgSend(v151, sel_addGestureRecognizer_, v150);
  }
  else
  {
    v152 = v138;
    swift_retain();
  }
  objc_msgSend(v138, sel_addGestureRecognizer_, *(_QWORD *)(v149 + 56), ObjectType, 0);
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v153 = objc_msgSend(v134, sel_defaultCenter);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v154 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v155 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v155)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v155; ++i)
    {
      v157 = *(_QWORD *)(v154 + 8 * i + 32);
      objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityBooleanDidChange_, v157, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v158 = one-time initialization token for didUpdateListLayout;
  v159 = v138;
  if (v158 != -1)
    swift_once();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v159, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v160 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v160, (uint64_t)v164);
  v164[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v164, (uint64_t)v159);
  swift_endAccess();

  static Update.end()();
  return v159;
}

void *specialized _UIHostingView.sheetBridge.getter(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), void (*a3)(void *))
{
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t ObjectType;
  uint64_t v11;
  id v12;

  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x198);
  v6 = *(void **)((char *)v3 + v5);
  v7 = v6;
  if (v6 == (void *)1)
  {
    ObjectType = swift_getObjectType();
    v7 = (void *)a1(ObjectType);
    v11 = *(_QWORD *)((char *)v3 + v5);
    *(_QWORD *)((char *)v3 + v5) = v7;
    v12 = v7;
    a2(v11);
  }
  a3(v6);
  return v7;
}

void *specialized _UIHostingView.sheetBridge.getter()
{
  return specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
}

{
  return specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
}

_QWORD *_IntelligenceSupport.SummarySymbolHost.__allocating_init(rootView:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = objc_allocWithZone(v1);
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v6 = specialized _UIHostingView.init(rootView:)(*(_BYTE *)a1, v4, v5);

  v7 = (_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x108));
  swift_beginAccess();
  v8 = *v7;
  *v7 = 0;
  if (v8)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    v9 = v6;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  return v6;
}

uint64_t @objc _IntelligenceSupport.SummarySymbolHost.isOn.getter(_QWORD *a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60);
  swift_beginAccess();
  return *v1;
}

uint64_t _IntelligenceSupport.SummarySymbolHost.isOn.getter()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60);
  swift_beginAccess();
  return *v1;
}

void @objc _IntelligenceSupport.SummarySymbolHost.isOn.setter(_QWORD *a1, uint64_t a2, char a3)
{
  char *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;

  v5 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60);
  swift_beginAccess();
  v6 = (void *)*((_QWORD *)v5 + 1);
  v7 = (void *)*((_QWORD *)v5 + 2);
  *v5 = a3;
  v8 = a1;
  v9 = v6;
  v10 = v7;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

}

void _IntelligenceSupport.SummarySymbolHost.isOn.setter(char a1)
{
  _QWORD *v1;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  v4 = (void *)*((_QWORD *)v3 + 1);
  v5 = (void *)*((_QWORD *)v3 + 2);
  *v3 = a1;
  v6 = v4;
  v7 = v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

}

void key path setter for _IntelligenceSupport.SummarySymbolHost.isOn : _IntelligenceSupport.SummarySymbolHost(char *a1, _QWORD *a2)
{
  char v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v2 = *a1;
  v3 = *a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*a2) + 0x60);
  swift_beginAccess();
  v4 = *(void **)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  *(_BYTE *)v3 = v2;
  v6 = v4;
  v7 = v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

}

void (*_IntelligenceSupport.SummarySymbolHost.isOn.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  v3[4] = v4;
  v5 = (char *)v1 + v4;
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return _IntelligenceSupport.SummarySymbolHost.isOn.modify;
}

void _IntelligenceSupport.SummarySymbolHost.isOn.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24) + *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(void **)(v2 + 8);
  v4 = *(void **)(v2 + 16);
  *(_BYTE *)v2 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v5 = v3;
  v6 = v4;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  free(v1);
}

id @objc _IntelligenceSupport.SummarySymbolHost.font.getter(uint64_t a1, uint64_t a2)
{
  return @objc _IntelligenceSupport.SummarySymbolHost.font.getter(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE4F18]);
}

uint64_t _IntelligenceSupport.SummarySymbolHost.font.getter()
{
  return _IntelligenceSupport.SummarySymbolHost.font.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0CE4F18]);
}

void @objc _IntelligenceSupport.SummarySymbolHost.font.setter(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v5 = a3;
  v4 = a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v5, MEMORY[0x1E0CE4F20]);

}

void _IntelligenceSupport.SummarySymbolHost.font.setter(void *a1)
{
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(a1, MEMORY[0x1E0CE4F20]);

}

void (*_IntelligenceSupport.SummarySymbolHost.font.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  v3[3] = _IntelligenceSupport.AnimatingSummarySymbol.font.getter();
  return _IntelligenceSupport.SummarySymbolHost.font.modify;
}

void _IntelligenceSupport.SummarySymbolHost.font.modify(uint64_t a1, char a2)
{
  _IntelligenceSupport.SummarySymbolHost.font.modify(a1, a2, MEMORY[0x1E0CE4F20]);
}

id @objc _IntelligenceSupport.SummarySymbolHost.foregroundColor.getter(uint64_t a1, uint64_t a2)
{
  return @objc _IntelligenceSupport.SummarySymbolHost.font.getter(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE4F30]);
}

id @objc _IntelligenceSupport.SummarySymbolHost.font.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = swift_beginAccess();
  return (id)a3(v4);
}

uint64_t _IntelligenceSupport.SummarySymbolHost.foregroundColor.getter()
{
  return _IntelligenceSupport.SummarySymbolHost.font.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0CE4F30]);
}

uint64_t _IntelligenceSupport.SummarySymbolHost.font.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  v2 = swift_beginAccess();
  return a1(v2);
}

void @objc _IntelligenceSupport.SummarySymbolHost.foregroundColor.setter(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v5 = a3;
  v4 = a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v5, MEMORY[0x1E0CE4F38]);

}

void _IntelligenceSupport.SummarySymbolHost.foregroundColor.setter(void *a1)
{
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(a1, MEMORY[0x1E0CE4F38]);

}

uint64_t key path getter for _IntelligenceSupport.SummarySymbolHost.font : _IntelligenceSupport.SummarySymbolHost@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = swift_beginAccess();
  result = a1(v4);
  *a2 = result;
  return result;
}

void (*_IntelligenceSupport.SummarySymbolHost.foregroundColor.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  v3[3] = _IntelligenceSupport.AnimatingSummarySymbol.color.getter();
  return _IntelligenceSupport.SummarySymbolHost.foregroundColor.modify;
}

void _IntelligenceSupport.SummarySymbolHost.foregroundColor.modify(uint64_t a1, char a2)
{
  _IntelligenceSupport.SummarySymbolHost.font.modify(a1, a2, MEMORY[0x1E0CE4F38]);
}

void _IntelligenceSupport.SummarySymbolHost.font.modify(uint64_t a1, char a2, void (*a3)(id))
{
  void *v4;
  id v5;
  id *v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  char v26;
  char v27;
  void *v28;
  void *v29;

  v4 = *(void **)a1;
  v6 = (id *)(*(_QWORD *)a1 + 24);
  v5 = *v6;
  v7 = (char *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40));
  if ((a2 & 1) != 0)
  {
    v8 = (void *)*((_QWORD *)v7 + 1);
    v9 = (void *)*((_QWORD *)v7 + 2);
    v26 = *v7;
    v28 = v9;
    v10 = v5;
    v11 = v8;
    v12 = v9;
    a3(v10);
    v13 = (void *)*((_QWORD *)v7 + 1);
    v14 = (void *)*((_QWORD *)v7 + 2);
    *v7 = v26;
    *((_QWORD *)v7 + 1) = v8;
    *((_QWORD *)v7 + 2) = v28;
    v15 = v8;
    v16 = v28;

    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  else
  {
    v17 = (void *)*((_QWORD *)v7 + 1);
    v18 = (void *)*((_QWORD *)v7 + 2);
    v27 = *v7;
    v29 = v18;
    v19 = v5;
    v20 = v17;
    v21 = v18;
    a3(v19);
    v22 = (void *)*((_QWORD *)v7 + 1);
    v23 = (void *)*((_QWORD *)v7 + 2);
    *v7 = v27;
    *((_QWORD *)v7 + 1) = v17;
    *((_QWORD *)v7 + 2) = v29;
    v24 = v17;
    v25 = v29;

    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  free(v4);
}

double @objc _IntelligenceSupport.SummarySymbolHost.baseline.getter(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  static VerticalAlignment.firstTextBaseline.getter();
  objc_msgSend(v1, sel_bounds);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.alignment(of:at:)();
  v3 = v2;

  return v3;
}

uint64_t _IntelligenceSupport.SummarySymbolHost.baseline.getter()
{
  void *v0;

  static VerticalAlignment.firstTextBaseline.getter();
  objc_msgSend(v0, sel_bounds);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  return ViewRendererHost.alignment(of:at:)();
}

id _IntelligenceSupport.SummarySymbolHost.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void _IntelligenceSupport.SummarySymbolHost.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc _IntelligenceSupport.SummarySymbolHost.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *_IntelligenceSupport.SummarySymbolHost.init(rootView:)(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(void **)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  v3 = specialized _UIHostingView.init(rootView:)(*(_BYTE *)a1, v1, v2);

  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x108));
  swift_beginAccess();
  v5 = *v4;
  *v4 = 0;
  if (v5)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
    v6 = v3;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  return v3;
}

id _IntelligenceSupport.SummarySymbolHost.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _IntelligenceSupport.SummarySymbolHost();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized DeprecatedAlertBridge.init(style:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))
{
  _QWORD *v3;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  objc_super v11;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakInit();
  *((_BYTE *)v3 + *(_QWORD *)((*v7 & *v3) + 0x78)) = 0;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x80)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x88)) = 0;
  v8 = v3;
  EnvironmentValues.init()();
  v9 = (char *)v8 + *(_QWORD *)((*v7 & *v8) + 0x98);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  *((_OWORD *)v9 + 9) = 0u;
  *((_QWORD *)v9 + 20) = 0;
  *((_BYTE *)v8 + *(_QWORD *)((*v7 & *v8) + 0xA0)) = 0;
  *(_QWORD *)((char *)v8 + *(_QWORD *)((*v7 & *v8) + 0xA8)) = a1;

  v11.receiver = v8;
  v11.super_class = (Class)a3(0, a2, &type metadata for ActionSheet.Presentation, &protocol witness table for ActionSheet.Presentation, type metadata accessor for DeprecatedAlertBridge);
  return objc_msgSendSuper2(&v11, sel_init);
}

{
  _QWORD *v3;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  objc_super v11;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakInit();
  *((_BYTE *)v3 + *(_QWORD *)((*v7 & *v3) + 0x78)) = 0;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x80)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x88)) = 0;
  v8 = v3;
  EnvironmentValues.init()();
  v9 = (char *)v8 + *(_QWORD *)((*v7 & *v8) + 0x98);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  *((_OWORD *)v9 + 12) = 0u;
  *((_OWORD *)v9 + 13) = 0u;
  *((_OWORD *)v9 + 14) = 0u;
  *((_OWORD *)v9 + 15) = 0u;
  *((_OWORD *)v9 + 16) = 0u;
  *((_QWORD *)v9 + 34) = 0;
  *((_BYTE *)v8 + *(_QWORD *)((*v7 & *v8) + 0xA0)) = 0;
  *(_QWORD *)((char *)v8 + *(_QWORD *)((*v7 & *v8) + 0xA8)) = a1;

  v11.receiver = v8;
  v11.super_class = (Class)a3(0, a2, &type metadata for Alert.Presentation, &protocol witness table for Alert.Presentation, type metadata accessor for DeprecatedAlertBridge);
  return objc_msgSendSuper2(&v11, sel_init);
}

id specialized DeprecatedAlertBridge.init(style:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  objc_super v9;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakInit();
  *((_BYTE *)v2 + *(_QWORD *)((*v5 & *v2) + 0x78)) = 0;
  *(_DWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x80)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x88)) = 0;
  v6 = v2;
  EnvironmentValues.init()();
  v7 = (char *)v6 + *(_QWORD *)((*v5 & *v6) + 0x98);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_QWORD *)v7 + 20) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v5 & *v6) + 0xA0)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v5 & *v6) + 0xA8)) = a1;

  v9.receiver = v6;
  v9.super_class = (Class)a2(0);
  return objc_msgSendSuper2(&v9, sel_init);
}

{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  objc_super v9;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakInit();
  *((_BYTE *)v2 + *(_QWORD *)((*v5 & *v2) + 0x78)) = 0;
  *(_DWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x80)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x88)) = 0;
  v6 = v2;
  EnvironmentValues.init()();
  v7 = (char *)v6 + *(_QWORD *)((*v5 & *v6) + 0x98);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_QWORD *)v7 + 34) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v5 & *v6) + 0xA0)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v5 & *v6) + 0xA8)) = a1;

  v9.receiver = v6;
  v9.super_class = (Class)a2(0);
  return objc_msgSendSuper2(&v9, sel_init);
}

id specialized closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1)
{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t)&lazy cache variable for type metadata for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<AnyView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<EmptyView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t)&lazy cache variable for type metadata for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<BoundInputsView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<TabItem.RootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<_ViewList_View, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<InputAccessoryBar, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<BarItemView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(_QWORD))type metadata accessor for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>);
}

id specialized closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))
{
  if (((*(uint64_t (**)(void))(a1 + 1776))() & 1) != 0)
    return 0;
  else
    return objc_msgSend(objc_allocWithZone((Class)a3(0, a2, &type metadata for SheetPreference.Key, &protocol witness table for SheetPreference.Key, type metadata accessor for SheetBridge)), sel_init);
}

id specialized closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  if (((*(uint64_t (**)(void))(a1 + 1776))() & 1) != 0)
    return 0;
  else
    return objc_msgSend(objc_allocWithZone((Class)a2(0)), sel_init);
}

_QWORD *specialized _UIHostingView.init(rootView:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), void (*a7)(_QWORD), uint64_t (*a8)(_QWORD), uint64_t (*a9)(_QWORD), void (*a10)(_QWORD), uint64_t (*a11)(_QWORD), uint64_t (*a12)(uint64_t), unint64_t *a13, uint64_t (*a14)(void), uint64_t (*a15)(uint64_t), unint64_t *a16, uint64_t a17, uint64_t (*a18)(uint64_t), void (*a19)(uint64_t), void (*a20)(void *),unint64_t *a21,uint64_t (*a22)(_QWORD),uint64_t a23,unint64_t *a24)
{
  _QWORD *v24;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char **v87;
  char *v88;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  void *v104;
  void (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  id v119;
  void *v120;
  id v121;
  void *v122;
  id v123;
  void *v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  uint64_t v136;
  void *v137;
  char *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  id v151;
  _QWORD *v152;
  void *v153;
  _QWORD *v154;
  void *v155;
  uint64_t inited;
  void *v157;
  void *v158;
  void *v159;
  id v160;
  id v161;
  id v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t i;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t ObjectType;
  uint64_t v183;
  objc_super v184;
  _BYTE v185[16];
  __int128 v186;
  uint64_t v187;
  ValueMetadata *v188;
  unint64_t v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v30 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v31 = v24;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v24 + v30) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x90)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x98)) = 0;
  v32 = (char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xA0);
  *(_DWORD *)v32 = 0;
  v32[4] = 1;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0xA8)) = 0;
  *(_DWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xB0)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0xB8)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0xC0)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0xC8)) = 1;
  *(_DWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xD0)) = 0;
  v33 = (char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xD8);
  *(_OWORD *)v33 = 0u;
  *((_OWORD *)v33 + 1) = 0u;
  v33[32] = 1;
  v34 = (char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xE0);
  *(_OWORD *)v34 = 0u;
  *((_OWORD *)v34 + 1) = 0u;
  v34[32] = 1;
  *(_DWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xE8)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0xF0)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0xF8)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x100)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x108)) = -1;
  *(_OWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x138)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x148)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x150)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x158)) = 1;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x160)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x168)) = 0;
  v35 = (char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x170);
  *(_QWORD *)v35 = 0;
  v35[8] = 1;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x178)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x180)) = 2;
  v36 = *(_QWORD *)((*v29 & *v31) + 0x188);
  v37 = objc_allocWithZone((Class)a2(0));
  *(_QWORD *)((char *)v31 + v36) = specialized DeprecatedAlertBridge.init(style:)(1, a2);
  v38 = *(_QWORD *)((*v29 & *v31) + 0x190);
  v39 = objc_allocWithZone((Class)a3(0));
  *(_QWORD *)((char *)v31 + v38) = specialized DeprecatedAlertBridge.init(style:)(0, a3);
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x198)) = 1;
  v40 = *(_QWORD *)((*v29 & *v31) + 0x1A0);
  type metadata accessor for FocusBridge();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 40) = 0;
  swift_unknownObjectWeakInit();
  v42 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v41 + 48) = 0;
  *(_QWORD *)(v41 + 56) = v42;
  *(_QWORD *)(v41 + 64) = v43;
  EnvironmentValues.init()();
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_QWORD *)(v41 + 136) = 1;
  *(_DWORD *)(v41 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v41 + 160) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  *(_WORD *)(v41 + 176) = 1;
  *(_QWORD *)((char *)v31 + v40) = v41;
  v44 = *(_QWORD *)((*v29 & *v31) + 0x1A8);
  *(_QWORD *)((char *)v31 + v44) = objc_msgSend(objc_allocWithZone((Class)a4(0)), sel_init);
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x1B0)) = 0;
  v45 = *(_QWORD *)((*v29 & *v31) + 0x1B8);
  *(_QWORD *)((char *)v31 + v45) = objc_msgSend(objc_allocWithZone((Class)a5(0)), sel_init);
  v46 = *(_QWORD *)((*v29 & *v31) + 0x1C0);
  *(_QWORD *)((char *)v31 + v46) = objc_msgSend(objc_allocWithZone((Class)a6(0)), sel_init);
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x1D0)) = 0;
  v47 = *(_QWORD *)((*v29 & *v31) + 0x1D8);
  a7(0);
  v48 = swift_allocObject();
  *(_WORD *)(v48 + 16) = 2;
  *(_QWORD *)(v48 + 24) = v42;
  *(_QWORD *)(v48 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v31 + v47) = v48;
  swift_weakInit();
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x1E8)) = 0;
  v49 = *(_QWORD *)((*v29 & *v31) + 0x1F0);
  *(_QWORD *)((char *)v31 + v49) = objc_msgSend(objc_allocWithZone((Class)a8(0)), sel_init);
  v50 = *(_QWORD *)((*v29 & *v31) + 0x1F8);
  *(_QWORD *)((char *)v31 + v50) = objc_msgSend(objc_allocWithZone((Class)a9(0)), sel_init);
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x200)) = 0;
  v51 = *(_QWORD *)((*v29 & *v31) + 0x208);
  a10(0);
  v52 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v52 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v42);
  *(_QWORD *)((char *)v31 + v51) = v52;
  v53 = *(_QWORD *)((*v29 & *v31) + 0x210);
  *(_QWORD *)((char *)v31 + v53) = objc_msgSend(objc_allocWithZone((Class)a11(0)), sel_init);
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x218)) = 0;
  v54 = *(_QWORD *)((*v29 & *v31) + 0x220);
  *(_QWORD *)((char *)v31 + v54) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x228)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x230)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x238)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x248)) = 0;
  v55 = (char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x250);
  *(_QWORD *)v55 = 0;
  v55[8] = 0;
  *((_DWORD *)v55 + 3) = 0;
  v56 = (_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x258));
  v57 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v42);
  *v56 = 0;
  v56[1] = v57;
  v56[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v58 = (char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x270);
  *(_QWORD *)v58 = 0;
  v58[8] = 1;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x278)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x280)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x288)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x290)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x298)) = 0;
  *((_BYTE *)v31 + *(_QWORD *)((*v29 & *v31) + 0x2A0)) = 0;
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x60)) = a1;
  v59 = swift_retain();
  v60 = MEMORY[0x18D75B908](v59);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v186, v60);
  a12(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(a13, a12, a14);
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v61 = swift_retain();
  v62 = specialized FocusViewGraph.init(graph:)(v61);
  v64 = v63;
  v66 = v65;
  LODWORD(a5) = v67;
  swift_release();
  *(_QWORD *)&v186 = v62;
  *((_QWORD *)&v186 + 1) = v64;
  v187 = v66;
  LOWORD(v188) = (unsigned __int16)a5 & 0x101;
  BYTE2(v188) = BYTE2(a5) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v186 = 0;
  WORD4(v186) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v186 = 0uLL;
  v187 = 0;
  LOBYTE(v188) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x78)) = EventBindingManager.__allocating_init()();
  v68 = specialized Dictionary.init(dictionaryLiteral:)(v42);
  v188 = &type metadata for HoverEventDispatcher;
  v189 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v186 = v68;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v186);
  v188 = &type metadata for PencilDoubleTapEventDispatcher;
  v189 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v186);
  v188 = &type metadata for PencilSqueezeEventDispatcher;
  v189 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v186);
  v69 = specialized Dictionary.init(dictionaryLiteral:)(v42);
  v188 = &type metadata for KeyEventDispatcher;
  v189 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v186 = v69;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v186);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v31 + *(_QWORD *)((*v29 & *v31) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  v184.receiver = v31;
  v184.super_class = (Class)a15(0);
  v70 = objc_msgSendSuper2(&v184, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v71 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a16, a15, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v72 = v70;
  ViewRendererHost.initializeViewGraph()();
  v73 = static RepresentableContextValues.current;
  v183 = v71;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v74 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v75 = qword_1ECE02220;
    v76 = qword_1ECE02228;
    v77 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v78 = swift_retain();
      outlined copy of RepresentableContextValues?(v78, v74, v75, v76, v77);
      v79 = ViewGraph.preferenceBridge.getter();
      if (!v79 || (v80 = v79, swift_release(), v73 != v80))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v81 = swift_release();
      if ((v77 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v81 = outlined copy of RepresentableContextValues.EnvironmentStorage(v75, v76, v77 & 1);
      if ((v77 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v81, v82);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v75, v76, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v73, v74, v75, v76, v77);
        outlined consume of RepresentableContextValues?(v73, v74, v75, v76, v77);
LABEL_10:
        v83 = (_QWORD *)((char *)v72 + *(_QWORD *)((*v29 & *v72) + 0x110));
        v84 = *v83;
        *(_OWORD *)v83 = v186;
        outlined consume of EnvironmentValues?(v84);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v186 = v75;
    *((_QWORD *)&v186 + 1) = v76;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v75, v76, 0);
    outlined consume of RepresentableContextValues?(v73, v74, v75, v76, v77);
    goto LABEL_10;
  }
LABEL_11:
  v85 = v72;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v86 = *(_QWORD *)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v87 = (char **)(v86 + 24);
  swift_beginAccess();
  v88 = *(char **)(v86 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v86 + 24) = v88;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v88 + 2) + 1, 1, v88);
    *v87 = v88;
  }
  v91 = *((_QWORD *)v88 + 2);
  v90 = *((_QWORD *)v88 + 3);
  if (v91 >= v90 >> 1)
  {
    v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v88);
    *v87 = v88;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v93 = v92;
  v94 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v88 + 2) = v91 + 1;
  v95 = &v88[24 * v91];
  *((_QWORD *)v95 + 4) = v93;
  *((_QWORD *)v95 + 5) = v94;
  *((_DWORD *)v95 + 12) = -1;
  swift_release();
  swift_release();
  v96 = *(_QWORD *)((*v29 & *v85) + 0x210);
  swift_unknownObjectWeakAssign();
  v97 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x188));
  swift_unknownObjectWeakAssign();
  v98 = v97;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v99 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x190));
  swift_unknownObjectWeakAssign();
  v100 = v99;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v101 = specialized _UIHostingView.sheetBridge.getter(a18, a19, a20);
  if (v101)
  {
    v102 = v101;
    swift_unknownObjectWeakAssign();

  }
  v103 = specialized _UIHostingView.sheetBridge.getter(a18, a19, a20);
  if (v103)
  {
    v104 = v103;
    v105 = *(void (**)(uint64_t))((*v29 & *v103) + 0x1D0);
    v106 = swift_retain();
    v105(v106);

    swift_release();
  }
  v107 = *(_QWORD *)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1A0));
  v108 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a21, a15, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v107 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v107 + 40) = v108;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v109 = FocusBridge.host.getter();
  if (v109)
  {
    v111 = (void *)v109;
    v112 = v110;
    v113 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v112 + 8) + 16))(v113);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v114 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1A8));
  v115 = swift_unknownObjectWeakAssign();
  v116 = MEMORY[0x18D760234](v115);
  if (!v116)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v117 = (void *)v116;
  v118 = swift_getObjectType();
  v119 = v114;
  swift_retain();

  if (((*(uint64_t (**)(void))(v118 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v120 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v121 = v120;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v122 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v123 = v122;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v124 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v125 = v124;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v126 = *(void **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x1F0));
  v127 = swift_unknownObjectWeakAssign();
  v128 = MEMORY[0x18D760234](v127);
  if (!v128)
    goto LABEL_48;
  v129 = (void *)v128;
  v130 = v126;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v131 = objc_msgSend(v85, sel_traitCollection);
  v132 = objc_msgSend(v131, sel_userInterfaceIdiom);

  if (v132 == (id)1
    || (v133 = objc_msgSend(v85, sel_traitCollection),
        v134 = objc_msgSend(v133, sel_userInterfaceIdiom),
        v133,
        v134 == (id)6))
  {
    v135 = objc_msgSend(objc_allocWithZone((Class)a22(0)), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v136 = *(_QWORD *)((*v29 & *v85) + 0x200);
    v137 = *(void **)((char *)v85 + v136);
    *(_QWORD *)((char *)v85 + v136) = v135;

  }
  v138 = *(char **)((char *)v85 + v96);
  v139 = MEMORY[0x18D760234](&v138[direct field offset for ContextMenuBridge.host]);
  if (!v139)
LABEL_49:
    __break(1u);
  v140 = (void *)v139;
  v141 = swift_getObjectType();
  v142 = v138;
  swift_retain();

  if (((*(uint64_t (**)(void))(v141 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v143 = *(char **)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x220));
  *(_QWORD *)&v143[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v183;
  v144 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v144, v145);
  v146 = v143;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v147 = *(_QWORD *)((char *)v85 + *(_QWORD *)((*v29 & *v85) + 0x78));
  v148 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a24, a15, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v147 + 24) = v148;
  swift_unknownObjectWeakAssign();
  v149 = *(_QWORD *)((*v29 & *v85) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v147 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v150 = (void *)objc_opt_self();
  v151 = objc_msgSend(v150, sel_defaultCenter);
  v152 = v85;
  v153 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v152, sel_willBeginSnapshotSession, v153, 0);

  v154 = v152;
  v155 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v154, sel_didEndSnapshotSession, v155, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v157 = (void *)*MEMORY[0x1E0C99720];
  v158 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v158;
  v159 = (void *)*MEMORY[0x1E0DC5320];
  v160 = v157;
  v161 = v158;
  v162 = v159;
  v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v163[2] = 3;
  v163[6] = v162;
  v164 = v163[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v154, sel_externalEnvironmentDidChange, v164, 0);
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v154, sel_externalEnvironmentDidChange, v163[5], 0);
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v154, sel_externalEnvironmentDidChange, v163[6], 0);
  swift_bridgeObjectRelease_n();
  v165 = *(_QWORD *)((char *)v85 + v149);
  v166 = *(_QWORD *)(v165 + 48);
  if (v166)
  {
    v167 = v154;
    swift_retain();
    objc_msgSend(v167, sel_addGestureRecognizer_, v166);
  }
  else
  {
    v168 = v154;
    swift_retain();
  }
  objc_msgSend(v154, sel_addGestureRecognizer_, *(_QWORD *)(v165 + 56), a6);
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v169 = objc_msgSend(v150, sel_defaultCenter);
    objc_msgSend(v169, sel_addObserver_selector_name_object_, v154, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v169, sel_addObserver_selector_name_object_, v154, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v170 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v171 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v171)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v171; ++i)
    {
      v173 = *(_QWORD *)(v170 + 8 * i + 32);
      objc_msgSend(v151, sel_addObserver_selector_name_object_, v154, sel_accessibilityBooleanDidChange_, v173, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v154, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v174 = one-time initialization token for didUpdateListLayout;
  v175 = v154;
  if (v174 != -1)
    swift_once();
  objc_msgSend(v151, sel_addObserver_selector_name_object_, v175, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v176 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v176, (uint64_t)v185);
  v185[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v185, (uint64_t)v175);
  swift_endAccess();

  static Update.end()();
  return v175;
}

_QWORD *specialized _UIHostingView.init(rootView:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  void *v139;
  uint64_t inited;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t i;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t ObjectType;
  objc_super v165;
  _BYTE v166[16];
  __int128 v167;
  uint64_t v168;
  ValueMetadata *v169;
  unint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v5 = v2;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v2 + v4) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x90)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x98)) = 0;
  v6 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA0);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA8)) = 0;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC8)) = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD0)) = 0;
  v7 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD8);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x100)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x108)) = -1;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x138)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x148)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x150)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x158)) = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x160)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x168)) = 0;
  v9 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x170);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x178)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x180)) = 2;
  v10 = *(_QWORD *)((*v3 & *v5) + 0x188);
  v11 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>());
  *(_QWORD *)((char *)v5 + v10) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>);
  v12 = *(_QWORD *)((*v3 & *v5) + 0x190);
  v13 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v5 + v12) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x198)) = 1;
  v14 = *(_QWORD *)((*v3 & *v5) + 0x1A0);
  type metadata accessor for FocusBridge();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_QWORD *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(_QWORD *)((char *)v5 + v14) = v15;
  v18 = *(_QWORD *)((*v3 & *v5) + 0x1A8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v5 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1B0)) = 0;
  v20 = *(_QWORD *)((*v3 & *v5) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v5 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  v22 = *(_QWORD *)((*v3 & *v5) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v5 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1D0)) = 0;
  v24 = *(_QWORD *)((*v3 & *v5) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(_QWORD *)(v25 + 24) = v16;
  *(_QWORD *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + v24) = v25;
  swift_weakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1E8)) = 0;
  v26 = *(_QWORD *)((*v3 & *v5) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v5 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  v28 = *(_QWORD *)((*v3 & *v5) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v5 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x200)) = 0;
  v30 = *(_QWORD *)((*v3 & *v5) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(_QWORD *)((char *)v5 + v30) = v31;
  v32 = *(_QWORD *)((*v3 & *v5) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v5 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x218)) = 0;
  v34 = *(_QWORD *)((*v3 & *v5) + 0x220);
  *(_QWORD *)((char *)v5 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x228)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x230)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x238)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x248)) = 0;
  v35 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x250);
  *(_QWORD *)v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  v36 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x258));
  v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *v36 = 0;
  v36[1] = v37;
  v36[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v38 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x270);
  *(_QWORD *)v38 = 0;
  v38[8] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x278)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x280)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x288)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x290)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x298)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x2A0)) = 0;
  v39 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x60);
  *(_QWORD *)v39 = a1;
  v39[8] = a2;
  v40 = swift_retain();
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v167, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v167 = v43;
  *((_QWORD *)&v167 + 1) = v45;
  v168 = v47;
  LOWORD(v169) = v49 & 0x101;
  BYTE2(v169) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v167 = 0;
  WORD4(v167) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v167 = 0uLL;
  v168 = 0;
  LOBYTE(v169) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v169 = &type metadata for HoverEventDispatcher;
  v170 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v167 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilDoubleTapEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilSqueezeEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v169 = &type metadata for KeyEventDispatcher;
  v170 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v167 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v165.receiver = v5;
  v165.super_class = v52;
  v53 = objc_msgSendSuper2(&v165, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = xmmword_1ECE02220;
    v59 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v60 = v54;
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, *((uint64_t *)&v58 + 1), v59);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      v54 = v60;
      if ((v59 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), v59 & 1);
      if ((v59 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
        outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v3 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v167;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    v167 = v58;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v3 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    swift_unknownObjectWeakAssign();

  }
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    v88 = *(void (**)(uint64_t))((*v3 & *v86) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1A0));
  v91 = lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x1F0));
  v110 = swift_unknownObjectWeakAssign();
  v111 = MEMORY[0x18D760234](v110);
  if (!v111)
    goto LABEL_48;
  v112 = (void *)v111;
  v113 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v114 = objc_msgSend(v68, sel_traitCollection);
  v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (v116 = objc_msgSend(v68, sel_traitCollection),
        v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v120 = *(_QWORD *)((*v3 & *v68) + 0x200);
    v121 = *(void **)((char *)v68 + v120);
    *(_QWORD *)((char *)v68 + v120) = v119;

  }
  v122 = *(char **)((char *)v68 + v79);
  v123 = MEMORY[0x18D760234](&v122[direct field offset for ContextMenuBridge.host]);
  if (!v123)
LABEL_49:
    __break(1u);
  v124 = (void *)v123;
  v125 = swift_getObjectType();
  v126 = v122;
  swift_retain();

  if (((*(uint64_t (**)(void))(v125 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v127 = *(char **)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v54;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v131 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v3 & *v68) + 0x78));
  v132 = lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v131 + 24) = v132;
  swift_unknownObjectWeakAssign();
  v133 = *(_QWORD *)((*v3 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v131 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v134 = (void *)objc_opt_self();
  v135 = objc_msgSend(v134, sel_defaultCenter);
  v136 = v68;
  v137 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v136, sel_willBeginSnapshotSession, v137, 0);

  v138 = v136;
  v139 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_didEndSnapshotSession, v139, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v141 = (void *)*MEMORY[0x1E0C99720];
  v142 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v142;
  v143 = (void *)*MEMORY[0x1E0DC5320];
  v144 = v141;
  v145 = v142;
  v146 = v143;
  v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v147[2] = 3;
  v147[6] = v146;
  v148 = v147[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v148, 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[5], 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[6], 0);
  swift_bridgeObjectRelease_n();
  v149 = *(_QWORD *)((char *)v68 + v133);
  v150 = *(_QWORD *)(v149 + 48);
  if (v150)
  {
    v151 = v138;
    swift_retain();
    objc_msgSend(v151, sel_addGestureRecognizer_, v150);
  }
  else
  {
    v152 = v138;
    swift_retain();
  }
  objc_msgSend(v138, sel_addGestureRecognizer_, *(_QWORD *)(v149 + 56), a1);
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v153 = objc_msgSend(v134, sel_defaultCenter);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v154 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v155 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v155)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v155; ++i)
    {
      v157 = *(_QWORD *)(v154 + 8 * i + 32);
      objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityBooleanDidChange_, v157, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v158 = one-time initialization token for didUpdateListLayout;
  v159 = v138;
  if (v158 != -1)
    swift_once();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v159, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v160 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v160, (uint64_t)v166);
  v166[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v166, (uint64_t)v159);
  swift_endAccess();

  static Update.end()();
  return v159;
}

_QWORD *specialized _UIHostingView.init(rootView:)(char a1, void *a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  objc_class *v54;
  id v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char **v73;
  char *v74;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  void *v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  id v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  Class v121;
  id v122;
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  _QWORD *v139;
  void *v140;
  _QWORD *v141;
  void *v142;
  uint64_t inited;
  void *v144;
  void *v145;
  void *v146;
  id v147;
  id v148;
  id v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t i;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t ObjectType;
  objc_super v169;
  _BYTE v170[16];
  __int128 v171;
  uint64_t v172;
  ValueMetadata *v173;
  unint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v6 = v3;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v3 + v5) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x90)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x98)) = 0;
  v7 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA0);
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA8)) = 0;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC8)) = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD0)) = 0;
  v8 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD8);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v9 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE0);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x100)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x108)) = -1;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x138)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x148)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x150)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x158)) = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x160)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x168)) = 0;
  v10 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x170);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x178)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x180)) = 2;
  v11 = *(_QWORD *)((*v4 & *v6) + 0x188);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>());
  *(_QWORD *)((char *)v6 + v11) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>);
  v13 = *(_QWORD *)((*v4 & *v6) + 0x190);
  v14 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v6 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x198)) = 1;
  v15 = *(_QWORD *)((*v4 & *v6) + 0x1A0);
  type metadata accessor for FocusBridge();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(_QWORD *)((char *)v6 + v15) = v16;
  v19 = *(_QWORD *)((*v4 & *v6) + 0x1A8);
  v20 = MEMORY[0x1E0CE4F50];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v6 + v19) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1B0)) = 0;
  v22 = *(_QWORD *)((*v4 & *v6) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v6 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  v24 = *(_QWORD *)((*v4 & *v6) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v6 + v24) = objc_msgSend(objc_allocWithZone(v25), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1D0)) = 0;
  v26 = *(_QWORD *)((*v4 & *v6) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v27 = swift_allocObject();
  *(_WORD *)(v27 + 16) = 2;
  *(_QWORD *)(v27 + 24) = v17;
  *(_QWORD *)(v27 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + v26) = v27;
  swift_weakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1E8)) = 0;
  v28 = *(_QWORD *)((*v4 & *v6) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v6 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  v30 = *(_QWORD *)((*v4 & *v6) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v6 + v30) = objc_msgSend(objc_allocWithZone(v31), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x200)) = 0;
  v32 = *(_QWORD *)((*v4 & *v6) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v33 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)((char *)v6 + v32) = v33;
  v34 = *(_QWORD *)((*v4 & *v6) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v6 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x218)) = 0;
  v36 = *(_QWORD *)((*v4 & *v6) + 0x220);
  *(_QWORD *)((char *)v6 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x228)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x230)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x238)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x248)) = 0;
  v37 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x250);
  *(_QWORD *)v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  v38 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x258));
  v39 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *v38 = 0;
  v38[1] = v39;
  v38[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v40 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x270);
  *(_QWORD *)v40 = 0;
  v40[8] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x278)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x280)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x288)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x290)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x298)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x2A0)) = 0;
  v41 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x60);
  *v41 = a1;
  *((_QWORD *)v41 + 1) = a2;
  *((_QWORD *)v41 + 2) = a3;
  v42 = a2;
  v43 = MEMORY[0x18D75B908](a3);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v171, v43);
  type metadata accessor for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v44 = swift_retain();
  v45 = specialized FocusViewGraph.init(graph:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  swift_release();
  *(_QWORD *)&v171 = v45;
  *((_QWORD *)&v171 + 1) = v47;
  v172 = v49;
  LOWORD(v173) = v51 & 0x101;
  BYTE2(v173) = BYTE2(v51) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v171 = 0;
  WORD4(v171) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v171 = 0uLL;
  v172 = 0;
  LOBYTE(v173) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x78)) = EventBindingManager.__allocating_init()();
  v52 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v173 = &type metadata for HoverEventDispatcher;
  v174 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v171 = v52;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  v173 = &type metadata for PencilDoubleTapEventDispatcher;
  v174 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  v173 = &type metadata for PencilSqueezeEventDispatcher;
  v174 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  v53 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v173 = &type metadata for KeyEventDispatcher;
  v174 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v171 = v53;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v169.receiver = v6;
  v169.super_class = v54;
  v55 = objc_msgSendSuper2(&v169, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v56 = lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  v57 = v55;
  ViewRendererHost.initializeViewGraph()();
  v58 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v59 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v60 = qword_1ECE02220;
    v61 = qword_1ECE02228;
    v62 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v63 = v56;
      v64 = swift_retain();
      outlined copy of RepresentableContextValues?(v64, v59, v60, v61, v62);
      v65 = ViewGraph.preferenceBridge.getter();
      if (!v65 || (v66 = v65, swift_release(), v58 != v66))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v67 = swift_release();
      v56 = v63;
      if ((v62 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v67 = outlined copy of RepresentableContextValues.EnvironmentStorage(v60, v61, v62 & 1);
      if ((v62 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v67, v68);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v60, v61, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v58, v59, v60, v61, v62);
        outlined consume of RepresentableContextValues?(v58, v59, v60, v61, v62);
LABEL_10:
        v69 = (_QWORD *)((char *)v57 + *(_QWORD *)((*v4 & *v57) + 0x110));
        v70 = *v69;
        *(_OWORD *)v69 = v171;
        outlined consume of EnvironmentValues?(v70);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v171 = v60;
    *((_QWORD *)&v171 + 1) = v61;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v60, v61, 0);
    outlined consume of RepresentableContextValues?(v58, v59, v60, v61, v62);
    goto LABEL_10;
  }
LABEL_11:
  v71 = v57;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v72 = *(_QWORD *)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v73 = (char **)(v72 + 24);
  swift_beginAccess();
  v74 = *(char **)(v72 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v72 + 24) = v74;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v74 + 2) + 1, 1, v74);
    *v73 = v74;
  }
  v77 = *((_QWORD *)v74 + 2);
  v76 = *((_QWORD *)v74 + 3);
  if (v77 >= v76 >> 1)
  {
    v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v74);
    *v73 = v74;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v79 = v78;
  v80 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v74 + 2) = v77 + 1;
  v81 = &v74[24 * v77];
  *((_QWORD *)v81 + 4) = v79;
  *((_QWORD *)v81 + 5) = v80;
  *((_DWORD *)v81 + 12) = -1;
  swift_release();
  swift_release();
  v82 = *(_QWORD *)((*v4 & *v71) + 0x210);
  swift_unknownObjectWeakAssign();
  v83 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x188));
  swift_unknownObjectWeakAssign();
  v84 = v83;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v85 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x190));
  swift_unknownObjectWeakAssign();
  v86 = v85;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v87)
  {
    v88 = v87;
    swift_unknownObjectWeakAssign();

  }
  v89 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v89)
  {
    v90 = v89;
    v91 = *(void (**)(uint64_t))((*v4 & *v89) + 0x1D0);
    v92 = swift_retain();
    v91(v92);

    swift_release();
  }
  v93 = *(_QWORD *)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1A0));
  v94 = lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  *(_QWORD *)(v93 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v93 + 40) = v94;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v95 = FocusBridge.host.getter();
  if (v95)
  {
    v97 = (void *)v95;
    v98 = v96;
    v99 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v98 + 8) + 16))(v99);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v100 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1A8));
  v101 = swift_unknownObjectWeakAssign();
  v102 = MEMORY[0x18D760234](v101);
  if (!v102)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v103 = (void *)v102;
  v104 = swift_getObjectType();
  v105 = v100;
  swift_retain();

  if (((*(uint64_t (**)(void))(v104 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v106 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v107 = v106;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v108 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v109 = v108;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v110 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v111 = v110;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v112 = *(void **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x1F0));
  v113 = swift_unknownObjectWeakAssign();
  v114 = MEMORY[0x18D760234](v113);
  if (!v114)
    goto LABEL_48;
  v115 = (void *)v114;
  v116 = v112;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v117 = objc_msgSend(v71, sel_traitCollection);
  v118 = objc_msgSend(v117, sel_userInterfaceIdiom);

  if (v118 == (id)1
    || (v119 = objc_msgSend(v71, sel_traitCollection),
        v120 = objc_msgSend(v119, sel_userInterfaceIdiom),
        v119,
        v120 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v122 = objc_msgSend(objc_allocWithZone(v121), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v123 = *(_QWORD *)((*v4 & *v71) + 0x200);
    v124 = *(void **)((char *)v71 + v123);
    *(_QWORD *)((char *)v71 + v123) = v122;

  }
  v125 = *(char **)((char *)v71 + v82);
  v126 = MEMORY[0x18D760234](&v125[direct field offset for ContextMenuBridge.host]);
  if (!v126)
LABEL_49:
    __break(1u);
  v127 = (void *)v126;
  v128 = swift_getObjectType();
  v129 = v125;
  swift_retain();

  if (((*(uint64_t (**)(void))(v128 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v130 = *(char **)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x220));
  *(_QWORD *)&v130[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v56;
  v131 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v131, v132);
  v133 = v130;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v134 = *(_QWORD *)((char *)v71 + *(_QWORD *)((*v4 & *v71) + 0x78));
  v135 = lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v134 + 24) = v135;
  swift_unknownObjectWeakAssign();
  v136 = *(_QWORD *)((*v4 & *v71) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v134 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v137 = (void *)objc_opt_self();
  v138 = objc_msgSend(v137, sel_defaultCenter);
  v139 = v71;
  v140 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v139, sel_willBeginSnapshotSession, v140, 0);

  v141 = v139;
  v142 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_didEndSnapshotSession, v142, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v144 = (void *)*MEMORY[0x1E0C99720];
  v145 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v145;
  v146 = (void *)*MEMORY[0x1E0DC5320];
  v147 = v144;
  v148 = v145;
  v149 = v146;
  v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v150[2] = 3;
  v150[6] = v149;
  v151 = v150[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_externalEnvironmentDidChange, v151, 0);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_externalEnvironmentDidChange, v150[5], 0);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_externalEnvironmentDidChange, v150[6], 0);
  swift_bridgeObjectRelease_n();
  v152 = *(_QWORD *)((char *)v71 + v136);
  v153 = *(_QWORD *)(v152 + 48);
  if (v153)
  {
    v154 = v141;
    swift_retain();
    objc_msgSend(v154, sel_addGestureRecognizer_, v153);
  }
  else
  {
    v155 = v141;
    swift_retain();
  }
  objc_msgSend(v141, sel_addGestureRecognizer_, *(_QWORD *)(v152 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v156 = objc_msgSend(v137, sel_defaultCenter);
    objc_msgSend(v156, sel_addObserver_selector_name_object_, v141, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v156, sel_addObserver_selector_name_object_, v141, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v157 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v158 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v158)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v158; ++i)
    {
      v160 = *(_QWORD *)(v157 + 8 * i + 32);
      objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_accessibilityBooleanDidChange_, v160, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v161 = one-time initialization token for didUpdateListLayout;
  v162 = v141;
  if (v161 != -1)
    swift_once();
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v162, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v163 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v163, (uint64_t)v170);
  v170[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v170, (uint64_t)v162);
  swift_endAccess();

  static Update.end()();
  return v162;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>);
  }
  return result;
}

_QWORD *specialized _UIHostingView.init(rootView:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  objc_class *v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char **v72;
  char *v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  Class v120;
  id v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  uint64_t inited;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v162;
  uint64_t v163;
  _QWORD *ObjectType;
  objc_super v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE v168[112];
  __int128 v169;
  uint64_t v170;
  ValueMetadata *v171;
  unint64_t v172;
  _OWORD v173[2];
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v163 = 0;
  ObjectType = (_QWORD *)swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v5 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v4) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x90)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x98)) = 0;
  v6 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA0);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA8)) = 0;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC8)) = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD0)) = 0;
  v7 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD8);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x100)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x108)) = -1;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x138)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x148)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x150)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x158)) = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x160)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x168)) = 0;
  v9 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x170);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x178)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x180)) = 2;
  v10 = *(_QWORD *)((*v3 & *v5) + 0x188);
  v11 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>());
  *(_QWORD *)((char *)v5 + v10) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>);
  v12 = *(_QWORD *)((*v3 & *v5) + 0x190);
  v13 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v5 + v12) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x198)) = 1;
  v14 = *(_QWORD *)((*v3 & *v5) + 0x1A0);
  type metadata accessor for FocusBridge();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_QWORD *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(_QWORD *)((char *)v5 + v14) = v15;
  v18 = *(_QWORD *)((*v3 & *v5) + 0x1A8);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  *(_QWORD *)((char *)v5 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1B0)) = 0;
  v20 = *(_QWORD *)((*v3 & *v5) + 0x1B8);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  *(_QWORD *)((char *)v5 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  v22 = *(_QWORD *)((*v3 & *v5) + 0x1C0);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  *(_QWORD *)((char *)v5 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1D0)) = 0;
  v24 = *(_QWORD *)((*v3 & *v5) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(_QWORD *)(v25 + 24) = v16;
  *(_QWORD *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + v24) = v25;
  swift_weakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1E8)) = 0;
  v26 = *(_QWORD *)((*v3 & *v5) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  *(_QWORD *)((char *)v5 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  v28 = *(_QWORD *)((*v3 & *v5) + 0x1F8);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  *(_QWORD *)((char *)v5 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x200)) = 0;
  v30 = *(_QWORD *)((*v3 & *v5) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(_QWORD *)((char *)v5 + v30) = v31;
  v32 = *(_QWORD *)((*v3 & *v5) + 0x210);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  *(_QWORD *)((char *)v5 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x218)) = 0;
  v34 = *(_QWORD *)((*v3 & *v5) + 0x220);
  *(_QWORD *)((char *)v5 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x228)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x230)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x238)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x248)) = 0;
  v35 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x250);
  *(_QWORD *)v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  v36 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x258));
  v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *v36 = 0;
  v36[1] = v37;
  v36[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v38 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x270);
  *(_QWORD *)v38 = 0;
  v38[8] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x278)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x280)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x288)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x290)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x298)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x2A0)) = 0;
  v39 = (_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x60));
  v166 = *a1;
  v174 = a1[5];
  v40 = *(_OWORD *)(a1 + 3);
  v173[0] = *(_OWORD *)(a1 + 1);
  v173[1] = v40;
  v41 = *((_OWORD *)a1 + 2);
  v42 = *((_OWORD *)a1 + 1);
  *v39 = *(_OWORD *)a1;
  v39[1] = v42;
  v39[2] = v41;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v166);
  v43 = outlined retain of DocumentBaseModifier((uint64_t *)v173);
  v44 = MEMORY[0x18D75B908](v43);
  ((void (*)(__int128 *__return_ptr, uint64_t))ObjectType[221])(&v169, v44);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v45 = swift_retain();
  v46 = specialized FocusViewGraph.init(graph:)(v45);
  v48 = v47;
  v50 = v49;
  LODWORD(v24) = v51;
  swift_release();
  *(_QWORD *)&v169 = v46;
  *((_QWORD *)&v169 + 1) = v48;
  v170 = v50;
  LOWORD(v171) = v24 & 0x101;
  BYTE2(v171) = BYTE2(v24) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v169 = 0;
  WORD4(v169) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v169 = 0uLL;
  v170 = 0;
  LOBYTE(v171) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x78)) = EventBindingManager.__allocating_init()();
  v52 = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v171 = &type metadata for HoverEventDispatcher;
  v172 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v169 = v52;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  v171 = &type metadata for PencilDoubleTapEventDispatcher;
  v172 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  v171 = &type metadata for PencilSqueezeEventDispatcher;
  v172 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  v53 = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v171 = &type metadata for KeyEventDispatcher;
  v172 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v169 = v53;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
  v165.receiver = v5;
  v165.super_class = v54;
  v55 = objc_msgSendSuper2(&v165, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v57 = v55;
  ViewRendererHost.initializeViewGraph()();
  v58 = static RepresentableContextValues.current;
  v162 = v56;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v59 = (_QWORD *)*((_QWORD *)&static RepresentableContextValues.current + 1);
    v60 = xmmword_1ECE02220;
    v61 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v62 = swift_retain();
      ObjectType = v59;
      outlined copy of RepresentableContextValues?(v62, (uint64_t)v59, v60, *((uint64_t *)&v60 + 1), v61);
      v63 = ViewGraph.preferenceBridge.getter();
      if (!v63 || (v64 = v63, swift_release(), v58 != v64))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v65 = swift_release();
      v59 = ObjectType;
      if ((v61 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v65 = outlined copy of RepresentableContextValues.EnvironmentStorage(v60, *((uint64_t *)&v60 + 1), v61 & 1);
      if ((v61 & 1) != 0)
      {
LABEL_7:
        ObjectType = &v162;
        MEMORY[0x1E0C80A78](v65, v66);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v60, *((uint64_t *)&v60 + 1), 1);
        v67 = v163;
        static Update.ensure<A>(_:)();
        v163 = v67;
        outlined consume of RepresentableContextValues?(v58, (uint64_t)v59, v60, *((uint64_t *)&v60 + 1), v61);
        outlined consume of RepresentableContextValues?(v58, (uint64_t)v59, v60, *((uint64_t *)&v60 + 1), v61);
LABEL_10:
        v68 = (_QWORD *)((char *)v57 + *(_QWORD *)((*v3 & *v57) + 0x110));
        v69 = *v68;
        *(_OWORD *)v68 = v169;
        outlined consume of EnvironmentValues?(v69);
        goto LABEL_11;
      }
    }
    v169 = v60;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v60, *((uint64_t *)&v60 + 1), 0);
    outlined consume of RepresentableContextValues?(v58, (uint64_t)v59, v60, *((uint64_t *)&v60 + 1), v61);
    goto LABEL_10;
  }
LABEL_11:
  v70 = v57;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v71 = *(_QWORD *)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1D8));
  swift_unknownObjectWeakAssign();
  ObjectType = *(_QWORD **)((*v3 & *v70) + 0x68);
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v72 = (char **)(v71 + 24);
  swift_beginAccess();
  v73 = *(char **)(v71 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v71 + 24) = v73;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v73 + 2) + 1, 1, v73);
    *v72 = v73;
  }
  v76 = *((_QWORD *)v73 + 2);
  v75 = *((_QWORD *)v73 + 3);
  if (v76 >= v75 >> 1)
  {
    v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v73);
    *v72 = v73;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v78 = v77;
  v79 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v73 + 2) = v76 + 1;
  v80 = &v73[24 * v76];
  *((_QWORD *)v80 + 4) = v78;
  *((_QWORD *)v80 + 5) = v79;
  *((_DWORD *)v80 + 12) = -1;
  swift_release();
  swift_release();
  v81 = *(_QWORD *)((*v3 & *v70) + 0x210);
  swift_unknownObjectWeakAssign();
  v82 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x188));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x190));
  swift_unknownObjectWeakAssign();
  v85 = v84;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    swift_unknownObjectWeakAssign();

  }
  v88 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v88)
  {
    v89 = v88;
    v90 = *(void (**)(uint64_t))((*v3 & *v88) + 0x1D0);
    v91 = swift_retain();
    v90(v91);

    swift_release();
  }
  v92 = *(_QWORD *)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1A0));
  v93 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v92 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v92 + 40) = v93;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v94 = FocusBridge.host.getter();
  if (v94)
  {
    v96 = (void *)v94;
    v97 = v95;
    v98 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v97 + 8) + 16))(v98);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v99 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1A8));
  v100 = swift_unknownObjectWeakAssign();
  v101 = MEMORY[0x18D760234](v100);
  if (!v101)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v102 = (void *)v101;
  v103 = swift_getObjectType();
  v104 = v99;
  swift_retain();

  if (((*(uint64_t (**)(void))(v103 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v105 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v110 = v109;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v111 = *(void **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x1F0));
  v112 = swift_unknownObjectWeakAssign();
  v113 = MEMORY[0x18D760234](v112);
  if (!v113)
    goto LABEL_48;
  v114 = (void *)v113;
  v115 = v111;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v116 = objc_msgSend(v70, sel_traitCollection);
  v117 = objc_msgSend(v116, sel_userInterfaceIdiom);

  if (v117 == (id)1
    || (v118 = objc_msgSend(v70, sel_traitCollection),
        v119 = objc_msgSend(v118, sel_userInterfaceIdiom),
        v118,
        v119 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
    v121 = objc_msgSend(objc_allocWithZone(v120), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v122 = *(_QWORD *)((*v3 & *v70) + 0x200);
    v123 = *(void **)((char *)v70 + v122);
    *(_QWORD *)((char *)v70 + v122) = v121;

  }
  v124 = *(char **)((char *)v70 + v81);
  v125 = MEMORY[0x18D760234](&v124[direct field offset for ContextMenuBridge.host]);
  if (!v125)
LABEL_49:
    __break(1u);
  v126 = (void *)v125;
  v127 = swift_getObjectType();
  v128 = v124;
  swift_retain();

  if (((*(uint64_t (**)(void))(v127 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v129 = *(char **)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x220));
  *(_QWORD *)&v129[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v162;
  v130 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v130, v131);
  v132 = v129;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v133 = *(_QWORD *)((char *)v70 + *(_QWORD *)((*v3 & *v70) + 0x78));
  v134 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v133 + 24) = v134;
  swift_unknownObjectWeakAssign();
  v135 = *(_QWORD *)((*v3 & *v70) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v133 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  ObjectType = (_QWORD *)objc_opt_self();
  v136 = objc_msgSend(ObjectType, sel_defaultCenter);
  v137 = v70;
  v138 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v137, sel_willBeginSnapshotSession, v138, 0);

  v139 = v137;
  v140 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_didEndSnapshotSession, v140, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v142 = (void *)*MEMORY[0x1E0C99720];
  v143 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v143;
  v144 = (void *)*MEMORY[0x1E0DC5320];
  v145 = v142;
  v146 = v143;
  v147 = v144;
  v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v148[2] = 3;
  v148[6] = v147;
  v149 = v148[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v149, 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[5], 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[6], 0);
  swift_bridgeObjectRelease_n();
  v150 = *(_QWORD *)((char *)v70 + v135);
  v151 = *(_QWORD *)(v150 + 48);
  if (v151)
  {
    v152 = v139;
    swift_retain();
    objc_msgSend(v152, sel_addGestureRecognizer_, v151);
  }
  else
  {
    v153 = v139;
    swift_retain();
  }
  objc_msgSend(v139, sel_addGestureRecognizer_, *(_QWORD *)(v150 + 56), v162);
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v154 = objc_msgSend(ObjectType, sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v155 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v156 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v156)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v156; ++i)
    {
      v158 = *(_QWORD *)(v155 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityBooleanDidChange_, v158, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v159 = one-time initialization token for didUpdateListLayout;
  v160 = v139;
  if (v159 != -1)
    swift_once();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v160, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)&v167, (uint64_t)v168);
  v168[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v168, (uint64_t)v160);
  swift_endAccess();

  static Update.end()();
  return v160;
}

void specialized _IntelligenceSupport.SummarySymbolHost.font.setter(void *a1, void (*a2)(id))
{
  _QWORD *v2;
  _QWORD *v4;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  void *v17;

  v4 = v2;
  v6 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60);
  swift_beginAccess();
  v7 = (void *)*((_QWORD *)v6 + 1);
  v8 = (void *)*((_QWORD *)v6 + 2);
  v16 = *v6;
  v17 = v7;
  v9 = a1;
  v10 = v7;
  v11 = v8;
  a2(v9);
  v12 = (void *)*((_QWORD *)v6 + 1);
  v13 = (void *)*((_QWORD *)v6 + 2);
  *v6 = v16;
  *((_QWORD *)v6 + 1) = v17;
  *((_QWORD *)v6 + 2) = v8;
  v14 = v17;
  v15 = v8;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol>, (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol, MEMORY[0x1E0CE4F50], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<_IntelligenceSupport.AnimatingSummarySymbol> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

}

uint64_t type metadata accessor for _IntelligenceSupport.SummarySymbolHost()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _IntelligenceSupport.SummarySymbolHost;
  if (!type metadata singleton initialization cache for _IntelligenceSupport.SummarySymbolHost)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_18721FD38@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*a1) + 0x60));
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_18721FD9C@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _IntelligenceSupport.SummarySymbolHost.font : _IntelligenceSupport.SummarySymbolHost((uint64_t (*)(uint64_t))MEMORY[0x1E0CE4F18], a1);
}

void sub_18721FDB8(id *a1)
{
  id v1;

  v1 = *a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v1, MEMORY[0x1E0CE4F20]);

}

uint64_t sub_18721FDF8@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _IntelligenceSupport.SummarySymbolHost.font : _IntelligenceSupport.SummarySymbolHost((uint64_t (*)(uint64_t))MEMORY[0x1E0CE4F30], a1);
}

void sub_18721FE14(id *a1)
{
  id v1;

  v1 = *a1;
  specialized _IntelligenceSupport.SummarySymbolHost.font.setter(v1, MEMORY[0x1E0CE4F38]);

}

uint64_t type metadata completion function for _IntelligenceSupport.SummarySymbolHost()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for _IntelligenceSupport.SummarySymbolHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.isOn.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x990))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.isOn.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x998))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.isOn.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A0))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.font.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A8))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.font.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9B0))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.font.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9B8))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.foregroundColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9C0))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.foregroundColor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9C8))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.foregroundColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9D0))();
}

uint64_t dispatch thunk of _IntelligenceSupport.SummarySymbolHost.baseline.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9D8))();
}

uint64_t ObjC metadata update function for _IntelligenceSupport.SummarySymbolHost()
{
  return type metadata accessor for _IntelligenceSupport.SummarySymbolHost();
}

uint64_t type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputAccessoryBar and conformance InputAccessoryBar;
  if (!lazy protocol witness table cache variable for type InputAccessoryBar and conformance InputAccessoryBar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InputAccessoryBar, &type metadata for InputAccessoryBar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputAccessoryBar and conformance InputAccessoryBar);
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph;
  if (!lazy protocol witness table cache variable for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListViewGraph, &type metadata for PlatformItemListViewGraph);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEventDispatcher and conformance HoverEventDispatcher;
  if (!lazy protocol witness table cache variable for type HoverEventDispatcher and conformance HoverEventDispatcher)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEventDispatcher, &type metadata for HoverEventDispatcher);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEventDispatcher and conformance HoverEventDispatcher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilDoubleTapEventDispatcher, &type metadata for PencilDoubleTapEventDispatcher);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilSqueezeEventDispatcher, &type metadata for PencilSqueezeEventDispatcher);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyEventDispatcher and conformance KeyEventDispatcher;
  if (!lazy protocol witness table cache variable for type KeyEventDispatcher and conformance KeyEventDispatcher)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyEventDispatcher, &type metadata for KeyEventDispatcher);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEventDispatcher and conformance KeyEventDispatcher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)()
{
  uint64_t v0;

  return closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)(*(_QWORD *)(v0 + 16));
}

void type metadata accessor for WeakBox<Swift.AnyObject>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<Swift.AnyObject>)
  {
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>);
  }
}

uint64_t type metadata accessor for SheetBridge<InputAccessoryBar, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<InputAccessoryBar, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<InputAccessoryBar, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar();
    type metadata accessor for SheetBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for DragAndDropBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for TooltipBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for EditMenuBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for UIKitStatusBarBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for AVKitCaptureButtonBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for PencilEventsBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for ContextMenuBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>);
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>)
  {
    v2 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v4 = v3;
    v5 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v2, MEMORY[0x1E0CE7508]);
    v7 = type metadata accessor for PointerBridge(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>);
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  if (!*a2)
  {
    v10 = MEMORY[0x1E0CE7518];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v14[0] = v11;
    v14[1] = a3;
    v14[2] = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>, v10, MEMORY[0x1E0CE7508]);
    v14[3] = a4;
    v12 = a5(a1, v14);
    if (!v13)
      atomic_store(v12, a2);
  }
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

uint64_t _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  }
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<BarItemView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<BarItemView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<BarItemView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    type metadata accessor for SheetBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BarItemView and conformance BarItemView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarItemView and conformance BarItemView;
  if (!lazy protocol witness table cache variable for type BarItemView and conformance BarItemView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarItemView, &type metadata for BarItemView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarItemView and conformance BarItemView);
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BarItemView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type BarItemView and conformance BarItemView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t outlined init with copy of BarItemView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BarItemView(a2, a1);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<BarItemView, EditModeScopeModifier>, (uint64_t)&type metadata for BarItemView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BarItemView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<BarItemView, EditModeScopeModifier>, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8 = v7;
    v9[0] = a4();
    v9[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of BarItemView(uint64_t a1)
{
  destroy for BarItemView(a1);
  return a1;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView;
  if (!lazy protocol witness table cache variable for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedPresentation.RootView, &type metadata for BridgedPresentation.RootView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView);
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedPresentation.RootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedPresentation.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, Alert.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier();
    v4[0] = MEMORY[0x1E0CE7508];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, DocumentBaseModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

uint64_t *outlined retain of DocumentBaseModifier(uint64_t *a1)
{
  outlined copy of NavigationItemDescription?(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t outlined copy of NavigationItemDescription?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentBaseModifier>, EditModeScopeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
  }
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentBaseModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<AnyView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<AnyView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<AnyView, SheetPreference.Key>)
    type metadata accessor for SheetBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<AnyView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, Alert.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentSceneRootBoxModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for DocumentSceneRootBoxModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier();
    v4[0] = MEMORY[0x1E0CE7508];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentSceneRootBoxModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier;
  if (!lazy protocol witness table cache variable for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentSceneRootBoxModifier, &type metadata for DocumentSceneRootBoxModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier);
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Range<AttributedString.Index>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

uint64_t outlined retain of BoundInputsView(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<BoundInputsView, EditModeScopeModifier>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<BoundInputsView, EditModeScopeModifier>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = &protocol witness table for BoundInputsView;
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<BoundInputsView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<BoundInputsView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<BoundInputsView, SheetPreference.Key>)
    type metadata accessor for SheetBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, EditModeScopeModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, EditModeScopeModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    v4[0] = MEMORY[0x1E0CE0A30];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<_ViewList_View, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<_ViewList_View, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<_ViewList_View, SheetPreference.Key>)
    type metadata accessor for SheetBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView();
    type metadata accessor for SheetBridge();
  }
  return result;
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, RootModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, RootModifier>>);
  }
}

uint64_t type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<_IntelligenceSupport.AnimatingSummarySymbol, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, MEMORY[0x1E0CE4F50], (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<InputAccessoryBar, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, MEMORY[0x1E0CE4F50], (uint64_t (*)(void))lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol);
    v3[1] = MEMORY[0x1E0CE5420];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_IntelligenceSupport.AnimatingSummarySymbol, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type _IntelligenceSupport.AnimatingSummarySymbol and conformance _IntelligenceSupport.AnimatingSummarySymbol();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<EmptyView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, Alert.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<EmptyView, ActionSheet.Presentation>)
    type metadata accessor for DeprecatedAlertBridge();
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, EditModeScopeModifier>, MEMORY[0x1E0CE7C38], (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EmptyView, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, EditModeScopeModifier>, MEMORY[0x1E0CE7C38], (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    v4[0] = MEMORY[0x1E0CE7C28];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t type metadata accessor for SheetBridge<EmptyView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<EmptyView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<EmptyView, SheetPreference.Key>)
    type metadata accessor for SheetBridge();
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v13[0] = v10;
    v13[1] = a3;
    v13[2] = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v13[3] = a4;
    v11 = a5(a1, v13);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>);
}

void type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

void type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  }
}

uint64_t type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>);
}

void type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3[1] = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

uint64_t outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  }
}

uint64_t type metadata accessor for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    type metadata accessor for SheetBridge();
  }
  return result;
}

void type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (!*a2)
  {
    type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
    v13[0] = v10;
    v13[1] = a3;
    v13[2] = lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>();
    v13[3] = a4;
    v11 = a5(a1, v13);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, MEMORY[0x1E0CE0D20]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>);
}

void type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, (void (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for _UIHostingView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

void type metadata accessor for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
  }
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of BridgedNavigationView.RootView(uint64_t a1)
{
  destroy for StyleApplicator.EnumeratedView(a1);
  return a1;
}

uint64_t type metadata accessor for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
}

void type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
  }
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for SheetBridge();
  }
  return result;
}

void type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v13[0] = v10;
    v13[1] = a3;
    v13[2] = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v13[3] = a4;
    v11 = a5(a1, v13);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>);
  }
}

uint64_t outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
  }
}

uint64_t type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>);
  }
  return result;
}

uint64_t outlined destroy of TabItem.RootView(uint64_t a1)
{
  destroy for TabItem.RootView(a1);
  return a1;
}

uint64_t type metadata accessor for SheetBridge<TabItem.RootView, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<TabItem.RootView, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<TabItem.RootView, SheetPreference.Key>)
  {
    lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

uint64_t type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>;
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    type metadata accessor for DeprecatedAlertBridge();
  }
  return result;
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for DragAndDropBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for TooltipBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for EditMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for UIKitStatusBarBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for AVKitCaptureButtonBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for PencilEventsBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for UIKitSensoryFeedbackCache(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for ContextMenuBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>);
}

void type metadata accessor for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    v6 = type metadata accessor for PointerBridge(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>;
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA13EmptyModifierVGACyxq_GAA0F0A2aJRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, (uint64_t)&protocol witness table for TableViewListHeaderFooterContent);
    type metadata accessor for SheetBridge();
  }
  return result;
}

uint64_t closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)partial apply()
{
  return partial apply for closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)();
}

uint64_t View.indexViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for IndexViewStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for IndexViewStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexViewStyleModifier);
}

uint64_t dispatch thunk of IndexViewStyle._makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for _IndexViewStyleConfiguration()
{
  return &type metadata for _IndexViewStyleConfiguration;
}

uint64_t sub_1872270C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for IndexViewStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for IndexViewStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for IndexViewStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872271D4 + 4 * byte_187C16B60[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for IndexViewStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in IndexViewStyleModifier<A>()
{
  return &protocol witness table for IndexViewStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in IndexViewStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance IndexViewBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _IndexViewStyleConfiguration(v1, a1);
}

uint64_t IndexViewStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for IndexViewStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_18722759C()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t destroy for _IndexViewStyleConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _IndexViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = a2 + 24;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_retain();
  v8(a1 + 24, v5, v7);
  v9 = *(void **)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _IndexViewStyleConfiguration(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  __swift_assign_boxed_opaque_existential_1(a1 + 3, a2 + 3);
  v4 = (void *)a2[8];
  v5 = (void *)a1[8];
  a1[8] = v4;
  v6 = v4;

  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _IndexViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _IndexViewStyleConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _IndexViewStyleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexViewBody()
{
  return &type metadata for IndexViewBody;
}

unint64_t lazy protocol witness table accessor for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>)
  {
    type metadata accessor for IndexViewStyleModifier<DefaultIndexViewStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewStyleModifier<DefaultIndexViewStyle> and conformance IndexViewStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for IndexViewStyleModifier<DefaultIndexViewStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for IndexViewStyleModifier<DefaultIndexViewStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle();
    v4 = type metadata accessor for IndexViewStyleModifier(a1, (uint64_t)&type metadata for DefaultIndexViewStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for IndexViewStyleModifier<DefaultIndexViewStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle;
  if (!lazy protocol witness table cache variable for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultIndexViewStyle, &type metadata for DefaultIndexViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for IndexViewBody(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody;
  if (!lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewBody, &type metadata for IndexViewBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody;
  if (!lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewBody, &type metadata for IndexViewBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewBody and conformance IndexViewBody);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in IndexViewBody()
{
  lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of _IndexViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IndexViewStyleConfiguration(a2, a1, &type metadata for _IndexViewStyleConfiguration);
  return a2;
}

char **associated type witness table accessor for WidgetConfiguration.Body : WidgetConfiguration in EmptyWidgetConfiguration()
{
  return &protocol witness table for Never;
}

ValueMetadata *type metadata accessor for EmptyWidgetConfiguration()
{
  return &type metadata for EmptyWidgetConfiguration;
}

void static Section<>._makeRows(content:inputs:)(int *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  __int128 v32;
  _BYTE v33[28];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;

  *(_QWORD *)&v32 = a7;
  *((_QWORD *)&v32 + 1) = a8;
  v92 = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v13 = a2[7];
  v88 = a2[6];
  v89 = v13;
  v90 = a2[8];
  v91 = *((_QWORD *)a2 + 18);
  v14 = a2[3];
  v84 = a2[2];
  v85 = v14;
  v15 = a2[5];
  v86 = a2[4];
  v87 = v15;
  v16 = a2[1];
  v82 = *a2;
  v83 = v16;
  v43 = a3;
  v44 = a4;
  v45 = a5;
  v46 = a6;
  v47 = a7;
  v48 = a8;
  type metadata accessor for Section(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  type metadata accessor for Binding<Bool>?();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<Bool>?>();
  v28 = _GraphValue.value.getter();
  v81 = v91;
  v78 = v88;
  v79 = v89;
  v80 = v90;
  v74 = v84;
  v75 = v85;
  v76 = v86;
  v77 = v87;
  v72 = v82;
  v73 = v83;
  outlined retain of _TableRowInputs((uint64_t)&v82);
  DepthTrait.init(traits:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait();
  v17 = Attribute.init<A>(body:value:flags:update:)();
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = v32;
  _GraphValue.subscript.getter();
  v67 = v78;
  v68 = v79;
  v69 = v80;
  v63 = v74;
  v64 = v75;
  v65 = v76;
  v66 = v77;
  v61 = v72;
  v62 = v73;
  v70 = v81;
  v71 = v17;
  (*(void (**)(unint64_t *__return_ptr, __int128 *, __int128 *, uint64_t, uint64_t))(a6 + 48))(&v49, &v51, &v61, a3, a6);
  v18 = v49;
  v30 = v50;
  v57 = v88;
  v58 = v89;
  v59 = v90;
  v60 = v91;
  v53 = v84;
  v54 = v85;
  v55 = v86;
  v56 = v87;
  v51 = v82;
  v52 = v83;
  outlined retain of _TableRowInputs((uint64_t)&v82);
  DepthTrait.init(traits:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait();
  v19 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v33[20] = a3;
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v29 = a6;
  v37 = v32;
  LODWORD(v61) = v12;
  _GraphValue.subscript.getter();
  v67 = v57;
  v68 = v58;
  v69 = v59;
  v63 = v53;
  v64 = v54;
  v65 = v55;
  v66 = v56;
  v61 = v51;
  v62 = v52;
  v70 = v60;
  v71 = v19;
  (*(void (**)(unint64_t *__return_ptr, _BYTE *, __int128 *, uint64_t, _QWORD))(v32 + 48))(&v49, v33, &v61, a4, v32);
  v20 = v49;
  v21 = v50;
  *(_QWORD *)&v61 = v18;
  DWORD2(v61) = v30;
  v22 = PreferencesOutputs.subscript.getter();
  if ((v22 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v23 = v22;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v61 = v20;
    DWORD2(v61) = v21;
    v24 = PreferencesOutputs.subscript.getter();
    if ((v24 & 0x100000000) == 0)
    {
      v25 = v24;
      v26 = swift_bridgeObjectRelease();
      v49 = __PAIR64__(v23, v28);
      v50 = v25;
      MEMORY[0x1E0C80A78](v26, v27);
      *(_QWORD *)&v61 = a3;
      *((_QWORD *)&v61 + 1) = a4;
      *(_QWORD *)&v62 = a5;
      *((_QWORD *)&v62 + 1) = v29;
      v63 = v32;
      type metadata accessor for Section<>.HierarchicalTableRowList();
    }
  }
  __break(1u);
  JUMPOUT(0x1872280A0);
}

uint64_t closure #1 in static Section<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for Section(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 52);
  v12[2] = v5;
  type metadata accessor for Binding<Bool>?();
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t partial apply for closure #1 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static Section<>._makeRows(content:inputs:));
}

void type metadata accessor for Binding<Bool>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Bool>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>?);
  }
}

void type metadata accessor for _GraphValue<Binding<Bool>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Binding<Bool>?>)
  {
    type metadata accessor for Binding<Bool>?();
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<Bool>?>);
  }
}

uint64_t outlined retain of _TableRowInputs(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #2 in static Section<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for Section(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #3 in static Section<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v6 = type metadata accessor for Section(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 44);
  v11[2] = v6;
  v11[3] = a3;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a3, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance Section<A, B, C><>.HeaderViewVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)(a2, a3, a4, a9, a5, a6, a7, a8);
}

void Section<>.HierarchicalTableRowList.value.getter()
{
  uint64_t Value;
  uint64_t v1;
  _BYTE v2[40];
  _BYTE v3[40];

  Value = AGGraphGetValue();
  outlined init with copy of TableRowList(Value, (uint64_t)v3);
  v1 = AGGraphGetValue();
  outlined init with copy of TableRowList(v1, (uint64_t)v2);
  type metadata accessor for Binding<Bool>?();
  AGGraphGetValue();
  type metadata accessor for Section<>.HierarchicalGenerator();
}

uint64_t sub_187228504(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for Section<A, B, C><>.HierarchicalGenerator;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v10;
  *(_OWORD *)(v5 + 32) = v11;
  *(_OWORD *)(v5 + 56) = v7;
  *v1 = v5;
  *(_QWORD *)(v5 + 48) = v12;
  *(_OWORD *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 88) = v9;
  *(_QWORD *)(v5 + 96) = v2;
  *(_QWORD *)(v5 + 104) = v3;
  *(_BYTE *)(v5 + 112) = v4;
  return outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
}

void protocol witness for Rule.value.getter in conformance Section<A, B, C><>.HierarchicalTableRowList()
{
  Section<>.HierarchicalTableRowList.value.getter();
}

uint64_t Section<>.HierarchicalGenerator.visitRows<A>(applying:from:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  uint64_t v13;
  _QWORD v17[8];
  _QWORD v18[3];
  ValueMetadata *v19;
  _UNKNOWN **v20;

  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v7);
  if (*(_QWORD *)(v5 + 88))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = v8;
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](v18, v9);
    swift_release();
    swift_release();
    if ((v18[0] & 1) == 0)
    {
      v19 = &type metadata for EmptyTableRowGenerator;
      v20 = &protocol witness table for EmptyTableRowGenerator;
      if (*a2)
        goto LABEL_4;
LABEL_6:
      memset(&v17[5], 0, 24);
      outlined init with copy of TableRowList(v5, (uint64_t)v17);
      __swift_project_boxed_opaque_existential_1(v17, v17[3]);
      type metadata accessor for Section<>.HeaderViewVisitor();
    }
  }
  outlined init with copy of TableRowList(v5 + 40, (uint64_t)v18);
  if (!*a2)
    goto LABEL_6;
LABEL_4:
  v10 = v19;
  v11 = v20;
  __swift_project_boxed_opaque_existential_1(v18, (uint64_t)v19);
  LOBYTE(v10) = ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **))v11[1])(a1, a2, a4, a5, v10, v11);
  outlined destroy of TableRowList((uint64_t)v18);
  return v10 & 1;
}

uint64_t Section<>.HierarchicalGenerator.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  outlined init with copy of TableRowList(v0, (uint64_t)v8);
  v2 = v9;
  v3 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  LOBYTE(v2) = TableRowGenerator.isEmpty.getter(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if ((v2 & 1) != 0)
    return 1;
  outlined init with copy of TableRowList(v1, (uint64_t)v8);
  v5 = v9;
  v6 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v4;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance Section<A, B, C><>.HierarchicalGenerator(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Section<>.HierarchicalGenerator.visitRows<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t static Section<>._tableRowCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  BOOL v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v9 = a1[7];
  v29 = a1[6];
  v30 = v9;
  v31 = a1[8];
  v32 = *((_QWORD *)a1 + 18);
  v10 = a1[3];
  v25 = a1[2];
  v26 = v10;
  v11 = a1[5];
  v27 = a1[4];
  v28 = v11;
  v12 = a1[1];
  v23 = *a1;
  v24 = v12;
  v13 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a6 + 56))(&v23, a3, a6);
  if ((v14 & 1) != 0)
    return v13;
  v15 = a1[7];
  v29 = a1[6];
  v30 = v15;
  v31 = a1[8];
  v32 = *((_QWORD *)a1 + 18);
  v16 = a1[3];
  v25 = a1[2];
  v26 = v16;
  v17 = a1[5];
  v27 = a1[4];
  v28 = v17;
  v18 = a1[1];
  v23 = *a1;
  v24 = v18;
  result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a5 + 56))(&v23, a2, a5);
  v21 = (v20 & 1) != 0 ? 0 : result;
  v22 = __OFADD__(v13, v21);
  v13 += v21;
  if (!v22)
    return v13;
  __break(1u);
  return result;
}

uint64_t static Section<>._containsOutlineSymbol(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v9 = a1[7];
  v25 = a1[6];
  v26 = v9;
  v27 = a1[8];
  v28 = *((_QWORD *)a1 + 18);
  v10 = a1[3];
  v21 = a1[2];
  v22 = v10;
  v11 = a1[5];
  v23 = a1[4];
  v24 = v11;
  v12 = a1[1];
  v19 = *a1;
  v20 = v12;
  if (((*(uint64_t (**)(__int128 *))(a5 + 64))(&v19) & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v14 = a1[7];
    v25 = a1[6];
    v26 = v14;
    v27 = a1[8];
    v28 = *((_QWORD *)a1 + 18);
    v15 = a1[3];
    v21 = a1[2];
    v22 = v15;
    v16 = a1[5];
    v23 = a1[4];
    v24 = v16;
    v17 = a1[1];
    v19 = *a1;
    v20 = v17;
    v13 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a6 + 64))(&v19, a3, a6);
  }
  return v13 & 1;
}

void Section<>.init<A, B>(header:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TableHeaderRowContent();
}

uint64_t sub_187228CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v19 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v7 + 16))(v8, v2, v5, v11);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32))(v13, v8, v5);
  (*(void (**)(uint64_t))(v9 - 128))(v14);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
  v16 = type metadata accessor for EmptyTableRowContent(0, v4, v3, v15);
  return Section.init(header:content:footer:)((uint64_t)v13, v6, v17, a1, *(_QWORD *)(v9 - 144), v16, *(_QWORD *)(v9 - 120));
}

void Section<>.init<A, B>(content:header:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TableHeaderRowContent();
}

uint64_t sub_187228E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v19 - v12;
  (*(void (**)(double))(v9 - 144))(v11);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32))(v13, v8, v6);
  (*(void (**)(uint64_t))(v9 - 128))(v14);
  v16 = type metadata accessor for EmptyTableRowContent(0, v4, v3, v15);
  return Section.init(header:content:footer:)((uint64_t)v13, v5, v17, a1, v2, v16, *(_QWORD *)(v9 - 120));
}

void Section<>.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)&v10 = Text.init(_:tableName:bundle:comment:)();
  *((_QWORD *)&v10 + 1) = v6;
  v11 = v7 & 1;
  v12 = v8;
  swift_getAssociatedConformanceWitness();
  v9 = (*(uint64_t (**)(__int128 *, __int128 *, _QWORD))(*(_QWORD *)(MEMORY[0x1E0CE6CF8] - 8) + 32))(&v13, &v10, MEMORY[0x1E0CE6CF8]);
  v10 = v13;
  v11 = v14;
  v12 = v15;
  a5(v9);
  type metadata accessor for TableHeaderRowContent();
}

uint64_t sub_187229028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for EmptyTableRowContent(0, v6, v8, a4);
  return Section.init(header:content:footer:)(v9 - 144, v7, v12, a1, v4, v11, v5);
}

void Section<>.init<A, B>(_:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  __int128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v21[0] = a2;
  v21[1] = a5;
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = *(_QWORD *)(v8 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  *(_QWORD *)&v22 = Text.init<A>(_:)();
  *((_QWORD *)&v22 + 1) = v15;
  v23 = v16 & 1;
  v24 = v17;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = MEMORY[0x1E0CE6CF8];
  v20 = (*(uint64_t (**)(__int128 *, __int128 *, _QWORD))(*(_QWORD *)(MEMORY[0x1E0CE6CF8] - 8) + 32))(&v25, &v22, MEMORY[0x1E0CE6CF8]);
  v22 = v25;
  v23 = v26;
  v24 = v27;
  ((void (*)(uint64_t))v21[0])(v20);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a4);
  v21[2] = a3;
  v21[3] = v19;
  v21[4] = AssociatedConformanceWitness;
  v21[5] = MEMORY[0x1E0CE6C58];
  type metadata accessor for TableHeaderRowContent();
}

uint64_t sub_1872291D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for EmptyTableRowContent(0, v6, v5, a4);
  return Section.init(header:content:footer:)(v8 - 144, v7, v11, a1, v4, v10, *(_QWORD *)(v8 - 184));
}

uint64_t Section<>.init<A>(content:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a1();
  v13 = type metadata accessor for EmptyTableRowContent(0, a4, AssociatedConformanceWitness, v12);
  return Section.init(header:content:footer:)(v13, (uint64_t)v10, v14, v13, a3, v13, a5);
}

void protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> Section<A, B, C>(int *a1, __int128 *a2, uint64_t *a3, uint64_t a4)
{
  static Section<>._makeRows(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), *(_QWORD *)(a4 - 24));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <> Section<A, B, C>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Section<>._tableRowCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> Section<A, B, C>(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Section<>._containsOutlineSymbol(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void Section<>.init<A, B>(isExpanded:content:header:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  MEMORY[0x1E0C80A78](a11, a2);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TableHeaderRowContent();
}

uint64_t sub_1872293E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v14 = type metadata accessor for EmptyTableRowContent(255, v5, v6, a4);
  v15 = v8 + *(int *)(type metadata accessor for Section(0, a1, v4, v14) + 52);
  v16 = v10();
  (*(void (**)(uint64_t))(v12 - 144))(v16);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v11, v9);
  v18 = *(_QWORD *)(v12 - 128);
  *(_QWORD *)v15 = *(_QWORD *)(v12 - 136);
  *(_QWORD *)(v15 + 8) = v18;
  *(_BYTE *)(v15 + 16) = *(_DWORD *)(v12 - 116);
  return result;
}

void Section<>.init<A>(_:isExpanded:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  Section<>.init<A, B>(isExpanded:content:header:)(a5, a6, a7, a8, a9, (uint64_t)partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:), (uint64_t)v12, a10, a11, MEMORY[0x1E0CE6CF8], a12);
}

uint64_t sub_1872294E4()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void Section<>.init<A, B>(_:isExpanded:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = a7;
  v13 = a8;
  v14 = a9;
  v15 = a10;
  v16 = a11;
  v17 = a1;
  Section<>.init<A, B>(isExpanded:content:header:)(a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in Section<>.init<A, B>(_:isExpanded:content:), (uint64_t)v11, a7, a8, MEMORY[0x1E0CE6CF8], a10);
}

uint64_t sub_187229574()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t closure #1 in Section<>.init<A, B>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t static EmptyTableRowContent._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 136);
  v3 = *(_DWORD *)(a2 + 144);
  PreferencesOutputs.init()();
  v7 = &type metadata for EmptyTableRowGenerator;
  v8 = &protocol witness table for EmptyTableRowGenerator;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<TableRowList>, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<TableRowList> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of TableRowList((uint64_t)&v5);
  v5 = v2;
  v6 = v3;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t static EmptyTableRowContent._tableRowCount(inputs:)()
{
  return 0;
}

uint64_t static EmptyTableRowContent._containsOutlineSymbol(inputs:)()
{
  return 0;
}

uint64_t TableHeaderRowContent.tableRowBody.getter()
{
  return TableRowSpan.init(content:)((uint64_t (*)(void))partial apply for closure #1 in TableHeaderRowContent.tableRowBody.getter);
}

uint64_t closure #1 in TableHeaderRowContent.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v9, v10, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v8, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
}

uint64_t static TableHeaderRowContent._containsOutlineSymbol(inputs:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait;
  if (!lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE44D0], MEMORY[0x1E0CE44E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait);
  }
  return result;
}

uint64_t partial apply for closure #2 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in static Section<>._makeRows(content:inputs:));
}

uint64_t partial apply for closure #3 in static Section<>._makeRows(content:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in static Section<>._makeRows(content:inputs:));
}

void type metadata accessor for Section<>.HierarchicalTableRowList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for implicit closure #1 in _TableRowOutputs.writeRowListPreference(_:inputs:)()
{
  uint64_t v0;

  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v0 + 16));
}

uint64_t outlined release of _TableRowInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for TableHeaderRowContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for EmptyTableRowContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyTableRowContent);
}

uint64_t partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a1);
}

uint64_t partial apply for closure #1 in Section<>.init<A, B>(_:isExpanded:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Section<>.init<A, B>(_:isExpanded:content:)(*(_QWORD *)(v1 + 56), a1);
}

unint64_t lazy protocol witness table accessor for type External<TableRowList> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<TableRowList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<TableRowList> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<TableRowList>, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<TableRowList> and conformance External<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in TableHeaderRowContent.tableRowBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TableHeaderRowContent.tableRowBody.getter(v1[6], v1[2], v1[3], a1);
}

_UNKNOWN **associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in <> Section<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in <> Section<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for EmptyTableRowContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyTableRowContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableHeaderRowContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for TableHeaderRowContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187229B70 + 4 * byte_187C16CE0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TableHeaderRowContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_187229D70()
{
  type metadata accessor for TableRowSpan();
}

uint64_t sub_187229D90(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowSpan<A, B>, a1);
}

void base witness table accessor for _AttributeBody in Section<A, B, C><>.HierarchicalTableRowList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = v8;
  v10 = *a3;
  v14[1] = *(_OWORD *)(a4 + 16);
  v15 = *(_QWORD *)(a4 + 32);
  v16 = a5;
  v17 = a6;
  v18 = *(_OWORD *)(a4 + 40);
  v19 = *(_QWORD *)(a4 + 56);
  v20 = a7;
  v21 = a8;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:), (uint64_t)v14, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v11, (uint64_t)&v22);
  v12 = v22;
  swift_release();
  *v9 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[1] = v10;
  return 0;
}

void type metadata accessor for Section<>.HierarchicalGenerator()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187229E90()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (*(_QWORD *)(v0 + 104))
  {
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t destroy for Section<>.HierarchicalGenerator(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  result = __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  if (*(_QWORD *)(a1 + 88))
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Section<>.HierarchicalGenerator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(_QWORD *)(a2 + 88);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v6;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  }
  return a1;
}

uint64_t assignWithCopy for Section<>.HierarchicalGenerator(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  v4 = (_OWORD *)(a1 + 80);
  v5 = (_OWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    }
    else
    {
      outlined destroy of AccessibilityScrollableContext?(a1 + 80, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v7 = *(_BYTE *)(a2 + 96);
      *v4 = *v5;
      *(_BYTE *)(a1 + 96) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *v5;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *v4 = v8;
  }
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Section<>.HierarchicalGenerator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 88))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 88);
  if (!v5)
  {
    outlined destroy of AccessibilityScrollableContext?(a1 + 80, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
LABEL_5:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    return a1;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_QWORD *)(a1 + 88) = v5;
  swift_release();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for Section<>.HierarchicalGenerator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Section<>.HierarchicalGenerator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Section<>.HeaderViewVisitor()
{
  JUMPOUT(0x18D75FF28);
}

_QWORD *assignWithCopy for Section<>.HeaderViewVisitor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in Section<>.HeaderViewVisitor.visit<A, B>(rowValue:view:children:traits:)(a1, a2);
}

void SystemSegmentItem.hash(into:)()
{
  id *v0;
  id *v1;
  id v2;
  uint64_t v3;
  void *v4;
  Swift::UInt v5;
  Swift::UInt v6;

  v1 = v0;
  if (*v0)
  {
    v2 = objc_msgSend(*v0, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v3 = PlatformItemList.Item.image.getter();
  if (v3)
  {
    v4 = (void *)v3;
    Hasher._combine(_:)(1u);
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*((_BYTE *)v1 + 56));
  if (v1[60])
  {
    v5 = *((unsigned __int8 *)v1 + 496);
    v6 = (Swift::UInt)v1[61];
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemSegmentItem()
{
  Hasher.init(_seed:)();
  SystemSegmentItem.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemSegmentItem()
{
  Hasher.init(_seed:)();
  SystemSegmentItem.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static SystemSegmentItem.== infix(_:_:)(id *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  char v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  id *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;

  v4 = type metadata accessor for SystemSegmentItem();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v91 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v95 = (char *)&v91 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v94 = (uint64_t)&v91 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v96 = (uint64_t)&v91 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v97 = (uint64_t)&v91 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v99 = (uint64_t *)((char *)&v91 - v26);
  MEMORY[0x1E0C80A78](v27, v28);
  v93 = (char *)&v91 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v91 - v32;
  v36 = MEMORY[0x1E0C80A78](v34, v35);
  v38 = (char *)&v91 - v37;
  v98 = a1;
  if (*a1)
  {
    v39 = objc_msgSend(*a1, sel_string, v36);
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    v43 = *a2;
    if (!*a2)
    {
      if (!v42)
        goto LABEL_14;
      goto LABEL_25;
    }
    v44 = v7;
    v45 = v11;
  }
  else
  {
    v43 = *a2;
    if (!*a2)
    {
LABEL_14:
      v50 = (uint64_t)v98;
      outlined init with copy of SystemSegmentItem((uint64_t)v98, (uint64_t)v38);
      outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v33);
      v51 = v93;
      goto LABEL_15;
    }
    v44 = v7;
    v45 = v11;
    v42 = 0;
    v40 = 0;
  }
  v46 = objc_msgSend(v43, sel_string);
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v49 = v48;

  if (!v42)
  {
    v11 = v45;
    v7 = v44;
    if (!v49)
      goto LABEL_14;
LABEL_25:
    swift_bridgeObjectRelease();
    v50 = (uint64_t)v98;
    outlined init with copy of SystemSegmentItem((uint64_t)v98, (uint64_t)v38);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v33);
    v51 = v93;
    goto LABEL_26;
  }
  if (!v49)
  {
    v11 = v45;
    v7 = v44;
    goto LABEL_25;
  }
  if (v40 == v47 && v42 == v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v45;
    v7 = v44;
    goto LABEL_14;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = (uint64_t)v98;
  outlined init with copy of SystemSegmentItem((uint64_t)v98, (uint64_t)v38);
  outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v33);
  v11 = v45;
  v7 = v44;
  v51 = v93;
  if ((v66 & 1) == 0)
    goto LABEL_26;
LABEL_15:
  v52 = (void *)PlatformItemList.Item.image.getter();
  v53 = (void *)PlatformItemList.Item.image.getter();
  v54 = v53;
  if (!v52)
  {

    if (!v54)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      outlined init with copy of SystemSegmentItem(v50, (uint64_t)v51);
      v55 = v99;
      outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v99);
      goto LABEL_21;
    }
    goto LABEL_26;
  }

  if (!v54)
  {
LABEL_26:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined init with copy of SystemSegmentItem(v50, (uint64_t)v51);
    v55 = v99;
    outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v99);
    goto LABEL_27;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  outlined init with copy of SystemSegmentItem(v50, (uint64_t)v51);
  v55 = v99;
  outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v99);
  if (v52 != v54)
  {
LABEL_27:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v62 = (uint64_t)v95;
    v61 = v96;
    v56 = v97;
LABEL_28:
    outlined init with copy of SystemSegmentItem(v50, v56);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v61);
    goto LABEL_29;
  }
LABEL_21:
  v56 = v97;
  if (*((_QWORD *)v51 + 66))
  {
    v57 = *((_QWORD *)v51 + 67);
    v58 = *((_QWORD *)v51 + 68);
    v59 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v59, (uint64_t)&v102);
    swift_bridgeObjectRelease();
    if (v102)
    {
      v102 = v57;
      v103 = v58;
      v100 = 0;
      v101 = 0;
      swift_retain();
      swift_retain();
      v92 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
      v93 = v60;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v92 = 0;
      v93 = 0;
    }
    v55 = v99;
    v67 = v99[66];
    if (v67)
      goto LABEL_40;
LABEL_37:
    v68 = 0;
    goto LABEL_44;
  }
  v92 = 0;
  v93 = 0;
  v67 = v55[66];
  if (!v67)
    goto LABEL_37;
LABEL_40:
  v69 = v55[67];
  v70 = v55[68];
  v71 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v71, (uint64_t)&v102);
  swift_bridgeObjectRelease();
  if (v102)
  {
    v102 = v69;
    v103 = v70;
    v100 = 0;
    v101 = 0;
    swift_retain();
    swift_retain();
    v67 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    v68 = v72;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
  v50 = (uint64_t)v98;
LABEL_44:
  v62 = (uint64_t)v95;
  if (!v93)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    if (!v68)
      goto LABEL_51;
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  if (!v68)
  {
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    swift_bridgeObjectRelease_n();
LABEL_53:
    v61 = v96;
    goto LABEL_28;
  }
  if (v92 == v67 && v93 == v68)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    swift_bridgeObjectRelease();
LABEL_51:
    outlined init with copy of SystemSegmentItem(v50, v56);
    v61 = v96;
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v96);
    goto LABEL_55;
  }
  v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  v56 = v97;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  swift_bridgeObjectRelease();
  outlined init with copy of SystemSegmentItem(v50, v56);
  v61 = v96;
  outlined init with copy of SystemSegmentItem((uint64_t)a2, v96);
  if ((v73 & 1) == 0)
  {
LABEL_29:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v63 = v94;
    outlined init with copy of SystemSegmentItem(v50, v94);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v62);
LABEL_30:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v63, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined init with copy of SystemSegmentItem(v50, (uint64_t)v11);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v7);
LABEL_31:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    return 0;
  }
LABEL_55:
  if (*(_QWORD *)(v56 + 528))
  {
    v74 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v74, (uint64_t)&v102);
    swift_bridgeObjectRelease();
    v75 = v103;
    if (!*(_QWORD *)(v61 + 528))
    {
      if (v103)
        goto LABEL_79;
      goto LABEL_70;
    }
    v76 = v102;
    v77 = v104;
  }
  else
  {
    if (!*(_QWORD *)(v61 + 528))
      goto LABEL_70;
    v77 = 0;
    v75 = 0;
    v76 = 0;
  }
  v78 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v78, (uint64_t)&v102);
  swift_bridgeObjectRelease();
  if (!v75)
  {
    v56 = v97;
    if (v103)
    {
LABEL_79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
LABEL_70:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v63 = v94;
    outlined init with copy of SystemSegmentItem(v50, v94);
    outlined init with copy of SystemSegmentItem((uint64_t)a2, v62);
    goto LABEL_71;
  }
  if (!v103)
  {
    v56 = v97;
    goto LABEL_79;
  }
  v79 = v104;
  if ((v76 != v102 || v75 != v103) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61 = v96;
    v56 = v97;
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v97, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v96, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  v63 = v94;
  outlined init with copy of SystemSegmentItem(v50, v94);
  outlined init with copy of SystemSegmentItem((uint64_t)a2, v62);
  if (v79 != v77)
    goto LABEL_30;
LABEL_71:
  v80 = v63;
  v81 = *(unsigned __int8 *)(v63 + 56);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v80, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  v82 = *(unsigned __int8 *)(v62 + 56);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
  outlined init with copy of SystemSegmentItem(v50, (uint64_t)v11);
  outlined init with copy of SystemSegmentItem((uint64_t)a2, (uint64_t)v7);
  if (v81 != v82)
    goto LABEL_31;
  v83 = *((_QWORD *)v11 + 60);
  v84 = *((_QWORD *)v7 + 60);
  if (v83)
  {
    if (v84)
    {
      v85 = v7;
      v86 = *((_QWORD *)v11 + 61);
      v87 = v11[496];
      v88 = *((_QWORD *)v85 + 61);
      v89 = (uint64_t)v85;
      v90 = v85[496];
      if (*((_QWORD *)v11 + 59) == *((_QWORD *)v85 + 59) && v83 == v84)
      {
        if (v86 != v88)
        {
          v64 = 0;
LABEL_88:
          swift_bridgeObjectRetain_n();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v89, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
          swift_bridgeObjectRelease_n();
          return v64;
        }
      }
      else
      {
        v64 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v86 != v88)
          goto LABEL_88;
      }
      v64 = v87 == v90;
      goto LABEL_88;
    }
    swift_bridgeObjectRetain_n();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    if (!v84)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for SystemSegmentItem()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemSegmentItem;
  if (!type metadata singleton initialization cache for SystemSegmentItem)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemSegmentItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for SystemSegmentItem(char *a1, char **a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  uint64_t v79;
  void (*v80)(char *, _BYTE *, uint64_t);
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int (*v90)(_BYTE *, uint64_t, uint64_t);
  uint64_t v91;
  char *__dsta;
  char *__dst;
  int *v94;

  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = &v6[(v5 + 16) & ~(unint64_t)v5];
    goto LABEL_47;
  }
  v94 = (int *)v4;
  v8 = a2[1];
  v7 = a2[2];
  *((_QWORD *)a1 + 1) = v8;
  *((_QWORD *)a1 + 2) = v7;
  *((_QWORD *)a1 + 3) = a2[3];
  a1[32] = *((_BYTE *)a2 + 32);
  v9 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v9;
  a1[56] = *((_BYTE *)a2 + 56);
  v10 = a1 + 64;
  v11 = a2 + 8;
  v12 = (unint64_t)a2[23];
  v13 = v6;
  v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *v10 = *v11;
      a1[72] = *((_BYTE *)a2 + 72);
    }
    else
    {
      v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((_BYTE *)a2 + 72));
      *((_QWORD *)a1 + 8) = v25;
      a1[72] = v24;
      v12 = (unint64_t)a2[23];
    }
    *((_QWORD *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((_BYTE *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((_BYTE *)a2 + 124);
    v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((_BYTE *)a2 + 162);
    a1[163] = *((_BYTE *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      v28 = (uint64_t)a2[21];
      v29 = (uint64_t)a2[22];
      v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((_QWORD *)a1 + 21) = v28;
      *((_QWORD *)a1 + 22) = v29;
      *((_QWORD *)a1 + 23) = v12;
      *((_QWORD *)a1 + 24) = v30;
    }
    v31 = a2[26];
    *((_QWORD *)a1 + 25) = a2[25];
    *((_QWORD *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((_BYTE *)a2 + 224);
    v32 = a2[29];
    *((_QWORD *)a1 + 29) = v32;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((_BYTE *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v33 = v32;
    v20 = a2[32];
    if (v20)
      goto LABEL_4;
LABEL_15:
    v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  v15 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
  v16 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v16;
  v17 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v17;
  v18 = *((_OWORD *)a2 + 5);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  v19 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v19;
  v20 = a2[32];
  if (!v20)
    goto LABEL_15;
LABEL_4:
  *((_QWORD *)a1 + 31) = a2[31];
  *((_QWORD *)a1 + 32) = v20;
  v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2)
    v22 = v21;
  *((_QWORD *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((_BYTE *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  v23 = a2[36];
  *((_QWORD *)a1 + 35) = a2[35];
  *((_QWORD *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  v35 = (unint64_t)a2[41];
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((_QWORD *)a1 + 49) = a2[49];
    v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    v39 = a2[37];
    v40 = (uint64_t)a2[38];
    v41 = (uint64_t)a2[39];
    v42 = (uint64_t)a2[40];
    v43 = (uint64_t)a2[42];
    v44 = (uint64_t)a2[43];
    v45 = a2[44];
    v86 = (uint64_t)a2[45];
    v87 = (uint64_t)a2[46];
    v88 = (uint64_t)a2[47];
    v89 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v86, v87, v88, (char)v89, (uint64_t)__dsta);
    *((_QWORD *)a1 + 37) = v39;
    *((_QWORD *)a1 + 38) = v40;
    *((_QWORD *)a1 + 39) = v41;
    *((_QWORD *)a1 + 40) = v42;
    *((_QWORD *)a1 + 41) = v35;
    *((_QWORD *)a1 + 42) = v43;
    *((_QWORD *)a1 + 43) = v44;
    *((_QWORD *)a1 + 44) = v45;
    *((_QWORD *)a1 + 45) = v86;
    *((_QWORD *)a1 + 46) = v87;
    *((_QWORD *)a1 + 47) = v88;
    *((_QWORD *)a1 + 48) = v89;
    *((_QWORD *)a1 + 49) = __dsta;
  }
  v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((_BYTE *)a2 + 404);
    if (v46)
    {
      v49 = a2[52];
      *((_QWORD *)a1 + 51) = v46;
      *((_QWORD *)a1 + 52) = v49;
      swift_retain();
      v50 = a2[53];
      if (v50)
        goto LABEL_23;
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      v50 = a2[53];
      if (v50)
      {
LABEL_23:
        v51 = a2[54];
        *((_QWORD *)a1 + 53) = v50;
        *((_QWORD *)a1 + 54) = v51;
        swift_retain();
        v52 = a2[55];
        if (v52)
        {
LABEL_24:
          v53 = a2[56];
          *((_QWORD *)a1 + 55) = v52;
          *((_QWORD *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((_QWORD *)a1 + 57) = a2[57];
          a1[464] = *((_BYTE *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    v52 = a2[55];
    if (v52)
      goto LABEL_24;
    goto LABEL_27;
  }
  v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((_BYTE *)a2 + 464);
  v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  v54 = a2[60];
  *((_QWORD *)a1 + 59) = a2[59];
  *((_QWORD *)a1 + 60) = v54;
  *((_QWORD *)a1 + 61) = a2[61];
  a1[496] = *((_BYTE *)a2 + 496);
  v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    v56 = a2[64];
    *((_QWORD *)a1 + 63) = v55;
    *((_QWORD *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  v57 = a2[66];
  if (v57)
  {
    *((_QWORD *)a1 + 66) = v57;
    *((_QWORD *)a1 + 67) = a2[67];
    *((_QWORD *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((_QWORD *)a1 + 68) = a2[68];
  }
  v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((_QWORD *)a1 + 71) = a2[71];
  }
  else
  {
    *((_QWORD *)a1 + 69) = v58;
    v59 = a2[70];
    swift_retain();
    if (v59)
    {
      v60 = a2[71];
      *((_QWORD *)a1 + 70) = v59;
      *((_QWORD *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  v61 = a2[72];
  *((_QWORD *)a1 + 72) = v61;
  *((_QWORD *)a1 + 73) = a2[73];
  *((_QWORD *)a1 + 74) = a2[74];
  *((_QWORD *)a1 + 75) = a2[75];
  *((_QWORD *)a1 + 76) = a2[76];
  *((_QWORD *)a1 + 77) = a2[77];
  *((_QWORD *)a1 + 78) = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((_BYTE *)a2 + 634);
  v62 = v94[28];
  __dst = &a1[v62];
  v63 = (char *)a2 + v62;
  v64 = type metadata accessor for CommandOperation();
  v65 = *(_QWORD *)(v64 - 8);
  v90 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48);
  v66 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v90(v63, 1, v64))
  {
    type metadata accessor for CommandOperation?(0);
    memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    v68 = v94;
  }
  else
  {
    v91 = v65;
    *__dst = *v63;
    v69 = v64;
    v70 = *(int *)(v64 + 20);
    v71 = &__dst[v70];
    v72 = &v63[v70];
    v73 = *(_QWORD *)&v63[v70];
    v74 = *(_QWORD *)&v63[v70 + 8];
    v75 = v63[v70 + 16];
    outlined copy of Text.Storage(v73, *((_QWORD *)v72 + 1), v72[16]);
    *(_QWORD *)v71 = v73;
    *((_QWORD *)v71 + 1) = v74;
    v71[16] = v75;
    *((_QWORD *)v71 + 3) = *((_QWORD *)v72 + 3);
    v76 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v77 = &v71[v76];
    v78 = &v72[v76];
    v79 = type metadata accessor for UUID();
    v80 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
    swift_bridgeObjectRetain();
    v80(v77, v78, v79);
    v81 = *(int *)(v69 + 24);
    v82 = &__dst[v81];
    v83 = &v63[v81];
    if (*v83)
    {
      v84 = v83[1];
      *(_QWORD *)v82 = *v83;
      *((_QWORD *)v82 + 1) = v84;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v82 = *(_OWORD *)v83;
    }
    v68 = v94;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v69);
  }
  a1[v68[29]] = *((_BYTE *)a2 + v68[29]);
  a1[v68[30]] = *((_BYTE *)a2 + v68[30]);
  a1[v68[31]] = *((_BYTE *)a2 + v68[31]);
  a1[v68[32]] = *((_BYTE *)a2 + v68[32]);
  *(_QWORD *)&a1[v68[33]] = *(char **)((char *)a2 + v68[33]);
LABEL_47:
  swift_retain();
  return a1;
}

uint64_t destroy for SystemSegmentItem(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  swift_release();
  v2 = *(_QWORD *)(a1 + 184);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      v2 = *(_QWORD *)(a1 + 184);
      v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v2);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2)

    swift_release();
    swift_release();
  }
  v6 = *(_QWORD *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v6, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  v7 = *(_QWORD *)(a1 + 408);
  if (v7)
  {
    if (v7 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(a1 + 424))
    swift_release();
  if (*(_QWORD *)(a1 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 504))
    swift_release();
  if (*(_QWORD *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  v9 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = v8 + *(int *)(v9 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
    v11 = v10 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    if (*(_QWORD *)(v8 + *(int *)(v9 + 24)))
      swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  __int128 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  void (*v78)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(_BYTE *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  int *v90;
  void *__dsta;
  _BYTE *__dst;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = a1 + 64;
  v9 = a2 + 64;
  v10 = *(_QWORD *)(a2 + 184);
  v11 = v4;
  v12 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10 >> 1 != 4294967294)
  {
    v22 = *(unsigned __int8 *)(a2 + 72);
    if (v22 == 255)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
    }
    else
    {
      v23 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v23, *(_BYTE *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v23;
      *(_BYTE *)(a1 + 72) = v22;
      v10 = *(_QWORD *)(a2 + 184);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v24;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    if (v10 >> 1 == 0xFFFFFFFF)
    {
      v25 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v25;
    }
    else
    {
      v26 = *(_QWORD *)(a2 + 168);
      v27 = *(_QWORD *)(a2 + 176);
      v28 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v26, v27, v10);
      *(_QWORD *)(a1 + 168) = v26;
      *(_QWORD *)(a1 + 176) = v27;
      *(_QWORD *)(a1 + 184) = v10;
      *(_QWORD *)(a1 + 192) = v28;
    }
    v29 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v29;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    v30 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v30;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v31 = v30;
    v18 = *(_QWORD *)(a2 + 256);
    if (v18)
      goto LABEL_3;
LABEL_13:
    v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  v13 = *(_OWORD *)(v9 + 144);
  *(_OWORD *)(v8 + 128) = *(_OWORD *)(v9 + 128);
  *(_OWORD *)(v8 + 144) = v13;
  *(_OWORD *)(v8 + 160) = *(_OWORD *)(v9 + 160);
  *(_DWORD *)(v8 + 175) = *(_DWORD *)(v9 + 175);
  v14 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 80) = v14;
  v15 = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
  *(_OWORD *)(v8 + 112) = v15;
  v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  v17 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v17;
  v18 = *(_QWORD *)(a2 + 256);
  if (!v18)
    goto LABEL_13;
LABEL_3:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v18;
  v19 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v19 >= 2)
    v20 = v19;
  *(_QWORD *)(a1 + 264) = v19;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  v21 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v21;
  swift_retain();
  swift_retain();
LABEL_14:
  v33 = *(_QWORD *)(a2 + 328);
  if (v33 >> 2 == 0xFFFFFFFF)
  {
    v34 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v34;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v35 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v35;
    v36 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v36;
  }
  else
  {
    v37 = *(void **)(a2 + 296);
    v38 = *(_QWORD *)(a2 + 304);
    v39 = *(_QWORD *)(a2 + 312);
    v40 = *(_QWORD *)(a2 + 320);
    v41 = *(_QWORD *)(a2 + 336);
    v42 = *(_QWORD *)(a2 + 344);
    v43 = *(_QWORD *)(a2 + 352);
    v84 = *(_QWORD *)(a2 + 360);
    v85 = *(_QWORD *)(a2 + 368);
    v86 = *(_QWORD *)(a2 + 376);
    v89 = *(_QWORD *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v37, v38, v39, v40, v33, v41, v42, v43, v84, v85, v86, v89, (uint64_t)__dsta);
    *(_QWORD *)(a1 + 296) = v37;
    *(_QWORD *)(a1 + 304) = v38;
    *(_QWORD *)(a1 + 312) = v39;
    *(_QWORD *)(a1 + 320) = v40;
    *(_QWORD *)(a1 + 328) = v33;
    *(_QWORD *)(a1 + 336) = v41;
    *(_QWORD *)(a1 + 344) = v42;
    *(_QWORD *)(a1 + 352) = v43;
    *(_QWORD *)(a1 + 360) = v84;
    *(_QWORD *)(a1 + 368) = v85;
    *(_QWORD *)(a1 + 376) = v86;
    *(_QWORD *)(a1 + 384) = v89;
    *(_QWORD *)(a1 + 392) = __dsta;
  }
  v44 = *(_QWORD *)(a2 + 408);
  if (v44 == 1)
  {
    v45 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v45;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    v46 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v46;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v44)
  {
    v47 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v44;
    *(_QWORD *)(a1 + 416) = v47;
    swift_retain();
    v48 = *(_QWORD *)(a2 + 424);
    if (v48)
      goto LABEL_21;
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    v50 = *(_QWORD *)(a2 + 440);
    if (v50)
      goto LABEL_22;
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v48 = *(_QWORD *)(a2 + 424);
  if (!v48)
    goto LABEL_24;
LABEL_21:
  v49 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v48;
  *(_QWORD *)(a1 + 432) = v49;
  swift_retain();
  v50 = *(_QWORD *)(a2 + 440);
  if (!v50)
    goto LABEL_25;
LABEL_22:
  v51 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v50;
  *(_QWORD *)(a1 + 448) = v51;
  swift_retain();
LABEL_26:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_27:
  v52 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v52;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v53 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v53)
  {
    v54 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v53;
    *(_QWORD *)(a1 + 512) = v54;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v55 = *(_QWORD *)(a2 + 528);
  if (v55)
  {
    *(_QWORD *)(a1 + 528) = v55;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  v56 = *(_QWORD *)(a2 + 552);
  if (v56 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v56;
    v57 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (v57)
    {
      v58 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v57;
      *(_QWORD *)(a1 + 568) = v58;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  v59 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v59;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v60 = type metadata accessor for PlatformItemList.Item();
  v61 = *(int *)(v60 + 112);
  v90 = (int *)v60;
  __dst = (_BYTE *)(a1 + v61);
  v62 = (_BYTE *)(a2 + v61);
  v63 = type metadata accessor for CommandOperation();
  v64 = *(_QWORD *)(v63 - 8);
  v87 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48);
  v65 = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v87(v62, 1, v63))
  {
    type metadata accessor for CommandOperation?(0);
    memcpy(__dst, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    v88 = v64;
    *__dst = *v62;
    v67 = *(int *)(v63 + 20);
    v68 = v62;
    v69 = &__dst[v67];
    v70 = &v68[v67];
    v71 = *(_QWORD *)&v68[v67];
    v72 = *(_QWORD *)&v68[v67 + 8];
    v73 = v68[v67 + 16];
    outlined copy of Text.Storage(v71, v72, v73);
    *(_QWORD *)v69 = v71;
    *((_QWORD *)v69 + 1) = v72;
    v69[16] = v73;
    *((_QWORD *)v69 + 3) = *((_QWORD *)v70 + 3);
    v74 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v75 = &v69[v74];
    v76 = &v70[v74];
    v77 = type metadata accessor for UUID();
    v78 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
    swift_bridgeObjectRetain();
    v78(v75, v76, v77);
    v79 = *(int *)(v63 + 24);
    v80 = &__dst[v79];
    v81 = &v68[v79];
    if (*v81)
    {
      v82 = v81[1];
      *v80 = *v81;
      v80[1] = v82;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v80 = *(_OWORD *)v81;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v63);
  }
  *(_BYTE *)(a1 + v90[29]) = *(_BYTE *)(a2 + v90[29]);
  *(_BYTE *)(a1 + v90[30]) = *(_BYTE *)(a2 + v90[30]);
  *(_BYTE *)(a1 + v90[31]) = *(_BYTE *)(a2 + v90[31]);
  *(_BYTE *)(a1 + v90[32]) = *(_BYTE *)(a2 + v90[32]);
  *(_QWORD *)(a1 + v90[33]) = *(_QWORD *)(a2 + v90[33]);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  _OWORD *v11;
  id *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  id v33;
  int v34;
  id v35;
  void *v36;
  char v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  id v49;
  id v50;
  char v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  _OWORD *v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *v72;
  void *v73;
  id v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  id v88;
  int v89;
  __int128 *v90;
  __int128 *v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _OWORD *v129;
  _OWORD *v130;
  _OWORD *v131;
  uint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _OWORD *v162;
  _OWORD *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  id v173;
  int *v174;
  uint64_t v175;
  _BYTE *v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(_BYTE *, uint64_t, uint64_t);
  int v181;
  int v182;
  uint64_t v183;
  _BYTE *v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  void (*v193)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE *v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _BYTE *v233;
  _BYTE *v234;

  v4 = a2 + 278;
  v5 = *(void **)a1;
  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = v6;

  v8 = *(void **)(a1 + 8);
  v9 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v10 = v9;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = (_OWORD *)(a1 + 64);
  v12 = (id *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v13 == 0x1FFFFFFFCLL)
    {
      v14 = *(_OWORD *)v12;
      v15 = *(_OWORD *)(a2 + 80);
      v16 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v16;
      *v11 = v14;
      *(_OWORD *)(a1 + 80) = v15;
      v17 = *(_OWORD *)(a2 + 128);
      v18 = *(_OWORD *)(a2 + 144);
      v19 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v19;
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = v18;
      v20 = *(_OWORD *)(a2 + 192);
      v21 = *(_OWORD *)(a2 + 208);
      v22 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v21;
      *(_OWORD *)(a1 + 224) = v22;
      *(_OWORD *)(a1 + 192) = v20;
    }
    else
    {
      v32 = *(unsigned __int8 *)(a2 + 72);
      if (v32 == 255)
      {
        v38 = *v12;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v11 = v38;
      }
      else
      {
        v33 = *v12;
        outlined copy of GraphicsImage.Contents(*v12, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v33;
        *(_BYTE *)(a1 + 72) = v32;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v39 = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v39;
      v40 = *(_OWORD *)(a2 + 128);
      v41 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v40;
      *(_OWORD *)(a1 + 144) = v41;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      v42 = *(_QWORD *)(a2 + 184);
      if (v42 >> 1 == 0xFFFFFFFF)
      {
        v43 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v43;
      }
      else
      {
        v44 = *(_QWORD *)(a2 + 168);
        v45 = *(_QWORD *)(a2 + 176);
        v46 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v44, v45, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v44;
        *(_QWORD *)(a1 + 176) = v45;
        *(_QWORD *)(a1 + 184) = v42;
        *(_QWORD *)(a1 + 192) = v46;
      }
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v47 = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v47;
      v48 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v48;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v49 = v48;
    }
  }
  else if (v13 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    v23 = *(_OWORD *)(a2 + 112);
    v25 = *(_OWORD *)v12;
    v24 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v23;
    *v11 = v25;
    *(_OWORD *)(a1 + 80) = v24;
    v26 = *(_OWORD *)(a2 + 176);
    v28 = *(_OWORD *)(a2 + 128);
    v27 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 128) = v28;
    *(_OWORD *)(a1 + 144) = v27;
    v30 = *(_OWORD *)(a2 + 208);
    v29 = *(_OWORD *)(a2 + 224);
    v31 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v30;
    *(_OWORD *)(a1 + 224) = v29;
    *(_OWORD *)(a1 + 192) = v31;
  }
  else
  {
    v34 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v34 == 255)
      {
        v52 = *v12;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v11 = v52;
      }
      else
      {
        v50 = *v12;
        outlined copy of GraphicsImage.Contents(*v12, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v50;
        *(_BYTE *)(a1 + 72) = v34;
      }
    }
    else if (v34 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      v51 = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v11 = *v12;
      *(_BYTE *)(a1 + 72) = v51;
    }
    else
    {
      v35 = *v12;
      outlined copy of GraphicsImage.Contents(*v12, *(_BYTE *)(a2 + 72));
      v36 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v35;
      v37 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v34;
      outlined consume of GraphicsImage.Contents(v36, v37);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v53 = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v53;
    v54 = *(_OWORD *)(a2 + 128);
    v55 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v54;
    *(_OWORD *)(a1 + 144) = v55;
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    v56 = (_OWORD *)(a1 + 168);
    v57 = (_OWORD *)(a2 + 168);
    v58 = *(_QWORD *)(a2 + 184);
    v59 = v58 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v59 == 0x1FFFFFFFELL)
      {
        v60 = *(_OWORD *)(a2 + 184);
        *v56 = *v57;
        *(_OWORD *)(a1 + 184) = v60;
      }
      else
      {
        v62 = *(_QWORD *)(a2 + 168);
        v63 = *(_QWORD *)(a2 + 176);
        v64 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v62, v63, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v62;
        *(_QWORD *)(a1 + 176) = v63;
        *(_QWORD *)(a1 + 184) = v58;
        *(_QWORD *)(a1 + 192) = v64;
      }
    }
    else if (v59 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      v61 = *(_OWORD *)(a2 + 184);
      *v56 = *v57;
      *(_OWORD *)(a1 + 184) = v61;
    }
    else
    {
      v65 = *(_QWORD *)(a2 + 168);
      v66 = *(_QWORD *)(a2 + 176);
      v67 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v65, v66, *(_QWORD *)(a2 + 184));
      v68 = *(_QWORD *)(a1 + 168);
      v69 = *(_QWORD *)(a1 + 176);
      v70 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 168) = v65;
      *(_QWORD *)(a1 + 176) = v66;
      *(_QWORD *)(a1 + 184) = v58;
      *(_QWORD *)(a1 + 192) = v67;
      outlined consume of AccessibilityImageLabel(v68, v69, v70);
    }
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v71 = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v71;
    v72 = *(void **)(a1 + 232);
    v73 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v73;
    v74 = v73;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  }
  v75 = (_OWORD *)(a1 + 248);
  v76 = (_OWORD *)(a2 + 248);
  v77 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (!v77)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      v85 = *(_OWORD *)(a2 + 264);
      v84 = *(_OWORD *)(a2 + 280);
      *v75 = *v76;
      *(_OWORD *)(a1 + 264) = v85;
      *(_OWORD *)(a1 + 280) = v84;
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v78 = *(void **)(a1 + 264);
    v79 = *(void **)(a2 + 264);
    if ((unint64_t)v78 >= 2)
    {
      if ((unint64_t)v79 >= 2)
      {
        *(_QWORD *)(a1 + 264) = v79;
        v88 = v79;

        goto LABEL_43;
      }

      v79 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v79 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v79;
      v80 = v79;
LABEL_43:
      v89 = *(_DWORD *)(a2 + 272);
      *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v89;
      *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
      *(_BYTE *)(a1 + 278) = *(_BYTE *)v4;
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 264) = v79;
    goto LABEL_43;
  }
  if (v77)
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v81 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v81 >= 2)
      v82 = v81;
    *(_QWORD *)(a1 + 264) = v81;
    v83 = *(_DWORD *)(a2 + 272);
    *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v83;
    *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
    *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    v86 = *v76;
    v87 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v87;
    *v75 = v86;
  }
LABEL_44:
  v90 = (__int128 *)(a1 + 296);
  v91 = (__int128 *)(a2 + 296);
  v92 = *(_QWORD *)(a2 + 328);
  v93 = v92 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(_QWORD *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v93 == 0x3FFFFFFFCLL)
    {
      v94 = *v91;
      v95 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v95;
      *v90 = v94;
      v96 = *(_OWORD *)(a2 + 344);
      v97 = *(_OWORD *)(a2 + 360);
      v98 = *(_OWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v97;
      *(_OWORD *)(a1 + 376) = v98;
      *(_OWORD *)(a1 + 344) = v96;
    }
    else
    {
      v104 = *(void **)(a2 + 296);
      v105 = *(_QWORD *)(a2 + 304);
      v231 = v4;
      v106 = *(_QWORD *)(a2 + 312);
      v107 = *(_QWORD *)(a2 + 320);
      v108 = *(_QWORD *)(a2 + 336);
      v109 = *(_QWORD *)(a2 + 344);
      v110 = *(_QWORD *)(a2 + 352);
      v220 = *(_QWORD *)(a2 + 360);
      v222 = *(_QWORD *)(a2 + 368);
      v224 = *(_QWORD *)(a2 + 376);
      v226 = *(_QWORD *)(a2 + 384);
      v228 = *(_QWORD *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v104, v105, v106, v107, v92, v108, v109, v110, v220, v222, v224, v226, v228);
      *(_QWORD *)(a1 + 296) = v104;
      *(_QWORD *)(a1 + 304) = v105;
      *(_QWORD *)(a1 + 312) = v106;
      *(_QWORD *)(a1 + 320) = v107;
      *(_QWORD *)(a1 + 328) = v92;
      *(_QWORD *)(a1 + 336) = v108;
      *(_QWORD *)(a1 + 344) = v109;
      *(_QWORD *)(a1 + 352) = v110;
      *(_QWORD *)(a1 + 360) = v220;
      *(_QWORD *)(a1 + 368) = v222;
      *(_QWORD *)(a1 + 376) = v224;
      *(_QWORD *)(a1 + 384) = v226;
      v4 = v231;
      *(_QWORD *)(a1 + 392) = v228;
    }
  }
  else if (v93 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    v100 = *(_OWORD *)(a2 + 312);
    v99 = *(_OWORD *)(a2 + 328);
    *v90 = *v91;
    *(_OWORD *)(a1 + 312) = v100;
    *(_OWORD *)(a1 + 328) = v99;
    v102 = *(_OWORD *)(a2 + 360);
    v101 = *(_OWORD *)(a2 + 376);
    v103 = *(_OWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v102;
    *(_OWORD *)(a1 + 376) = v101;
    *(_OWORD *)(a1 + 344) = v103;
  }
  else
  {
    v111 = *(void **)(a2 + 296);
    v112 = *(_QWORD *)(a2 + 304);
    v232 = v4;
    v113 = *(_QWORD *)(a2 + 312);
    v114 = *(_QWORD *)(a2 + 320);
    v115 = *(_QWORD *)(a2 + 336);
    v116 = *(_QWORD *)(a2 + 344);
    v117 = *(_QWORD *)(a2 + 352);
    v221 = *(_QWORD *)(a2 + 360);
    v223 = *(_QWORD *)(a2 + 368);
    v225 = *(_QWORD *)(a2 + 376);
    v227 = *(_QWORD *)(a2 + 384);
    v229 = *(_QWORD *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v111, v112, v113, v114, v92, v115, v116, v117, v221, v223, v225, v227, v229);
    v118 = *(void **)(a1 + 296);
    v119 = *(_QWORD *)(a1 + 304);
    v120 = *(_QWORD *)(a1 + 312);
    v121 = *(_QWORD *)(a1 + 320);
    v122 = *(_QWORD *)(a1 + 328);
    v123 = *(_QWORD *)(a1 + 336);
    v124 = *(_QWORD *)(a1 + 344);
    v125 = *(_QWORD *)(a1 + 352);
    v126 = *(_OWORD *)(a1 + 360);
    v127 = *(_OWORD *)(a1 + 376);
    v128 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 296) = v111;
    *(_QWORD *)(a1 + 304) = v112;
    *(_QWORD *)(a1 + 312) = v113;
    *(_QWORD *)(a1 + 320) = v114;
    *(_QWORD *)(a1 + 328) = v92;
    *(_QWORD *)(a1 + 336) = v115;
    *(_QWORD *)(a1 + 344) = v116;
    *(_QWORD *)(a1 + 352) = v117;
    *(_QWORD *)(a1 + 360) = v221;
    *(_QWORD *)(a1 + 368) = v223;
    *(_QWORD *)(a1 + 376) = v225;
    *(_QWORD *)(a1 + 384) = v227;
    v4 = v232;
    *(_QWORD *)(a1 + 392) = v229;
    outlined consume of PlatformItemList.Item.SystemItem(v118, v119, v120, v121, v122, v123, v124, v125, v126, *((uint64_t *)&v126 + 1), v127, SBYTE8(v127), v128);
  }
  v129 = (_OWORD *)(a1 + 400);
  v130 = (_OWORD *)(v4 + 122);
  v131 = (_OWORD *)(a1 + 408);
  v132 = *(_QWORD *)(a1 + 408);
  v133 = (_OWORD *)(a2 + 408);
  v134 = *(_QWORD *)(a2 + 408);
  if (v132 != 1)
  {
    if (v134 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      *v129 = *v130;
      v139 = *(_OWORD *)(v4 + 154);
      v138 = *(_OWORD *)(v4 + 170);
      v140 = *(_OWORD *)(v4 + 138);
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(v4 + 186);
      *(_OWORD *)(a1 + 432) = v139;
      *(_OWORD *)(a1 + 448) = v138;
      *(_OWORD *)(a1 + 416) = v140;
      goto LABEL_85;
    }
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(v4 + 122);
    *(_BYTE *)(a1 + 401) = *(_BYTE *)(v4 + 123);
    *(_BYTE *)(a1 + 402) = *(_BYTE *)(v4 + 124);
    *(_BYTE *)(a1 + 403) = *(_BYTE *)(v4 + 125);
    *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
    v146 = *(_QWORD *)(a2 + 408);
    if (v132)
    {
      if (v146)
      {
        v147 = *(_QWORD *)(a2 + 416);
        *(_QWORD *)(a1 + 408) = v146;
        *(_QWORD *)(a1 + 416) = v147;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v146)
    {
      v148 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v146;
      *(_QWORD *)(a1 + 416) = v148;
      swift_retain();
      goto LABEL_70;
    }
    *v131 = *v133;
LABEL_70:
    v149 = *(_QWORD *)(a2 + 424);
    if (*(_QWORD *)(a1 + 424))
    {
      if (v149)
      {
        v150 = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 424) = v149;
        *(_QWORD *)(a1 + 432) = v150;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v149)
    {
      v151 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v149;
      *(_QWORD *)(a1 + 432) = v151;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    v145 = *(_QWORD *)(a2 + 440);
    if (*(_QWORD *)(a1 + 440))
    {
      if (v145)
      {
        v152 = *(_QWORD *)(a2 + 448);
        *(_QWORD *)(a1 + 440) = v145;
        *(_QWORD *)(a1 + 448) = v152;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v145)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v134 == 1)
  {
    *v129 = *v130;
    v135 = *(_OWORD *)(v4 + 138);
    v136 = *(_OWORD *)(v4 + 154);
    v137 = *(_OWORD *)(v4 + 170);
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v4 + 186);
    *(_OWORD *)(a1 + 432) = v136;
    *(_OWORD *)(a1 + 448) = v137;
    *(_OWORD *)(a1 + 416) = v135;
    goto LABEL_85;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  v141 = *(_QWORD *)(a2 + 408);
  if (v141)
  {
    v142 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v141;
    *(_QWORD *)(a1 + 416) = v142;
    swift_retain();
    v143 = *(_QWORD *)(a2 + 424);
    if (v143)
      goto LABEL_58;
  }
  else
  {
    *v131 = *v133;
    v143 = *(_QWORD *)(a2 + 424);
    if (v143)
    {
LABEL_58:
      v144 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v143;
      *(_QWORD *)(a1 + 432) = v144;
      swift_retain();
      v145 = *(_QWORD *)(a2 + 440);
      if (!v145)
        goto LABEL_65;
LABEL_81:
      v153 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v145;
      *(_QWORD *)(a1 + 448) = v153;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v145 = *(_QWORD *)(a2 + 440);
  if (v145)
    goto LABEL_81;
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_85:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v154 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v154)
    {
      v155 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v154;
      *(_QWORD *)(a1 + 512) = v155;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v154)
  {
    v156 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v154;
    *(_QWORD *)(a1 + 512) = v156;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v157 = (_OWORD *)(a1 + 528);
  v158 = (_OWORD *)(a2 + 528);
  v159 = *(_QWORD *)(a2 + 528);
  if (*(_QWORD *)(a1 + 528))
  {
    if (v159)
    {
      *(_QWORD *)(a1 + 528) = v159;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      v160 = *(_QWORD *)(a2 + 544);
      *v157 = *v158;
      *(_QWORD *)(a1 + 544) = v160;
    }
  }
  else if (v159)
  {
    *(_QWORD *)(a1 + 528) = v159;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v161 = *v158;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *v157 = v161;
  }
  v162 = (_OWORD *)(a1 + 552);
  v163 = (_OWORD *)(a2 + 552);
  v164 = *(_QWORD *)(a2 + 552);
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    if (v164 == 1)
    {
      outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
      v166 = *(_QWORD *)(a2 + 568);
      *v162 = *v163;
      *(_QWORD *)(a1 + 568) = v166;
      goto LABEL_116;
    }
    *(_QWORD *)(a1 + 552) = v164;
    swift_retain();
    swift_release();
    v162 = (_OWORD *)(a1 + 560);
    v169 = *(_QWORD *)(a2 + 560);
    if (*(_QWORD *)(a1 + 560))
    {
      if (v169)
      {
        v170 = *(_QWORD *)(a2 + 568);
        *(_QWORD *)(a1 + 560) = v169;
        *(_QWORD *)(a1 + 568) = v170;
        swift_retain();
        swift_release();
        goto LABEL_116;
      }
      swift_release();
    }
    else if (v169)
    {
      v168 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v169;
LABEL_112:
      *(_QWORD *)(a1 + 568) = v168;
      swift_retain();
      goto LABEL_116;
    }
    v165 = *(_OWORD *)(a2 + 560);
    goto LABEL_115;
  }
  if (v164 != 1)
  {
    *(_QWORD *)(a1 + 552) = v164;
    v167 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (!v167)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_116;
    }
    v168 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v167;
    goto LABEL_112;
  }
  v165 = *v163;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
LABEL_115:
  *v162 = v165;
LABEL_116:
  v171 = *(void **)(a1 + 576);
  v172 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v172;
  v173 = v172;

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v174 = (int *)type metadata accessor for PlatformItemList.Item();
  v175 = v174[28];
  v176 = (_BYTE *)(a1 + v175);
  v177 = (_BYTE *)(a2 + v175);
  v178 = type metadata accessor for CommandOperation();
  v179 = *(_QWORD *)(v178 - 8);
  v180 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v179 + 48);
  v181 = v180(v176, 1, v178);
  v182 = v180(v177, 1, v178);
  if (!v181)
  {
    if (!v182)
    {
      *v176 = *v177;
      v199 = *(int *)(v178 + 20);
      v200 = v177;
      v234 = v177;
      v201 = &v176[v199];
      v202 = &v200[v199];
      v203 = *(_QWORD *)&v200[v199];
      v204 = *(_QWORD *)&v200[v199 + 8];
      v205 = v200[v199 + 16];
      outlined copy of Text.Storage(v203, v204, v205);
      v206 = *(_QWORD *)v201;
      v207 = *((_QWORD *)v201 + 1);
      v208 = v201[16];
      *(_QWORD *)v201 = v203;
      *((_QWORD *)v201 + 1) = v204;
      v201[16] = v205;
      outlined consume of Text.Storage(v206, v207, v208);
      *((_QWORD *)v201 + 3) = *((_QWORD *)v202 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v209 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v210 = &v201[v209];
      v211 = &v202[v209];
      v212 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v212 - 8) + 24))(v210, v211, v212);
      v213 = *(int *)(v178 + 24);
      v214 = &v176[v213];
      v215 = &v234[v213];
      v216 = *(_QWORD *)&v234[v213];
      if (*v214)
      {
        if (v216)
        {
          v217 = *((_QWORD *)v215 + 1);
          *v214 = v216;
          v214[1] = v217;
          swift_retain();
          swift_release();
          goto LABEL_128;
        }
        swift_release();
      }
      else if (v216)
      {
        v219 = *((_QWORD *)v215 + 1);
        *v214 = v216;
        v214[1] = v219;
        swift_retain();
        goto LABEL_128;
      }
      *(_OWORD *)v214 = *(_OWORD *)v215;
      goto LABEL_128;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v176, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    goto LABEL_122;
  }
  if (v182)
  {
LABEL_122:
    type metadata accessor for CommandOperation?(0);
    memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
    goto LABEL_128;
  }
  v230 = v179;
  v233 = v177;
  *v176 = *v177;
  v183 = *(int *)(v178 + 20);
  v184 = &v176[v183];
  v185 = &v177[v183];
  v186 = *(_QWORD *)v185;
  v187 = *((_QWORD *)v185 + 1);
  v188 = v185[16];
  outlined copy of Text.Storage(*(_QWORD *)v185, v187, v188);
  *(_QWORD *)v184 = v186;
  *((_QWORD *)v184 + 1) = v187;
  v184[16] = v188;
  *((_QWORD *)v184 + 3) = *((_QWORD *)v185 + 3);
  v189 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v190 = &v184[v189];
  v191 = &v185[v189];
  v192 = type metadata accessor for UUID();
  v193 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v192 - 8) + 16);
  swift_bridgeObjectRetain();
  v193(v190, v191, v192);
  v194 = *(int *)(v178 + 24);
  v195 = &v176[v194];
  v196 = &v233[v194];
  if (*v196)
  {
    v197 = v196[1];
    *v195 = *v196;
    v195[1] = v197;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v195 = *(_OWORD *)v196;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v230 + 56))(v176, 0, 1, v178);
LABEL_128:
  *(_BYTE *)(a1 + v174[29]) = *(_BYTE *)(a2 + v174[29]);
  *(_BYTE *)(a1 + v174[30]) = *(_BYTE *)(a2 + v174[30]);
  *(_BYTE *)(a1 + v174[31]) = *(_BYTE *)(a2 + v174[31]);
  *(_BYTE *)(a1 + v174[32]) = *(_BYTE *)(a2 + v174[32]);
  *(_QWORD *)(a1 + v174[33]) = *(_QWORD *)(a2 + v174[33]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _BYTE *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v11;
  v12 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v12;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v13 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v13;
  v14 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v14;
  v15 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v15;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v16 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v16;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  v17 = *(_QWORD *)(a2 + 504);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v17;
    *(_QWORD *)(a1 + 512) = v18;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v19 = (int *)type metadata accessor for PlatformItemList.Item();
  v20 = v19[28];
  v21 = (_BYTE *)(a1 + v20);
  v22 = (_BYTE *)(a2 + v20);
  v23 = type metadata accessor for CommandOperation();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    type metadata accessor for CommandOperation?(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    v26 = *(int *)(v23 + 20);
    v27 = &v21[v26];
    v28 = &v22[v26];
    v29 = *(_OWORD *)&v22[v26 + 16];
    *v27 = *(_OWORD *)&v22[v26];
    v27[1] = v29;
    v30 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v31 = (char *)v27 + v30;
    v32 = &v28[v30];
    v33 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    v34 = *(int *)(v23 + 24);
    v35 = &v21[v34];
    v36 = (uint64_t *)&v22[v34];
    v37 = *v36;
    if (*v36)
    {
      v38 = v36[1];
      *v35 = v37;
      v35[1] = v38;
    }
    else
    {
      *(_OWORD *)v35 = *(_OWORD *)v36;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_BYTE *)(a1 + v19[29]) = *(_BYTE *)(a2 + v19[29]);
  *(_BYTE *)(a1 + v19[30]) = *(_BYTE *)(a2 + v19[30]);
  *(_BYTE *)(a1 + v19[31]) = *(_BYTE *)(a2 + v19[31]);
  *(_BYTE *)(a1 + v19[32]) = *(_BYTE *)(a2 + v19[32]);
  *(_QWORD *)(a1 + v19[33]) = *(_QWORD *)(a2 + v19[33]);
  return a1;
}

uint64_t assignWithTake for SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  void *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  __int128 v30;
  _OWORD *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  int *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(_BYTE *, uint64_t, uint64_t);
  int v76;
  int v77;
  uint64_t v78;
  _OWORD *v79;
  _BYTE *v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;

  v4 = a2 + 278;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = (_OWORD *)(a1 + 64);
  v10 = (_OWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v11;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *v9 = *v10;
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    goto LABEL_16;
  }
  v16 = *(unsigned __int8 *)(a1 + 72);
  if (v16 != 255)
  {
    v17 = *(unsigned __int8 *)(a2 + 72);
    if (v17 != 255)
    {
      v18 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)v10;
      *(_BYTE *)(a1 + 72) = v17;
      outlined consume of GraphicsImage.Contents(v18, v16);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  v19 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v19;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v20 = *(_QWORD *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v20 >> 1 != 0xFFFFFFFF)
  {
    v21 = *(_QWORD *)(a2 + 184);
    if (v21 >> 1 != 0xFFFFFFFF)
    {
      v23 = *(_QWORD *)(a2 + 192);
      v24 = *(_QWORD *)(a1 + 168);
      v25 = *(_QWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = v21;
      *(_QWORD *)(a1 + 192) = v23;
      outlined consume of AccessibilityImageLabel(v24, v25, v20);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  v22 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v22;
LABEL_15:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v26 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
LABEL_16:
  if (!*(_QWORD *)(a1 + 256))
  {
LABEL_21:
    v30 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v30;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  v27 = *(_QWORD *)(a2 + 256);
  if (!v27)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v27;
  swift_bridgeObjectRelease();
  v28 = *(void **)(a1 + 264);
  v29 = *(_QWORD *)(a2 + 264);
  if ((unint64_t)v28 >= 2)
  {
    if (v29 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v29;

    }
    else
    {

      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 264) = v29;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(_BYTE *)(a1 + 278) = *(_BYTE *)v4;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_release();
LABEL_26:
  v31 = (_OWORD *)(a1 + 296);
  v32 = *(_QWORD *)(a1 + 328);
  if (v32 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    v34 = *(_OWORD *)(v4 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v4 + 82);
    *(_OWORD *)(a1 + 376) = v34;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(v4 + 114);
    v35 = *(_OWORD *)(v4 + 34);
    *v31 = *(_OWORD *)(v4 + 18);
    *(_OWORD *)(a1 + 312) = v35;
    v36 = *(_OWORD *)(v4 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v4 + 50);
    *(_OWORD *)(a1 + 344) = v36;
    goto LABEL_31;
  }
  v33 = *(_QWORD *)(a2 + 328);
  if (v33 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  v37 = *(void **)(a1 + 296);
  v38 = *(_QWORD *)(a1 + 304);
  v39 = *(_QWORD *)(a1 + 312);
  v40 = *(_QWORD *)(a1 + 320);
  v41 = *(_QWORD *)(a1 + 336);
  v42 = *(_QWORD *)(a1 + 344);
  v43 = *(_QWORD *)(a1 + 352);
  v44 = *(_OWORD *)(a1 + 360);
  v45 = *(_OWORD *)(a1 + 376);
  v46 = *(_QWORD *)(a1 + 392);
  v47 = *(_OWORD *)(v4 + 34);
  *v31 = *(_OWORD *)(v4 + 18);
  *(_OWORD *)(a1 + 312) = v47;
  *(_QWORD *)(a1 + 328) = v33;
  v48 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v48;
  v49 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v49;
  outlined consume of PlatformItemList.Item.SystemItem(v37, v38, v39, v40, v32, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, SBYTE8(v45), v46);
LABEL_31:
  v50 = *(_QWORD *)(a1 + 408);
  if (v50 == 1)
  {
LABEL_34:
    v52 = *(_OWORD *)(v4 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v4 + 154);
    *(_OWORD *)(a1 + 448) = v52;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v4 + 186);
    v53 = *(_OWORD *)(v4 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v4 + 122);
    *(_OWORD *)(a1 + 416) = v53;
    goto LABEL_57;
  }
  v51 = *(_QWORD *)(a2 + 408);
  if (v51 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(v4 + 122);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(v4 + 123);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(v4 + 124);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(v4 + 125);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v50)
  {
    if (v51)
    {
      v54 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v51;
      *(_QWORD *)(a1 + 416) = v54;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v51)
  {
    v55 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v51;
    *(_QWORD *)(a1 + 416) = v55;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  v56 = *(_QWORD *)(a2 + 424);
  if (*(_QWORD *)(a1 + 424))
  {
    if (v56)
    {
      v57 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v56;
      *(_QWORD *)(a1 + 432) = v57;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v56)
  {
    v58 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v56;
    *(_QWORD *)(a1 + 432) = v58;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  v59 = *(_QWORD *)(a2 + 440);
  if (!*(_QWORD *)(a1 + 440))
  {
    if (v59)
    {
      v61 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v59;
      *(_QWORD *)(a1 + 448) = v61;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v59)
  {
    swift_release();
    goto LABEL_55;
  }
  v60 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v59;
  *(_QWORD *)(a1 + 448) = v60;
  swift_release();
LABEL_56:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_57:
  v62 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v62;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v63 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v63)
    {
      v64 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v63;
      *(_QWORD *)(a1 + 512) = v64;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v63)
  {
    v65 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v63;
    *(_QWORD *)(a1 + 512) = v65;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(_QWORD *)(a1 + 528))
  {
    v66 = *(_QWORD *)(a2 + 528);
    if (v66)
    {
      *(_QWORD *)(a1 + 528) = v66;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
LABEL_69:
  if (*(_QWORD *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    goto LABEL_73;
  }
  v67 = *(_QWORD *)(a2 + 552);
  if (v67 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(_QWORD *)(a1 + 552) = v67;
  swift_release();
  v92 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v92)
    {
      v93 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v92;
      *(_QWORD *)(a1 + 568) = v93;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v92)
  {
    v109 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v92;
    *(_QWORD *)(a1 + 568) = v109;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  v68 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v69 = (int *)type metadata accessor for PlatformItemList.Item();
  v70 = v69[28];
  v71 = (_BYTE *)(a1 + v70);
  v72 = (_BYTE *)(a2 + v70);
  v73 = type metadata accessor for CommandOperation();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48);
  v76 = v75(v71, 1, v73);
  v77 = v75(v72, 1, v73);
  if (!v76)
  {
    if (!v77)
    {
      *v71 = *v72;
      v94 = *(int *)(v73 + 20);
      v95 = &v71[v94];
      v96 = &v72[v94];
      LOBYTE(v94) = v72[v94 + 16];
      v97 = *(_QWORD *)v95;
      v98 = *((_QWORD *)v95 + 1);
      v99 = v95[16];
      *(_OWORD *)v95 = *(_OWORD *)v96;
      v95[16] = v94;
      outlined consume of Text.Storage(v97, v98, v99);
      *((_QWORD *)v95 + 3) = *((_QWORD *)v96 + 3);
      swift_bridgeObjectRelease();
      v100 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v101 = &v95[v100];
      v102 = &v96[v100];
      v103 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v103 - 8) + 40))(v101, v102, v103);
      v104 = *(int *)(v73 + 24);
      v105 = &v71[v104];
      v106 = (uint64_t *)&v72[v104];
      v107 = *v106;
      if (*v105)
      {
        if (v107)
        {
          v108 = v106[1];
          *v105 = v107;
          v105[1] = v108;
          swift_release();
          goto LABEL_90;
        }
        swift_release();
      }
      else if (v107)
      {
        v111 = v106[1];
        *v105 = v107;
        v105[1] = v111;
        goto LABEL_90;
      }
      *(_OWORD *)v105 = *(_OWORD *)v106;
      goto LABEL_90;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    goto LABEL_79;
  }
  if (v77)
  {
LABEL_79:
    type metadata accessor for CommandOperation?(0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    goto LABEL_90;
  }
  *v71 = *v72;
  v78 = *(int *)(v73 + 20);
  v79 = &v71[v78];
  v80 = &v72[v78];
  v81 = *(_OWORD *)&v72[v78 + 16];
  *v79 = *(_OWORD *)&v72[v78];
  v79[1] = v81;
  v82 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v83 = (char *)v79 + v82;
  v84 = &v80[v82];
  v85 = type metadata accessor for UUID();
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
  v86 = *(int *)(v73 + 24);
  v87 = &v71[v86];
  v88 = (uint64_t *)&v72[v86];
  v89 = *v88;
  if (*v88)
  {
    v90 = v88[1];
    *v87 = v89;
    v87[1] = v90;
  }
  else
  {
    *(_OWORD *)v87 = *(_OWORD *)v88;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
LABEL_90:
  *(_BYTE *)(a1 + v69[29]) = *(_BYTE *)(a2 + v69[29]);
  *(_BYTE *)(a1 + v69[30]) = *(_BYTE *)(a2 + v69[30]);
  *(_BYTE *)(a1 + v69[31]) = *(_BYTE *)(a2 + v69[31]);
  *(_BYTE *)(a1 + v69[32]) = *(_BYTE *)(a2 + v69[32]);
  *(_QWORD *)(a1 + v69[33]) = *(_QWORD *)(a2 + v69[33]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemSegmentItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18722DBEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlatformItemList.Item();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemSegmentItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18722DC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlatformItemList.Item();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemSegmentItem()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem;
  if (!lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem)
  {
    v1 = type metadata accessor for SystemSegmentItem();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemSegmentItem, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentItem and conformance SystemSegmentItem);
  }
  return result;
}

uint64_t View.presentationLink<A, B>(isPresented:presenting:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_QWORD, _QWORD, _QWORD)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a7;
  v30 = a4;
  v31 = a6;
  v33 = a5;
  v34 = a9;
  v32 = a3;
  v35 = a11;
  v29 = a10;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v28 - v18;
  v20 = type metadata accessor for PresentationLinkModifier(0, a8, a10, a12);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v28 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, v30, v15, v23);
  swift_retain();
  swift_retain();
  v26 = v31;
  swift_retain();
  PresentationLinkModifier.init(isPresented:presenting:destination:)(a1, a2, v32, (uint64_t)v19, v33, v26, a8, v29, (uint64_t)v25, a12);
  MEMORY[0x18D75B4AC](v25, v36, v20, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v20);
}

uint64_t type metadata accessor for PresentationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PresentationLinkModifier);
}

uint64_t PresentationLinkModifier.init(isPresented:presenting:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_QWORD, _QWORD, _QWORD)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v37 = a5;
  v38 = a6;
  v43 = a2;
  v44 = a4;
  v40 = a3;
  v39 = a1;
  v42 = a9;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v34 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a7 - 8) + 56))(a9, 1, 1, a7, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(a9, a4, v14);
  v35 = a8;
  v36 = a10;
  v41 = type metadata accessor for PresentationLinkModifier(0, a7, a8, a10);
  v20 = (uint64_t *)(a9 + *(int *)(v41 + 44));
  v21 = v38;
  *v20 = v37;
  v20[1] = (uint64_t)v21;
  v38 = *(void (**)(_QWORD, _QWORD, _QWORD))(v15 + 16);
  v38(v19, a4, v14);
  v22 = *(unsigned __int8 *)(v15 + 80);
  v23 = (v22 + 73) & ~v22;
  v37 = v22 | 7;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = a7;
  *(_QWORD *)(v24 + 40) = a8;
  v25 = v39;
  *(_QWORD *)(v24 + 48) = a10;
  *(_QWORD *)(v24 + 56) = v25;
  *(_QWORD *)(v24 + 64) = v43;
  v26 = v40;
  *(_BYTE *)(v24 + 72) = v40;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v27(v24 + v23, v19, v14);
  v38(v19, v44, v14);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  v29 = v35;
  *(_QWORD *)(v28 + 32) = a7;
  *(_QWORD *)(v28 + 40) = v29;
  *(_QWORD *)(v28 + 48) = v36;
  *(_QWORD *)(v28 + 56) = v25;
  *(_QWORD *)(v28 + 64) = v43;
  *(_BYTE *)(v28 + 72) = v26;
  v27(v28 + v23, v19, v14);
  swift_retain();
  swift_retain();
  Binding.init(get:set:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v44, v14);
  v31 = v46;
  v32 = v47;
  v33 = v42 + *(int *)(v41 + 48);
  *(_QWORD *)v33 = v45;
  *(_QWORD *)(v33 + 8) = v31;
  *(_BYTE *)(v33 + 16) = v32;
  return result;
}

uint64_t View.presentationLink<A>(isPresented:content:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v21[0] = 0;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a6;
  *(_QWORD *)(v17 + 24) = a7;
  *(_QWORD *)(v17 + 32) = a8;
  *(_QWORD *)(v17 + 40) = a9;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  v18 = MEMORY[0x1E0DEE9C0] + 8;
  PresentationLinkModifier.init(isPresented:presenting:destination:)(a1, a2, a3, (uint64_t)v21, (uint64_t)partial apply for implicit closure #1 in closure #1 in TableRowContent.draggable<A>(_:), (void (*)(_QWORD, _QWORD, _QWORD))v17, MEMORY[0x1E0DEE9C0] + 8, a7, (uint64_t)v27, a9);
  v21[0] = v27[0];
  v22 = v28;
  v23 = v29;
  v24 = v30;
  v25 = v31;
  v26 = v32;
  v19 = type metadata accessor for PresentationLinkModifier(0, v18, a7, a9);
  MEMORY[0x18D75B4AC](v21, a6, v19, a8);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_18722E220()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18722E244(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = a1[3];
  v2 = type metadata accessor for PresentationLinkModifier(255, a1[1], a1[2], a1[4]);
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationLinkModifier<A, B>, v2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t sub_18722E2C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = a1[2];
  v2 = type metadata accessor for PresentationLinkModifier(255, MEMORY[0x1E0DEE9C0] + 8, a1[1], a1[3]);
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationLinkModifier<A, B>, v2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t type metadata completion function for PresentationLinkModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PresentationLinkModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0 || ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(v4, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    v11 = (_QWORD *)(((unint64_t)v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
    *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PresentationLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for PresentationLinkModifier(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PresentationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = (_QWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_retain();
  swift_release();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  return a1;
}

void *initializeWithTake for PresentationLinkModifier(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = (_OWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  v16 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v14 + 16);
  *(_OWORD *)v16 = v15;
  return a1;
}

void *assignWithTake for PresentationLinkModifier(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = (_OWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t)&a2[v12];
  v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v13 = *(_OWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v15;
  swift_release();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
  swift_release();
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v15 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationLinkModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    v9 = ((((v8 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 17;
    v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFF)
  {
    v16 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    if (v16 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    return (v16 + 1);
  }
  else
  {
    v15 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for PresentationLinkModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 255) >> (8 * v12);
    if (v12 <= 3)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v16 = ~v10 + a2;
    else
      v16 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v16;
    else
      *(_DWORD *)a1 = v16;
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_18722ECA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722ECB0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18722ECB8);
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722ED24()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722ED48()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722ED50()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722ED58(unsigned int a1@<W1>, size_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;

  *(_WORD *)&v4[v5] = 0;
  if (a1)
  {
    if (v3 < 0x7FFFFFFF)
      JUMPOUT(0x18722ED2CLL);
    if (v3 >= a1)
      JUMPOUT(0x18722ED64);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v2 = a2;
      else
        v2 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722EDA0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722EDB0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x18722ED8CLL);
}

void sub_18722EDB8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x18722ED8CLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PresentationLinkModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in PresentationLinkModifier.init(isPresented:presenting:destination:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, char a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, BOOL *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  BOOL v18;
  uint64_t result;
  _QWORD v20[3];
  char v21;
  uint64_t v22;

  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v20 - v15;
  v20[1] = a1;
  v20[2] = a2;
  v21 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v22);
  v17 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a4, v12);
  v18 = v17 == 1
     && (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 48))(v16, 1, a5) != 1;
  result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  *a6 = v18;
  return result;
}

uint64_t closure #2 in PresentationLinkModifier.init(isPresented:presenting:destination:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  BOOL v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[16];

  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = &v20[-v15];
  LODWORD(a1) = *a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v12 + 16))(&v20[-v15], a7, v11, v14);
  v17 = (_DWORD)a1 == 1
     && (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 48))(v16, 1, a8) != 1;
  v18 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  swift_retain();
  swift_retain();
  v18(v16, v11);
  v20[15] = v17;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t PresentationLinkModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  __int128 v41;
  char v42;
  char v43;
  uint64_t v44;

  v39 = a2;
  v4 = type metadata accessor for Optional();
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v36 = (uint64_t)&v34 - v7;
  v44 = *(_QWORD *)(a1 + 32);
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v4, &v44, v6);
  v9 = type metadata accessor for NavigationLinkModifier(0, v4, v35, v8);
  v38 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v34 - v12;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationLinkModifier<A, B>, a1, v11);
  v14 = type metadata accessor for _ViewModifier_Content();
  v15 = type metadata accessor for ModifiedContent();
  v37 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v34 - v21;
  v23 = (uint64_t *)(v2 + *(int *)(a1 + 48));
  v24 = *v23;
  v25 = v23[1];
  LOBYTE(v23) = *((_BYTE *)v23 + 16);
  *(_QWORD *)&v41 = v24;
  *((_QWORD *)&v41 + 1) = v25;
  v42 = (char)v23;
  v43 = 1;
  swift_retain();
  swift_retain();
  v26 = v36;
  PresentationLinkModifier.composedDestination.getter(a1, v27, v36);
  NavigationLinkModifier.init(isActive:updateSeed:isDetail:alwaysDisable:destination:presentedValue:isAdHocPresentationLink:wasTriggeredBySelection:needsButtonStyle:)(&v41, 0, 0, 0, 0, 0, v26, 0, (uint64_t)v13, 1, 0, v4, v35);
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v14);
  v29 = v14;
  v30 = v34;
  MEMORY[0x18D75B4AC](v13, v29, v34, v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v30);
  v40[0] = v28;
  v40[1] = &protocol witness table for NavigationLinkModifier<A>;
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v40);
  static ViewBuilder.buildExpression<A>(_:)(v18, v15, v31);
  v32 = *(void (**)(char *, uint64_t))(v37 + 8);
  v32(v18, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v22, v15, v39);
  return ((uint64_t (*)(char *, uint64_t))v32)(v22, v15);
}

uint64_t PresentationLinkModifier.composedDestination.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = v3;
  v48 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v47 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v43 = (char *)&v40 - v9;
  v46 = v10;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v40 - v15;
  v17 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v44 = (uint64_t)&v40 - v29;
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v41 = v4;
  v30(v16, v4, v12, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v25, 1, 1, v5);
    v31 = *(_QWORD *)(v46 + 32);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v16, v11);
    v32 = v46;
    v33 = v42;
    (*(void (**)(char *))(v41 + *(int *)(v46 + 44)))(v21);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v11);
    v31 = *(_QWORD *)(v32 + 32);
    v34 = (uint64_t)v43;
    static ViewBuilder.buildExpression<A>(_:)(v33, v5, v31);
    v35 = v47;
    v36 = *(void (**)(char *, uint64_t))(v47 + 8);
    v36(v33, v5);
    static ViewBuilder.buildBlock<A>(_:)(v34, v5, (uint64_t)v25);
    v36((char *)v34, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v25, 0, 1, v5);
  }
  v37 = v44;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v25, v44);
  v38 = *(void (**)(char *, uint64_t))(v45 + 8);
  v38(v25, v22);
  v49 = v31;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v22, &v49);
  static ViewBuilder.buildBlock<A>(_:)(v37, v22, v48);
  return ((uint64_t (*)(uint64_t, uint64_t))v38)(v37, v22);
}

uint64_t partial apply for closure #1 in PresentationLinkModifier.init(isPresented:presenting:destination:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  return closure #1 in PresentationLinkModifier.init(isPresented:presenting:destination:)(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), v1 + ((v4 + 73) & ~v4), v3, a1);
}

uint64_t objectdestroy_4Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v3 = (v2 + 73) & ~v2;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PresentationLinkModifier.init(isPresented:presenting:destination:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  return closure #2 in PresentationLinkModifier.init(isPresented:presenting:destination:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), v1 + ((v4 + 73) & ~v4), v3);
}

void type metadata accessor for Binding<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Bool>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>);
  }
}

uint64_t sub_18722F790(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;

  v1 = a1[2];
  v2 = type metadata accessor for PresentationLinkModifier(255, *a1, a1[1], v1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationLinkModifier<A, B>, v2);
  v3 = type metadata accessor for _ViewModifier_Content();
  v4 = type metadata accessor for Optional();
  v10 = v1;
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v4, &v10);
  type metadata accessor for NavigationLinkModifier(255, v4, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3);
  v9[1] = &protocol witness table for NavigationLinkModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10UIDragItemCG_So14NSItemProviderCs5NeverOTg50279_s7SwiftUI39CollectionViewListDragAndDropControllerC12dropProposal33_58C2E16B617C53060683163D61173E85LL9indexPath7session14isLocalSession10targetsRowSo012UICollectiondhK0C10Foundation05IndexS0V_So06UIDropW0_pS2btFAkA01_Y17VisitationContextVyAA06ShadowE10DataSourceVyxGGXEfU0_So14fg5CSo10dE52Ccfu_32cb925696a53b0e7863d1d6fe4dbec285AyWTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v2)
      break;
    v8 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x18D75E3BC](v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v7 = objc_msgSend(v5, sel_itemProvider);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4)
        return v8;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  BOOL v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v27[2];
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t (*v32)(char *);
  char *v33;
  uint64_t v34;

  v4 = v3;
  v32 = a1;
  v34 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v7);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v33 = (char *)v27 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (v13)
  {
    v14 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v29 = *(_QWORD *)(v6 + 72);
    v30 = v9;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v27[1] = a3;
    swift_bridgeObjectRetain();
    v15 = v33;
    while (1)
    {
      v16 = v34;
      v31(v15, v14, v34);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v17(v15, 0, 1, v16);
      v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v16);
      LOBYTE(v19) = v18 == 1;
      if (v18 == 1)
        break;
      v28 = v17;
      v20 = v18 == 1;
      v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v19 = v6;
      v22 = v30;
      v21(v30, v15, v16);
      v23 = v32(v22);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v16);
        swift_bridgeObjectRelease();
        return v19 & 1;
      }
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v16);
      if ((v24 & 1) == 0)
      {
        LOBYTE(v19) = v20;
        break;
      }
      v14 += v29;
      --v13;
      v4 = 0;
      v6 = v19;
      v15 = v33;
      if (!v13)
      {
        v25 = v28;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v15 = v33;
LABEL_9:
    LOBYTE(v19) = 1;
    v25(v15, 1, 1, v34);
  }
  swift_bridgeObjectRelease();
  return v19 & 1;
}

Swift::Void __swiftcall ListDragAndDropControllerBase.prepareForDropSession(view:)(UIView *view)
{
  _QWORD *v1;
  UIView *v2;
  UIView *v4;
  uint64_t v5;
  void *v6;

  v2 = view;
  while (1)
  {
    swift_getObjectType();
    if (swift_conformsToProtocol2() ? v2 : 0)
      break;
    v4 = -[UIView superview](v2, sel_superview);

    v2 = v4;
    if (!v4)
      return;
  }
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90);
  v6 = *(void **)((char *)v1 + v5);
  *(_QWORD *)((char *)v1 + v5) = v2;

}

void ListDragAndDropControllerBase.resetAfterSession(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  BOOL v3;
  uint64_t Strong;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  ValueMetadata *v12;
  _UNKNOWN **v13;
  __int128 v14;
  ValueMetadata *v15;
  _UNKNOWN **v16;
  _BYTE v17[40];

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70));
  swift_beginAccess();
  if (*v2)
    v3 = 0;
  else
    v3 = v2[1] == 1;
  if (v3)
    goto LABEL_10;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_10;
  v5 = *(void **)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x90));
  if (v5)
  {
    v6 = (_QWORD *)Strong;
    v7 = v2[1];
    v15 = &type metadata for DropInfoAdaptor;
    v16 = &protocol witness table for DropInfoAdaptor;
    v8 = swift_allocObject();
    v9 = (_QWORD *)(v8 + 16);
    *(_QWORD *)&v14 = v8;
    v10 = v5;
    swift_retain();
    v11 = (void *)swift_unknownObjectRetain();
    DropInfoAdaptor.init(_:host:responder:)(v11, v10, v6, v9);
    outlined init with take of OptionalBinaryInteger(&v14, (uint64_t)v17);
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(v7 + 8))(&v14, *v6, v7);
    v12 = v15;
    if (v15)
    {
      v13 = v16;
      __swift_project_boxed_opaque_existential_1(&v14, (uint64_t)v15);
      ((void (*)(_BYTE *, ValueMetadata *, _UNKNOWN **))v13[5])(v17, v12, v13);
      swift_release();
      outlined destroy of DropInfo((uint64_t)v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    }
    else
    {
      swift_release();
      outlined destroy of DropInfo((uint64_t)v17);
      outlined destroy of DropDelegate?((uint64_t)&v14);
    }
LABEL_10:
    $defer #1 <A>() in ListDragAndDropControllerBase.resetAfterSession(_:)(v0);
    return;
  }
  __break(1u);
}

void $defer #1 <A>() in ListDragAndDropControllerBase.resetAfterSession(_:)(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD v6[5];

  v6[0] = xmmword_187BF9840;
  memset(&v6[1], 0, 57);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (uint64_t)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70);
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v6, v3, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  swift_endAccess();
  v4 = *(_QWORD *)((*v2 & *a1) + 0x90);
  v5 = *(void **)((char *)a1 + v4);
  *(_QWORD *)((char *)a1 + v4) = 0;

}

void @objc ListDragAndDropControllerBase.init()()
{
  specialized ListDragAndDropControllerBase.init()();
}

id ListDragAndDropControllerBase.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for ListDragAndDropControllerBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void @objc ListDragAndDropControllerBase.__ivar_destroyer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60);
  v7 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58), a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  outlined destroy of AccessibilityTableContext?((uint64_t)a1 + *(_QWORD *)((*v5 & *a1) + 0x70), &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)a1 + *(_QWORD *)((*v5 & *a1) + 0x88));

}

uint64_t one-time initialization function for allowFakeMoves()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of allowFakeMoves();
  allowFakeMoves = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of allowFakeMoves()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD000000000000013 && v4 == 0x8000000187BDA6F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

id CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  id result;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;

  v30 = a4;
  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v9 = v7[20];
  v8 = v7[21];
  v10 = type metadata accessor for ShadowListDataSource(0, v9, *(_QWORD *)(v8 + 8), a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v16 = (char *)&v28 - v15;
  if ((a3 & 1) == 0)
  {
LABEL_12:
    v22 = (char *)v4 + v7[12];
    swift_beginAccess();
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v16, v22, v10);
    MEMORY[0x1E0C80A78](v23, v24);
    *(&v28 - 4) = v9;
    *(&v28 - 3) = v8;
    *(&v28 - 2) = v25;
    v26 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewDropProposal);
    v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
    ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:), (uint64_t)(&v28 - 6), v10, v26, v27, (uint64_t)&v31);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    result = v31;
    if (v31)
      return result;
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3608]), sel_initWithDropOperation_, 0);
  }
  v29 = a1;
  v17 = *(_QWORD *)((char *)v4 + v7[16]);
  if (*(_QWORD *)(v17 + 16))
  {
    MEMORY[0x1E0C80A78](v13, v14);
    v18 = v29;
    *(&v28 - 2) = (uint64_t)v4;
    *(&v28 - 1) = v18;
    swift_bridgeObjectRetain();
    v19 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:), (uint64_t)(&v28 - 4), v17);
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      v20 = objc_allocWithZone(MEMORY[0x1E0DC3608]);
      if ((v30 & 1) != 0)
      {
        result = objc_msgSend(v20, sel_initWithDropOperation_intent_, 3, 1);
        if (result)
          return result;
      }
      else
      {
        result = objc_msgSend(v20, sel_initWithDropOperation_dropLocation_, 3, 2);
        if (result)
          return result;
      }
    }
  }
  if (one-time initialization token for allowFakeMoves != -1)
    swift_once();
  if (allowFakeMoves)
  {
    v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
    a1 = v29;
    goto LABEL_12;
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3608]), sel_initWithDropOperation_, 0);
}

uint64_t closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v8 = type metadata accessor for ShadowListDataSource(0, v7[20], *(_QWORD *)(v7[21] + 8), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - v11;
  v13 = (char *)a2 + v7[12];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v13, v8);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v8);
  LOBYTE(a3) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(a1, a3, v8, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return a3 & 1;
}

id closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)@<X0>(id a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Bool v14;
  id v15;
  id result;

  v7 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10UIDragItemCG_So14NSItemProviderCs5NeverOTg50279_s7SwiftUI39CollectionViewListDragAndDropControllerC12dropProposal33_58C2E16B617C53060683163D61173E859indexPath7session14isLocalSession10targetsRowSo012UICollectiondhK0C10Foundation05IndexS0V_So06UIDropW0_pS2btFAkA01_Y17VisitationContextVyAA06ShadowE10DataSourceVyxGGXEfU0_So14fg5CSo10dE52Ccfu_32cb925696a53b0e7863d1d6fe4dbec285AyWTf3nnnpk_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for ShadowListDataSource(255, a2, *(_QWORD *)(a3 + 8), v10);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v11);
  type metadata accessor for _RowVisitationContext(0, v11, v12, v13);
  v14 = _RowVisitationContext.canHandleDropInsert(items:)((Swift::OpaquePointer)v9);
  swift_bridgeObjectRelease();
  v15 = objc_allocWithZone(MEMORY[0x1E0DC3608]);
  if (v14)
    result = objc_msgSend(v15, sel_initWithDropOperation_intent_, 2, 1);
  else
    result = objc_msgSend(v15, sel_initWithDropOperation_, 0);
  *a4 = result;
  return result;
}

uint64_t CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Class isa;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = v4;
  v33 = a3;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA0);
  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8);
  v11 = type metadata accessor for ShadowListDataSource(0, v9, *(_QWORD *)(v10 + 8), a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - v14;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(a2, sel_cellForItemAtIndexPath_, isa);

  if (!v17)
    goto LABEL_9;
  type metadata accessor for AnyListCollectionViewCell();
  v18 = (_QWORD *)swift_dynamicCastClass();
  if (!v18 || (v19 = (_QWORD *)(*(uint64_t (**)(void))((*v8 & *v18) + 0xA0))(), v20 = v8, !v19))
  {

LABEL_9:
    v24 = (char *)v5 + *(_QWORD *)((*v8 & *v5) + 0x60);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v24, v11);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v32 - 2) = v9;
    *(&v32 - 1) = v10;
    type metadata accessor for [UIDragItem]();
    v28 = v27;
    v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v11);
    ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:), (uint64_t)(&v32 - 4), v11, v28, v29, (uint64_t)&v34);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v34)
      return v34;
    else
      return MEMORY[0x1E0DEE9D8];
  }
  v21 = v19;
  v22 = (*(uint64_t (**)(uint64_t))((*v20 & *v19) + 0x58))(v33);
  v23 = v22;
  if ((unint64_t)v22 >> 62)
  {
    v31 = v22 & 0xFFFFFFFFFFFFFF8;
    if (v22 < 0)
      v31 = v22;
    v33 = v31;
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }

  if (!v33)
  {
    swift_bridgeObjectRelease();
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    goto LABEL_9;
  }
  return v23;
}

void closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, _QWORD);
  void (*v13)(_QWORD *__return_ptr, uint64_t);

  v5 = type metadata accessor for ShadowListDataSource(255, a1, *(_QWORD *)(a2 + 8), a3);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  swift_bridgeObjectRetain();
  v8 = ViewTraitCollection.value<A>(for:defaultValue:)();
  v9 = (uint64_t)v13;
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v13(&v13, v8);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  swift_bridgeObjectRelease();
  v10 = v13;
  if (!v13)
  {
LABEL_5:
    v12 = (void (*)(_QWORD *__return_ptr, _QWORD))MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v11 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3758]), sel_initWithItemProvider_, v10);
  v13 = (void (*)(_QWORD *__return_ptr, uint64_t))v11;
  specialized Array._endMutation()();
  v12 = v13;

LABEL_6:
  *a4 = v12;
}

uint64_t CollectionViewListDragAndDropController.collectionView(_:itemsForBeginning:at:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, a3, v7);
  v11 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  swift_beginAccess();
  *v11 = v10;
  swift_bridgeObjectRelease();
  return CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(a3, a1, a2, v12);
}

Class @objc CollectionViewListDragAndDropController.collectionView(_:itemsForBeginning:at:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v16;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  swift_unknownObjectRetain();
  v13 = a1;
  CollectionViewListDragAndDropController.collectionView(_:itemsForBeginning:at:)(v12, a4, (uint64_t)v11);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

Class @objc CollectionViewListDragAndDropController.collectionView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v16;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  swift_unknownObjectRetain();
  v13 = a1;
  specialized CollectionViewListDragAndDropController.collectionView(_:itemsForAddingTo:at:point:)(v12, a4, (uint64_t)v11);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionDidEnd:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  swift_unknownObjectRetain();
  v5 = a1;
  specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionDidEnd:)();

  swift_unknownObjectRelease();
}

id CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  id v17;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 v28;
  void *v29;

  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v8 = v7[20];
  v9 = v7[21];
  v10 = type metadata accessor for ShadowListDataSource(0, v8, *(_QWORD *)(v9 + 8), a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v23[-v13];
  v15 = (char *)v4 + v7[12];
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
  v24 = v8;
  v25 = v9;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:), (uint64_t)v23, v10, MEMORY[0x1E0DEAFA0], v16, (uint64_t)&v26);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  if (v26 != 2 && (v26 & 1) != 0)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

    if (!v17)
      return v17;
    type metadata accessor for AnyListCollectionViewCell();
    v20 = swift_dynamicCastClass();
    if (v20)
    {
      v29 = 0;
      v26 = 0u;
      v27 = 0u;
      v28 = 6;
      MEMORY[0x1E0C80A78](v20, v21);
      *(_QWORD *)&v23[-32] = v22;
      *(_QWORD *)&v23[-24] = &v26;
      *(_QWORD *)&v23[-16] = &v29;
      static Update.ensure<A>(_:)();

      v17 = v29;
      outlined consume of Path.Storage(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28);
      return v17;
    }

  }
  return 0;
}

uint64_t closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = type metadata accessor for ShadowListDataSource(255, a1, *(_QWORD *)(a2 + 8), a3);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  result = _RowVisitationContext.wantsClippedBackground.getter();
  *a4 = result & 1;
  return result;
}

void closure #2 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(_QWORD *a1, uint64_t a2, void **a3)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  __int128 v12;
  char v13;
  void *v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  __int128 v23;
  id v24;
  id v25;
  _BYTE v26[48];
  __int128 v27;
  __int128 v28;
  char v29;
  _OWORD v30[2];
  char v31;
  _OWORD v32[2];
  char v33;
  _OWORD v34[2];
  char v35;
  _QWORD v36[7];

  if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x90))())
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      v36[0] = 2;
      hostingViewCoordinateSpace.getter();
      v26[40] = 1;
      dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
      outlined destroy of CoordinateSpace((uint64_t)v26);
      v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3768]), sel_init);
      v7 = objc_msgSend(a1, sel_traitCollection);
      v8 = objc_msgSend(v7, sel_userInterfaceIdiom);

      if (v8 != (id)6)
      {
        v9 = (void *)objc_opt_self();
        v10 = v6;
        v11 = objc_msgSend(v9, sel_clearColor);
        objc_msgSend(v10, sel_setBackgroundColor_, v11);

      }
      v12 = *(_OWORD *)(a2 + 16);
      v34[0] = *(_OWORD *)a2;
      v34[1] = v12;
      v35 = *(_BYTE *)(a2 + 32);
      outlined init with take of Path.Storage((uint64_t)v34, (uint64_t)v36);
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      v13 = Path.isEmpty.getter();
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      if ((v13 & 1) != 0)
      {
        swift_release();
        v14 = *a3;
        *a3 = v6;
      }
      else
      {
        v15 = objc_msgSend(a1, sel_contentView);
        objc_msgSend(v15, sel_frame);

        v16 = *(_OWORD *)(a2 + 16);
        v32[0] = *(_OWORD *)a2;
        v32[1] = v16;
        v33 = *(_BYTE *)(a2 + 32);
        outlined init with take of Path.Storage((uint64_t)v32, (uint64_t)v26);
        outlined retain of TableColumnCustomizationID.Base((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
        Path.offsetBy(dx:dy:)();
        outlined retain of TableColumnCustomizationID.Base((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
        v17 = *(_QWORD *)a2;
        v18 = *(_QWORD *)(a2 + 8);
        v19 = *(_QWORD *)(a2 + 16);
        v20 = *(_QWORD *)(a2 + 24);
        v21 = v28;
        *(_OWORD *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v21;
        v22 = *(_BYTE *)(a2 + 32);
        *(_BYTE *)(a2 + 32) = v29;
        outlined consume of Path.Storage(v17, v18, v19, v20, v22);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
        v23 = *(_OWORD *)(a2 + 16);
        v30[0] = *(_OWORD *)a2;
        v30[1] = v23;
        v31 = *(_BYTE *)(a2 + 32);
        v24 = v6;
        outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
        v25 = UIBezierPath.init(_:)((uint64_t)v30);
        objc_msgSend(v24, sel_setVisiblePath_, v25);

        swift_release();
        v14 = *a3;
        *a3 = v24;
      }

    }
    else
    {
      swift_release();
    }
  }
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:));
}

id CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  id v47;
  Class isa;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  uint64_t (*v56)(void);
  id v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  _QWORD *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  char *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v5 = v4;
  v94 = a3;
  v83 = a1;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA0);
  v9 = *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8) + 8);
  v10 = *(_QWORD *)(v9 + 8);
  v90 = type metadata accessor for ShadowRowCollection(0, v8, v10, a4);
  v81 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v11);
  v89 = (char *)&v77 - v12;
  v14 = type metadata accessor for ShadowSectionCollection(0, v8, v10, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v87 = v14;
  v88 = v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v86 = (char *)&v77 - v17;
  v92 = type metadata accessor for ShadowListDataSource(0, v8, v9, v18);
  v84 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v19);
  v91 = (char *)&v77 - v20;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v77 - v27;
  v29 = type metadata accessor for IndexPath();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v77 = (char *)&v77 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v85 = (char *)&v77 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v77 - v38;
  v42 = MEMORY[0x1E0C80A78](v40, v41);
  v44 = (char *)&v77 - v43;
  v79 = a2;
  v45 = objc_msgSend(a2, sel_localDragSession, v42);
  v46 = MEMORY[0x18D760234]((char *)v5 + *(_QWORD *)((*v7 & *v5) + 0x88));
  v47 = (id)v46;
  v80 = v5;
  if (v45)
  {
    swift_unknownObjectRelease();
    if (v47)
    {
      swift_unknownObjectRelease();
      if (v45 == v47)
        goto LABEL_16;
    }
  }
  else
  {
    if (!v46)
    {
LABEL_16:
      LODWORD(v82) = 1;
      goto LABEL_25;
    }
    swift_unknownObjectRelease();
  }
  outlined init with copy of IndexPath?(v94, (uint64_t)v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    outlined destroy of IndexPath?((uint64_t)v28);
LABEL_24:
    LODWORD(v82) = 0;
LABEL_25:
    v70 = v91;
    v69 = v92;
    outlined init with copy of IndexPath?(v94, (uint64_t)v24);
    v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v71 = v78(v24, 1, v29);
    v93 = v30;
    if (v71 == 1)
    {
      CollectionViewListDragAndDropController.validIndexPath(in:)(v83, (SEL *)&selRef_numberOfItemsInSection_);
      outlined destroy of IndexPath?((uint64_t)v24);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v39, v24, v29);
    }
    v72 = (char *)v5 + *(_QWORD *)((*v7 & *v5) + 0x60);
    swift_beginAccess();
    v83 = *(void **)(v84 + 16);
    ((void (*)(char *, char *, uint64_t))v83)(v70, v72, v69);
    ShadowListDataSource.sectionIDs.getter(v69, v73, v74, v75);
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v44, v28, v29);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v49 = objc_msgSend(v83, sel_cellForItemAtIndexPath_, isa);

  if (!v49)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v30 + 8))(v44, v29);
    goto LABEL_24;
  }
  type metadata accessor for AnyListCollectionViewCell();
  v50 = (_QWORD *)swift_dynamicCastClass();
  if (!v50)
  {

    goto LABEL_21;
  }
  v51 = *v7;
  v52 = *(void **)((char *)v5 + *(_QWORD *)((*v7 & *v5) + 0x90));
  if (!v52)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v44, v29);
LABEL_23:

    goto LABEL_24;
  }
  v82 = v49;
  v53 = (_QWORD *)(*(uint64_t (**)(void))((*v50 & v51) + 0xA0))();
  if (!v53)
    goto LABEL_20;
  v54 = v53;
  v55 = v7;
  v56 = *(uint64_t (**)(void))((*v7 & *v53) + 0x50);
  v57 = v52;
  v58 = (uint64_t *)v56();
  v60 = v59;

  if (!v58)
  {

    v7 = v55;
    v5 = v80;
LABEL_20:

    goto LABEL_21;
  }
  v61 = v55;
  v5 = v80;
  v62 = v60;
  v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v57;
  v64 = (_QWORD *)((char *)v80 + *(_QWORD *)((*v61 & *v80) + 0x70));
  swift_beginAccess();
  swift_retain();
  v78 = v63;
  v65 = specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)(v64, v79, v58, v62, v63);
  swift_endAccess();
  swift_release();
  v49 = v65;
  v66 = objc_msgSend(v65, sel_operation);
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v66 != (id)2)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v44, v29);

    swift_release();
    goto LABEL_23;
  }
  v67 = objc_msgSend(v49, sel_operation);
  v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3608]), sel_initWithDropOperation_intent_, v67, 2);
  swift_release();

  (*(void (**)(char *, uint64_t))(v30 + 8))(v44, v29);
  return v68;
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, char *))CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:));
}

void CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t Strong;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  _QWORD *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  id v72;
  _BOOL8 v73;
  id v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  id v78;
  id v79;
  id v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;
  id v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, id);
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, id);
  unsigned int (*v90)(uint64_t, uint64_t, id);
  id v91;
  void *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t AssociatedConformanceWitness;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  int v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  void (*v143)(uint64_t, id);
  id v144;
  void *v145;
  id v146;
  char *v147;
  Class isa;
  id v149;
  void (*v150)(char *, id);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  void (*v156)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), double);
  uint64_t v157[3];
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD v184[3];
  uint64_t v185;
  uint64_t v186;
  _QWORD aBlock[3];
  ValueMetadata *v188;
  _UNKNOWN **v189;

  v181 = a2;
  v168 = a1;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = v3[20];
  v158 = v3[21];
  v5 = *(_QWORD *)(v158 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v167 = AssociatedTypeWitness;
  v166 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v171 = type metadata accessor for DropCoordinator(0, TupleTypeMetadata2, v8, v9);
  v170 = *(_QWORD *)(v171 - 8);
  MEMORY[0x1E0C80A78](v171, v10);
  v169 = (uint64_t)v157 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v165 = (char *)v157 - v14;
  v179 = type metadata accessor for DropCoordinator.Operation(0, TupleTypeMetadata2, v15, v16);
  v178 = *(_QWORD *)(v179 - 8);
  MEMORY[0x1E0C80A78](v179, v17);
  v180 = (uint64_t)v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v162 = (char *)v157 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v177 = (char *)v157 - v24;
  v157[2] = v5;
  v173 = type metadata accessor for ShadowListDataSource(0, v4, v5, v25);
  v172 = *(_QWORD *)(v173 - 8);
  MEMORY[0x1E0C80A78](v173, v26);
  v28 = (char *)v157 - v27;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v157 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v161 = (char *)v157 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v163 = (char *)v157 - v38;
  v175 = type metadata accessor for IndexPath();
  v176 = *(_QWORD *)(v175 - 8);
  v39 = *(_QWORD *)(v176 + 64);
  MEMORY[0x1E0C80A78](v175, v40);
  v41 = (char *)v157 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v157[1] = (uint64_t)v157 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v160 = (char *)v157 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  v174 = (char *)v157 - v50;
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (char *)v157 - v53;
  v55 = v3[14];
  v182 = v2;
  v56 = (_QWORD *)((char *)v2 + v55);
  swift_beginAccess();
  if (*v56 || v56[1] != 1)
  {
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v58 = (_QWORD *)Strong;
      v59 = *(void **)((char *)v182 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v182) + 0x90));
      if (v59)
      {
        v60 = v56[1];
        v61 = v59;
        v62 = objc_msgSend(v181, (SEL)&selRef__layoutHeightDependsOnWidth);
        v188 = &type metadata for DropInfoAdaptor;
        v189 = &protocol witness table for DropInfoAdaptor;
        v63 = swift_allocObject();
        v64 = (_QWORD *)(v63 + 16);
        aBlock[0] = v63;
        v65 = v61;
        swift_retain();
        DropInfoAdaptor.init(_:host:responder:)(v62, v65, v58, v64);
        v66 = *v58;
        v183 = v58;
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v60 + 8))(v184, v66, v60);
        v67 = v185;
        if (v185)
        {
          v68 = v186;
          __swift_project_boxed_opaque_existential_1(v184, v185);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v68 + 16))(aBlock, v67, v68);

          swift_release();
          outlined destroy of DropInfo((uint64_t)aBlock);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v184);
        }
        else
        {
          swift_release();

          outlined destroy of DropInfo((uint64_t)aBlock);
          outlined destroy of DropDelegate?((uint64_t)v184);
        }
        goto LABEL_48;
      }
      swift_release();
    }
  }
  v69 = (uint64_t)v181;
  v70 = objc_msgSend(objc_msgSend(v181, sel_session), sel_localDragSession);
  swift_unknownObjectRelease();
  v71 = MEMORY[0x18D760234]((char *)v182 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v182) + 0x88));
  v72 = (id)v71;
  v157[0] = (uint64_t)v54;
  if (v70)
  {
    swift_unknownObjectRelease();
    if (v72)
    {
      swift_unknownObjectRelease();
      v73 = v70 == v72;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v71)
  {
    swift_unknownObjectRelease();
LABEL_13:
    v73 = 0;
    goto LABEL_15;
  }
  v73 = 1;
LABEL_15:
  v74 = objc_msgSend((id)v69, sel_items, v157[0]);
  v159 = type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for UICollectionViewDropItem);
  v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v75 >> 62)
  {
    swift_bridgeObjectRetain();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v77 = v76 == 1 && v73;
  if (!v77
    || (v78 = objc_msgSend((id)v69, sel_proposal),
        v79 = objc_msgSend(v78, sel_operation),
        v78,
        v79 != (id)3))
  {
    v106 = objc_msgSend((id)v69, sel_destinationIndexPath);
    v164 = v28;
    if (v106)
    {
      v107 = v106;
      v4 = (uint64_t)v174;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      v108 = v176;
      v109 = *(void (**)(char *, uint64_t, uint64_t))(v176 + 32);
      v110 = v175;
      v109(v32, v4, v175);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v32, 0, 1, v110);
      v111 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48))(v32, 1, v110);
      v112 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      if (v111 != 1)
      {
        v109(v41, (uint64_t)v32, v110);
        v113 = (uint64_t)v162;
        v114 = (uint64_t)&v162[*(int *)(TupleTypeMetadata2 + 48)];
        v115 = (char *)v182 + *(_QWORD *)((*v112 & *v182) + 0x60);
        swift_beginAccess();
        v116 = v172;
        v4 = (uint64_t)v164;
        v117 = v115;
        v118 = v173;
        (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v164, v117, v173);
        v119 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v118);
        ListDiffable.rowIndex(at:)(v113, v114, (uint64_t)v41, v118, v119);
        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v4, v118);
        (*(void (**)(char *, uint64_t))(v108 + 8))(v41, v110);
        v120 = v179;
        swift_storeEnumTagMultiPayload();
        v121 = v178;
        v122 = v177;
        (*(void (**)(char *, uint64_t, uint64_t))(v178 + 32))(v177, v113, v120);
        goto LABEL_37;
      }
    }
    else
    {
      v108 = v176;
      v110 = v175;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v176 + 56))(v32, 1, 1, v175);
      v112 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v4 = (uint64_t)v174;
    }
    outlined destroy of IndexPath?((uint64_t)v32);
    v123 = TupleTypeMetadata2;
    v124 = (uint64_t)v165;
    v125 = (uint64_t)&v165[*(int *)(TupleTypeMetadata2 + 48)];
    v126 = (char *)v182 + *(_QWORD *)((*v112 & *v182) + 0x60);
    swift_beginAccess();
    v127 = v172;
    v128 = v164;
    v129 = v126;
    v130 = v173;
    (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v164, v129, v173);
    CollectionViewListDragAndDropController.validIndexPath(in:)(v168, (SEL *)&selRef_numberOfItemsInSection_);
    v131 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v130);
    ListDiffable.rowIndex(at:)(v124, v125, v4, v130, v131);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v4, v110);
    v132 = v128;
    TupleTypeMetadata2 = v123;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v132, v130);
    v122 = v177;
    v133 = &v177[*(int *)(v123 + 48)];
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32))(v177, v124);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v166 - 8) + 32))(v133, v125);
    v120 = v179;
    swift_storeEnumTagMultiPayload();
    v121 = v178;
LABEL_37:
    (*(void (**)(uint64_t, char *, uint64_t))(v121 + 16))(v180, v122, v120);
    v134 = objc_msgSend(objc_msgSend(v181, sel_session), sel_items);
    swift_unknownObjectRelease();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    v81 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v81 >> 62)
    {
      swift_bridgeObjectRetain();
      v135 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v135)
        goto LABEL_39;
    }
    else
    {
      v135 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v135)
      {
LABEL_39:
        v184[0] = MEMORY[0x1E0DEE9D8];
        v69 = (uint64_t)v184;
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v135 < 0)
        {
          __break(1u);
          goto LABEL_63;
        }
        v136 = 0;
        do
        {
          if ((v81 & 0xC000000000000001) != 0)
            v137 = (id)MEMORY[0x18D75E3BC](v136, v81);
          else
            v137 = *(id *)(v81 + 8 * v136 + 32);
          v138 = v137;
          ++v136;
          v139 = objc_msgSend(v137, sel_itemProvider);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v135 != v136);
        v140 = v184[0];
        swift_bridgeObjectRelease();
        v120 = v179;
        v121 = v178;
        v122 = v177;
LABEL_60:
        v151 = v169;
        v152 = DropCoordinator.init(operation:items:)(v180, v140, TupleTypeMetadata2, v141, v169);
        v153 = (uint64_t)v182;
        v155 = MEMORY[0x1E0C80A78](v152, v154);
        v157[-2] = v153;
        v157[-1] = v151;
        v156(partial apply for closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:), v155);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v120);
        (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v151, v171);
        v142 = (_QWORD *)v153;
        goto LABEL_61;
      }
    }
    swift_bridgeObjectRelease();
    v140 = MEMORY[0x1E0DEE9D8];
    goto LABEL_60;
  }
  TupleTypeMetadata2 = (uint64_t)v28;
  v80 = objc_msgSend((id)v69, sel_items);
  v81 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v81 & 0xC000000000000001) != 0)
  {
LABEL_63:
    v83 = (void *)MEMORY[0x18D75E3BC](0, v81);
    v82 = v182;
    goto LABEL_25;
  }
  v82 = v182;
  if (!*(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_65:
    v145 = (void *)MEMORY[0x18D75E3BC](0, v69);
    goto LABEL_56;
  }
  v83 = *(void **)(v81 + 32);
  swift_unknownObjectRetain();
LABEL_25:
  v79 = (id)v175;
  swift_bridgeObjectRelease();
  v84 = objc_msgSend(v83, sel_sourceIndexPath);
  swift_unknownObjectRelease();
  if (!v84)
  {
    v88 = (uint64_t)v163;
    (*(void (**)(char *, uint64_t, uint64_t, id))(v176 + 56))(v163, 1, 1, v79);
    goto LABEL_51;
  }
  v85 = v174;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  v86 = v176;
  v87 = *(void (**)(char *, char *, id))(v176 + 32);
  v88 = (uint64_t)v163;
  v87(v163, v85, v79);
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t, id))(v86 + 56);
  v89(v88, 0, 1, v79);
  v90 = *(unsigned int (**)(uint64_t, uint64_t, id))(v86 + 48);
  if (v90(v88, 1, v79) == 1)
  {
LABEL_51:
    outlined destroy of IndexPath?(v88);
    v142 = v82;
    goto LABEL_61;
  }
  v87((char *)v157[0], (char *)v88, v79);
  v91 = objc_msgSend((id)v69, sel_destinationIndexPath);
  if (!v91)
  {
    v88 = (uint64_t)v161;
    v89((uint64_t)v161, 1, 1, v79);
    goto LABEL_50;
  }
  v92 = v91;
  v93 = v174;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  v88 = (uint64_t)v161;
  v87(v161, v93, v79);
  v89(v88, 0, 1, v79);
  if (v90(v88, 1, v79) == 1)
  {
LABEL_50:
    (*(void (**)(uint64_t, id))(v176 + 8))(v157[0], v79);
    goto LABEL_51;
  }
  v94 = (uint64_t)v160;
  v87(v160, (char *)v88, v79);
  v95 = (char *)v82 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v82) + 0x60);
  swift_beginAccess();
  v96 = v172;
  v97 = TupleTypeMetadata2;
  v98 = v173;
  (*(void (**)(uint64_t, char *, uint64_t))(v172 + 16))(TupleTypeMetadata2, v95, v173);
  v99 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v98);
  v100 = v157[0];
  LOBYTE(v95) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(v157[0], v94, v98, v99);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v98);
  if ((v95 & 1) == 0)
  {
    v143 = *(void (**)(uint64_t, id))(v176 + 8);
    v143(v94, v79);
    v143(v100, v79);
LABEL_48:
    v142 = v182;
LABEL_61:
    $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v142);
    return;
  }
  v82 = v182;
  if (objc_msgSend(v168, sel_dataSource))
  {
    v101 = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v104 = type metadata accessor for SelectionManagerBox(255, v101, AssociatedConformanceWitness, v103);
    v105 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v104);
    aBlock[0] = v4;
    aBlock[1] = v104;
    aBlock[2] = v158;
    v188 = (ValueMetadata *)v105;
    type metadata accessor for UICollectionViewListCoordinatorBase();
  }
  v73 = 0;
  v144 = objc_msgSend(v181, sel_items);
  v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v69 & 0xC000000000000001) != 0)
    goto LABEL_65;
  if (*(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v145 = *(void **)(v69 + 32);
    swift_unknownObjectRetain();
LABEL_56:
    swift_bridgeObjectRelease();
    v146 = objc_msgSend(v145, sel_dragItem);
    swift_unknownObjectRelease();
    v147 = v160;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v149 = objc_msgSend(v181, sel_dropItem_toItemAtIndexPath_, v146, isa);
    swift_unknownObjectRelease();

    v150 = *(void (**)(char *, id))(v176 + 8);
    v150(v147, v79);
    v150((char *)v157[0], v79);
    $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v82);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v73);
    return;
  }
  __break(1u);
}

void closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  Class v12;

  v7 = *MEMORY[0x1E0DEEDD8] & *a1;
  UICollectionViewListCoordinatorBase.stopWaitingForAnimationCompletion()();
  swift_beginAccess();
  v9 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)(v7 + 96), *(_QWORD *)(*(_QWORD *)(v7 + 112) + 8), v8);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  ListCoreDataSource.moveCell(fromRowAt:to:)(a2, a3, v9, v10);
  swift_endAccess();
  UICollectionViewListCoordinatorBase.commitUpdates()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v12 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a4, sel_moveItemAtIndexPath_toIndexPath_, isa, v12);

}

uint64_t closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[20], *(_QWORD *)(v6[21] + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - v10;
  v12 = (char *)a1 + v6[12];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  ShadowListDataSource.performDrop(to:)(a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void @objc CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(a1, a2, a3, a4, (void (*)(id, uint64_t))CollectionViewListDragAndDropController.collectionView(_:performDropWith:));
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dropPreviewParametersForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))CollectionViewListDragAndDropController.collectionView(_:dropPreviewParametersForItemAt:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:)(a1, a2, a3, a4, (void (*)(id))specialized CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidExit:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized CollectionViewListDragAndDropController.collectionView(_:dropSessionDidExit:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized CollectionViewListDragAndDropController.collectionView(_:dropSessionDidExit:));
}

id TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id result;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;

  v8 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v9 = v8[20];
  v10 = v8[21];
  v11 = type metadata accessor for ShadowListDataSource(0, v9, v10, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v20[-v14];
  v16 = (char *)v4 + v8[12];
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  v21 = v9;
  v22 = v10;
  v23 = a3;
  v24 = a2;
  v17 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewDropProposal);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v11);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:), (uint64_t)v20, v11, v17, v18, (uint64_t)&v25);
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
  result = v25;
  if (!v25)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D70]), sel_initWithDropOperation_, 0);
  return result;
}

id closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  id result;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  Swift::OpaquePointer v28;
  Swift::Bool v29;
  id v30;
  _QWORD *v31;
  void *v32;

  v10 = type metadata accessor for ShadowListDataSource(255, a4, a5, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  v13 = type metadata accessor for _RowVisitationContext(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v31 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v31 - v17, a1, v13, v16);
  if ((a2 & 1) != 0)
  {
    v19 = _RowVisitationContext.canMove.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    if (v19)
    {
      result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D70]), sel_initWithDropOperation_intent_, 3, 1);
LABEL_20:
      *a6 = result;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
  v21 = objc_msgSend(a3, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_7;
LABEL_15:
    swift_bridgeObjectRelease();
    v28._rawValue = (void *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    v29 = _RowVisitationContext.canHandleDropInsert(items:)(v28);
    swift_bridgeObjectRelease();
    v30 = objc_allocWithZone(MEMORY[0x1E0DC3D70]);
    if (v29)
      result = objc_msgSend(v30, sel_initWithDropOperation_intent_, 2, 1);
    else
      result = objc_msgSend(v30, sel_initWithDropOperation_, 0);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23)
    goto LABEL_15;
LABEL_7:
  v32 = (void *)MEMORY[0x1E0DEE9D8];
  result = (id)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v23 & 0x8000000000000000) == 0)
  {
    v31 = a6;
    v24 = 0;
    do
    {
      if ((v22 & 0xC000000000000001) != 0)
        v25 = (id)MEMORY[0x18D75E3BC](v24, v22);
      else
        v25 = *(id *)(v22 + 8 * v24 + 32);
      v26 = v25;
      ++v24;
      v27 = objc_msgSend(v25, sel_itemProvider, v31);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v23 != v24);
    v28._rawValue = v32;
    swift_bridgeObjectRelease();
    a6 = v31;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

void CollectionViewListDragAndDropController.validIndexPath(in:)(void *a1, SEL *a2)
{
  char *v4;
  char *v5;

  v4 = (char *)objc_msgSend(a1, sel_numberOfSections);
  v5 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else if (((unint64_t)v5 & 0x8000000000000000) != 0 || !__OFSUB__(objc_msgSend(a1, *a2, v5), 1))
  {
LABEL_7:
    JUMPOUT(0x18D754B94);
  }
  __break(1u);
  goto LABEL_7;
}

void closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, _QWORD);
  void (*v13)(_QWORD *__return_ptr, uint64_t);

  v5 = type metadata accessor for ShadowListDataSource(255, a1, a2, a3);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  swift_bridgeObjectRetain();
  v8 = ViewTraitCollection.value<A>(for:defaultValue:)();
  v9 = (uint64_t)v13;
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v13(&v13, v8);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  swift_bridgeObjectRelease();
  v10 = v13;
  if (!v13)
  {
LABEL_5:
    v12 = (void (*)(_QWORD *__return_ptr, _QWORD))MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v11 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3758]), sel_initWithItemProvider_, v10);
  v13 = (void (*)(_QWORD *__return_ptr, uint64_t))v11;
  specialized Array._endMutation()();
  v12 = v13;

LABEL_6:
  *a4 = v12;
}

Class @objc TableViewListDragAndDropController.tableView(_:itemsForBeginning:at:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v16;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  swift_unknownObjectRetain();
  v11 = a1;
  specialized TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(v10, (uint64_t)v9, v12, v13);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

Class @objc TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v16;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  swift_unknownObjectRetain();
  v11 = a1;
  specialized TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(v10, (uint64_t)v9, v12, v13);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

void @objc TableViewListDragAndDropController.tableView(_:dragSessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized TableViewListDragAndDropController.tableView(_:dragSessionWillBegin:));
}

uint64_t @objc TableViewListDragAndDropController.tableView(_:dragSessionDidEnd:)()
{
  return specialized TableViewListDragAndDropController.tableView(_:dragSessionDidEnd:)();
}

void TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  Class isa;
  id v22;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  id v29;
  id v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[48];
  __int128 v35;
  __int128 v36;
  char v37;
  _OWORD v38[2];
  char v39;

  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v8 = v7[20];
  v9 = v7[21];
  v10 = type metadata accessor for ShadowListDataSource(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v31[-v13];
  v15 = (char *)v4 + v7[12];
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
  v32 = v8;
  v33 = v9;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:), (uint64_t)v31, v10, MEMORY[0x1E0DEAFA0], v16, (uint64_t)v34);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  if (v34[0] != 2 && (v34[0] & 1) != 0)
  {
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3768]), sel_init);
    v18 = (void *)objc_opt_self();
    v19 = v17;
    v20 = objc_msgSend(v18, sel_clearColor);
    objc_msgSend(v19, sel_setBackgroundColor_, v20);

    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

    if (!v22)
    {
      __break(1u);
      return;
    }
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCastUnknownClassUnconditional();
    v35 = 0u;
    v36 = 0u;
    v37 = 6;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 56))(AssociatedTypeWitness);
    if (v25)
    {
      v26 = (void *)v25;
      swift_retain();

      v27 = ViewGraph.responderNode.getter();
      swift_release();
      if (v27)
      {
        type metadata accessor for ViewResponder();
        if (swift_dynamicCastClass())
        {
          *(_QWORD *)&v38[0] = 2;
          hostingViewCoordinateSpace.getter();
          v34[40] = 1;
          dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
          outlined destroy of CoordinateSpace((uint64_t)v34);
          v38[0] = v35;
          v38[1] = v36;
          v39 = v37;
          outlined init with take of Path.Storage((uint64_t)v38, (uint64_t)v34);
          outlined retain of TableColumnCustomizationID.Base((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
          v28 = Path.isEmpty.getter();
          outlined retain of TableColumnCustomizationID.Base((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          if ((v28 & 1) != 0)
          {
            outlined retain of TableColumnCustomizationID.Base((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);

            swift_release();
          }
          else
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
            v29 = v19;
            outlined retain of TableColumnCustomizationID.Base((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
            v30 = UIBezierPath.init(_:)((uint64_t)v38);
            objc_msgSend(v29, sel_setVisiblePath_, v30);
            swift_release();

            outlined retain of TableColumnCustomizationID.Base((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          }
          return;
        }
        swift_release();
      }
    }

  }
}

uint64_t closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = type metadata accessor for ShadowListDataSource(255, a1, a2, a3);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  result = _RowVisitationContext.wantsClippedBackground.getter();
  *a4 = result & 1;
  return result;
}

id @objc TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:));
}

uint64_t TableViewListDragAndDropController.tableView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  Class isa;
  id v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  char *v53;
  uint64_t result;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;

  v5 = v4;
  v81 = a1;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA0);
  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8);
  v11 = *(_QWORD *)(v10 + 8);
  v80 = type metadata accessor for ShadowRowCollection(0, v9, v11, a4);
  v78 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80, v12);
  v79 = (char *)v75 - v13;
  v15 = type metadata accessor for ShadowSectionCollection(0, v9, v11, v14);
  v84 = *(_QWORD *)(v15 - 8);
  v85 = (void (*)(char *, char *, uint64_t))v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v88 = type metadata accessor for ShadowListDataSource(0, v9, v10, v17);
  v86 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v18);
  v90 = (char *)v75 - v19;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v20, v21);
  v83 = (uint64_t)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v75 - v25;
  v27 = type metadata accessor for IndexPath();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v75[1] = (char *)v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v87 = (char *)v75 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v89 = (char *)v75 - v36;
  v39 = MEMORY[0x1E0C80A78](v37, v38);
  v41 = (char *)v75 - v40;
  v76 = a2;
  v42 = objc_msgSend(a2, sel_localDragSession, v39);
  v43 = MEMORY[0x18D760234]((char *)v5 + *(_QWORD *)((*v8 & *v5) + 0x88));
  v44 = (id)v43;
  v77 = v5;
  if (v42)
  {
    swift_unknownObjectRelease();
    v45 = a3;
    if (v44)
    {
      swift_unknownObjectRelease();
      if (v42 == v44)
      {
        LODWORD(v82) = 1;
LABEL_9:
        v47 = v88;
        v46 = v89;
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (!v43)
    {
      LODWORD(v82) = 1;
      v47 = v88;
      v46 = v89;
      v45 = a3;
      goto LABEL_28;
    }
    swift_unknownObjectRelease();
    v45 = a3;
  }
  outlined init with copy of IndexPath?(v45, (uint64_t)v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    outlined destroy of IndexPath?((uint64_t)v26);
    LODWORD(v82) = 0;
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v41, v26, v27);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v49 = objc_msgSend(v81, sel_cellForRowAtIndexPath_, isa);

  v47 = v88;
  v46 = v89;
  if (!v49)
    goto LABEL_19;
  type metadata accessor for ListTableViewCell();
  v50 = swift_dynamicCastClass();
  if (!v50)
  {

LABEL_19:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v27);
    LODWORD(v82) = 0;
    goto LABEL_28;
  }
  v51 = *(void **)((char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x90));
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v27);

LABEL_27:
    LODWORD(v82) = 0;
    v5 = v77;
LABEL_28:
    v70 = v83;
    outlined init with copy of IndexPath?(v45, v83);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v70, 1, v27) == 1)
    {
      CollectionViewListDragAndDropController.validIndexPath(in:)(v81, (SEL *)&selRef_numberOfRowsInSection_);
      outlined destroy of IndexPath?(v70);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v46, v70, v27);
    }
    v71 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x60);
    swift_beginAccess();
    v85 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    v85(v90, v71, v47);
    ShadowListDataSource.sectionIDs.getter(v47, v72, v73, v74);
  }
  v52 = *(_QWORD **)(v50 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  if (!v52)
  {
LABEL_26:

    (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v27);
    goto LABEL_27;
  }
  v53 = *(char **)((char *)v52 + *(_QWORD *)((*v52 & *MEMORY[0x1E0DEEDD8]) + 0x1A8));
  v91 = 0;
  v92 = 0;
  result = MEMORY[0x18D760234](&v53[direct field offset for DragAndDropBridge.host]);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v55 = (void *)result;
  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  v75[0] = v56;
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
  v82 = v53;
  v57 = v51;
  v58 = ViewRendererHost.responderNode.getter();

  if (v58)
  {
    MEMORY[0x1E0C80A78](v59, v60);
    v75[-2] = &v91;
    dispatch thunk of ResponderNode.visit(applying:)();

    swift_release();
  }
  else
  {

  }
  v61 = v91;
  if (!v91)
  {

    v47 = v88;
    v46 = v89;
    goto LABEL_26;
  }
  v62 = v57;
  v63 = v92;
  v64 = (_QWORD *)((char *)v77 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v77) + 0x70));
  swift_beginAccess();
  swift_retain();
  v65 = v63;
  v66 = v62;
  v67 = specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)(v64, v76, v61, v65, v62);
  swift_endAccess();
  swift_release();
  if (objc_msgSend(v67, sel_operation) != (id)2)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v27);

    swift_release();
    LODWORD(v82) = 0;
    v5 = v77;
    goto LABEL_9;
  }
  v68 = objc_msgSend(v67, sel_operation);
  v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D70]), sel_initWithDropOperation_intent_, v68, 2);
  swift_release();

  (*(void (**)(char *, uint64_t))(v28 + 8))(v41, v27);
  return (uint64_t)v69;
}

id @objc TableViewListDragAndDropController.tableView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, uint64_t, char *))TableViewListDragAndDropController.tableView(_:dropSessionDidUpdate:withDestinationIndexPath:));
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(id, uint64_t, char *))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v21;

  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v21 - v13;
  if (a5)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = type metadata accessor for IndexPath();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  }
  else
  {
    v16 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  }
  v17 = a3;
  swift_unknownObjectRetain();
  v18 = a1;
  v19 = (void *)a6(v17, a4, v14);

  swift_unknownObjectRelease();
  outlined destroy of IndexPath?((uint64_t)v14);
  return v19;
}

void TableViewListDragAndDropController.tableView(_:performDropWith:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  void *v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  id v50;
  _BOOL4 v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  _QWORD *v63;
  uint64_t Strong;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  id v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  void (*v118)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), double);
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  id v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD v141[3];
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[5];

  v125 = a1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xA0);
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xA8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v124 = AssociatedTypeWitness;
  v123 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v128 = type metadata accessor for DropCoordinator(0, TupleTypeMetadata2, v9, v10);
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128, v11);
  v126 = (uint64_t)&v119 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v122 = (char *)&v119 - v15;
  v130 = type metadata accessor for ShadowListDataSource(0, v6, v5, v16);
  v132 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130, v17);
  v131 = (char *)&v119 - v18;
  v136 = TupleTypeMetadata2;
  v21 = type metadata accessor for DropCoordinator.Operation(0, TupleTypeMetadata2, v19, v20);
  v133 = *(_QWORD *)(v21 - 8);
  v134 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v135 = (uint64_t)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v121 = (char *)&v119 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v137 = (char *)&v119 - v29;
  v30 = type metadata accessor for IndexPath();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v120 = (char *)&v119 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v119 - v36;
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v38, v39);
  v129 = (char *)&v119 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0C80A78](v41, v42);
  v45 = (char *)&v119 - v44;
  v138 = a2;
  v46 = a2;
  v47 = v139;
  v48 = objc_msgSend(objc_msgSend(v46, sel_session, v43), sel_localDragSession);
  swift_unknownObjectRelease();
  v49 = MEMORY[0x18D760234]((char *)v47 + *(_QWORD *)((*v4 & *v47) + 0x88));
  v50 = (id)v49;
  if (v48)
  {
    swift_unknownObjectRelease();
    if (v50)
    {
      swift_unknownObjectRelease();
      v51 = v48 == v50;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v49)
  {
    swift_unknownObjectRelease();
LABEL_6:
    v51 = 0;
    goto LABEL_8;
  }
  v51 = 1;
LABEL_8:
  v52 = objc_msgSend(v138, sel_items);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UITableViewDropItem);
  v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v53 >> 62)
  {
    swift_bridgeObjectRetain();
    v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v55 = v54 == 1 && v51;
  v56 = v31;
  if (v55)
  {
    v57 = objc_msgSend(v138, sel_items);
    v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v58 & 0xC000000000000001) != 0)
    {
      v59 = (void *)MEMORY[0x18D75E3BC](0, v58);
    }
    else
    {
      if (!*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_53;
      }
      v59 = *(void **)(v58 + 32);
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    v60 = objc_msgSend(v59, sel_sourceIndexPath);
    swift_unknownObjectRelease();
    if (v60)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v45, v37, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v45, 0, 1, v30);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v45, 1, v30) != 1)
      {
        outlined destroy of IndexPath?((uint64_t)v45);
        goto LABEL_22;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v45, 1, 1, v30);
    }
    outlined destroy of IndexPath?((uint64_t)v45);
    v61 = objc_msgSend(v138, sel_proposal);
    v62 = objc_msgSend(v61, sel_operation);

    if (v62 == (id)3)
      return;
  }
LABEL_22:
  v63 = (_QWORD *)((char *)v139 + *(_QWORD *)((*v4 & *v139) + 0x70));
  swift_beginAccess();
  if (*v63 || v63[1] != 1)
  {
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v65 = (_QWORD *)Strong;
      v66 = *(void **)((char *)v139 + *(_QWORD *)((*v4 & *v139) + 0x90));
      if (v66)
      {
        v67 = v63[1];
        v68 = v66;
        v69 = objc_msgSend(v138, sel_session);
        v144[3] = &type metadata for DropInfoAdaptor;
        v144[4] = &protocol witness table for DropInfoAdaptor;
        v70 = swift_allocObject();
        v71 = (_QWORD *)(v70 + 16);
        v144[0] = v70;
        v72 = v68;
        swift_retain();
        DropInfoAdaptor.init(_:host:responder:)(v69, v72, v65, v71);
        v73 = *v65;
        v140 = v65;
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v67 + 8))(v141, v73, v67);
        v74 = v142;
        if (v142)
        {
          v75 = v143;
          __swift_project_boxed_opaque_existential_1(v141, v142);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v75 + 16))(v144, v74, v75);

          swift_release();
          outlined destroy of DropInfo((uint64_t)v144);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
        }
        else
        {
          swift_release();

          outlined destroy of DropInfo((uint64_t)v144);
          outlined destroy of DropDelegate?((uint64_t)v141);
        }
        goto LABEL_46;
      }
      swift_release();
    }
  }
  v76 = objc_msgSend(v138, sel_destinationIndexPath);
  if (v76)
  {
    v77 = v76;
    v78 = (uint64_t)v37;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

    v79 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    v80 = (uint64_t)v129;
    v79(v129, v37, v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v80, 0, 1, v30);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v80, 1, v30) != 1)
    {
      v81 = (uint64_t)v120;
      v79(v120, (char *)v80, v30);
      v82 = (uint64_t)v121;
      v83 = (uint64_t)&v121[*(int *)(v136 + 48)];
      v84 = (char *)v139 + *(_QWORD *)((*v4 & *v139) + 0x60);
      swift_beginAccess();
      v85 = v132;
      v86 = v131;
      v87 = v84;
      v88 = v130;
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v131, v87, v130);
      v89 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v88);
      ListDiffable.rowIndex(at:)(v82, v83, v81, v88, v89);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v88);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v81, v30);
      v90 = v134;
      swift_storeEnumTagMultiPayload();
      v91 = v133;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 32))(v137, v82, v90);
      goto LABEL_34;
    }
  }
  else
  {
    v80 = (uint64_t)v129;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v129, 1, 1, v30);
    v78 = (uint64_t)v37;
  }
  outlined destroy of IndexPath?(v80);
  v92 = v136;
  v93 = (uint64_t)v122;
  v94 = (uint64_t)&v122[*(int *)(v136 + 48)];
  v95 = (char *)v139 + *(_QWORD *)((*v4 & *v139) + 0x60);
  swift_beginAccess();
  v96 = v132;
  v97 = v56;
  v98 = v131;
  v99 = v95;
  v100 = v130;
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v131, v99, v130);
  CollectionViewListDragAndDropController.validIndexPath(in:)(v125, (SEL *)&selRef_numberOfRowsInSection_);
  v101 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v100);
  ListDiffable.rowIndex(at:)(v93, v94, v78, v100, v101);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v78, v30);
  v102 = v137;
  (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v100);
  v103 = &v102[*(int *)(v92 + 48)];
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32))(v102, v93);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v123 - 8) + 32))(v103, v94);
  v90 = v134;
  swift_storeEnumTagMultiPayload();
  v91 = v133;
LABEL_34:
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 16))(v135, v137, v90);
  v104 = objc_msgSend(objc_msgSend(v138, sel_session), sel_items);
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v105 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v105 >> 62)
  {
    swift_bridgeObjectRetain();
    v106 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v106 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v106)
  {
    v141[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v106 & 0x8000000000000000) == 0)
    {
      v107 = 0;
      do
      {
        if ((v105 & 0xC000000000000001) != 0)
          v108 = (id)MEMORY[0x18D75E3BC](v107, v105);
        else
          v108 = *(id *)(v105 + 8 * v107 + 32);
        v109 = v108;
        ++v107;
        v110 = objc_msgSend(v108, sel_itemProvider);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v106 != v107);
      v111 = v141[0];
      swift_bridgeObjectRelease();
      v91 = v133;
      v90 = v134;
      goto LABEL_45;
    }
LABEL_53:
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
  v111 = MEMORY[0x1E0DEE9D8];
LABEL_45:
  v113 = v126;
  v114 = DropCoordinator.init(operation:items:)(v135, v111, v136, v112, v126);
  v116 = MEMORY[0x1E0C80A78](v114, v115);
  *(&v119 - 2) = v117;
  *(&v119 - 1) = v113;
  v118(partial apply for closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:), v116);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v137, v90);
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v113, v128);
LABEL_46:
  $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(v139);
}

uint64_t $defer #1 <A>() in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(_QWORD *a1)
{
  uint64_t v1;
  _OWORD v3[5];

  v3[0] = xmmword_187BF9840;
  memset(&v3[1], 0, 57);
  v1 = (uint64_t)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70);
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v3, v1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  return swift_endAccess();
}

uint64_t closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[20], v6[21], a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - v10;
  v12 = (char *)a1 + v6[12];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  ShadowListDataSource.performDrop(to:)(a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void @objc TableViewListDragAndDropController.tableView(_:performDropWith:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(a1, a2, a3, a4, (void (*)(id, uint64_t))TableViewListDragAndDropController.tableView(_:performDropWith:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain();
  v9 = a1;
  a5(v8, a4);

  swift_unknownObjectRelease();
}

id @objc TableViewListDragAndDropController.tableView(_:dropPreviewParametersForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))TableViewListDragAndDropController.tableView(_:dropPreviewParametersForRowAt:));
}

id @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v17;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  v15 = (void *)a5(v13, v12);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v15;
}

void @objc TableViewListDragAndDropController.tableView(_:dropSessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:)(a1, a2, a3, a4, (void (*)(id))specialized TableViewListDragAndDropController.tableView(_:dropSessionDidEnter:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dropSessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  id v7;
  id v8;

  v7 = a3;
  swift_unknownObjectRetain();
  v8 = a1;
  a5(v7);

  swift_unknownObjectRelease();
}

void @objc TableViewListDragAndDropController.tableView(_:dropSessionDidExit:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized CollectionViewListDragAndDropController.collectionView(_:dropSessionDidExit:));
}

void @objc TableViewListDragAndDropController.tableView(_:dropSessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized TableViewListDragAndDropController.tableView(_:dropSessionDidEnd:));
}

void @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain();
  v9 = a1;
  a5(a4);

  swift_unknownObjectRelease();
}

uint64_t type metadata accessor for TableViewListDragAndDropController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableViewListDragAndDropController);
}

id specialized ListDragAndDropControllerBase.init(dataSource:dispatchUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  objc_super v19;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v9 = (_OWORD *)((char *)v3 + v8[14]);
  *v9 = xmmword_187BF9840;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  *(_OWORD *)((char *)v9 + 57) = 0u;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x78)) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x80)) = v10;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x90)) = 0;
  v11 = (char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x60);
  v12 = v8[10];
  v13 = v8[11];
  v15 = type metadata accessor for ShadowListDataSource(0, v12, v13, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, a1, v15);
  v16 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v7 & *v3) + 0x68));
  *v16 = a2;
  v16[1] = a3;
  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for ListDragAndDropControllerBase(0, v12, v13, v17);
  return objc_msgSendSuper2(&v19, sel_init);
}

id specialized CollectionViewListDragAndDropController.__allocating_init(dataSource:dispatchUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return specialized ListDragAndDropControllerBase.init(dataSource:dispatchUpdate:)(a1, a2, a3);
}

void specialized ListDragAndDropControllerBase.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t specialized CollectionViewListDragAndDropController.collectionView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD **v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v11, a3, v6, v9);
  v12 = (_QWORD **)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x78));
  swift_beginAccess();
  v13 = *v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v12 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *v12 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1, v13);
    *v12 = v13;
  }
  v13[2] = v16 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, v11, v6);
  swift_endAccess();
  return CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(a3, a1, v19, v17);
}

uint64_t specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(void *a1)
{
  id v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  Class isa;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _OWORD v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  swift_unknownObjectWeakAssign();
  v32 = a1;
  v2 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v45 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  if (!v45)
  {
LABEL_28:
    swift_bridgeObjectRelease_n();
    specialized Sequence.compactMap<A>(_:)((uint64_t)v4);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v32, sel_setLocalContext_, isa);

    v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v31 = (_QWORD *)((char *)v33 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v33) + 0x78));
    swift_beginAccess();
    *(_QWORD *)((char *)v33 + *(_QWORD *)((*v30 & *v33) + 0x80)) = *v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v31 = MEMORY[0x1E0DEE9D8];
    return swift_bridgeObjectRelease();
  }
  v5 = v3 & 0xC000000000000001;
  v6 = 4;
  v7 = (unint64_t *)&lazy cache variable for type metadata for Any?;
  v43 = v3 & 0xC000000000000001;
  v44 = MEMORY[0x1E0DEE9B8] + 8;
  v34 = v3;
  while (1)
  {
    v8 = v7;
    if (v5)
      v9 = (id)MEMORY[0x18D75E3BC](v6 - 4, v3);
    else
      v9 = *(id *)(v3 + 8 * v6);
    v10 = v9;
    v11 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (objc_msgSend(v9, sel_localObject))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v54, 0, sizeof(v54));
    }
    outlined init with take of Image.Resolved?((uint64_t)v54, (uint64_t)&v46, v7, v44);
    if (!*((_QWORD *)&v47 + 1))
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v46, v7, MEMORY[0x1E0DEE9B8] + 8);
LABEL_19:
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      goto LABEL_20;
    }
    type metadata accessor for DragSourceContext();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_19;
    v12 = *(_QWORD *)(v53 + 24);
    swift_retain();
    swift_release();
    v13 = v12 + 152;
    swift_beginAccess();
    outlined init with copy of SwiftUIAnySortComparator?(v12 + 152, (uint64_t)&v46, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    if (!*((_QWORD *)&v52 + 1))
      break;
    v59 = v50;
    v60 = v51;
    v61 = v52;
    v55 = v46;
    v56 = v47;
    v57 = v48;
    v58 = v49;
    swift_release();
    v5 = v43;
    v7 = v8;
LABEL_20:

    if (*((_QWORD *)&v61 + 1))
    {
      v50 = v59;
      v51 = v60;
      v52 = v61;
      v46 = v55;
      v47 = v56;
      v48 = v57;
      v49 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v15 = *((_QWORD *)v4 + 2);
      v14 = *((_QWORD *)v4 + 3);
      if (v15 >= v14 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v15 + 1;
      v16 = &v4[112 * v15];
      v17 = v46;
      v18 = v48;
      *((_OWORD *)v16 + 3) = v47;
      *((_OWORD *)v16 + 4) = v18;
      *((_OWORD *)v16 + 2) = v17;
      v19 = v49;
      v20 = v50;
      v21 = v52;
      *((_OWORD *)v16 + 7) = v51;
      *((_OWORD *)v16 + 8) = v21;
      *((_OWORD *)v16 + 5) = v19;
      *((_OWORD *)v16 + 6) = v20;
      v7 = v8;
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v55, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    }
    ++v6;
    if (v11 == v45)
      goto LABEL_28;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)&v46, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  swift_beginAccess();
  result = outlined init with copy of SwiftUIAnySortComparator?(v12 + 32, (uint64_t)&v46, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  if (*((_QWORD *)&v52 + 1))
  {
    MEMORY[0x1E0C80A78](result, v23);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    static Update.dispatchImmediately<A>(_:)();
    v41 = v46;
    v24 = *((_QWORD *)&v47 + 1);
    v37 = v47;
    v38 = *((_QWORD *)&v46 + 1);
    v25 = *((_QWORD *)&v48 + 1);
    v35 = *((_QWORD *)&v47 + 1);
    v36 = *((_QWORD *)&v48 + 1);
    v26 = *((_QWORD *)&v49 + 1);
    v39 = v48;
    v27 = v49;
    v42 = *(_QWORD *)&v54[0];
    v40 = v50;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v50 + 8, (uint64_t)&v59 + 8, v8, MEMORY[0x1E0DEE9B8] + 8);
    LOBYTE(v55) = v41;
    *((_QWORD *)&v55 + 1) = v38;
    *(_QWORD *)&v56 = v37;
    *((_QWORD *)&v56 + 1) = v24;
    *(_QWORD *)&v57 = v39;
    *((_QWORD *)&v57 + 1) = v25;
    *(_QWORD *)&v58 = v27;
    *((_QWORD *)&v58 + 1) = v26;
    *(_QWORD *)&v59 = v40;
    *((_QWORD *)&v61 + 1) = v42;
    outlined copy of AppIntentExecutor?(v38);
    outlined copy of AppIntentExecutor?(v35);
    outlined copy of AppIntentExecutor?(v36);
    outlined copy of AppIntentExecutor?(*((uint64_t *)&v27 + 1));
    outlined destroy of _DraggingModifier(&v46);
    outlined init with copy of DragContext((uint64_t)&v55, (uint64_t)&v46);
    swift_beginAccess();
    v28 = v13;
    v7 = (unint64_t *)&lazy cache variable for type metadata for Any?;
    outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v46, v28, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    swift_endAccess();
    swift_release();
    v3 = v34;
    v5 = v43;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t specialized CollectionViewListDragAndDropController.collectionView(_:dragSessionDidEnd:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakAssign();
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x80)) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v3 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x78));
  swift_beginAccess();
  *v3 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t specialized DragAndDropBridge.dragItems(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[13];
  _BYTE v11[40];

  DragPayload.resolve()((uint64_t)v10);
  if (LOBYTE(v10[0]) == 1)
  {
    swift_retain();
    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v11);
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_BYTE *)(a2 + 24);
    type metadata accessor for DragSourceContext();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_BYTE *)(v6 + 64) = -1;
    *(_QWORD *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 80) = 1;
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    outlined init with take of Image.Resolved?((uint64_t)v11, v6 + 32, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
    outlined consume of Path?(0, 0, 0, 0, 0xFFu);
    *(_QWORD *)(v6 + 72) = v4;
    *(_BYTE *)(v6 + 80) = v5;
    swift_retain();
    swift_retain();
    v7 = swift_bridgeObjectRetain();
    v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12DraggingItemVG_So06UIDragG0Cs5NeverOTg503_s7d77UI17DragAndDropBridgeC9dragItems33_1C4DED7BD95AC993CC69F2CB25BC2A40LLySaySo10hg54CGAA0cE23DefaultPreviewResponderC_AA0C7PayloadCtFAgA08F8S0VXEfU_AF0lN23DefaultPreviewResponderCAF0L13SourceContextCTf1cn_nTf4ngg_n(v7, a1, v6);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of DragContext(v10);
    swift_release();
  }
  else
  {
    outlined destroy of DragContext(v10);
    return MEMORY[0x1E0DEE9D8];
  }
  return v8;
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[13];
  _BYTE v11[40];

  DragPayload.resolve()((uint64_t)v10);
  if ((v10[0] & 1) != 0)
  {
    swift_retain();
    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v11);
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_BYTE *)(a2 + 24);
    type metadata accessor for DragSourceContext();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_BYTE *)(v6 + 64) = -1;
    *(_QWORD *)(v6 + 72) = 0;
    *(_BYTE *)(v6 + 80) = 1;
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    outlined init with take of Image.Resolved?((uint64_t)v11, v6 + 32, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
    outlined consume of Path?(0, 0, 0, 0, 0xFFu);
    *(_QWORD *)(v6 + 72) = v4;
    *(_BYTE *)(v6 + 80) = v5;
    swift_retain();
    swift_retain();
    v7 = swift_bridgeObjectRetain();
    v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12DraggingItemVG_So06UIDragG0Cs5NeverOTg503_s7d77UI17DragAndDropBridgeC9dragItems33_1C4DED7BD95AC993CC69F2CB25BC2A40LLySaySo10hg54CGAA0cE23DefaultPreviewResponderC_AA0C7PayloadCtFAgA08F8S0VXEfU_AF0lN23DefaultPreviewResponderCAF0L13SourceContextCTf1cn_nTf4ngg_n(v7, a1, v6);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of DragContext(v10);
    swift_release();
  }
  else
  {
    outlined destroy of DragContext(v10);
    return MEMORY[0x1E0DEE9D8];
  }
  return v8;
}

uint64_t specialized DragAndDropBridge.itemsInListForSession(_:)()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  result = MEMORY[0x18D760234](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v2 = (void *)result;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>();
    v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      MEMORY[0x1E0C80A78](v4, v5);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    v6 = MEMORY[0x1E0DEE9D8];
    swift_release();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized TableViewListDragAndDropController.dragItem(at:tableView:session:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Class isa;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v5 = v4;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA0);
  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8);
  v11 = type metadata accessor for ShadowListDataSource(0, v9, v10, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v31 - v14;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(a2, sel_cellForRowAtIndexPath_, isa);

  if (!v17)
    goto LABEL_9;
  type metadata accessor for ListTableViewCell();
  v18 = swift_dynamicCastClass();
  if (!v18 || (v19 = *(_QWORD **)(v18 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host)) == 0)
  {

LABEL_9:
    v24 = (char *)v5 + *(_QWORD *)((*v8 & *v5) + 0x60);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v24, v11);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v31 - 2) = v9;
    *(&v31 - 1) = v10;
    type metadata accessor for [UIDragItem]();
    v28 = v27;
    v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v11);
    ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:), (uint64_t)(&v31 - 4), v11, v28, v29, (uint64_t)&v33);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v33)
      return v33;
    else
      return MEMORY[0x1E0DEE9D8];
  }
  v20 = *(void **)((char *)v19 + *(_QWORD *)((*v8 & *v19) + 0x1A8));
  v32 = v19;
  v21 = v20;
  v22 = specialized DragAndDropBridge.itemsInListForSession(_:)();

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }

  if (!v23)
  {
    swift_bridgeObjectRelease();
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    goto LABEL_9;
  }
  return v22;
}

unint64_t specialized TableViewListDragAndDropController.tableView(_:itemsForAddingTo:at:point:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized TableViewListDragAndDropController.dragItem(at:tableView:session:)(a2, a1, a3, a4);
}

void specialized TableViewListDragAndDropController.tableView(_:dragSessionWillBegin:)(void *a1)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  Class isa;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  swift_unknownObjectWeakAssign();
  v29 = a1;
  v2 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v5 = MEMORY[0x1E0DEE9B8];
  if (v4)
  {
    v41 = v3 & 0xC000000000000001;
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    v7 = 4;
    v39 = v4;
    v40 = MEMORY[0x1E0DEE9B8] + 8;
    v30 = v3;
    while (1)
    {
      if (v41)
        v8 = (id)MEMORY[0x18D75E3BC](v7 - 4, v3);
      else
        v8 = *(id *)(v3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (objc_msgSend(v8, sel_localObject))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v50, 0, sizeof(v50));
      }
      outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for Any?, v40);
      if (!*((_QWORD *)&v43 + 1))
        break;
      type metadata accessor for DragSourceContext();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_19;
      v11 = *(_QWORD *)(v49 + 24);
      swift_retain();
      swift_release();
      v12 = v11 + 152;
      swift_beginAccess();
      outlined init with copy of SwiftUIAnySortComparator?(v11 + 152, (uint64_t)&v42, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      if (*((_QWORD *)&v48 + 1))
      {
        v55 = v46;
        v56 = v47;
        v57 = v48;
        v51 = v42;
        v52 = v43;
        v53 = v44;
        v54 = v45;
        swift_release();
        v4 = v39;
      }
      else
      {
        v38 = v6;
        outlined destroy of AccessibilityTableContext?((uint64_t)&v42, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        swift_beginAccess();
        v21 = outlined init with copy of SwiftUIAnySortComparator?(v11 + 32, (uint64_t)&v42, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
        if (!*((_QWORD *)&v48 + 1))
        {
          __break(1u);
          return;
        }
        MEMORY[0x1E0C80A78](v21, v22);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        static Update.dispatchImmediately<A>(_:)();
        v36 = v42;
        v23 = *((_QWORD *)&v43 + 1);
        v33 = v43;
        v34 = *((_QWORD *)&v42 + 1);
        v24 = *((_QWORD *)&v44 + 1);
        v31 = *((_QWORD *)&v43 + 1);
        v32 = *((_QWORD *)&v44 + 1);
        v25 = *((_QWORD *)&v45 + 1);
        v35 = v44;
        v26 = v45;
        v37 = *(_QWORD *)&v50[0];
        v27 = v46;
        v5 = MEMORY[0x1E0DEE9B8];
        outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v46 + 8, (uint64_t)&v55 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        LOBYTE(v51) = v36;
        *((_QWORD *)&v51 + 1) = v34;
        *(_QWORD *)&v52 = v33;
        *((_QWORD *)&v52 + 1) = v23;
        *(_QWORD *)&v53 = v35;
        *((_QWORD *)&v53 + 1) = v24;
        *(_QWORD *)&v54 = v26;
        *((_QWORD *)&v54 + 1) = v25;
        *(_QWORD *)&v55 = v27;
        *((_QWORD *)&v57 + 1) = v37;
        outlined copy of AppIntentExecutor?(v34);
        outlined copy of AppIntentExecutor?(v31);
        outlined copy of AppIntentExecutor?(v32);
        outlined copy of AppIntentExecutor?(*((uint64_t *)&v26 + 1));
        outlined destroy of _DraggingModifier(&v42);
        outlined init with copy of DragContext((uint64_t)&v51, (uint64_t)&v42);
        swift_beginAccess();
        outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v42, v12, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        swift_endAccess();
        swift_release();
        v3 = v30;
        v4 = v39;
        v6 = v38;
      }
LABEL_20:

      if (*((_QWORD *)&v57 + 1))
      {
        v46 = v55;
        v47 = v56;
        v48 = v57;
        v42 = v51;
        v43 = v52;
        v44 = v53;
        v45 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        v14 = *((_QWORD *)v6 + 2);
        v13 = *((_QWORD *)v6 + 3);
        if (v14 >= v13 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v14 + 1;
        v15 = &v6[112 * v14];
        v16 = v42;
        v17 = v44;
        *((_OWORD *)v15 + 3) = v43;
        *((_OWORD *)v15 + 4) = v17;
        *((_OWORD *)v15 + 2) = v16;
        v18 = v45;
        v19 = v46;
        v20 = v48;
        *((_OWORD *)v15 + 7) = v47;
        *((_OWORD *)v15 + 8) = v20;
        *((_OWORD *)v15 + 5) = v18;
        *((_OWORD *)v15 + 6) = v19;
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v51, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      }
      ++v7;
      if (v10 == v4)
        goto LABEL_29;
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
LABEL_19:
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    goto LABEL_20;
  }
  v6 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_29:
  swift_bridgeObjectRelease_n();
  specialized Sequence.compactMap<A>(_:)((uint64_t)v6);
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_setLocalContext_, isa);

}

uint64_t specialized TableViewListDragAndDropController.tableView(_:dragSessionDidEnd:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_187236F40()
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of DropInfo(uint64_t a1)
{
  destroy for AccessibilityRelationshipScope.Key();
  return a1;
}

void type metadata accessor for DropDelegate?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DropDelegate?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for DropDelegate);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?);
  }
}

uint64_t partial apply for closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TableViewListDragAndDropController.tableView(_:dragPreviewParametersForRowAt:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void type metadata accessor for _ContiguousArrayStorage<IndexPath>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for IndexPath();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t partial apply for closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in TableViewListDragAndDropController.tableView(_:performDropWith:)(*(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t partial apply for closure #1 in DragAndDropBridge.outermostDropResponder()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DragAndDropBridge.outermostDropResponder()(a1, *(uint64_t **)(v2 + 16), a2);
}

id partial apply for closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TableViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:)(a1, *(_BYTE *)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _DraggingModifier.resolve()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _DraggingModifier.resolve()(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *outlined destroy of _DraggingModifier(_QWORD *a1)
{
  destroy for _DraggingModifier(a1);
  return a1;
}

uint64_t outlined init with copy of DragContext(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DragContext(a2, a1);
  return a2;
}

void partial apply for closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:)(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in TableViewListDragAndDropController.dragItem(at:tableView:session:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void type metadata accessor for [UIDragItem]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [UIDragItem])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [UIDragItem]);
  }
}

uint64_t partial apply for closure #1 in DragAndDropBridge.itemsInListForSession(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DragAndDropBridge.itemsInListForSession(_:)(a1, *(_QWORD **)(v2 + 16), a2);
}

_QWORD *outlined destroy of DragContext(_QWORD *a1)
{
  destroy for DragContext(a1);
  return a1;
}

uint64_t partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void partial apply for closure #2 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)()
{
  uint64_t v0;

  closure #2 in CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t partial apply for closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #4 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(*(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t sub_1872371D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;

  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  closure #1 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)(*(_QWORD **)(v0 + 32), v0 + ((v2 + 40) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 40) & ~v2)) & ~v2), *(void **)(v0+ ((*(_QWORD *)(v1 + 64) + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 40) & ~v2)) & ~v2) + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1872372CC()
{
  return swift_deallocObject();
}

uint64_t sub_1872372DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in CollectionViewListDragAndDropController.collectionView(_:performDropWith:)()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0xD0)) = *(_BYTE *)(v0 + 24);
}

id partial apply for closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(*(id *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in CollectionViewListDragAndDropController.dropProposal(indexPath:session:isLocalSession:targetsRow:)(a1, *(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), a4) & 1;
}

void partial apply for closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in CollectionViewListDragAndDropController.dragItem(at:collectionView:session:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<MenuOrderKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuOrderKey>);
  }
}

uint64_t key path setter for EnvironmentValues.menuOrder : EnvironmentValues()
{
  return EnvironmentValues.menuOrder.setter();
}

uint64_t EnvironmentValues.menuOrder.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuOrder(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18723753C()
{
  return EnvironmentValues.menuOrder.setter();
}

void static MenuOrder.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static MenuOrder.priority.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static MenuOrder.fixed.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static MenuOrder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MenuOrder.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MenuOrder.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*EnvironmentValues.menuOrder.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.menuOrder.modify;
}

uint64_t EnvironmentValues.menuOrder.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type MenuOrder and conformance MenuOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuOrder and conformance MenuOrder;
  if (!lazy protocol witness table cache variable for type MenuOrder and conformance MenuOrder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuOrder, &type metadata for MenuOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuOrder and conformance MenuOrder);
  }
  return result;
}

uint64_t sub_187237848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<MenuOrder>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MenuOrder> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<MenuOrder>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MenuOrder>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuOrder>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuOrder>);
  }
}

void *type metadata accessor for MenuOrderKey()
{
  return &unk_1E1AB2938;
}

unint64_t lazy protocol witness table accessor for type MenuOrder.Guts and conformance MenuOrder.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuOrder.Guts and conformance MenuOrder.Guts;
  if (!lazy protocol witness table cache variable for type MenuOrder.Guts and conformance MenuOrder.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuOrder.Guts, &type metadata for MenuOrder.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuOrder.Guts and conformance MenuOrder.Guts);
  }
  return result;
}

uint64_t PlaceholderTextShapeStyle._apply(to:)()
{
  return HierarchicalShapeStyle._apply(to:)();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance PlaceholderTextShapeStyle()
{
  return HierarchicalShapeStyle._apply(to:)();
}

ValueMetadata *type metadata accessor for PlaceholderTextShapeStyle()
{
  return &type metadata for PlaceholderTextShapeStyle;
}

uint64_t TabViewStyleConfiguration.init(selection:sidebarVisibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a7, 1, 1, v14);
  v16 = a7 + *(int *)(type metadata accessor for TabViewStyleConfiguration(0, a5, a6, v15) + 36);
  v17 = type metadata accessor for Optional();
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(a7, a1, v17);
  result = outlined consume of Binding<NavigationSplitViewColumn>?(*(_QWORD *)v16, *(_QWORD *)(v16 + 8));
  *(_QWORD *)v16 = a2;
  *(_QWORD *)(v16 + 8) = a3;
  *(_BYTE *)(v16 + 16) = a4;
  return result;
}

void protocol witness for View.body.getter in conformance TabViewStyleConfiguration<A>.Content(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t _TabViewValue.selection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  type metadata accessor for Binding();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t _TabViewValue.Init1.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for ResolvedTabView(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

void _TabViewValue.Init1.value.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = type metadata accessor for TabViewStyleConfiguration(0, v5, v6, a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v25 - v10;
  v13 = type metadata accessor for ResolvedTabView(0, v5, v6, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v22, v3 + *(int *)(a1 + 52), v17, v20);
  _TabViewValue.Init1.base.getter(a1, v24, (uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v16, v7);
  _TabViewValue.init(style:configuration:)((uint64_t)v22, v17, v26);
}

void protocol witness for static Rule.initialValue.getter in conformance _TabViewValue<A, B>.Init1()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187237CC4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

uint64_t dispatch thunk of static TabViewStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static TabViewStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for _TabViewValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, unint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  __int128 v33;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64);
  v10 = (v8 | 7) + *(_QWORD *)(v6 + 64);
  v11 = v8 | 7 | *(_DWORD *)(v6 + 80);
  if (v11 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v10 & ~(v8 | 7)) + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    goto LABEL_19;
  }
  v15 = ~(v8 | 7);
  v16 = *(unsigned int *)(v7 + 84);
  v17 = ~v8;
  (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
  v18 = (_QWORD *)(((unint64_t)v4 + v10) & v15);
  v19 = ((unint64_t)a2 + v10) & v15;
  v20 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 0x80000000) == 0)
  {
    v21 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    if ((_DWORD)v21 != -1)
      goto LABEL_14;
LABEL_16:
    *v18 = *(_QWORD *)v19;
    v26 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v20;
    v27 = v8 + 8;
    v28 = ((unint64_t)v26 + v8 + 8) & v17;
    v29 = ((unint64_t)v20 + v27) & v17;
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    v22 = (unint64_t)v18;
    swift_retain();
    swift_retain();
    v30(v28, v29, v5);
    goto LABEL_17;
  }
  v23 = v16;
  v24 = v18;
  v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v20 + v8 + 8) & v17, v23, v5);
  v18 = v24;
  if (!v25)
    goto LABEL_16;
LABEL_14:
  v22 = (unint64_t)v18;
  memcpy(v18, (const void *)v19, v9);
LABEL_17:
  v31 = ((v22 | 7) + v9) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((v19 | 7) + v9) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v32 + 8) < 0xFFFFFFFFuLL)
  {
    v33 = *(_OWORD *)v32;
    *(_BYTE *)(v31 + 16) = *(_BYTE *)(v32 + 16);
    *(_OWORD *)v31 = v33;
    return v4;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  *(_BYTE *)(v31 + 16) = *(_BYTE *)(v32 + 16);
  swift_retain();
LABEL_19:
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v14 = ~v10;
  v15 = (v10 + 16) & ~v10;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v15 + v16;
    if ((_DWORD)v18 != -1)
      goto LABEL_5;
LABEL_7:
    *v12 = *v13;
    v20 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v20 + v10 + 8) & v14, ((unint64_t)v17 + v10 + 8) & v14, v8);
    goto LABEL_8;
  }
  v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v17 + v10 + 8) & v14))
    goto LABEL_7;
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  v21 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v21;
  v23 = ((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v23 = v22;
  return a1;
}

uint64_t assignWithTake for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  int v25;
  size_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = ((v9 + 16) & ~v9) + v14;
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = ~v9;
  if ((v13 & 0x80000000) == 0)
  {
    v17 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v18) = -1;
    v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v19)
      goto LABEL_9;
    *v11 = *v12;
    *v16 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v16 + v9 + 8) & v27, ((unint64_t)v17 + v9 + 8) & v27, v7);
    goto LABEL_12;
  }
  v26 = ((v9 + 16) & ~v9) + v14;
  v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  v25 = v20(((unint64_t)v16 + v9 + 8) & ~v9, v13, v7);
  v17 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = v20(((unint64_t)v17 + v9 + 8) & ~v9, v13, v7);
  v15 = v26;
  if (v25)
    goto LABEL_8;
LABEL_5:
  if (v19)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v27, v7);
LABEL_9:
    memcpy(v11, v12, v15);
    goto LABEL_12;
  }
  *v11 = *v12;
  swift_release();
  *v16 = *v17;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v16 + v9 + 8) & v27, ((unint64_t)v17 + v9 + 8) & v27, v7);
LABEL_12:
  v21 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v21 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_16:
    v23 = *(_OWORD *)v22;
    *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
    *(_OWORD *)v21 = v23;
    return a1;
  }
  if (*(_QWORD *)(v22 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    goto LABEL_16;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  swift_release();
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  swift_release();
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TabViewValue(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  int v18;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  if (v8 - 1 <= v5)
    v10 = *(_DWORD *)(v4 + 84);
  else
    v10 = v8 - 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = v11 | 7;
  v13 = (v11 | 7) + *(_QWORD *)(v4 + 64);
  v14 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_24;
  v15 = (v13 & ~v12) + ((*(_QWORD *)(v6 + 64) + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v17 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v17))
    {
      v18 = *(_DWORD *)&a1[v15];
      if (!v18)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v18 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15])
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 < 2)
      goto LABEL_24;
  }
  v18 = a1[v15];
  if (!a1[v15])
  {
LABEL_24:
    if (v5 >= v9)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v22 = (unint64_t *)((((unint64_t)&a1[v13] & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      v24 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v22 + v11 + 8) & ~v11);
    }
    else
    {
      v23 = *v22;
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      v24 = v23 + 1;
    }
    if (v24 >= 2)
      return v24 - 1;
    else
      return 0;
  }
LABEL_17:
  v20 = (v18 - 1) << v16;
  if (v15 >= 4)
    v20 = 0;
  if ((v13 & ~(_DWORD)v12)
     + ((*(_DWORD *)(v6 + 64) + (((_DWORD)v11 + 16) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) == -16)
    v21 = *a1;
  else
    v21 = *(_DWORD *)a1;
  return v10 + (v21 | v20) + 1;
}

void storeEnumTagSinglePayload for _TabViewValue(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if ((v7 - 1) <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = v7 - 1;
  v9 = (((*(unsigned __int8 *)(v6 + 80) | 7) + *(_QWORD *)(v5 + 64)) & ~(*(unsigned __int8 *)(v6 + 80) | 7))
     + ((((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + *(_QWORD *)(v6 + 64)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 >= a2)
    __asm { BR              X6 }
  v11 = ~v8 + a2;
  if (v9 < 4)
  {
    v11 &= ~(-1 << (8 * v9));
    bzero(a1, v9);
    if ((_DWORD)v9 == 1)
    {
      *a1 = v11;
      goto LABEL_22;
    }
  }
  else
  {
    bzero(a1, v9);
  }
  *(_DWORD *)a1 = v11;
LABEL_22:
  __asm { BR              X10 }
}

_UNKNOWN **sub_187238760()
{
  return &protocol witness table for TabViewStyleConfiguration<A>.Content;
}

uint64_t sub_18723876C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _TabViewStyleWriter(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _TabViewStyleWriter<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for UpdateDefaultTabFill()
{
  return &type metadata for UpdateDefaultTabFill;
}

uint64_t getEnumTagSinglePayload for _TabViewStyleWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18723888C + 4 * byte_187C1733E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _TabViewStyleWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_QWORD *initializeWithTake for ResolvedTabView(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = (v7 + 16) & ~v7;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    v13 = v9 + v10;
    if ((_DWORD)v12 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v14 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v14 + v7 + 8) & v8, ((unint64_t)v11 + v7 + 8) & v8, v5);
    goto LABEL_8;
  }
  v13 = v9 + v10;
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v13);
LABEL_8:
  v15 = ((unint64_t)__src + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v15;
  v17 = ((unint64_t)__dst + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v17 = v16;
  return __dst;
}

_QWORD *assignWithTake for ResolvedTabView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t (*v14)(unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  int v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = ~v8;
  if ((v7 & 0x80000000) == 0)
  {
    v11 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    v13 = v12 + 1;
    if (*v10 > 0xFFFFFFFEuLL)
      goto LABEL_5;
LABEL_8:
    if (v13)
      goto LABEL_9;
    *a1 = *a2;
    *v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v10 + v8 + 8) & v20, ((unint64_t)v11 + v8 + 8) & v20, v5);
    goto LABEL_12;
  }
  v14 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v19 = v14(((unint64_t)v10 + v8 + 8) & ~v8, v7, v5);
  v11 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = v14(((unint64_t)v11 + v8 + 8) & ~v8, v7, v5);
  if (v19)
    goto LABEL_8;
LABEL_5:
  if (v13)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v10 + v8 + 8) & v20, v5);
LABEL_9:
    memcpy(a1, a2, v9);
    goto LABEL_12;
  }
  *a1 = *a2;
  swift_release();
  *v10 = *v11;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v10 + v8 + 8) & v20, ((unint64_t)v11 + v8 + 8) & v20, v5);
LABEL_12:
  v15 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v15 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_16:
    v17 = *(_OWORD *)v16;
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
    *(_OWORD *)v15 = v17;
    return a1;
  }
  if (*(_QWORD *)(v16 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    goto LABEL_16;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  swift_release();
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release();
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTabView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 < a2)
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    v9 = (a2 - v6 + 256) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X15 }
  }
  v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0)
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v7 + 8) & ~v7);
  }
  else
  {
    v15 = *v14;
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    v16 = v15 + 1;
  }
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ResolvedTabView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + *(_QWORD *)(v5 + 64)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 - 1 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 256) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X15 }
  }
  if (v8 >= 4)
    v12 = a2 - v6;
  else
    v12 = (a2 - v6);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_18723907C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187239180);
}

void sub_187239084(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18723908CLL);
  JUMPOUT(0x187239180);
}

void sub_1872390EC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x187239180);
}

void sub_187239110()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187239180);
}

void sub_187239118()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187239180);
}

void sub_187239120(int a1@<W1>, size_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;

  *(_WORD *)&v4[v5] = 0;
  if (a1)
  {
    if (a1 + 1 <= v3)
      JUMPOUT(0x1872390F4);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v2 = a2;
      else
        v2 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x187239180);
}

void sub_187239154()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187239180);
}

void sub_187239164()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187239180);
}

void sub_18723916C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187239180);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedTabView(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v7 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v11 = *__src;
    *__dst = *__src;
    __dst = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    goto LABEL_19;
  }
  v12 = ~v7;
  v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v14 = *v13;
    if ((unint64_t)*v13 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((_DWORD)v14 != -1)
      goto LABEL_14;
LABEL_16:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v16 = (char *)v13 + v7;
    v17 = ((unint64_t)v15 + v7 + 8) & v12;
    v18 = (unint64_t)(v16 + 8) & v12;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v17, v18, v5);
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
    goto LABEL_16;
LABEL_14:
  memcpy(__dst, __src, v8);
LABEL_17:
  v20 = ((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)__src + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v21 + 8) < 0xFFFFFFFFuLL)
  {
    v22 = *(_OWORD *)v21;
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
    *(_OWORD *)v20 = v22;
    return __dst;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  swift_retain();
LABEL_19:
  swift_retain();
  return __dst;
}

uint64_t getEnumTagSinglePayload for TabViewStyleConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 < a2)
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    v9 = (a2 - v6 + 256) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X15 }
  }
  v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0)
  {
    v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v7 + 8) & ~v7);
  }
  else
  {
    v15 = *v14;
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    v16 = v15 + 1;
  }
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for TabViewStyleConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + *(_QWORD *)(v5 + 64)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 - 1 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 256) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X15 }
  }
  if (v8 >= 4)
    v12 = a2 - v6;
  else
    v12 = (a2 - v6);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_1872395C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1872396CCLL);
}

void sub_1872395D0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1872395D8);
  JUMPOUT(0x1872396CCLL);
}

void sub_187239638()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x1872396CCLL);
}

void sub_18723965C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872396CCLL);
}

void sub_187239664()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872396CCLL);
}

void sub_18723966C(int a1@<W1>, size_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;

  *(_WORD *)&v4[v5] = 0;
  if (a1)
  {
    if (a1 + 1 <= v3)
      JUMPOUT(0x187239640);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v2 = a2;
      else
        v2 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x1872396CCLL);
}

void sub_1872396A0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1872396CCLL);
}

void sub_1872396B0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1872396CCLL);
}

void sub_1872396B8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1872396CCLL);
}

_UNKNOWN **base witness table accessor for View in TabViewStyleConfiguration<A>.Content()
{
  return &protocol witness table for TabViewStyleConfiguration<A>.Content;
}

_UNKNOWN **base witness table accessor for View in ResolvedTabView<A>()
{
  return &protocol witness table for ResolvedTabView<A>;
}

uint64_t closure #1 in static _TabViewStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _TabViewStyleWriter(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

_UNKNOWN **base witness table accessor for ViewModifier in _TabViewStyleWriter<A>()
{
  return &protocol witness table for _TabViewStyleWriter<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateDefaultTabFill()
{
  return &protocol witness table for UpdateDefaultTabFill;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TabViewStyleWriter<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TabViewStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance TabViewStyleOverrideInput<A>()
{
  protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance IncrementalLayoutReuseIdleInput();
}

uint64_t static ResolvedTabView._makeView(view:inputs:)(int *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[3];

  v1 = *a1;
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v5[0] = v1;
    static ResolvedTabView.makeView<A>(view:style:inputs:)((uint64_t)v5, 0);
  }
  v5[0] = v1;
  return (*(uint64_t (**)(_DWORD *))(v4 + 8))(v5);
}

void static ResolvedTabView.makeView<A>(view:style:inputs:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _TabViewValue.Init1();
}

void sub_187239A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v16 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_DWORD *)((char *)&a9 - v19);
  v21 = **(_DWORD **)(v16 - 224);
  *(_QWORD *)(v16 - 232) = *(_QWORD *)v10;
  *(_DWORD *)(v16 - 236) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v16 - 248) = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v16 - 224) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v16 - 208) = v21;
  type metadata accessor for ResolvedTabView(255, v13, v12, v22);
  type metadata accessor for _GraphValue();
  *(_OWORD *)(v16 - 272) = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v16 - 288) = *(_OWORD *)(v10 + 56);
  v23 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v16 - 256), v11);
  *v20 = v23;
  *(_QWORD *)(v16 - 208) = v11;
  *(_QWORD *)(v16 - 200) = v13;
  *(_QWORD *)(v16 - 192) = v9;
  *(_QWORD *)(v16 - 184) = v12;
  type metadata accessor for _TabViewValue.Init1();
}

void sub_187239B38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + *(int *)(a1 + 52), v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 16))(v8, v7, v6);
  *(_QWORD *)(v10 - 208) = v2;
  *(_QWORD *)(v10 - 200) = v4;
  *(_QWORD *)(v10 - 192) = v1;
  *(_QWORD *)(v10 - 184) = v3;
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187239B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TabViewValue<A, B>.Init1, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 208) = *(_QWORD *)(v7 - 232);
  *(_DWORD *)(v7 - 200) = *(_DWORD *)(v7 - 236);
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v7 - 184) = v9;
  *(_QWORD *)(v7 - 176) = v10;
  *(_OWORD *)(v7 - 168) = *(_OWORD *)(v7 - 272);
  *(_OWORD *)(v7 - 152) = *(_OWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 136) = v8;
  *(_DWORD *)(v7 - 128) = *(_DWORD *)(v7 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v7 - 124, v7 - 208, v3, v2, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
}

void static ResolvedTabView.makeViewList<A>(view:style:inputs:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _TabViewValue.Init1();
}

void sub_187239CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v16 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_DWORD *)((char *)&a9 - v19);
  v21 = **(_DWORD **)(v16 - 224);
  *(_QWORD *)(v16 - 264) = *(_QWORD *)v10;
  *(_DWORD *)(v16 - 268) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v16 - 280) = *(_QWORD *)(v10 + 16);
  *(_OWORD *)(v16 - 224) = *(_OWORD *)(v10 + 40);
  *(_QWORD *)(v16 - 232) = *(_QWORD *)(v10 + 56);
  *(_DWORD *)(v16 - 236) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)(v16 - 248) = *(_QWORD *)(v10 + 72);
  *(_DWORD *)(v16 - 252) = *(unsigned __int8 *)(v10 + 80);
  *(_DWORD *)(v16 - 192) = v21;
  type metadata accessor for ResolvedTabView(255, v13, v12, v22);
  type metadata accessor for _GraphValue();
  v23 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v16 - 288), v11);
  *v20 = v23;
  *(_QWORD *)(v16 - 192) = v11;
  *(_QWORD *)(v16 - 184) = v13;
  *(_QWORD *)(v16 - 176) = v9;
  *(_QWORD *)(v16 - 168) = v12;
  type metadata accessor for _TabViewValue.Init1();
}

void sub_187239DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + *(int *)(a1 + 52), v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 16))(v8, v7, v6);
  *(_QWORD *)(v10 - 192) = v2;
  *(_QWORD *)(v10 - 184) = v4;
  *(_QWORD *)(v10 - 176) = v1;
  *(_QWORD *)(v10 - 168) = v3;
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187239E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TabViewValue<A, B>.Init1, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 264);
  *(_DWORD *)(v7 - 184) = *(_DWORD *)(v7 - 268);
  *(_QWORD *)(v7 - 176) = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 160) = v9;
  *(_OWORD *)(v7 - 152) = *(_OWORD *)(v7 - 224);
  *(_QWORD *)(v7 - 136) = *(_QWORD *)(v7 - 232);
  *(_DWORD *)(v7 - 128) = *(_DWORD *)(v7 - 236);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 248);
  *(_BYTE *)(v7 - 112) = *(_DWORD *)(v7 - 252);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 16))(v7 - 108, v7 - 192, v3, v2, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTabView<A>(int *a1)
{
  return static ResolvedTabView._makeView(view:inputs:)(a1);
}

void protocol witness for View.body.getter in conformance ResolvedTabView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTabView<A>, a1);
  specialized PrimitiveView.body.getter();
}

void sub_187239FE4()
{
  type metadata accessor for _TabViewValue.Init2();
}

uint64_t sub_187239FFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TabViewValue<A, B>.Init2, a1);
  _GraphValue.init<A>(_:)();
  v15 = v7;
  v16 = v8;
  v17 = v5;
  v18 = v9;
  v19 = v10;
  v20 = v14;
  v21 = v13;
  v22 = v11;
  v23 = v6;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(&v24, &v15, v3, v4, v2, v1);
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateDefaultTabFill.FillSymbols@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  _BYTE v7[36];
  __int16 v8;
  __int16 v9;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  static SymbolVariants.fill.getter();
  v8 = v9;
  v5 = (uint64_t (*)(_BYTE *, _QWORD))EnvironmentValues.symbolVariants.modify();
  SymbolVariants.formUnion(_:)();
  return v5(v7, 0);
}

uint64_t UpdateDefaultTabFill.AdaptiveFillSymbols.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(__int128 *, _QWORD);
  __int128 v8;
  __int128 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_OWORD *)(v1 + 8);
  Value = (uint64_t *)AGGraphGetValue();
  v5 = Value[1];
  v12 = *Value;
  v4 = v12;
  v13 = v5;
  *(_QWORD *)&v9 = v12;
  *((_QWORD *)&v9 + 1) = v5;
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  if (v11 != 2 && (v11 & 1) == 0
    || (v9 = v8, result = AnyInterfaceIdiom.accepts<A>(_:)(), (result & 1) != 0))
  {
    static SymbolVariants.fill.getter();
    v10 = v11;
    v7 = (uint64_t (*)(__int128 *, _QWORD))EnvironmentValues.symbolVariants.modify();
    SymbolVariants.formUnion(_:)();
    result = v7(&v9, 0);
    v4 = v12;
    v5 = v13;
  }
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateDefaultTabFill(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v6;
  v25 = v7;
  v26 = *(_OWORD *)(a2 + 7);
  v27 = a2[9];
  v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static UpdateDefaultTabFill._makeViewInputs(modifier:inputs:)();
  v11 = v20;
  v12 = v21;
  v13 = v5;
  v14 = v23;
  v15 = v6;
  v16 = v7;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateDefaultTabFill()
{
  lazy protocol witness table accessor for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance UpdateDefaultTabFill()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t instantiation function for generic protocol witness table for TabViewStyleConfiguration<A>.Content(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput;
  if (!lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleInput, &unk_1E1AC6FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput;
  if (!lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleInput, &unk_1E1AC6FE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput);
  }
  return result;
}

void type metadata accessor for _TabViewValue.Init1()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill;
  if (!lazy protocol witness table cache variable for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateDefaultTabFill, &type metadata for UpdateDefaultTabFill);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateDefaultTabFill and conformance UpdateDefaultTabFill);
  }
  return result;
}

uint64_t specialized static UpdateDefaultTabFill._makeViewInputs(modifier:inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  PropertyList.subscript.getter();
  if (v3
    && ((type metadata accessor for StyleType<SidebarAdaptableTabViewStyle>(0, &lazy cache variable for type metadata for StyleType<SidebarAdaptableTabViewStyle>, (uint64_t)&type metadata for SidebarAdaptableTabViewStyle, (uint64_t)&protocol witness table for SidebarAdaptableTabViewStyle), v0 == v3)|| (type metadata accessor for StyleType<SidebarAdaptableTabViewStyle>(0, &lazy cache variable for type metadata for StyleType<AdaptiveTabViewStyle>, (uint64_t)&type metadata for AdaptiveTabViewStyle, (uint64_t)&protocol witness table for AdaptiveTabViewStyle), v1 == v3)))
  {
    _ViewInputs.environment.getter();
    _GraphInputs.interfaceIdiom.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols();
  }
  else
  {
    _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols();
  }
  Attribute.init<A>(body:value:flags:update:)();
  return _ViewInputs.environment.setter();
}

unint64_t lazy protocol witness table accessor for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols;
  if (!lazy protocol witness table cache variable for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateDefaultTabFill.FillSymbols, &type metadata for UpdateDefaultTabFill.FillSymbols);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateDefaultTabFill.FillSymbols and conformance UpdateDefaultTabFill.FillSymbols);
  }
  return result;
}

void type metadata accessor for StyleType<SidebarAdaptableTabViewStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for StyleType(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols;
  if (!lazy protocol witness table cache variable for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateDefaultTabFill.AdaptiveFillSymbols, &type metadata for UpdateDefaultTabFill.AdaptiveFillSymbols);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateDefaultTabFill.AdaptiveFillSymbols and conformance UpdateDefaultTabFill.AdaptiveFillSymbols);
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateDefaultTabFill.AdaptiveFillSymbols()
{
  return &type metadata for UpdateDefaultTabFill.AdaptiveFillSymbols;
}

ValueMetadata *type metadata accessor for UpdateDefaultTabFill.FillSymbols()
{
  return &type metadata for UpdateDefaultTabFill.FillSymbols;
}

uint64_t getEnumTagSinglePayload for _TabViewValue.Init1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18723A8F4 + 4 * byte_187C17372[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for _TabViewValue.Init1(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *type metadata accessor for TabViewStyleInput()
{
  return &unk_1E1AC6FE8;
}

void base witness table accessor for GraphInput in TabViewStyleOverrideInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PropertyKey in TabViewStyleOverrideInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in _TabViewValue<A, B>.Init1()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t BorderedButtonStyle_Phone.init(tint:isProminent:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  v8 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = KeyPath;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = v7;
  *(_WORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v8;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = result;
  *(_BYTE *)(a3 + 72) = 0;
  return result;
}

__n128 BorderedButtonStyle_Phone.makeBody(configuration:)@<Q0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  uint64_t v27;
  _OWORD v28[15];
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44[11];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *(_QWORD *)v2;
  v8 = *(_BYTE *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 16);
  v10 = *(_BYTE *)(v2 + 24);
  v11 = *(_QWORD *)(v2 + 32);
  v12 = *(unsigned __int8 *)(v2 + 40);
  v13 = *(unsigned __int8 *)(v2 + 41);
  v14 = *(_QWORD *)(v2 + 48);
  v15 = *(_BYTE *)(v2 + 56);
  v16 = *(_QWORD *)(v2 + 64);
  v17 = *(unsigned __int8 *)(v2 + 72);
  v44[0] = v4;
  v44[1] = v5;
  v44[2] = v6;
  v33 = v7;
  v34 = v8;
  v35 = v9;
  v36 = v10;
  v37 = v11;
  v38 = v12;
  v39 = v13;
  v40 = v14;
  v41 = v15;
  v42 = v16;
  v18 = v16;
  v27 = v16;
  v43 = v17;
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  outlined copy of Environment<Bool>.Content(v14, v15);
  outlined copy of Environment<Color?>.Content(v18, v17);
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  specialized Environment.wrappedValue.getter(v11, v12 | (v13 << 8), (uint64_t)&v31);
  outlined consume of Environment<CGFloat?>.Content(v11, v12, v13);
  v29 = v31;
  v30 = v32;
  ResolvedBorderedButton.init(configuration:style:borderShape:)(v44, &v33, &v29, (uint64_t)v28);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  outlined copy of Environment<Bool>.Content(v14, v15);
  outlined copy of Environment<Color?>.Content(v27, v17);
  outlined copy of Environment<Bool>.Content(v14, v15);
  specialized Environment.wrappedValue.getter(v14, v15, &v33);
  outlined consume of Environment<Bool>.Content(v14, v15);
  swift_release();
  outlined consume of Environment<Bool>.Content(v9, v10);
  outlined consume of Environment<CGFloat?>.Content(v11, v12, v13);
  outlined consume of Environment<Bool>.Content(v14, v15);
  outlined consume of Environment<Color?>.Content(v27, v17);
  LOBYTE(v18) = v33 < 7u;
  KeyPath = swift_getKeyPath();
  v20 = v28[13];
  *(_OWORD *)(a2 + 192) = v28[12];
  *(_OWORD *)(a2 + 208) = v20;
  *(_OWORD *)(a2 + 224) = v28[14];
  v21 = v28[9];
  *(_OWORD *)(a2 + 128) = v28[8];
  *(_OWORD *)(a2 + 144) = v21;
  v22 = v28[11];
  *(_OWORD *)(a2 + 160) = v28[10];
  *(_OWORD *)(a2 + 176) = v22;
  v23 = v28[5];
  *(_OWORD *)(a2 + 64) = v28[4];
  *(_OWORD *)(a2 + 80) = v23;
  v24 = v28[7];
  *(_OWORD *)(a2 + 96) = v28[6];
  *(_OWORD *)(a2 + 112) = v24;
  v25 = v28[1];
  *(_OWORD *)a2 = v28[0];
  *(_OWORD *)(a2 + 16) = v25;
  result = (__n128)v28[3];
  *(_OWORD *)(a2 + 32) = v28[2];
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 240) = KeyPath;
  *(_BYTE *)(a2 + 248) = v18;
  return result;
}

uint64_t ResolvedBorderedButton.init(configuration:style:borderShape:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = *a2;
  v9 = *((_BYTE *)a2 + 8);
  v10 = a2[2];
  v11 = *((_BYTE *)a2 + 24);
  v12 = a2[4];
  v13 = *((_BYTE *)a2 + 40);
  v23 = *((_BYTE *)a2 + 41);
  v22 = a2[6];
  v21 = *((_BYTE *)a2 + 56);
  v20 = a2[8];
  v19 = *((_BYTE *)a2 + 72);
  v18 = *a3;
  v17 = *((_BYTE *)a3 + 8);
  *(_QWORD *)a4 = swift_getKeyPath();
  *(_DWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 12) = 0;
  *(_QWORD *)(a4 + 16) = swift_getKeyPath();
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = swift_getKeyPath();
  *(_BYTE *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = swift_getKeyPath();
  *(_BYTE *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = swift_getKeyPath();
  *(_BYTE *)(a4 + 72) = 0;
  *(_BYTE *)(a4 + 73) = v5;
  *(_BYTE *)(a4 + 74) = v6;
  *(_BYTE *)(a4 + 75) = v7;
  *(_QWORD *)(a4 + 80) = v8;
  *(_BYTE *)(a4 + 88) = v9;
  *(_QWORD *)(a4 + 96) = v10;
  *(_BYTE *)(a4 + 104) = v11;
  *(_QWORD *)(a4 + 112) = v12;
  *(_BYTE *)(a4 + 120) = v13;
  *(_BYTE *)(a4 + 121) = v23;
  *(_QWORD *)(a4 + 128) = v22;
  *(_BYTE *)(a4 + 136) = v21;
  *(_QWORD *)(a4 + 144) = v20;
  *(_BYTE *)(a4 + 152) = v19;
  *(_QWORD *)(a4 + 160) = v18;
  *(_BYTE *)(a4 + 168) = v17;
  KeyPath = swift_getKeyPath();
  v15 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)(a4 + 176) = KeyPath;
  *(_BYTE *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 200) = 0;
  *(_QWORD *)(a4 + 208) = 0;
  *(_QWORD *)(a4 + 192) = v15;
  *(_WORD *)(a4 + 216) = 0;
  *(_QWORD *)(a4 + 224) = result;
  *(_BYTE *)(a4 + 232) = 0;
  return result;
}

void *ResolvedBorderedButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *result;
  uint64_t v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29[2];
  char v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _OWORD __src[26];
  _OWORD v36[10];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  _OWORD v41[2];
  _OWORD v42[2];

  v3 = v1[13];
  v39 = v1[12];
  v40[0] = v3;
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v1 + 217);
  v4 = v1[9];
  v36[8] = v1[8];
  v36[9] = v4;
  v5 = v1[11];
  v37 = v1[10];
  v38 = v5;
  v6 = v1[5];
  v36[4] = v1[4];
  v36[5] = v6;
  v7 = v1[7];
  v36[6] = v1[6];
  v36[7] = v7;
  v8 = v1[1];
  v36[0] = *v1;
  v36[1] = v8;
  v9 = v1[3];
  v36[2] = v1[2];
  v36[3] = v9;
  v41[0] = v38;
  v41[1] = v39;
  v42[0] = v40[0];
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v40 + 9);
  __src[0] = v38;
  __src[1] = v39;
  __src[2] = v40[0];
  *(_OWORD *)((char *)&__src[2] + 9) = *(_OWORD *)((char *)v40 + 9);
  v29[0] = static VerticalAlignment.center.getter();
  v29[1] = 0;
  v30 = 1;
  KeyPath = swift_getKeyPath();
  v32 = BorderedButtonSpec.defaultFont.getter();
  v33 = swift_getKeyPath();
  v34 = 1;
  v23[0] = v29[0];
  v23[1] = 0;
  v24 = 1;
  v25 = KeyPath;
  v26 = v32;
  v27 = v33;
  v28 = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  closure #2 in ResolvedBorderedButton.body.getter(v29, (uint64_t)v36, (uint64_t)__src);
  closure #3 in ResolvedBorderedButton.body.getter(v23, (uint64_t)v36, (uint64_t)&__src[13]);
  swift_release();
  swift_release();
  swift_release();
  v10 = v37;
  v11 = BYTE8(v37);
  v12 = *(_QWORD *)&v41[0];
  v13 = BYTE8(v41[0]);
  outlined retain of ResolvedBorderedButton((uint64_t)v36);
  outlined retain of BorderedButtonSpec((uint64_t)v41, (void (*)(_QWORD, _QWORD))outlined copy of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v12, v13);
  specialized Environment.wrappedValue.getter(v12, v13, v29);
  outlined consume of Environment<Bool>.Content(v12, v13);
  outlined retain of BorderedButtonSpec((uint64_t)v41, (void (*)(_QWORD, _QWORD))outlined consume of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  LOBYTE(v12) = v29[0];
  static EdgeInsets.zero.getter();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release();
  swift_release();
  swift_release();
  outlined release of ResolvedBorderedButton((uint64_t)v36);
  LOBYTE(v29[0]) = v11;
  result = memcpy((void *)a1, __src, 0x1A0uLL);
  *(_BYTE *)(a1 + 416) = v12;
  *(_QWORD *)(a1 + 424) = v10;
  *(_BYTE *)(a1 + 432) = v29[0];
  *(_QWORD *)(a1 + 440) = v15;
  *(_QWORD *)(a1 + 448) = v17;
  *(_QWORD *)(a1 + 456) = v19;
  *(_QWORD *)(a1 + 464) = v21;
  *(_BYTE *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 9;
  return result;
}

unint64_t closure #2 in ResolvedBorderedButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t result;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[32];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  _OWORD v96[2];
  _OWORD v97[2];
  _OWORD v98[3];
  _OWORD v99[3];

  v5 = *a1;
  v6 = a1[1];
  v74 = *((_BYTE *)a1 + 16);
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v76 = *((_BYTE *)a1 + 48);
  v10 = *(_OWORD *)(a2 + 128);
  v98[2] = *(_OWORD *)(a2 + 112);
  v99[0] = v10;
  *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)(a2 + 137);
  v11 = *(_OWORD *)(a2 + 96);
  v98[0] = *(_OWORD *)(a2 + 80);
  v98[1] = v11;
  v12 = v11;
  v13 = BYTE8(v11);
  outlined retain of ResolvedBorderedButton(a2);
  outlined retain of BorderedButtonStyle_Phone((uint64_t)v98);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<Bool>.Content(v12, v13);
  outlined release of BorderedButtonStyle_Phone((uint64_t)v98);
  v77 = v6;
  v78 = v5;
  if ((v14 & 1) != 0 && (BYTE8(v98[0]) & 1) != 0)
  {
    v67 = static Color.white.getter();
    outlined release of ResolvedBorderedButton(a2);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 208);
    v90 = *(_OWORD *)(a2 + 192);
    v91[0] = v15;
    *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)(a2 + 217);
    v16 = *(_OWORD *)(a2 + 144);
    v86 = *(_OWORD *)(a2 + 128);
    v87 = v16;
    v17 = *(_OWORD *)(a2 + 176);
    v88 = *(_OWORD *)(a2 + 160);
    v89 = v17;
    v18 = *(_OWORD *)(a2 + 80);
    v82 = *(_OWORD *)(a2 + 64);
    v83 = v18;
    v19 = *(_OWORD *)(a2 + 112);
    v84 = *(_OWORD *)(a2 + 96);
    v85 = v19;
    v20 = *(_OWORD *)(a2 + 16);
    v79 = *(_OWORD *)a2;
    v80 = v20;
    v21 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)v81 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v81[16] = v21;
    ResolvedBorderedButton.colorSpec.getter((uint64_t)&v92);
    v22 = v93;
    v23 = v95;
    outlined copy of BorderedButtonColorSpec.LabelStyle(v95);
    swift_release();
    outlined consume of Material?(v22);
    v67 = v23;
    outlined consume of BorderedButtonColorSpec.LabelStyle(v23);
    outlined release of ResolvedBorderedButton(a2);
  }
  v24 = *(_OWORD *)(a2 + 192);
  v96[0] = *(_OWORD *)(a2 + 176);
  v96[1] = v24;
  v26 = *(_OWORD *)(a2 + 176);
  v25 = *(_OWORD *)(a2 + 192);
  v97[0] = *(_OWORD *)(a2 + 208);
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)(a2 + 217);
  v79 = v26;
  v80 = v25;
  *(_OWORD *)v81 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)&v81[9] = *(_OWORD *)(a2 + 217);
  v73 = v7;
  swift_retain();
  v72 = v9;
  swift_retain();
  v71 = v8;
  swift_retain();
  v27 = BorderedButtonSpec.padding.getter();
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v70 = static Edge.Set.all.getter();
  v34 = *(_OWORD *)(a2 + 208);
  v90 = *(_OWORD *)(a2 + 192);
  v91[0] = v34;
  *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)(a2 + 217);
  v35 = *(_OWORD *)(a2 + 144);
  v86 = *(_OWORD *)(a2 + 128);
  v87 = v35;
  v36 = *(_OWORD *)(a2 + 176);
  v88 = *(_OWORD *)(a2 + 160);
  v89 = v36;
  v37 = *(_OWORD *)(a2 + 80);
  v82 = *(_OWORD *)(a2 + 64);
  v83 = v37;
  v38 = *(_OWORD *)(a2 + 112);
  v84 = *(_OWORD *)(a2 + 96);
  v85 = v38;
  v39 = *(_OWORD *)(a2 + 16);
  v79 = *(_OWORD *)a2;
  v80 = v39;
  v40 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v81 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v81[16] = v40;
  ResolvedBorderedButton.imageBackgroundSpec.getter((uint64_t)&v92);
  v41 = v93;
  v42 = v95;
  v69 = Color.opacity(_:)();
  swift_release();
  outlined consume of Material?(v41);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v42);
  v68 = static Edge.Set.all.getter();
  v43 = *(_OWORD *)(a2 + 208);
  v90 = *(_OWORD *)(a2 + 192);
  v91[0] = v43;
  *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)(a2 + 217);
  v44 = *(_OWORD *)(a2 + 144);
  v86 = *(_OWORD *)(a2 + 128);
  v87 = v44;
  v45 = *(_OWORD *)(a2 + 176);
  v88 = *(_OWORD *)(a2 + 160);
  v89 = v45;
  v46 = *(_OWORD *)(a2 + 80);
  v82 = *(_OWORD *)(a2 + 64);
  v83 = v46;
  v47 = *(_OWORD *)(a2 + 112);
  v84 = *(_OWORD *)(a2 + 96);
  v85 = v47;
  v48 = *(_OWORD *)(a2 + 16);
  v79 = *(_OWORD *)a2;
  v80 = v48;
  v49 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v81 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v81[16] = v49;
  ResolvedBorderedButton.imageBackgroundSpec.getter((uint64_t)&v92);
  v50 = v93;
  v51 = v94;
  v52 = v95;
  outlined copy of Material?(v93);
  swift_release();
  outlined consume of Material?(v50);
  result = outlined consume of BorderedButtonColorSpec.LabelStyle(v52);
  if (v50 == 8)
  {
    __break(1u);
  }
  else
  {
    v54 = static Edge.Set.all.getter();
    v55 = v74;
    v75 = *(_QWORD *)(a2 + 160);
    v56 = *(_BYTE *)(a2 + 168);
    v57 = *(_QWORD *)&v96[0];
    v58 = BYTE8(v96[0]);
    outlined retain of ResolvedBorderedButton(a2);
    outlined retain of BorderedButtonSpec((uint64_t)v96, (void (*)(_QWORD, _QWORD))outlined copy of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined copy of Environment<Bool>.Content(v57, v58);
    specialized Environment.wrappedValue.getter(v57, v58, &v79);
    outlined consume of Environment<Bool>.Content(v57, v58);
    outlined retain of BorderedButtonSpec((uint64_t)v96, (void (*)(_QWORD, _QWORD))outlined consume of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    LOBYTE(v57) = v79;
    static EdgeInsets.zero.getter();
    v60 = v59;
    v62 = v61;
    v64 = v63;
    v66 = v65;
    result = outlined release of ResolvedBorderedButton(a2);
    LOBYTE(v79) = v56;
    *(_QWORD *)a3 = v78;
    *(_QWORD *)(a3 + 8) = v77;
    *(_BYTE *)(a3 + 16) = v55;
    *(_QWORD *)(a3 + 24) = v71;
    *(_QWORD *)(a3 + 32) = v73;
    *(_QWORD *)(a3 + 40) = v72;
    *(_BYTE *)(a3 + 48) = v76;
    *(_QWORD *)(a3 + 56) = v67;
    *(_BYTE *)(a3 + 64) = v70;
    *(double *)(a3 + 72) = v27;
    *(_QWORD *)(a3 + 80) = v29;
    *(_QWORD *)(a3 + 88) = v31;
    *(_QWORD *)(a3 + 96) = v33;
    *(_BYTE *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = v69;
    *(_BYTE *)(a3 + 120) = v68;
    *(_QWORD *)(a3 + 128) = v50;
    *(_DWORD *)(a3 + 136) = v51;
    *(_BYTE *)(a3 + 140) = v54;
    *(_BYTE *)(a3 + 144) = v57;
    *(_QWORD *)(a3 + 152) = v75;
    *(_BYTE *)(a3 + 160) = v79;
    *(_QWORD *)(a3 + 168) = v60;
    *(_QWORD *)(a3 + 176) = v62;
    *(_QWORD *)(a3 + 184) = v64;
    *(_QWORD *)(a3 + 192) = v66;
    *(_WORD *)(a3 + 200) = 256;
  }
  return result;
}

unint64_t ResolvedBorderedButton.imageBackgroundSpec.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v23;
  int v24;
  char v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  __int128 v36;
  uint64_t v37;
  char v38;
  _BYTE v39[7];
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  unint64_t v56;
  int v57;

  v2 = *((_QWORD *)v1 + 2);
  v3 = *((_BYTE *)v1 + 24);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_BYTE *)v1 + 40);
  v6 = *((unsigned __int8 *)v1 + 73);
  v7 = *((_BYTE *)v1 + 74);
  v34 = *((_BYTE *)v1 + 75);
  outlined copy of Environment<Bool>.Content(v4, v5 & 1);
  v8 = specialized Environment.wrappedValue.getter(v4, v5 & 1);
  outlined consume of Environment<Bool>.Content(v4, v5 & 1);
  if ((v8 & 1) != 0)
  {
    v9 = static Color.clear.getter();
    static Material.thick.getter();
    v36 = *v1;
    v37 = v2;
    v38 = v3;
    *(_DWORD *)v39 = *(_DWORD *)((char *)v1 + 25);
    *(_DWORD *)&v39[3] = *((_DWORD *)v1 + 7);
    v40 = v4;
    v41 = v5;
    v42 = *(__int128 *)((char *)v1 + 41);
    v43 = *(__int128 *)((char *)v1 + 57);
    v44 = v6;
    v45 = v7;
    v46 = v34;
    v53 = *(__int128 *)((char *)v1 + 172);
    v54 = *(__int128 *)((char *)v1 + 188);
    v55[0] = *(__int128 *)((char *)v1 + 204);
    *(_OWORD *)((char *)v55 + 13) = *(__int128 *)((char *)v1 + 217);
    v49 = *(__int128 *)((char *)v1 + 108);
    v50 = *(__int128 *)((char *)v1 + 124);
    v51 = *(__int128 *)((char *)v1 + 140);
    v52 = *(__int128 *)((char *)v1 + 156);
    v47 = *(__int128 *)((char *)v1 + 76);
    v48 = *(__int128 *)((char *)v1 + 92);
    v10 = ResolvedBorderedButton.resolvedTint.getter();
    v11 = v10;
    if (v10 >> 62)
    {
      if (v10 >> 62 != 1)
      {
        outlined copy of Environment<Bool>.Content(v2, v3 & 1);
        specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
        outlined consume of Environment<Bool>.Content(v2, v3 & 1);
        if ((v36 & 1) != 0)
        {
          if ((v34 & 1) != 0)
          {
            static Material.ultraThin.getter();
            outlined consume of Material.ID(v56);
            v56 = v36;
            v57 = DWORD2(v36);
            LOBYTE(v36) = 0;
            Color.init(_:white:opacity:)();
            if ((v7 & 1) != 0 || v6 != 1)
              static Color.accentColor.getter();
            else
              static Color.red.getter();
            v11 = Color.over(_:)();
            swift_release();
            result = swift_release();
          }
          else
          {
            if ((v7 & 1) != 0 || v6 != 1)
              result = static Color.accentColor.getter();
            else
              result = static Color.red.getter();
            v11 = result;
          }
          v27 = 1.0;
          v28 = 1.0;
        }
        else
        {
          if ((v7 & 1) != 0 || v6 != 1)
            result = static Color.accentColor.getter();
          else
            result = static Color.red.getter();
          v11 = result;
          v28 = 1.0;
          if ((v34 & 1) != 0)
          {
            static Material.thin.getter();
            result = outlined consume of Material.ID(v56);
            v56 = v36;
            v57 = DWORD2(v36);
            v27 = 0.75;
          }
          else
          {
            v27 = 1.0;
          }
        }
        goto LABEL_49;
      }
      v12 = v10 & 0x3FFFFFFFFFFFFFFFLL;
      outlined copy of Environment<Bool>.Content(v2, v3 & 1);
      specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
      outlined consume of Environment<Bool>.Content(v2, v3 & 1);
      if ((v36 & 1) == 0)
      {
        result = swift_release();
        if ((v34 & 1) != 0)
        {
          static Material.ultraThin.getter();
          result = outlined consume of Material.ID(v56);
          v11 = 0;
          v56 = v36;
          v57 = DWORD2(v36);
          v27 = 0.75;
          v28 = 0.75;
          v9 = v12;
          goto LABEL_49;
        }
LABEL_21:
        v11 = 0;
        v27 = 1.0;
        v28 = 1.0;
        v9 = v12;
LABEL_49:
        v32 = v56;
        v33 = v57;
        *(_QWORD *)a1 = v9;
        *(double *)(a1 + 8) = v28;
        *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 24) = v32;
        *(_DWORD *)(a1 + 32) = v33;
        *(_BYTE *)(a1 + 36) = 0;
        *(_QWORD *)(a1 + 40) = v11;
        *(double *)(a1 + 48) = v27;
        *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
        return result;
      }
      if ((v34 & 1) == 0)
      {
        result = swift_release();
        goto LABEL_21;
      }
      LOBYTE(v36) = 0;
      v28 = 1.0;
      Color.init(_:white:opacity:)();
      v29 = Color.over(_:)();
      swift_release();
      swift_release();
      static Material.ultraThin.getter();
      swift_release();
      result = outlined consume of Material.ID(v56);
      v11 = 0;
LABEL_43:
      v56 = v36;
      v57 = DWORD2(v36);
      v27 = 0.75;
      v9 = v29;
      goto LABEL_49;
    }
    outlined copy of Environment<Bool>.Content(v2, v3 & 1);
    specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
    outlined consume of Environment<Bool>.Content(v2, v3 & 1);
    if ((v36 & 1) == 0)
    {
      if (static Color.yellow.getter() != v11)
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      v29 = Color.opacity(_:)();
      result = swift_release();
      v28 = 1.0;
      if ((v34 & 1) == 0)
      {
        v27 = 1.0;
        v9 = v29;
        goto LABEL_49;
      }
      static Material.ultraThin.getter();
      result = outlined consume of Material.ID(v56);
      goto LABEL_43;
    }
    if (static Color.red.getter() != v11)
    {
      v26 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      if ((v26 & 1) != 0)
      {
LABEL_29:
        v30 = Color.opacity(_:)();
        result = swift_release();
        v27 = 1.0;
        if ((v34 & 1) != 0)
        {
          swift_retain();
          static Material.ultraThin.getter();
          outlined consume of Material.ID(v56);
          v56 = v36;
          v57 = DWORD2(v36);
          LOBYTE(v36) = 0;
          Color.init(_:white:opacity:)();
          v31 = Color.over(_:)();
          swift_release();
          swift_release();
          result = swift_release();
          v11 = v31;
        }
        v28 = 1.0;
        v9 = v30;
        goto LABEL_49;
      }
      if (static Color.pink.getter() != v11)
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        goto LABEL_29;
      }
    }
    swift_release();
    goto LABEL_29;
  }
  outlined copy of Environment<Bool>.Content(v2, v3 & 1);
  specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
  outlined consume of Environment<Bool>.Content(v2, v3 & 1);
  v14 = v36;
  v15 = static Color.clear.getter();
  static Material.ultraThin.getter();
  if ((v14 & 1) != 0)
  {
    v16 = v36;
    v17 = DWORD2(v36);
    LOBYTE(v56) = 0;
    result = Color.init(_:white:opacity:)();
    *(_QWORD *)a1 = v15;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(_QWORD *)(a1 + 24) = v16;
    *(_DWORD *)(a1 + 32) = v17;
    *(_BYTE *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 48) = xmmword_187C17A50;
  }
  else
  {
    v23 = v36;
    v24 = DWORD2(v36);
    LOBYTE(v56) = 0;
    result = Color.init(_:white:opacity:)();
    *(_QWORD *)a1 = v15;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(_QWORD *)(a1 + 24) = v23;
    *(_DWORD *)(a1 + 32) = v24;
    *(_BYTE *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 40) = result;
    *(_OWORD *)(a1 + 48) = xmmword_187C17A40;
  }
  return result;
}

double closure #3 in ResolvedBorderedButton.body.getter@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  double result;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[32];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[2];
  _OWORD v104[2];
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  double v109[6];

  v84 = a1[1];
  v85 = *a1;
  v83 = *((_BYTE *)a1 + 16);
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v80 = *((_BYTE *)a1 + 48);
  v8 = *(_OWORD *)(a2 + 208);
  v102 = *(_OWORD *)(a2 + 192);
  v103[0] = v8;
  *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 217);
  v9 = *(_OWORD *)(a2 + 144);
  v98 = *(_OWORD *)(a2 + 128);
  v99 = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v100 = *(_OWORD *)(a2 + 160);
  v101 = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v94 = *(_OWORD *)(a2 + 64);
  v95 = v11;
  v12 = *(_OWORD *)(a2 + 112);
  v96 = *(_OWORD *)(a2 + 96);
  v97 = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v91 = *(_OWORD *)a2;
  v92 = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v93 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v93[16] = v14;
  ResolvedBorderedButton.colorSpec.getter((uint64_t)&v106);
  v15 = *((_QWORD *)&v107 + 1);
  v16 = *((_QWORD *)&v108 + 1);
  v79 = v109[0];
  swift_release();
  outlined consume of Material?(v15);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v16);
  v17 = *(_OWORD *)(a2 + 128);
  v108 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)v109 = v17;
  *(_OWORD *)((char *)&v109[1] + 1) = *(_OWORD *)(a2 + 137);
  v18 = *(_OWORD *)(a2 + 96);
  v106 = *(_OWORD *)(a2 + 80);
  v107 = v18;
  v19 = v18;
  v20 = BYTE8(v18);
  v82 = v6;
  swift_retain();
  v81 = v7;
  swift_retain();
  v86 = v5;
  swift_retain();
  outlined retain of ResolvedBorderedButton(a2);
  outlined retain of BorderedButtonStyle_Phone((uint64_t)&v106);
  outlined copy of Environment<Bool>.Content(v19, v20);
  LOBYTE(v16) = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool>.Content(v19, v20);
  outlined release of BorderedButtonStyle_Phone((uint64_t)&v106);
  if ((v16 & 1) != 0 && (BYTE8(v106) & 1) != 0)
  {
    v29 = static Color.white.getter();
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 208);
    v102 = *(_OWORD *)(a2 + 192);
    v103[0] = v21;
    *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 217);
    v22 = *(_OWORD *)(a2 + 144);
    v98 = *(_OWORD *)(a2 + 128);
    v99 = v22;
    v23 = *(_OWORD *)(a2 + 176);
    v100 = *(_OWORD *)(a2 + 160);
    v101 = v23;
    v24 = *(_OWORD *)(a2 + 80);
    v94 = *(_OWORD *)(a2 + 64);
    v95 = v24;
    v25 = *(_OWORD *)(a2 + 112);
    v96 = *(_OWORD *)(a2 + 96);
    v97 = v25;
    v26 = *(_OWORD *)(a2 + 16);
    v91 = *(_OWORD *)a2;
    v92 = v26;
    v27 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)v93 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v93[16] = v27;
    ResolvedBorderedButton.colorSpec.getter((uint64_t)&v87);
    v28 = v88;
    v29 = v90;
    outlined copy of BorderedButtonColorSpec.LabelStyle(v90);
    swift_release();
    outlined consume of Material?(v28);
    outlined consume of BorderedButtonColorSpec.LabelStyle(v29);
  }
  outlined release of ResolvedBorderedButton(a2);
  v30 = *(_OWORD *)(a2 + 192);
  v104[0] = *(_OWORD *)(a2 + 176);
  v104[1] = v30;
  v32 = *(_OWORD *)(a2 + 176);
  v31 = *(_OWORD *)(a2 + 192);
  v105[0] = *(_OWORD *)(a2 + 208);
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)(a2 + 217);
  v91 = v32;
  v92 = v31;
  *(_OWORD *)v93 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)&v93[9] = *(_OWORD *)(a2 + 217);
  v33 = BorderedButtonSpec.padding.getter();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v75 = static Edge.Set.all.getter();
  v40 = static Alignment.center.getter();
  v77 = v41;
  v78 = v40;
  v76 = *(_QWORD *)(a2 + 160);
  v74 = *(_BYTE *)(a2 + 168);
  v42 = *(_QWORD *)&v104[0];
  v43 = BYTE8(v104[0]);
  outlined retain of ResolvedBorderedButton(a2);
  outlined retain of BorderedButtonSpec((uint64_t)v104, (void (*)(_QWORD, _QWORD))outlined copy of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v42, v43);
  specialized Environment.wrappedValue.getter(v42, v43, &v91);
  outlined consume of Environment<Bool>.Content(v42, v43);
  outlined retain of BorderedButtonSpec((uint64_t)v104, (void (*)(_QWORD, _QWORD))outlined consume of Environment<ControlSize>.Content, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Environment<KeyboardShortcut?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  v44 = v91;
  static EdgeInsets.zero.getter();
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v52 = v51;
  outlined release of ResolvedBorderedButton(a2);
  v53 = *(_OWORD *)(a2 + 208);
  v102 = *(_OWORD *)(a2 + 192);
  v103[0] = v53;
  *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 217);
  v54 = *(_OWORD *)(a2 + 144);
  v98 = *(_OWORD *)(a2 + 128);
  v99 = v54;
  v55 = *(_OWORD *)(a2 + 176);
  v100 = *(_OWORD *)(a2 + 160);
  v101 = v55;
  v56 = *(_OWORD *)(a2 + 80);
  v94 = *(_OWORD *)(a2 + 64);
  v95 = v56;
  v57 = *(_OWORD *)(a2 + 112);
  v96 = *(_OWORD *)(a2 + 96);
  v97 = v57;
  v58 = *(_OWORD *)(a2 + 16);
  v91 = *(_OWORD *)a2;
  v92 = v58;
  v59 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v93 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v93[16] = v59;
  ResolvedBorderedButton.colorSpec.getter((uint64_t)&v87);
  v60 = v88;
  v61 = v90;
  v62 = Color.opacity(_:)();
  swift_release();
  outlined consume of Material?(v60);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v61);
  v63 = *(_OWORD *)(a2 + 208);
  v102 = *(_OWORD *)(a2 + 192);
  v103[0] = v63;
  *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a2 + 217);
  v64 = *(_OWORD *)(a2 + 144);
  v98 = *(_OWORD *)(a2 + 128);
  v99 = v64;
  v65 = *(_OWORD *)(a2 + 176);
  v100 = *(_OWORD *)(a2 + 160);
  v101 = v65;
  v66 = *(_OWORD *)(a2 + 80);
  v94 = *(_OWORD *)(a2 + 64);
  v95 = v66;
  v67 = *(_OWORD *)(a2 + 112);
  v96 = *(_OWORD *)(a2 + 96);
  v97 = v67;
  v68 = *(_OWORD *)(a2 + 16);
  v91 = *(_OWORD *)a2;
  v92 = v68;
  v69 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)v93 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v93[16] = v69;
  ResolvedBorderedButton.colorSpec.getter((uint64_t)&v87);
  v70 = v88;
  v71 = v89;
  v72 = v90;
  swift_release();
  outlined consume of Material?(v70);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v72);
  *(_QWORD *)a3 = v85;
  *(_QWORD *)(a3 + 8) = v84;
  *(_BYTE *)(a3 + 16) = v83;
  *(_QWORD *)(a3 + 24) = v86;
  *(_QWORD *)(a3 + 32) = v82;
  *(_QWORD *)(a3 + 40) = v81;
  *(_BYTE *)(a3 + 48) = v80;
  result = v79;
  *(double *)(a3 + 56) = v79;
  *(_QWORD *)(a3 + 64) = v29;
  *(_BYTE *)(a3 + 72) = v75;
  *(double *)(a3 + 80) = v33;
  *(_QWORD *)(a3 + 88) = v35;
  *(_QWORD *)(a3 + 96) = v37;
  *(_QWORD *)(a3 + 104) = v39;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 120) = v44;
  *(_QWORD *)(a3 + 128) = v76;
  *(_BYTE *)(a3 + 136) = v74;
  *(_QWORD *)(a3 + 144) = v46;
  *(_QWORD *)(a3 + 152) = v48;
  *(_QWORD *)(a3 + 160) = v50;
  *(_QWORD *)(a3 + 168) = v52;
  *(_QWORD *)(a3 + 176) = v62;
  *(_WORD *)(a3 + 184) = 256;
  *(_BYTE *)(a3 + 186) = v71;
  *(_QWORD *)(a3 + 192) = v78;
  *(_QWORD *)(a3 + 200) = v77;
  return result;
}

__n128 ResolvedBorderedButton.colorSpec.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  char v5;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  __int128 v42;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned int *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 12);
  v6 = (__int128 *)(v1 + 13);
  outlined copy of Environment<Material?>.Content(*(_QWORD *)v1, v4, v5 & 1);
  LOBYTE(v20) = v5 & 1;
  specialized Environment.wrappedValue.getter(v3, v4 | ((unint64_t)(v5 & 1) << 32), (uint64_t)&v20);
  outlined consume of Environment<Material?>.Content(v3, v4, v5 & 1);
  v7 = v20;
  outlined consume of Material?(v20);
  v8 = v6[11];
  v33 = v6[10];
  v34 = v8;
  v35[0] = v6[12];
  *(_OWORD *)((char *)v35 + 12) = *(__int128 *)((char *)v6 + 204);
  v9 = v6[7];
  v29 = v6[6];
  v30 = v9;
  v10 = v6[9];
  v31 = v6[8];
  v32 = v10;
  v11 = v6[3];
  v25 = v6[2];
  v26 = v11;
  v12 = v6[5];
  v27 = v6[4];
  v28 = v12;
  v13 = v6[1];
  v23 = *v6;
  v20 = v3;
  v21 = v4;
  v22 = v5;
  v24 = v13;
  if (v7 == 8)
    ResolvedBorderedButton.opaqueBackgroundSpec.getter((uint64_t)&v36);
  else
    ResolvedBorderedButton.materialBackgroundSpec.getter((uint64_t)&v36);
  result = v37;
  v15 = v38;
  v16 = v39;
  v17 = v40;
  v18 = v41;
  v19 = v42;
  *(_QWORD *)a1 = v36;
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 32) = v16;
  *(_BYTE *)(a1 + 36) = v17;
  *(_QWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 48) = v19;
  return result;
}

unint64_t ResolvedBorderedButton.materialBackgroundSpec.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  double v16;
  char v17;
  double v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  __int128 v36;
  uint64_t v37;
  char v38;
  _BYTE v39[7];
  uint64_t v40;
  char v41;
  _BYTE v42[7];
  uint64_t v43;
  char v44;
  __int128 v45;
  char v46;
  char v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[3];

  v2 = *((_QWORD *)v1 + 2);
  v3 = *((_BYTE *)v1 + 24);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_BYTE *)v1 + 40);
  v6 = *((_QWORD *)v1 + 6);
  v7 = *((_BYTE *)v1 + 56);
  v33 = *((_BYTE *)v1 + 74);
  v34 = *((unsigned __int8 *)v1 + 73);
  v32 = *((_BYTE *)v1 + 75);
  outlined copy of Environment<Bool>.Content(v4, v5 & 1);
  v8 = specialized Environment.wrappedValue.getter(v4, v5 & 1);
  outlined consume of Environment<Bool>.Content(v4, v5 & 1);
  v9 = v3 & 1;
  v10 = v7 & 1;
  if ((v8 & 1) == 0)
  {
    outlined copy of Environment<Bool>.Content(v2, v3 & 1);
    specialized Environment.wrappedValue.getter(v2, v3 & 1, &v36);
    outlined consume of Environment<Bool>.Content(v2, v3 & 1);
    v15 = v36;
    outlined copy of Environment<Bool>.Content(v6, v7 & 1);
    specialized Environment.wrappedValue.getter(v6, v7 & 1);
    outlined consume of Environment<Bool>.Content(v6, v7 & 1);
    if ((v15 & 1) == 0)
    {
      v16 = 1.0;
      LOBYTE(v36) = 0;
      v13 = Color.init(_:white:opacity:)();
      LOBYTE(v36) = 0;
      result = Color.init(_:white:opacity:)();
      v12 = result;
      v14 = 0;
      v18 = 0.15;
LABEL_64:
      v30 = a1;
      goto LABEL_65;
    }
    v16 = 1.0;
    LOBYTE(v36) = 0;
    v13 = Color.init(_:white:opacity:)();
    outlined copy of Environment<Bool>.Content(v6, v7 & 1);
    v17 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
    result = outlined consume of Environment<Bool>.Content(v6, v7 & 1);
    if ((v17 & 1) != 0)
      v14 = 0;
    else
      v14 = 19;
    v12 = 2;
LABEL_63:
    v18 = 1.0;
    goto LABEL_64;
  }
  v36 = *v1;
  v37 = v2;
  v38 = v3;
  *(_DWORD *)v39 = *(_DWORD *)((char *)v1 + 25);
  *(_DWORD *)&v39[3] = *((_DWORD *)v1 + 7);
  v40 = v4;
  v41 = v5;
  *(_DWORD *)v42 = *(_DWORD *)((char *)v1 + 41);
  *(_DWORD *)&v42[3] = *((_DWORD *)v1 + 11);
  v43 = v6;
  v44 = v7;
  v45 = *(__int128 *)((char *)v1 + 57);
  v46 = v34;
  v47 = v33;
  v48 = v32;
  v55 = *(__int128 *)((char *)v1 + 172);
  v56 = *(__int128 *)((char *)v1 + 188);
  v57[0] = *(__int128 *)((char *)v1 + 204);
  *(_OWORD *)((char *)v57 + 13) = *(__int128 *)((char *)v1 + 217);
  v51 = *(__int128 *)((char *)v1 + 108);
  v52 = *(__int128 *)((char *)v1 + 124);
  v53 = *(__int128 *)((char *)v1 + 140);
  v54 = *(__int128 *)((char *)v1 + 156);
  v49 = *(__int128 *)((char *)v1 + 76);
  v50 = *(__int128 *)((char *)v1 + 92);
  result = ResolvedBorderedButton.resolvedTint.getter();
  v12 = result;
  if (result >> 62)
  {
    if (result >> 62 == 1)
    {
      v13 = result & 0x3FFFFFFFFFFFFFFFLL;
      if ((v32 & 1) != 0)
      {
        outlined copy of Environment<Bool>.Content(v2, v9);
        specialized Environment.wrappedValue.getter(v2, v9, &v36);
        outlined consume of Environment<Bool>.Content(v2, v9);
        if ((v36 & 1) != 0)
        {
          LOBYTE(v36) = 0;
          v16 = 1.0;
          Color.init(_:white:opacity:)();
          v21 = Color.over(_:)();
          swift_release();
          result = swift_release();
          v14 = 0;
          v12 = 0;
          v18 = 0.75;
          v13 = v21;
        }
        else
        {
          outlined copy of Environment<Bool>.Content(v6, v10);
          v26 = specialized Environment.wrappedValue.getter(v6, v10);
          result = outlined consume of Environment<Bool>.Content(v6, v10);
          v16 = 0.75;
          if ((v26 & 1) != 0)
          {
            static Color.white.getter();
            v27 = Color.over(_:)();
            swift_release();
            result = swift_release();
            v14 = 0;
            v12 = 0;
            v13 = v27;
          }
          else
          {
            v14 = 0;
            v12 = 0;
          }
          v18 = 0.75;
        }
        goto LABEL_64;
      }
      v14 = 0;
      v12 = 0;
      goto LABEL_46;
    }
    outlined copy of Environment<Bool>.Content(v2, v9);
    specialized Environment.wrappedValue.getter(v2, v9, &v36);
    outlined consume of Environment<Bool>.Content(v2, v9);
    v20 = v36;
    outlined copy of Environment<Bool>.Content(v6, v10);
    specialized Environment.wrappedValue.getter(v6, v10);
    outlined consume of Environment<Bool>.Content(v6, v10);
    if ((v20 & 1) != 0)
    {
      v16 = 1.0;
      LOBYTE(v36) = 0;
      v13 = Color.init(_:white:opacity:)();
      if ((v32 & 1) == 0)
      {
        if ((v33 & 1) != 0 || v34 != 1)
          result = static Color.accentColor.getter();
        else
          result = static Color.red.getter();
        v12 = result;
        goto LABEL_59;
      }
      outlined copy of Environment<Bool>.Content(v6, v10);
      v25 = specialized Environment.wrappedValue.getter(v6, v10);
      outlined consume of Environment<Bool>.Content(v6, v10);
      if ((v25 & 1) == 0)
        v16 = 0.65;
      LOBYTE(v36) = 0;
      Color.init(_:white:opacity:)();
      if ((v33 & 1) != 0 || v34 != 1)
        static Color.accentColor.getter();
      else
        static Color.red.getter();
      v12 = Color.over(_:)();
      swift_release();
LABEL_58:
      result = swift_release();
LABEL_59:
      v14 = 0;
      goto LABEL_63;
    }
    LOBYTE(v36) = 0;
    v13 = Color.init(_:white:opacity:)();
    if ((v33 & 1) != 0 || v34 != 1)
    {
      result = static Color.accentColor.getter();
      v12 = result;
      if ((v32 & 1) != 0)
        goto LABEL_29;
    }
    else
    {
      result = static Color.red.getter();
      v12 = result;
      if ((v32 & 1) != 0)
      {
LABEL_29:
        outlined copy of Environment<Bool>.Content(v6, v10);
        v22 = specialized Environment.wrappedValue.getter(v6, v10);
        result = outlined consume of Environment<Bool>.Content(v6, v10);
        v14 = 0;
        if ((v22 & 1) != 0)
          v16 = 1.0;
        else
          v16 = 0.65;
        v18 = 0.75;
        goto LABEL_64;
      }
    }
    v14 = 0;
LABEL_46:
    v16 = 1.0;
    goto LABEL_63;
  }
  outlined copy of Environment<Bool>.Content(v2, v9);
  specialized Environment.wrappedValue.getter(v2, v9, &v36);
  outlined consume of Environment<Bool>.Content(v2, v9);
  if ((v36 & 1) != 0)
  {
    if (static Color.red.getter() != v12)
    {
      v19 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      if ((v19 & 1) != 0)
      {
LABEL_34:
        v23 = Color.opacity(_:)();
        outlined copy of Environment<Bool>.Content(v6, v10);
        v24 = specialized Environment.wrappedValue.getter(v6, v10);
        outlined consume of Environment<Bool>.Content(v6, v10);
        if ((v32 & 1) != 0)
        {
          if ((v24 & 1) != 0)
          {
            static Color.black.getter();
            v13 = Color.over(_:)();
            swift_release();
          }
          else
          {
            swift_retain();
            v13 = v23;
          }
          LOBYTE(v36) = 0;
          v16 = 1.0;
          Color.init(_:white:opacity:)();
          v31 = Color.over(_:)();
          swift_release();
          swift_release();
          result = swift_release();
          v14 = 0;
          v12 = v31;
          goto LABEL_63;
        }
        v16 = 1.0;
        LOBYTE(v36) = 0;
        Color.init(_:white:opacity:)();
        v13 = Color.over(_:)();
        swift_release();
        goto LABEL_58;
      }
      if (static Color.pink.getter() != v12)
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        goto LABEL_34;
      }
    }
    swift_release();
    goto LABEL_34;
  }
  if (static Color.yellow.getter() != v12)
    dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
  swift_release();
  v13 = Color.opacity(_:)();
  outlined copy of Environment<Bool>.Content(v6, v10);
  v28 = specialized Environment.wrappedValue.getter(v6, v10);
  result = outlined consume of Environment<Bool>.Content(v6, v10);
  if ((v28 & 1) != 0)
  {
    static Color.white.getter();
    v29 = Color.over(_:)();
    swift_release();
    result = swift_release();
    v13 = v29;
  }
  v30 = a1;
  v14 = 0;
  v18 = 0.75;
  if ((v32 & 1) != 0)
  {
    v16 = 0.65;
  }
  else
  {
    v18 = 1.0;
    v16 = 1.0;
  }
LABEL_65:
  *(_QWORD *)v30 = v13;
  *(double *)(v30 + 8) = v16;
  *(_QWORD *)(v30 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v30 + 24) = 8;
  *(_DWORD *)(v30 + 32) = 0;
  *(_BYTE *)(v30 + 36) = v14;
  *(_QWORD *)(v30 + 40) = v12;
  *(double *)(v30 + 48) = v18;
  *(_QWORD *)(v30 + 56) = 0x3FF0000000000000;
  return result;
}

uint64_t ResolvedBorderedButton.opaqueBackgroundSpec.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  BOOL v36;
  int v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _OWORD v54[13];
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];

  v3 = v1[13];
  v68 = v1[12];
  v69[0] = v3;
  *(_OWORD *)((char *)v69 + 9) = *(__int128 *)((char *)v1 + 217);
  v4 = v1[9];
  v64 = v1[8];
  v65 = v4;
  v5 = v1[11];
  v66 = v1[10];
  v67 = v5;
  v6 = v1[5];
  v60 = v1[4];
  v61 = v6;
  v7 = v1[7];
  v62 = v1[6];
  v63 = v7;
  v8 = v1[1];
  v56 = *v1;
  v57 = v8;
  v9 = v1[3];
  v58 = v1[2];
  v59 = v9;
  outlined copy of Environment<Bool>.Content(v58, SBYTE8(v58));
  v10 = specialized Environment.wrappedValue.getter(v58, SBYTE8(v58));
  outlined consume of Environment<Bool>.Content(v58, SBYTE8(v58));
  if ((v10 & 1) == 0)
  {
    v25 = 0.75;
    v26 = 1.0;
    v19 = 1;
    result = static Color.secondarySystemFill.getter();
    v20 = result;
    goto LABEL_11;
  }
  v11 = v1[13];
  v54[12] = v1[12];
  v55[0] = v11;
  *(_OWORD *)((char *)v55 + 9) = *(__int128 *)((char *)v1 + 217);
  v12 = v1[9];
  v54[8] = v1[8];
  v54[9] = v12;
  v13 = v1[11];
  v54[10] = v1[10];
  v54[11] = v13;
  v14 = v1[5];
  v54[4] = v1[4];
  v54[5] = v14;
  v15 = v1[7];
  v54[6] = v1[6];
  v54[7] = v15;
  v16 = v1[1];
  v54[0] = *v1;
  v54[1] = v16;
  v17 = v1[3];
  v54[2] = v1[2];
  v54[3] = v17;
  v18 = ResolvedBorderedButton.resolvedTint.getter();
  v19 = v18;
  if (!(v18 >> 62))
  {
    v28 = static Color.secondarySystemFill.getter();
    v29 = v57;
    v30 = BYTE8(v57);
    outlined copy of Environment<Bool>.Content(v57, SBYTE8(v57));
    specialized Environment.wrappedValue.getter(v57, SBYTE8(v57), v54);
    outlined consume of Environment<Bool>.Content(v29, v30);
    v31 = v54[0];
    v32 = v60;
    v33 = BYTE8(v60);
    outlined copy of Environment<Bool>.Content(v60, SBYTE8(v60));
    v34 = specialized Environment.wrappedValue.getter(v32, v33);
    result = outlined consume of Environment<Bool>.Content(v32, v33);
    v36 = (v34 & 1) == 0 && v34 != 2;
    if ((v31 & 1) == 0)
    {
      if (!v36)
      {
        if (static Color.yellow.getter() != v19)
          dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        v51 = Color.opacity(_:)();
        result = swift_release();
        v28 = v51;
      }
      if (BYTE11(v60))
        v25 = 0.75;
      else
        v25 = 1.0;
      if (BYTE11(v60))
        v26 = 0.65;
      else
        v26 = 1.0;
      v20 = v28;
      goto LABEL_11;
    }
    if (v36)
    {
      swift_retain();
      v20 = v28;
      goto LABEL_54;
    }
    if (static Color.red.getter() != v19)
    {
      v45 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      if ((v45 & 1) != 0)
      {
LABEL_53:
        v20 = Color.opacity(_:)();
LABEL_54:
        if (BYTE11(v60) == 1)
        {
          LOBYTE(v54[0]) = 0;
          v25 = 1.0;
          Color.init(_:white:opacity:)();
          v49 = Color.over(_:)();
          swift_release();
          swift_release();
          result = swift_release();
          v26 = 1.4;
          v19 = v49;
        }
        else
        {
          result = swift_release();
          v26 = 1.0;
          v25 = 1.0;
        }
        goto LABEL_11;
      }
      if (static Color.pink.getter() != v19)
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        goto LABEL_53;
      }
    }
    swift_release();
    goto LABEL_53;
  }
  if (v18 >> 62 == 1)
  {
    v20 = v18 & 0x3FFFFFFFFFFFFFFFLL;
    outlined copy of Environment<Bool>.Content(v60, SBYTE8(v60));
    v21 = specialized Environment.wrappedValue.getter(v60, SBYTE8(v60));
    outlined consume of Environment<Bool>.Content(v60, SBYTE8(v60));
    v19 = 0;
    if (v21 != 2 && (v21 & 1) == 0)
    {
      swift_retain();
      v19 = v20;
    }
    if (BYTE11(v60) == 1)
    {
      v22 = v57;
      v23 = BYTE8(v57);
      outlined copy of Environment<Bool>.Content(v57, SBYTE8(v57));
      specialized Environment.wrappedValue.getter(v57, SBYTE8(v57), v54);
      result = outlined consume of Environment<Bool>.Content(v22, v23);
      v25 = 0.75;
      if (LOBYTE(v54[0]) == 1)
      {
        LOBYTE(v54[0]) = 0;
        v26 = 1.0;
        Color.init(_:white:opacity:)();
        v27 = Color.over(_:)();
        swift_release();
        result = swift_release();
        v20 = v27;
      }
      else
      {
        v26 = 0.75;
      }
      goto LABEL_11;
    }
    outlined copy of Environment<Bool>.Content(v60, SBYTE8(v60));
    specialized Environment.wrappedValue.getter(v60, SBYTE8(v60));
    outlined consume of Environment<Bool>.Content(v60, SBYTE8(v60));
    v26 = 1.0;
    v41 = Color.opacity(_:)();
    result = swift_release();
LABEL_51:
    v20 = v41;
    v25 = 1.0;
    goto LABEL_11;
  }
  v20 = static Color.secondarySystemFill.getter();
  v37 = BYTE9(v60);
  v38 = BYTE10(v60);
  if (BYTE11(v60) == 1)
  {
    v39 = v57;
    v40 = BYTE8(v57);
    outlined copy of Environment<Bool>.Content(v57, SBYTE8(v57));
    specialized Environment.wrappedValue.getter(v57, SBYTE8(v57), v54);
    outlined consume of Environment<Bool>.Content(v39, v40);
    if ((v54[0] & 1) != 0)
    {
      LOBYTE(v54[0]) = 0;
      Color.init(_:white:opacity:)();
      v41 = Color.over(_:)();
      swift_release();
      LOBYTE(v54[0]) = 0;
      Color.init(_:white:opacity:)();
      if (v37 == 1)
        v42 = v38;
      else
        v42 = 1;
      if ((v42 & 1) != 0)
        static Color.accentColor.getter();
      else
        static Color.red.getter();
      v19 = Color.over(_:)();
      swift_release();
      swift_release();
      result = swift_release();
      v26 = 1.0;
      goto LABEL_51;
    }
    if (v37 == 1)
      v46 = v38;
    else
      v46 = 1;
    if ((v46 & 1) != 0)
      result = static Color.accentColor.getter();
    else
      result = static Color.red.getter();
    v19 = result;
    v26 = 0.75;
    v25 = 0.75;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(v60, SBYTE8(v60));
    v43 = specialized Environment.wrappedValue.getter(v60, SBYTE8(v60));
    outlined consume of Environment<Bool>.Content(v60, SBYTE8(v60));
    if ((v43 & 1) != 0)
    {
      if (BYTE9(v60) == 1)
        v47 = BYTE10(v60);
      else
        v47 = 1;
      outlined retain of ResolvedBorderedButton((uint64_t)&v56);
      if ((v47 & 1) != 0)
      {
        static Color.accentColor.getter();
        v48 = static Color.accentColor.getter();
      }
      else
      {
        static Color.red.getter();
        v48 = static Color.red.getter();
      }
      v50 = v48;
      outlined release of ResolvedBorderedButton((uint64_t)&v56);
      if (v50 == static Color.yellow.getter())
      {
        swift_release_n();
      }
      else
      {
        dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        swift_release();
      }
      v44 = Color.opacity(_:)();
      swift_release();
    }
    else
    {
      swift_retain();
      v44 = v20;
    }
    if (v37 == 1)
      v52 = v38;
    else
      v52 = 1;
    outlined retain of ResolvedBorderedButton((uint64_t)&v56);
    if ((v52 & 1) != 0)
      v53 = static Color.accentColor.getter();
    else
      v53 = static Color.red.getter();
    v19 = v53;
    swift_release();
    result = outlined release of ResolvedBorderedButton((uint64_t)&v56);
    v26 = 1.0;
    v20 = v44;
    v25 = 1.0;
  }
LABEL_11:
  *(_QWORD *)a1 = v20;
  *(double *)(a1 + 8) = v26;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 24) = 8;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = v19;
  *(double *)(a1 + 48) = v25;
  *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
  return result;
}

uint64_t ResolvedBorderedButton.resolvedTint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;
  char v21;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_BYTE *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(unsigned __int8 *)(v0 + 120);
  v6 = *(_BYTE *)(v0 + 121);
  v7 = *(_BYTE *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(unsigned __int8 *)(v0 + 152);
  v10 = v1;
  if (*(_BYTE *)(v0 + 88) == 1)
  {
    if (v1)
      goto LABEL_4;
    v18 = *(_BYTE *)(v0 + 74);
    v19 = *(unsigned __int8 *)(v0 + 73);
    v11 = *(_QWORD *)(v0 + 128);
    v12 = v7;
    v20 = v7;
    outlined copy of Environment<Bool>.Content(v2, v3);
    outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined copy of Environment<Bool>.Content(v11, v12);
    outlined copy of Environment<Color?>.Content(v8, v9);
    outlined copy of Environment<Color?>.Content(v8, v9);
    v10 = specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Color?>.Content(v8, v9);
    outlined consume of Environment<Bool>.Content(v2, v3);
    outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined consume of Environment<Bool>.Content(v11, v20);
    outlined consume of Environment<Color?>.Content(v8, v9);
    if (v10)
    {
LABEL_4:
      swift_retain();
      return v10 | 0x4000000000000000;
    }
    else
    {
      v16 = v18;
      if (v19 != 1)
        v16 = 1;
      if ((v16 & 1) != 0)
        v17 = static Color.accentColor.getter();
      else
        v17 = static Color.red.getter();
      return v17 | 0x4000000000000000;
    }
  }
  else
  {
    if (v1)
      goto LABEL_7;
    v13 = *(_QWORD *)(v0 + 128);
    v14 = v7;
    v21 = v7;
    outlined copy of Environment<Bool>.Content(v2, v3);
    outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined copy of Environment<Bool>.Content(v13, v14);
    outlined copy of Environment<Color?>.Content(v8, v9);
    outlined copy of Environment<Color?>.Content(v8, v9);
    v10 = specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Color?>.Content(v8, v9);
    outlined consume of Environment<Bool>.Content(v2, v3);
    outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined consume of Environment<Bool>.Content(v13, v21);
    outlined consume of Environment<Color?>.Content(v8, v9);
    if (v10)
LABEL_7:
      swift_retain();
    else
      return 0x8000000000000000;
  }
  return v10;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedBorderedButton()
{
  type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _ContentShapeKindModifier<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
  lazy protocol witness table accessor for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, ();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(0);
  type metadata accessor for ViewInputFlagModifier<ButtonContainerIsBorderedInput>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseImageBackground()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UseImageBackground()
{
  lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();
  return PropertyList.subscript.setter();
}

uint64_t View.materialBackedBorderedButtons()(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();
  return View.input<A>(_:)((uint64_t)&unk_1E1ACC630, a1, (uint64_t)&unk_1E1ACC630, a2, v4);
}

unint64_t lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseImageBackground, &unk_1E1ACC630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseImageBackground, &unk_1E1ACC630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseImageBackground, &unk_1E1ACC630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseImageBackground, &unk_1E1ACC630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground;
  if (!lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseImageBackground, &unk_1E1ACC630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseImageBackground and conformance UseImageBackground);
  }
  return result;
}

uint64_t sub_18723D79C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<UseImageBackground>, (uint64_t (*)(void))lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground, (uint64_t)&unk_1E1ACC630, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for BorderedButtonStyle_Phone(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(_BYTE *)(a1 + 41));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
}

uint64_t initializeWithCopy for BorderedButtonStyle_Phone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 41);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<CGFloat?>.Content(v6, v8, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 41) = v7;
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(unsigned __int8 *)(a2 + 72);
  outlined copy of Environment<Color?>.Content(v11, v12);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  return a1;
}

uint64_t assignWithCopy for BorderedButtonStyle_Phone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 41);
  v10 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 41);
  *(_QWORD *)(a1 + 32) = v8;
  v13 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 41) = v9;
  outlined consume of Environment<CGFloat?>.Content(v11, v13, v12);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v14, v15);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 56) = v15;
  outlined consume of Environment<Bool>.Content(v16, v17);
  v18 = *(_QWORD *)(a2 + 64);
  v19 = *(unsigned __int8 *)(a2 + 72);
  outlined copy of Environment<Color?>.Content(v18, v19);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(unsigned __int8 *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = v19;
  outlined consume of Environment<Color?>.Content(v20, v21);
  return a1;
}

uint64_t assignWithTake for BorderedButtonStyle_Phone(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 41);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 41);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 41) = v8;
  outlined consume of Environment<CGFloat?>.Content(v9, v11, v10);
  v12 = *(_BYTE *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_BYTE *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(unsigned __int8 *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v15;
  outlined consume of Environment<Color?>.Content(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButtonStyle_Phone(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 73))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderedButtonStyle_Phone(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle_Phone()
{
  return &type metadata for BorderedButtonStyle_Phone;
}

void *type metadata accessor for UseImageBackground()
{
  return &unk_1E1ACC630;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in BorderedButtonStyle_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in UseImageBackground()
{
  return &protocol witness table for UseImageBackground;
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues, serialized()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_18723DD30()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t key path setter for EnvironmentValues.imageScale : EnvironmentValues, serialized()
{
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_18723DD84()
{
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_18723DDB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = EnvironmentValues.backgroundMaterial.getter();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_18723DE00(unint64_t *a1)
{
  outlined copy of Material?(*a1);
  return EnvironmentValues.backgroundMaterial.setter();
}

uint64_t sub_18723DE54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18723DE90()
{
  return EnvironmentValues.accessibilityReduceTransparency.setter();
}

uint64_t destroy for ResolvedBorderedButton(uint64_t a1)
{
  outlined consume of Environment<Material?>.Content(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_BYTE *)(a1 + 12));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 120), *(_BYTE *)(a1 + 121));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + 144), *(unsigned __int8 *)(a1 + 152));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 176), *(_BYTE *)(a1 + 184));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(unsigned __int8 *)(a1 + 216), *(_BYTE *)(a1 + 217));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 224), *(_BYTE *)(a1 + 232));
}

{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(_BYTE *)(a1 + 73));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(unsigned __int8 *)(a1 + 136), *(_BYTE *)(a1 + 137));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 144), *(_BYTE *)(a1 + 152));
  return swift_release();
}

uint64_t initializeWithCopy for ResolvedBorderedButton(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 12);
  outlined copy of Environment<Material?>.Content(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v6;
  v7 = *(_QWORD *)(v2 + 16);
  LOBYTE(v5) = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v7, v5);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v5;
  v8 = *(_QWORD *)(v2 + 32);
  LOBYTE(v5) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v5);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v5;
  v9 = *(_QWORD *)(v2 + 48);
  LOBYTE(v5) = *(_BYTE *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v9, v5);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v5;
  v10 = *(_QWORD *)(v2 + 64);
  LOBYTE(v5) = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v5);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v5;
  *(_WORD *)(a1 + 73) = *(_WORD *)(v2 + 73);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(v2 + 75);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v2 + 88);
  v11 = *(_QWORD *)(v2 + 96);
  LOBYTE(v5) = *(_BYTE *)(v2 + 104);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v11, v5);
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v5;
  v12 = *(_QWORD *)(v2 + 112);
  LOBYTE(v5) = *(_BYTE *)(v2 + 121);
  v13 = *(_BYTE *)(v2 + 120);
  outlined copy of Environment<CGFloat?>.Content(v12, v13, v5);
  *(_QWORD *)(a1 + 112) = v12;
  *(_BYTE *)(a1 + 120) = v13;
  *(_BYTE *)(a1 + 121) = v5;
  v14 = *(_QWORD *)(v2 + 128);
  LOBYTE(v5) = *(_BYTE *)(v2 + 136);
  outlined copy of Environment<Bool>.Content(v14, v5);
  *(_QWORD *)(a1 + 128) = v14;
  *(_BYTE *)(a1 + 136) = v5;
  v15 = *(_QWORD *)(v2 + 144);
  LOBYTE(v5) = *(_BYTE *)(v2 + 152);
  outlined copy of Environment<Color?>.Content(v15, v5);
  *(_QWORD *)(a1 + 144) = v15;
  *(_BYTE *)(a1 + 152) = v5;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(v2 + 168);
  v16 = *(_QWORD *)(v2 + 176);
  LOBYTE(v5) = *(_BYTE *)(v2 + 184);
  outlined copy of Environment<Bool>.Content(v16, v5);
  *(_QWORD *)(a1 + 176) = v16;
  *(_BYTE *)(a1 + 184) = v5;
  v17 = *(_QWORD *)(v2 + 192);
  v18 = *(_QWORD *)(v2 + 200);
  v19 = *(_QWORD *)(v2 + 208);
  v20 = *(_BYTE *)(v2 + 217);
  v21 = *(_BYTE *)(v2 + 216);
  outlined copy of Environment<KeyboardShortcut?>.Content(v17, v18, v19, v21, v20);
  *(_QWORD *)(a1 + 192) = v17;
  *(_QWORD *)(a1 + 200) = v18;
  *(_QWORD *)(a1 + 208) = v19;
  *(_BYTE *)(a1 + 216) = v21;
  *(_BYTE *)(a1 + 217) = v20;
  v22 = *(_QWORD *)(v2 + 224);
  LOBYTE(v2) = *(_BYTE *)(v2 + 232);
  outlined copy of Environment<Bool>.Content(v22, v2);
  *(_QWORD *)(a1 + 224) = v22;
  *(_BYTE *)(a1 + 232) = v2;
  return a1;
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned __int8 v23;
  uint64_t v24;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Color?>.Content(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_BYTE *)(a2 + 73);
  v14 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v12, v14, v13);
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 73) = v13;
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v15, v16);
  *(_QWORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v17, v18);
  *(_QWORD *)(a1 + 96) = v17;
  *(_BYTE *)(a1 + 104) = v18;
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a2 + 128);
  v22 = *(_BYTE *)(a2 + 137);
  v23 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<KeyboardShortcut?>.Content(v19, v20, v21, v23, v22);
  *(_QWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 120) = v20;
  *(_QWORD *)(a1 + 128) = v21;
  *(_BYTE *)(a1 + 136) = v23;
  *(_BYTE *)(a1 + 137) = v22;
  v24 = *(_QWORD *)(a2 + 144);
  LOBYTE(v20) = *(_BYTE *)(a2 + 152);
  outlined copy of Environment<Bool>.Content(v24, v20);
  *(_QWORD *)(a1 + 144) = v24;
  *(_BYTE *)(a1 + 152) = v20;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedBorderedButton(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 12);
  outlined copy of Environment<Material?>.Content(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 12);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v6;
  outlined consume of Environment<Material?>.Content(v7, v8, v9);
  v10 = *(_QWORD *)(v2 + 16);
  LOBYTE(v5) = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v10, v5);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = *(_QWORD *)(v2 + 32);
  LOBYTE(v5) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v13, v5);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = *(_QWORD *)(v2 + 48);
  LOBYTE(v5) = *(_BYTE *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v16, v5);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v5;
  outlined consume of Environment<Bool>.Content(v17, v18);
  v19 = *(_QWORD *)(v2 + 64);
  LOBYTE(v5) = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v19, v5);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v19;
  *(_BYTE *)(a1 + 72) = v5;
  outlined consume of Environment<Bool>.Content(v20, v21);
  *(_WORD *)(a1 + 73) = *(_WORD *)(v2 + 73);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(v2 + 75);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v2 + 80);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v2 + 88);
  v22 = *(_QWORD *)(v2 + 96);
  LOBYTE(v5) = *(_BYTE *)(v2 + 104);
  outlined copy of Environment<Bool>.Content(v22, v5);
  v23 = *(_QWORD *)(a1 + 96);
  v24 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v22;
  *(_BYTE *)(a1 + 104) = v5;
  outlined consume of Environment<Bool>.Content(v23, v24);
  v25 = *(_QWORD *)(v2 + 112);
  LOBYTE(v5) = *(_BYTE *)(v2 + 121);
  v26 = *(_BYTE *)(v2 + 120);
  outlined copy of Environment<CGFloat?>.Content(v25, v26, v5);
  v27 = *(_QWORD *)(a1 + 112);
  v28 = *(_BYTE *)(a1 + 121);
  *(_QWORD *)(a1 + 112) = v25;
  v29 = *(unsigned __int8 *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v26;
  *(_BYTE *)(a1 + 121) = v5;
  outlined consume of Environment<CGFloat?>.Content(v27, v29, v28);
  v30 = *(_QWORD *)(v2 + 128);
  LOBYTE(v5) = *(_BYTE *)(v2 + 136);
  outlined copy of Environment<Bool>.Content(v30, v5);
  v31 = *(_QWORD *)(a1 + 128);
  v32 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v30;
  *(_BYTE *)(a1 + 136) = v5;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = *(_QWORD *)(v2 + 144);
  LOBYTE(v5) = *(_BYTE *)(v2 + 152);
  outlined copy of Environment<Color?>.Content(v33, v5);
  v34 = *(_QWORD *)(a1 + 144);
  v35 = *(unsigned __int8 *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v33;
  *(_BYTE *)(a1 + 152) = v5;
  outlined consume of Environment<Color?>.Content(v34, v35);
  v36 = *(_QWORD *)(v2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(v2 + 168);
  *(_QWORD *)(a1 + 160) = v36;
  v37 = *(_QWORD *)(v2 + 176);
  LOBYTE(v5) = *(_BYTE *)(v2 + 184);
  outlined copy of Environment<Bool>.Content(v37, v5);
  v38 = *(_QWORD *)(a1 + 176);
  v39 = *(_BYTE *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v37;
  *(_BYTE *)(a1 + 184) = v5;
  outlined consume of Environment<Bool>.Content(v38, v39);
  v40 = *(_QWORD *)(v2 + 192);
  v41 = *(_QWORD *)(v2 + 200);
  v42 = *(_QWORD *)(v2 + 208);
  v43 = *(_BYTE *)(v2 + 217);
  v44 = *(_BYTE *)(v2 + 216);
  outlined copy of Environment<KeyboardShortcut?>.Content(v40, v41, v42, v44, v43);
  v45 = *(_QWORD *)(a1 + 192);
  v46 = *(_QWORD *)(a1 + 200);
  v47 = *(_QWORD *)(a1 + 208);
  v48 = *(_BYTE *)(a1 + 217);
  *(_QWORD *)(a1 + 192) = v40;
  *(_QWORD *)(a1 + 200) = v41;
  *(_QWORD *)(a1 + 208) = v42;
  v49 = *(unsigned __int8 *)(a1 + 216);
  *(_BYTE *)(a1 + 216) = v44;
  *(_BYTE *)(a1 + 217) = v43;
  outlined consume of Environment<KeyboardShortcut?>.Content(v45, v46, v47, v49, v48);
  v50 = *(_QWORD *)(v2 + 224);
  LOBYTE(v2) = *(_BYTE *)(v2 + 232);
  outlined copy of Environment<Bool>.Content(v50, v2);
  v51 = *(_QWORD *)(a1 + 224);
  v52 = *(_BYTE *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v50;
  *(_BYTE *)(a1 + 232) = v2;
  outlined consume of Environment<Bool>.Content(v51, v52);
  return a1;
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Color?>.Content(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v17;
  outlined consume of Environment<Color?>.Content(v18, v19);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_BYTE *)(a2 + 73);
  v22 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v20, v22, v21);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_BYTE *)(a1 + 73);
  *(_QWORD *)(a1 + 64) = v20;
  v25 = *(unsigned __int8 *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 73) = v21;
  outlined consume of Environment<CGFloat?>.Content(v23, v25, v24);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v26, v27);
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v26;
  *(_BYTE *)(a1 + 88) = v27;
  outlined consume of Environment<Bool>.Content(v28, v29);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v30 = *(_QWORD *)(a2 + 96);
  v31 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v30, v31);
  v32 = *(_QWORD *)(a1 + 96);
  v33 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v30;
  *(_BYTE *)(a1 + 104) = v31;
  outlined consume of Environment<Bool>.Content(v32, v33);
  v34 = *(_QWORD *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 120);
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_BYTE *)(a2 + 137);
  v38 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<KeyboardShortcut?>.Content(v34, v35, v36, v38, v37);
  v39 = *(_QWORD *)(a1 + 112);
  v40 = *(_QWORD *)(a1 + 120);
  v41 = *(_QWORD *)(a1 + 128);
  v42 = *(_BYTE *)(a1 + 137);
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v35;
  *(_QWORD *)(a1 + 128) = v36;
  v43 = *(unsigned __int8 *)(a1 + 136);
  *(_BYTE *)(a1 + 136) = v38;
  *(_BYTE *)(a1 + 137) = v37;
  outlined consume of Environment<KeyboardShortcut?>.Content(v39, v40, v41, v43, v42);
  v44 = *(_QWORD *)(a2 + 144);
  LOBYTE(v35) = *(_BYTE *)(a2 + 152);
  outlined copy of Environment<Bool>.Content(v44, v35);
  v45 = *(_QWORD *)(a1 + 144);
  v46 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v44;
  *(_BYTE *)(a1 + 152) = v35;
  outlined consume of Environment<Bool>.Content(v45, v46);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ResolvedBorderedButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *((_BYTE *)a2 + 12);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 12);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v6;
  outlined consume of Environment<Material?>.Content(v7, v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = *((_BYTE *)a2 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = *((_BYTE *)a2 + 56);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  v19 = *((_BYTE *)a2 + 72);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  *(_WORD *)(a1 + 73) = *(_WORD *)((char *)a2 + 73);
  *(_BYTE *)(a1 + 75) = *((_BYTE *)a2 + 75);
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_release();
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  v22 = *((_BYTE *)a2 + 104);
  v23 = *(_QWORD *)(a1 + 96);
  v24 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  v25 = *((_BYTE *)a2 + 120);
  v26 = *((_BYTE *)a2 + 121);
  v27 = *(_QWORD *)(a1 + 112);
  v28 = *(_BYTE *)(a1 + 121);
  *(_QWORD *)(a1 + 112) = a2[14];
  v29 = *(unsigned __int8 *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v25;
  *(_BYTE *)(a1 + 121) = v26;
  outlined consume of Environment<CGFloat?>.Content(v27, v29, v28);
  v30 = *((_BYTE *)a2 + 136);
  v31 = *(_QWORD *)(a1 + 128);
  v32 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_BYTE *)(a1 + 136) = v30;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = *((_BYTE *)a2 + 152);
  v34 = *(_QWORD *)(a1 + 144);
  v35 = *(unsigned __int8 *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_BYTE *)(a1 + 152) = v33;
  outlined consume of Environment<Color?>.Content(v34, v35);
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  v36 = *((_BYTE *)a2 + 184);
  v37 = *(_QWORD *)(a1 + 176);
  v38 = *(_BYTE *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_BYTE *)(a1 + 184) = v36;
  outlined consume of Environment<Bool>.Content(v37, v38);
  v39 = a2[26];
  v40 = *((_BYTE *)a2 + 216);
  v41 = *((_BYTE *)a2 + 217);
  v42 = *(_QWORD *)(a1 + 192);
  v43 = *(_QWORD *)(a1 + 200);
  v44 = *(_QWORD *)(a1 + 208);
  v45 = *(_BYTE *)(a1 + 217);
  *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
  *(_QWORD *)(a1 + 208) = v39;
  v46 = *(unsigned __int8 *)(a1 + 216);
  *(_BYTE *)(a1 + 216) = v40;
  *(_BYTE *)(a1 + 217) = v41;
  outlined consume of Environment<KeyboardShortcut?>.Content(v42, v43, v44, v46, v45);
  v47 = *((_BYTE *)a2 + 232);
  v48 = *(_QWORD *)(a1 + 224);
  v49 = *(_BYTE *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = a2[28];
  *(_BYTE *)(a1 + 232) = v47;
  outlined consume of Environment<Bool>.Content(v48, v49);
  return a1;
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_BYTE *)a2 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *((_BYTE *)a2 + 56);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = v14;
  outlined consume of Environment<Color?>.Content(v15, v16);
  v17 = *((_BYTE *)a2 + 72);
  v18 = *((_BYTE *)a2 + 73);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 73);
  *(_QWORD *)(a1 + 64) = a2[8];
  v21 = *(unsigned __int8 *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = v17;
  *(_BYTE *)(a1 + 73) = v18;
  outlined consume of Environment<CGFloat?>.Content(v19, v21, v20);
  v22 = *((_BYTE *)a2 + 88);
  v23 = *(_QWORD *)(a1 + 80);
  v24 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 88) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  *(_WORD *)(a1 + 89) = *(_WORD *)((char *)a2 + 89);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  v25 = *((_BYTE *)a2 + 104);
  v26 = *(_QWORD *)(a1 + 96);
  v27 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = v25;
  outlined consume of Environment<Bool>.Content(v26, v27);
  v28 = a2[16];
  v29 = *((_BYTE *)a2 + 136);
  v30 = *((_BYTE *)a2 + 137);
  v31 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 128);
  v34 = *(_BYTE *)(a1 + 137);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_QWORD *)(a1 + 128) = v28;
  v35 = *(unsigned __int8 *)(a1 + 136);
  *(_BYTE *)(a1 + 136) = v29;
  *(_BYTE *)(a1 + 137) = v30;
  outlined consume of Environment<KeyboardShortcut?>.Content(v31, v32, v33, v35, v34);
  v36 = *((_BYTE *)a2 + 152);
  v37 = *(_QWORD *)(a1 + 144);
  v38 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_BYTE *)(a1 + 152) = v36;
  outlined consume of Environment<Bool>.Content(v37, v38);
  *(_QWORD *)(a1 + 160) = a2[20];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedBorderedButton(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 233))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedBorderedButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 232) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 233) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 233) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

void *type metadata accessor for ResolvedBorderedButton()
{
  return &unk_1E1ADD488;
}

{
  return &unk_1E1ADD528;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedBorderedButton and conformance ResolvedBorderedButton();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedBorderedButton, _EnvironmentKeyWritingModifier<Image.Scale>>);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedBorderedButton and conformance ResolvedBorderedButton()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton;
  if (!lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBorderedButton, &unk_1E1ADD488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton;
  if (!lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedBorderedButton, &unk_1E1ADD528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBorderedButton and conformance ResolvedBorderedButton);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedBorderedButton()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of ResolvedBorderedButton(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 128);
  v15 = *(_BYTE *)(a1 + 121);
  v16 = *(_BYTE *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 144);
  v18 = *(unsigned __int8 *)(a1 + 152);
  v21 = *(_BYTE *)(a1 + 184);
  v24 = *(_QWORD *)(a1 + 200);
  v25 = *(_QWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 208);
  v28 = *(_QWORD *)(a1 + 224);
  v26 = *(_BYTE *)(a1 + 217);
  v27 = *(_BYTE *)(a1 + 232);
  v10 = *(unsigned __int8 *)(a1 + 120);
  v20 = *(unsigned __int8 *)(a1 + 216);
  outlined copy of Environment<Material?>.Content(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_BYTE *)(a1 + 12));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v13, v12);
  outlined copy of Environment<CGFloat?>.Content(v14, v10, v15);
  outlined copy of Environment<Bool>.Content(v17, v16);
  outlined copy of Environment<Color?>.Content(v19, v18);
  outlined copy of Environment<Bool>.Content(v22, v21);
  outlined copy of Environment<KeyboardShortcut?>.Content(v25, v24, v23, v20, v26);
  outlined copy of Environment<Bool>.Content(v28, v27);
  return a1;
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 73);
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_BYTE *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 128);
  v20 = *(_BYTE *)(a1 + 137);
  v21 = *(_BYTE *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v14 = *(unsigned __int8 *)(a1 + 136);
  v15 = *(_BYTE *)(a1 + 104);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Color?>.Content(v6, v7);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  outlined copy of Environment<Bool>.Content(v13, v12);
  outlined copy of Environment<Bool>.Content(v16, v15);
  outlined copy of Environment<KeyboardShortcut?>.Content(v19, v18, v17, v14, v20);
  outlined copy of Environment<Bool>.Content(v22, v21);
  swift_retain();
  return a1;
}

uint64_t outlined retain of BorderedButtonSpec(uint64_t a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(unsigned __int8 *)(a1 + 41);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(unsigned __int8 *)(a1 + 56);
  v13 = *(unsigned __int8 *)(a1 + 40);
  a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  a3(v7, v8, v9, v13, v10);
  a4(v11, v12);
  return a1;
}

uint64_t outlined release of ResolvedBorderedButton(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 128);
  v15 = *(_BYTE *)(a1 + 121);
  v16 = *(_BYTE *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 144);
  v18 = *(unsigned __int8 *)(a1 + 152);
  v21 = *(_BYTE *)(a1 + 184);
  v24 = *(_QWORD *)(a1 + 200);
  v25 = *(_QWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 208);
  v28 = *(_QWORD *)(a1 + 224);
  v26 = *(_BYTE *)(a1 + 217);
  v27 = *(_BYTE *)(a1 + 232);
  v10 = *(unsigned __int8 *)(a1 + 120);
  v20 = *(unsigned __int8 *)(a1 + 216);
  outlined consume of Environment<Material?>.Content(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_BYTE *)(a1 + 12));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  swift_release();
  outlined consume of Environment<Bool>.Content(v13, v12);
  outlined consume of Environment<CGFloat?>.Content(v14, v10, v15);
  outlined consume of Environment<Bool>.Content(v17, v16);
  outlined consume of Environment<Color?>.Content(v19, v18);
  outlined consume of Environment<Bool>.Content(v22, v21);
  outlined consume of Environment<KeyboardShortcut?>.Content(v25, v24, v23, v20, v26);
  outlined consume of Environment<Bool>.Content(v28, v27);
  return a1;
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_BYTE *)(a1 + 73);
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_BYTE *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 128);
  v20 = *(_BYTE *)(a1 + 137);
  v21 = *(_BYTE *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v14 = *(unsigned __int8 *)(a1 + 136);
  v15 = *(_BYTE *)(a1 + 104);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Color?>.Content(v6, v7);
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  outlined consume of Environment<Bool>.Content(v13, v12);
  outlined consume of Environment<Bool>.Content(v16, v15);
  outlined consume of Environment<KeyboardShortcut?>.Content(v19, v18, v17, v14, v20);
  outlined consume of Environment<Bool>.Content(v22, v21);
  swift_release();
  return a1;
}

unint64_t outlined consume of BorderedButtonColorSpec.LabelStyle(unint64_t result)
{
  if (result >= 3)
    return swift_release();
  return result;
}

uint64_t outlined retain of BorderedButtonStyle_Phone(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 41);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(unsigned __int8 *)(a1 + 72);
  v10 = *(unsigned __int8 *)(a1 + 40);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<CGFloat?>.Content(v4, v10, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<Color?>.Content(v8, v9);
  return a1;
}

uint64_t outlined release of BorderedButtonStyle_Phone(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 41);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(unsigned __int8 *)(a1 + 72);
  v10 = *(unsigned __int8 *)(a1 + 40);
  swift_release();
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<CGFloat?>.Content(v4, v10, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<Color?>.Content(v8, v9);
  return a1;
}

unint64_t outlined copy of BorderedButtonColorSpec.LabelStyle(unint64_t result)
{
  if (result >= 3)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pad;
  if (!lazy cache variable for type metadata for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pad)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
    lazy protocol witness table accessor for type UseImageBackground and conformance UseImageBackground();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>, MEMORY[0x1E0CE7890], MEMORY[0x1E0CE7880], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _DefaultForegroundStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _DefaultForegroundStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>);
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>, type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
}

void type metadata accessor for _ShapeView<ResolvedBorderShape, Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, Color>)
  {
    lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, Color>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>, type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE35A8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, Color> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>, MEMORY[0x1E0CE0E50]);
    v3[1] = MEMORY[0x1E0CE5B88];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, ()
{
  unint64_t result;
  uint64_t ShouldRenderAs;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelSty;
  if (!lazy protocol witness table cache variable for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelSty)
  {
    ShouldRenderAs = type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, ShouldRenderAs, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelSty);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CE7170], MEMORY[0x1E0CE7138], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>, MEMORY[0x1E0CE7890], MEMORY[0x1E0CE7880], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5D18]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<ResolvedBorderShape> and conformance _ClipEffect<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _CompositingGroupEffect>, _BlendModeEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpe()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonCo;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonCo)
  {
    type metadata accessor for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pa();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, ();
    v3[1] = &protocol witness table for _ContentShapeKindModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonCo);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _Pa()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.La)
  {
    type metadata accessor for StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _B();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<ResolvedBorderShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape, (uint64_t)&type metadata for ResolvedBorderShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<UseImageBackground, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.LabelStyle>>, _PaddingLayout>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<ResolvedBorderShape>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _OpacityEffect>, _DefaultForegroundStyleModifier<BorderedButtonColorSpec.La);
  }
}

void static WindowFlexibility.constrainedToContent.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.windowFlexibility(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowFlexibility.automatic.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowFlexibility.constrainedToContent.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowFlexibility.constrainedToContentMinimum.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowFlexibility()
{
  return &type metadata for WindowFlexibility;
}

uint64_t storeEnumTagSinglePayload for WindowFlexibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18723FB9C + 4 * byte_187C17EC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18723FBD0 + 4 * byte_187C17EC0[v4]))();
}

uint64_t sub_18723FBD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18723FBD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18723FBE0);
  return result;
}

uint64_t sub_18723FBEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18723FBF4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18723FBF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18723FC00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WindowFlexibility.Role()
{
  return &type metadata for WindowFlexibility.Role;
}

unint64_t lazy protocol witness table accessor for type WindowFlexibility.Role and conformance WindowFlexibility.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowFlexibility.Role and conformance WindowFlexibility.Role;
  if (!lazy protocol witness table cache variable for type WindowFlexibility.Role and conformance WindowFlexibility.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowFlexibility.Role, &type metadata for WindowFlexibility.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowFlexibility.Role and conformance WindowFlexibility.Role);
  }
  return result;
}

void static WindowFlexibility.automatic.getter()
{
  static WindowFlexibility.constrainedToContent.getter();
}

void static WindowFlexibility.constrainedToContentMinimum.getter()
{
  static WindowFlexibility.constrainedToContent.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentMarginModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentMarginModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentMarginModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ContentMarginModifier()
{
  lazy protocol witness table accessor for type ContentMarginModifier and conformance ContentMarginModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

void protocol witness for ViewModifier.body(content:) in conformance ResetContentMarginModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetContentMarginModifier()
{
  lazy protocol witness table accessor for type ResetContentMarginModifier and conformance ResetContentMarginModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.AutomaticContentMarginKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  v6 = a1[4];
  v7 = *((_BYTE *)a1 + 40);
  v8 = a1[6];
  v9 = *((_BYTE *)a1 + 56);
  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  v12 = a2[2];
  v13 = *((_BYTE *)a2 + 24);
  v14 = a2[4];
  v15 = *((_BYTE *)a2 + 40);
  v16 = a2[6];
  v17 = *((_BYTE *)a2 + 56);
  v27 = v2;
  v28 = v3;
  v29 = v4;
  v30 = v5;
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v9;
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v24 = v15;
  v25 = v16;
  v26 = v17;
  return MEMORY[0x18D7593E8](&v27, &v19) & 1;
}

void ContentMarginProxy.margins(for:in:allowAutomatic:)(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = *a1;
  OptionalEdgeInsets.init()();
  __asm { BR              X9 }
}

uint64_t sub_18724007C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;

  v1 = v17;
  v2 = v16;
  v3 = v15;
  v4 = v14;
  v5 = v13;
  v6 = v12;
  v7 = v11;
  v8 = v10;
  *(_QWORD *)(v0 - 216) = v17;
  *(_BYTE *)(v0 - 208) = v16;
  *(_QWORD *)(v0 - 200) = v15;
  *(_BYTE *)(v0 - 192) = v14;
  *(_QWORD *)(v0 - 184) = v13;
  *(_BYTE *)(v0 - 176) = v12;
  *(_QWORD *)(v0 - 168) = v11;
  *(_BYTE *)(v0 - 160) = v10;
  static OptionalEdgeInsets.none.getter();
  v27 = v35;
  v28 = v36;
  v29 = v37;
  v30 = v38;
  v31 = v39;
  v32 = v40;
  v33 = v41;
  v34 = v42;
  if ((MEMORY[0x18D7593E8](v0 - 216, &v27) & 1) != 0 && (v26 & 1) != 0)
  {
    v1 = v25;
    v2 = v24;
    v3 = v23;
    v4 = v22;
    v5 = v21;
    v6 = v20;
    v7 = v19;
    v8 = v18;
  }
  *(_QWORD *)(v0 - 152) = v1;
  *(_BYTE *)(v0 - 144) = v2;
  *(_QWORD *)(v0 - 136) = v3;
  *(_BYTE *)(v0 - 128) = v4;
  *(_QWORD *)(v0 - 120) = v5;
  *(_BYTE *)(v0 - 112) = v6;
  *(_QWORD *)(v0 - 104) = v7;
  *(_BYTE *)(v0 - 96) = v8;
  return OptionalEdgeInsets.in(edges:)();
}

uint64_t View.contentMargin(_:_:for:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, double a5)
{
  char v6;

  v6 = *a2;
  return View.contentMargin(_:_:for:)(a1, *(_QWORD *)&a5, 0, &v6, a3, a4);
}

uint64_t View.contentMargins(_:_:for:)(char a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v9 = *a4;
  OptionalEdgeInsets.init(_:edges:)();
  v10 = v19;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v14 = v23;
  v15 = v24;
  v16 = v25;
  v17 = v26;
  LOBYTE(v19) = a1;
  v20 = v10;
  LOBYTE(v21) = v11;
  v22 = v12;
  LOBYTE(v23) = v13;
  v24 = v14;
  LOBYTE(v25) = v15;
  v26 = v16;
  v27 = v17;
  v28 = v9;
  return MEMORY[0x18D75B4AC](&v19, a5, &type metadata for ContentMarginModifier, a6);
}

uint64_t View.contentMargins(_:_:for:)(char a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v7 = *a2;
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init(_:edges:)();
  v8 = v17;
  v9 = v18;
  v10 = v19;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v14 = v23;
  v15 = v24;
  LOBYTE(v17) = a1;
  v18 = v8;
  LOBYTE(v19) = v9;
  v20 = v10;
  LOBYTE(v21) = v11;
  v22 = v12;
  LOBYTE(v23) = v13;
  v24 = v14;
  v25 = v15;
  v26 = v7;
  return MEMORY[0x18D75B4AC](&v17, a3, &type metadata for ContentMarginModifier, a4);
}

uint64_t View.contentMargins(_:for:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v5 = *a1;
  v6 = static Edge.Set.all.getter();
  static Edge.Set.all.getter();
  OptionalEdgeInsets.init(_:edges:)();
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v19;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v14 = v23;
  LOBYTE(v16) = v6;
  v17 = v7;
  LOBYTE(v18) = v8;
  v19 = v9;
  LOBYTE(v20) = v10;
  v21 = v11;
  LOBYTE(v22) = v12;
  v23 = v13;
  v24 = v14;
  v25 = v5;
  return MEMORY[0x18D75B4AC](&v16, a2, &type metadata for ContentMarginModifier, a3);
}

uint64_t specialized static ContentMarginProxy.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;

  v2 = *((_BYTE *)a1 + 8);
  v3 = a1[2];
  v4 = *((_BYTE *)a1 + 24);
  v5 = a1[4];
  v6 = *((_BYTE *)a1 + 40);
  v7 = a1[6];
  v8 = *((_BYTE *)a1 + 56);
  v66 = a1[8];
  v65 = *((_BYTE *)a1 + 72);
  v64 = a1[10];
  v63 = *((_BYTE *)a1 + 88);
  v62 = a1[12];
  v61 = *((_BYTE *)a1 + 104);
  v60 = a1[14];
  v59 = *((_BYTE *)a1 + 120);
  v50 = a1[16];
  v49 = *((_BYTE *)a1 + 136);
  v48 = a1[18];
  v47 = *((_BYTE *)a1 + 152);
  v46 = a1[20];
  v45 = *((_BYTE *)a1 + 168);
  v44 = a1[22];
  v43 = *((_BYTE *)a1 + 184);
  v36 = a1[24];
  v35 = *((_BYTE *)a1 + 200);
  v34 = a1[26];
  v33 = *((_BYTE *)a1 + 216);
  v32 = a1[28];
  v75 = *a1;
  v29 = *((_BYTE *)a1 + 232);
  v76 = v2;
  v30 = a1[30];
  v31 = *((_BYTE *)a1 + 248);
  v77 = v3;
  v9 = *a2;
  v78 = v4;
  v10 = *((_BYTE *)a2 + 8);
  v79 = v5;
  v11 = a2[2];
  v80 = v6;
  v12 = *((_BYTE *)a2 + 24);
  v81 = v7;
  v13 = a2[4];
  v82 = v8;
  v14 = *((_BYTE *)a2 + 40);
  v67 = v9;
  v15 = a2[6];
  v68 = v10;
  v16 = *((_BYTE *)a2 + 56);
  v69 = v11;
  v57 = a2[8];
  v70 = v12;
  v58 = *((_BYTE *)a2 + 72);
  v71 = v13;
  v56 = a2[10];
  v72 = v14;
  v53 = *((_BYTE *)a2 + 88);
  v73 = v15;
  v54 = a2[12];
  v74 = v16;
  v55 = *((_BYTE *)a2 + 104);
  v52 = a2[14];
  v51 = *((_BYTE *)a2 + 120);
  v37 = a2[16];
  v38 = *((_BYTE *)a2 + 136);
  v39 = a2[18];
  v40 = *((_BYTE *)a2 + 152);
  v41 = a2[20];
  v42 = *((_BYTE *)a2 + 168);
  v17 = a2[22];
  v18 = *((_BYTE *)a2 + 184);
  v19 = a2[24];
  v20 = *((_BYTE *)a2 + 200);
  v21 = a2[26];
  v22 = *((_BYTE *)a2 + 216);
  v23 = a2[28];
  v24 = *((_BYTE *)a2 + 232);
  v25 = a2[30];
  v26 = *((_BYTE *)a2 + 248);
  if ((MEMORY[0x18D7593E8](&v75, &v67) & 1) == 0)
    goto LABEL_5;
  v75 = v66;
  v76 = v65;
  v77 = v64;
  v78 = v63;
  v79 = v62;
  v80 = v61;
  v81 = v60;
  v82 = v59;
  v67 = v57;
  v68 = v58;
  v69 = v56;
  v70 = v53;
  v71 = v54;
  v72 = v55;
  v73 = v52;
  v74 = v51;
  if ((MEMORY[0x18D7593E8](&v75, &v67) & 1) == 0)
    goto LABEL_5;
  v75 = v50;
  v76 = v49;
  v77 = v48;
  v78 = v47;
  v79 = v46;
  v80 = v45;
  v81 = v44;
  v82 = v43;
  v67 = v37;
  v68 = v38;
  v69 = v39;
  v70 = v40;
  v71 = v41;
  v72 = v42;
  v73 = v17;
  v74 = v18;
  if ((MEMORY[0x18D7593E8](&v75, &v67) & 1) != 0)
  {
    v75 = v36;
    v76 = v35;
    v77 = v34;
    v78 = v33;
    v79 = v32;
    v80 = v29;
    v81 = v30;
    v82 = v31;
    v67 = v19;
    v68 = v20;
    v69 = v21;
    v70 = v22;
    v71 = v23;
    v72 = v24;
    v73 = v25;
    v74 = v26;
    v27 = MEMORY[0x18D7593E8](&v75, &v67);
  }
  else
  {
LABEL_5:
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t sub_1872408D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ContentMarginModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t getEnumTagSinglePayload for ContentMarginModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 65);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMarginModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_BYTE *)(result + 65) = a2 + 3;
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.ToolbarMarginKey()
{
  return &unk_1E1AC3570;
}

void *type metadata accessor for EnvironmentValues.ScrollIndicatorContentMarginKey()
{
  return &unk_1E1AC3E80;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ScrollContentContentMarginKey()
{
  return &type metadata for EnvironmentValues.ScrollContentContentMarginKey;
}

void *type metadata accessor for EnvironmentValues.AutomaticContentMarginKey()
{
  return &unk_1E1AC3AE8;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ContentMarginModifier()
{
  return &protocol witness table for ContentMarginModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContentMarginModifier()
{
  return &protocol witness table for ContentMarginModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetContentMarginModifier()
{
  return &protocol witness table for ResetContentMarginModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetContentMarginModifier()
{
  return &protocol witness table for ResetContentMarginModifier;
}

_BYTE *specialized static ContentMarginModifier.makeEnvironment(modifier:environment:)()
{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  if (*result)
    __asm { BR              X10 }
  return result;
}

uint64_t specialized static ResetContentMarginModifier.makeEnvironment(modifier:environment:)()
{
  uint64_t result;
  uint64_t v1;

  result = AGGraphGetValue();
  v1 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResetContentMarginModifier and conformance ResetContentMarginModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResetContentMarginModifier and conformance ResetContentMarginModifier;
  if (!lazy protocol witness table cache variable for type ResetContentMarginModifier and conformance ResetContentMarginModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResetContentMarginModifier, &type metadata for ResetContentMarginModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetContentMarginModifier and conformance ResetContentMarginModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentMarginModifier and conformance ContentMarginModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentMarginModifier and conformance ContentMarginModifier;
  if (!lazy protocol witness table cache variable for type ContentMarginModifier and conformance ContentMarginModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentMarginModifier, &type metadata for ContentMarginModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentMarginModifier and conformance ContentMarginModifier);
  }
  return result;
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance SectionIndexLabelKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 16) = xmmword_187C10D10;
  return result;
}

void static SectionIndexTitleKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void View.listSectionIndexTitle(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  View.listSectionIndexTitle(_:)();
}

void View.listSectionIndexTitle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t destroy for SectionIndexLabel(uint64_t *a1)
{
  return outlined consume of SectionIndexLabel(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for SectionIndexLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of SectionIndexLabel(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for SectionIndexLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of SectionIndexLabel(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of SectionIndexLabel(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for SectionIndexLabel(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of SectionIndexLabel(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionIndexLabel(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionIndexLabel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for SectionIndexLabel(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for SectionIndexLabel(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for SectionIndexLabel(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for SectionIndexLabel()
{
  return &type metadata for SectionIndexLabel;
}

ValueMetadata *type metadata accessor for SectionIndexLabelKey()
{
  return &type metadata for SectionIndexLabelKey;
}

ValueMetadata *type metadata accessor for SectionIndexTitleKey()
{
  return &type metadata for SectionIndexTitleKey;
}

uint64_t sub_187241A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<SectionIndexTitleKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<SectionIndexTitleKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<SectionIndexTitleKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<SectionIndexTitleKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<SectionIndexTitleKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187241B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _TraitWritingModifier<SectionIndexTitleKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SectionIndexTitleKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t View.disclosureGroupStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DisclosureGroupStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for DisclosureGroupStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DisclosureGroupStyleModifier);
}

uint64_t DisclosureGroupStyleConfiguration.isExpanded.getter()
{
  uint64_t v1;

  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

_QWORD *key path getter for DisclosureGroupStyleConfiguration.isExpanded : DisclosureGroupStyleConfiguration@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  type metadata accessor for Binding<Bool>();
  result = MEMORY[0x18D75B9C8](&v3);
  *a1 = v3;
  return result;
}

uint64_t key path setter for DisclosureGroupStyleConfiguration.isExpanded : DisclosureGroupStyleConfiguration()
{
  swift_retain_n();
  swift_retain_n();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release_n();
  return swift_release_n();
}

uint64_t DisclosureGroupStyleConfiguration.isExpanded.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

void (*DisclosureGroupStyleConfiguration.isExpanded.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = v1[1];
  v3[3] = *v1;
  v3[4] = v5;
  v6 = *((_BYTE *)v1 + 16);
  *v3 = v4;
  v3[1] = v5;
  *((_BYTE *)v3 + 16) = v6;
  type metadata accessor for Binding<Bool>();
  v8 = v7;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](v8);
  return ToggleStyleConfiguration.isOn.modify;
}

uint64_t DisclosureGroupStyleConfiguration.$isExpanded.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  return v1;
}

unint64_t instantiation function for generic protocol witness table for DisclosureGroupStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleConfiguration.Label, &type metadata for DisclosureGroupStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleConfiguration.Label, &type metadata for DisclosureGroupStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in DisclosureGroupStyleConfiguration.Label()
{
  return &protocol witness table for DisclosureGroupStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for DisclosureGroupStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleConfiguration.Content, &type metadata for DisclosureGroupStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleConfiguration.Content, &type metadata for DisclosureGroupStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in DisclosureGroupStyleConfiguration.Content()
{
  return &protocol witness table for DisclosureGroupStyleConfiguration.Content;
}

uint64_t dispatch thunk of DisclosureGroupStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for DisclosureGroupStyleConfiguration()
{
  return &type metadata for DisclosureGroupStyleConfiguration;
}

ValueMetadata *type metadata accessor for DisclosureGroupStyleConfiguration.Label()
{
  return &type metadata for DisclosureGroupStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for DisclosureGroupStyleConfiguration.Content()
{
  return &type metadata for DisclosureGroupStyleConfiguration.Content;
}

uint64_t sub_187242064(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for DisclosureGroupStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for ResolvedDisclosureGroupStyle()
{
  return &type metadata for ResolvedDisclosureGroupStyle;
}

uint64_t getEnumTagSinglePayload for DisclosureGroupStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187242184 + 4 * byte_187C18280[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for DisclosureGroupStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in DisclosureGroupStyleModifier<A>()
{
  return &protocol witness table for DisclosureGroupStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in DisclosureGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedDisclosureGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedDisclosureGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = 1;
  swift_retain();
  return swift_retain();
}

uint64_t DisclosureGroupStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(char *, uint64_t);
  _QWORD v23[2];
  char v24;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v23[-1] - v15;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_BYTE *)(a1 + 16);
  v23[0] = *(_QWORD *)a1;
  v23[1] = v17;
  v24 = v18;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, double))(v5 + 24))(v23, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for DisclosureGroupStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureGroupStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedDisclosureGroupStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle> and conformance DisclosureGroupStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>, (uint64_t)&protocol conformance descriptor for DisclosureGroupStyleModifier<A>);
}

void type metadata accessor for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle();
    v4 = type metadata accessor for DisclosureGroupStyleModifier(a1, (uint64_t)&type metadata for AutomaticDisclosureGroupStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticDisclosureGroupStyle, &type metadata for AutomaticDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticDisclosureGroupStyle and conformance AutomaticDisclosureGroupStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedDisclosureGroupStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedDisclosureGroupStyle, &type metadata for ResolvedDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedDisclosureGroupStyle, &type metadata for ResolvedDisclosureGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1872426FC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for DisclosureGroup<A, B>);
}

uint64_t sub_187242728()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t EnvironmentValues.isSceneCaptured.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>, (uint64_t)&unk_1E1AD43D0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup);
  lazy protocol witness table accessor for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)();
    swift_release_n();
  }
  else
  {
    PropertyList.valueWithSecondaryLookup<A>(_:)();
  }
  swift_release_n();
  return v3;
}

unint64_t lazy protocol witness table accessor for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>;
  if (!lazy protocol witness table cache variable for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>, (uint64_t)&unk_1E1AD43D0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UITraitBridgedEnvironmentPropertyKeyLookup<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.isSceneCaptured.modify(_QWORD *a1))()
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  v4 = *(_QWORD *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey>, (uint64_t)&unk_1E1AD43D0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup);
  lazy protocol witness table accessor for type UITraitBridgedEnvironmentPropertyKeyLookup<SceneCaptureStateKey> and conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>();
  swift_retain_n();
  if (v4)
  {
    swift_retain_n();
    PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)();
    swift_release_n();
  }
  else
  {
    PropertyList.valueWithSecondaryLookup<A>(_:)();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.isSceneCaptured.modify;
}

uint64_t EnvironmentValues.isSceneCaptured.modify()
{
  return specialized EnvironmentValues.setBridgedValue<A>(value:for:)();
}

id protocol witness for static UITraitBridgedEnvironmentKey.read(from:) in conformance SceneCaptureStateKey@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, sel__swiftui_sceneIsCaptured);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t specialized EnvironmentValues.setBridgedValue<A>(value:for:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey);
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v2 = (char *)v10;
  v3 = *(_QWORD *)(v10 + 16);
  if (v3)
  {
    v4 = 32;
    v5 = *(_QWORD *)(v10 + 16);
    while (*(_UNKNOWN **)(v10 + v4) != &unk_1E1AD43D0)
    {
      v4 += 16;
      if (!--v5)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 1, (char *)v10);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = &unk_1E1AD43D0;
    *((_QWORD *)v8 + 5) = &protocol witness table for SceneCaptureStateKey;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>, (uint64_t)&type metadata for BridgedEnvironmentKeysKey, (uint64_t)&protocol witness table for BridgedEnvironmentKeysKey);
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    if (v1)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneCaptureStateKey>, (uint64_t)&unk_1E1AD43D0, (uint64_t)&protocol witness table for SceneCaptureStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneCaptureStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneCaptureStateKey>, (uint64_t)&unk_1E1AD43D0, (uint64_t)&protocol witness table for SceneCaptureStateKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_187242DE8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isSceneCaptured.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187242E24()
{
  return specialized EnvironmentValues.setBridgedValue<A>(value:for:)();
}

void *type metadata accessor for SceneCaptureStateKey()
{
  return &unk_1E1AD43D0;
}

uint64_t static _ViewListOutputs.mapKitUnaryViewList<A>(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

void static DefaultFocusEvaluationPriority.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t View.defaultFocus<A>(_:_:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a6;
  v33 = a8;
  v34 = a4;
  v30 = a1;
  v31 = *(_QWORD *)(a5 - 8);
  v32 = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FocusState.Binding(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v30 - v19;
  v22 = type metadata accessor for DefaultFocusStateModifier(0, a5, a7, v21);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v30 - v26;
  v28 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v30, v16, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v12, v32, a5);
  v36 = v28;
  DefaultFocusStateModifier.init(binding:value:priority:)((uint64_t)v20, (uint64_t)v12, &v36, a5, a7, (uint64_t)v27);
  MEMORY[0x18D75B4AC](v27, v34, v22, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v22);
}

void static DefaultFocusEvaluationPriority.userInitiated.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for DefaultFocusEvaluationPriority()
{
  return &type metadata for DefaultFocusEvaluationPriority;
}

uint64_t sub_187243068(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for DefaultFocusStateModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for DefaultFocusStateModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t View.onContinuousHover(coordinateSpace:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v10[48];
  uint64_t v11;
  uint64_t v12;
  char v13;

  outlined init with copy of CoordinateSpace(a1, (uint64_t)v10);
  v11 = a2;
  v12 = a3;
  v13 = 0;
  swift_retain();
  MEMORY[0x18D75B4AC](v10, a4, &type metadata for SpatialHoverRegionModifier, a5);
  return outlined destroy of SpatialHoverRegionModifier((uint64_t)v10);
}

uint64_t outlined destroy of SpatialHoverRegionModifier(uint64_t a1)
{
  destroy for SpatialHoverRegionModifier(a1);
  return a1;
}

uint64_t View.onContinuousHover<A>(coordinateSpace:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v12[8];
  char v13;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a7 + 8))(v12, a5, a7);
  v12[6] = a2;
  v12[7] = a3;
  v13 = 0;
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a4, &type metadata for SpatialHoverRegionModifier, a6);
  return outlined destroy of SpatialHoverRegionModifier((uint64_t)v12);
}

uint64_t static HoverPhase.== infix(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  BOOL v6;
  char v7;

  v6 = *(double *)&a1 == *(double *)&a4;
  if (*(double *)&a2 != *(double *)&a5)
    v6 = 0;
  if (((a3 | a6) & 1) != 0)
    v7 = a3 & a6;
  else
    v7 = v6;
  return v7 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverPhase(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  double v6;
  _BOOL4 v7;

  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 16);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
  {
    v6 = *(double *)(a1 + 8);
    v7 = *(double *)a1 == *(double *)a2;
    return v6 == *(double *)(a2 + 8) && v7;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HoverPhase(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for HoverPhase(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for HoverPhase(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

uint64_t sub_1872432EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for SpatialHoverRegionModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187243340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for SpatialHoverRegionModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for HoverCallback()
{
  return outlined consume of HoverCallback();
}

uint64_t assignWithCopy for HoverCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t assignWithTake for HoverCallback(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverCallback(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverCallback(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverCallback()
{
  return &type metadata for HoverCallback;
}

uint64_t destroy for SpatialHoverRegionModifier(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return outlined consume of HoverCallback();
}

uint64_t initializeWithCopy for SpatialHoverRegionModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (*(_BYTE *)(a2 + 40))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 0;
  }
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_BYTE *)(a2 + 64);
  outlined copy of HoverCallback();
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v8;
  return a1;
}

uint64_t assignWithCopy for SpatialHoverRegionModifier(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    if (*((_BYTE *)a2 + 40))
    {
      v4 = *a2;
      v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  v7 = *((_QWORD *)a2 + 6);
  v8 = *((_QWORD *)a2 + 7);
  v9 = *((_BYTE *)a2 + 64);
  outlined copy of HoverCallback();
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t assignWithTake for SpatialHoverRegionModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;

  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v5 = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v5;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialHoverRegionModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialHoverRegionModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialHoverRegionModifier()
{
  return &type metadata for SpatialHoverRegionModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SpatialHoverRegionModifier()
{
  return &protocol witness table for SpatialHoverRegionModifier;
}

double static SpatialHoverRegionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  unint64_t v29;
  double v30;
  uint64_t v31;
  int v32;
  double result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int OffsetAttribute2;
  uint64_t v40;
  double *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v43 = *a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v19 = *(_DWORD *)(a2 + 76);
  v20 = *(_DWORD *)(a2 + 80);
  v55 = *(_QWORD *)a2;
  v21 = v6;
  LODWORD(v56) = v6;
  v57 = v7;
  v58 = v9;
  v59 = v8;
  v51 = v10;
  v52 = v8;
  v60 = v10;
  v61 = v11;
  v49 = v16;
  v50 = v11;
  v22 = v12;
  v62 = v12;
  v63 = v13;
  v64 = v15;
  v65 = v14;
  v44 = v14;
  v45 = v20;
  v66 = v16;
  v67 = v17;
  v47 = v18;
  v48 = v17;
  v68 = v18;
  v46 = v19;
  v69 = v19;
  v70 = v20;
  a3(&v53);
  type metadata accessor for ViewGraph();
  v23 = MEMORY[0x18D75C5F8]() + 200;
  swift_beginAccess();
  v24 = MEMORY[0x18D760234](v23);
  swift_release();
  if (v24)
  {
    v42 = v9;
    swift_getObjectType();
    v25 = swift_conformsToProtocol2();
    if (v25)
      v26 = v25;
    else
      v26 = 0;
    if (v25)
      v27 = v24;
    else
      v27 = 0;
    if (v27)
    {
      v41 = a4;
      ObjectType = swift_getObjectType();
      v29 = type metadata accessor for EventGraphHost();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(v26 + 8)
                                                                                                 + 16))(&v55, v29, v29, ObjectType);
      swift_unknownObjectRelease();
      if (v55)
      {
        v30 = v56;
        v31 = swift_getObjectType();
        (*(void (**)(uint64_t, double))(*(_QWORD *)&v30 + 8))(v31, COERCE_DOUBLE(*(_QWORD *)&v30));
        swift_unknownObjectRelease();
        v55 = v13;
        LODWORD(v56) = v15;
        if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
        {
          v55 = v5;
          LODWORD(v56) = v21;
          v57 = v7;
          v58 = v42;
          v59 = v52;
          v60 = v51;
          v61 = v50;
          v62 = v22;
          v63 = v13;
          v64 = v15;
          v65 = v44;
          v66 = v49;
          v67 = v48;
          v68 = v47;
          v69 = v46;
          v70 = v45;
          type metadata accessor for HoverResponder();
          swift_allocObject();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v40 = HoverResponder.init(inputs:)();
          LODWORD(v55) = v43;
          type metadata accessor for _GraphValue<SpatialHoverRegionModifier>();
          swift_retain();
          _GraphValue.value.getter();
          OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
          LODWORD(v55) = v43;
          _GraphValue.value.getter();
          v38 = AGGraphCreateOffsetAttribute2();
          v55 = v53;
          v56 = v54;
          v37 = _ViewOutputs.viewResponders()();
          v55 = v5;
          LODWORD(v56) = v21;
          v57 = v7;
          v58 = v42;
          v59 = v52;
          v60 = v51;
          v61 = v50;
          v62 = v22;
          v63 = v13;
          v64 = v15;
          v65 = v44;
          v66 = v49;
          v67 = v48;
          v68 = v47;
          v69 = v46;
          v70 = v45;
          v36 = _ViewInputs.animatedPosition()();
          v55 = v5;
          LODWORD(v56) = v21;
          v57 = v7;
          v58 = v42;
          v59 = v52;
          v60 = v51;
          v61 = v50;
          v62 = v22;
          v63 = v13;
          v64 = v15;
          v65 = v44;
          v66 = v49;
          v67 = v48;
          v68 = v47;
          v69 = v46;
          v70 = v45;
          v35 = _ViewInputs.transform.getter();
          v55 = v5;
          LODWORD(v56) = v21;
          v57 = v7;
          v58 = v42;
          v59 = v52;
          v60 = v51;
          v61 = v50;
          v62 = v22;
          v63 = v13;
          v64 = v15;
          v65 = v44;
          v66 = v49;
          v67 = v48;
          v68 = v47;
          v69 = v46;
          v70 = v45;
          v34 = _ViewInputs.animatedSize()();
          v55 = v5;
          LODWORD(v56) = v21;
          v57 = v7;
          v58 = v42;
          v59 = v52;
          v60 = v51;
          v61 = v50;
          v62 = v22;
          v63 = v13;
          v64 = v15;
          v65 = v44;
          v66 = v49;
          v67 = v48;
          v68 = v47;
          v69 = v46;
          v70 = v45;
          swift_getKeyPath();
          v32 = _ViewInputs.mapEnvironment<A>(_:)();
          swift_release();
          LODWORD(v56) = v38;
          BYTE1(v63) = 1;
          swift_release();
          v55 = v40;
          HIDWORD(v63) = OffsetAttribute2;
          v64 = v37;
          v65 = v36;
          v66 = v35;
          v67 = v34;
          v68 = v32;
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          type metadata accessor for [ViewResponder]();
          lazy protocol witness table accessor for type HoverResponderChild and conformance HoverResponderChild();
          Attribute.init<A>(body:value:flags:update:)();
          outlined destroy of HoverResponderChild((uint64_t)&v55);
          LOBYTE(v55) = 0;
          _ViewOutputs.subscript.setter();
        }
        swift_release();
      }
      a4 = v41;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  *(_QWORD *)a4 = v53;
  result = v54;
  a4[1] = v54;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance SpatialHoverRegionModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t type metadata accessor for EventGraphHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EventGraphHost;
  if (!lazy cache variable for type metadata for EventGraphHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  }
  return result;
}

void type metadata accessor for _GraphValue<SpatialHoverRegionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<SpatialHoverRegionModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SpatialHoverRegionModifier>);
  }
}

uint64_t Scene.windowManagerRole(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

void static WindowManagerRole.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void View.windowDockBehavior(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowBehavior.enabled.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowInteractionBehavior()
{
  return &type metadata for WindowInteractionBehavior;
}

ValueMetadata *type metadata accessor for WindowManagerRole()
{
  return &type metadata for WindowManagerRole;
}

ValueMetadata *type metadata accessor for WindowBehavior()
{
  return &type metadata for WindowBehavior;
}

ValueMetadata *type metadata accessor for WindowFullScreenBehavior()
{
  return &type metadata for WindowFullScreenBehavior;
}

ValueMetadata *type metadata accessor for WindowStageManagerBehavior()
{
  return &type metadata for WindowStageManagerBehavior;
}

ValueMetadata *type metadata accessor for WindowManagerRole.Guts()
{
  return &type metadata for WindowManagerRole.Guts;
}

uint64_t storeEnumTagSinglePayload for WindowInteractionBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187243EF4 + 4 * byte_187C18615[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187243F28 + 4 * byte_187C18610[v4]))();
}

uint64_t sub_187243F28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187243F30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187243F38);
  return result;
}

uint64_t sub_187243F44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187243F4CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187243F50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187243F58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WindowInteractionBehavior.Guts()
{
  return &type metadata for WindowInteractionBehavior.Guts;
}

unint64_t lazy protocol witness table accessor for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts;
  if (!lazy protocol witness table cache variable for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowInteractionBehavior.Guts, &type metadata for WindowInteractionBehavior.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowInteractionBehavior.Guts and conformance WindowInteractionBehavior.Guts);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts;
  if (!lazy protocol witness table cache variable for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowManagerRole.Guts, &type metadata for WindowManagerRole.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowManagerRole.Guts and conformance WindowManagerRole.Guts);
  }
  return result;
}

void View.windowMinimizeBehavior(_:)()
{
  View.windowDockBehavior(_:)();
}

void View.windowDismissBehavior(_:)()
{
  View.windowDockBehavior(_:)();
}

{
  View.windowDockBehavior(_:)();
}

void View.windowFullScreenBehavior(_:)()
{
  View.windowDockBehavior(_:)();
}

{
  View.windowDockBehavior(_:)();
}

void View.windowResizeBehavior(_:)()
{
  View.windowDockBehavior(_:)();
}

{
  View.windowDockBehavior(_:)();
}

void View.windowStageManagerBehavior(_:)()
{
  View.windowDockBehavior(_:)();
}

void static WindowInteractionBehavior.automatic.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowInteractionBehavior.disabled.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowInteractionBehavior.enabled.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowManagerRole.principal.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowManagerRole.associated.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowBehavior.automatic.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowBehavior.disabled.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowFullScreenBehavior.automatic.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowFullScreenBehavior.enabled.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowFullScreenBehavior.disabled.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowFullScreenBehavior.associated.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowStageManagerBehavior.automatic.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowStageManagerBehavior.primary.getter()
{
  static WindowBehavior.enabled.getter();
}

void static WindowStageManagerBehavior.auxiliary.getter()
{
  static WindowBehavior.enabled.getter();
}

uint64_t static LabeledContentStyle<>.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t AutomaticLabeledContentStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t AutomaticLabeledContentStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  int v6;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  KeyPath = swift_getKeyPath();
  outlined copy of Environment<Bool>.Content(v3, v4);
  v6 = specialized Environment.wrappedValue.getter(v3, v4);
  result = outlined consume of Environment<Bool>.Content(v3, v4);
  *(_BYTE *)a1 = v6 == 2;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_WORD *)(a1 + 16) = 512;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

uint64_t key path getter for EnvironmentValues.labelsVisibility : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.labelsVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187244248@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.labelsVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.labelsVisibility : EnvironmentValues()
{
  return EnvironmentValues.labelsVisibility.setter();
}

uint64_t sub_1872442A4()
{
  return EnvironmentValues.labelsVisibility.setter();
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in AutomaticLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AutomaticLabeledContentStyle()
{
  return &type metadata for AutomaticLabeledContentStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFo()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Col;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Col)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _L();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>,();
    v3[1] = &protocol witness table for _LabeledContentStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Col);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _L()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormSt)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _La, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormSt);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyl, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
}

uint64_t type metadata accessor for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for LabeledContentStyleConfiguration.Label?, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelVisibilityConfigured, &type metadata for LabelVisibilityConfigured);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelVisibilityConfigured, &type metadata for LabelVisibilityConfigured);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelVisibilityConfigured, &type metadata for LabelVisibilityConfigured);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelVisibilityConfigured, &type metadata for LabelVisibilityConfigured);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelVisibilityConfigured, &type metadata for LabelVisibilityConfigured);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _LabeledContentStyleModifier<AutomaticLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle, (uint64_t)&type metadata for AutomaticLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticLabeledContentStyle, &type metadata for AutomaticLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticLabeledContentStyle and conformance AutomaticLabeledContentStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout, (uint64_t)&type metadata for LabeledContentUsesLegacyLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>();
    lazy protocol witness table accessor for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout;
  if (!lazy protocol witness table cache variable for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledContentUsesLegacyLayout, &type metadata for LabeledContentUsesLegacyLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeadingTrailingLabeledContentStyle_Phone, &type metadata for LeadingTrailingLabeledContentStyle_Phone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone and conformance LeadingTrailingLabeledContentStyle_Phone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout, (uint64_t)&type metadata for LabeledContentUsesLegacyLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6010], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<LabeledContentUsesLegacyLayout> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type LabeledContentUsesLegacyLayout and conformance LabeledContentUsesLegacyLayout();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeadingTrailingLabeledContentStyle, &type metadata for LeadingTrailingLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle and conformance LeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for LeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ColumnsFormStyleContext>, (uint64_t)&type metadata for ColumnsFormStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle, (uint64_t)&type metadata for ColumnarLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ColumnsFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ColumnsFormStyleContext>, (uint64_t)&type metadata for ColumnsFormStyleContext);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnarLabeledContentStyle, &type metadata for ColumnarLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnarLabeledContentStyle and conformance ColumnarLabeledContentStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>()
{
  uint64_t result;
  uint64_t v1;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>)
  {
    v1 = MEMORY[0x1E0CE6840];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle, (uint64_t)&type metadata for AccessibilityLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, v1);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabeledContentStyle, &type metadata for AccessibilityLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentStyle and conformance AccessibilityLabeledContentStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>,()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleCon;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleCon)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _La, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContent();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleCon);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContent()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledC;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledC)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<Colum(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledC);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>, StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>, StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>, ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label>();
    v2[0] = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label? and conformance <A> A?();
    v2[1] = &protocol witness table for LabeledContentStyleConfiguration.Label;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<LabelVisibilityConfigured, LabeledContentStyleConfiguration.Label?, LabeledContentStyleConfiguration.Label> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for LabeledContentStyleConfiguration.Label?, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = &protocol witness table for LabeledContentStyleConfiguration.Label;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>();
    v2[0] = &protocol witness table for LabeledContentStyleConfiguration.Content;
    v2[1] = &protocol witness table for _LabeledContentStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Content, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<LabeledContentUsesLegacyLayout>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier>();
    v2[0] = &protocol witness table for _LabeledContentStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle_Phone>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<LabeledContentUsesLegacyLayout, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for _LabeledContentStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for _LabeledContentStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, _LabeledContentStyleModifier<LeadingTrailingLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for _LabeledContentStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ColumnsFormStyleContext>, _LabeledContentStyleModifier<ColumnarLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for _LabeledContentStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, _LabeledContentStyleModifier<AccessibilityLabeledContentStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t (*_IndefiniteSymbolEffectModifier.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IndefiniteSymbolEffectModifier.options.getter@<X0>(uint64_t a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.options.getter(type metadata accessor for _IndefiniteSymbolEffectModifier, a1);
}

uint64_t type metadata accessor for _IndefiniteSymbolEffectModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _IndefiniteSymbolEffectModifier);
}

uint64_t _IndefiniteSymbolEffectModifier.options.setter(uint64_t a1)
{
  return _IndefiniteSymbolEffectModifier.options.setter(a1, type metadata accessor for _IndefiniteSymbolEffectModifier);
}

uint64_t (*_IndefiniteSymbolEffectModifier.options.modify())(_QWORD)
{
  type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IndefiniteSymbolEffectModifier.isActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for _IndefiniteSymbolEffectModifier(0) + 24));
}

uint64_t _IndefiniteSymbolEffectModifier.isActive.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*_IndefiniteSymbolEffectModifier.isActive.modify())(_QWORD)
{
  type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _IndefiniteSymbolEffectModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_IndefiniteSymbolEffectModifier>, type metadata accessor for _IndefiniteSymbolEffectModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

double _IndefiniteSymbolEffectModifier.EffectEnvironment.value.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  _OWORD *v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v22 = a1;
  v23 = a2;
  v2 = type metadata accessor for SymbolEffectOptions();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymbolEffectConfiguration();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = (_QWORD *)AGGraphGetValue();
  v13 = Value[1];
  *(_QWORD *)&v29 = *Value;
  *((_QWORD *)&v29 + 1) = v13;
  v14 = type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  if (*(_BYTE *)(AGGraphGetValue() + *(int *)(v14 + 24)) == 1)
  {
    v15 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v15, v7);
    v16 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v16 + *(int *)(v14 + 20), v2);
    swift_retain();
    swift_retain();
    _SymbolEffect.init(config:options:)((uint64_t)v11, (uint64_t)v6, v24);
    v17 = v25;
    v18 = v26;
    if ((~(_DWORD)v25 & 0xFFFFFFFE) != 0 || (v26 & 0xFEFE) != 2)
    {
      v20 = v24[0];
      v19 = v24[1];
      BYTE4(v27) &= 1u;
      v28 &= 1u;
      EnvironmentValues.appendSymbolEffect(_:for:)();
      outlined consume of SymbolEffect?(v20, v19, v17, v18);
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  result = *(double *)&v29;
  *v23 = v29;
  return result;
}

uint64_t _SymbolEffect.init(config:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  char v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  unsigned int v80;
  int v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t result;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t);
  char v93;
  int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t);
  char v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(uint64_t);
  char v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  char *v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  unsigned int v238;
  unsigned int v239;
  unsigned __int8 v240;
  char *v241;
  uint64_t v242;
  unsigned __int8 v243;
  unsigned int v244;
  unsigned __int8 v245;
  char v246;

  v233 = a2;
  v235 = a3;
  v202 = type metadata accessor for BreatheSymbolEffect();
  v199 = *(_QWORD *)(v202 - 8);
  MEMORY[0x1E0C80A78](v202, v4);
  v197 = (char *)&v196 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v198 = (char *)&v196 - v8;
  v207 = type metadata accessor for RotateSymbolEffect();
  v206 = *(_QWORD *)(v207 - 8);
  MEMORY[0x1E0C80A78](v207, v9);
  v201 = (char *)&v196 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v205 = (char *)&v196 - v13;
  v211 = type metadata accessor for WiggleSymbolEffect();
  v209 = *(_QWORD *)(v211 - 8);
  MEMORY[0x1E0C80A78](v211, v14);
  v204 = (char *)&v196 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v210 = (char *)&v196 - v18;
  v215 = type metadata accessor for DisappearSymbolEffect();
  v213 = *(_QWORD *)(v215 - 8);
  MEMORY[0x1E0C80A78](v215, v19);
  v212 = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v214 = (char *)&v196 - v23;
  v219 = type metadata accessor for AppearSymbolEffect();
  v217 = *(_QWORD *)(v219 - 8);
  MEMORY[0x1E0C80A78](v219, v24);
  v216 = (char *)&v196 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v218 = (char *)&v196 - v28;
  v223 = type metadata accessor for ScaleSymbolEffect();
  v221 = *(_QWORD *)(v223 - 8);
  MEMORY[0x1E0C80A78](v223, v29);
  v220 = (char *)&v196 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v222 = (char *)&v196 - v33;
  v34 = type metadata accessor for VariableColorSymbolEffect();
  v226 = *(_QWORD *)(v34 - 8);
  v227 = v34;
  MEMORY[0x1E0C80A78](v34, v35);
  v224 = (char *)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v225 = (char *)&v196 - v39;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v40, v41);
  v200 = (char *)&v196 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v203 = (char *)&v196 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v231 = (char *)&v196 - v48;
  v228 = type metadata accessor for BounceSymbolEffect();
  v230 = *(_QWORD *)(v228 - 8);
  MEMORY[0x1E0C80A78](v228, v49);
  *(_QWORD *)&v232 = (char *)&v196 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v52);
  v229 = (char *)&v196 - v53;
  v236 = type metadata accessor for SymbolEffectOptions();
  v54 = *(_QWORD *)(v236 - 8);
  MEMORY[0x1E0C80A78](v236, v55);
  v57 = (char *)&v196 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for PulseSymbolEffect();
  v59 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v60);
  v62 = (char *)&v196 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v63, v64);
  v66 = (char *)&v196 - v65;
  v67 = type metadata accessor for SymbolEffectConfiguration.Effect();
  v68 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v69);
  v71 = (char *)&v196 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = a1;
  SymbolEffectConfiguration.effect.getter();
  v72 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v71, v67);
  if (v72 == *MEMORY[0x1E0CE8628])
  {
    (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v66, v71, v58);
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v62, v66, v58);
    v73 = PulseSymbolEffect.isLayered.getter();
    LOBYTE(v241) = (v73 == 2) | v73 & 1;
    v74 = *(void (**)(char *, uint64_t))(v59 + 8);
    v74(v62, v58);
    v75 = v241;
    v76 = v233;
    v77 = v236;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v57, v233, v236);
    _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
    *(_QWORD *)&v78 = v241;
    v232 = v78;
    v79 = v242;
    v80 = HIDWORD(v242);
    v81 = v243;
    v82 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v231 = (char *)0xF000000000000006;
    v82(v76, v77);
    v83 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v234, v83);
    result = ((uint64_t (*)(char *, uint64_t))v74)(v66, v58);
    v85 = 0;
    v86 = 0;
  }
  else
  {
    v208 = v54;
    v87 = v233;
    if (v72 == *MEMORY[0x1E0CE8640])
    {
      (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
      v88 = v228;
      (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v229, v71, v228);
      v89 = (uint64_t)v231;
      v90 = v87;
      SymbolEffectOptions.repeat.getter();
      v91 = type metadata accessor for SymbolEffectOptions.RepeatOption();
      v92 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588];
      v93 = 1;
      v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v89, 1, v91);
      outlined destroy of TaskPriority?(v89, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v92);
      if (v94 != 1)
        v93 = SymbolEffectOptions.prefersContinuous.getter();
      v96 = v229;
      v95 = v230;
      v97 = v232;
      (*(void (**)(_QWORD, char *, uint64_t))(v230 + 16))(v232, v229, v88);
      v241 = (char *)0xF000000000000006;
      _SymbolEffect.BounceConfiguration.init(_:isContinuous:trigger:)(v97, v93 & 1, (uint64_t *)&v241, (uint64_t)&v237);
      v98 = v236;
      v231 = v237;
      v99 = 0x100000000;
      if (!(_BYTE)v239)
        v99 = 0;
      v100 = v99 | v238;
      v101 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v57, v90, v236);
      _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
      *(_QWORD *)&v102 = v241;
      v232 = v102;
      v79 = v242;
      v80 = HIDWORD(v242);
      v81 = v243;
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v90, v98);
      v103 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 8))(v234, v103);
      v104 = v96;
      v75 = v100;
      result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v104, v88);
      v85 = 0;
      v86 = 0x2000;
    }
    else if (v72 == *MEMORY[0x1E0CE8620])
    {
      (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
      v106 = v225;
      v105 = v226;
      v107 = v227;
      (*(void (**)(char *, char *, uint64_t))(v226 + 32))(v225, v71, v227);
      v108 = (uint64_t)v224;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v224, v106, v107);
      v241 = (char *)0xF000000000000006;
      _SymbolEffect.VariableColorConfiguration.init(_:trigger:)(v108, (uint64_t *)&v241, (uint64_t)&v237);
      v109 = v236;
      v231 = v237;
      v75 = v238;
      v110 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v57, v87, v236);
      _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
      *(_QWORD *)&v111 = v241;
      v232 = v111;
      v79 = v242;
      v80 = HIDWORD(v242);
      v81 = v243;
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v87, v109);
      v112 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 8))(v234, v112);
      result = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v106, v107);
      v85 = 0;
      v86 = 20480;
    }
    else if (v72 == *MEMORY[0x1E0CE8630])
    {
      (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
      v113 = v221;
      v114 = v222;
      v115 = v223;
      (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v222, v71, v223);
      v116 = v220;
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v220, v114, v115);
      _SymbolEffect.ScaleConfiguration.init()();
      LODWORD(v241) = (_DWORD)v237;
      v117 = ScaleSymbolEffect.isLayered.getter();
      BYTE4(v241) = (v117 == 2) | v117 & 1;
      ScaleSymbolEffect.isUp.getter();
      _SymbolEffect.ScaleConfiguration.level.setter();
      v118 = *(void (**)(char *, uint64_t))(v113 + 8);
      v118(v116, v115);
      v119 = 0x100000000;
      if (!BYTE4(v241))
        v119 = 0;
      v231 = (char *)(v119 | v241);
      v120 = v208;
      v121 = v236;
      (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v57, v87, v236);
      _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
      *(_QWORD *)&v122 = v241;
      v232 = v122;
      v79 = v242;
      v80 = HIDWORD(v242);
      v81 = v243;
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v87, v121);
      v123 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 8))(v234, v123);
      result = ((uint64_t (*)(char *, uint64_t))v118)(v114, v115);
      v75 = 0;
      v85 = 0;
      v86 = 24576;
    }
    else
    {
      if (v72 == *MEMORY[0x1E0CE8638])
      {
        (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
        v124 = v217;
        v125 = v218;
        v126 = v219;
        (*(void (**)(char *, char *, uint64_t))(v217 + 32))(v218, v71, v219);
        v127 = v216;
        (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v216, v125, v126);
        _SymbolEffect.HiddenConfiguration.init()();
        LODWORD(v241) = (_DWORD)v237;
        BYTE5(v241) = BYTE5(v237);
        v128 = ScaleSymbolEffect.isLayered.getter();
        BYTE4(v241) = (v128 == 2) | v128 & 1;
        AppearSymbolEffect.isUp.getter();
        _SymbolEffect.HiddenConfiguration.flags.setter();
        BYTE5(v241) = 1;
        v129 = *(void (**)(char *, uint64_t))(v124 + 8);
        v129(v127, v126);
        v130 = 0x100000000;
        if (!BYTE4(v241))
          v130 = 0;
        v131 = v130 | v241;
        v132 = 0x10000000000;
        if (!BYTE5(v241))
          v132 = 0;
        v231 = (char *)(v131 | v132);
        v133 = v208;
        v134 = v236;
        (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v57, v87, v236);
        _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
        *(_QWORD *)&v135 = v241;
        v232 = v135;
        v79 = v242;
        v80 = HIDWORD(v242);
        v81 = v243;
        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v87, v134);
        v136 = type metadata accessor for SymbolEffectConfiguration();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 8))(v234, v136);
        result = ((uint64_t (*)(char *, uint64_t))v129)(v125, v126);
      }
      else
      {
        if (v72 != *MEMORY[0x1E0CE8670])
        {
          v156 = v236;
          v157 = v208;
          if (v72 != *MEMORY[0x1E0CE8660] && v72 != *MEMORY[0x1E0CE8668])
          {
            if (v72 == *MEMORY[0x1E0CE8650])
            {
              (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
              (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v210, v71, v211);
              v158 = (uint64_t)v203;
              v159 = v87;
              SymbolEffectOptions.repeat.getter();
              v160 = type metadata accessor for SymbolEffectOptions.RepeatOption();
              v161 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588];
              v162 = 1;
              v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 48))(v158, 1, v160);
              outlined destroy of TaskPriority?(v158, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v161);
              if (v163 != 1)
                v162 = SymbolEffectOptions.prefersContinuous.getter();
              v164 = v209;
              v165 = (uint64_t)v204;
              (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v204, v210, v211);
              v237 = (char *)0xF000000000000006;
              v166.n128_f64[0] = _SymbolEffect.WiggleConfiguration.init(_:isContinuous:trigger:)(v165, v162 & 1, (uint64_t *)&v237, (uint64_t)&v241);
              v75 = v242;
              v231 = v241;
              v85 = v243 | ((unint64_t)v244 << 32);
              v167 = 256;
              if (!v246)
                v167 = 0;
              v86 = v167 | v245 | 0x3000;
              v168 = v208;
              v169 = v236;
              (*(void (**)(char *, uint64_t, uint64_t, __n128))(v208 + 16))(v57, v159, v236, v166);
              _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v237);
              *(_QWORD *)&v170 = v237;
              v232 = v170;
              v79 = v238;
              v80 = v239;
              v81 = v240;
              (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v159, v169);
              v171 = type metadata accessor for SymbolEffectConfiguration();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 8))(v234, v171);
              result = (*(uint64_t (**)(char *, uint64_t))(v164 + 8))(v210, v211);
              goto LABEL_28;
            }
            if (v72 == *MEMORY[0x1E0CE8648])
            {
              (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
              (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v205, v71, v207);
              v172 = (uint64_t)v200;
              v173 = v87;
              SymbolEffectOptions.repeat.getter();
              v174 = type metadata accessor for SymbolEffectOptions.RepeatOption();
              v175 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588];
              v176 = 1;
              v177 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v174 - 8) + 48))(v172, 1, v174);
              outlined destroy of TaskPriority?(v172, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v175);
              if (v177 != 1)
                v176 = SymbolEffectOptions.prefersContinuous.getter();
              v178 = v206;
              v179 = (uint64_t)v201;
              v180 = v205;
              v181 = v207;
              (*(void (**)(char *, char *, uint64_t))(v206 + 16))(v201, v205, v207);
              v241 = (char *)0xF000000000000006;
              _SymbolEffect.RotateConfiguration.init(_:isContinuous:trigger:)(v179, v176 & 1, (uint64_t *)&v241, (uint64_t)&v237);
              v182 = v236;
              v231 = v237;
              v183 = 0x100000000;
              if (!(_BYTE)v239)
                v183 = 0;
              v75 = v183 | v238;
              v184 = v208;
              (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v57, v173, v236);
              _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
              *(_QWORD *)&v185 = v241;
              v232 = v185;
              v79 = v242;
              v80 = HIDWORD(v242);
              v81 = v243;
              (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v173, v182);
              v186 = type metadata accessor for SymbolEffectConfiguration();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 8))(v234, v186);
              result = (*(uint64_t (**)(char *, uint64_t))(v178 + 8))(v180, v181);
              v85 = 0;
              v86 = 0x4000;
              goto LABEL_28;
            }
            if (v72 == *MEMORY[0x1E0CE8658])
            {
              (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
              v187 = v199;
              v188 = v198;
              v189 = v71;
              v190 = v202;
              (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v198, v189, v202);
              v191 = (uint64_t)v197;
              (*(void (**)(char *, char *, uint64_t))(v187 + 16))(v197, v188, v190);
              v241 = (char *)0xF000000000000006;
              _SymbolEffect.BreatheConfiguration.init(_:trigger:)(v191, (uint64_t *)&v241, (uint64_t)&v237);
              v231 = v237;
              v192 = 0x100000000;
              if (!(_BYTE)v239)
                v192 = 0;
              v75 = v192 | v238;
              (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v57, v87, v156);
              _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
              *(_QWORD *)&v193 = v241;
              v232 = v193;
              v79 = v242;
              v80 = HIDWORD(v242);
              v81 = v243;
              (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v87, v156);
              v194 = type metadata accessor for SymbolEffectConfiguration();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 8))(v234, v194);
              result = (*(uint64_t (**)(char *, uint64_t))(v187 + 8))(v188, v202);
              v85 = 0;
              v86 = 4096;
              goto LABEL_28;
            }
          }
          (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v233, v236);
          v195 = type metadata accessor for SymbolEffectConfiguration();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 8))(v234, v195);
          result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v71, v67);
          v153 = 0;
          v154 = 0;
          v155 = v235;
          *v235 = 0;
          v155[1] = 0;
          v155[2] = 4294967294;
          v150 = 2;
          goto LABEL_34;
        }
        (*(void (**)(char *, uint64_t))(v68 + 96))(v71, v67);
        v137 = v213;
        v138 = v214;
        v139 = v215;
        (*(void (**)(char *, char *, uint64_t))(v213 + 32))(v214, v71, v215);
        v140 = v212;
        (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v212, v138, v139);
        _SymbolEffect.HiddenConfiguration.init()();
        LODWORD(v241) = (_DWORD)v237;
        BYTE5(v241) = BYTE5(v237);
        v141 = ScaleSymbolEffect.isLayered.getter();
        BYTE4(v241) = (v141 == 2) | v141 & 1;
        DisappearSymbolEffect.isUp.getter();
        _SymbolEffect.HiddenConfiguration.flags.setter();
        BYTE5(v241) = 1;
        v142 = *(void (**)(char *, uint64_t))(v137 + 8);
        v142(v140, v139);
        v143 = 0x100000000;
        if (!BYTE4(v241))
          v143 = 0;
        v144 = v143 | v241;
        v145 = 0x10000000000;
        if (!BYTE5(v241))
          v145 = 0;
        v231 = (char *)(v144 | v145);
        v146 = v208;
        v147 = v236;
        (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v57, v87, v236);
        _SymbolEffect.Options.init(_:)((uint64_t)v57, (uint64_t)&v241);
        *(_QWORD *)&v148 = v241;
        v232 = v148;
        v79 = v242;
        v80 = HIDWORD(v242);
        v81 = v243;
        (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v87, v147);
        v149 = type metadata accessor for SymbolEffectConfiguration();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 8))(v234, v149);
        result = ((uint64_t (*)(char *, uint64_t))v142)(v138, v139);
      }
      v75 = 0;
      v85 = 0;
      v86 = 28672;
    }
  }
LABEL_28:
  v150 = v86 | ((unint64_t)v232 << 32);
  v151 = 0x100000000;
  if (v79)
    v152 = 0x100000000;
  else
    v152 = 0;
  v153 = v152 | DWORD1(v232);
  if (!v81)
    v151 = 0;
  v154 = v151 | v80;
  v155 = v235;
  *v235 = v231;
  v155[1] = v75;
  v155[2] = v85;
LABEL_34:
  v155[3] = v150;
  v155[4] = v153;
  *((_DWORD *)v155 + 10) = v154;
  *((_BYTE *)v155 + 44) = BYTE4(v154);
  return result;
}

double protocol witness for Rule.value.getter in conformance _IndefiniteSymbolEffectModifier.EffectEnvironment@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return _IndefiniteSymbolEffectModifier.EffectEnvironment.value.getter(*(_QWORD *)(v1 + 8), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _IndefiniteSymbolEffectModifier.EffectEnvironment()
{
  lazy protocol witness table accessor for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _IndefiniteSymbolEffectModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _IndefiniteSymbolEffectModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _IndefiniteSymbolEffectModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _IndefiniteSymbolEffectModifier()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_IndefiniteSymbolEffectModifier>, type metadata accessor for _IndefiniteSymbolEffectModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t _DiscreteSymbolEffectModifier.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SymbolEffectConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _DiscreteSymbolEffectModifier.config.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SymbolEffectConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*_DiscreteSymbolEffectModifier.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DiscreteSymbolEffectModifier.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for SymbolEffectOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t _DiscreteSymbolEffectModifier.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for SymbolEffectOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*_DiscreteSymbolEffectModifier.options.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DiscreteSymbolEffectModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t _DiscreteSymbolEffectModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*_DiscreteSymbolEffectModifier.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _DiscreteSymbolEffectModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  LODWORD(v18) = *a1;
  type metadata accessor for _DiscreteSymbolEffectModifier(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v7 = _GraphValue.value.getter();
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v18 = *a2;
  LODWORD(v19) = v8;
  v20 = v9;
  v21 = *(_OWORD *)(a2 + 3);
  v22 = v10;
  LODWORD(v18) = v7;
  HIDWORD(v18) = _GraphInputs.environment.getter();
  v19 = AGMakeUniqueID();
  v16 = type metadata accessor for _DiscreteSymbolEffectModifier.EffectEnvironment(0, a3, a4, v11);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DiscreteSymbolEffectModifier<A>.EffectEnvironment, v16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E0CE3E78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v18, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v15, v16, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  return _GraphInputs.environment.setter();
}

uint64_t _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

double _DiscreteSymbolEffectModifier.EffectEnvironment.value.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t Value;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t *v37;
  uint64_t *v38;
  double result;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  uint64_t *v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  double v56[4];

  v40 = a5;
  v48 = *(_QWORD *)(a3 - 8);
  v49 = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SymbolEffectOptions();
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v44 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for SymbolEffectConfiguration();
  v11 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a3;
  v43 = a4;
  v16 = type metadata accessor for _DiscreteSymbolEffectModifier(0, a3, a4, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v40 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v40 - v27;
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(v56);
  Value = AGGraphGetValue();
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v30(v28, Value, v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v28, v41);
  v31 = *(void (**)(char *, uint64_t))(v17 + 8);
  v31(v28, v16);
  v32 = AGGraphGetValue();
  v30(v24, v32, v16);
  v33 = (uint64_t)v44;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, &v24[*(int *)(v16 + 36)], v46);
  v31(v24, v16);
  v34 = AGGraphGetValue();
  v30(v20, v34, v16);
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v47, &v20[*(int *)(v16 + 40)], v42);
  v31(v20, v16);
  AnyEquatable.init<A>(_:)();
  v50[0] = v50[1];
  _SymbolEffect.init(config:options:trigger:)((uint64_t)v14, v33, v50, v51);
  v35 = v52;
  v36 = v53;
  if ((~(_DWORD)v52 & 0xFFFFFFFE) != 0 || (v53 & 0xFEFE) != 2)
  {
    v38 = v51[0];
    v37 = v51[1];
    BYTE4(v54) &= 1u;
    v55 &= 1u;
    EnvironmentValues.appendSymbolEffect(_:for:)();
    outlined consume of SymbolEffect?((uint64_t)v38, (uint64_t)v37, v35, v36);
  }
  result = v56[0];
  *v40 = *(_OWORD *)v56;
  return result;
}

uint64_t _SymbolEffect.init(config:options:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int v60;
  char v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  int v83;
  char v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t);
  int v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t);
  int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  unsigned int v184;
  unsigned int v185;
  unsigned __int8 v186;
  uint64_t *v187;
  uint64_t v188;
  unsigned __int8 v189;
  unsigned int v190;
  unsigned __int8 v191;
  char v192;

  v181 = a2;
  v182 = a3;
  v179 = a4;
  v160 = type metadata accessor for BreatheSymbolEffect();
  v157 = *(_QWORD *)(v160 - 8);
  MEMORY[0x1E0C80A78](v160, v5);
  v155 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v156 = (char *)&v155 - v9;
  v164 = type metadata accessor for RotateSymbolEffect();
  v163 = *(_QWORD *)(v164 - 8);
  MEMORY[0x1E0C80A78](v164, v10);
  v159 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v165 = (char *)&v155 - v14;
  v167 = type metadata accessor for WiggleSymbolEffect();
  v166 = *(_QWORD *)(v167 - 8);
  MEMORY[0x1E0C80A78](v167, v15);
  v162 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v168 = (char *)&v155 - v19;
  v20 = type metadata accessor for VariableColorSymbolEffect();
  v171 = *(_QWORD *)(v20 - 8);
  v172 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v169 = (char *)&v155 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v170 = (char *)&v155 - v25;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v26, v27);
  v158 = (char *)&v155 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v161 = (char *)&v155 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v173 = (char *)&v155 - v34;
  v35 = type metadata accessor for BounceSymbolEffect();
  v175 = *(_QWORD *)(v35 - 8);
  v176 = v35;
  MEMORY[0x1E0C80A78](v35, v36);
  *(_QWORD *)&v177 = (char *)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v174 = (char *)&v155 - v40;
  v180 = type metadata accessor for SymbolEffectOptions();
  v41 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v42);
  v44 = (char *)&v155 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PulseSymbolEffect();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v155 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50, v51);
  v53 = (char *)&v155 - v52;
  v54 = type metadata accessor for SymbolEffectConfiguration.Effect();
  v55 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v56);
  v58 = (char *)&v155 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = (uint64_t *)*v182;
  v178 = a1;
  SymbolEffectConfiguration.effect.getter();
  v59 = v54;
  v60 = (*(uint64_t (**)(char *, uint64_t))(v55 + 88))(v58, v54);
  if (v60 == *MEMORY[0x1E0CE8628])
  {
    (*(void (**)(char *, uint64_t))(v55 + 96))(v58, v54);
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v53, v58, v45);
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v49, v53, v45);
    v61 = PulseSymbolEffect.isLayered.getter();
    LOBYTE(v187) = (v61 == 2) | v61 & 1;
    v62 = *(void (**)(char *, uint64_t))(v46 + 8);
    v62(v49, v45);
    v63 = v187;
    v64 = v180;
    v65 = v181;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v44, v181, v180);
    _SymbolEffect.Options.init(_:)((uint64_t)v44, (uint64_t)&v187);
    *(_QWORD *)&v66 = v187;
    v177 = v66;
    v67 = v188;
    v68 = HIDWORD(v188);
    v69 = v189;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v65, v64);
    v70 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v178, v70);
    result = ((uint64_t (*)(char *, uint64_t))v62)(v53, v45);
    v72 = v177;
    v73 = 0;
    v74 = 0;
  }
  else
  {
    v75 = (uint64_t)v44;
    v76 = v41;
    v77 = v180;
    v78 = v181;
    if (v60 == *MEMORY[0x1E0CE8640])
    {
      (*(void (**)(char *, uint64_t))(v55 + 96))(v58, v59);
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v174, v58, v176);
      v79 = (uint64_t)v173;
      v80 = v78;
      SymbolEffectOptions.repeat.getter();
      v81 = type metadata accessor for SymbolEffectOptions.RepeatOption();
      v82 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588];
      v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v79, 1, v81);
      outlined destroy of TaskPriority?(v79, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v82);
      if (v83 == 1)
        v84 = 0;
      else
        v84 = SymbolEffectOptions.prefersContinuous.getter();
      v94 = v182;
      v95 = v75;
      v97 = v174;
      v96 = v175;
      v99 = v176;
      v98 = v177;
      (*(void (**)(_QWORD, char *, uint64_t))(v175 + 16))(v177, v174, v176);
      v187 = v94;
      _SymbolEffect.BounceConfiguration.init(_:isContinuous:trigger:)(v98, v84 & 1, (uint64_t *)&v187, (uint64_t)&v183);
      v182 = v183;
      v100 = 0x100000000;
      if (!(_BYTE)v185)
        v100 = 0;
      v101 = v100 | v184;
      v102 = v76;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v95, v80, v77);
      _SymbolEffect.Options.init(_:)(v95, (uint64_t)&v187);
      *(_QWORD *)&v103 = v187;
      v177 = v103;
      v104 = v188;
      v68 = HIDWORD(v188);
      v69 = v189;
      v105 = v80;
      v63 = v101;
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v105, v77);
      v106 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v178, v106);
      v107 = v97;
      v67 = v104;
      result = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v107, v99);
      v72 = v177;
      v73 = 0;
      v74 = 0x2000;
    }
    else
    {
      if (v60 != *MEMORY[0x1E0CE8620])
      {
        v114 = v182;
        if (v60 != *MEMORY[0x1E0CE8630]
          && v60 != *MEMORY[0x1E0CE8638]
          && v60 != *MEMORY[0x1E0CE8670]
          && v60 != *MEMORY[0x1E0CE8660]
          && v60 != *MEMORY[0x1E0CE8668])
        {
          if (v60 == *MEMORY[0x1E0CE8650])
          {
            (*(void (**)(char *, uint64_t))(v55 + 96))(v58, v59);
            (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v168, v58, v167);
            v115 = (uint64_t)v161;
            SymbolEffectOptions.repeat.getter();
            v116 = type metadata accessor for SymbolEffectOptions.RepeatOption();
            v117 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588];
            v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 48))(v115, 1, v116);
            outlined destroy of TaskPriority?(v115, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v117);
            if (v118 == 1)
              v119 = 0;
            else
              v119 = SymbolEffectOptions.prefersContinuous.getter();
            v125 = v166;
            v126 = (uint64_t)v162;
            v127 = v167;
            (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v162, v168, v167);
            v183 = v114;
            v128.n128_f64[0] = _SymbolEffect.WiggleConfiguration.init(_:isContinuous:trigger:)(v126, v119 & 1, (uint64_t *)&v183, (uint64_t)&v187);
            v182 = v187;
            v176 = v188;
            v73 = v189 | ((unint64_t)v190 << 32);
            v129 = 256;
            if (!v192)
              v129 = 0;
            v74 = v129 | v191 | 0x3000;
            v130 = v76;
            (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v76 + 16))(v75, v78, v77, v128);
            _SymbolEffect.Options.init(_:)(v75, (uint64_t)&v183);
            *(_QWORD *)&v131 = v183;
            v177 = v131;
            v67 = v184;
            v68 = v185;
            v69 = v186;
            v132 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
            v63 = v176;
            v132(v78, v77);
            v133 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(v178, v133);
            result = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v168, v127);
            v72 = v177;
            goto LABEL_12;
          }
          if (v60 == *MEMORY[0x1E0CE8648])
          {
            (*(void (**)(char *, uint64_t))(v55 + 96))(v58, v59);
            (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v165, v58, v164);
            v120 = (uint64_t)v158;
            SymbolEffectOptions.repeat.getter();
            v121 = type metadata accessor for SymbolEffectOptions.RepeatOption();
            v122 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588];
            v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 48))(v120, 1, v121);
            outlined destroy of TaskPriority?(v120, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v122);
            if (v123 == 1)
              v124 = 0;
            else
              v124 = SymbolEffectOptions.prefersContinuous.getter();
            v145 = v77;
            v146 = v41;
            v147 = v163;
            v148 = (uint64_t)v159;
            v149 = v164;
            (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v159, v165, v164);
            v187 = v114;
            _SymbolEffect.RotateConfiguration.init(_:isContinuous:trigger:)(v148, v124 & 1, (uint64_t *)&v187, (uint64_t)&v183);
            v182 = v183;
            v150 = 0x100000000;
            if (!(_BYTE)v185)
              v150 = 0;
            v151 = v150 | v184;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v75, v78, v145);
            _SymbolEffect.Options.init(_:)(v75, (uint64_t)&v187);
            *(_QWORD *)&v152 = v187;
            v177 = v152;
            v67 = v188;
            v68 = HIDWORD(v188);
            v69 = v189;
            v153 = v145;
            v63 = v151;
            (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v78, v153);
            v154 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 8))(v178, v154);
            result = (*(uint64_t (**)(char *, uint64_t))(v147 + 8))(v165, v149);
            v72 = v177;
            v73 = 0;
            v74 = 0x4000;
            goto LABEL_12;
          }
          if (v60 == *MEMORY[0x1E0CE8658])
          {
            (*(void (**)(char *, uint64_t))(v55 + 96))(v58, v59);
            v134 = v157;
            v135 = v156;
            v136 = v160;
            (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v58, v160);
            v137 = (uint64_t)v155;
            (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v155, v135, v136);
            v187 = v114;
            _SymbolEffect.BreatheConfiguration.init(_:trigger:)(v137, (uint64_t *)&v187, (uint64_t)&v183);
            v182 = v183;
            v138 = 0x100000000;
            if (!(_BYTE)v185)
              v138 = 0;
            v139 = v138 | v184;
            v140 = v76;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v75, v78, v77);
            _SymbolEffect.Options.init(_:)(v75, (uint64_t)&v187);
            *(_QWORD *)&v141 = v187;
            v177 = v141;
            v67 = v188;
            v68 = HIDWORD(v188);
            v69 = v189;
            v142 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
            v63 = v139;
            v142(v78, v77);
            v143 = type metadata accessor for SymbolEffectConfiguration();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 8))(v178, v143);
            result = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v135, v160);
            v72 = v177;
            v73 = 0;
            v74 = 4096;
            goto LABEL_12;
          }
        }
        outlined consume of _SymbolEffect.Trigger((uint64_t)v182);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v78, v77);
        v144 = type metadata accessor for SymbolEffectConfiguration();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 8))(v178, v144);
        result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v58, v59);
        v112 = 0;
        v113 = 0;
        v108 = v179;
        *v179 = 0;
        v108[1] = 0;
        v108[2] = (uint64_t *)4294967294;
        v109 = 2;
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v55 + 96))(v58, v59);
      v85 = v171;
      v86 = v170;
      v87 = v78;
      v88 = v172;
      (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v170, v58, v172);
      v89 = (uint64_t)v169;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v169, v86, v88);
      v187 = v182;
      _SymbolEffect.VariableColorConfiguration.init(_:trigger:)(v89, (uint64_t *)&v187, (uint64_t)&v183);
      v182 = v183;
      v176 = v184;
      v90 = v76;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v75, v87, v77);
      _SymbolEffect.Options.init(_:)(v75, (uint64_t)&v187);
      *(_QWORD *)&v91 = v187;
      v177 = v91;
      v67 = v188;
      v68 = HIDWORD(v188);
      v69 = v189;
      v92 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v63 = v176;
      v92(v87, v77);
      v93 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 8))(v178, v93);
      result = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v88);
      v72 = v177;
      v73 = 0;
      v74 = 20480;
    }
  }
LABEL_12:
  v108 = v179;
  v109 = v74 | ((unint64_t)v72 << 32);
  v110 = 0x100000000;
  if (v67)
    v111 = 0x100000000;
  else
    v111 = 0;
  v112 = v111 | HIDWORD(v72);
  if (!v69)
    v110 = 0;
  v113 = v110 | v68;
  *v179 = v182;
  v108[1] = (uint64_t *)v63;
  v108[2] = (uint64_t *)v73;
LABEL_18:
  v108[3] = (uint64_t *)v109;
  v108[4] = (uint64_t *)v112;
  *((_DWORD *)v108 + 10) = v113;
  *((_BYTE *)v108 + 44) = BYTE4(v113);
  return result;
}

double protocol witness for Rule.value.getter in conformance _DiscreteSymbolEffectModifier<A>.EffectEnvironment@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;

  return _DiscreteSymbolEffectModifier.EffectEnvironment.value.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _DiscreteSymbolEffectModifier<A>.EffectEnvironment(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DiscreteSymbolEffectModifier<A>.EffectEnvironment, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _DiscreteSymbolEffectModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _DiscreteSymbolEffectModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _DiscreteSymbolEffectModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _DiscreteSymbolEffectModifier<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static _DiscreteSymbolEffectModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t (*_ConditionalSymbolEffectModifier.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ConditionalSymbolEffectModifier.options.getter@<X0>(uint64_t a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.options.getter(type metadata accessor for _ConditionalSymbolEffectModifier, a1);
}

uint64_t _IndefiniteSymbolEffectModifier.options.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for SymbolEffectOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t _ConditionalSymbolEffectModifier.options.setter(uint64_t a1)
{
  return _IndefiniteSymbolEffectModifier.options.setter(a1, type metadata accessor for _ConditionalSymbolEffectModifier);
}

uint64_t _IndefiniteSymbolEffectModifier.options.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for SymbolEffectOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*_ConditionalSymbolEffectModifier.options.modify())(_QWORD)
{
  type metadata accessor for _ConditionalSymbolEffectModifier(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ConditionalSymbolEffectModifier.condition.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for _ConditionalSymbolEffectModifier(0) + 24));
}

uint64_t _ConditionalSymbolEffectModifier.condition.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for _ConditionalSymbolEffectModifier(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*_ConditionalSymbolEffectModifier.condition.modify())(_QWORD)
{
  type metadata accessor for _ConditionalSymbolEffectModifier(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ConditionalSymbolEffectModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_ConditionalSymbolEffectModifier>, type metadata accessor for _ConditionalSymbolEffectModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

double _ConditionalSymbolEffectModifier.EffectEnvironment.value.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t *v19;
  uint64_t *v20;
  double result;
  _QWORD v22[2];
  _OWORD *v23;
  unint64_t v24;
  uint64_t *v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;

  v22[1] = a1;
  v23 = a2;
  v2 = type metadata accessor for SymbolEffectOptions();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymbolEffectConfiguration();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = (_QWORD *)AGGraphGetValue();
  v13 = Value[1];
  *(_QWORD *)&v30 = *Value;
  *((_QWORD *)&v30 + 1) = v13;
  v14 = type metadata accessor for _ConditionalSymbolEffectModifier(0);
  v15 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v15, v7);
  v16 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v16 + *(int *)(v14 + 20), v2);
  v24 = *(unsigned __int8 *)(AGGraphGetValue() + *(int *)(v14 + 24)) | 0x8000000000000000;
  swift_retain();
  swift_retain();
  _SymbolEffect.init(config:options:trigger:)((uint64_t)v11, (uint64_t)v6, (uint64_t *)&v24, v25);
  v17 = v26;
  v18 = v27;
  if ((~(_DWORD)v26 & 0xFFFFFFFE) != 0 || (v27 & 0xFEFE) != 2)
  {
    v20 = v25[0];
    v19 = v25[1];
    BYTE4(v28) &= 1u;
    v29 &= 1u;
    EnvironmentValues.appendSymbolEffect(_:for:)();
    outlined consume of SymbolEffect?((uint64_t)v20, (uint64_t)v19, v17, v18);
  }
  result = *(double *)&v30;
  *v23 = v30;
  return result;
}

double protocol witness for Rule.value.getter in conformance _ConditionalSymbolEffectModifier.EffectEnvironment@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return _ConditionalSymbolEffectModifier.EffectEnvironment.value.getter(*(_QWORD *)(v1 + 8), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalSymbolEffectModifier.EffectEnvironment()
{
  lazy protocol witness table accessor for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ConditionalSymbolEffectModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ConditionalSymbolEffectModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ConditionalSymbolEffectModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ConditionalSymbolEffectModifier()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_ConditionalSymbolEffectModifier>, type metadata accessor for _ConditionalSymbolEffectModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  AGMakeUniqueID();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t _IndefiniteSymbolEffectModifier.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SymbolEffectConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _IndefiniteSymbolEffectModifier.config.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SymbolEffectConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*SymbolEffectTransition.config.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SymbolEffectTransition.options.getter@<X0>(uint64_t a1@<X8>)
{
  return _IndefiniteSymbolEffectModifier.options.getter(type metadata accessor for SymbolEffectTransition, a1);
}

uint64_t SymbolEffectTransition.options.setter(uint64_t a1)
{
  return _IndefiniteSymbolEffectModifier.options.setter(a1, type metadata accessor for SymbolEffectTransition);
}

uint64_t (*SymbolEffectTransition.options.modify())(_QWORD)
{
  type metadata accessor for SymbolEffectTransition(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SymbolEffectTransition.body(content:phase:)@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  char v31;

  v4 = a1;
  v5 = type metadata accessor for SymbolEffectOptions();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SymbolEffectConfiguration();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))(v14, v2, v12);
  result = _SymbolEffect.HiddenConfiguration.init(_:hidden:)((uint64_t)v14, v4 != 1, &v27);
  v17 = v27 | ((unint64_t)(unsigned __int16)v28 << 32);
  if ((v17 & 0xFF00000000) == 0x200000000)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 2;
    v22 = 4294967294;
  }
  else
  {
    v18 = v17 & 0x101FFFFFFFFLL;
    v23 = type metadata accessor for SymbolEffectTransition(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + *(int *)(v23 + 20), v5);
    result = _SymbolEffect.Options.init(_:)((uint64_t)v9, (uint64_t)&v27);
    v22 = 0;
    v21 = ((unint64_t)v27 << 32) | 0x7000;
    if (v29)
      v24 = 0x100000000;
    else
      v24 = 0;
    v19 = v24 | v28;
    if (v31)
      v25 = 0x100000000;
    else
      v25 = 0;
    v20 = v25 | v30;
  }
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v19;
  *(_DWORD *)(a2 + 40) = v20;
  *(_BYTE *)(a2 + 44) = BYTE4(v20);
  return result;
}

uint64_t _SymbolEffect.HiddenConfiguration.init(_:hidden:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  unsigned int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  _DWORD *v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  unsigned __int8 v58;
  char v59;

  v53 = a2;
  v54 = a3;
  v52 = type metadata accessor for DisappearSymbolEffect();
  v4 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v51 = (char *)&v49 - v10;
  v11 = type metadata accessor for AppearSymbolEffect();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v49 - v18;
  v20 = type metadata accessor for SymbolEffectConfiguration.Effect();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  SymbolEffectConfiguration.effect.getter();
  v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  if (v25 == *MEMORY[0x1E0CE8628]
    || v25 == *MEMORY[0x1E0CE8640]
    || v25 == *MEMORY[0x1E0CE8620]
    || v25 == *MEMORY[0x1E0CE8630])
  {
    goto LABEL_12;
  }
  v50 = a1;
  if (v25 != *MEMORY[0x1E0CE8638])
  {
    if (v25 == *MEMORY[0x1E0CE8670])
    {
      (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
      v39 = v51;
      v38 = v52;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v51, v24, v52);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v39, v38);
      _SymbolEffect.HiddenConfiguration.init()();
      v57 = v55;
      v59 = v56;
      v40 = ScaleSymbolEffect.isLayered.getter();
      v58 = (v40 == 2) | v40 & 1;
      DisappearSymbolEffect.isUp.getter();
      _SymbolEffect.HiddenConfiguration.flags.setter();
      v59 = v53 & 1;
      v41 = *(void (**)(char *, uint64_t))(v4 + 8);
      v41(v7, v38);
      v34 = v57;
      v35 = v58;
      v36 = v59;
      v42 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v50, v42);
      result = ((uint64_t (*)(char *, uint64_t))v41)(v39, v38);
      goto LABEL_17;
    }
    v47 = v25 != *MEMORY[0x1E0CE8660] && v25 == *MEMORY[0x1E0CE8668];
    a1 = v50;
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
      _SymbolEffect.HiddenConfiguration.init()();
      v34 = v57;
      v35 = v58;
      v48 = type metadata accessor for SymbolEffectConfiguration();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(a1, v48);
      v36 = v53;
      goto LABEL_17;
    }
LABEL_12:
    v29 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    v31 = 0x200000000;
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v24, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  _SymbolEffect.HiddenConfiguration.init()();
  v57 = v55;
  v59 = v56;
  v32 = ScaleSymbolEffect.isLayered.getter();
  v58 = (v32 == 2) | v32 & 1;
  AppearSymbolEffect.isUp.getter();
  _SymbolEffect.HiddenConfiguration.flags.setter();
  v59 = v53 & 1;
  v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v15, v11);
  v34 = v57;
  v35 = v58;
  v36 = v59;
  v37 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v50, v37);
  result = ((uint64_t (*)(char *, uint64_t))v33)(v19, v11);
LABEL_17:
  v43 = 0x100000000;
  if (!v35)
    v43 = 0;
  v44 = v43 | v34;
  v45 = 0x10000000000;
  if ((v36 & 1) == 0)
    v45 = 0;
  v31 = v44 | v45;
LABEL_22:
  v46 = v54;
  *v54 = v31;
  *((_WORD *)v46 + 2) = WORD2(v31);
  return result;
}

uint64_t _SymbolEffect.Options.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  float v23;
  int v24;
  char v25;
  float v26;
  float v27;
  double v28;
  float v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;

  v4 = type metadata accessor for SymbolEffectOptions.RepeatOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v34 - v11;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v34 - v20;
  v22 = 1;
  v36 = 1;
  v35 = 1;
  SymbolEffectOptions.repeat.getter();
  outlined init with copy of UTType?((uint64_t)v21, (uint64_t)v17, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) == 1)
  {
    v23 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v17, v4);
    (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v8, v12, v4);
    v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v8, v4);
    if (v24 == *MEMORY[0x1E0CE8580])
    {
      (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v8, v4);
      v22 = 0;
      v23 = (float)*v8;
    }
    else if (v24 == *MEMORY[0x1E0CE8578])
    {
      v22 = 0;
      v23 = INFINITY;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v8, v4);
      v23 = 0.0;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  outlined destroy of TaskPriority?((uint64_t)v21, &lazy cache variable for type metadata for SymbolEffectOptions.RepeatOption?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8588]);
  v36 = v22;
  v26 = COERCE_DOUBLE(SymbolEffectOptions.repeatDelay.getter());
  if ((v25 & 1) != 0)
    v27 = 0.0;
  else
    v27 = v26;
  v35 = v25 & 1;
  SymbolEffectOptions.speed.getter();
  v29 = v28;
  v30 = type metadata accessor for SymbolEffectOptions();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(a1, v30);
  v32 = v36;
  v33 = v35;
  *(float *)a2 = v29;
  *(float *)(a2 + 4) = v23;
  *(_BYTE *)(a2 + 8) = v32;
  *(float *)(a2 + 12) = v27;
  *(_BYTE *)(a2 + 16) = v33;
  return result;
}

void static SymbolEffectTransition.properties.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SymbolEffectTransition._makeContentTransition(transition:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  double v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for SymbolEffectConfiguration();
  v7 = MEMORY[0x1E0C80A78](v4, v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)a1 == 3)
  {
    (*(void (**)(char *, uint64_t, double))(v6 + 16))(v9, v2, v7);
    result = _SymbolEffect.HiddenConfiguration.init(_:hidden:)((uint64_t)v9, 1, &v29);
    if ((unint64_t)BYTE4(v29) << 32 != 0x200000000)
    {
      result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      *(_QWORD *)(a1 + 24) = 1;
      *(_BYTE *)(a1 + 32) = 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, double))(v6 + 16))(v9, v2, v7);
    result = _SymbolEffect.HiddenConfiguration.init(_:hidden:)((uint64_t)v9, 1, &v29);
    v11 = v29 | ((unint64_t)WORD2(v29) << 32);
    if ((v11 & 0xFF00000000) != 0x200000000)
    {
      BYTE4(v29) = BYTE4(v11) & 1;
      BYTE5(v29) = BYTE5(v11) & 1;
      LODWORD(v29) = _SymbolEffect.HiddenConfiguration.transitionFlags.getter();
      BYTE4(v29) = 1;
      type metadata accessor for SymbolEffectTransition(0);
      SymbolEffectOptions.speed.getter();
      *(float *)&v12 = v12;
      LODWORD(v21) = LODWORD(v12);
      BYTE4(v21) = 0;
      ContentTransition.EffectType.init(type:arg0:arg1:)();
      v21 = v25;
      v22 = v26;
      v23 = v27;
      v24 = v28;
      default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
      default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)();
      ContentTransition.Effect.init(type:begin:duration:events:flags:)();
      v13 = v30;
      v14 = v31;
      v15 = v32;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, MEMORY[0x1E0CE3808], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v16 = v33;
      v17 = v29;
      v18 = v34;
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v19 + 32) = v17;
      *(_BYTE *)(v19 + 40) = v13;
      *(_DWORD *)(v19 + 44) = v14;
      *(_BYTE *)(v19 + 48) = v15;
      *(_QWORD *)(v19 + 52) = v16;
      *(_QWORD *)(v19 + 60) = v18;
      result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      *(_QWORD *)(a1 + 24) = v19;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  return result;
}

uint64_t static ContentTransition.symbolEffect<A>(_:options:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  int v17;

  v4 = type metadata accessor for SymbolEffectOptions();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SymbolEffectConfiguration();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of SymbolEffect.configuration.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  _SymbolEffect.ReplaceConfiguration.init(_:options:)((uint64_t)v12, v8, &v16);
  v13 = v16;
  if ((v16 & 0xFF00000000) == 0x200000000)
    return static ContentTransition.default.getter();
  v15 = v17;
  result = _SymbolEffect.ReplaceConfiguration.init()();
  *(_QWORD *)a2 = v13 & 0x1FFFFFFFFLL;
  *(_BYTE *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = v15;
  *(_WORD *)(a2 + 13) = 2;
  return result;
}

uint64_t _SymbolEffect.ReplaceConfiguration.init(_:options:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unsigned int v47;
  double v48;
  float v49;
  void (*v50)(char *, uint64_t);
  int v51;
  uint64_t v52;
  uint64_t result;
  float v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  unsigned __int8 v81;
  unsigned int v82;
  unsigned __int8 v83;
  float v84;

  v78 = a2;
  v80 = a3;
  v4 = type metadata accessor for MagicReplaceSymbolEffect();
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v71 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8538], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v71 - v9;
  v11 = type metadata accessor for SymbolEffectOptions();
  v76 = *(_QWORD *)(v11 - 8);
  v77 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v74 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v75 = (uint64_t)&v71 - v16;
  v17 = type metadata accessor for ReplaceSymbolEffect();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v71 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v71 - v28;
  v30 = type metadata accessor for SymbolEffectConfiguration.Effect();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v71 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  _SymbolEffect.ReplaceConfiguration.init()();
  v79 = a1;
  SymbolEffectConfiguration.effect.getter();
  v35 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v34, v30);
  if (v35 == *MEMORY[0x1E0CE8628]
    || v35 == *MEMORY[0x1E0CE8640]
    || v35 == *MEMORY[0x1E0CE8620]
    || v35 == *MEMORY[0x1E0CE8630]
    || v35 == *MEMORY[0x1E0CE8638]
    || v35 == *MEMORY[0x1E0CE8670])
  {
    goto LABEL_23;
  }
  if (v35 == *MEMORY[0x1E0CE8660])
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v34, v30);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v34, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v29, v17);
    v36 = v76;
    v38 = v77;
    v37 = v78;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v75, v78, v77);
    BreatheSymbolEffect.style.getter();
    v39 = type metadata accessor for ReplaceSymbolEffect.ReplaceStyle();
    v40 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8538];
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v10, 1, v39);
    outlined destroy of TaskPriority?((uint64_t)v10, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, v40);
    if (v41 == 1)
    {
      static Semantics.v6.getter();
      v42 = isLinkedOnOrAfter(_:)();
    }
    else
    {
      v42 = 0;
    }
    v54 = _SymbolEffect.ReplaceConfiguration.init(_:options:allowMagic:)((uint64_t)v25, v75, v42 & 1, (uint64_t)&v82);
    (*(void (**)(char *, uint64_t, float))(v36 + 8))(v37, v38, v54);
    v55 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v79, v55);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, v17);
    goto LABEL_19;
  }
  if (v35 != *MEMORY[0x1E0CE8668])
  {
    if (v35 != *MEMORY[0x1E0CE8650]
      && v35 != *MEMORY[0x1E0CE8648]
      && v35 != *MEMORY[0x1E0CE8658]
      && v35 == *MEMORY[0x1E0CE8618])
    {
      (*(void (**)(char *, uint64_t))(v31 + 96))(v34, v30);
      v57 = v71;
      v56 = v72;
      v58 = v73;
      v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(v71, v34, v73);
      MEMORY[0x18D75C814](v59);
      v61 = v76;
      v60 = v77;
      v62 = (uint64_t)v74;
      v63 = v78;
      (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v78, v77);
      v64 = _SymbolEffect.ReplaceConfiguration.init(_:options:allowMagic:)((uint64_t)v21, v62, 1, (uint64_t)&v82);
      (*(void (**)(char *, uint64_t, float))(v61 + 8))(v63, v60, v64);
      v65 = type metadata accessor for SymbolEffectConfiguration();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v79, v65);
      result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v58);
LABEL_19:
      v47 = v82;
      v51 = v83;
      v49 = v84;
      goto LABEL_20;
    }
LABEL_23:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v77);
    v69 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v79, v69);
    result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v34, v30);
    v70 = v80;
    *v80 = 0x200000000;
    *((_DWORD *)v70 + 2) = 0;
    return result;
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
  v43 = v76;
  v44 = v77;
  v45 = v74;
  v46 = v78;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v78, v77);
  _SymbolEffect.ReplaceConfiguration.init()();
  v47 = v82;
  v81 = v83;
  SymbolEffectOptions.speed.getter();
  v49 = v48;
  v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v45, v44);
  v51 = v81;
  v50(v46, v44);
  v52 = type metadata accessor for SymbolEffectConfiguration();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v79, v52);
LABEL_20:
  v66 = 0x100000000;
  if (!v51)
    v66 = 0;
  v67 = v66 | v47;
  v68 = (float *)v80;
  *v80 = v67;
  v68[2] = v49;
  return result;
}

uint64_t _SymbolEffect.BounceConfiguration.init(_:isContinuous:trigger:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  _DWORD *v9;
  void (*v10)(uint64_t *, _QWORD);
  char v11;
  int v12;
  _DWORD *v13;
  void (*v14)(uint64_t *, _QWORD);
  uint64_t v15;
  uint64_t result;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;

  v7 = *a3;
  _SymbolEffect.BounceConfiguration.init()();
  v21 = v19;
  v22 = v20;
  v8 = ScaleSymbolEffect.isLayered.getter();
  if (v8 == 2)
  {
    v23 = 1;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v23 = v8 & 1;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  v10 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.BounceConfiguration.flags.modify();
  if ((*v9 & 0x10) == 0)
    *v9 |= 0x10u;
  v10(&v19, 0);
LABEL_8:
  v11 = BounceSymbolEffect.isUp.getter();
  if (v11 != 2)
  {
    if ((v11 & 1) != 0)
      v12 = 1;
    else
      v12 = 2;
    v14 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.BounceConfiguration.flags.modify();
    if ((*v13 & v12) == 0)
      *v13 |= v12;
    v14(&v19, 0);
  }
  outlined consume of _SymbolEffect.Trigger?(v21);
  v21 = v7;
  v15 = type metadata accessor for BounceSymbolEffect();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  v17 = v22;
  v18 = v23;
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  *(_BYTE *)(a4 + 12) = v18;
  return result;
}

uint64_t _SymbolEffect.VariableColorConfiguration.init(_:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  void (*v7)(uint64_t *, _QWORD);
  _DWORD *v8;
  void (*v9)(uint64_t *, _QWORD);
  _DWORD *v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v5 = *a2;
  _SymbolEffect.VariableColorConfiguration.init()();
  v17 = v15;
  v18 = v16;
  _SymbolEffect.VariableColorConfiguration.flags.setter();
  if ((VariableColorSymbolEffect.isReversing.getter() & 1) != 0)
  {
    v7 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
    if ((*v6 & 8) == 0)
      *v6 |= 8u;
    v7(&v15, 0);
  }
  if ((VariableColorSymbolEffect.isIterative.getter() & 1) != 0)
  {
    v9 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
    if ((*v8 & 1) == 0)
      *v8 |= 1u;
    v9(&v15, 0);
  }
  if ((VariableColorSymbolEffect.hasReveal.getter() & 1) != 0)
  {
    v11 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.VariableColorConfiguration.flags.modify();
    if ((*v10 & 2) == 0)
      *v10 |= 2u;
    v11(&v15, 0);
  }
  outlined consume of _SymbolEffect.Trigger?(v17);
  v17 = v5;
  v12 = type metadata accessor for VariableColorSymbolEffect();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  v14 = v18;
  *(_QWORD *)a3 = v17;
  *(_DWORD *)(a3 + 8) = v14;
  return result;
}

double _SymbolEffect.WiggleConfiguration.init(_:isContinuous:trigger:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  _DWORD *v18;
  void (*v19)(__int128 *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _DWORD *v24;
  void (*v25)(__int128 *, _QWORD);
  int v26;
  _DWORD *v27;
  void (*v28)(__int128 *, _QWORD);
  int v29;
  _DWORD *v30;
  void (*v31)(__int128 *, _QWORD);
  int v32;
  _DWORD *v33;
  void (*v34)(__int128 *, _QWORD);
  uint64_t v35;
  char v36;
  int v37;
  char v38;
  char v39;
  double result;
  __int128 v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;
  char v46;
  int v47;
  char v48;
  char v49;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WiggleSymbolEffect.WiggleStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE84D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (double *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v41 - v14;
  v16 = *a3;
  _SymbolEffect.WiggleConfiguration.init()();
  v45 = v41;
  v46 = v42;
  v47 = v43;
  v49 = v44;
  v17 = WiggleSymbolEffect.isLayered.getter();
  if (v17 == 2)
  {
    v48 = 1;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v48 = v17 & 1;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  v19 = (void (*)(__int128 *, _QWORD))_SymbolEffect.WiggleConfiguration.flags.modify();
  if ((*v18 & 0x100) == 0)
    *v18 |= 0x100u;
  v19(&v41, 0);
LABEL_8:
  WiggleSymbolEffect.style.getter();
  v20 = type metadata accessor for WiggleSymbolEffect.WiggleStyle();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20) != 1)
  {
    outlined init with copy of UTType?((uint64_t)v15, (uint64_t)v11, &lazy cache variable for type metadata for WiggleSymbolEffect.WiggleStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE84D0]);
    v22 = (*(uint64_t (**)(double *, uint64_t))(v21 + 88))(v11, v20);
    if (v22 == *MEMORY[0x1E0CE84B8])
    {
      (*(void (**)(double *, uint64_t))(v21 + 96))(v11, v20);
      v23 = *(unsigned __int8 *)v11;
      v25 = (void (*)(__int128 *, _QWORD))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((~*v24 & 3) != 0)
        *v24 |= 3u;
      v25(&v41, 0);
      if (v23)
        v26 = 16;
      else
        v26 = 32;
      v28 = (void (*)(__int128 *, _QWORD))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((*v27 & v26) == 0)
        *v27 |= v26;
      v28(&v41, 0);
    }
    else if (v22 == *MEMORY[0x1E0CE84C0])
    {
      (*(void (**)(double *, uint64_t))(v21 + 96))(v11, v20);
      *((double *)&v45 + 1) = *v11 * 0.0174532925;
      v46 = 0;
    }
    else if (v22 == *MEMORY[0x1E0CE84C8])
    {
      (*(void (**)(double *, uint64_t))(v21 + 96))(v11, v20);
      v29 = *(unsigned __int8 *)v11;
      v31 = (void (*)(__int128 *, _QWORD))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((*v30 & 1) == 0)
        *v30 |= 1u;
      v31(&v41, 0);
      if (v29)
        v32 = 16;
      else
        v32 = 32;
      v34 = (void (*)(__int128 *, _QWORD))_SymbolEffect.WiggleConfiguration.flags.modify();
      if ((*v33 & v32) == 0)
        *v33 |= v32;
      v34(&v41, 0);
      v49 = 1;
    }
    else
    {
      (*(void (**)(double *, uint64_t))(v21 + 8))(v11, v20);
    }
  }
  outlined destroy of TaskPriority?((uint64_t)v15, &lazy cache variable for type metadata for WiggleSymbolEffect.WiggleStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE84D0]);
  outlined consume of _SymbolEffect.Trigger?(v45);
  *(_QWORD *)&v45 = v16;
  v35 = type metadata accessor for WiggleSymbolEffect();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
  v36 = v46;
  v37 = v47;
  v38 = v48;
  v39 = v49;
  result = *(double *)&v45;
  *(_OWORD *)a4 = v45;
  *(_BYTE *)(a4 + 16) = v36;
  *(_DWORD *)(a4 + 20) = v37;
  *(_BYTE *)(a4 + 24) = v38;
  *(_BYTE *)(a4 + 25) = v39;
  return result;
}

uint64_t _SymbolEffect.RotateConfiguration.init(_:isContinuous:trigger:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  _DWORD *v9;
  void (*v10)(uint64_t *, _QWORD);
  char v11;
  int v12;
  _DWORD *v13;
  void (*v14)(uint64_t *, _QWORD);
  uint64_t v15;
  uint64_t result;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;

  v7 = *a3;
  _SymbolEffect.BounceConfiguration.init()();
  v21 = v19;
  v22 = v20;
  v8 = ScaleSymbolEffect.isLayered.getter();
  if (v8 == 2)
  {
    v23 = 1;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v23 = v8 & 1;
    if ((a2 & 1) == 0)
      goto LABEL_8;
  }
  v10 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.RotateConfiguration.flags.modify();
  if ((*v9 & 0x10) == 0)
    *v9 |= 0x10u;
  v10(&v19, 0);
LABEL_8:
  v11 = RotateSymbolEffect.isClockwise.getter();
  if (v11 != 2)
  {
    if ((v11 & 1) != 0)
      v12 = 1;
    else
      v12 = 2;
    v14 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.RotateConfiguration.flags.modify();
    if ((*v13 & v12) == 0)
      *v13 |= v12;
    v14(&v19, 0);
  }
  outlined consume of _SymbolEffect.Trigger?(v21);
  v21 = v7;
  v15 = type metadata accessor for RotateSymbolEffect();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  v17 = v22;
  v18 = v23;
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  *(_BYTE *)(a4 + 12) = v18;
  return result;
}

uint64_t _SymbolEffect.BreatheConfiguration.init(_:trigger:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  void (*v20)(uint64_t *, _QWORD);
  uint64_t v21;
  uint64_t result;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BreatheSymbolEffect.BreatheStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8500], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v25 - v12;
  v14 = *a2;
  _SymbolEffect.BounceConfiguration.init()();
  v27 = v25;
  v28 = v26;
  v15 = ScaleSymbolEffect.isLayered.getter();
  v29 = (v15 == 2) | v15 & 1;
  BreatheSymbolEffect.style.getter();
  v16 = type metadata accessor for BreatheSymbolEffect.BreatheStyle();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) != 1)
  {
    outlined init with copy of UTType?((uint64_t)v13, (uint64_t)v9, &lazy cache variable for type metadata for BreatheSymbolEffect.BreatheStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8500]);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v9, v16);
    if (v18 != *MEMORY[0x1E0CE84F0])
    {
      if (v18 == *MEMORY[0x1E0CE84F8])
      {
        v20 = (void (*)(uint64_t *, _QWORD))_SymbolEffect.BreatheConfiguration.flags.modify();
        if ((*v19 & 1) == 0)
          *v19 |= 1u;
        v20(&v25, 0);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v16);
      }
    }
  }
  outlined destroy of TaskPriority?((uint64_t)v13, &lazy cache variable for type metadata for BreatheSymbolEffect.BreatheStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8500]);
  outlined consume of _SymbolEffect.Trigger?(v27);
  v27 = v14;
  v21 = type metadata accessor for BreatheSymbolEffect();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  v23 = v28;
  v24 = v29;
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 12) = v24;
  return result;
}

float _SymbolEffect.ReplaceConfiguration.init(_:options:allowMagic:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  double v22;
  int v23;
  int *v24;
  void (*v25)(_DWORD *, _QWORD);
  int v26;
  _DWORD *v27;
  void (*v28)(_DWORD *, _QWORD);
  _DWORD *v29;
  void (*v30)(_DWORD *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  char v33;
  float result;
  void (*v35)(char *, uint64_t);
  _DWORD v36[9];
  int v37;
  char v38;
  float v39;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8538], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v36 - v10;
  v12 = type metadata accessor for ReplaceSymbolEffect.ReplaceStyle();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v36 - v19;
  _SymbolEffect.ReplaceConfiguration.init()();
  v37 = v36[0];
  v21 = ScaleSymbolEffect.isLayered.getter();
  v38 = (v21 == 2) | v21 & 1;
  SymbolEffectOptions.speed.getter();
  *(float *)&v22 = v22;
  v39 = *(float *)&v22;
  BreatheSymbolEffect.style.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v11, &lazy cache variable for type metadata for ReplaceSymbolEffect.ReplaceStyle?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE8538]);
    if ((a3 & 1) != 0)
      goto LABEL_20;
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v23 == *MEMORY[0x1E0CE8530])
  {
    v25 = (void (*)(_DWORD *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
    if ((*v24 & 2) != 0)
      goto LABEL_14;
    v26 = *v24 | 2;
    goto LABEL_13;
  }
  if (v23 == *MEMORY[0x1E0CE8520])
  {
    v25 = (void (*)(_DWORD *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
    if ((~*v24 & 3) == 0)
      goto LABEL_14;
    v26 = *v24 | 3;
    goto LABEL_13;
  }
  if (v23 == *MEMORY[0x1E0CE8528])
  {
    v25 = (void (*)(_DWORD *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
    if ((*v24 & 4) != 0)
      goto LABEL_14;
    v26 = *v24 | 4;
LABEL_13:
    *v24 = v26;
LABEL_14:
    v25(v36, 0);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
    if ((a3 & 1) != 0)
      goto LABEL_20;
    goto LABEL_15;
  }
  v35 = *(void (**)(char *, uint64_t))(v13 + 8);
  v35(v20, v12);
  v35(v16, v12);
  if ((a3 & 1) != 0)
    goto LABEL_20;
LABEL_15:
  v28 = (void (*)(_DWORD *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v27 & 0x20) == 0)
    *v27 |= 0x20u;
  v28(v36, 0);
  v30 = (void (*)(_DWORD *, _QWORD))_SymbolEffect.ReplaceConfiguration.flags.modify();
  if ((*v29 & 0x40) == 0)
    *v29 |= 0x40u;
  v30(v36, 0);
LABEL_20:
  v31 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a2, v31);
  v32 = type metadata accessor for ReplaceSymbolEffect();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
  v33 = v38;
  result = v39;
  *(_DWORD *)a4 = v37;
  *(_BYTE *)(a4 + 4) = v33;
  *(float *)(a4 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IndefiniteSymbolEffectModifier.EffectEnvironment, &unk_1E1B00688);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IndefiniteSymbolEffectModifier.EffectEnvironment, &unk_1E1B00688);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IndefiniteSymbolEffectModifier.EffectEnvironment and conformance _IndefiniteSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

uint64_t type metadata accessor for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DiscreteSymbolEffectModifier);
}

uint64_t type metadata accessor for _DiscreteSymbolEffectModifier.EffectEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DiscreteSymbolEffectModifier.EffectEnvironment);
}

uint64_t type metadata accessor for _ConditionalSymbolEffectModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ConditionalSymbolEffectModifier);
}

unint64_t lazy protocol witness table accessor for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ConditionalSymbolEffectModifier.EffectEnvironment, &unk_1E1B01E50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment;
  if (!lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ConditionalSymbolEffectModifier.EffectEnvironment, &unk_1E1B01E50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalSymbolEffectModifier.EffectEnvironment and conformance _ConditionalSymbolEffectModifier.EffectEnvironment);
  }
  return result;
}

uint64_t type metadata accessor for SymbolEffectTransition(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SymbolEffectTransition);
}

_UNKNOWN **base witness table accessor for ViewModifier in _IndefiniteSymbolEffectModifier()
{
  return &protocol witness table for _IndefiniteSymbolEffectModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _DiscreteSymbolEffectModifier<A>()
{
  return &protocol witness table for _DiscreteSymbolEffectModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ConditionalSymbolEffectModifier()
{
  return &protocol witness table for _ConditionalSymbolEffectModifier;
}

uint64_t associated type witness table accessor for Transition.Body : View in SymbolEffectTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _IndefiniteSymbolEffectModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for _IndefiniteSymbolEffectModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for _DiscreteSymbolEffectModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for SymbolEffectConfiguration();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymbolEffectOptions();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _DiscreteSymbolEffectModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;

  v5 = type metadata accessor for SymbolEffectConfiguration();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for SymbolEffectOptions();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_DWORD *)(v6 + 80);
  v17 = (*(_BYTE *)(v9 + 80) | v16 | *(_BYTE *)(v14 + 80));
  if (v17 <= 7
    && ((v12 + (v11 & ~v10) + v15) & (unint64_t)~v15) + *(_QWORD *)(v14 + 64) <= 0x18
    && ((*(_DWORD *)(v9 + 80) | v16 | *(_DWORD *)(v14 + 80)) & 0x100000) == 0)
  {
    v21 = v8;
    v22 = ~v10;
    v26 = v13;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v23 = ((unint64_t)a1 + v11) & v22;
    v24 = ((unint64_t)a2 + v11) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v23, v24, v21);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))((v23 + v12 + v15) & ~v15, (v24 + v12 + v15) & ~v15, v26);
  }
  else
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = type metadata accessor for SymbolEffectConfiguration();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  v7 = type metadata accessor for SymbolEffectOptions();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v9 + *(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for SymbolEffectOptions();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 16))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t assignWithCopy for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for SymbolEffectOptions();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, v9);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t initializeWithTake for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for SymbolEffectOptions();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, v9);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 32))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t assignWithTake for _DiscreteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for SymbolEffectOptions();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, v9);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _DiscreteSymbolEffectModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = type metadata accessor for SymbolEffectOptions();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = *(_DWORD *)(v10 + 84);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) > v12)
    v12 = *(_DWORD *)(v14 + 84);
  if (!a2)
    return 0;
  v15 = v9;
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = *(_QWORD *)(v7 + 64) + v16;
  v18 = *(_QWORD *)(v10 + 64);
  v19 = *(unsigned __int8 *)(v14 + 80);
  if (a2 <= v12)
    goto LABEL_25;
  v20 = ((v18 + (v17 & ~v16) + v19) & ~v19) + *(_QWORD *)(v14 + 64);
  v21 = 8 * v20;
  if (v20 <= 3)
  {
    v23 = ((a2 - v12 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      v22 = *(_DWORD *)(a1 + v20);
      if (!v22)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v23 > 0xFF)
    {
      v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v23 < 2)
    {
LABEL_25:
      if (v12)
      {
        if ((_DWORD)v8 == v12)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
        v26 = (v17 + a1) & ~v16;
        if ((_DWORD)v11 == v12)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v26, v11, v15);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v14 + 48))((v26 + v18 + v19) & ~v19, *(unsigned int *)(v14 + 84), v13);
      }
      return 0;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20))
    goto LABEL_25;
LABEL_16:
  v24 = (v22 - 1) << v21;
  if (v20 > 3)
    v24 = 0;
  if ((_DWORD)v20)
  {
    if (v20 <= 3)
      v25 = ((v18 + (v17 & ~(_DWORD)v16) + v19) & ~(_DWORD)v19) + *(_DWORD *)(v14 + 64);
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  return v12 + v24 + 1;
}

void storeEnumTagSinglePayload for _DiscreteSymbolEffectModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v8 = *(_QWORD *)(type metadata accessor for SymbolEffectConfiguration() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(type metadata accessor for SymbolEffectOptions() - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v12 + 84) > v11)
    v11 = *(_DWORD *)(v12 + 84);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = ((*(_QWORD *)(v10 + 64) + ((*(_QWORD *)(v8 + 64) + v13) & ~v13) + v14) & ~v14) + *(_QWORD *)(v12 + 64);
  if (a3 <= v11)
  {
    v16 = 0u;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = 4u;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = 1u;
  }
  if (v11 < a2)
  {
    v17 = ~v11 + a2;
    if (v15 < 4)
    {
      if ((_DWORD)v15)
      {
        v19 = v17 & ~(-1 << (8 * v15));
        bzero(a1, ((*(_QWORD *)(v10 + 64) + ((*(_QWORD *)(v8 + 64) + v13) & ~v13) + v14) & ~v14) + *(_QWORD *)(v12 + 64));
        if ((_DWORD)v15 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if ((_DWORD)v15 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v10 + 64) + ((*(_QWORD *)(v8 + 64) + v13) & ~v13) + v14) & ~v14) + *(_QWORD *)(v12 + 64));
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

_QWORD *initializeBufferWithCopyOfBuffer for _IndefiniteSymbolEffectModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymbolEffectOptions();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t initializeWithCopy for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalSymbolEffectModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for SymbolEffectOptions();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ConditionalSymbolEffectModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for SymbolEffectConfiguration();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for SymbolEffectOptions();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for _IndefiniteSymbolEffectModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for SymbolEffectConfiguration();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymbolEffectOptions();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SymbolEffectTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymbolEffectConfiguration();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymbolEffectOptions();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for _IndefiniteSymbolEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for SymbolEffectOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SymbolEffectTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SymbolEffectOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolEffectTransition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18724B970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SymbolEffectConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SymbolEffectOptions();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SymbolEffectTransition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18724B9F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SymbolEffectConfiguration();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SymbolEffectOptions();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for SymbolEffectTransition()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for SymbolEffectConfiguration();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SymbolEffectOptions();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>();
    v3[1] = &protocol witness table for _SymbolEffectModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffectTransition>, type metadata accessor for SymbolEffectTransition, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE5470]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SymbolEffectTransition>, _SymbolEffectModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>;
  if (!lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for PlaceholderContentView<SymbolEffectTransition>, type metadata accessor for SymbolEffectTransition, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE5470]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5480], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderContentView<SymbolEffectTransition> and conformance PlaceholderContentView<A>);
  }
  return result;
}

void *type metadata accessor for _ConditionalSymbolEffectModifier.EffectEnvironment()
{
  return &unk_1E1B01E50;
}

void *type metadata accessor for _IndefiniteSymbolEffectModifier.EffectEnvironment()
{
  return &unk_1E1B00688;
}

void base witness table accessor for _AttributeBody in _DiscreteSymbolEffectModifier<A>.EffectEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static WindowLayout.windowLayoutProperties.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayout.updateCache(_:content:context:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.windowLayout<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayoutProperties.triggers.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayoutProperties.triggers.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayoutProperties.triggers.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

SwiftUI::WindowLayoutProperties __swiftcall WindowLayoutProperties.init()()
{
  SwiftUI::WindowLayoutProperties result;

  result.triggers.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void WindowLayoutUpdateTriggers.rawValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

SwiftUI::WindowLayoutUpdateTriggers __swiftcall WindowLayoutUpdateTriggers.init(rawValue:)(Swift::Int rawValue)
{
  SwiftUI::WindowLayoutUpdateTriggers result;

  result.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static WindowLayoutUpdateTriggers.displayConfiguration.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowLayout<>.makeCache(content:context:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowLayoutUpdateTriggers, &type metadata for WindowLayoutUpdateTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowLayoutUpdateTriggers, &type metadata for WindowLayoutUpdateTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowLayoutUpdateTriggers, &type metadata for WindowLayoutUpdateTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers;
  if (!lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowLayoutUpdateTriggers, &type metadata for WindowLayoutUpdateTriggers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLayoutUpdateTriggers and conformance WindowLayoutUpdateTriggers);
  }
  return result;
}

uint64_t dispatch thunk of static WindowLayout.windowLayoutProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of WindowLayout.makeCache(content:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of WindowLayout.updateCache(_:content:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of WindowLayout.windowPlacement(content:context:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

ValueMetadata *type metadata accessor for WindowLayoutProperties()
{
  return &type metadata for WindowLayoutProperties;
}

ValueMetadata *type metadata accessor for WindowLayoutUpdateTriggers()
{
  return &type metadata for WindowLayoutUpdateTriggers;
}

uint64_t sub_18724BF00(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void static WindowLayoutUpdateTriggers.initial.getter()
{
  static WindowLayoutUpdateTriggers.displayConfiguration.getter();
}

void static WindowLayoutUpdateTriggers.all.getter()
{
  static WindowLayoutUpdateTriggers.displayConfiguration.getter();
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v2 = MEMORY[0x1E0DEE9E0];
  v3 = a1 + 64;
  v36 = MEMORY[0x1E0DEE9E0];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 56) + 80 * v11;
    if (*(_BYTE *)(v12 + 40))
    {
      if (v6)
        goto LABEL_5;
    }
    else
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
      v31 = *(_QWORD *)v12;
      v18 = *(_QWORD *)(v12 + 8);
      v30 = *(_BYTE *)(v12 + 16);
      v32 = *(_OWORD *)(v12 + 24);
      v35 = *(_OWORD *)(v12 + 48);
      v34 = *(_QWORD *)(v12 + 64);
      v33 = *(_BYTE *)(v12 + 72);
      v19 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v19)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19 + 1, 1);
        v2 = v36;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      result = Hasher._finalize()();
      v20 = v2 + 64;
      v21 = -1 << *(_BYTE *)(v2 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v2 + 64 + 8 * (v22 >> 6))) == 0)
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          v27 = v23 == v26;
          if (v23 == v26)
            v23 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v20 + 8 * v23);
          if (v28 != -1)
          {
            v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v2 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v24) = v17;
      v29 = *(_QWORD *)(v2 + 56) + 80 * v24;
      *(_QWORD *)v29 = v31;
      *(_QWORD *)(v29 + 8) = v18;
      *(_BYTE *)(v29 + 16) = v30;
      *(_OWORD *)(v29 + 24) = v32;
      *(_BYTE *)(v29 + 40) = 0;
      *(_OWORD *)(v29 + 48) = v35;
      *(_QWORD *)(v29 + 64) = v34;
      *(_BYTE *)(v29 + 72) = v33;
      ++*(_QWORD *)(v2 + 16);
      if (v6)
        goto LABEL_5;
    }
LABEL_8:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v13 >= v7)
      goto LABEL_38;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    v15 = v9 + 1;
    if (!v14)
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v7)
        goto LABEL_38;
      v14 = *(_QWORD *)(v3 + 8 * v15);
      if (!v14)
      {
        v15 = v9 + 3;
        if (v9 + 3 >= v7)
          goto LABEL_38;
        v14 = *(_QWORD *)(v3 + 8 * v15);
        if (!v14)
        {
          v15 = v9 + 4;
          if (v9 + 4 >= v7)
            goto LABEL_38;
          v14 = *(_QWORD *)(v3 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v15 << 6);
    v9 = v15;
  }
  v16 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_38:
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v3 + 8 * v16);
  if (v14)
  {
    v15 = v9 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v7)
      goto LABEL_38;
    v14 = *(_QWORD *)(v3 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t __dst[39];
  uint64_t v39;

  v2 = MEMORY[0x1E0DEE9E0];
  v3 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v39 = MEMORY[0x1E0DEE9E0];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v37 << 6);
LABEL_25:
    v16 = *(_QWORD *)(a1 + 48) + 24 * v11;
    v17 = *(_QWORD *)v16;
    v18 = *(unsigned __int8 *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 56) + 304 * v11), 0x12BuLL);
    if (__dst[6] && LODWORD(__dst[1]) != -1 && (v20 = __dst[10]) != 0)
    {
      if (LODWORD(__dst[1]))
      {
        v21 = (LODWORD(__dst[10]) | ((unint64_t)LODWORD(__dst[1]) << 32))
            + ~((unint64_t)LODWORD(__dst[10]) << 32);
        v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
        v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
        v24 = ((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27));
        if (LODWORD(__dst[10]) == -1)
          v20 = -1;
        else
          v20 = v24;
      }
    }
    else
    {
      v20 = __dst[1];
    }
    v25 = *(_QWORD *)(v2 + 16);
    if (*(_QWORD *)(v2 + 24) <= v25)
    {
      v26 = v25 + 1;
      outlined retain of NavigationColumnState(__dst);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, 1);
      v2 = v39;
    }
    else
    {
      outlined retain of NavigationColumnState(__dst);
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(v19);
    result = Hasher._finalize()();
    v27 = v2 + 64;
    v28 = -1 << *(_BYTE *)(v2 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v2 + 64 + 8 * (v29 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v2 + 64 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v27 + 8 * v30);
      }
      while (v34 == -1);
      v8 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v27 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    v9 = *(_QWORD *)(v2 + 48) + 24 * v8;
    *(_QWORD *)v9 = v17;
    *(_BYTE *)(v9 + 8) = v18;
    *(_QWORD *)(v9 + 16) = v19;
    *(_DWORD *)(*(_QWORD *)(v2 + 56) + 4 * v8) = v20;
    ++*(_QWORD *)(v2 + 16);
    result = (uint64_t)outlined release of NavigationColumnState(__dst);
  }
  v12 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v12 >= v35)
    goto LABEL_45;
  v13 = *(_QWORD *)(v36 + 8 * v12);
  v14 = v37 + 1;
  if (v13)
    goto LABEL_24;
  v14 = v37 + 2;
  if (v37 + 2 >= v35)
    goto LABEL_45;
  v13 = *(_QWORD *)(v36 + 8 * v14);
  if (v13)
    goto LABEL_24;
  v14 = v37 + 3;
  if (v37 + 3 >= v35)
    goto LABEL_45;
  v13 = *(_QWORD *)(v36 + 8 * v14);
  if (v13)
    goto LABEL_24;
  v14 = v37 + 4;
  if (v37 + 4 >= v35)
    goto LABEL_45;
  v13 = *(_QWORD *)(v36 + 8 * v14);
  if (v13)
  {
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v37 = v14;
    goto LABEL_25;
  }
  v15 = v37 + 5;
  if (v37 + 5 >= v35)
  {
LABEL_45:
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return v2;
  }
  v13 = *(_QWORD *)(v36 + 8 * v15);
  if (v13)
  {
    v14 = v37 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v35)
      goto LABEL_45;
    v13 = *(_QWORD *)(v36 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_47:
  __break(1u);
  return result;
}

SwiftUI::SpatialEventCollection::Event::ID __swiftcall SpatialEventCollection.Event.ID.init(_:)(SwiftUI::SpatialEventCollection::Event::ID result)
{
  SwiftUI::SpatialEventCollection::Event::ID *v1;

  v1->value = result.value;
  return result;
}

void SpatialEventCollection.Event.ID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static SpatialEventCollection.Event.ID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int SpatialEventCollection.Event.ID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SpatialEventCollection.Event.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  uint64_t v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  __asm { BR              X9 }
}

void sub_18724C33C()
{
  Swift::UInt v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  char v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;

  Hasher._combine(_:)(1uLL);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v6;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v5;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
  if ((v4 & 1) == 0)
  {
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v9 = v3;
    else
      v9 = 0;
    Hasher._combine(_:)(v9);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v10 = v2;
    else
      v10 = 0;
    Hasher._combine(_:)(v10);
  }
}

void sub_18724C3B0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SpatialEventCollection.Event.Kind.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_18724C3E4()
{
  Hasher._combine(_:)(1uLL);
}

void sub_18724C404()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SpatialEventCollection.Event.Phase.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void SpatialEventCollection.Event.InputDevicePose.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

void static SpatialEventCollection.Event.Kind.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_18724C4A0()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_18724C4C4 + 4 * byte_187C18E6F[v0]))();
}

BOOL sub_18724C4C4@<W0>(uint64_t a1@<X8>)
{
  return a1 == 1;
}

void sub_18724C4E0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SpatialEventCollection.Event.Kind.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_18724C520()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_18724C550()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection.Event.Kind(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_18724C580()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_18724C5A4 + 4 * byte_187C18E7E[v0]))();
}

BOOL sub_18724C5A4@<W0>(uint64_t a1@<X8>)
{
  return a1 == 1;
}

void sub_18724C5C0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable.hashValue.getter in conformance SpatialEventCollection.Event.Kind()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_18724C600()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_18724C630()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable.hash(into:) in conformance SpatialEventCollection.Event.Kind()
{
  __asm { BR              X10 }
}

void sub_18724C664()
{
  Hasher._combine(_:)(1uLL);
}

void sub_18724C684()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialEventCollection.Event.Kind()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_18724C6C0()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_18724C6F0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL static SpatialEventCollection.Event.Phase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SpatialEventCollection.Event.Phase.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double SpatialEventCollection.Event.InputDevicePose.altitude.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SpatialEventCollection.Event.InputDevicePose.altitude.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*SpatialEventCollection.Event.InputDevicePose.altitude.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialEventCollection.Event.InputDevicePose.azimuth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void SpatialEventCollection.Event.InputDevicePose.azimuth.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialEventCollection.Event.InputDevicePose.azimuth.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

BOOL static SpatialEventCollection.Event.InputDevicePose.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int SpatialEventCollection.Event.InputDevicePose.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialEventCollection.Event.InputDevicePose()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection.Event.InputDevicePose(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void SpatialEventCollection.Event.id.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *SpatialEventCollection.Event.id.setter(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.id.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialEventCollection.Event.timestamp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void SpatialEventCollection.Event.timestamp.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialEventCollection.Event.timestamp.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void SpatialEventCollection.Event.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *SpatialEventCollection.Event.kind.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.kind.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SpatialEventCollection.Event.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void SpatialEventCollection.Event.location.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*SpatialEventCollection.Event.location.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void SpatialEventCollection.Event.phase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

_BYTE *SpatialEventCollection.Event.phase.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = *result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.phase.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialEventCollection.Event.modifierKeys.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t SpatialEventCollection.Event.modifierKeys.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*SpatialEventCollection.Event.modifierKeys.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 SpatialEventCollection.Event.inputDevicePose.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 72);
  result = *(__n128 *)(v1 + 56);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 SpatialEventCollection.Event.inputDevicePose.setter(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  *(_BYTE *)(v1 + 72) = v2;
  return result;
}

__n128 (*SpatialEventCollection.Event.inputDevicePose.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 24) = v1;
  v2 = *(_BYTE *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_BYTE *)(a1 + 16) = v2;
  return SpatialEventCollection.Event.inputDevicePose.modify;
}

__n128 SpatialEventCollection.Event.inputDevicePose.modify(__n128 *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v1 = a1[1].n128_u64[1];
  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  *(_BYTE *)(v1 + 72) = v2;
  return result;
}

Swift::Int SpatialEventCollection.Event.hashValue.getter()
{
  Hasher.init(_seed:)();
  SpatialEventCollection.Event.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialEventCollection.Event()
{
  Hasher.init(_seed:)();
  SpatialEventCollection.Event.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialEventCollection.Event()
{
  Hasher.init(_seed:)();
  SpatialEventCollection.Event.hash(into:)();
  return Hasher._finalize()();
}

double SpatialEventCollection.subscript.getter@<D0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(v4 + 56) + 80 * v5;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_BYTE *)(v7 + 16);
    v10 = *(_BYTE *)(v7 + 40);
    v11 = *(_QWORD *)(v7 + 64);
    v12 = *(_BYTE *)(v7 + 72);
    *(_QWORD *)a2 = *(_QWORD *)v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 24);
    *(_BYTE *)(a2 + 40) = v10;
    v13 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 64) = v11;
    *(_BYTE *)(a2 + 72) = v12;
  }
  else
  {
    *(_QWORD *)&v13 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 3;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
  return *(double *)&v13;
}

void SpatialEventCollection.Iterator.next()(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;

  v3 = v1[3];
  v2 = v1[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_QWORD *)(*v1 + 56) + 80 * v6;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_BYTE *)(v7 + 16);
    v10 = *(_BYTE *)(v7 + 40);
    v11 = *(_QWORD *)(v7 + 64);
    v12 = *(_BYTE *)(v7 + 72);
    *(_QWORD *)a1 = *(_QWORD *)v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 24);
    *(_BYTE *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + 48);
    *(_QWORD *)(a1 + 64) = v11;
    *(_BYTE *)(a1 + 72) = v12;
    v1[3] = v4;
    v1[4] = v5;
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v1[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v1[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 3;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    v1[3] = v4;
    v1[4] = 0;
  }
}

uint64_t SpatialEventCollection.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = -1;
  v3 = *(_QWORD *)v1 + 64;
  v4 = -1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  if (-v4 < 64)
    v2 = ~(-1 << -(char)v4);
  v5 = v2 & *(_QWORD *)(*(_QWORD *)v1 + 64);
  *a1 = *(_QWORD *)v1;
  a1[1] = v3;
  a1[2] = ~v4;
  a1[3] = 0;
  a1[4] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t SpatialEventCollection.updateWithEvent(_:)(_OWORD *a1)
{
  uint64_t *v1;
  __int128 v2;
  __int128 v3;
  Swift::UInt v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  _OWORD v8[3];
  _OWORD v9[2];

  v2 = a1[1];
  v8[0] = *a1;
  v8[1] = v2;
  v3 = a1[3];
  v8[2] = a1[2];
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 57);
  v4 = *(_QWORD *)&v8[0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  *v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, v4, isUniquelyReferenced_nonNull_native);
  *v1 = v7;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall SpatialEventCollection.updateAfterCallback()()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized Dictionary.compactMapValues<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  *v0 = v1;
}

BOOL static SpatialEventCollection.Index.< infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static SpatialEventCollection.Index.== infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance SpatialEventCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance SpatialEventCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(_QWORD *)(result + 8))
      return *(_QWORD *)a2 >= *(_QWORD *)result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance SpatialEventCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result >= *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance SpatialEventCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(_QWORD *)(result + 8))
      return *(_QWORD *)a2 < *(_QWORD *)result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SpatialEventCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = specialized Dictionary.startIndex.getter(*v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void SpatialEventCollection.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)v1 + 36);
  *(_QWORD *)a1 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

double SpatialEventCollection.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  double result;
  _QWORD v10[2];
  char v11;
  __int128 v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  specialized Dictionary.subscript.getter(&v17, (uint64_t)v10, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *v2);
  v4 = v10[1];
  v5 = v11;
  v6 = v13;
  v7 = v15;
  v8 = v16;
  *(_QWORD *)a2 = v10[0];
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 40) = v6;
  result = *(double *)&v14;
  *(_OWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 64) = v7;
  *(_BYTE *)(a2 + 72) = v8;
  return result;
}

_QWORD *specialized Dictionary.subscript.getter(_QWORD *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v6 = *(_QWORD *)(a6 + 56);
    *result = *(_QWORD *)(*(_QWORD *)(a6 + 48) + 8 * a3);
    v7 = v6 + 80 * a3;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_BYTE *)(v7 + 16);
    v10 = *(_BYTE *)(v7 + 40);
    v11 = *(_QWORD *)(v7 + 64);
    v12 = *(_BYTE *)(v7 + 72);
    *(_QWORD *)a2 = *(_QWORD *)v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 24);
    *(_BYTE *)(a2 + 40) = v10;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v7 + 48);
    *(_QWORD *)(a2 + 64) = v11;
    *(_BYTE *)(a2 + 72) = v12;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * a2);
    outlined init with copy of NavigationDestinationPresentation(*(_QWORD *)(a5 + 56) + 96 * a2, result);
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t SpatialEventCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = specialized _NativeDictionary.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

SwiftUI::SpatialEventCollection __swiftcall SpatialEventCollection.init()()
{
  _QWORD *v0;
  SwiftUI::SpatialEventCollection result;

  *v0 = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance SpatialEventCollection@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = specialized Dictionary.startIndex.getter(*v1);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance SpatialEventCollection(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)v1 + 36);
  *(_QWORD *)a1 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

void (*protocol witness for Collection.subscript.read in conformance SpatialEventCollection(_QWORD *a1, uint64_t a2))(void **a1)
{
  uint64_t *v2;
  char *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  void (*result)(void **);
  _QWORD v12[2];
  char v13;
  __int128 v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = (char *)malloc(0x49uLL);
  *a1 = v5;
  specialized Dictionary.subscript.getter(&v19, (uint64_t)v12, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  v6 = v12[1];
  v7 = v13;
  v8 = v15;
  v9 = v17;
  v10 = v18;
  *(_QWORD *)v5 = v12[0];
  *((_QWORD *)v5 + 1) = v6;
  v5[16] = v7;
  *(_OWORD *)(v5 + 24) = v14;
  v5[40] = v8;
  *((_OWORD *)v5 + 3) = v16;
  result = ListBatchUpdates.subscript.read;
  *((_QWORD *)v5 + 8) = v9;
  v5[72] = v10;
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SpatialEventCollection@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];

  v3 = a1[1];
  v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  return specialized Collection<>.subscript.getter((uint64_t)&v5, *v2, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance SpatialEventCollection@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *v1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = specialized Dictionary.startIndex.getter(v3);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  v6 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(a1 + 32) = 1 << *(_BYTE *)(v3 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance SpatialEventCollection()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  int v3;
  char v4;

  v1 = *v0;
  result = specialized Dictionary.startIndex.getter(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3)
      return result == 1 << *(_BYTE *)(v1 + 32);
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance SpatialEventCollection(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance SpatialEventCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return specialized Collection.index(_:offsetBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *v3, a3);
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (a4 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    v7 = a2;
    v8 = result;
    v9 = a6;
    v10 = a3 & 1;
    if (a4)
    {
      result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
      v12 = 0;
      v13 = a5 + 64;
      v14 = v7;
      while (1)
      {
        if ((v10 & 1) != 0)
          goto LABEL_33;
        if ((v8 & 0x8000000000000000) != 0 || (v15 = 1 << *(_BYTE *)(a5 + 32), (uint64_t)v8 >= v15))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v16 = v8 >> 6;
        v17 = *(_QWORD *)(v13 + 8 * (v8 >> 6));
        if (((v17 >> v8) & 1) == 0)
          goto LABEL_30;
        if (*(_DWORD *)(a5 + 36) != (_DWORD)v7)
          goto LABEL_31;
        v18 = v17 & (-2 << (v8 & 0x3F));
        if (v18)
        {
          result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, v7, 0);
          v8 = __clz(__rbit64(v18)) | v8 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = v16 + 1;
          v20 = (unint64_t)(v15 + 63) >> 6;
          if (v16 + 1 >= v20)
            goto LABEL_23;
          v21 = *(_QWORD *)(v13 + 8 * v19);
          if (!v21)
          {
            v19 = v16 + 2;
            if (v16 + 2 >= v20)
              goto LABEL_23;
            v21 = *(_QWORD *)(v13 + 8 * v19);
            if (!v21)
            {
              v19 = v16 + 3;
              if (v16 + 3 >= v20)
              {
LABEL_23:
                result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, v7, 0);
                v8 = v15;
                goto LABEL_5;
              }
              v21 = *(_QWORD *)(v13 + 8 * v19);
              if (!v21)
              {
                v22 = v20 - 4;
                while (v22 != v16)
                {
                  v21 = *(_QWORD *)(a5 + 96 + 8 * v16++);
                  if (v21)
                  {
                    v19 = v16 + 3;
                    goto LABEL_14;
                  }
                }
                result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, v7, 0);
                v8 = v15;
                goto LABEL_5;
              }
            }
          }
LABEL_14:
          result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v8, v7, 0);
          v8 = __clz(__rbit64(v21)) | (v19 << 6);
        }
LABEL_5:
        v10 = 0;
        ++v12;
        v7 = v14;
        if (v12 == a4)
        {
          v7 = v14;
          v9 = a6;
          goto LABEL_28;
        }
      }
    }
    result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
LABEL_28:
    *(_QWORD *)v9 = v8;
    *(_QWORD *)(v9 + 8) = v7;
    *(_BYTE *)(v9 + 16) = v10;
  }
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance SpatialEventCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return specialized Collection.index(_:offsetBy:limitedBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16), *v4, a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance SpatialEventCollection(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized Collection.distance(from:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *v2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance SpatialEventCollection(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 != *(_QWORD *)(a2 + 32))
    goto LABEL_11;
  if (*(_QWORD *)result >= *(_QWORD *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != v2)
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  if (*(_DWORD *)(result + 8) != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (((*(_BYTE *)(a2 + 40) | *(_BYTE *)(result + 40)) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(result + 32))
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance SpatialEventCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = specialized _NativeDictionary.index(after:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance SpatialEventCollection(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = specialized _NativeDictionary.index(after:)(*(_QWORD *)a1, v5, v6, v3);
  v9 = v8;
  v11 = v10;
  result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v4, v5, v6);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v11 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SpatialEventCollection@<X0>(_QWORD *a1@<X8>)
{
  SpatialEventCollection.makeIterator()(a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.count.getter in conformance SpatialEventCollection()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  v1 = *v0;
  v2 = specialized Dictionary.startIndex.getter(*v0);
  v4 = v3;
  v6 = v5 & 1;
  v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(_BYTE *)(v1 + 32), *(_DWORD *)(v1 + 36), 0, v1);
  outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v2, v4, v6);
  return v7;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SpatialEventCollection()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SpatialEventCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void static SpatialEventCollection.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SpatialEventCollection(uint64_t *a1, uint64_t *a2)
{
  specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_retain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v10 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 16 * v16);
      swift_bridgeObjectRelease();
      result = swift_release();
      *v23 = a1;
      v23[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = *v5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a3, (uint64_t)v13, type metadata accessor for CommandGroupPlacementBox);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, a1, a2, v22);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (_QWORD **)v4;
  v29 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 16 * v16);
      result = swift_release();
      v25 = v29;
      *v23 = a1;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  v26 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, a1, v29, v22);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 40 * v12;
        __swift_destroy_boxed_opaque_existential_1(v19);
        return outlined init with take of OptionalBinaryInteger(a1, v19);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, (uint64_t)a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = v5;
  v11 = a4 & 1;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = *(_QWORD *)(v12 + 24);
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(v20 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v21 + 8 * v14) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);
      return outlined copy of SceneID(a2, a3, v11);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, _OWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        swift_release();
        swift_release();
        result = swift_release();
        v19 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v17 = *(_OWORD *)a1;
        *(_OWORD *)(v17 + 16) = v19;
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(a1 + 32);
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, _OWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v16[7] + v10) = a1 & 1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1 & 1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1 & 1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= result && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v22[7] + 8 * v16) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v21 >= result && (a6 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
    if ((v20 & 1) == (v23 & 1))
    {
      v16 = result;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a4, a5, a1, v22);
      swift_retain();
      return outlined copy of _ViewList_ID.Canonical?(a3, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(void *a1, Swift::UInt a2, char a3, Swift::UInt a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  void *result;
  unint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
        return (void *)outlined assign with take of NavigationColumnState((uint64_t)a1, v20[7] + 304 * v14);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a1, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        return (void *)outlined assign with take of NavigationColumnState((uint64_t)a1, v20[7] + 304 * v14);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a1, v20);
    }
  }
  result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        v17 = type metadata accessor for CommandOperation();
        return (id)outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v9, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v20 & 1))
    {
      v9 = v19;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        result = (id)swift_bridgeObjectRelease();
        *(_QWORD *)(v16 + 8 * v9) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id result;
  uint64_t v18;
  char v19;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = *(_QWORD *)(v7 + 24);
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(v15 + 56);
        result = (id)swift_bridgeObjectRelease();
        *(_QWORD *)(v16 + 8 * v9) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for UIMenuIdentifier(0);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_release();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v7 = a1 & 1;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(double *)(v16[7] + 8 * v10) = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, v7, v16, a3);
    }
    if (v15 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, v7, v16, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int16 a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _BYTE v18[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_WORD *)(v16[7] + 2 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt32 a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of AlertStorage((uint64_t)a1, v16[7] + 240 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of AlertStorage((uint64_t)a1, v16[7] + 240 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt32 a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ConfirmationDialog(a1, v16[7] + 176 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ConfirmationDialog(a1, v16[7] + 176 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  _BYTE v20[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ToolbarAppearanceConfiguration((uint64_t)a1, v16[7] + 80 * v10);
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ToolbarAppearanceConfiguration((uint64_t)a1, v16[7] + 80 * v10);
LABEL_11:
      outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v20);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v20, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 48 * v10);
        v18 = a1[1];
        *v17 = *a1;
        v17[1] = v18;
        v17[2] = a1[2];
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a7 & 1) != 0)
    {
LABEL_7:
      v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (uint64_t *)(v23[7] + 32 * v17);
        swift_release();
        swift_release();
        result = swift_release();
        *v24 = a1;
        v24[1] = a2;
        v24[2] = a3;
        v24[3] = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a7 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a7 & 1);
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v17, a5, a6, a1, a2, a3, a4, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = v5;
  v11 = a4 & 1;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = *(_QWORD *)(v12 + 24);
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(v20 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v21 + 8 * v14) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);
      return outlined copy of TabCustomizationID.Base();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  char v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;

  v6 = (_QWORD **)v5;
  v11 = a4 & 1;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v20[7] + v14) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
    if ((v18 & 1) == (v21 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);
      return outlined copy of TabCustomizationID.Base();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ScrollViewCommitInfo(a1, (uint64_t *)(v16[7] + 80 * v10));
      return (uint64_t *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, (uint64_t)a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of ScrollViewCommitInfo(a1, (uint64_t *)(v16[7] + 80 * v10));
      return (uint64_t *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, (uint64_t)a1, v16);
    }
  }
  result = (uint64_t *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(void *a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  id result;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  double *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  result = (id)(v12 + v13);
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= (uint64_t)result && (a2 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = (double *)(v17[7] + 16 * v11);
        *v18 = a3;
        v18[1] = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v16 >= (uint64_t)result && (a2 & 1) == 0)
    {
      result = specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a2 & 1);
    result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = (unint64_t)result;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v11, (uint64_t)a1, v17, a3, a4);
      return a1;
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  char v18;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= (uint64_t)result && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 48 * v9);
        v17 = a1[1];
        *v16 = *a1;
        v16[1] = v17;
        v16[2] = a1[2];
        return result;
      }
      goto LABEL_11;
    }
    if (v14 >= (uint64_t)result && (a3 & 1) == 0)
    {
      result = specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a3 & 1);
    result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = (unint64_t)result;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v9 = a3 & 1;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v9, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        v22 = *(void **)v21;
        swift_bridgeObjectRelease();

        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt32 a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_release();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of TouchEvent((uint64_t)a1, v18[7] + 112 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of TouchEvent((uint64_t)a1, v18[7] + 112 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined init with take of NavigationSplitViewColumnWidth(a1, v16[7] + 40 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined init with take of NavigationSplitViewColumnWidth(a1, v16[7] + 40 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1(v17);
        return outlined init with take of OptionalBinaryInteger(a1, v17);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  _BYTE v21[40];

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    v18 = *v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;
      *(_QWORD *)v19 = a1;
      *(_BYTE *)(v19 + 8) = a2 & 1;
      *(_BYTE *)(v19 + 9) = HIBYTE(a2);
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = result;
  v18 = *v5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 0xFF01, v18);
  outlined init with take of TableColumnCustomizationID.Base(a3, (uint64_t)v21);
  return outlined retain of TableColumnCustomizationID.Base((uint64_t)v21);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 80 * v10);
        v18 = a1[3];
        v17[2] = a1[2];
        v17[3] = v18;
        *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)((char *)a1 + 57);
        v19 = a1[1];
        *v17 = *a1;
        v17[1] = v19;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v16[7] + v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v10 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        result = swift_release();
        *(_QWORD *)(v24 + 8 * v17) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, Swift::UInt32 a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 16 * v12;
        result = swift_bridgeObjectRelease();
        *(_QWORD *)v19 = a1;
        *(_WORD *)(v19 + 8) = a2;
        *(_BYTE *)(v19 + 10) = BYTE2(a2);
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 0xFFFFFF, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2 & 0xFFFFFF, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(const void *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of TabEntry((uint64_t)a1, v18[7] + 272 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of TabEntry((uint64_t)a1, v18[7] + 272 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];

        *(_QWORD *)(v17 + 8 * v10) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return;
    }
  }
  type metadata accessor for UISplitViewControllerColumn(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of SizeFittingState.Child((uint64_t)a1, v18[7] + 48 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of SizeFittingState.Child((uint64_t)a1, v18[7] + 48 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_retain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt32 a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of InspectorStorage(a1, v16[7] + 120 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of InspectorStorage(a1, v16[7] + 120 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3, double a4, double a5, double a6)
{
  _QWORD *v6;
  _QWORD **v7;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  double *v23;
  char v24;

  v7 = (_QWORD **)v6;
  v13 = a1 & 1;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = (double *)(v22[7] + 32 * v16);
        *v23 = a3;
        v23[1] = a4;
        v23[2] = a5;
        v23[3] = a6;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v16, v13, v22, a3, a4, a5, a6);
    }
    if (v21 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v20 & 1) == (v24 & 1))
    {
      v16 = result;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v16, v13, v22, a3, a4, a5, a6);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = *(_QWORD *)(v7 + 24);
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(v15 + 56);

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  type metadata accessor for UIMenuIdentifier(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE v31[48];

  v4 = (_QWORD **)v3;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  v22 = a1[4];
  v23 = a1[5];
  v24 = *((_BYTE *)a1 + 48);
  v11 = (_QWORD *)*v3;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 56 * v13;
      *(_QWORD *)v20 = v8;
      *(_QWORD *)(v20 + 8) = v7;
      *(_QWORD *)(v20 + 16) = v9;
      *(_BYTE *)(v20 + 24) = v10;
      *(_QWORD *)(v20 + 32) = v22;
      *(_QWORD *)(v20 + 40) = v23;
      *(_BYTE *)(v20 + 48) = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v17 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v13 = result;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of TableRowID(a2, (uint64_t)v31);
  *(_QWORD *)&v25 = v8;
  *((_QWORD *)&v25 + 1) = v7;
  v26 = v9;
  v27 = v10;
  v28 = v22;
  v29 = v23;
  v30 = v24;
  return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v31, &v25, v19);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  char v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= result && (a6 & 1) != 0)
    goto LABEL_9;
  if (v21 >= result && (a6 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_13:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = result;
LABEL_9:
  v23 = a4 & 1;
  v24 = *v7;
  if ((v20 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, v23, v24);
  v25 = v24[7] + 32 * v16;
  *(_QWORD *)v25 = a1;
  *(_QWORD *)(v25 + 8) = a2;
  *(_QWORD *)(v25 + 16) = a3;
  *(_BYTE *)(v25 + 24) = v23 != 0;
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, _OWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of PositionedNavigationDestination.Storage.SeededRequest((uint64_t)a1, v16[7] + 144 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of PositionedNavigationDestination.Storage.SeededRequest((uint64_t)a1, v16[7] + 144 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, _OWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_DWORD *)(v16[7] + 4 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
      return _HashTable.occupiedBucket(after:)();
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

double specialized static SpatialEventCollection.Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double result;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    result = *(double *)(a1 + 8);
    if (result == *(double *)(a2 + 8))
      __asm { BR              X1 }
  }
  return result;
}

void sub_1872530D0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Event.ID, &type metadata for SpatialEventCollection.Event.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Event.ID, &type metadata for SpatialEventCollection.Event.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Event.Kind, &type metadata for SpatialEventCollection.Event.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.Kind and conformance SpatialEventCollection.Event.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Event.Phase, &type metadata for SpatialEventCollection.Event.Phase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.Phase and conformance SpatialEventCollection.Event.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Event.InputDevicePose, &type metadata for SpatialEventCollection.Event.InputDevicePose);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event.InputDevicePose and conformance SpatialEventCollection.Event.InputDevicePose);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Event, &type metadata for SpatialEventCollection.Event);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Event and conformance SpatialEventCollection.Event);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Index, &type metadata for SpatialEventCollection.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Index, &type metadata for SpatialEventCollection.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Index and conformance SpatialEventCollection.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection and conformance SpatialEventCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection, &type metadata for SpatialEventCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection, &type metadata for SpatialEventCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection and conformance SpatialEventCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in SpatialEventCollection()
{
  return lazy protocol witness table accessor for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<SpatialEventCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEA200], MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SpatialEventCollection()
{
  return lazy protocol witness table accessor for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<SpatialEventCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SpatialEventCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<SpatialEventCollection> and conformance DefaultIndices<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for DefaultIndices<SpatialEventCollection>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DefaultIndices<SpatialEventCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type SpatialEventCollection and conformance SpatialEventCollection();
    v7 = a3(a1, &type metadata for SpatialEventCollection, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator;
  if (!lazy protocol witness table cache variable for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialEventCollection.Iterator, &type metadata for SpatialEventCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventCollection.Iterator and conformance SpatialEventCollection.Iterator);
  }
  return result;
}

__n128 sub_1872534F0@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 72);
  result = *(__n128 *)(a1 + 56);
  *a2 = result;
  a2[1].n128_u8[0] = v2;
  return result;
}

__n128 sub_187253504(__n128 *a1, uint64_t a2)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *(__n128 *)(a2 + 56) = *a1;
  *(_BYTE *)(a2 + 72) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection()
{
  return &type metadata for SpatialEventCollection;
}

uint64_t getEnumTagSinglePayload for SpatialEventCollection.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialEventCollection.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event()
{
  return &type metadata for SpatialEventCollection.Event;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.ID()
{
  return &type metadata for SpatialEventCollection.Event.ID;
}

uint64_t storeEnumTagSinglePayload for SpatialEventCollection.Event.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187253630 + 4 * byte_187C18EA1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187253664 + 4 * byte_187C18E9C[v4]))();
}

uint64_t sub_187253664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18725366C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187253674);
  return result;
}

uint64_t sub_187253680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187253688);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_18725368C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187253694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.Kind()
{
  return &type metadata for SpatialEventCollection.Event.Kind;
}

uint64_t storeEnumTagSinglePayload for SpatialEventCollection.Event.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1872536FC + 4 * byte_187C18EAB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187253730 + 4 * byte_187C18EA6[v4]))();
}

uint64_t sub_187253730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187253738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187253740);
  return result;
}

uint64_t sub_18725374C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187253754);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187253758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187253760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.Phase()
{
  return &type metadata for SpatialEventCollection.Event.Phase;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Event.InputDevicePose()
{
  return &type metadata for SpatialEventCollection.Event.InputDevicePose;
}

uint64_t destroy for SpatialEventCollection.Iterator()
{
  return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
}

_QWORD *initializeWithCopy for SpatialEventCollection.Iterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

_QWORD *assignWithCopy for SpatialEventCollection.Iterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  return a1;
}

uint64_t assignWithTake for SpatialEventCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialEventCollection.Iterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SpatialEventCollection.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Iterator()
{
  return &type metadata for SpatialEventCollection.Iterator;
}

uint64_t destroy for SpatialEventCollection.Index(uint64_t a1)
{
  return outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SpatialEventCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SpatialEventCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SpatialEventCollection.Index(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for SpatialEventCollection.Index()
{
  return &type metadata for SpatialEventCollection.Index;
}

uint64_t outlined assign with take of NavigationColumnState(uint64_t a1, uint64_t a2)
{
  assignWithTake for NavigationColumnState(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  assignWithTake for ToolbarAppearanceConfiguration(a2, a1);
  return a2;
}

uint64_t outlined assign with take of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  assignWithTake for OrnamentPresentation(a2, a1);
  return a2;
}

uint64_t outlined assign with take of NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  assignWithTake for NavigationDestinationPresentation(a2, a1);
  return a2;
}

uint64_t outlined assign with take of SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  assignWithTake for SizeFittingState.Child(a2, a1);
  return a2;
}

uint64_t outlined assign with take of TouchEvent(uint64_t a1, uint64_t a2)
{
  assignWithTake for TouchEvent(a2, a1);
  return a2;
}

uint64_t *outlined assign with take of ScrollViewCommitInfo(_OWORD *a1, uint64_t *a2)
{
  assignWithTake for ScrollViewCommitInfo(a2, a1);
  return a2;
}

uint64_t outlined assign with take of InspectorStorage(uint64_t a1, uint64_t a2)
{
  assignWithTake for InspectorStorage(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  assignWithTake for ConfirmationDialog(a2, a1);
  return a2;
}

uint64_t outlined assign with take of AlertStorage(uint64_t a1, uint64_t a2)
{
  assignWithTake for AlertStorage(a2, a1);
  return a2;
}

uint64_t outlined assign with take of TabEntry(uint64_t a1, uint64_t a2)
{
  assignWithTake for TabEntry(a2, a1);
  return a2;
}

uint64_t outlined assign with take of PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  assignWithTake for PositionedNavigationDestination.Storage.SeededRequest(a2, a1);
  return a2;
}

uint64_t outlined assign with take of UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  assignWithTake for UpdateViewDestinationRequest(a2, a1);
  return a2;
}

uint64_t outlined assign with take of NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  assignWithTake for NavigationState.StackContent.PositionedView(a2, a1);
  return a2;
}

void __swiftcall WindowMenuBarExtraStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowMenuBarExtraStyle._makeMenuBarExtra(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static MenuBarExtraStyle<>.window.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowMenuBarExtraStyle()
{
  return &type metadata for WindowMenuBarExtraStyle;
}

uint64_t LinearProgressViewStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t LinearProgressViewStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a1;
  return result;
}

uint64_t LinearProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  v9 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>();
  return closure #1 in LinearProgressViewStyle.makeBody(configuration:)((uint64_t)v8, a1, (_BYTE *)(a2 + *(int *)(v6 + 44)));
}

uint64_t closure #1 in LinearProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  _BYTE *v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v45 - v12;
  outlined retain of LinearProgressViewStyle(a1);
  static Semantics.v5.getter();
  v14 = isLinkedOnOrAfter(_:)();
  v49 = a3;
  v50 = v9;
  if ((v14 & 1) != 0)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_BYTE *)(a1 + 24);
    outlined retain of LinearProgressViewStyle(a1);
    outlined copy of Environment<Bool>.Content(v15, v16);
    v17 = specialized Environment.wrappedValue.getter(v15, v16);
    outlined consume of Environment<Bool>.Content(v15, v16);
    outlined release of LinearProgressViewStyle(a1);
    outlined release of LinearProgressViewStyle(a1);
    if (v17 == 2)
    {
      v18 = 0;
      v19 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    outlined release of LinearProgressViewStyle(a1);
  }
  v19 = 0;
  v18 = *(unsigned __int8 *)(a2 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 28));
LABEL_6:
  v20 = *(_OWORD *)(a1 + 16);
  v56 = *(_OWORD *)a1;
  v57 = v20;
  v58 = *(_QWORD *)(a1 + 32);
  LinearProgressViewStyle.progressBar(configuration:)(a2, (uint64_t)v13);
  outlined retain of LinearProgressViewStyle(a1);
  static Semantics.v5.getter();
  v21 = isLinkedOnOrAfter(_:)();
  v47 = v18;
  v48 = v19;
  if ((v21 & 1) == 0)
  {
    outlined release of LinearProgressViewStyle(a1);
    goto LABEL_10;
  }
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_BYTE *)(a1 + 24);
  outlined retain of LinearProgressViewStyle(a1);
  outlined copy of Environment<Bool>.Content(v22, v23);
  v24 = specialized Environment.wrappedValue.getter(v22, v23);
  outlined consume of Environment<Bool>.Content(v22, v23);
  outlined release of LinearProgressViewStyle(a1);
  outlined release of LinearProgressViewStyle(a1);
  if (v24 != 2)
  {
LABEL_10:
    v51 = *(_BYTE *)(a2 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 32));
    static Color.secondary.getter();
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    View.defaultForegroundColor(_:)();
    swift_release();
    v31 = v56;
    v32 = *((_QWORD *)&v56 + 1);
    v33 = v57;
    v34 = static Font.caption.getter();
    KeyPath = swift_getKeyPath();
    v51 = v31;
    v52 = v32;
    v53 = v33;
    v54 = KeyPath;
    v55 = v34;
    type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    View.monospacedDigit()();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v46 = v56;
    v25 = v57;
    v45 = *((_QWORD *)&v56 + 1);
    v26 = *((_QWORD *)&v57 + 1);
    v27 = v58;
    v28 = v59;
    v29 = v60;
    v30 = v61;
    goto LABEL_11;
  }
  v45 = 0;
  v46 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
LABEL_11:
  v36 = (uint64_t)v13;
  v37 = (uint64_t)v50;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>);
  v38 = v49;
  *v49 = v47;
  v38[1] = v48;
  type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)();
  v40 = v39;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, (uint64_t)&v38[*(int *)(v39 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>);
  v41 = (uint64_t *)&v38[*(int *)(v40 + 64)];
  v43 = v45;
  v42 = v46;
  *v41 = v46;
  v41[1] = v43;
  v41[2] = v25;
  v41[3] = v26;
  v41[4] = v27;
  v41[5] = v28;
  v41[6] = v29;
  v41[7] = v30;
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(v42, v43);
  outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(v36);
  outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(v42, v43);
  return outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(v37);
}

uint64_t LinearProgressViewStyle.progressBar(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v43 = a2;
  v46 = type metadata accessor for LinearUIKitProgressView();
  MEMORY[0x1E0C80A78](v46, v4);
  v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v44 = (uint64_t)&v39 - v8;
  v9 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v42 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v39 - v14;
  v39 = type metadata accessor for ArchivableLinearProgressView(0);
  MEMORY[0x1E0C80A78](v39, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v39 - v21;
  v23 = *(_QWORD *)v2;
  v24 = *(unsigned __int8 *)(v2 + 8);
  v25 = *(_QWORD *)(v2 + 16);
  v26 = *(unsigned __int8 *)(v2 + 24);
  v27 = *(_QWORD *)(v2 + 32);
  v40 = v15;
  v41 = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v15, type metadata accessor for ProgressViewStyleConfiguration);
  outlined copy of Environment<Color?>.Content(v23, v24);
  v48 = v25;
  v47 = v26;
  outlined copy of Environment<Bool>.Content(v25, v26);
  if (v27)
  {
    swift_retain();
    v28 = v27;
  }
  else
  {
    outlined copy of Environment<Color?>.Content(v23, v24);
    v28 = specialized Environment.wrappedValue.getter(v23, v24);
    outlined consume of Environment<Color?>.Content(v23, v24);
  }
  swift_retain();
  outlined consume of Environment<Color?>.Content(v23, v24);
  v29 = v48;
  v30 = v47;
  outlined consume of Environment<Bool>.Content(v48, v47);
  swift_release();
  outlined init with take of TableCellFormula((uint64_t)v40, (uint64_t)v18, type metadata accessor for ProgressViewStyleConfiguration);
  *(_QWORD *)&v18[*(int *)(v39 + 20)] = v28;
  outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)v22, type metadata accessor for ArchivableLinearProgressView);
  v31 = (uint64_t)v22;
  v32 = v43;
  outlined init with take of TableCellFormula(v31, v43, type metadata accessor for ArchivableLinearProgressView);
  v33 = v42;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v41, v42, type metadata accessor for ProgressViewStyleConfiguration);
  outlined copy of Environment<Color?>.Content(v23, v24);
  outlined copy of Environment<Bool>.Content(v29, v30);
  swift_retain();
  if (!v27)
  {
    outlined copy of Environment<Color?>.Content(v23, v24);
    v27 = specialized Environment.wrappedValue.getter(v23, v24);
    outlined consume of Environment<Color?>.Content(v23, v24);
  }
  v34 = v32
      + *(int *)(type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>()
               + 52);
  swift_retain();
  outlined consume of Environment<Color?>.Content(v23, v24);
  outlined consume of Environment<Bool>.Content(v48, v47);
  swift_release();
  v35 = v45;
  outlined init with take of TableCellFormula(v33, v45, type metadata accessor for ProgressViewStyleConfiguration);
  *(_QWORD *)(v35 + *(int *)(v46 + 20)) = v27;
  v36 = v35;
  v37 = v44;
  outlined init with take of TableCellFormula(v36, v44, (uint64_t (*)(_QWORD))type metadata accessor for LinearUIKitProgressView);
  return outlined init with take of TableCellFormula(v37, v34, (uint64_t (*)(_QWORD))type metadata accessor for LinearUIKitProgressView);
}

uint64_t protocol witness for ProgressViewStyle.makeBody(configuration:) in conformance LinearProgressViewStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  v9 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>();
  return closure #1 in LinearProgressViewStyle.makeBody(configuration:)((uint64_t)v8, a1, (_BYTE *)(a2 + *(int *)(v6 + 44)));
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>);
  }
}

void type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t TupleTypeMetadata3;
  uint64_t v2;

  if (!lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?))
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label??, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, v0);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v2)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?));
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>();
    type metadata accessor for ArchivableLinearProgressView(255);
    type metadata accessor for LinearUIKitProgressView();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE5A68]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>)
  {
    v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, (uint64_t (*)(uint64_t))type metadata accessor for [AnyFontModifier], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in LinearProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for LinearProgressViewStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return swift_release();
}

uint64_t initializeWithCopy for LinearProgressViewStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for LinearProgressViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = a2[2];
  v9 = *((_BYTE *)a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = a1[2];
  v11 = *((_BYTE *)a1 + 24);
  a1[2] = v8;
  *((_BYTE *)a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *assignWithTake for LinearProgressViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  a1[4] = a2[4];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LinearProgressViewStyle()
{
  return &type metadata for LinearProgressViewStyle;
}

uint64_t sub_187254CD4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label??, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>, ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t outlined retain of LinearProgressViewStyle(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  outlined copy of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  return a1;
}

uint64_t outlined release of LinearProgressViewStyle(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    v2 = &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_0(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableLinearProgressView, LinearUIKitProgressView>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<ProgressViewStyleConfiguration.CurrentValueLabel?, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void PagingScrollTargetBehavior.decelerationRate(context:)(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t PagingScrollTargetBehavior.makeInfo(_:context:axis:)(uint64_t a1, uint64_t a2, char a3)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = (double *)(a2 + 88);
  if ((a3 & 1) != 0)
    v4 = (double *)(a2 + 96);
  v5 = *v4;
  ScrollTarget.rect.getter();
  v7 = v6;
  v9 = v8;
  ScrollTarget.rect.getter();
  if ((a3 & 1) != 0)
    v10 = v9;
  else
    v10 = v7;
  return round(v10 / v5);
}

uint64_t protocol witness for ScrollTargetBehavior.updateTarget(_:context:) in conformance PagingScrollTargetBehavior(uint64_t a1, __int128 *a2)
{
  return PagingScrollTargetBehavior.updateTarget(_:context:)(a1, a2);
}

uint64_t protocol witness for ScrollTargetBehavior._updateEnvironment(_:context:) in conformance PagingScrollTargetBehavior(uint64_t a1)
{
  return PagingScrollTargetBehavior._updateEnvironment(_:context:)(a1);
}

uint64_t PagingScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4[20];
  char v5;

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v5 = 3;
  outlined init with copy of ScrollEnvironmentProperties(v4, (uint64_t)&v3);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v4);
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.alwaysByFew.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.alwaysByOne.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void ViewAlignedScrollTargetBehavior.LimitBehavior.alwaysByOne.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

SwiftUI::ViewAlignedScrollTargetBehavior __swiftcall ViewAlignedScrollTargetBehavior.init(limitBehavior:)(SwiftUI::ViewAlignedScrollTargetBehavior limitBehavior)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)limitBehavior.limitBehavior.role;
  return limitBehavior;
}

void ViewAlignedScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, __int128 *a2)
{
  _BYTE *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  char v9;
  __int128 v10;
  double v11;
  double v12;
  double *v13;
  double *v14;
  char v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(__int128 *, _QWORD);
  _QWORD v26[4];
  char v27;
  double v28;
  double v29;
  double v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[3];
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v4 = a2[7];
  v49 = a2[6];
  v50 = v4;
  v51 = a2[8];
  v5 = a2[3];
  v45 = a2[2];
  v46 = v5;
  v6 = a2[5];
  v47 = a2[4];
  v48 = v6;
  v7 = a2[1];
  v43 = *a2;
  v44 = v7;
  if (BYTE8(v49) == 2)
  {
    v8 = 1;
  }
  else
  {
    if (BYTE8(v49) != 1)
      return;
    v8 = 0;
  }
  if (BYTE9(v49) == 2 && *v2 != 2)
    specialized ScrollTargetBehavior.clampTarget(_:context:)(a1, (uint64_t)&v43);
  v9 = *(_BYTE *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 16);
  v32 = *(_OWORD *)a1;
  v33 = v10;
  v34 = *(_OWORD *)(a1 + 32);
  LOBYTE(v35) = v9;
  ScrollTarget.rect.getter();
  v13 = (double *)&v48 + 1;
  v14 = (double *)&v48;
  if (v8)
    v13 = (double *)&v49;
  else
    v14 = (double *)&v47 + 1;
  if (v8)
    v11 = v12;
  if (v11 > 0.0 && v11 < *v14 - *v13)
  {
    v15 = *(_BYTE *)(a1 + 48);
    v16 = *(_OWORD *)a1;
    v17 = *(_OWORD *)(a1 + 32);
    v41[1] = *(_OWORD *)(a1 + 16);
    v41[2] = v17;
    v42 = v15;
    v38 = v49;
    v39 = v50;
    v40 = v51;
    v41[0] = v16;
    v34 = v45;
    v35 = v46;
    v36 = v47;
    v37 = v48;
    v32 = v43;
    v33 = v44;
    ViewAlignedScrollTargetBehavior.makeTarget(_:context:)((uint64_t)v41, (uint64_t)&v32, (uint64_t)v26);
    v18 = v28;
    v19 = v29;
    v20 = v30;
    v21 = v31;
    if ((v27 & 1) == 0)
    {
      v22 = v26[0];
      v23 = v26[1];
      v25 = (void (*)(__int128 *, _QWORD))ScrollTarget.rect.modify();
      if ((v8 & 1) != 0)
        v24[1] = v23;
      else
        *v24 = v22;
      v25(&v32, 0);
    }
    if ((v21 & 1) == 0)
      specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(v18, v19, v20, a1, (uint64_t)&v43, v8);
  }
}

void ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  double v28;
  int v29;
  uint64_t v30;
  char v31;
  double v32;
  double v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  double MinY;
  double MaxX;
  double MaxY;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  double v64;
  double v65;
  __int128 v67;
  _OWORD *v68;
  int v69;
  _DWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  CGFloat v76;
  double v77;
  double v78;
  CGFloat v79;
  uint64_t v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  _BYTE *v140;
  _OWORD *v141;
  int v142;
  uint64_t v143;
  double v144;
  __int128 v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  CGFloat MinX;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  CGFloat v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 v197;
  double v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  _BYTE v204[7];
  __int128 v205;
  double v206;
  uint64_t v207;
  char *v208;
  _OWORD v209[2];
  char v210;
  _BYTE v211[40];
  _DWORD v212[2];
  __int128 v213;
  _BYTE v214[23];
  char v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (void (*)(uint64_t))MEMORY[0x1E0DF2258]);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v134 - v11;
  v13 = *(uint64_t *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(unsigned __int8 *)(a1 + 48);
  v20 = *(uint64_t *)a2;
  v151 = *(_QWORD *)(a2 + 8);
  v152 = v20;
  v21 = *(_QWORD *)(a2 + 16);
  v149 = *(_QWORD *)(a2 + 24);
  v150 = v21;
  v148 = *(_QWORD *)(a2 + 32);
  v147 = *(_QWORD *)(a2 + 40);
  v146 = *(unsigned __int8 *)(a2 + 48);
  v215 = v146;
  v22 = *(_OWORD *)(a2 + 49);
  v23 = *(_OWORD *)(a2 + 65);
  *(_QWORD *)&v214[15] = *(_QWORD *)(a2 + 80);
  v213 = v22;
  *(_OWORD *)v214 = v23;
  v24 = *(_QWORD *)(a2 + 88);
  v153 = *(_QWORD *)(a2 + 96);
  v154 = v24;
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_DWORD *)((char *)v212 + 3) = *(_DWORD *)(a2 + 108);
  v212[0] = *(_DWORD *)(a2 + 105);
  v145 = *(_OWORD *)(a2 + 112);
  v26 = v145;
  v164 = *(_QWORD *)(v145 + 16);
  if (!v164)
  {
    MEMORY[0x18D75AC90](0xD000000000000075, 0x8000000187BDA890);
    v27 = 0uLL;
    v28 = 0.0;
    goto LABEL_6;
  }
  v144 = *(double *)(a2 + 128);
  v143 = *(uint64_t *)(a2 + 136);
  v27 = 0uLL;
  v28 = 0.0;
  v161 = v18;
  v162 = v17;
  v160 = v19;
  if (v25 == 1)
  {
    v142 = 1;
    v135 = v12;
    v136 = v10;
    v137 = a3;
    v29 = 0;
    v30 = v154;
    goto LABEL_8;
  }
  if (v25 != 2)
  {
LABEL_6:
    v31 = 1;
    v32 = 0.0;
    v33 = 0.0;
    v34 = 1;
    v35 = 0uLL;
    goto LABEL_77;
  }
  v142 = 2;
  v135 = v12;
  v136 = v10;
  v137 = a3;
  v29 = 1;
  v30 = v153;
LABEL_8:
  v163 = v30;
  v208 = (char *)MEMORY[0x1E0DEE9D8];
  v36 = v145 + 32;
  v140 = v204;
  v141 = (_OWORD *)((char *)&v196 + 1);
  swift_bridgeObjectRetain();
  v37 = 0;
  v38 = 0.0;
  v158 = v14;
  v159 = v13;
  v156 = v16;
  v157 = v15;
  v155 = v26;
  do
  {
    if (v37 >= *(_QWORD *)(v26 + 16))
    {
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    outlined init with copy of TableColumnList(v36, (uint64_t)&v182);
    v39 = v186;
    v40 = __swift_project_boxed_opaque_existential_1(&v182, v185);
    MEMORY[0x1E0C80A78](v40, v41);
    *((_BYTE *)&v134 - 32) = v29;
    *(&v134 - 3) = v163;
    *(&v134 - 2) = (uint64_t)&v208;
    (*(void (**)(uint64_t (*)(uint64_t, uint64_t)))(v39 + 24))(partial apply for closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:));
    v42 = v208;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v42);
    v43 = *((_QWORD *)v42 + 2);
    *(_QWORD *)&v190 = v42 + 32;
    v191 = v43;
    specialized UnsafeMutableBufferPointer._stableSortImpl(by:)((uint64_t *)&v190, v29);
    v208 = v42;
    v44 = *((_QWORD *)v42 + 2);
    if (v44)
    {
      v45 = *((double *)v42 + 4);
      v46 = *((double *)v42 + 5);
      v47 = *((double *)v42 + 6);
      v48 = *((double *)v42 + 7);
      v49 = (uint64_t)&v42[32 * v44 + 32];
      v50 = *(double *)(v49 - 32);
      v51 = *(double *)(v49 - 24);
      v52 = *(double *)(v49 - 16);
      v53 = *(double *)(v49 - 8);
      v216.origin.x = v45;
      v216.origin.y = v46;
      v216.size.width = v47;
      v216.size.height = v48;
      MinX = CGRectGetMinX(v216);
      v217.origin.x = v45;
      v217.origin.y = v46;
      v217.size.width = v47;
      v217.size.height = v48;
      MinY = CGRectGetMinY(v217);
      v218.origin.x = v50;
      v218.origin.y = v51;
      v218.size.width = v52;
      v218.size.height = v53;
      MaxX = CGRectGetMaxX(v218);
      v219.origin.x = v50;
      v219.origin.y = v51;
      v219.size.width = v52;
      v219.size.height = v53;
      MaxY = CGRectGetMaxY(v219);
      if (v29)
        MaxX = MaxY;
      else
        MinY = MinX;
      if (MinY > MaxX)
        goto LABEL_85;
      MinX = v38;
      v58 = v158;
      v57 = v159;
      v190 = *(double *)&v159;
      v191 = v158;
      v60 = v156;
      v59 = v157;
      v192 = v157;
      v193 = v156;
      v62 = v161;
      v61 = v162;
      v194 = v162;
      v195 = v161;
      v63 = v160;
      LOBYTE(v196) = v160;
      ScrollTarget.rect.getter();
      if (v29)
        v64 = v65;
      if (MinY <= v64 && v64 <= MaxX)
      {
        v190 = *(double *)&v57;
        v191 = v58;
        v192 = v59;
        v193 = v60;
        v194 = v61;
        v195 = v62;
        LOBYTE(v196) = v63;
        swift_bridgeObjectRetain();
        ScrollTarget.rect.getter();
        v190 = *(double *)&v152;
        v191 = v151;
        v192 = v150;
        v193 = v149;
        v194 = v148;
        v195 = v147;
        LOBYTE(v196) = v146;
        v67 = *(_OWORD *)v214;
        v68 = v141;
        *v141 = v213;
        v68[1] = v67;
        *(_QWORD *)((char *)v68 + 31) = *(_QWORD *)&v214[15];
        v201 = v154;
        v202 = v153;
        v203 = v142;
        v69 = v212[0];
        v70 = v140;
        *(_DWORD *)(v140 + 3) = *(_DWORD *)((char *)v212 + 3);
        *v70 = v69;
        v205 = v145;
        v206 = v144;
        v207 = v143;
        ViewAlignedScrollTargetBehavior.findClosestRect(rects:targetOffset:context:)((unint64_t)v42, (uint64_t)&v190, (uint64_t)v209);
        v138 = v209[0];
        v139 = v209[1];
        v31 = v210;
        swift_bridgeObjectRelease();
        outlined init with take of CGRect?((uint64_t)v209, (uint64_t)v211);
        if ((v211[32] & 1) == 0)
        {
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
          swift_bridgeObjectRelease();
          v34 = 1;
          v32 = 0.0;
          v33 = 0.0;
          v27 = v138;
          v35 = v139;
          a3 = v137;
LABEL_76:
          v28 = 0.0;
          goto LABEL_77;
        }
      }
      if (*((_QWORD *)v42 + 2) >= 2uLL)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
      v208 = (char *)MEMORY[0x1E0DEE9D8];
      v26 = v155;
      v38 = MinX;
    }
    ++v37;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
    v36 += 40;
  }
  while (v164 != v37);
  swift_bridgeObjectRelease();
LABEL_30:
  v71 = (uint64_t)v208;
  v72 = *((_QWORD *)v208 + 2);
  v73 = v136;
  if (v72 < 2
    || (v74 = ViewAlignedScrollTargetBehavior.findNextClosestRectIndex(index:delta:rects:axis:)(0, 1, (uint64_t)v208, v29), (v75 & 1) != 0))
  {
    static Log.scroll.getter();
    v123 = type metadata accessor for Logger();
    v124 = *(_QWORD *)(v123 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v73, 1, v123) == 1)
    {
      outlined destroy of Logger?(v73);
    }
    else
    {
      v125 = Logger.logObject.getter();
      v126 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v125, v126))
      {
        v127 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v127 = 0;
        _os_log_impl(&dword_186E48000, v125, v126, "Invalid rects found to compare in view aligned behavior.", v127, 2u);
        MEMORY[0x18D760108](v127, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v73, v123);
    }
    swift_bridgeObjectRelease();
    v31 = 1;
    v32 = 0.0;
    v33 = 0.0;
    v34 = 1;
    v35 = 0uLL;
    a3 = v137;
    goto LABEL_75;
  }
  if (v74 >= v72)
  {
LABEL_86:
    __break(1u);
    return;
  }
  v76 = *(double *)(v71 + 32);
  v78 = *(double *)(v71 + 48);
  v77 = *(double *)(v71 + 56);
  v79 = *(double *)(v71 + 40);
  v80 = v71 + 32 + 32 * v74;
  v81 = *(double *)v80;
  v82 = *(double *)(v80 + 8);
  v83 = *(double *)(v80 + 16);
  v84 = *(double *)(v80 + 24);
  v220.origin.x = *(CGFloat *)v80;
  v220.origin.y = v82;
  v220.size.width = v83;
  v220.size.height = v84;
  MinX = CGRectGetMinX(v220);
  v221.origin.x = v81;
  v221.origin.y = v82;
  v221.size.width = v83;
  v221.size.height = v84;
  v85 = CGRectGetMinY(v221);
  v222.origin.x = v76;
  v222.origin.y = v79;
  v222.size.width = v78;
  v222.size.height = v77;
  v86 = CGRectGetMaxX(v222);
  v223.origin.x = v76;
  v223.origin.y = v79;
  v223.size.width = v78;
  v223.size.height = v77;
  v87 = CGRectGetMaxY(v223);
  if (v29)
    v88 = v77;
  else
    v88 = v78;
  v89 = MinX;
  if (v29)
    v89 = v85;
  else
    v87 = v86;
  v90 = v89 - v87;
  v33 = v88 + v89 - v87;
  if (v33 <= 0.0)
  {
    v128 = (uint64_t)v135;
    static Log.scroll.getter();
    v129 = type metadata accessor for Logger();
    v130 = *(_QWORD *)(v129 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129) == 1)
    {
      outlined destroy of Logger?(v128);
    }
    else
    {
      v131 = Logger.logObject.getter();
      v132 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v131, v132))
      {
        v133 = swift_slowAlloc();
        *(_DWORD *)v133 = 134218240;
        v190 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v133 + 12) = 2048;
        v190 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_186E48000, v131, v132, "No item length found in view aligned behavior, length %f, spacing %f.", (uint8_t *)v133, 0x16u);
        MEMORY[0x18D760108](v133, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v128, v129);
    }
    a3 = v137;
    swift_bridgeObjectRelease();
    v31 = 1;
    v32 = 0.0;
    v33 = 0.0;
    v34 = 1;
    v35 = 0uLL;
LABEL_75:
    v27 = 0uLL;
    goto LABEL_76;
  }
  v182 = v144;
  v183 = v143;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v190);
  *(double *)&v143 = v190;
  LODWORD(v155) = v191;
  LODWORD(v163) = v193;
  v154 = v194;
  v146 = v195;
  *(_QWORD *)&v145 = v196;
  LODWORD(v153) = v197;
  v164 = v192;
  MinX = v198;
  v91 = v199;
  v92 = v200;
  v93 = v201;
  v94 = v202;
  v95 = v203;
  v96 = v205;
  v97 = BYTE8(v205);
  LODWORD(v144) = Edge.Set.init(_:)();
  OptionalEdgeInsets.init()();
  v182 = MinX;
  LOBYTE(v183) = v91;
  v184 = v92;
  LOBYTE(v185) = v93;
  v186 = v94;
  v187 = v95;
  v188 = v96;
  v189 = v97;
  static OptionalEdgeInsets.none.getter();
  v166 = v174;
  v167 = v175;
  v168 = v176;
  v169 = v177;
  v170 = v178;
  v171 = v179;
  v172 = v180;
  v173 = v181;
  v98 = MEMORY[0x18D7593E8](&v182, &v166);
  v99 = v143;
  if ((v98 & 1) == 0)
    *(double *)&v99 = MinX;
  v190 = *(double *)&v99;
  v100 = v155;
  if ((v98 & 1) == 0)
    v100 = v91;
  LOBYTE(v191) = v100 & 1;
  v101 = v164;
  if ((v98 & 1) == 0)
    v101 = v92;
  v102 = v163;
  if ((v98 & 1) == 0)
    v102 = v93;
  v103 = v154;
  if ((v98 & 1) == 0)
    v103 = v94;
  v104 = v146;
  if ((v98 & 1) == 0)
    v104 = v95;
  v105 = v145;
  if ((v98 & 1) == 0)
    v105 = v96;
  v192 = v101;
  LOBYTE(v193) = v102 & 1;
  v106 = v153;
  if ((v98 & 1) == 0)
    v106 = v97;
  v194 = v103;
  LOBYTE(v195) = v104 & 1;
  v196 = v105;
  v197 = v106 & 1;
  OptionalEdgeInsets.in(edges:)();
  EdgeInsets.originOffset.getter();
  v108 = v107;
  v110 = v109;
  v190 = *(double *)&v152;
  v191 = v151;
  v192 = v150;
  v193 = v149;
  v194 = v148;
  v195 = v147;
  LOBYTE(v196) = v215;
  ScrollTarget.rect.getter();
  v112 = v111;
  v114 = v113;
  v190 = *(double *)&v159;
  v191 = v158;
  v192 = v157;
  v193 = v156;
  v194 = v162;
  v195 = v161;
  LOBYTE(v196) = v160;
  ScrollTarget.rect.getter();
  if (v29)
    v117 = v110;
  else
    v117 = v108;
  v118 = v117 - v90;
  if (v29)
    v119 = v114;
  else
    v119 = v112;
  if (v29)
    v120 = v116;
  else
    v120 = v115;
  if (v118 < 0.0)
    v121 = 0.0;
  else
    v121 = v118;
  v122 = round((v119 - v121) / v33);
  swift_bridgeObjectRelease();
  v28 = v122;
  v34 = 0;
  v32 = round((v120 - v121) / v33);
  v31 = 1;
  v35 = 0uLL;
  a3 = v137;
  v27 = 0uLL;
LABEL_77:
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v35;
  *(_BYTE *)(a3 + 32) = v31;
  *(double *)(a3 + 40) = v28;
  *(double *)(a3 + 48) = v32;
  *(double *)(a3 + 56) = v33;
  *(_BYTE *)(a3 + 64) = v34;
}

uint64_t closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(double a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t result;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;

  result = ScrollableCollectionSubview.frame.getter();
  v12 = v11;
  v14 = v13;
  if ((a4 & 1) != 0)
    v15 = v10;
  else
    v15 = v9;
  if (v15 <= a1 * 1.1)
  {
    v16 = v9;
    v17 = v10;
    v18 = *a5;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v18;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, (char *)v18);
      v18 = result;
      *a5 = result;
    }
    v20 = *(_QWORD *)(v18 + 16);
    v19 = *(_QWORD *)(v18 + 24);
    if (v20 >= v19 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, (char *)v18);
      v18 = result;
    }
    *(_QWORD *)(v18 + 16) = v20 + 1;
    v21 = (double *)(v18 + 32 * v20);
    *((_QWORD *)v21 + 4) = v12;
    *((_QWORD *)v21 + 5) = v14;
    v21[6] = v16;
    v21[7] = v17;
    *a5 = v18;
  }
  return result;
}

unint64_t ViewAlignedScrollTargetBehavior.findClosestRect(rects:targetOffset:context:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double v5;
  double v6;
  int v7;
  int v8;
  __int128 v9;
  char v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;

  v3 = result;
  v5 = *(double *)(a2 + 56);
  v6 = *(double *)(a2 + 64);
  v7 = *(unsigned __int8 *)(a2 + 104);
  v8 = *(unsigned __int8 *)(a2 + 105);
  v9 = 0uLL;
  v10 = 1;
  if (v7 != 2)
  {
    if (v7 != 1)
    {
      v16 = 0;
      v17 = 0;
LABEL_30:
      *(_OWORD *)a3 = v9;
      *(_QWORD *)(a3 + 16) = v16;
      *(_QWORD *)(a3 + 24) = v17;
      *(_BYTE *)(a3 + 32) = v10;
      return result;
    }
    v10 = 0;
  }
  v11 = ViewAlignedScrollTargetBehavior.findClosestRectIndex(rects:targetOffset:context:)(result);
  v13 = v12;
  ScrollTarget.rect.getter();
  result = ViewAlignedScrollTargetBehavior.findClosestRectIndex(rects:targetOffset:context:)(v3);
  if (((v13 | v14) & 1) != 0)
  {
LABEL_25:
    v16 = 0;
    v17 = 0;
    v10 = 1;
    v9 = 0uLL;
    goto LABEL_30;
  }
  if (v11 != result)
  {
    if ((v10 & 1) != 0)
      goto LABEL_26;
    v15 = 0;
    goto LABEL_14;
  }
  v15 = v8 != 4;
  if ((v10 & 1) == 0)
  {
LABEL_14:
    result = EnvironmentValues.layoutDirection.getter();
    if (v15)
    {
      if (v5 <= 0.0)
      {
        if (v5 >= 0.0)
          goto LABEL_26;
        if ((v21 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v21 & 1) == 0)
      {
        goto LABEL_20;
      }
LABEL_17:
      v18 = -1;
      goto LABEL_21;
    }
LABEL_26:
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)(v3 + 16))
    {
      v20 = v3 + 32 * v11;
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_33;
  }
  if (v8 == 4)
    goto LABEL_26;
  if (v6 <= 0.0)
  {
    if (v6 >= 0.0)
      goto LABEL_26;
    goto LABEL_17;
  }
LABEL_20:
  v18 = 1;
LABEL_21:
  result = ViewAlignedScrollTargetBehavior.findNextClosestRectIndex(index:delta:rects:axis:)(v11, v18, v3, v10);
  if ((v19 & 1) != 0)
    goto LABEL_25;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (result < *(_QWORD *)(v3 + 16))
  {
    v20 = v3 + 32 * result;
LABEL_29:
    v10 = 0;
    v16 = *(_QWORD *)(v20 + 48);
    v9 = *(_OWORD *)(v20 + 32);
    v17 = *(_QWORD *)(v20 + 56);
    goto LABEL_30;
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t ViewAlignedScrollTargetBehavior.findNextClosestRectIndex(index:delta:rects:axis:)(unint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  BOOL v8;
  double v9;
  uint64_t v10;
  double *v11;
  unint64_t v12;

  if (!a2)
    return result;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v4 <= result)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v5 = a3 + 32 * result;
  v6 = (double *)(v5 + 32);
  v7 = (double *)(v5 + 40);
  if ((a4 & 1) == 0)
    v7 = v6;
  v8 = __OFADD__(result, a2);
  result += a2;
  if (v8)
    goto LABEL_20;
  if (result >= v4)
    return 0;
  v9 = *v7;
  v10 = a3 + 32 * result + 40;
  while (1)
  {
    v11 = (double *)(v10 - 8);
    if ((a4 & 1) != 0)
      v11 = (double *)v10;
    if (v9 != *v11)
      return result;
    v12 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      goto LABEL_18;
    }
    result += a2;
    v10 += 32 * a2;
    if (v12 >= v4)
      return 0;
  }
}

uint64_t ViewAlignedScrollTargetBehavior.findClosestRectIndex(rects:targetOffset:context:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  double v5;
  double v6;
  double v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 <= 1)
    return 0;
  v2 = 0;
  v3 = swift_bridgeObjectRetain() + 72;
  for (i = 1; i != v1; ++i)
  {
    distance(_:_:)();
    v6 = v5;
    distance(_:_:)();
    if (v6 < v7)
      v2 = i;
    v3 += 32;
  }
  swift_bridgeObjectRelease();
  return v2;
}

SwiftUI::ViewAlignedScrollTargetBehavior __swiftcall ViewAlignedScrollTargetBehavior.init(limit:)(SwiftUI::ViewAlignedScrollTargetBehavior limit)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)limit.limitBehavior.role;
  return limit;
}

uint64_t ViewAlignedScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;
  uint64_t v5;
  int v6[20];
  char v7;

  if (*v1 - 1 >= 2)
  {
    if (*v1)
    {
      v2 = *(_QWORD *)(a1 + 8);
      type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      if (v2)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      v3 = 4;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      if (v2)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      v3 = 1;
    }
    v7 = v3;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v2)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v7 = 2;
  }
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

uint64_t AnyScrollTargetBehavior.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TableColumnList(v1, a1);
}

uint64_t AnyScrollTargetBehavior.base.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return outlined init with take of OptionalBinaryInteger(a1, v1);
}

uint64_t (*AnyScrollTargetBehavior.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AnyScrollTargetBehavior.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
}

uint64_t AnyScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5, v6);
}

uint64_t protocol witness for ScrollTargetBehavior.updateTarget(_:context:) in conformance AnyScrollTargetBehavior(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
}

uint64_t protocol witness for ScrollTargetBehavior._updateEnvironment(_:context:) in conformance AnyScrollTargetBehavior(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5, v6);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  CGFloat *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat *v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  double MinY;
  double v26;
  double v27;
  CGFloat v28;
  CGFloat *v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  Swift::Int v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  Swift::Int v51;
  uint64_t v52;
  CGFloat *v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat *v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  double v63;
  double v64;
  double v65;
  double v66;
  __int128 v67;
  Swift::Int v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  Swift::Int v134;
  Swift::Int v135;
  Swift::Int v136;
  double v137;
  double v138;
  uint64_t v139;
  CGFloat *v140;
  CGFloat MinX;
  CGFloat v142;
  CGFloat v143;
  Swift::Int v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;

  v4 = a2 & 1;
  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_139;
    if (v5)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, v4);
    return;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_147;
  v134 = v6;
  v131 = a1;
  if (v5 < 2)
  {
    v140 = (CGFloat *)(MEMORY[0x1E0DEE9D8] + 32);
    v133 = MEMORY[0x1E0DEE9D8];
    if (v5 != 1)
    {
      v12 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_106:
      v123 = v12;
      if (v13 >= 2)
      {
        v124 = *v131;
        do
        {
          v125 = v13 - 2;
          if (v13 < 2)
            goto LABEL_134;
          if (!v124)
            goto LABEL_146;
          v126 = v123;
          v127 = *(_QWORD *)&v123[16 * v125 + 32];
          v128 = *(_QWORD *)&v123[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((CGFloat *)(v124 + 32 * v127), (CGFloat *)(v124 + 32 * *(_QWORD *)&v123[16 * v13 + 16]), v124 + 32 * v128, v140, v4);
          if (v2)
            break;
          if (v128 < v127)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v126 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v126);
          if (v125 >= *((_QWORD *)v126 + 2))
            goto LABEL_136;
          v129 = &v126[16 * v125 + 32];
          *(_QWORD *)v129 = v127;
          *((_QWORD *)v129 + 1) = v128;
          v130 = *((_QWORD *)v126 + 2);
          if (v13 > v130)
            goto LABEL_137;
          memmove(&v126[16 * v13 + 16], &v126[16 * v13 + 32], 16 * (v130 - v13));
          v123 = v126;
          *((_QWORD *)v126 + 2) = v130 - 1;
          v13 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_103:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v133 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v8 = v7 >> 1;
    type metadata accessor for CGRect(0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v9 + 16) = v8;
    v133 = v9;
    v140 = (CGFloat *)(v9 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v132 = *a1 + 48;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v135 = v5;
  v139 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v5)
    {
      v15 = (CGFloat *)(v11 + 32 * v10);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = v15[3];
      v20 = (CGFloat *)(v11 + 32 * v14);
      v21 = *v20;
      v22 = v20[1];
      v23 = v20[2];
      v24 = v20[3];
      v145.origin.x = v16;
      v145.origin.y = v17;
      v145.size.width = v18;
      v145.size.height = v19;
      MinX = CGRectGetMinX(v145);
      v146.origin.x = v16;
      v146.origin.y = v17;
      v146.size.width = v18;
      v146.size.height = v19;
      MinY = CGRectGetMinY(v146);
      v147.origin.x = v21;
      v147.origin.y = v22;
      v147.size.width = v23;
      v147.size.height = v24;
      v26 = CGRectGetMinX(v147);
      v148.origin.x = v21;
      v148.origin.y = v22;
      v148.size.width = v23;
      v148.size.height = v24;
      v27 = CGRectGetMinY(v148);
      v28 = MinX;
      if ((_DWORD)v4)
        v28 = MinY;
      else
        v27 = v26;
      v137 = v27;
      v138 = v28;
      v10 = v14 + 2;
      if (v14 + 2 < v5)
      {
        v29 = (CGFloat *)(v132 + 32 * v14);
        while (1)
        {
          v30 = v29[2];
          v31 = v29[3];
          v32 = v29[4];
          v33 = v29[5];
          v34 = *(v29 - 2);
          v35 = *(v29 - 1);
          v36 = *v29;
          v37 = v29[1];
          v149.origin.x = v30;
          v149.origin.y = v31;
          v149.size.width = v32;
          v149.size.height = v33;
          v142 = CGRectGetMinX(v149);
          v150.origin.x = v30;
          v150.origin.y = v31;
          v150.size.width = v32;
          v150.size.height = v33;
          v38 = CGRectGetMinY(v150);
          v151.origin.x = v34;
          v151.origin.y = v35;
          v151.size.width = v36;
          v151.size.height = v37;
          v39 = CGRectGetMinX(v151);
          v152.origin.x = v34;
          v152.origin.y = v35;
          v152.size.width = v36;
          v152.size.height = v37;
          v40 = CGRectGetMinY(v152);
          v41 = v142;
          if ((_DWORD)v4)
            v41 = v38;
          else
            v40 = v39;
          if (v138 < v137 == v41 >= v40)
            break;
          ++v10;
          v29 += 4;
          if (v5 == v10)
          {
            v10 = v5;
            break;
          }
        }
      }
      if (v138 < v137)
      {
        if (v10 < v14)
          goto LABEL_140;
        if (v14 < v10)
        {
          v42 = 32 * v10;
          v43 = 32 * v14;
          v44 = v10;
          v45 = v14;
          do
          {
            if (v45 != --v44)
            {
              if (!v11)
                goto LABEL_145;
              v46 = (_OWORD *)(v11 + v43);
              v47 = v11 + v42;
              v48 = *(_OWORD *)(v11 + v43);
              v49 = *(_OWORD *)(v11 + v43 + 16);
              v50 = *(_OWORD *)(v11 + v42 - 16);
              *v46 = *(_OWORD *)(v11 + v42 - 32);
              v46[1] = v50;
              *(_OWORD *)(v47 - 32) = v48;
              *(_OWORD *)(v47 - 16) = v49;
            }
            ++v45;
            v42 -= 32;
            v43 += 32;
          }
          while (v45 < v44);
        }
      }
    }
    if (v10 < v5)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_138;
      if (v10 - v14 < v134)
        break;
    }
LABEL_55:
    if (v10 < v14)
      goto LABEL_133;
    v68 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v70 = *((_QWORD *)v12 + 2);
    v69 = *((_QWORD *)v12 + 3);
    v13 = v70 + 1;
    if (v70 >= v69 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v13;
    v71 = v12 + 32;
    v72 = &v12[16 * v70 + 32];
    *(_QWORD *)v72 = v68;
    *((_QWORD *)v72 + 1) = v10;
    if (v70)
    {
      v144 = v10;
      while (1)
      {
        v73 = v13 - 1;
        if (v13 >= 4)
        {
          v78 = &v71[16 * v13];
          v79 = *((_QWORD *)v78 - 8);
          v80 = *((_QWORD *)v78 - 7);
          v84 = __OFSUB__(v80, v79);
          v81 = v80 - v79;
          if (v84)
            goto LABEL_122;
          v83 = *((_QWORD *)v78 - 6);
          v82 = *((_QWORD *)v78 - 5);
          v84 = __OFSUB__(v82, v83);
          v76 = v82 - v83;
          v77 = v84;
          if (v84)
            goto LABEL_123;
          v85 = v13 - 2;
          v86 = &v71[16 * v13 - 32];
          v88 = *(_QWORD *)v86;
          v87 = *((_QWORD *)v86 + 1);
          v84 = __OFSUB__(v87, v88);
          v89 = v87 - v88;
          if (v84)
            goto LABEL_125;
          v84 = __OFADD__(v76, v89);
          v90 = v76 + v89;
          if (v84)
            goto LABEL_128;
          if (v90 >= v81)
          {
            v108 = &v71[16 * v73];
            v110 = *(_QWORD *)v108;
            v109 = *((_QWORD *)v108 + 1);
            v84 = __OFSUB__(v109, v110);
            v111 = v109 - v110;
            if (v84)
              goto LABEL_132;
            v101 = v76 < v111;
            goto LABEL_93;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v102 = *((_QWORD *)v12 + 4);
            v103 = *((_QWORD *)v12 + 5);
            v84 = __OFSUB__(v103, v102);
            v95 = v103 - v102;
            v96 = v84;
            goto LABEL_87;
          }
          v75 = *((_QWORD *)v12 + 4);
          v74 = *((_QWORD *)v12 + 5);
          v84 = __OFSUB__(v74, v75);
          v76 = v74 - v75;
          v77 = v84;
        }
        if ((v77 & 1) != 0)
          goto LABEL_124;
        v85 = v13 - 2;
        v91 = &v71[16 * v13 - 32];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v94 = __OFSUB__(v92, v93);
        v95 = v92 - v93;
        v96 = v94;
        if (v94)
          goto LABEL_127;
        v97 = &v71[16 * v73];
        v99 = *(_QWORD *)v97;
        v98 = *((_QWORD *)v97 + 1);
        v84 = __OFSUB__(v98, v99);
        v100 = v98 - v99;
        if (v84)
          goto LABEL_130;
        if (__OFADD__(v95, v100))
          goto LABEL_131;
        if (v95 + v100 >= v76)
        {
          v101 = v76 < v100;
LABEL_93:
          if (v101)
            v73 = v85;
          goto LABEL_95;
        }
LABEL_87:
        if ((v96 & 1) != 0)
          goto LABEL_126;
        v104 = &v71[16 * v73];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v84 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v84)
          goto LABEL_129;
        if (v107 < v95)
          goto LABEL_14;
LABEL_95:
        v112 = v73 - 1;
        if (v73 - 1 >= v13)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v113 = v11;
        if (!v11)
          goto LABEL_144;
        v114 = v12;
        v115 = v4;
        v116 = &v71[16 * v112];
        v117 = *(_QWORD *)v116;
        v118 = v71;
        v119 = v73;
        v120 = &v71[16 * v73];
        v121 = *((_QWORD *)v120 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((CGFloat *)(v113 + 32 * *(_QWORD *)v116), (CGFloat *)(v113 + 32 * *(_QWORD *)v120), v113 + 32 * v121, v140, v115);
        if (v2)
          goto LABEL_103;
        if (v121 < v117)
          goto LABEL_119;
        if (v119 > *((_QWORD *)v114 + 2))
          goto LABEL_120;
        *(_QWORD *)v116 = v117;
        *(_QWORD *)&v118[16 * v112 + 8] = v121;
        v122 = *((_QWORD *)v114 + 2);
        if (v119 >= v122)
          goto LABEL_121;
        v12 = v114;
        v13 = v122 - 1;
        memmove(v120, v120 + 16, 16 * (v122 - 1 - v119));
        v71 = v118;
        *((_QWORD *)v114 + 2) = v122 - 1;
        v4 = v115;
        v11 = v139;
        v10 = v144;
        if (v122 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v5 = v135;
    if (v10 >= v135)
      goto LABEL_106;
  }
  if (__OFADD__(v14, v134))
    goto LABEL_141;
  if (v14 + v134 >= v5)
    v51 = v5;
  else
    v51 = v14 + v134;
  if (v51 >= v14)
  {
    if (v10 != v51)
    {
      v52 = v11 + 32 * v10;
      v136 = v14;
      do
      {
        v53 = (CGFloat *)(v11 + 32 * v10);
        v54 = *v53;
        v55 = v53[1];
        v56 = v53[2];
        v57 = v53[3];
        v58 = (CGFloat *)v52;
        do
        {
          v59 = *(v58 - 4);
          v60 = *(v58 - 3);
          v61 = *(v58 - 2);
          v62 = *(v58 - 1);
          v153.origin.x = v54;
          v153.origin.y = v55;
          v153.size.width = v56;
          v153.size.height = v57;
          v143 = CGRectGetMinX(v153);
          v154.origin.x = v54;
          v154.origin.y = v55;
          v154.size.width = v56;
          v154.size.height = v57;
          v63 = CGRectGetMinY(v154);
          v155.origin.x = v59;
          v155.origin.y = v60;
          v155.size.width = v61;
          v155.size.height = v62;
          v64 = CGRectGetMinX(v155);
          v156.origin.x = v59;
          v156.origin.y = v60;
          v156.size.width = v61;
          v156.size.height = v62;
          v65 = CGRectGetMinY(v156);
          v66 = v143;
          if ((_DWORD)v4)
            v66 = v63;
          else
            v65 = v64;
          if (v66 >= v65)
            break;
          if (!v11)
            goto LABEL_143;
          v54 = *v58;
          v55 = v58[1];
          v56 = v58[2];
          v57 = v58[3];
          v67 = *((_OWORD *)v58 - 1);
          *(_OWORD *)v58 = *((_OWORD *)v58 - 2);
          *((_OWORD *)v58 + 1) = v67;
          *(v58 - 3) = v55;
          *(v58 - 2) = v56;
          *(v58 - 1) = v57;
          *(v58 - 4) = v54;
          v58 -= 4;
          ++v14;
        }
        while (v10 != v14);
        ++v10;
        v52 += 32;
        v14 = v136;
      }
      while (v10 != v51);
      v10 = v51;
    }
    goto LABEL_55;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  CGFloat *v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t v16;
  CGFloat *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double MinY;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  CGFloat MinX;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  if (a3 != a2)
  {
    v6 = a3;
    v9 = *a4;
    v10 = *a4 + 32 * a3;
LABEL_5:
    v11 = (CGFloat *)(v9 + 32 * v6);
    v12 = *v11;
    v13 = v11[1];
    v14 = v11[2];
    v15 = v11[3];
    v16 = a1;
    v17 = (CGFloat *)v10;
    while (1)
    {
      v18 = *(v17 - 4);
      v19 = *(v17 - 3);
      v20 = *(v17 - 2);
      v21 = *(v17 - 1);
      v28.origin.x = v12;
      v28.origin.y = v13;
      v28.size.width = v14;
      v28.size.height = v15;
      MinX = CGRectGetMinX(v28);
      v29.origin.x = v12;
      v29.origin.y = v13;
      v29.size.width = v14;
      v29.size.height = v15;
      MinY = CGRectGetMinY(v29);
      v30.origin.x = v18;
      v30.origin.y = v19;
      v30.size.width = v20;
      v30.size.height = v21;
      v23 = CGRectGetMinX(v30);
      v31.origin.x = v18;
      v31.origin.y = v19;
      v31.size.width = v20;
      v31.size.height = v21;
      v24 = CGRectGetMinY(v31);
      v25 = MinX;
      if ((a5 & 1) != 0)
        v25 = MinY;
      else
        v24 = v23;
      if (v25 >= v24)
      {
LABEL_4:
        ++v6;
        v10 += 32;
        if (v6 == a2)
          return;
        goto LABEL_5;
      }
      if (!v9)
        break;
      v12 = *v17;
      v13 = v17[1];
      v14 = v17[2];
      v15 = v17[3];
      v26 = *((_OWORD *)v17 - 1);
      *(_OWORD *)v17 = *((_OWORD *)v17 - 2);
      *((_OWORD *)v17 + 1) = v26;
      *(v17 - 3) = v13;
      *(v17 - 2) = v14;
      *(v17 - 1) = v15;
      *(v17 - 4) = v12;
      v17 -= 4;
      if (v6 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(CGFloat *__src, CGFloat *a2, unint64_t a3, CGFloat *__dst, char a5)
{
  CGFloat *v5;
  CGFloat *v7;
  CGFloat *v8;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGFloat *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat *v29;
  __int128 v30;
  __int128 v31;
  double *v32;
  CGFloat *v33;
  CGFloat *v34;
  CGFloat *v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  double MinY;
  double v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  uint64_t result;
  CGFloat v51;
  CGFloat MinX;
  char *v53;
  CGFloat *v54;
  CGFloat *v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v10 = (char *)a2 - (char *)__src;
  v11 = (char *)a2 - (char *)__src + 31;
  if ((char *)a2 - (char *)__src >= 0)
    v11 = (char *)a2 - (char *)__src;
  v12 = v11 >> 5;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 5;
  v55 = __src;
  v54 = __dst;
  if (v12 >= v14 >> 5)
  {
    if (v13 >= -31)
    {
      if (__dst != a2 || &a2[4 * v15] <= __dst)
        memmove(__dst, a2, 32 * v15);
      v32 = &v5[4 * v15];
      v53 = (char *)v32;
      v55 = v7;
      if (v8 < v7 && v13 >= 32)
      {
        v33 = (CGFloat *)(a3 - 32);
        v34 = v7;
        while (1)
        {
          v35 = v33 + 4;
          v36 = *(v32 - 4);
          v37 = *(v32 - 3);
          v38 = *(v32 - 2);
          v39 = *(v32 - 1);
          v40 = *(v34 - 4);
          v41 = *(v34 - 3);
          v34 -= 4;
          v42 = v34[2];
          v43 = v34[3];
          v60.origin.x = v36;
          v60.origin.y = v37;
          v60.size.width = v38;
          v60.size.height = v39;
          MinX = CGRectGetMinX(v60);
          v61.origin.x = v36;
          v61.origin.y = v37;
          v61.size.width = v38;
          v61.size.height = v39;
          MinY = CGRectGetMinY(v61);
          v62.origin.x = v40;
          v62.origin.y = v41;
          v62.size.width = v42;
          v62.size.height = v43;
          v45 = CGRectGetMinX(v62);
          v63.origin.x = v40;
          v63.origin.y = v41;
          v63.size.width = v42;
          v63.size.height = v43;
          v46 = CGRectGetMinY(v63);
          v47 = MinX;
          if ((a5 & 1) != 0)
            v47 = MinY;
          else
            v46 = v45;
          if (v47 >= v46)
          {
            v53 = (char *)(v32 - 4);
            if (v35 < v32 || v33 >= v32 || v35 != v32)
            {
              v49 = *((_OWORD *)v32 - 1);
              *(_OWORD *)v33 = *((_OWORD *)v32 - 2);
              *((_OWORD *)v33 + 1) = v49;
            }
            v34 = v7;
            v32 -= 4;
            if (v7 <= v8)
              goto LABEL_48;
          }
          else
          {
            if (v35 != v7 || v33 >= v7)
            {
              v48 = *((_OWORD *)v34 + 1);
              *(_OWORD *)v33 = *(_OWORD *)v34;
              *((_OWORD *)v33 + 1) = v48;
            }
            v55 = v34;
            if (v34 <= v8)
              goto LABEL_48;
          }
          v33 -= 4;
          v7 = v34;
          if (v32 <= v5)
            goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v10 >= -31)
  {
    if (__dst != __src || &__src[4 * v12] <= __dst)
      memmove(__dst, __src, 32 * v12);
    v16 = &v5[4 * v12];
    v53 = (char *)v16;
    if ((unint64_t)v7 < a3 && v10 >= 32)
    {
      do
      {
        v17 = *v7;
        v18 = v7[1];
        v19 = v7[2];
        v20 = v7[3];
        v21 = *v5;
        v22 = v5[1];
        v23 = v5[2];
        v24 = v5[3];
        v56.origin.x = *v7;
        v56.origin.y = v18;
        v56.size.width = v19;
        v56.size.height = v20;
        v51 = CGRectGetMinX(v56);
        v57.origin.x = v17;
        v57.origin.y = v18;
        v57.size.width = v19;
        v57.size.height = v20;
        v25 = CGRectGetMinY(v57);
        v58.origin.x = v21;
        v58.origin.y = v22;
        v58.size.width = v23;
        v58.size.height = v24;
        v26 = CGRectGetMinX(v58);
        v59.origin.x = v21;
        v59.origin.y = v22;
        v59.size.width = v23;
        v59.size.height = v24;
        v27 = CGRectGetMinY(v59);
        v28 = v51;
        if ((a5 & 1) != 0)
          v28 = v25;
        else
          v27 = v26;
        if (v28 >= v27)
        {
          if (v8 != v5)
          {
            v31 = *((_OWORD *)v5 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v5;
            *((_OWORD *)v8 + 1) = v31;
          }
          v5 += 4;
          v54 = v5;
          v29 = v7;
        }
        else
        {
          v29 = v7 + 4;
          if (v8 < v7 || v8 >= v29 || v8 != v7)
          {
            v30 = *((_OWORD *)v7 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v7;
            *((_OWORD *)v8 + 1) = v30;
          }
        }
        v8 += 4;
        if (v5 >= v16)
          break;
        v7 = v29;
      }
      while ((unint64_t)v29 < a3);
      v55 = v8;
    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v55, (const void **)&v54, &v53);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ScrollTargetBehavior.clampTarget(_:context:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  double v3;
  char v4;
  double v5;
  char v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t (*v12)(__int128 *, _QWORD);
  double *v13;
  char v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t (*v20)(__int128 *, _QWORD);
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  v2 = result;
  v3 = *(double *)(a2 + 96);
  v4 = *(_BYTE *)(a2 + 104);
  if ((v4 & 1) != 0)
  {
    v5 = *(double *)(a2 + 88);
    v6 = *(_BYTE *)(result + 48);
    v7 = *(_OWORD *)(result + 16);
    v22 = *(_OWORD *)result;
    v23 = v7;
    v24 = *(_OWORD *)(result + 32);
    v25 = v6;
    ScrollTarget.rect.getter();
    v9 = v8 - v5;
    if (v8 - v5 <= v8)
      v9 = v8;
    v10 = v5 + v8;
    if (v10 >= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = (uint64_t (*)(__int128 *, _QWORD))ScrollTarget.rect.modify();
    *v13 = v11;
    result = v12(&v22, 0);
  }
  if ((v4 & 2) != 0)
  {
    v14 = *(_BYTE *)(v2 + 48);
    v15 = *(_OWORD *)(v2 + 16);
    v22 = *(_OWORD *)v2;
    v23 = v15;
    v24 = *(_OWORD *)(v2 + 32);
    v25 = v14;
    ScrollTarget.rect.getter();
    v17 = v16 - v3;
    if (v16 - v3 <= v16)
      v17 = v16;
    v18 = v3 + v16;
    if (v18 >= v17)
      v19 = v17;
    else
      v19 = v18;
    v20 = (uint64_t (*)(__int128 *, _QWORD))ScrollTarget.rect.modify();
    *(double *)(v21 + 8) = v19;
    return v20(&v22, 0);
  }
  return result;
}

uint64_t specialized ScrollTargetBehavior.alignTarget(_:context:axis:itemInfo:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, char a6)
{
  double v9;
  _BOOL4 v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  uint64_t (*v15)(__int128 *, _QWORD);
  char v17;
  __int128 v18;

  v9 = *(double *)(a5 + 56);
  if (*(_BYTE *)(a5 + 105) != 4)
  {
    v10 = a1 == a2;
    if ((a6 & 1) == 0)
      goto LABEL_5;
    if (a1 == a2)
    {
      v12 = *(double *)(a5 + 64);
      if (v12 > 0.0)
        goto LABEL_11;
      if (v12 < 0.0)
      {
LABEL_17:
        v11 = -1.0;
        goto LABEL_18;
      }
    }
LABEL_20:
    v13 = a2 * a3;
    v15 = (uint64_t (*)(__int128 *, _QWORD))ScrollTarget.rect.modify();
    goto LABEL_21;
  }
  if ((a6 & 1) != 0)
    goto LABEL_20;
  v10 = 0;
LABEL_5:
  v18 = *(_OWORD *)(a5 + 128);
  EnvironmentValues.layoutDirection.getter();
  if (v10)
  {
    if (v9 > 0.0)
    {
      v11 = -1.0;
      if ((v17 & 1) != 0)
        goto LABEL_18;
LABEL_11:
      v11 = 1.0;
      goto LABEL_18;
    }
    if (v9 < 0.0)
    {
      v11 = 1.0;
      if ((v17 & 1) != 0)
      {
LABEL_18:
        v13 = (v11 + a2) * a3;
        v15 = (uint64_t (*)(__int128 *, _QWORD))ScrollTarget.rect.modify();
        if ((a6 & 1) == 0)
          goto LABEL_19;
LABEL_21:
        v14[1] = v13;
        return v15(&v18, 0);
      }
      goto LABEL_17;
    }
  }
  v13 = a2 * a3;
  v15 = (uint64_t (*)(__int128 *, _QWORD))ScrollTarget.rect.modify();
LABEL_19:
  *v14 = v13;
  return v15(&v18, 0);
}

void type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  }
}

ValueMetadata *type metadata accessor for PagingScrollTargetBehavior()
{
  return &type metadata for PagingScrollTargetBehavior;
}

ValueMetadata *type metadata accessor for ViewAlignedScrollTargetBehavior()
{
  return &type metadata for ViewAlignedScrollTargetBehavior;
}

ValueMetadata *type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior()
{
  return &type metadata for ViewAlignedScrollTargetBehavior.LimitBehavior;
}

ValueMetadata *type metadata accessor for AnyScrollTargetBehavior()
{
  return &type metadata for AnyScrollTargetBehavior;
}

uint64_t storeEnumTagSinglePayload for ViewAlignedScrollTargetBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187257AD0 + 4 * byte_187C194B5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187257B04 + 4 * byte_187C194B0[v4]))();
}

uint64_t sub_187257B04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187257B0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187257B14);
  return result;
}

uint64_t sub_187257B20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187257B28);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187257B2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187257B34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior.Role()
{
  return &type metadata for ViewAlignedScrollTargetBehavior.LimitBehavior.Role;
}

unint64_t lazy protocol witness table accessor for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role;
  if (!lazy protocol witness table cache variable for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewAlignedScrollTargetBehavior.LimitBehavior.Role, &type metadata for ViewAlignedScrollTargetBehavior.LimitBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewAlignedScrollTargetBehavior.LimitBehavior.Role and conformance ViewAlignedScrollTargetBehavior.LimitBehavior.Role);
  }
  return result;
}

uint64_t partial apply for closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ViewAlignedScrollTargetBehavior.makeTarget(_:context:)(*(double *)(v2 + 24), a1, a2, *(_BYTE *)(v2 + 16), *(uint64_t **)(v2 + 32));
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(Swift::UInt a1, Swift::UInt a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t result;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(a3 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    return 0;
  v9 = ~v7;
  do
  {
    v10 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v8);
    v11 = v10[1] == a2 && *v10 == a1;
    result = v11;
    if (v11)
      break;
    v8 = (v8 + 1) & v9;
  }
  while (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(char a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;

  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_9;
  v3 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    goto LABEL_9;
  v8 = *(_QWORD *)(a2 + 48);
  if (((((_DWORD)v3 == 0) ^ *(unsigned __int8 *)(v8 + v6)) & 1) != 0)
  {
    v9 = 1;
    return v9 & 1;
  }
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_9:
    v9 = 0;
    return v9 & 1;
  }
  do
  {
    v9 = ((_DWORD)v3 == 0) ^ *(_BYTE *)(v8 + v11);
    if ((v9 & 1) != 0)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return v9 & 1;
}

uint64_t _ArchivedViewHost.viewGraph.getter()
{
  specialized _ArchivedViewHost.viewGraph.getter();
  return swift_retain();
}

uint64_t _ArchivedViewHost.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  _WORD *v3;
  uint64_t result;

  v3 = (_WORD *)(v1 + direct field offset for _ArchivedViewHost.propertiesNeedingUpdate);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t _ArchivedViewHost.propertiesNeedingUpdate.setter(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  _WORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_WORD *)(v1 + direct field offset for _ArchivedViewHost.propertiesNeedingUpdate);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*_ArchivedViewHost.propertiesNeedingUpdate.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.renderingPhase.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for _ArchivedViewHost.renderingPhase);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t _ArchivedViewHost.renderingPhase.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + direct field offset for _ArchivedViewHost.renderingPhase);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*_ArchivedViewHost.renderingPhase.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

double _ArchivedViewHost.currentTimestamp.getter@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  double *v3;
  double result;

  v3 = (double *)(v1 + direct field offset for _ArchivedViewHost.currentTimestamp);
  swift_beginAccess();
  result = *v3;
  *a1 = *(_QWORD *)v3;
  return result;
}

uint64_t _ArchivedViewHost.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)(v1 + direct field offset for _ArchivedViewHost.currentTimestamp);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*_ArchivedViewHost.currentTimestamp.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.externalUpdateCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for _ArchivedViewHost.externalUpdateCount;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t _ArchivedViewHost.externalUpdateCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + direct field offset for _ArchivedViewHost.externalUpdateCount);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*_ArchivedViewHost.externalUpdateCount.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t _ArchivedViewHost.content.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized _ArchivedViewHost.content.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

uint64_t (*_ArchivedViewHost.content.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.content.modify;
}

uint64_t _ArchivedViewHost.content.modify(uint64_t a1, char a2)
{
  return _ArchivedViewHost.content.modify(a1, a2);
}

{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return _ArchivedViewHost.content.didset();
  return result;
}

uint64_t _ArchivedViewHost.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 216));
  swift_beginAccess();
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path getter for _ArchivedViewHost.environment : <A, B>_ArchivedViewHost<A, B>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 216));
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for _ArchivedViewHost.environment : <A, B>_ArchivedViewHost<A, B>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_retain();
  swift_retain();
  return _ArchivedViewHost.environment.setter(v4);
}

uint64_t _ArchivedViewHost.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 216));
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_release();
  swift_release();
  return _ArchivedViewHost.content.didset();
}

uint64_t _ArchivedViewHost.content.didset()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  GraphHost.emptyTransaction(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v1);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*_ArchivedViewHost.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.environment.modify;
}

uint64_t _ArchivedViewHost.environment.modify(uint64_t a1, char a2)
{
  return _ArchivedViewHost.content.modify(a1, a2);
}

double _ArchivedViewHost.size.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 224);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t _ArchivedViewHost.size.setter(double a1, double a2)
{
  uint64_t v2;
  double *v5;

  v5 = (double *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 224));
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return _ArchivedViewHost.size.didset();
}

uint64_t (*_ArchivedViewHost.size.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.size.modify;
}

uint64_t _ArchivedViewHost.size.modify(uint64_t a1, char a2)
{
  return _ArchivedViewHost.safeAreaInsets.modify(a1, a2);
}

uint64_t _ArchivedViewHost.safeAreaInsets.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return _ArchivedViewHost.size.didset();
  return result;
}

{
  return _ArchivedViewHost.safeAreaInsets.modify(a1, a2);
}

double _ArchivedViewHost.safeAreaInsets.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t _ArchivedViewHost.safeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;

  v9 = (double *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 232));
  swift_beginAccess();
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return _ArchivedViewHost.size.didset();
}

uint64_t _ArchivedViewHost.size.didset()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  GraphHost.emptyTransaction(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v1);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*_ArchivedViewHost.safeAreaInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return _ArchivedViewHost.safeAreaInsets.modify;
}

uint64_t _ArchivedViewHost.auxiliaryData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t _ArchivedViewHost.auxiliaryData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (uint64_t *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 240));
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return outlined consume of Data?(v6, v7);
}

uint64_t (*_ArchivedViewHost.auxiliaryData.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t _ArchivedViewHost.delegate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 248);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 88) - 8) + 16))(a1, v4);
}

uint64_t _ArchivedViewHost.delegate.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 248);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 88) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*_ArchivedViewHost.delegate.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.encodesCustomFontsAsURLs.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 2) & 1;
}

uint64_t _ArchivedViewHost.encodesCustomFontsAsURLs.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 1) != 0)
    v2 = 4;
  else
    v2 = 0;
  *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFB | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesCustomFontsAsURLs.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 4) != 0;
  return _ArchivedViewHost.encodesCustomFontsAsURLs.modify;
}

uint64_t _ArchivedViewHost.encodesCustomFontsAsURLs.modify(uint64_t result)
{
  char v1;

  if (*(_BYTE *)(result + 8))
    v1 = 4;
  else
    v1 = 0;
  *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFB | v1;
  return result;
}

uint64_t _ArchivedViewHost.encodesPreciseTextLayout.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 4) & 1;
}

uint64_t _ArchivedViewHost.encodesPreciseTextLayout.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 1) != 0)
    v2 = 16;
  else
    v2 = 0;
  *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xEF | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesPreciseTextLayout.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 0x10) != 0;
  return _ArchivedViewHost.encodesPreciseTextLayout.modify;
}

uint64_t _ArchivedViewHost.encodesPreciseTextLayout.modify(uint64_t result)
{
  char v1;

  if (*(_BYTE *)(result + 8))
    v1 = 16;
  else
    v1 = 0;
  *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xEF | v1;
  return result;
}

uint64_t _ArchivedViewHost.allowedImageTypes.getter()
{
  specialized _ArchivedViewHost.allowedImageTypes.getter();
  return swift_bridgeObjectRetain();
}

uint64_t _ArchivedViewHost.allowedImageTypes.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*_ArchivedViewHost.allowedImageTypes.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t _ArchivedViewHost.defaultImageType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 264);
  swift_beginAccess();
  return outlined init with copy of UTType?(v3, a1);
}

uint64_t _ArchivedViewHost.defaultImageType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 264);
  swift_beginAccess();
  outlined assign with take of UTType?(a1, v3);
  return swift_endAccess();
}

uint64_t (*_ArchivedViewHost.defaultImageType.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t (*_ArchivedViewHost.encodingStyle.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ArchivedViewHost.encodesStableDisplayListIdentifiers.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 1) & 1;
}

uint64_t _ArchivedViewHost.encodesStableDisplayListIdentifiers.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 1) != 0)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFD | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesStableDisplayListIdentifiers.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 2) != 0;
  return _ArchivedViewHost.encodesStableDisplayListIdentifiers.modify;
}

uint64_t _ArchivedViewHost.encodesStableDisplayListIdentifiers.modify(uint64_t result)
{
  char v1;

  if (*(_BYTE *)(result + 8))
    v1 = 2;
  else
    v1 = 0;
  *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xFD | v1;
  return result;
}

uint64_t _ArchivedViewHost.encodesAssetCatalogReferences.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + direct field offset for _ArchivedViewHost.archiveOptions) >> 3) & 1;
}

uint64_t _ArchivedViewHost.encodesAssetCatalogReferences.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  if ((result & 1) != 0)
    v2 = 8;
  else
    v2 = 0;
  *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(v1
                                                                                       + direct field offset for _ArchivedViewHost.archiveOptions) & 0xF7 | v2;
  return result;
}

uint64_t (*_ArchivedViewHost.encodesAssetCatalogReferences.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions) & 8) != 0;
  return _ArchivedViewHost.encodesAssetCatalogReferences.modify;
}

uint64_t _ArchivedViewHost.encodesAssetCatalogReferences.modify(uint64_t result)
{
  char v1;

  if (*(_BYTE *)(result + 8))
    v1 = 8;
  else
    v1 = 0;
  *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) = *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions) & 0xF7 | v1;
  return result;
}

void _ArchivedViewHost.deploymentVersion.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
}

_BYTE *_ArchivedViewHost.deploymentVersion.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions + 1) = *result;
  return result;
}

uint64_t (*_ArchivedViewHost.deploymentVersion.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
  return _ArchivedViewHost.deploymentVersion.modify;
}

uint64_t _ArchivedViewHost.deploymentVersion.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + direct field offset for _ArchivedViewHost.archiveOptions + 1) = *(_BYTE *)(result + 8);
  return result;
}

char *_ArchivedViewHost.__allocating_init(content:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;

  v3 = v2;
  swift_allocObject();
  v6 = specialized _ArchivedViewHost.init(content:delegate:)(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 88) - 8) + 8))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v6;
}

char *_ArchivedViewHost.init(content:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  char *v6;

  v5 = *v2;
  v6 = specialized _ArchivedViewHost.init(content:delegate:)(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 88) - 8) + 8))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 8))(a1);
  return v6;
}

void _ArchivedViewHost.modifyViewInputs(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  char v5;
  char v6;
  _BYTE *v7;

  v2 = v1;
  v4 = (char *)(v2 + direct field offset for _ArchivedViewHost.archiveOptions);
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider();
  _ViewInputs.textAlwaysOnProvider.setter();
  v5 = *v4;
  if ((*v4 & 2) != 0)
  {
    _ViewInputs.configureStableIDs(root:)();
    v5 = *v4;
  }
  v6 = v4[1];
  v7 = (_BYTE *)(v2 + direct field offset for _ArchivedViewHost.instantiatedArchiveOptions);
  *v7 = v5;
  v7[1] = v6;
  *(_DWORD *)(a1 + 36) |= 1u;
  _ViewInputs.configureForArchivingAccessibility()();
}

uint64_t _ArchivedViewHost.renderUntilStable()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *v0;
  if (*((unsigned __int8 *)v0 + direct field offset for _ArchivedViewHost.archiveOptions) != *((unsigned __int8 *)v0
                                                                                              + direct field offset for _ArchivedViewHost.instantiatedArchiveOptions)
    || *((unsigned __int8 *)v0 + direct field offset for _ArchivedViewHost.archiveOptions + 1) != *((unsigned __int8 *)v0
                                                                                                  + direct field offset for _ArchivedViewHost.instantiatedArchiveOptions
                                                                                                  + 1))
  {
    GraphHost.uninstantiate(immediately:)(0);
  }
  v3 = direct field offset for _ArchivedViewHost.pendingIgnoredUpdates;
  v4 = direct field offset for _ArchivedViewHost.ignoreUpdateRequests;
  v5 = 32;
  while (1)
  {
    *((_BYTE *)v0 + v3) = 0;
    *((_BYTE *)v0 + v4) = 1;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v1);
    result = ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    if (*((_BYTE *)v0 + v3) != 1)
      break;
    *((_BYTE *)v0 + direct field offset for _ArchivedViewHost.ignoreUpdateRequests) = 0;
    if (!--v5)
      return result;
  }
  *((_BYTE *)v0 + direct field offset for _ArchivedViewHost.ignoreUpdateRequests) = 0;
  return result;
}

uint64_t _ArchivedViewHost.archiveIfChanged()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  mainThreadPrecondition()();
  _ArchivedViewHost.renderUntilStable()();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Data?, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = static Update.ensure<A>(_:)();
  if (!v0)
    return v2;
  return result;
}

uint64_t closure #1 in _ArchivedViewHost.archiveIfChanged()@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _OWORD v72[2];
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v5 = *a1;
  v6 = type metadata accessor for CodingUserInfoKey();
  v69 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v10, v11);
  v68 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x1E0C80A78](v68, v12);
  v70 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Badge, Spacer)(0, (unint64_t *)&lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v5);
  ViewRendererHost.updateViewGraph<A>(body:)();
  v14 = v73;
  if (*(uint64_t *)((char *)a1 + direct field offset for _ArchivedViewHost.lastDisplayListVersion) >= v74)
  {
    result = swift_bridgeObjectRelease();
    *(_OWORD *)a2 = xmmword_187C0B4D0;
  }
  else
  {
    v63 = a2;
    v64 = v9;
    v66 = v6;
    v67 = v2;
    v15 = WORD4(v73);
    v16 = BYTE10(v73);
    *(uint64_t *)((char *)a1 + direct field offset for _ArchivedViewHost.lastDisplayListVersion) = v74;
    swift_beginAccess();
    v17 = readEnvironment(_:_:)();
    swift_endAccess();
    if ((v17 & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
      *(_QWORD *)&v73 = 0;
      *((_QWORD *)&v73 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      v19._countAndFlagsBits = 0x6E69766968637241;
      v19._object = (void *)0xEA00000000002067;
      String.append(_:)(v19);
      *(_QWORD *)&v72[0] = a1;
      _print_unlocked<A, B>(_:_:)();
      v20._countAndFlagsBits = 2618;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
      *(_QWORD *)&v72[0] = v14;
      WORD4(v72[0]) = v15;
      BYTE10(v72[0]) = v16;
      v21._countAndFlagsBits = DisplayList.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22 = v73;
      *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEA968];
      *(_OWORD *)(v18 + 32) = v22;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for DataArchiveWriter();
    swift_allocObject();
    v23 = DataArchiveWriter.init()();
    UUID.init()();
    LOBYTE(v73) = *((_BYTE *)a1 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
    default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
    v24 = (uint64_t)v70;
    ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
    v65 = v23;
    v25 = _ArchivedViewHost.makeUserInfo(writer:metadata:)(v23, v24);
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87428]), sel_init);
    *(_QWORD *)&v73 = v14;
    WORD4(v73) = v15;
    BYTE10(v73) = v16;
    *(_QWORD *)(swift_allocObject() + 16) = v26;
    v27 = v26;
    DisplayList.forEachRBDisplayList(_:)();
    swift_release();
    v28 = (uint64_t)v64;
    static ArchivedViewCore.rbEncoderSetKey.getter();
    v75 = type metadata accessor for RBEncoderSet();
    *(_QWORD *)&v73 = v27;
    outlined init with take of Any(&v73, v72);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v71 = v25;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v72, v28, isUniquelyReferenced_nonNull_native);
    v76 = v71;
    swift_bridgeObjectRelease();
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v28, v66);
    MEMORY[0x1E0C80A78](v30, v31);
    *(&v62 - 4) = (uint64_t)&v76;
    *(&v62 - 3) = (uint64_t)a1;
    *(&v62 - 2) = v14;
    *((_WORD *)&v62 - 4) = v15;
    *((_BYTE *)&v62 - 6) = v16;
    v32 = v67;
    v33 = static ProtobufEncoder.encoding(_:)();
    if (v32)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v36 = v33;
      v37 = v34;
      LODWORD(v69) = v16;
      v38 = v15;
      v39 = ArchiveWriter.addAttachment(data:)();
      v67 = v37;
      v40 = (char *)*((_QWORD *)v70 + 1);
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v66 = v36;
      if ((v41 & 1) == 0)
        v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
      v42 = &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>;
      v44 = *((_QWORD *)v40 + 2);
      v43 = *((_QWORD *)v40 + 3);
      if (v44 >= v43 >> 1)
      {
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v40);
        v42 = &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EffectiveLabelStyle?>;
        v40 = v61;
      }
      *((_QWORD *)v40 + 2) = v44 + 1;
      *(_QWORD *)&v40[8 * v44 + 32] = v39;
      v45 = (uint64_t)v70;
      *((_QWORD *)v70 + 1) = v40;
      if ((*((_BYTE *)a1 + v42[465]) & 2) != 0)
      {
        _DisplayList_StableIdentityMap.init()();
        *(_QWORD *)&v73 = v14;
        WORD4(v73) = v38;
        BYTE10(v73) = v69;
        _DisplayList_StableIdentityMap.addIDs(from:root:)();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v73 = *(_QWORD *)&v72[0];
        v49 = static ProtobufEncoder.encoding<A>(_:)();
        v51 = v50;
        swift_bridgeObjectRelease();
        v52 = ArchiveWriter.addAttachment(data:)();
        outlined consume of Data._Representation(v49, v51);
        *(_QWORD *)(v45 + 16) = v52;
        *(_BYTE *)(v45 + 24) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v46 = (uint64_t)a1 + *(_QWORD *)(*a1 + 240);
      swift_beginAccess();
      v47 = *(_QWORD *)(v46 + 8);
      if (v47 >> 60 != 15)
      {
        v48 = *(_QWORD *)v46;
        outlined copy of Data._Representation(*(_QWORD *)v46, *(_QWORD *)(v46 + 8));
        v53 = ArchiveWriter.addAttachment(data:)();
        outlined consume of Data?(v48, v47);
        *(_QWORD *)(v45 + 32) = v53;
        *(_BYTE *)(v45 + 40) = 0;
      }
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata and conformance ArchivedViewCore.Metadata, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3120], MEMORY[0x1E0CE3130]);
      v54 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      v56 = v55;
      swift_release();
      ArchiveWriter.addAttachment(data:)();
      outlined consume of Data._Representation(v54, v56);
      v57 = DataArchiveWriter.finalizeData()();
      v59 = v58;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
      outlined consume of Data._Representation(v66, v67);
      swift_release();
      v60 = v63;
      *v63 = v57;
      v60[1] = v59;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _ArchivedViewHost.makeUserInfo(writer:metadata:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for CodingUserInfoKey();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - v14;
  v40 = MEMORY[0x1E0DEE9E0];
  v16 = type metadata accessor for ArchiveWriter();
  static ArchiveWriter.writerKey.getter();
  v39 = v16;
  *(_QWORD *)&v38 = a1;
  outlined init with take of Any(&v38, v37);
  swift_retain();
  v17 = v40;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = v17;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
  v40 = v36;
  swift_bridgeObjectRelease();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v15, v7);
  static ArchivedViewCore.archivedViewHostKey.getter();
  v39 = v6;
  *(_QWORD *)&v38 = v3;
  outlined init with take of Any(&v38, v37);
  swift_retain();
  v20 = v40;
  v21 = swift_isUniquelyReferenced_nonNull_native();
  v36 = v20;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, (uint64_t)v15, v21);
  v40 = v36;
  swift_bridgeObjectRelease();
  v19(v15, v7);
  static ArchivedViewCore.archiveOptionsKey.getter();
  v22 = *(_WORD *)((char *)v3 + direct field offset for _ArchivedViewHost.archiveOptions);
  v39 = MEMORY[0x1E0CE3760];
  LOWORD(v38) = v22;
  outlined init with take of Any(&v38, v37);
  v23 = v40;
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v36 = v23;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, (uint64_t)v15, v24);
  v40 = v36;
  swift_bridgeObjectRelease();
  v19(v15, v7);
  static ArchivedViewCore.preferredBundleLanguageKey.getter();
  v25 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  v26 = v25[1];
  if (v26)
  {
    v27 = *v25;
    v39 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v38 = v27;
    *((_QWORD *)&v38 + 1) = v26;
    outlined init with take of Any(&v38, v37);
    swift_bridgeObjectRetain();
    v28 = v40;
    v29 = swift_isUniquelyReferenced_nonNull_native();
    v36 = v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, (uint64_t)v11, v29);
    v40 = v36;
    swift_bridgeObjectRelease();
    v19(v11, v7);
  }
  else
  {
    v30 = specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v11, &v38);
    ((void (*)(char *, uint64_t, double))v19)(v11, v7, v30);
    outlined destroy of TableRowList?((uint64_t)&v38, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  static ArchivedViewCore.preferredCompositionLanguage.getter();
  v31 = ArchivedViewCore.Metadata.preferredCompositionLanguage.getter();
  type metadata accessor for CTCompositionLanguage(0);
  v39 = v32;
  LOBYTE(v38) = v31;
  outlined init with take of Any(&v38, v37);
  v33 = v40;
  v34 = swift_isUniquelyReferenced_nonNull_native();
  v36 = v33;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, (uint64_t)v15, v34);
  v40 = v36;
  swift_bridgeObjectRelease();
  v19(v15, v7);
  return v40;
}

uint64_t closure #2 in closure #1 in _ArchivedViewHost.archiveIfChanged()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v4;
  swift_beginAccess();
  type metadata accessor for CGSize(0);
  swift_bridgeObjectRetain();
  ProtobufEncoder.messageField<A>(_:_:)();
  if (!v2)
    ProtobufEncoder.messageField<A>(_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_signpost_type_t v32;
  char v33;
  void (*v34)(char *, char *, uint64_t);
  uint8_t *v35;
  os_signpost_id_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  os_signpost_type_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint8_t *v50;
  os_signpost_id_t v51;
  uint8_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t *, uint64_t, uint64_t);
  void (*v111)(char *, char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;

  v5 = v4;
  v125 = a2;
  v9 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v9, v10);
  v116 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x1E0C80A78](v102, v12);
  v14 = (uint64_t *)((char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for OSSignpostID();
  v119 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v102 - v21;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v102 - v26;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, double))(a4 + 8);
  v115 = a1;
  v123 = a4;
  v118 = v28(a3, a4, v25);
  v124 = v5;
  v29 = v5 + direct field offset for _ArchivedViewHost.signposter;
  OSSignposter.logHandle.getter();
  v117 = v27;
  OSSignpostID.init(log:)();
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
  static OSSignpostID.exclusive.getter();
  v114 = v29;
  v31 = OSSignposter.logHandle.getter();
  v32 = static os_signpost_type_t.begin.getter();
  v33 = OS_os_log.signpostsEnabled.getter();
  v122 = v14;
  if ((v33 & 1) != 0)
  {
    v34 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
    v34(v18, v22, v15);
    v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v35 = 134217984;
    v129 = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v36 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_186E48000, v31, v32, v36, "archiveStates", "statesCount=%{name=statesCount}ld", v35, 0xCu);
    v37 = v35;
    v14 = v122;
    MEMORY[0x18D760108](v37, -1, -1);

    v38 = v119;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v18, v15);
  }
  else
  {

    v38 = v119;
    v34 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  }
  v111 = v34;
  v34(v18, v22, v15);
  v113 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v112 = v18;
  v39 = OSSignpostIntervalState.init(id:isOpen:)();
  v108 = *(void (**)(char *, uint64_t))(v38 + 8);
  v108(v22, v15);
  UUID.init()();
  LOBYTE(v129) = *(_BYTE *)(v124 + direct field offset for _ArchivedViewHost.archiveOptions + 1);
  default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
  ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
  v116 = (char *)_ArchivedViewHost.makeUserInfo(writer:metadata:)(v125, (uint64_t)v14);
  result = _DisplayList_StableIdentityMap.init()();
  v41 = v123;
  v42 = v118;
  if ((v118 & 0x8000000000000000) == 0)
  {
    v43 = v15;
    v103 = v39;
    if (v118)
    {
      v110 = *(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v123 + 16);
      v104 = direct field offset for _ArchivedViewHost.stableIDRoot;
      result = swift_retain();
      v44 = 0;
      v107 = MEMORY[0x1E0DEE9B8] + 8;
      v106 = xmmword_187BF9830;
      v105 = (void *)0x8000000187BDAB00;
      v45 = v117;
      v109 = v15;
      v120 = a3;
      while (v42 != v44)
      {
        v46 = OSSignposter.logHandle.getter();
        v47 = static os_signpost_type_t.begin.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v49 = v111;
          v48 = v112;
          v111(v112, v45, v43);
          v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v50 = 0;
          v51 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_186E48000, v46, v47, v51, "archiveState", "", v50, 2u);
          v52 = v50;
          v41 = v123;
          MEMORY[0x18D760108](v52, -1, -1);

          v53 = v48;
          v108(v48, v43);
        }
        else
        {

          v49 = v111;
          v53 = v112;
        }
        v49(v53, v45, v43);
        swift_allocObject();
        v54 = OSSignpostIntervalState.init(id:isOpen:)();
        v129 = v125;
        v55 = v121;
        v110(v44, &v129, a3, v41);
        if (v55)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v85 = v124;
          $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v124, v54, a3, v41, "archiveState");
          swift_release();
          goto LABEL_31;
        }
        v119 = v54;
        v56 = v124;
        v57 = _ArchivedViewHost.renderUntilStable()();
        MEMORY[0x1E0C80A78](v57, v58);
        *(&v102 - 4) = a3;
        *(&v102 - 3) = v41;
        *(&v102 - 2) = v56;
        static Update.ensure<A>(_:)();
        v121 = 0;
        v59 = v129;
        v60 = v130;
        v61 = BYTE2(v130);
        swift_beginAccess();
        v62 = readEnvironment(_:_:)();
        v63 = swift_endAccess();
        if ((v62 & 1) != 0)
        {
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v107, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v65 = swift_allocObject();
          *(_OWORD *)(v65 + 16) = v106;
          v129 = 0;
          v130 = 0xE000000000000000;
          _StringGuts.grow(_:)(28);
          v66._countAndFlagsBits = 0xD000000000000010;
          v66._object = v105;
          String.append(_:)(v66);
          v126 = v44;
          v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v67);
          swift_bridgeObjectRelease();
          v68._countAndFlagsBits = 543584032;
          v68._object = (void *)0xE400000000000000;
          String.append(_:)(v68);
          v126 = v56;
          _print_unlocked<A, B>(_:_:)();
          v69._countAndFlagsBits = 2618;
          v69._object = (void *)0xE200000000000000;
          String.append(_:)(v69);
          v126 = v59;
          v127 = v60;
          v128 = v61;
          v70._countAndFlagsBits = DisplayList.description.getter();
          String.append(_:)(v70);
          v41 = v123;
          swift_bridgeObjectRelease();
          v71 = v129;
          v72 = v130;
          *(_QWORD *)(v65 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v65 + 32) = v71;
          *(_QWORD *)(v65 + 40) = v72;
          print(_:separator:terminator:)();
          v63 = swift_bridgeObjectRelease();
        }
        MEMORY[0x1E0C80A78](v63, v64);
        *(&v102 - 6) = a3;
        *(&v102 - 5) = v41;
        *(&v102 - 4) = (uint64_t)v116;
        *(&v102 - 3) = v56;
        v74 = v73;
        *(&v102 - 2) = v73;
        *((_WORD *)&v102 - 4) = v60;
        *((_BYTE *)&v102 - 6) = v61;
        v75 = v121;
        v76 = static ProtobufEncoder.encoding(_:)();
        if (v75)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 = v120;
          v41 = v123;
          $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v56, v119, v120, v123, "archiveState");
          swift_release();
          swift_release();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v122, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
          v85 = v56;
          v43 = v109;
          v45 = v117;
          goto LABEL_37;
        }
        v78 = v76;
        v79 = v77;
        if ((*(_BYTE *)(v56 + direct field offset for _ArchivedViewHost.archiveOptions) & 2) != 0)
        {
          v129 = v74;
          LOWORD(v130) = v60;
          BYTE2(v130) = v61;
          _DisplayList_StableIdentityMap.addIDs(from:root:)();
        }
        swift_bridgeObjectRelease();
        v80 = ArchiveWriter.addAttachment(data:)();
        v121 = 0;
        v81 = v80;
        v82 = (char *)v122[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v82 + 2) + 1, 1, v82);
        v84 = *((_QWORD *)v82 + 2);
        v83 = *((_QWORD *)v82 + 3);
        if (v84 >= v83 >> 1)
          v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v84 + 1, 1, v82);
        ++v44;
        *((_QWORD *)v82 + 2) = v84 + 1;
        *(_QWORD *)&v82[8 * v84 + 32] = v81;
        outlined consume of Data._Representation(v78, v79);
        v41 = v123;
        v122[1] = v82;
        a3 = v120;
        $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v124, v119, v120, v41, "archiveState");
        result = swift_release();
        v45 = v117;
        v42 = v118;
        v43 = v109;
        if (v118 == v44)
          goto LABEL_24;
      }
      __break(1u);
      goto LABEL_39;
    }
    swift_retain();
    v45 = v117;
LABEL_24:
    swift_bridgeObjectRelease();
    v85 = v124;
    if ((*(_BYTE *)(v124 + direct field offset for _ArchivedViewHost.archiveOptions) & 2) != 0)
    {
      v129 = v131;
      v86 = v121;
      v89 = static ProtobufEncoder.encoding<A>(_:)();
      if (v86)
      {
        swift_bridgeObjectRelease();
LABEL_31:
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v122, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
        goto LABEL_37;
      }
      v93 = v89;
      v94 = v90;
      swift_bridgeObjectRelease();
      v95 = ArchiveWriter.addAttachment(data:)();
      outlined consume of Data._Representation(v93, v94);
      v96 = v122;
      v122[2] = v95;
      *((_BYTE *)v96 + 24) = 0;
      v85 = v124;
    }
    else
    {
      swift_bridgeObjectRelease();
      v86 = v121;
    }
    v87 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(a3, v41);
    if (v86)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v122, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
      swift_release();
    }
    else
    {
      v91 = v88;
      if (v88 >> 60 != 15)
      {
        v92 = v87;
        v97 = ArchiveWriter.addAttachment(data:)();
        outlined consume of Data?(v92, v91);
        v98 = v122;
        v122[4] = v97;
        *((_BYTE *)v98 + 40) = 0;
      }
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata and conformance ArchivedViewCore.Metadata, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3120], MEMORY[0x1E0CE3130]);
      v99 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      v101 = v100;
      swift_release();
      ArchiveWriter.addAttachment(data:)();
      outlined consume of Data._Representation(v99, v101);
      dispatch thunk of ArchiveWriter.finalize()();
      v85 = v124;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v122, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
      swift_release();
    }
LABEL_37:
    $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(v85, v103, a3, v41, "archiveStates");
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v108)(v45, v43);
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v20 = a4;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v19 - v15;
  mainThreadPrecondition()();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17(v16, a2, v8);
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    type metadata accessor for FileArchiveWriter();
    v17(v12, a2, v8);
    result = FileArchiveWriter.__allocating_init(url:)();
    if (!v4)
    {
      _ArchivedViewHost.archiveStates<A>(_:to:)(a1, result, a3, v20);
      return swift_release();
    }
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t $defer #1 <A, B><A1>() in _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_signpost_type_t v19;
  int v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v26;
  char *v27;
  os_signpost_id_t v28;
  void (*v29)(char *, uint64_t);
  const char *v30;
  uint64_t v31;

  v30 = a5;
  v31 = type metadata accessor for OSSignpostError();
  v5 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - v16;
  v18 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v19 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v31);
    v21 = v30;
    v22 = v13;
    v23 = v9;
    if (v20 == *MEMORY[0x1E0DF2190])
    {
      v24 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v31);
      v24 = "";
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v22, v17, v23);
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    v27 = v22;
    v28 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_186E48000, v18, v19, v28, v21, v24, v26, 2u);
    MEMORY[0x18D760108](v26, -1, -1);

    v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    v29(v17, v23);
    return ((uint64_t (*)(char *, uint64_t))v29)(v27, v23);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  }
}

uint64_t closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  char v7;

  v3 = *a1;
  type metadata accessor for (Badge, Spacer)(0, (unint64_t *)&lazy cache variable for type metadata for (DisplayList, DisplayList.Version));
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v3);
  result = ViewRendererHost.updateViewGraph<A>(body:)();
  *(_QWORD *)a2 = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 10) = v7;
  return result;
}

uint64_t closure #1 in closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)()
{
  return ViewGraph.displayList()();
}

uint64_t closure #2 in _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  __int128 v29;
  unint64_t v30;
  uint64_t v31;

  v26 = a3;
  v9 = HIWORD(a5);
  v10 = type metadata accessor for CodingUserInfoKey();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(MEMORY[0x1E0D87428]);
  swift_bridgeObjectRetain();
  v16 = objc_msgSend(v15, sel_init);
  *(_QWORD *)&v29 = a4;
  v24 = v9;
  v25 = a5;
  WORD4(v29) = a5;
  BYTE10(v29) = v9;
  *(_QWORD *)(swift_allocObject() + 16) = v16;
  v17 = v16;
  DisplayList.forEachRBDisplayList(_:)();
  swift_release();
  static ArchivedViewCore.rbEncoderSetKey.getter();
  v30 = type metadata accessor for RBEncoderSet();
  *(_QWORD *)&v29 = v17;
  outlined init with take of Any(&v29, v28);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = a2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v19 = v31;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v19;
  v20 = (_OWORD *)(v26 + *(_QWORD *)(*(_QWORD *)v26 + 224));
  swift_beginAccess();
  v28[0] = *v20;
  type metadata accessor for CGSize(0);
  swift_bridgeObjectRetain();
  v21 = v27;
  ProtobufEncoder.messageField<A>(_:_:)();
  if (!v21)
  {
    *(_QWORD *)&v28[0] = a4;
    WORD4(v28[0]) = v25;
    BYTE10(v28[0]) = v24;
    ProtobufEncoder.messageField<A>(_:_:)();
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewHost.LegacyStates.updateState(at:proxy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for ArchivedViewHostStates.count.getter in conformance _ArchivedViewHost<A, B>.LegacyStates()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for ArchivedViewHostStates.updateState(at:proxy:) in conformance _ArchivedViewHost<A, B>.LegacyStates()
{
  return _ArchivedViewHost.LegacyStates.updateState(at:proxy:)();
}

uint64_t protocol witness for ArchivedViewHostStates.auxiliaryData() in conformance _ArchivedViewHost<A, B>.LegacyStates()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = specialized _ArchivedViewHost.LegacyStates.auxiliaryData()(*v0, v0[1], v0[2], v0[3]);
  v4 = v2;
  if (!v1)
    outlined copy of Data?(v2, v3);
  return v4;
}

void _ArchivedViewHost.archiveStates(to:count:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  closure #1 in _ArchivedViewHost.archiveStates(to:count:body:)();
}

uint64_t sub_18725BA18()
{
  uint64_t v0;
  uint64_t result;
  char isEscapingClosureAtFileLocation;

  if (v0)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in _ArchivedViewHost.archiveStates(to:count:body:)()
{
  swift_retain();
  swift_retain();
  type metadata accessor for _ArchivedViewHost.LegacyStates();
}

uint64_t sub_18725BACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  _ArchivedViewHost.archiveStates<A>(_:to:)((uint64_t)&v3, v1, a1, (uint64_t)&protocol witness table for _ArchivedViewHost<A, B>.LegacyStates);
  swift_release();
  return swift_release();
}

void _ArchivedViewHost.archiveStates(count:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  mainThreadPrecondition()();
  type metadata accessor for DataArchiveWriter();
  swift_allocObject();
  v6 = DataArchiveWriter.init()();
  _ArchivedViewHost.archiveStates(to:count:body:)(v6, a1, a2, a3);
}

uint64_t sub_18725BB80()
{
  uint64_t v0;
  uint64_t v1;

  if (!v1)
    v0 = DataArchiveWriter.finalizeData()();
  swift_release();
  return v0;
}

void _ArchivedViewHost.archiveStates(to:count:body:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;

  mainThreadPrecondition()();
  type metadata accessor for FileArchiveWriter();
  v8 = a1;
  v9 = FileArchiveWriter.__allocating_init(file:)();
  _ArchivedViewHost.archiveStates(to:count:body:)(v9, a2, a3, a4);
}

uint64_t sub_18725BC44()
{
  return swift_release();
}

uint64_t _ArchivedViewHost.archiveStates(to:count:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v20 = a4;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v19 - v15;
  mainThreadPrecondition()();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17(v16, a1, v8);
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    type metadata accessor for FileArchiveWriter();
    v17(v12, a1, v8);
    result = FileArchiveWriter.__allocating_init(url:)();
    if (!v4)
      _ArchivedViewHost.archiveStates(to:count:body:)(result, a2, a3, v20);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _ArchivedViewHost.archiveStates<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;

  mainThreadPrecondition()();
  type metadata accessor for DataArchiveWriter();
  swift_allocObject();
  v8 = DataArchiveWriter.init()();
  _ArchivedViewHost.archiveStates<A>(_:to:)(a1, v8, a2, a3);
  if (!v4)
    v3 = DataArchiveWriter.finalizeData()();
  swift_release();
  return v3;
}

uint64_t _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;

  mainThreadPrecondition()();
  type metadata accessor for FileArchiveWriter();
  v8 = a2;
  v9 = FileArchiveWriter.__allocating_init(file:)();
  _ArchivedViewHost.archiveStates<A>(_:to:)(a1, v9, a3, a4);
  return swift_release();
}

uint64_t _ArchivedViewHost.forEachIdentifiedView(body:)(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  _BYTE v7[168];

  v5 = *v2;
  mainThreadPrecondition()();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v5);
  ViewRendererHost.preferenceValue<A>(_:)();
  _IdentifiedViewTree.forEach(_:)(a1, a2);
  return outlined destroy of _IdentifiedViewTree((uint64_t)v7);
}

uint64_t _ArchivedViewHost.applyMutation(_:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(__int128 *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *a1;
  v1 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v3 = *((_QWORD *)a1 + 4);
  _ArchivedViewHost.renderUntilStable()();
  _ArchivedViewHost.preferenceValue<A>(for:)();
  v4 = *(_QWORD *)(v9 + 16);
  if (v4)
  {
    v5 = v9 + 40;
    do
    {
      v6 = *(void (**)(__int128 *))(v5 - 8);
      v9 = v8;
      v10 = v1;
      v11 = v2;
      v12 = v3;
      swift_retain();
      v6(&v9);
      swift_release();
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewHost.preferenceValue<A>(for:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  mainThreadPrecondition()();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v1);
  return ViewRendererHost.preferenceValue<A>(_:)();
}

CGImageRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _ArchivedViewHost.filteredImage(_:)(CGImageRef a1)
{
  uint64_t *v1;
  uint64_t v3;
  CGImage *v4;

  v3 = *v1;
  swift_beginAccess();
  v4 = (CGImage *)(*(uint64_t (**)(CGImageRef, _QWORD))(*(_QWORD *)(v3 + 104) + 24))(a1, *(_QWORD *)(v3 + 88));
  swift_endAccess();
  return v4;
}

uint64_t _ArchivedViewHost.imageType(for:)@<X0>(CGImage *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGImage *v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  const __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  CGImage *v45;
  char *v46;
  char *v47;
  _QWORD *v48;

  v44 = a2;
  v45 = a1;
  v3 = (_QWORD *)*v2;
  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v47 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v3[11];
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v46 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v44 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v44 - v23;
  v25 = v3[31];
  v48 = v2;
  v26 = (char *)v2 + v25;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v26, v8);
  v27 = v3[13];
  v28 = v5;
  v29 = v4;
  v30 = v45;
  (*(void (**)(CGImage *, uint64_t))(v27 + 32))(v45, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v31(v20, 1, v29) == 1)
  {
    v32 = (id)CGImageGetUTType(v30);
    if (v32)
    {
      v33 = (__CFString *)v32;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      UTType.init(_:)();

    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v24, 1, 1, v29);
    }
    v34 = (uint64_t)v46;
    v35 = (uint64_t)v47;
    outlined destroy of UTType?((uint64_t)v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v24, v20, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v29);
    v34 = (uint64_t)v46;
    v35 = (uint64_t)v47;
  }
  outlined init with copy of UTType?((uint64_t)v24, v34);
  if (v31((char *)v34, 1, v29) == 1)
  {
    outlined destroy of UTType?((uint64_t)v24);
    outlined destroy of UTType?(v34);
    v36 = v48;
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
    v37(v35, v34, v29);
    v36 = v48;
    v38 = (_QWORD *)((char *)v48 + *(_QWORD *)(*v48 + 256));
    swift_beginAccess();
    v39 = *v38;
    swift_bridgeObjectRetain();
    v40 = specialized Set.contains(_:)(v35, v39);
    swift_bridgeObjectRelease();
    outlined destroy of UTType?((uint64_t)v24);
    if ((v40 & 1) != 0)
    {
      v41 = v44;
      v37(v44, v35, v29);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v41, 0, 1, v29);
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v35, v29);
  }
  v43 = (uint64_t)v36 + *(_QWORD *)(*v36 + 264);
  swift_beginAccess();
  return outlined init with copy of UTType?(v43, v44);
}

uint64_t _ArchivedViewHost.failedToEncodeView(type:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 104) + 16))(a1, *(_QWORD *)(v3 + 88));
  return swift_endAccess();
}

Swift::Void __swiftcall _ArchivedViewHost.reset()()
{
  mainThreadPrecondition()();
  GraphHost.incrementPhase()();
}

Swift::Void __swiftcall _ArchivedViewHost.updateRootView()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t)v0 + *(_QWORD *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall _ArchivedViewHost.updateEnvironment()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_beginAccess();
  v2 = *v1;
  v3 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v3 != -1)
    swift_once();
  v4 = static EnvironmentValues.configuredForPlatform;
  if (v2)
  {
    swift_release();
    if (!v4 || v2 != v4)
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release_n();
  swift_release_n();
}

Swift::Void __swiftcall _ArchivedViewHost.updateSize()()
{
  uint64_t v0;
  CGSize *v1;

  v1 = (CGSize *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_beginAccess();
  ViewGraph.setProposedSize(_:)(*v1);
}

Swift::Void __swiftcall _ArchivedViewHost.updateSafeArea()()
{
  swift_beginAccess();
  ViewGraph.setSafeAreaInsets(_:)();
}

Swift::Void __swiftcall _ArchivedViewHost.updateScrollableContainerSize()()
{
  swift_beginAccess();
  swift_beginAccess();
  CGSize.inset(by:)();
  static ViewSize.fixed(_:)();
  ViewGraph.setScrollableContainerSize(_:)();
}

uint64_t *_ArchivedViewHost.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_release();
  v2 = (uint64_t)v0 + direct field offset for _ArchivedViewHost.signposter;
  v3 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 208));
  swift_release();
  swift_release();
  outlined consume of Data?(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 240)), *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 240) + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 248));
  swift_bridgeObjectRelease();
  outlined destroy of UTType?((uint64_t)v0 + *(_QWORD *)(*v0 + 264));
  return v0;
}

uint64_t _ArchivedViewHost.__deallocating_deinit()
{
  _ArchivedViewHost.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AnyArchivedViewHost.failedToEncodeView(type:) in conformance _ArchivedViewHost<A, B>(uint64_t a1)
{
  return _ArchivedViewHost.failedToEncodeView(type:)(a1);
}

CGImageRef protocol witness for AnyArchivedViewHost.filteredImage(_:) in conformance _ArchivedViewHost<A, B>(CGImage *a1)
{
  return _ArchivedViewHost.filteredImage(_:)(a1);
}

uint64_t protocol witness for AnyArchivedViewHost.allowedImageTypes.getter in conformance _ArchivedViewHost<A, B>()
{
  specialized _ArchivedViewHost.allowedImageTypes.getter();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AnyArchivedViewHost.imageType(for:) in conformance _ArchivedViewHost<A, B>@<X0>(CGImage *a1@<X0>, uint64_t a2@<X8>)
{
  return _ArchivedViewHost.imageType(for:)(a1, a2);
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance _ArchivedViewHost<A, B>()
{
  specialized _ArchivedViewHost.viewGraph.getter();
  return swift_retain();
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance _ArchivedViewHost<A, B>(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return _ArchivedViewHost.currentTimestamp.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _ArchivedViewHost<A, B>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.currentTimestamp.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance _ArchivedViewHost<A, B>(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return _ArchivedViewHost.propertiesNeedingUpdate.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance _ArchivedViewHost<A, B>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.propertiesNeedingUpdate.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance _ArchivedViewHost<A, B>(char *a1)
{
  char v2;

  v2 = *a1;
  return _ArchivedViewHost.renderingPhase.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance _ArchivedViewHost<A, B>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.renderingPhase.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance _ArchivedViewHost<A, B>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ArchivedViewHost.externalUpdateCount.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ViewRendererHost.updateTransform() in conformance _ArchivedViewHost<A, B>()
{
  ViewRendererHost.updateTransform()();
}

uint64_t protocol witness for ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:) in conformance _ArchivedViewHost<A, B>(uint64_t a1)
{
  return _ArchivedViewHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(a1, 0);
}

uint64_t protocol witness for ViewGraphDelegate.as<A>(_:) in conformance _ArchivedViewHost<A, B>()
{
  return ViewGraphDelegate.as<A>(_:)();
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, *v0);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for ViewGraphDelegate.rootTransform() in conformance _ArchivedViewHost<A, B>()
{
  return ViewGraphDelegate.rootTransform()();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance _ArchivedViewHost<A, B>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, *v0);
  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void protocol witness for GraphDelegate.graphDidChange() in conformance _ArchivedViewHost<A, B>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, *v0);
  ViewRendererHost.graphDidChange()();
}

void protocol witness for GraphDelegate.beginTransaction() in conformance _ArchivedViewHost<A, B>()
{
  GraphDelegate.beginTransaction()();
}

uint64_t _ArchivedViewHost.sizeThatFits(_:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  _ProposedSize.init(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v1);
  return ViewRendererHost.sizeThatFits(_:)();
}

uint64_t specialized _ArchivedViewHost.viewGraph.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t specialized _ArchivedViewHost.content.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  return _ArchivedViewHost.content.didset();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t specialized _ArchivedViewHost.allowedImageTypes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t outlined init with copy of UTType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UTType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

char *specialized _ArchivedViewHost.init(content:delegate:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v3 = v2;
  v6 = *(_QWORD *)v2;
  static Signpost.archiving.getter();
  *(_WORD *)&v2[direct field offset for _ArchivedViewHost.propertiesNeedingUpdate] = 0;
  v2[direct field offset for _ArchivedViewHost.renderingPhase] = 0;
  *(_QWORD *)&v2[direct field offset for _ArchivedViewHost.currentTimestamp] = 0;
  *(_QWORD *)&v2[direct field offset for _ArchivedViewHost.externalUpdateCount] = 0;
  v2[direct field offset for _ArchivedViewHost.ignoreUpdateRequests] = 0;
  v2[direct field offset for _ArchivedViewHost.pendingIgnoredUpdates] = 0;
  *(_QWORD *)&v2[direct field offset for _ArchivedViewHost.lastDisplayListVersion] = 0;
  v7 = direct field offset for _ArchivedViewHost.stableIDRoot;
  type metadata accessor for _DisplayList_StableIdentityRoot();
  *(_QWORD *)&v2[v7] = _DisplayList_StableIdentityRoot.__allocating_init()();
  static ArchivedViewInput.Value.isArchived.getter();
  *(_WORD *)&v2[direct field offset for _ArchivedViewHost.instantiatedArchiveOptions] = 512;
  EnvironmentValues.init()();
  v8 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 224)];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 232)];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *(_OWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 240)] = xmmword_187C0B4D0;
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 256);
  type metadata accessor for UTType?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_187BF9820;
  static UTType.png.getter();
  static UTType.jpeg.getter();
  v14 = specialized Set.init<A>(_:)(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)&v3[v10] = v14;
  v15 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 264)];
  static UTType.png.getter();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  mainThreadPrecondition()();
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 16))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 208)], a1, *(_QWORD *)(v6 + 80));
  v16 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 88) - 8) + 16))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 248)], a2);
  MEMORY[0x18D75B908](v16);
  type metadata accessor for ViewGraph();
  *((_QWORD *)v3 + 2) = ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_retain();
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewHost<A, B>, v6);
  ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  return v3;
}

unint64_t lazy protocol witness table accessor for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider;
  if (!lazy protocol witness table cache variable for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUITextAlwaysOnProvider, &type metadata for SwiftUITextAlwaysOnProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider);
  }
  return result;
}

uint64_t partial apply for closure #1 in _ArchivedViewHost.archiveIfChanged()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in _ArchivedViewHost.archiveIfChanged()(v1, a1);
}

uint64_t specialized _ArchivedViewHost.LegacyStates.auxiliaryData()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4 + *(_QWORD *)(*(_QWORD *)a4 + 240);
  swift_beginAccess();
  return *(_QWORD *)v4;
}

uint64_t specialized _ArchivedViewHost.requestUpdate(after:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if ((*((_BYTE *)v0 + direct field offset for _ArchivedViewHost.ignoreUpdateRequests) & 1) != 0)
  {
    *((_BYTE *)v0 + direct field offset for _ArchivedViewHost.pendingIgnoredUpdates) = 1;
  }
  else
  {
    v1 = *v0;
    swift_beginAccess();
    (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 104) + 8))(*(_QWORD *)(v1 + 88));
    return swift_endAccess();
  }
  return result;
}

void base witness table accessor for ViewGraphDelegate in _ArchivedViewHost<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for GraphDelegate in _ArchivedViewHost<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18725D4F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a3 + a2 - 32);
  v6 = *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 208);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a4, v6, v5);
}

uint64_t sub_18725D564(uint64_t a1)
{
  return specialized _ArchivedViewHost.content.setter(a1);
}

uint64_t sub_18725D584()
{
  return 32;
}

__n128 sub_18725D590(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18725D5A4()
{
  return 32;
}

__n128 sub_18725D5B0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_18725D5BC@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 224));
  swift_beginAccess();
  result = *v3;
  *a2 = *v3;
  return result;
}

uint64_t sub_18725D60C(double *a1)
{
  return _ArchivedViewHost.size.setter(*a1, a1[1]);
}

uint64_t sub_18725D630()
{
  return 32;
}

__n128 sub_18725D63C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_18725D648@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 232);
  swift_beginAccess();
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_18725D698(double *a1)
{
  return _ArchivedViewHost.safeAreaInsets.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_18725D6C0()
{
  return 32;
}

__n128 sub_18725D6CC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18725D6D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _ArchivedViewHost.encodesCustomFontsAsURLs.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18725D704(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesCustomFontsAsURLs.setter(*a1);
}

uint64_t sub_18725D728()
{
  return 32;
}

__n128 sub_18725D734(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18725D740@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _ArchivedViewHost.encodesPreciseTextLayout.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18725D76C(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesPreciseTextLayout.setter(*a1);
}

uint64_t sub_18725D790()
{
  return 32;
}

__n128 sub_18725D79C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18725D7B0()
{
  return 32;
}

__n128 sub_18725D7BC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18725D7C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _ArchivedViewHost.encodesStableDisplayListIdentifiers.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18725D7F4(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesStableDisplayListIdentifiers.setter(*a1);
}

uint64_t sub_18725D818()
{
  return 32;
}

__n128 sub_18725D824(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_18725D830@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _ArchivedViewHost.encodesAssetCatalogReferences.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18725D85C(unsigned __int8 *a1)
{
  return _ArchivedViewHost.encodesAssetCatalogReferences.setter(*a1);
}

uint64_t sub_18725D880()
{
  return 32;
}

__n128 sub_18725D88C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_18725D898(_BYTE *a1@<X8>)
{
  _ArchivedViewHost.deploymentVersion.getter(a1);
}

_BYTE *sub_18725D8B8(char *a1)
{
  char v2;

  v2 = *a1;
  return _ArchivedViewHost.deploymentVersion.setter(&v2);
}

uint64_t sub_18725D8EC()
{
  return 32;
}

__n128 sub_18725D8F8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata completion function for _ArchivedViewHost()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for OSSignposter();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F)
      {
        type metadata accessor for UTType?(319, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        if (v3 <= 0x3F)
          swift_initClassMetadata2();
      }
    }
  }
}

void type metadata accessor for _ArchivedViewHost()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t method lookup function for _ArchivedViewHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ArchivedViewHost.__allocating_init(content:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t partial apply for closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _ArchivedViewHost.archiveStates<A>(_:to:)(*(uint64_t **)(v1 + 32), a1);
}

uint64_t partial apply for closure #2 in _ArchivedViewHost.archiveStates<A>(_:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in _ArchivedViewHost.archiveStates<A>(_:to:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int16 *)(v1 + 56) | (*(unsigned __int8 *)(v1 + 58) << 16));
}

uint64_t sub_18725DB0C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in _ArchivedViewHost.addDisplayList(_:to:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), sel_addDisplayList_, a1);
}

unint64_t type metadata accessor for RBEncoderSet()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBEncoderSet;
  if (!lazy cache variable for type metadata for RBEncoderSet)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBEncoderSet);
  }
  return result;
}

uint64_t sub_18725DB80()
{
  return swift_deallocObject();
}

void type metadata accessor for _ArchivedViewHost.LegacyStates()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #2 in closure #1 in _ArchivedViewHost.archiveIfChanged()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in _ArchivedViewHost.archiveIfChanged()(a1, *(uint64_t **)(v1 + 16));
}

void type metadata accessor for UTType?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for UTType();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

_QWORD *initializeWithCopy for _ArchivedViewHost.LegacyStates(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ArchivedViewHost.LegacyStates(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ArchivedViewHost.LegacyStates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay22UniformTypeIdentifiers6UTTypeVG_SSs5NeverOTg5055_s7SwiftUI11PasteHelperV09validatedC7HandleryycSgvgSS22de12Identifiers6G54Vcfu_33_464cb2da6335d584e794ab09e778cff4AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(type metadata accessor for UTType() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = UTType.identifier.getter();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t PasteHelper.validatedPasteHandler.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)(unint64_t);
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t (*v30)(unint64_t);

  v29 = a3;
  v30 = (uint64_t (*)(unint64_t))a2;
  type metadata accessor for IndexSet?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IndexSet();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - v15;
  v17 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay22UniformTypeIdentifiers6UTTypeVG_SSs5NeverOTg5055_s7SwiftUI11PasteHelperV09validatedC7HandleryycSgvgSS22de12Identifiers6G54Vcfu_33_464cb2da6335d584e794ab09e778cff4AHSSTf3nnnpk_nTf1cn_n(v17);
  swift_bridgeObjectRelease();
  v18 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, sel_itemSetWithPasteboardTypes_, isa);

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_7;
  }
  static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v21(v7, v12, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_7:

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for IndexSet?);
    return 0;
  }
  v22 = (uint64_t)v16;
  v21(v16, v7, v8);
  swift_bridgeObjectRetain();
  v23 = v18;
  v24 = v29;
  swift_retain();
  v25 = v30;
  v26 = specialized Sequence.compactMap<A>(_:)(v22, v23, a1, (uint64_t)v30, v24);

  swift_release();
  swift_bridgeObjectRelease();
  if (v26 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_5;
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v22, v8);
    swift_bridgeObjectRelease();

    return 0;
  }
LABEL_5:
  v27 = v25(v26);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v22, v8);
  return v27;
}

uint64_t closure #1 in PasteHelper.validatedPasteHandler.getter@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSIndexSet *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t result;
  id v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  _QWORD v63[2];
  void *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  char *v79;

  v72 = a3;
  v73 = a4;
  v71 = a2;
  v76 = a5;
  type metadata accessor for UTType?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v74 = (char *)v63 - v12;
  v13 = type metadata accessor for UTType();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v79 = (char *)v63 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v78 = (char *)v63 - v23;
  v70 = v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v63 - v27;
  v77 = type metadata accessor for IndexSet();
  v75 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77, v29);
  v68 = v30;
  v69 = (char *)v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v63 - v33;
  IndexSet.init(integer:)();
  IndexSet._bridgeToObjectiveC()(v35);
  v37 = v36;
  v38 = objc_msgSend(a1, sel_pasteboardTypesForItemSet_, v36);

  if (!v38)
    goto LABEL_15;
  type metadata accessor for [String]();
  v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v39 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_15:
    result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v34, v77);
    v49 = 0;
    goto LABEL_20;
  }
  v64 = a1;
  v40 = *(_QWORD *)(v39 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)(v40 + 16);
  v66 = v34;
  v67 = v28;
  v65 = v17;
  if (v41)
  {
    swift_bridgeObjectRetain();
    v63[1] = v40;
    v42 = v40 + 40;
    v43 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for UTType?);
      }
      else
      {
        v44 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        v45 = v78;
        v44(v78, v9, v13);
        v44(v79, v45, v13);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v43 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
        v47 = *((_QWORD *)v43 + 2);
        v46 = *((_QWORD *)v43 + 3);
        if (v47 >= v46 >> 1)
          v43 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v43);
        *((_QWORD *)v43 + 2) = v47 + 1;
        v44(&v43[((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v47], v79, v13);
      }
      v42 += 16;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
    v34 = v66;
    v28 = v67;
    v17 = v65;
  }
  else
  {
    v43 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v50 = v74;
  PasteHelper.availableType(from:)((uint64_t)v43, v71, v74);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v50, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v77);
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for UTType?);
    v49 = 0;
  }
  else
  {
    v79 = *(char **)(v14 + 32);
    ((void (*)(char *, char *, uint64_t))v79)(v28, v50, v13);
    v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_init);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v28, v13);
    v51 = v34;
    v52 = v75;
    v53 = v69;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v69, v51, v77);
    v54 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v55 = (v70 + *(unsigned __int8 *)(v52 + 80) + v54) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    v56 = swift_allocObject();
    v58 = v64;
    v57 = v65;
    v59 = v56;
    *(_QWORD *)(v56 + 16) = v64;
    ((void (*)(unint64_t, char *, uint64_t))v79)(v56 + v54, v57, v13);
    v60 = v77;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v59 + v55, v53, v77);
    v61 = v58;
    v62 = v67;
    NSItemProvider.registerDataRepresentation(for:visibility:loadHandler:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v62, v13);
    result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v66, v60);
  }
LABEL_20:
  *v76 = v49;
  return result;
}

uint64_t PasteHelper.availableType(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t, uint64_t);
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  type metadata accessor for UTType?();
  MEMORY[0x1E0C80A78](v6, v7);
  v70 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v64 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v64 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v78 = (char *)&v64 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v66 = (char *)&v64 - v27;
  v67 = v13;
  v76 = *(_QWORD *)(a2 + 16);
  v68 = a2;
  v69 = a3;
  v74 = a1;
  if (!v76)
  {
    swift_bridgeObjectRetain();
LABEL_21:
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v44 = (uint64_t)v70;
    v45(v70, 1, 1, v9);
LABEL_22:
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v44, 1, v9) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for UTType?);
      if (v76)
      {
        v46 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v47 = a2;
        v48 = *(_QWORD *)(a1 + 16);
        v49 = v47 + v46;
        v50 = *(_QWORD *)(v10 + 72);
        v51 = a1;
        v52 = v10;
        v53 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
        v78 = (char *)v45;
        v79 = v51 + v46;
        swift_bridgeObjectRetain();
        v54 = 0;
        v77 = v48;
        v75 = v49;
        while (1)
        {
          v53(v17, v49 + v50 * v54, v9);
          if (v48)
            break;
          v58 = *(void (**)(char *, uint64_t))(v52 + 8);
LABEL_31:
          ++v54;
          v58(v17, v9);
          if (v54 == v76)
          {
            swift_bridgeObjectRelease();
            v59 = 1;
            v60 = v69;
            return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v78)(v60, v59, 1, v9);
          }
        }
        v55 = v17;
        swift_bridgeObjectRetain();
        v56 = v79;
        v57 = v67;
        while (1)
        {
          v53(v57, v56, v9);
          if ((UTType.conforms(to:)() & 1) != 0)
            break;
          v58 = *(void (**)(char *, uint64_t))(v52 + 8);
          v58(v57, v9);
          v56 += v50;
          if (!--v48)
          {
            swift_bridgeObjectRelease();
            v17 = v55;
            v48 = v77;
            v49 = v75;
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v9);
        swift_bridgeObjectRelease();
        v60 = v69;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v69, v57, v9);
        v59 = 0;
        return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v78)(v60, v59, 1, v9);
      }
      v63 = 1;
    }
    else
    {
      v61 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
      v62 = v66;
      v61(v66, v44, v9);
      v61(a3, (uint64_t)v62, v9);
      v63 = 0;
    }
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v45)(a3, v63, 1, v9);
  }
  v64 = v17;
  v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v75 = a2 + v28;
  v79 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(v10 + 72);
  v73 = a1 + v28;
  v71 = a1 + v28 + v29;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain_n();
  v31 = 0;
  v77 = v29;
  v32 = v28 + 2 * v29;
  v33 = v30;
  v65 = a1 + v32;
  v34 = v78;
  v72 = v10;
  v30(v78, v75, v9);
  while (1)
  {
    if (!v79)
    {
      v35 = *(void (**)(char *, uint64_t))(v10 + 8);
      goto LABEL_4;
    }
    v36 = v33;
    v33(v21, v73, v9);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
    swift_bridgeObjectRetain();
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v35 = *(void (**)(char *, uint64_t))(v10 + 8);
    v35(v21, v9);
    if ((v37 & 1) != 0)
      goto LABEL_18;
    if (v79 != 1)
    {
      v36(v21, v71, v9);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35(v21, v9);
      if ((v38 & 1) != 0)
      {
LABEL_18:
        a2 = v68;
        swift_bridgeObjectRelease();
        a1 = v74;
        swift_bridgeObjectRelease();
        v10 = v72;
        v44 = (uint64_t)v70;
        (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v70, v78, v9);
        v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
        v45((char *)v44, 0, 1, v9);
        a3 = v69;
        v17 = v64;
        goto LABEL_22;
      }
      if (v79 != 2)
        break;
    }
    a1 = v74;
    swift_bridgeObjectRelease();
    v10 = v72;
    v33 = v36;
LABEL_12:
    v34 = v78;
LABEL_4:
    ++v31;
    v35(v34, v9);
    if (v31 == v76)
    {
      a2 = v68;
      swift_bridgeObjectRelease();
      a3 = v69;
      v17 = v64;
      goto LABEL_21;
    }
    v33(v34, v75 + v77 * v31, v9);
  }
  v39 = v65;
  v40 = 2;
  v33 = v36;
  while (1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v21, v39, v9);
    v42 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    v43 = dispatch thunk of static Equatable.== infix(_:_:)();
    v35(v21, v9);
    if ((v43 & 1) != 0)
      goto LABEL_18;
    ++v40;
    v39 += v77;
    v33 = v36;
    if (v42 == v79)
    {
      a1 = v74;
      swift_bridgeObjectRelease();
      v10 = v72;
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in PasteHelper.validatedPasteHandler.getter(void (*a1)(id, unint64_t, _QWORD), uint64_t a2, void *a3)
{
  uint64_t v5;
  void *v6;
  NSIndexSet *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD *v11;
  unint64_t v12;

  v5 = UTType.identifier.getter();
  v6 = (void *)MEMORY[0x18D75CC88](v5);
  swift_bridgeObjectRelease();
  IndexSet._bridgeToObjectiveC()(v7);
  v9 = v8;
  v10 = objc_msgSend(a3, sel_dataForPasteboardType_inItemSet_, v6, v8);

  if (v10)
  {
    v11 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v11[2])
    {
      v10 = (id)v11[4];
      v12 = v11[5];
      outlined copy of Data._Representation((uint64_t)v10, v12);
    }
    else
    {
      v10 = 0;
      v12 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0xF000000000000000;
  }
  a1(v10, v12, 0);
  outlined consume of Data?((uint64_t)v10, v12);
  return 0;
}

Swift::Bool __swiftcall PasteHelper.canPaste(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t rawValue;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v30 = v1;
  v31 = v2;
  v29 = *(_QWORD *)&a1.is_nil;
  rawValue = (unint64_t)a1.value._rawValue;
  type metadata accessor for UTType?();
  MEMORY[0x1E0C80A78](v4, v5);
  v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (rawValue)
  {
    v7 = rawValue;
    if (!(rawValue >> 62))
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    v8 = v9;
    if (v9)
      goto LABEL_4;
LABEL_26:
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_27:
    swift_bridgeObjectRelease_n();
    v25 = v32;
    PasteHelper.availableType(from:)((uint64_t)v11, v29, v32);
    swift_bridgeObjectRelease();
    v26 = type metadata accessor for UTType();
    v27 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26) != 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for UTType?);
    LOBYTE(v9) = v27;
    return v9;
  }
  v23 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard, v29, v30, v31);
  v24 = objc_msgSend(v23, sel_itemProviders);

  type metadata accessor for NSItemProvider();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
    goto LABEL_25;
LABEL_3:
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  LOBYTE(v9) = swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_26;
LABEL_4:
  if (v8 < 1)
    goto LABEL_32;
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v12 = (v7 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v10, v7) : *(id *)(v7 + 8 * v10 + 32);
    v13 = v12;
    v14 = objc_msgSend(v12, sel_registeredContentTypes, v29);
    type metadata accessor for UTType();
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v16 = *(_QWORD *)(v15 + 16);
    v17 = v11[2];
    v18 = v17 + v16;
    if (__OFADD__(v17, v16))
      break;
    LODWORD(v9) = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)v9 && v18 <= v11[3] >> 1)
    {
      if (*(_QWORD *)(v15 + 16))
        goto LABEL_20;
    }
    else
    {
      if (v17 <= v18)
        v19 = v17 + v16;
      else
        v19 = v17;
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v19, 1, v11);
      v11 = (_QWORD *)v9;
      if (*(_QWORD *)(v15 + 16))
      {
LABEL_20:
        if ((v11[3] >> 1) - v11[2] < v16)
          goto LABEL_30;
        LOBYTE(v9) = swift_arrayInitWithCopy();
        if (v16)
        {
          v20 = v11[2];
          v21 = __OFADD__(v20, v16);
          v22 = v20 + v16;
          if (v21)
            goto LABEL_31;
          v11[2] = v22;
        }
        goto LABEL_7;
      }
    }
    if (v16)
      goto LABEL_29;
LABEL_7:
    swift_bridgeObjectRelease();
    if (v8 == ++v10)
      goto LABEL_27;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return v9;
}

uint64_t (*closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:);
}

uint64_t PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = MEMORY[0x18D754DF8](a3, a4);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a1;
  v9[5] = a2;
  return v8;
}

uint64_t (*closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  return partial apply for closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
}

uint64_t closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[2];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TaskPriority?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v18 - v12;
  v18[0] = a1;
  type metadata accessor for [NSItemProvider](0);
  swift_bridgeObjectRetain();
  AtomicBox.init(wrappedValue:)();
  v14 = v18[1];
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = v14;
  v16[7] = a2;
  v16[8] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  v10 = type metadata accessor for Optional();
  v8[10] = v10;
  v8[11] = *(_QWORD *)(v10 - 8);
  v8[12] = swift_task_alloc();
  v8[13] = *(_QWORD *)(a7 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v0 + 16) = Array.init()();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AtomicBox<[NSItemProvider]>, (uint64_t (*)(uint64_t))type metadata accessor for [NSItemProvider], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7BF8]);
  result = AtomicBox.wrappedValue.getter();
  v2 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 128) = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 136) = v3;
    if (v3)
    {
LABEL_3:
      if (v3 < 1)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v0 + 144) = 0;
        v4 = *(_QWORD *)(v0 + 128);
        if ((v4 & 0xC000000000000001) != 0)
          v5 = (id)MEMORY[0x18D75E3BC](0);
        else
          v5 = *(id *)(v4 + 32);
        v6 = v5;
        *(_QWORD *)(v0 + 152) = v5;
        v7 = swift_task_alloc();
        *(_QWORD *)(v0 + 160) = v7;
        *(_QWORD *)v7 = v0;
        *(_QWORD *)(v7 + 8) = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
        v8 = *(_QWORD *)(v0 + 96);
        v9 = *(_OWORD *)(v0 + 64);
        *(_QWORD *)(v7 + 40) = v6;
        *(_OWORD *)(v7 + 24) = v9;
        *(_QWORD *)(v7 + 16) = v8;
        return swift_task_switch();
      }
      return result;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)(v0 + 136) = v3;
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 32) = v10;
  v11 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v11);
  if ((Collection.isEmpty.getter() & 1) == 0)
    (*(void (**)(uint64_t))(v0 + 48))(v10);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v1 = *(void **)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v4, 0, 1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v4, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  type metadata accessor for Array();
  Array.append(_:)();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  v7 = *(_QWORD *)(v0 + 144) + 1;
  if (v7 == *(_QWORD *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 32) = v8;
    v9 = type metadata accessor for Array();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v9);
    if ((Collection.isEmpty.getter() & 1) == 0)
      (*(void (**)(uint64_t))(v0 + 48))(v8);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 144) = v7;
    v11 = *(_QWORD *)(v0 + 128);
    if ((v11 & 0xC000000000000001) != 0)
      v12 = (id)MEMORY[0x18D75E3BC]();
    else
      v12 = *(id *)(v11 + 8 * v7 + 32);
    v13 = v12;
    *(_QWORD *)(v0 + 152) = v12;
    v14 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v14;
    *(_QWORD *)v14 = v0;
    *(_QWORD *)(v14 + 8) = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
    v15 = *(_QWORD *)(v0 + 96);
    v16 = *(_OWORD *)(v0 + 64);
    *(_QWORD *)(v14 + 40) = v13;
    *(_OWORD *)(v14 + 24) = v16;
    *(_QWORD *)(v14 + 16) = v15;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 56))(v2, 1, 1, *(_QWORD *)(v0 + 64));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 144) + 1;
  if (v5 == *(_QWORD *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 32) = v6;
    v7 = type metadata accessor for Array();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v7);
    if ((Collection.isEmpty.getter() & 1) == 0)
      (*(void (**)(uint64_t))(v0 + 48))(v6);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 144) = v5;
    v9 = *(_QWORD *)(v0 + 128);
    if ((v9 & 0xC000000000000001) != 0)
      v10 = (id)MEMORY[0x18D75E3BC]();
    else
      v10 = *(id *)(v9 + 8 * v5 + 32);
    v11 = v10;
    *(_QWORD *)(v0 + 152) = v10;
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v12;
    *(_QWORD *)v12 = v0;
    *(_QWORD *)(v12 + 8) = closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_OWORD *)(v0 + 64);
    *(_QWORD *)(v12 + 40) = v11;
    *(_OWORD *)(v12 + 24) = v14;
    *(_QWORD *)(v12 + 16) = v13;
    return swift_task_switch();
  }
}

uint64_t NSItemProvider.loadTransferable<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a3;
  return swift_task_switch();
}

uint64_t NSItemProvider.loadTransferable<A>(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = NSItemProvider.loadTransferable<A>(for:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  type metadata accessor for Error();
  v7 = type metadata accessor for CheckedContinuation();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  v15 = (void *)NSItemProvider.loadTransferable<A>(type:completionHandler:)();
  swift_release();

}

uint64_t closure #1 in closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[2];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v19 - v10;
  type metadata accessor for Error();
  v12 = type metadata accessor for Result();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (_QWORD *)((char *)v19 - v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)v19 - v15, a1, v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19[1] = *v16;
    type metadata accessor for CheckedContinuation();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v5 + 32))(v11, v16, a3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, a3);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a3);
  }
}

void PasteHelper.ConfigurationSupport.pasteHelper.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  Class isa;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for UTType();
  v27 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper);
  if (v7)
  {
    swift_bridgeObjectRetain();
    if (a1 && (specialized static Array<A>.== infix(_:_:)(v7, a1) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        v24 = v1;
        v28 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
        v9 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        v23 = v7;
        v10 = v7 + v9;
        v11 = *(_QWORD *)(v27 + 72);
        v25 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
        v26 = v11;
        do
        {
          v25(v6, v10, v3);
          v12 = UTType.identifier.getter();
          v14 = v13;
          (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
          v15 = v28;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
            v15 = v28;
          }
          v17 = *(_QWORD *)(v15 + 16);
          v16 = *(_QWORD *)(v15 + 24);
          if (v17 >= v16 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
            v15 = v28;
          }
          *(_QWORD *)(v15 + 16) = v17 + 1;
          v18 = v15 + 16 * v17;
          *(_QWORD *)(v18 + 32) = v12;
          *(_QWORD *)(v18 + 40) = v14;
          v10 += v26;
          --v8;
        }
        while (v8);
        swift_bridgeObjectRelease();
        v1 = v24;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v19 = objc_allocWithZone(MEMORY[0x1E0DC3AA8]);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v21 = objc_msgSend(v19, sel_initWithAcceptableTypeIdentifiers_, isa);

      v22 = *(void **)(v1 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteConfiguration);
      *(_QWORD *)(v1 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteConfiguration) = v21;

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for PasteHelper.ConfigurationSupport()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PasteHelper()
{
  return &type metadata for PasteHelper;
}

unint64_t type metadata accessor for NSItemProvider()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSItemProvider;
  if (!lazy cache variable for type metadata for NSItemProvider)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
  }
  return result;
}

void type metadata accessor for IndexSet?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for IndexSet?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(uint64_t *, _QWORD);
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v37)(char *, uint64_t, uint64_t, double);
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[4];
  uint64_t v52;

  v42 = a4;
  v43 = a5;
  v40 = a2;
  v41 = a3;
  v6 = type metadata accessor for IndexSet.Index();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v47 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v46 = (char *)&v37 - v12;
  v13 = type metadata accessor for IndexSet();
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0];
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<IndexSet>();
  v20 = v19;
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0DEE9D8];
  v39 = v15;
  v37 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v37(v18, a1, v13, v22);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v14, MEMORY[0x1E0CB13D0]);
  v38 = v18;
  dispatch thunk of Sequence.makeIterator()();
  v25 = &v24[*(int *)(v20 + 36)];
  v48 = v7;
  v44 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v45 = v24;
  v27 = v46;
  v26 = v47;
  while (1)
  {
    v44(v27, v25, v6);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29 = *(void (**)(char *, uint64_t))(v48 + 8);
    v29(v26, v6);
    v29(v27, v6);
    if ((v28 & 1) != 0)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<IndexSet>);
      return v52;
    }
    v30 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v32 = *v31;
    v30(v51, 0);
    v33 = v38;
    ((void (*)(char *, char *, uint64_t))v37)(v38, v24, v13);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v13);
    v51[0] = v32;
    v34 = v49;
    v35 = closure #1 in PasteHelper.validatedPasteHandler.getter(v40, v41, v42, v43, &v50);
    if (v34)
      break;
    v49 = 0;
    if (v50)
    {
      MEMORY[0x18D75CF58](v35);
      if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<IndexSet>);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for [String]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [String])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [String]);
  }
}

uint64_t sub_187260548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for IndexSet();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PasteHelper.validatedPasteHandler.getter(void (*a1)(id, unint64_t, _QWORD), uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for UTType();
  type metadata accessor for IndexSet();
  return closure #2 in closure #1 in PasteHelper.validatedPasteHandler.getter(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_187260680()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1))()
{
  uint64_t *v1;

  return closure #1 in PasteHelper.init<A>(onPaste:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_1872606B0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

void type metadata accessor for [NSItemProvider](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [NSItemProvider], (uint64_t (*)(uint64_t))type metadata accessor for NSItemProvider, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

uint64_t sub_187260708()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in closure #1 in closure #1 in PasteHelper.init<A>(onPaste:)(a1, v6, v7, v8, v9, v10, v4, v5);
}

void partial apply for closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in NSItemProvider.loadTransferable<A>(for:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1872607DC()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Error();
  v1 = type metadata accessor for CheckedContinuation();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.loadTransferable<A>(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  type metadata accessor for Error();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CheckedContinuation() - 8) + 80);
  return closure #1 in closure #1 in NSItemProvider.loadTransferable<A>(for:)(a1, v1 + ((v4 + 32) & ~v4), v3);
}

uint64_t sub_1872608C0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t destroy for NavigationSplitReader()
{
  outlined consume of HoverCallback();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationSplitReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationSplitReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of HoverCallback();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_WORD *)(a1 + 50) = *((_WORD *)a2 + 25);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  return a1;
}

uint64_t assignWithTake for NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of HoverCallback();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitReader(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 82))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitReader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 82) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitReader()
{
  return &type metadata for NavigationSplitReader;
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitReader()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized Location.update()(_BYTE *a1)
{
  uint64_t v1;
  Swift::UInt v3;
  unsigned __int8 v4;
  Swift::UInt v5;
  uint64_t Strong;
  __int128 v8;
  _BYTE v9[152];
  _BYTE v10[152];

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v10) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v3, v4, v5);
      outlined retain of NavigationState?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    }
  }
  *a1 = Strong & 1;
  return 1;
}

uint64_t NavigationSplitReader.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v15 = *(_WORD *)(v1 + 48);
  v13 = *(_WORD *)(v1 + 50);
  v5 = *(_QWORD *)(v1 + 64);
  v14 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 72);
  v19 = *(_BYTE *)(v1 + 81);
  v20 = *(_BYTE *)(v1 + 80);
  v18 = Namespace.wrappedValue.getter();
  v17 = Namespace.wrappedValue.getter();
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_retain();
  swift_retain();
  outlined copy of HoverCallback();
  type metadata accessor for NavigationStateHost();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost, (uint64_t (*)(uint64_t))type metadata accessor for NavigationStateHost, (uint64_t)&protocol conformance descriptor for NavigationStateHost);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v7 = StateObject.wrappedValue.getter();
  outlined consume of HoverCallback();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v21, v9);
  v10 = (unsigned __int16)v21 >> 14;
  if (v10 < 2 || v10 == 3 && (unsigned __int16)v21 == 49152)
    v11 = 2;
  else
    v11 = 3;
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v16;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = v15;
  *(_WORD *)(a1 + 58) = v13;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v11;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationSplitReader()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility.Key, (uint64_t)&protocol witness table for CompositeNavigationSplitViewVisibility.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  lazy protocol witness table accessor for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  unint64_t v14;
  int v15;
  int v16;
  char v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  char v22;
  unint64_t v23;
  int v24;
  unsigned int OffsetAttribute2;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  _BYTE v52[24];
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a2;
  v37 = *(_DWORD *)(a2 + 8);
  v41 = *(_QWORD *)(a2 + 16);
  v42 = *(_DWORD *)(a2 + 28);
  v3 = *(_QWORD *)(a2 + 40);
  v43 = *(_QWORD *)(a2 + 48);
  v50 = *(_DWORD *)(a2 + 56);
  v39 = *(_DWORD *)(a2 + 60);
  v40 = *(_DWORD *)(a2 + 24);
  v45 = *(_DWORD *)(a2 + 64);
  v46 = *(_DWORD *)(a2 + 32);
  v47 = *(_DWORD *)(a2 + 68);
  v48 = *(_DWORD *)(a2 + 36);
  v49 = *(_DWORD *)(a2 + 72);
  v38 = *(_DWORD *)(a2 + 76);
  v44 = *(_DWORD *)(a2 + 80);
  v4 = MEMORY[0x1E0CE1470];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_NavigationSplitReader>, (uint64_t)&unk_1E1ADF758, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v5 = MEMORY[0x1E0CE7DD0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v5, (uint64_t (*)(_QWORD, uint64_t))v4);
  v35 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(_QWORD, uint64_t))v4);
  v31 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t))v4);
  v32 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(_QWORD, uint64_t))v4);
  v33 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationSplitParameters>, (uint64_t)&type metadata for NavigationSplitParameters, (uint64_t (*)(_QWORD, uint64_t))v4);
  v36 = _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CompositeNavigationSplitViewVisibility>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility, (uint64_t (*)(_QWORD, uint64_t))v4);
  _GraphValue.value.getter();
  type metadata accessor for NavigationStateHost();
  _GraphValue.subscript.getter();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationStateHost>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationStateHost, (uint64_t (*)(uint64_t, uint64_t))v4);
  v6 = _GraphValue.value.getter();
  v7 = MEMORY[0x1E0DEB418];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Int>, v7, (uint64_t (*)(_QWORD, uint64_t))v4);
  v30 = _GraphValue.value.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  _GraphValue.subscript.getter();
  type metadata accessor for Binding<NavigationSplitViewColumn>?(0, &lazy cache variable for type metadata for _GraphValue<Binding<NavigationSplitViewColumn>>, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t (*)(uint64_t, uint64_t))v4);
  v28 = _GraphValue.value.getter();
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  *(_OWORD *)&v52[8] = xmmword_187BF9840;
  v53 = 0;
  LODWORD(v51) = _ViewInputs.environment.getter();
  HIDWORD(v51) = v6;
  *(_DWORD *)v52 = v35;
  *(_DWORD *)&v52[4] = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  lazy protocol witness table accessor for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of _NavigationSplitReader.DerivedAttributes((uint64_t)&v51);
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v8 = v51;
  KeyPath = swift_getKeyPath();
  LODWORD(v51) = v6;
  *(_QWORD *)v52 = KeyPath;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for NavigationSeedHost(0);
  type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Focus<NavigationStateHost, NavigationSeedHost> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>, MEMORY[0x1E0CFECE0]);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v10 = AGCreateWeakAttribute();
  v51 = v8;
  *(_QWORD *)v52 = v10;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds();
  Attribute.init<A>(body:value:flags:update:)();
  v27 = AGCreateWeakAttribute();
  v51 = v2;
  *(_DWORD *)v52 = v37;
  *(_QWORD *)&v52[8] = v41;
  *(_DWORD *)&v52[16] = v40;
  *(_DWORD *)&v52[20] = v42;
  v53 = __PAIR64__(v48, v46);
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  swift_getKeyPath();
  v34 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v51 = v2;
  *(_DWORD *)v52 = v37;
  *(_QWORD *)&v52[8] = v41;
  *(_DWORD *)&v52[16] = v40;
  *(_DWORD *)&v52[20] = v42;
  v53 = __PAIR64__(v48, v46);
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  v11 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v12 = *(_DWORD *)v52;
  v13 = v52[4];
  v14 = v51;
  v51 = __PAIR64__(OffsetAttribute2, v34);
  *(_DWORD *)v52 = v11;
  *(_QWORD *)&v52[4] = v14;
  *(_DWORD *)&v52[12] = v12;
  v52[16] = v13;
  *(_DWORD *)&v52[20] = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  LODWORD(v7) = AGGraphCreateOffsetAttribute2();
  v51 = v2;
  *(_DWORD *)v52 = v37;
  *(_QWORD *)&v52[8] = v41;
  *(_DWORD *)&v52[16] = v40;
  *(_DWORD *)&v52[20] = v42;
  v53 = __PAIR64__(v48, v46);
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  v15 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v16 = *(_DWORD *)v52;
  v17 = v52[4];
  v18 = v51;
  v51 = __PAIR64__(v7, v28);
  *(_DWORD *)v52 = v15;
  *(_QWORD *)&v52[4] = v18;
  *(_DWORD *)&v52[12] = v16;
  v52[16] = v17;
  *(_DWORD *)&v52[20] = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v51 = v2;
  *(_DWORD *)v52 = v37;
  *(_QWORD *)&v52[8] = v41;
  *(_DWORD *)&v52[16] = v40;
  *(_DWORD *)&v52[20] = v42;
  v53 = __PAIR64__(v48, v46);
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  swift_getKeyPath();
  v29 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v19 = AGGraphCreateOffsetAttribute2();
  v51 = v2;
  *(_DWORD *)v52 = v37;
  *(_QWORD *)&v52[8] = v41;
  *(_DWORD *)&v52[16] = v40;
  *(_DWORD *)&v52[20] = v42;
  v53 = __PAIR64__(v48, v46);
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  v20 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v21 = *(_DWORD *)v52;
  v22 = v52[4];
  v23 = v51;
  v51 = __PAIR64__(v19, v29);
  *(_DWORD *)v52 = v20;
  *(_QWORD *)&v52[4] = v23;
  *(_DWORD *)&v52[12] = v21;
  v52[16] = v22;
  *(_DWORD *)&v52[20] = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  LODWORD(v51) = v36;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.LeadingColumnBehavior and conformance _NavigationSplitReader.LeadingColumnBehavior();
  v24 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v51) = AGGraphCreateOffsetAttribute2();
  HIDWORD(v51) = v35;
  v52[0] = 0;
  *(_DWORD *)&v52[4] = v30;
  *(_DWORD *)&v52[8] = v31;
  *(_QWORD *)&v52[12] = v27;
  *(_DWORD *)&v52[20] = v24;
  v53 = 0;
  v54 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>();
  Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v51) = AGGraphCreateOffsetAttribute2();
  HIDWORD(v51) = v35;
  v52[0] = 1;
  *(_DWORD *)&v52[4] = v30;
  *(_DWORD *)&v52[8] = v32;
  *(_QWORD *)&v52[12] = v27;
  *(_DWORD *)&v52[20] = v24;
  v53 = 0;
  v54 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>();
  Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v51) = AGGraphCreateOffsetAttribute2();
  HIDWORD(v51) = v35;
  v52[0] = 2;
  *(_DWORD *)&v52[4] = v30;
  *(_DWORD *)&v52[8] = v33;
  *(_QWORD *)&v52[12] = v27;
  *(_DWORD *)&v52[20] = v24;
  v53 = 0;
  v54 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>();
  Attribute.init<A>(body:value:flags:update:)();
  v51 = v2;
  *(_DWORD *)v52 = v37;
  *(_QWORD *)&v52[8] = v41;
  *(_DWORD *)&v52[16] = v40;
  *(_DWORD *)&v52[20] = v42;
  v53 = __PAIR64__(v48, v46);
  v54 = v3;
  v55 = v43;
  v56 = v50;
  v57 = v39;
  v58 = v45;
  v59 = v47;
  v60 = __PAIR64__(v38, v49);
  v61 = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.setter();
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  PropertyList.subscript.setter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<PositionedNavigationDestination.Key>, (uint64_t)&type metadata for PositionedNavigationDestination.Key, (uint64_t)&protocol witness table for PositionedNavigationDestination.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PositionedNavigationDestination.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  PropertyList.subscript.setter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  type metadata accessor for ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationStat();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModi();
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #6 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 39;
}

uint64_t closure #7 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 63;
}

uint64_t closure #8 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 71;
}

uint64_t closure #9 in static _NavigationSplitReader._makeView(view:inputs:)(uint64_t a1)
{
  return a1 + 79;
}

uint64_t _NavigationSplitReader.DerivedAttributes.updateValue()()
{
  uint64_t v0;
  _QWORD *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[8];
  uint64_t v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  Value = (_QWORD *)AGGraphGetValue();
  v2 = Value[1];
  *(_QWORD *)&v44 = *Value;
  *((_QWORD *)&v44 + 1) = v2;
  *(_QWORD *)&v29 = v44;
  *((_QWORD *)&v29 + 1) = v2;
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  LOBYTE(v29) = v41[0] & 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v29) = 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>, (uint64_t)&type metadata for NavigationCompactColumnKey, (uint64_t)&protocol witness table for NavigationCompactColumnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  v29 = 0uLL;
  LOBYTE(v30[0]) = 0;
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v3 = v0 + 16;
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v0 + 16, (uint64_t)&v29, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v4 = *((_QWORD *)&v29 + 1);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v29, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (v4 != 1)
    goto LABEL_16;
  type metadata accessor for NavigationStateHost();
  AGGraphGetValue();
  v5 = (uint64_t *)AGGraphGetValue();
  v6 = *v5;
  v7 = v5[1];
  swift_weakInit();
  v8 = swift_weakAssign();
  v42 = v6;
  v43 = v7;
  outlined init with take of NavigationAuthority(v8, (uint64_t)&v29);
  swift_retain();
  swift_retain();
  outlined assign with take of NavigationAuthority?((uint64_t)&v29, v0 + 16);
  AGGraphGetValue();
  v29 = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  NavigationStateHost.createState(environment:)((uint64_t *)&v29);
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationState.StackContent.Key>, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v10 = *(_QWORD *)AGGraphGetValue();
  v11 = *(_QWORD *)AGGraphGetValue();
  *(_QWORD *)(inited + 32) = v10;
  *(_BYTE *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = v11;
  v12 = *(_QWORD *)AGGraphGetValue();
  v13 = *(_QWORD *)AGGraphGetValue();
  *(_QWORD *)(inited + 56) = v12;
  *(_BYTE *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = v13;
  v14 = *(_QWORD *)AGGraphGetValue();
  if (v14 == 3)
  {
    v15 = *(_QWORD *)AGGraphGetValue();
    inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, 3, 1, (char *)inited);
    *(_QWORD *)(inited + 16) = 3;
    *(_QWORD *)(inited + 80) = v15;
    *(_BYTE *)(inited + 88) = 1;
    *(_QWORD *)(inited + 96) = 3;
  }
  swift_bridgeObjectRetain();
  v16 = *(_QWORD *)(inited + 32);
  v17 = *(unsigned __int8 *)(inited + 40);
  v18 = *(_QWORD *)(inited + 48);
  result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v3, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v42 == 1)
    goto LABEL_21;
  v31 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v32 = 22;
  v33 = v16;
  v34 = v17;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v39 = 0;
  v35 = v18;
  v40 = 0;
  NavigationAuthority.enqueueRequest(_:)(&v29);
  outlined destroy of NavigationAuthority((uint64_t)v41);
  v20 = *(_QWORD *)(inited + 56);
  v21 = *(unsigned __int8 *)(inited + 64);
  v22 = *(_QWORD *)(inited + 72);
  result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v3, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v42 == 1)
    goto LABEL_21;
  v31 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v32 = 22;
  v33 = v20;
  v34 = v21;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v39 = 0;
  v35 = v22;
  v40 = 0;
  NavigationAuthority.enqueueRequest(_:)(&v29);
  outlined destroy of NavigationAuthority((uint64_t)v41);
  if (v14 == 3)
  {
    v23 = *(_QWORD *)(inited + 80);
    v24 = *(unsigned __int8 *)(inited + 88);
    v25 = *(_QWORD *)(inited + 96);
    result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v3, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v42 != 1)
    {
      v31 = 0u;
      v29 = 0u;
      memset(v30, 0, sizeof(v30));
      v32 = 22;
      v33 = v23;
      v34 = v24;
      v37 = 0;
      v38 = 0;
      v36 = 0;
      v39 = 0;
      v35 = v25;
      v40 = 0;
      NavigationAuthority.enqueueRequest(_:)(&v29);
      outlined destroy of NavigationAuthority((uint64_t)v41);
      goto LABEL_15;
    }
LABEL_21:
    __break(1u);
    return result;
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
LABEL_16:
  LOBYTE(v29) = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*((_QWORD *)&v44 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v3, (uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v28 == 1)
    __break(1u);
  outlined init with take of NavigationAuthority((uint64_t)v27, (uint64_t)v41);
  v26 = v44;
  outlined init with take of Image.Resolved?((uint64_t)v41, (uint64_t)&v29, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(_OWORD *)((char *)v30 + 8) = v26;
  type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v29, (uint64_t (*)(_QWORD))type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues));
  swift_release();
  return swift_release();
}

double protocol witness for static StatefulRule.initialValue.getter in conformance _NavigationSplitReader.DerivedAttributes@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_187BFE310;
  return result;
}

uint64_t _NavigationSplitReader.UpdatePreferredCompactColumn.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9[8];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[40];
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  _BYTE v16[24];

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(Value, (uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (*((_QWORD *)&v11 + 1) == 1)
    return outlined destroy of AccessibilityTableContext?((uint64_t)&v11, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  outlined init with take of NavigationAuthority((uint64_t)&v11, (uint64_t)v16);
  v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v3 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v3;
    *(_QWORD *)(v0 + 16) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 24) = 0;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  AGGraphGetValue();
  swift_retain();
  v4 = dispatch thunk of AnyLocation.update()();
  swift_release();
  if ((v4 & 1) != 0)
  {
    v5 = v11;
    if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
    {
      v6 = AGGraphGetValue();
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(unsigned __int8 *)(v6 + 16) | (unint64_t)(v5 << 8);
      *(_QWORD *)&v11 = *(_QWORD *)v6;
      *((_QWORD *)&v11 + 1) = v7;
      *(_QWORD *)v12 = v8;
      v13 = 0;
      memset(&v12[8], 0, 32);
      v14[0] = 4;
      memset(&v14[8], 0, 32);
      *(_OWORD *)&v14[40] = xmmword_187BF9FB0;
      v14[56] = 0;
      v15 = 0;
      v9[6] = *(_OWORD *)&v14[32];
      v9[7] = *(_OWORD *)&v14[48];
      v10 = 0;
      v9[2] = *(_OWORD *)&v12[16];
      v9[3] = 0uLL;
      v9[4] = *(_OWORD *)v14;
      v9[5] = *(_OWORD *)&v14[16];
      v9[0] = v11;
      v9[1] = *(_OWORD *)v12;
      swift_retain();
      swift_retain();
      NavigationAuthority.enqueueRequest(_:)(v9);
      outlined release of NavigationRequest((uint64_t)&v11);
    }
  }
  return outlined destroy of NavigationAuthority((uint64_t)v16);
}

unint64_t implicit closure #2 in _NavigationSplitReader.UpdatePreferredCompactColumn.updateValue()()
{
  return 0xD000000000000025;
}

uint64_t _NavigationSplitReader.UpdateRequiredCompactColumn.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9[8];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[40];
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  _BYTE v16[24];

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(Value, (uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (*((_QWORD *)&v11 + 1) == 1)
    return outlined destroy of AccessibilityTableContext?((uint64_t)&v11, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  outlined init with take of NavigationAuthority((uint64_t)&v11, (uint64_t)v16);
  type metadata accessor for Binding<NavigationSplitViewColumn>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>?, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = AGGraphGetValue();
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return outlined destroy of NavigationAuthority((uint64_t)v16);
  v5 = *(_QWORD *)v3;
  v6 = *(unsigned __int8 *)(v3 + 16);
  v7 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v7 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v7;
    *(_QWORD *)(v0 + 16) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 24) = 0;
  }
  swift_retain();
  swift_retain();
  if ((dispatch thunk of AnyLocation.update()() & 1) != 0)
  {
    v8 = v11;
    if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
    {
      *(_QWORD *)&v11 = v5;
      *((_QWORD *)&v11 + 1) = v4;
      *(_QWORD *)v12 = v6 | (v8 << 8);
      v13 = 0;
      memset(&v12[8], 0, 32);
      v14[0] = 5;
      memset(&v14[8], 0, 32);
      *(_OWORD *)&v14[40] = xmmword_187BF9FB0;
      v14[56] = 0;
      v15 = 0;
      v9[6] = *(_OWORD *)&v14[32];
      v9[7] = *(_OWORD *)&v14[48];
      v10 = 0;
      v9[2] = *(_OWORD *)&v12[16];
      v9[3] = 0uLL;
      v9[4] = *(_OWORD *)v14;
      v9[5] = *(_OWORD *)&v14[16];
      v9[0] = v11;
      v9[1] = *(_OWORD *)v12;
      NavigationAuthority.enqueueRequest(_:)(v9);
      outlined release of NavigationRequest((uint64_t)&v11);
      return outlined destroy of NavigationAuthority((uint64_t)v16);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v16);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
}

uint64_t _NavigationSplitReader.PreparedColumn.authority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  return outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(Value, a1, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

uint64_t protocol witness for Rule.value.getter in conformance _NavigationSplitReader.LeadingColumnBehavior@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGGraphGetValue();
  *a1 = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _NavigationSplitReader.PreparedColumn.columnSeeds.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, a1);
  return StatefulRule.withObservation<A>(do:)();
}

uint64_t closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t Strong;
  uint64_t v7;
  Swift::UInt v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  Swift::UInt v11;
  Swift::UInt v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  type metadata accessor for _NavigationSplitReader.PreparedColumn(0, a1, a2, a3);
  result = _NavigationSplitReader.PreparedColumn.authority.getter((uint64_t)v17);
  if (v18 != 1)
  {
    Strong = swift_weakLoadStrong();
    result = outlined destroy of NavigationAuthority((uint64_t)v17);
    if (Strong)
    {
      v7 = *(_QWORD *)(Strong + 176);
      swift_retain();
      swift_release();
      v8 = _NavigationSplitReader.PreparedColumn.key.getter();
      v10 = v9;
      v12 = v11;
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, type metadata accessor for NavigationSelectionHost, (uint64_t)&protocol conformance descriptor for NavigationSelectionHost);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v13 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      if (*(_QWORD *)(v13 + 16))
      {
        v14 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10, v12);
        if ((v15 & 1) != 0)
        {
          v16 = *(_DWORD *)(*(_QWORD *)(v13 + 56) + 4 * v14);
          result = swift_bridgeObjectRelease();
LABEL_8:
          *a4 = v16;
          return result;
        }
      }
      result = swift_bridgeObjectRelease();
    }
    v16 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t _NavigationSplitReader.PreparedColumn.key.getter()
{
  uint64_t v0;

  v0 = *(_QWORD *)AGGraphGetValue();
  AGGraphGetValue();
  return v0;
}

uint64_t _NavigationSplitReader.PreparedColumn.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *WeakValue;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  int v49;
  Swift::UInt v50;
  Swift::UInt v51;
  uint64_t Strong;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  char *v57;
  BOOL v58;
  char v59;
  uint64_t Value;
  char *v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t KeyPath;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  Swift::UInt v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int16 v111;
  _OWORD v112[9];
  __int16 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[9];
  _QWORD v118[2];
  _QWORD v119[2];
  char v120[8];
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  int v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;

  v3 = v2;
  v4 = a1;
  v131 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v91 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v90 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ModifiedContent();
  v94 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v86 - v9;
  v11 = type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
  v95 = v7;
  v92 = v11;
  v12 = type metadata accessor for ModifiedContent();
  v97 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v96 = (char *)&v86 - v14;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v98 = v12;
  v93 = v15;
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v99 = (char *)&v86 - v19;
  v20 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static SemanticFeature.isEnabled.getter();
  v100 = v17;
  v101 = v16;
  if ((v24 & 1) != 0 && !v3[4])
  {
    v86 = v5;
    v87 = v10;
    v30 = *v3;
    LODWORD(v89) = *((unsigned __int8 *)v3 + 8);
    v31 = *(uint64_t *)((char *)v3 + 12);
    v32 = *((_DWORD *)v3 + 5);
    *(_QWORD *)&v25 = v3[3];
    v88 = v25;
    WeakValue = (uint64_t *)AGGraphGetWeakValue();
    v34 = v4;
    if (WeakValue)
      v35 = *WeakValue;
    else
      v35 = 0;
    if (WeakValue)
      v36 = v35;
    else
      v36 = -1;
    if (WeakValue)
      v37 = HIDWORD(v35);
    else
      v37 = -1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v38 = swift_allocObject();
    *(_DWORD *)(v38 + 16) = v36;
    *(_DWORD *)(v38 + 20) = v37;
    swift_release();
    v3[5] = v38;
    v125 = v30;
    v126 = v89;
    v127 = v31;
    v128 = v32;
    v129 = (unint64_t)v88;
    v130 = v38;
    v4 = v34;
    result = _NavigationSplitReader.PreparedColumn.authority.getter((uint64_t)v117);
    if (*((_QWORD *)&v117[0] + 1) == 1)
    {
      __break(1u);
      return result;
    }
    v40 = _NavigationSplitReader.PreparedColumn.key.getter();
    v42 = v41;
    v44 = v43;
    v45 = *(_BYTE *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)v117, (uint64_t)v23);
    *((_QWORD *)v23 + 3) = v40;
    v23[32] = v42;
    *((_QWORD *)v23 + 5) = v44;
    v23[48] = v45;
    swift_retain();
    UUID.init()();
    *(_QWORD *)&v23[*(int *)(v20 + 32)] = v38;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    v3[4] = LocationBox.init(_:)();
    v5 = v86;
    v10 = v87;
  }
  else
  {
    v26 = v3[5];
    if (v26)
    {
      v27 = (int *)AGGraphGetWeakValue();
      if (v27)
      {
        v29 = *v27;
        v28 = v27[1];
        swift_beginAccess();
        if (*(_DWORD *)(v26 + 16) != v29 || *(_DWORD *)(v26 + 20) != v28)
        {
          *(_DWORD *)(v26 + 16) = v29;
          *(_DWORD *)(v26 + 20) = v28;
        }
      }
    }
  }
  v46 = *((_OWORD *)v3 + 1);
  v122 = *(_OWORD *)v3;
  v123 = v46;
  v124 = *((_OWORD *)v3 + 2);
  _NavigationSplitReader.PreparedColumn.authority.getter((uint64_t)v120);
  if (v121 == 1)
    __break(1u);
  v47 = _NavigationSplitReader.PreparedColumn.key.getter();
  v49 = v48;
  v51 = v50;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    LODWORD(v88) = v49;
    v89 = v47;
    v53 = v5;
    v54 = Strong + 16;
    swift_beginAccess();
    outlined init with take of Image.Resolved?(v54, (uint64_t)&v114, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)&v114, (uint64_t)v117, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v117) == 1)
    {
      LODWORD(v89) = 0;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)&v114, (uint64_t)v112, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      v108 = v112[6];
      v109 = v112[7];
      v110 = v112[8];
      v111 = v113;
      v104 = v112[2];
      v105 = v112[3];
      v106 = v112[4];
      v107 = v112[5];
      v102 = v112[0];
      v103 = v112[1];
      LODWORD(v89) = NavigationState.canDismissRoot(of:)(v89, v88, v51);
      outlined retain of NavigationState?((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    }
    v5 = v53;
  }
  else
  {
    LODWORD(v89) = 0;
  }
  outlined destroy of NavigationAuthority((uint64_t)v120);
  v55 = *((_OWORD *)v3 + 1);
  v117[0] = *(_OWORD *)v3;
  v117[1] = v55;
  v117[2] = *((_OWORD *)v3 + 2);
  _NavigationSplitReader.PreparedColumn.key.getter();
  v57 = v10;
  if (v56 == 1)
  {
    v58 = 1;
  }
  else
  {
    _NavigationSplitReader.PreparedColumn.key.getter();
    v58 = v59 == 2;
  }
  Value = AGGraphGetValue();
  v61 = v90;
  v62 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, Value, v5);
  *(_QWORD *)&v114 = _NavigationSplitReader.PreparedColumn.key.getter();
  *((_QWORD *)&v114 + 1) = v63;
  *(_QWORD *)&v115 = v64;
  *((_QWORD *)&v115 + 1) = -1;
  v65 = *(_QWORD *)(v4 + 24);
  MEMORY[0x18D75B4AC](&v114, v5, &type metadata for InjectKeyModifier, v65);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v5);
  KeyPath = swift_getKeyPath();
  v67 = v3[4];
  v68 = swift_allocObject();
  *(_BYTE *)(v68 + 16) = v58;
  *(_QWORD *)(v68 + 24) = v67;
  *(_BYTE *)(v68 + 32) = v89 & 1;
  *(_QWORD *)&v114 = KeyPath;
  *((_QWORD *)&v114 + 1) = partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue();
  *(_QWORD *)&v115 = v68;
  v119[0] = v65;
  v119[1] = &protocol witness table for InjectKeyModifier;
  swift_retain();
  v69 = MEMORY[0x1E0CE2E70];
  v70 = v57;
  v71 = v95;
  v72 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v95, v119);
  v73 = v96;
  MEMORY[0x18D75B4AC](&v114, v71, v92, v72);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v70, v71);
  v74 = swift_getKeyPath();
  v75 = *((_OWORD *)v3 + 1);
  v114 = *(_OWORD *)v3;
  v115 = v75;
  v116 = *((_OWORD *)v3 + 2);
  _NavigationSplitReader.PreparedColumn.columnSeeds.getter(v4);
  *(_QWORD *)&v112[0] = v74;
  v76 = lazy protocol witness table accessor for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v118[0] = v72;
  v118[1] = v76;
  v77 = v69;
  v78 = v98;
  v79 = MEMORY[0x18D75FFDC](v77, v98, v118);
  v80 = (uint64_t)v99;
  MEMORY[0x18D75B4AC](v112, v78, v93, v79);
  swift_release();
  v81 = (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v73, v78);
  v83 = MEMORY[0x1E0C80A78](v81, v82);
  *(&v86 - 2) = v4;
  *(&v86 - 1) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.PreparedColumn<A>, v4, v83);
  v84 = v101;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v80, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v86 - 4), v101, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v85);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v80, v84);
}

uint64_t specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()(uint64_t result, char a2, uint64_t a3, char a4)
{
  uint64_t v6;

  if ((a2 & 1) != 0)
  {
    if (a3)
    {
      v6 = result;
      swift_retain();
      swift_release();
      result = swift_release();
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = a3;
      *(_BYTE *)(v6 + 16) = a4 & 1;
    }
  }
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance _NavigationSplitReader.PreparedColumn<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t _NavigationSplitReader.SplitPresentationModeLocation.get()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  Swift::UInt v3;
  unsigned __int8 v4;
  Swift::UInt v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[152];
  _BYTE v10[152];

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_BYTE *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  result = swift_weakLoadStrong();
  v7 = result;
  if (result)
  {
    swift_beginAccess();
    outlined init with take of Image.Resolved?(v7 + 16, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    result = getEnumTag for AccessibilityActionCategory.Category((uint64_t)v10);
    if ((_DWORD)result == 1)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      LOBYTE(v7) = NavigationState.canDismissRoot(of:)(v3, v4, v5);
      result = outlined retain of NavigationState?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    }
  }
  *a1 = v7 & 1;
  return result;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance _NavigationSplitReader.SplitPresentationModeLocation(_BYTE *a1))(_QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _NavigationSplitReader.Core.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t result;
  unsigned int *WeakValue;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[8];
  uint64_t v48;
  _BYTE v49[136];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _BYTE v71[32];
  uint64_t v72;
  _BYTE v73[24];
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  __int16 v83;
  _QWORD v84[4];
  char v85;
  uint64_t v86;
  _BYTE v87[8];
  uint64_t v88;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v44 = *(_BYTE *)(Value + 8);
  v46 = *(_QWORD *)(Value + 16);
  v40 = *(_BYTE *)(Value + 24);
  v38 = *(_BYTE *)(Value + 25);
  v36 = *(_BYTE *)(Value + 26);
  v5 = AGGraphGetValue();
  v42 = *(_QWORD *)(v5 + 8);
  v43 = *(_QWORD *)v5;
  v6 = *(_WORD *)(v5 + 16);
  v7 = *(_WORD *)(v5 + 18);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v8 = AGGraphGetValue();
  result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v8, (uint64_t)v87, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v88 == 1)
  {
    __break(1u);
  }
  else
  {
    v22 = a1;
    outlined init with take of NavigationAuthority((uint64_t)v87, (uint64_t)v73);
    WeakValue = (unsigned int *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      v11 = *WeakValue;
      v12 = (unint64_t)WeakValue[1] << 32;
    }
    else
    {
      v12 = 0xFFFFFFFF00000000;
      v11 = 0xFFFFFFFFLL;
    }
    if (*(_DWORD *)(v1 + 32) == *MEMORY[0x1E0CFED28])
    {
      v72 = 0;
      memset(v71, 0, sizeof(v71));
    }
    else
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t (*)(uint64_t))type metadata accessor for UINavigationPresentationAdaptor, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v13 = AGGraphGetValue();
      outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v13, (uint64_t)v71, (uint64_t)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t)type metadata accessor for UINavigationPresentationAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    v74 = v4;
    v75 = v44;
    v76 = v46;
    v77 = v40;
    v78 = v38;
    v79 = v36;
    v80 = v43;
    v81 = v42;
    v82 = v6;
    v83 = v7;
    outlined init with take of NavigationAuthority((uint64_t)v73, (uint64_t)v84);
    v84[3] = v12 | v11;
    v85 = 0;
    outlined init with take of UINavigationPresentationAdaptor?((uint64_t)v71, (uint64_t)&v86);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
    v14 = AGGraphGetValue();
    v39 = *(_OWORD *)v14;
    v37 = *(_QWORD *)(v14 + 16);
    v35 = *(_QWORD *)(v14 + 24);
    v25 = *(_QWORD *)(v14 + 48);
    v26 = *(_QWORD *)(v14 + 56);
    v41 = *(_DWORD *)(v14 + 64);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
    v15 = AGGraphGetValue();
    v33 = *(_OWORD *)v15;
    v31 = *(_QWORD *)(v15 + 24);
    v32 = *(_QWORD *)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 48);
    v16 = *(_QWORD *)(v15 + 56);
    v34 = *(_DWORD *)(v15 + 64);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
    v18 = AGGraphGetValue();
    v29 = *(_OWORD *)v18;
    v27 = *(_QWORD *)(v18 + 24);
    v28 = *(_QWORD *)(v18 + 16);
    v19 = *(_QWORD *)(v18 + 48);
    v20 = *(_QWORD *)(v18 + 56);
    v30 = *(_DWORD *)(v18 + 64);
    v23 = *(_OWORD *)(v14 + 32);
    v24 = *(_OWORD *)(v15 + 32);
    v45 = *(_OWORD *)(v18 + 32);
    outlined init with copy of _NavigationSplitReader.ForestRoot((uint64_t)&v74, (uint64_t)v49);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of _NavigationSplitReader.ForestRoot((uint64_t)&v74);
    v50 = v39;
    v51 = v37;
    v52 = v35;
    v53 = v23;
    v54 = v25;
    v55 = v26;
    v56 = v41;
    v57 = v33;
    v58 = v32;
    v59 = v31;
    v60 = v24;
    v61 = v17;
    v62 = v16;
    v63 = v34;
    v64 = v29;
    v65 = v28;
    v66 = v27;
    v67 = v45;
    v68 = v19;
    v69 = v20;
    v70 = v30;
    outlined init with take of VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>((uint64_t)v49, (uint64_t)v87);
    v21 = AGGraphGetValue();
    result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v21, (uint64_t)v47, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v48 != 1)
    {
      outlined init with take of NavigationAuthority((uint64_t)v47, (uint64_t)v49);
      outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v49, v22 + 352, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v87, v22, (uint64_t (*)(_QWORD))type metadata accessor for VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>);
      outlined destroy of AccessibilityTableContext?((uint64_t)v49, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>);
    }
  }
  __break(1u);
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance _NavigationSplitReader.Core@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 368) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _NavigationSplitReader.Core@<X0>(uint64_t a1@<X8>)
{
  return _NavigationSplitReader.Core.value.getter(a1);
}

unint64_t protocol witness for static NavigationDestinationProcessor.processorDescription.getter in conformance _NavigationSplitReader.Core()
{
  return 0xD000000000000019;
}

uint64_t _NavigationSplitReader.ForestRoot.body(children:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _OWORD v27[3];
  uint64_t v28;
  _OWORD v29[3];
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  _DWORD v50[8];
  uint64_t v51;
  _OWORD v52[3];
  uint64_t v53;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = outlined init with copy of _VariadicView_Children(result + 32, (uint64_t)v52);
  if (v3 == 1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = outlined init with copy of _VariadicView_Children(v4 + 88, (uint64_t)v29);
  if (v3 < 3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v25 = a2;
  outlined init with copy of _VariadicView_Children(v4 + 144, (uint64_t)v27);
  v6 = *(_QWORD *)v2;
  v23 = *(_QWORD *)(v2 + 16);
  v7 = *(unsigned __int8 *)(v2 + 8);
  v8 = _NavigationSplitReader.ForestRoot.widths(from:)(v4);
  v9 = _NavigationSplitReader.ForestRoot.sidebarDimmingIgnoresSafeArea(_:)(v4);
  v10 = _NavigationSplitReader.ForestRoot.sidebarDimmingIgnoresSafeArea(_:)(v4);
  v24 = NavigationSplitParameters.addingWidths(_:opaqueSidebar:sidebarDimmingIgnoresSafeArea:extraWidePrimaryColumn:)(v8, 0, v9 & 1, v10 & 1, v6, v7, v23);
  v22 = v11;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v2 + 32);
  v16 = *(_QWORD *)(v2 + 40);
  v18 = *(_WORD *)(v2 + 48);
  v19 = *(_WORD *)(v2 + 50);
  outlined init with copy of NavigationAuthority(v2 + 56, (uint64_t)v26);
  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
  {
    v20 = -1;
    v21 = -1;
  }
  else
  {
    v20 = *(_DWORD *)(v2 + 80);
    v21 = *(_DWORD *)(v2 + 84);
  }
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v2 + 96, (uint64_t)&v51, (uint64_t)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t)type metadata accessor for UINavigationPresentationAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v31[0] = v52[0];
  v31[1] = v52[1];
  v31[2] = v52[2];
  v33 = v29[0];
  v34 = v29[1];
  v35 = v29[2];
  v32 = v53;
  v36 = v30;
  v38 = v27[1];
  v39 = v27[2];
  v37 = v27[0];
  v40 = v28;
  v41 = v24;
  v42 = v22;
  v43 = v13;
  v44 = v15 & 0x101;
  v45 = BYTE2(v15) & 1;
  v46 = v17;
  v47 = v16;
  v48 = v18;
  v49 = v19;
  outlined init with take of NavigationAuthority((uint64_t)v26, (uint64_t)v50);
  v50[6] = v20;
  v50[7] = v21;
  outlined init with take of NavigationSplitCore((uint64_t)v31, (uint64_t)v52);
  outlined init with take of NavigationSplitCore((uint64_t)v52, v25);
  swift_retain();
  return swift_retain();
}

uint64_t _NavigationSplitReader.ForestRoot.widths(from:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  _OWORD v23[12];
  _BYTE v24[56];
  uint64_t v25;
  _BYTE v26[56];
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v27 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v4 = 0;
  v16 = v1;
  while (1)
  {
    v17 = v4;
    outlined init with copy of _VariadicView_Children(a1 + 32 + 56 * v4, (uint64_t)v26);
    outlined init with copy of _VariadicView_Children((uint64_t)v26, (uint64_t)v24);
    v25 = 0;
    if (_VariadicView_Children.endIndex.getter())
      break;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    LOBYTE(v9) = 0;
    v10 = 0x1FFFFFFFELL;
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<_VariadicView_Children>);
    outlined destroy of _VariadicView_Children((uint64_t)v26);
    v2 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
      v2 = v27;
    }
    v12 = v17;
    v14 = *(_QWORD *)(v2 + 16);
    v13 = *(_QWORD *)(v2 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
      v12 = v17;
      v2 = v27;
    }
    v4 = v12 + 1;
    *(_QWORD *)(v2 + 16) = v14 + 1;
    v15 = v2 + 40 * v14;
    *(_QWORD *)(v15 + 32) = v6;
    *(_QWORD *)(v15 + 40) = v10;
    *(_QWORD *)(v15 + 48) = v7;
    *(_QWORD *)(v15 + 56) = v8;
    *(_BYTE *)(v15 + 64) = v9;
    if (v4 == v16)
      return v2;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0x1FFFFFFFELL;
  while (1)
  {
    _VariadicView_Children.subscript.getter();
    result = _VariadicView_Children.endIndex.getter();
    if (v5 < 0 || v5 >= result)
      break;
    v25 = v5 + 1;
    v23[3] = v23[9];
    v23[4] = v23[10];
    v23[5] = v23[11];
    v23[0] = v23[6];
    v23[1] = v23[7];
    v23[2] = v23[8];
    if (v10 >> 1 == 0xFFFFFFFF && v9 <= 1)
    {
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v6 = v18;
      v10 = v19;
      v7 = v20;
      v8 = v21;
      v9 = v22;
    }
    outlined destroy of _VariadicView_Children.Element((uint64_t)v23);
    v5 = v25;
    if (v5 == _VariadicView_Children.endIndex.getter())
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t _NavigationSplitReader.ForestRoot.sidebarDimmingIgnoresSafeArea(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[56];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (!*(_QWORD *)(result + 16))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  outlined init with copy of _VariadicView_Children(result + 32, (uint64_t)v16);
  v17 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    v1 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      result = _VariadicView_Children.endIndex.getter();
      if (v1 < 0 || v1 >= result)
        break;
      v6 = v12;
      v7 = v13;
      v8 = v14;
      v9 = v15;
      v4 = v10;
      v5 = v11;
      v17 = v1 + 1;
      *(_QWORD *)&v18 = *((_QWORD *)&v15 + 1);
      ViewTraitCollection.value<A>(for:defaultValue:)();
      if (v3 == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<_VariadicView_Children>);
        v20 = v6;
        v21 = v7;
        v22 = v8;
        v23 = v9;
        v2 = 1;
        v18 = v4;
        v19 = v5;
        goto LABEL_10;
      }
      outlined destroy of _VariadicView_Children.Element((uint64_t)&v4);
      v1 = v17;
      if (v1 == _VariadicView_Children.endIndex.getter())
        goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_8:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<_VariadicView_Children>);
  v2 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
LABEL_10:
  outlined destroy of AccessibilityTableContext?((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_Children.Element?, MEMORY[0x1E0CE55D8]);
  return v2;
}

void protocol witness for static VariadicViewForestRoot.viewListOptions.getter in conformance _NavigationSplitReader.ForestRoot(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void protocol witness for View.body.getter in conformance _NavigationSplitReader()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InjectKeyModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InjectKeyModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance InjectKeyModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static _NavigationSplitReader.SplitPresentationModeLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  char v19;
  _BYTE v21[24];

  v4 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v21[-v10];
  v13 = *(int *)(v12 + 32);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  swift_beginAccess();
  v17 = *(_DWORD *)(v14 + 16);
  v16 = *(_DWORD *)(v14 + 20);
  swift_beginAccess();
  if (v17 != *(_DWORD *)(v15 + 16))
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
    goto LABEL_5;
  }
  v18 = *(_DWORD *)(v15 + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  if (v16 != v18)
  {
LABEL_5:
    v19 = 0;
    goto LABEL_6;
  }
  v19 = static UUID.== infix(_:_:)();
LABEL_6:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  return v19 & 1;
}

uint64_t specialized static InjectKeyModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<InjectKeyModifier>, (uint64_t)&type metadata for InjectKeyModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
  return _GraphInputs.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility.Key, (uint64_t)&protocol witness table for CompositeNavigationSplitViewVisibility.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t destroy for _NavigationSplitReader()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for _NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

void *type metadata accessor for _NavigationSplitReader()
{
  return &unk_1E1ADF758;
}

uint64_t getEnumTagSinglePayload for InjectKeyModifier(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 250);
  if (*(unsigned __int8 *)(a1 + 8) <= 6u)
    v3 = 6;
  else
    v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 - 7;
  if (*(unsigned __int8 *)(a1 + 8) < 6u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InjectKeyModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for InjectKeyModifier()
{
  return &type metadata for InjectKeyModifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>();
    v2 = v1;
    v3[0] = &protocol witness table for _NavigationSplitReader;
    v3[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key> and conformance _PreferenceWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>, (uint64_t)&type metadata for CompositeNavigationSplitViewVisibility.Key, (uint64_t)&protocol witness table for CompositeNavigationSplitViewVisibility.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_NavigationSplitReader, _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>>);
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in InjectKeyModifier()
{
  return &protocol witness table for InjectKeyModifier;
}

_UNKNOWN **base witness table accessor for View in _NavigationSplitReader()
{
  return &protocol witness table for _NavigationSplitReader;
}

void type metadata accessor for Binding<NavigationSplitViewColumn>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (authority: NavigationAuthority?, computedEnvironment: EnvironmentValues));
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.DerivedAttributes, &unk_1E1ADF4D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.DerivedAttributes and conformance _NavigationSplitReader.DerivedAttributes);
  }
  return result;
}

uint64_t outlined destroy of _NavigationSplitReader.DerivedAttributes(uint64_t a1)
{
  destroy for _NavigationSplitReader.DerivedAttributes(a1);
  return a1;
}

void type metadata accessor for Focus<NavigationStateHost, NavigationSeedHost>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<NavigationStateHost, NavigationSeedHost>)
  {
    type metadata accessor for NavigationStateHost();
    type metadata accessor for NavigationSeedHost(255);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<NavigationStateHost, NavigationSeedHost>);
  }
}

unint64_t lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds;
  if (!lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnsureNavigationStateSeeds, &type metadata for EnsureNavigationStateSeeds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds;
  if (!lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnsureNavigationStateSeeds, &type metadata for EnsureNavigationStateSeeds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers;
  if (!lazy protocol witness table cache variable for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateNavigationEventHandlers, &type metadata for UpdateNavigationEventHandlers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateNavigationEventHandlers and conformance UpdateNavigationEventHandlers);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.UpdatePreferredCompactColumn, &unk_1E1ADF620);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.UpdatePreferredCompactColumn and conformance _NavigationSplitReader.UpdatePreferredCompactColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.UpdateRequiredCompactColumn, &unk_1E1ADF590);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.UpdateRequiredCompactColumn and conformance _NavigationSplitReader.UpdateRequiredCompactColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.LeadingColumnBehavior and conformance _NavigationSplitReader.LeadingColumnBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.LeadingColumnBehavior and conformance _NavigationSplitReader.LeadingColumnBehavior;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.LeadingColumnBehavior and conformance _NavigationSplitReader.LeadingColumnBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.LeadingColumnBehavior, &unk_1E1ADF568);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.LeadingColumnBehavior and conformance _NavigationSplitReader.LeadingColumnBehavior);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, a4, (uint64_t)&type metadata for InjectKeyModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t type metadata accessor for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _NavigationSplitReader.PreparedColumn);
}

void _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>(255, a3, a4, a5);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<PositionedNavigationDestination.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<PositionedNavigationDestination.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<PositionedNavigationDestination.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<PositionedNavigationDestination.Key>, (uint64_t)&type metadata for PositionedNavigationDestination.Key, (uint64_t)&protocol witness table for PositionedNavigationDestination.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<PositionedNavigationDestination.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.NavigationPresentationAdaptorKey, &type metadata for _GraphInputs.NavigationPresentationAdaptorKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>))
  {
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
    _s7SwiftUI15ModifiedContentVyACyACyAA37NavigationSplitViewStyleConfigurationV6DetailVAA17InjectKeyModifierVGAA8StaticIfVyAA9SemanticsV013DismissPopsInefG5RootsVAA012_Environmentl9TransformM0VyAA7BindingVyAA16PresentationModeVGGAA05EmptyM0VGGAA01_ul7WritingM0VyAA0E5StateV13SelectionSeedVGGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>));
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationSplitReader.Core, &type metadata for _NavigationSplitReader.Core);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.Core and conformance _NavigationSplitReader.Core);
  }
  return result;
}

uint64_t outlined init with take of UINavigationPresentationAdaptor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationPresentationAdaptor?, (uint64_t (*)(uint64_t))type metadata accessor for UINavigationPresentationAdaptor, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _NavigationSplitReader.ForestRoot(a2, a1);
  return a2;
}

uint64_t outlined destroy of _NavigationSplitReader.ForestRoot(uint64_t a1)
{
  destroy for _NavigationSplitReader.ForestRoot(a1);
  return a1;
}

uint64_t partial apply for closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(uint64_t a1@<X3>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _NavigationSplitReader.SplitPresentationModeLocation;
  if (!type metadata singleton initialization cache for _NavigationSplitReader.SplitPresentationModeLocation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_187265994()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for Binding<NavigationSplitViewColumn>?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>, (uint64_t)&type metadata for NavigationCompactColumnKey, (uint64_t)&protocol witness table for NavigationCompactColumnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined assign with take of NavigationAuthority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.StackKeyViewInputKey, &type metadata for NavigationAuthority.StackKeyViewInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.StackKeyViewInputKey, &type metadata for NavigationAuthority.StackKeyViewInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.DepthKey, &type metadata for NavigationAuthority.DepthKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.DepthKey, &type metadata for NavigationAuthority.DepthKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>;
  if (!lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Attribute<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0998], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attribute<Int> and conformance Attribute<A>);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    swift_weakCopyInit();
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = type metadata accessor for UUID();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_weakDestroy();
  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release();
}

uint64_t initializeWithCopy for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v6 = swift_weakCopyInit();
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(int *)(a3 + 28);
  v9 = v6 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v6 + 48) = *(_BYTE *)(a2 + 48);
  v11 = type metadata accessor for UUID();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v9, v10, v11);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = swift_weakTakeInit();
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v6 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 28);
  v8 = v6 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.SplitPresentationModeLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.SplitPresentationModeLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18726614C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.SplitPresentationModeLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872661D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for _NavigationSplitReader.SplitPresentationModeLocation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 __swift_memcpy36_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.Core(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.Core(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 36) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NavigationSplitReader.Core()
{
  return &type metadata for _NavigationSplitReader.Core;
}

uint64_t destroy for _NavigationSplitReader.ForestRoot(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  result = swift_release();
  if (*(_QWORD *)(a1 + 120))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  return result;
}

uint64_t initializeWithCopy for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_retain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v7;
    *(_QWORD *)(a1 + 128) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 96, a2 + 96, v7);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 50);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 120);
  if (!*(_QWORD *)(a1 + 120))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 120) = v5;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 96, a2 + 96);
      return a1;
    }
LABEL_7:
    v6 = *(_OWORD *)(a2 + 96);
    v7 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v6;
    *(_OWORD *)(a1 + 112) = v7;
    return a1;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
  return a1;
}

uint64_t initializeWithTake for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.ForestRoot(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  if (*(_QWORD *)(a1 + 120))
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

ValueMetadata *type metadata accessor for _NavigationSplitReader.ForestRoot()
{
  return &type metadata for _NavigationSplitReader.ForestRoot;
}

uint64_t destroy for _NavigationSplitReader.PreparedColumn()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.PreparedColumn(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.PreparedColumn(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.PreparedColumn(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

void *type metadata accessor for _NavigationSplitReader.LeadingColumnBehavior()
{
  return &unk_1E1ADF568;
}

void *type metadata accessor for _NavigationSplitReader.UpdateRequiredCompactColumn()
{
  return &unk_1E1ADF590;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.UpdateRequiredCompactColumn(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.UpdateRequiredCompactColumn(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for _NavigationSplitReader.UpdatePreferredCompactColumn()
{
  return &unk_1E1ADF620;
}

uint64_t destroy for _NavigationSplitReader.DerivedAttributes(uint64_t result)
{
  if (*(_QWORD *)(result + 24) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _NavigationSplitReader.DerivedAttributes(uint64_t a1, __int128 *a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a2;
  v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  v6 = a1 + 16;
  if (*((_QWORD *)a2 + 3) == 1)
  {
    *(_OWORD *)v6 = *v4;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v4 + 2);
  }
  else
  {
    swift_weakCopyInit();
    v7 = *((_QWORD *)a2 + 3);
    v8 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for _NavigationSplitReader.DerivedAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = a1 + 16;
  v5 = (__int128 *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) == 1)
  {
    if (v6 == 1)
    {
      v7 = *v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v4 = v7;
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_retain();
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 16);
    v8 = *((_QWORD *)v5 + 2);
    *(_OWORD *)v4 = *v5;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    swift_weakCopyAssign();
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_release();
  }
  return a1;
}

_OWORD *initializeWithTake for _NavigationSplitReader.DerivedAttributes(_OWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;

  v5 = *a2;
  v4 = a2 + 1;
  *a1 = v5;
  v6 = a1 + 1;
  *(_QWORD *)&v5 = *((_QWORD *)a2 + 3);
  v7 = (_OWORD *)((char *)a2 + 24);
  if ((_QWORD)v5 == 1)
  {
    *v6 = *v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)((char *)a1 + 24) = *v7;
  }
  return a1;
}

uint64_t assignWithTake for _NavigationSplitReader.DerivedAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;

  v3 = a2 + 16;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  v5 = (_OWORD *)(a1 + 24);
  v7 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) != 1)
  {
    if (v6 != 1)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_release();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationAuthority(a1 + 16);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    return a1;
  }
  swift_weakTakeInit();
  *v5 = *v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.DerivedAttributes(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.DerivedAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for _NavigationSplitReader.DerivedAttributes()
{
  return &unk_1E1ADF4D8;
}

uint64_t base witness table accessor for Equatable in _NavigationSplitReader.SplitPresentationModeLocation()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _NavigationSplitReader.SplitPresentationModeLocation and conformance _NavigationSplitReader.SplitPresentationModeLocation, (uint64_t (*)(uint64_t))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation, (uint64_t)&protocol conformance descriptor for _NavigationSplitReader.SplitPresentationModeLocation);
}

void base witness table accessor for _AttributeBody in _NavigationSplitReader.PreparedColumn<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for VariadicViewForestRoot.Body : View in _NavigationSplitReader.ForestRoot()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of NavigationSplitCore(uint64_t a1, uint64_t a2)
{
  initializeWithTake for NavigationSplitCore(a2, a1);
  return a2;
}

void type metadata accessor for IndexingIterator<_VariadicView_Children>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>);
  }
}

uint64_t outlined destroy of _VariadicView_Children(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE5600] - 8) + 8))();
  return a1;
}

uint64_t specialized _NavigationSplitReader.SplitPresentationModeLocation.set(_:transaction:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  Swift::UInt v9;
  unsigned __int8 v10;
  Swift::UInt v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  _OWORD v26[9];
  __int16 v27;
  _BYTE v28[152];
  _BYTE v29[160];

  v2 = v1;
  v4 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, v8);
  if ((a1 & 1) != 0)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  v9 = *((_QWORD *)v7 + 3);
  v10 = v7[32];
  v11 = *((_QWORD *)v7 + 5);
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  v13 = Strong + 16;
  swift_beginAccess();
  outlined init with take of Image.Resolved?(v13, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  outlined retain of NavigationState?((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
  swift_release();
  outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v29) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  v22 = v26[6];
  v23 = v26[7];
  v24 = v26[8];
  v25 = v27;
  v19[2] = v26[2];
  v19[3] = v26[3];
  v20 = v26[4];
  v21 = v26[5];
  v19[0] = v26[0];
  v19[1] = v26[1];
  v15 = NavigationState.canDismissRoot(of:)(v9, v10, v11);
  outlined retain of NavigationState?((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  if ((v15 & 1) != 0)
  {
    v16 = *(_QWORD *)(v2 + 24);
    v17 = *(unsigned __int8 *)(v2 + 32);
    v18 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)&v19[0] = 2;
    *(__int128 *)((char *)v19 + 8) = 0u;
    *(__int128 *)((char *)&v19[1] + 8) = 0u;
    *(__int128 *)((char *)&v19[2] + 8) = 0u;
    *((_QWORD *)&v19[3] + 1) = 0;
    LOBYTE(v20) = 22;
    *((_QWORD *)&v20 + 1) = v16;
    *(_QWORD *)&v21 = v17;
    *((_QWORD *)&v21 + 1) = v18;
    v22 = 0uLL;
    *(_QWORD *)&v23 = 0;
    BYTE8(v23) = 0;
    *(_QWORD *)&v24 = 0;
    return NavigationAuthority.enqueueRequest(_:)(v19);
  }
  return result;
}

uint64_t destroy for ConfirmationDialog(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectWeakDestroy();
  result = swift_release();
  if (*(_QWORD *)(a1 + 160))
  {
    if (*(_QWORD *)(a1 + 144))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_OWORD *)(a1 + 60) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = (_OWORD *)(a1 + 120);
  v8 = (_OWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 160);
  swift_retain();
  if (v9)
  {
    if (*(_QWORD *)(a2 + 144))
    {
      v10 = *(_QWORD *)(a2 + 120);
      v11 = *(_QWORD *)(a2 + 128);
      v12 = *(_BYTE *)(a2 + 136);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 120) = v10;
      *(_QWORD *)(a1 + 128) = v11;
      *(_BYTE *)(a1 + 136) = v12;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v9 = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 136);
      *v7 = *v8;
      *(_OWORD *)(a1 + 136) = v14;
    }
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v9;
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    swift_retain();
    swift_retain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 136);
    *v7 = *v8;
    *(_OWORD *)(a1 + 136) = v13;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  }
  return a1;
}

uint64_t assignWithCopy for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_OWORD *)(a1 + 60) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v5 = (_OWORD *)(a1 + 120);
  v6 = (_OWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 144);
      if (*(_QWORD *)(a1 + 144))
      {
        if (v8)
        {
          v9 = *(_QWORD *)(a2 + 120);
          v10 = *(_QWORD *)(a2 + 128);
          v11 = *(_BYTE *)(a2 + 136);
          outlined copy of Text.Storage(v9, v10, v11);
          v12 = *(_QWORD *)(a1 + 120);
          v13 = *(_QWORD *)(a1 + 128);
          v14 = *(_BYTE *)(a1 + 136);
          *(_QWORD *)(a1 + 120) = v9;
          *(_QWORD *)(a1 + 128) = v10;
          *(_BYTE *)(a1 + 136) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 120);
          v27 = *(_OWORD *)(a2 + 136);
          *v5 = *v6;
          *(_OWORD *)(a1 + 136) = v27;
        }
      }
      else if (v8)
      {
        v21 = *(_QWORD *)(a2 + 120);
        v22 = *(_QWORD *)(a2 + 128);
        v23 = *(_BYTE *)(a2 + 136);
        outlined copy of Text.Storage(v21, v22, v23);
        *(_QWORD *)(a1 + 120) = v21;
        *(_QWORD *)(a1 + 128) = v22;
        *(_BYTE *)(a1 + 136) = v23;
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 136);
        *v5 = *v6;
        *(_OWORD *)(a1 + 136) = v29;
      }
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 120);
      v19 = *(_OWORD *)(a2 + 136);
      v18 = *(_OWORD *)(a2 + 152);
      v20 = *v6;
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v19;
      *(_OWORD *)(a1 + 152) = v18;
      *v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(_QWORD *)(a2 + 144))
    {
      v15 = *(_QWORD *)(a2 + 120);
      v16 = *(_QWORD *)(a2 + 128);
      v17 = *(_BYTE *)(a2 + 136);
      outlined copy of Text.Storage(v15, v16, v17);
      *(_QWORD *)(a1 + 120) = v15;
      *(_QWORD *)(a1 + 128) = v16;
      *(_BYTE *)(a1 + 136) = v17;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 136);
      *v5 = *v6;
      *(_OWORD *)(a1 + 136) = v28;
    }
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    swift_retain();
    swift_retain();
  }
  else
  {
    v24 = *v6;
    v25 = *(_OWORD *)(a2 + 136);
    v26 = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v25;
    *(_OWORD *)(a1 + 152) = v26;
    *v5 = v24;
  }
  return a1;
}

uint64_t outlined destroy of DialogSuppressionConfiguration(uint64_t a1)
{
  destroy for DialogSuppressionConfiguration(a1);
  return a1;
}

uint64_t initializeWithTake for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 60) = v4;
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t assignWithTake for ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v5 = (_OWORD *)(a1 + 120);
  v6 = (_OWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 160))
  {
    if (*(_QWORD *)(a2 + 160))
    {
      if (*(_QWORD *)(a1 + 144))
      {
        if (*(_QWORD *)(a2 + 144))
        {
          v7 = *(_BYTE *)(a2 + 136);
          v8 = *(_QWORD *)(a1 + 120);
          v9 = *(_QWORD *)(a1 + 128);
          v10 = *(_BYTE *)(a1 + 136);
          *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
          *(_BYTE *)(a1 + 136) = v7;
          outlined consume of Text.Storage(v8, v9, v10);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_bridgeObjectRelease();
LABEL_10:
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
          swift_release();
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
          swift_release();
          *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
          return a1;
        }
        outlined destroy of Text(a1 + 120);
      }
      v12 = *(_OWORD *)(a2 + 136);
      *v5 = *v6;
      *(_OWORD *)(a1 + 136) = v12;
      goto LABEL_10;
    }
    outlined destroy of DialogSuppressionConfiguration(a1 + 120);
  }
  v11 = *(_OWORD *)(a2 + 136);
  *v5 = *v6;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationDialog(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationDialog(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ConfirmationDialogModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ConfirmationDialogModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void ConfirmationDialogModifier.body(content:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[13];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v20 = a3;
  v4 = a2[3];
  v19 = *(_QWORD *)(v4 - 8);
  v5 = v4;
  v12[10] = v4;
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v7 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>, MEMORY[0x1E0CE5C30], MEMORY[0x1E0CE5C20], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v8 = type metadata accessor for ModifiedContent();
  v16 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v13 = a2[4];
  v10 = v13;
  v11 = lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>();
  v25[0] = v10;
  v25[1] = v11;
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v25);
  v14 = a2[5];
  v21 = v8;
  v22 = v5;
  v23 = v15;
  v24 = v14;
  type metadata accessor for ConfirmationDialogModifierCore();
}

void sub_187267AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v9 - 224) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v9 - 328) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 - 336) = (char *)&a9 - v11;
  v12 = lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  *(_QWORD *)(v9 - 312) = v12;
  *(_QWORD *)(v9 - 136) = &type metadata for AllowPresentationPredicate;
  *(_QWORD *)(v9 - 128) = a1;
  *(_QWORD *)(v9 - 120) = MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v9 - 112) = v12;
  type metadata accessor for StaticIf();
}

uint64_t sub_187267B54(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t IsSharingPicker;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v49;
  _BYTE v50[32];

  v6 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 352) = a1;
  *(_QWORD *)(v5 - 256) = v6;
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v5 - 368) = &v50[-v8];
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, v3, v7);
  *(_QWORD *)(v5 - 376) = type metadata accessor for _ViewModifier_Content();
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 - 344) = v9;
  *(_QWORD *)(v5 - 248) = v10;
  MEMORY[0x1E0C80A78](v9, v11);
  *(_QWORD *)(v5 - 384) = &v50[-v12];
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 264) = v13;
  *(_QWORD *)(v5 - 232) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v5 - 360) = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v5 - 304) = &v50[-v18];
  *(_DWORD *)(v5 - 388) = *v2;
  v19 = *((_QWORD *)v2 + 1);
  v20 = *((_QWORD *)v2 + 2);
  *(_DWORD *)(v5 - 392) = v2[24];
  v21 = *((_QWORD *)v2 + 4);
  v22 = *((_QWORD *)v2 + 5);
  v23 = v2[48];
  v24 = *((_QWORD *)v2 + 7);
  *(_DWORD *)(v5 - 396) = v2[64];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v21, v22, v23);
  swift_bridgeObjectRetain();
  View.styleContext<A>(_:)();
  v25 = &v2[*(int *)(v3 + 68)];
  v26 = *(_QWORD *)(v5 - 216);
  v27 = *(_QWORD *)(v5 - 320);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)(v5 - 208) + 16))(v26, v25, v27);
  v49 = v27;
  v28 = *(_QWORD *)(v5 - 336);
  ConfirmationDialogModifierCore.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(*(_DWORD *)(v5 - 388), v19, v20, *(_DWORD *)(v5 - 392), v21, v22, v23, v24, v28, *(_DWORD *)(v5 - 396), v4, v26, *(_QWORD *)(v5 - 272), v49, *(_QWORD *)(v5 - 280), *(_QWORD *)(v5 - 288), (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ConfirmationDialogModifierCore);
  v29 = *(_QWORD *)(v5 - 368);
  v30 = *(_QWORD *)(v5 - 328);
  ViewModifier.requiring<A>(_:)((uint64_t)&type metadata for AllowPresentationPredicate, v30, v29);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8))(v28, v30);
  v31 = *(_QWORD *)(v5 - 376);
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v31);
  v33 = *(_QWORD *)(v5 - 384);
  v34 = v31;
  v35 = *(_QWORD *)(v5 - 352);
  MEMORY[0x18D75B4AC](v29, v34, v35, v32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8))(v29, v35);
  v36 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v5 - 160) = &protocol witness table for ConfirmationDialogModifierCore<A, B>;
  *(_QWORD *)(v5 - 152) = v36;
  v37 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v35, v5 - 160);
  *(_QWORD *)(v5 - 176) = v32;
  *(_QWORD *)(v5 - 168) = v37;
  v38 = MEMORY[0x1E0CE2E70];
  v39 = *(_QWORD *)(v5 - 344);
  v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v39, v5 - 176);
  v41 = *(_QWORD *)(v5 - 360);
  View.sharingPickerHost()(v39, v40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 248) + 8))(v33, v39);
  IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v5 - 192) = v40;
  *(_QWORD *)(v5 - 184) = IsSharingPicker;
  v43 = v38;
  v44 = *(_QWORD *)(v5 - 264);
  v45 = MEMORY[0x18D75FFDC](v43, v44, v5 - 192);
  v46 = *(_QWORD *)(v5 - 304);
  static ViewBuilder.buildExpression<A>(_:)(v41, v44, v45);
  v47 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 232) + 8);
  v47(v41, v44);
  static ViewBuilder.buildBlock<A>(_:)(v46, v44, *(_QWORD *)(v5 - 200));
  return ((uint64_t (*)(uint64_t, uint64_t))v47)(v46, v44);
}

uint64_t ConfirmationDialogModifier.init(presentedValue:isPresented:title:titleVisibility:actions:message:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return ConfirmationDialogModifierCore.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ConfirmationDialogModifier);
}

uint64_t ConfirmationDialogModifierCore.init(presentedValue:isPresented:title:titleVisibility:actions:message:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(_QWORD, _QWORD *))
{
  uint64_t v18;
  _QWORD v20[4];

  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7 & 1;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = a10;
  v20[0] = a13;
  v20[1] = a14;
  v20[2] = a15;
  v20[3] = a16;
  v18 = a17(0, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 32))(a9 + *(int *)(v18 + 64), a11, a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 - 8) + 32))(a9 + *(int *)(v18 + 68), a12, a14);
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>, MEMORY[0x1E0CE5C30], MEMORY[0x1E0CE5C20], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ConfirmationDialogModifierCore()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowPresentationPredicate and conformance AllowPresentationPredicate;
  if (!lazy protocol witness table cache variable for type AllowPresentationPredicate and conformance AllowPresentationPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowPresentationPredicate, &type metadata for AllowPresentationPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowPresentationPredicate and conformance AllowPresentationPredicate);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationDialog.PreferenceKey()
{
  return &type metadata for ConfirmationDialog.PreferenceKey;
}

uint64_t type metadata completion function for ConfirmationDialogModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v9 + ((v6 + 65) & ~v6)) & ~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v21 = v12 + (((v8 | v6) & 0xF8 ^ 0x1F8) & ((v8 | v6) + 16));
    swift_retain();
  }
  else
  {
    v24 = *(_QWORD *)(a3 + 24);
    v25 = ~v8;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v13 = a1 & 0xFFFFFFFFFFFFFFF8;
    v14 = a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)(v13 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_BYTE *)(v13 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    v17 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    v23 = v4;
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v15, v16, v17);
    *(_QWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 40) = v16;
    *(_BYTE *)(v13 + 48) = v17;
    *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
    *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
    v18 = (v13 + v6 + 65) & ~v6;
    v19 = (v14 + v6 + 65) & ~v6;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v20(v18, v19, v23);
    v21 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v18 + v9) & v25, (v19 + v9) & v25, v24);
  }
  return v21;
}

uint64_t destroy for ConfirmationDialogModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v5 + *(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

unint64_t initializeWithCopy for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v5 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v9 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v7, v8, v9);
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  *(_BYTE *)(v5 + 48) = v9;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  *(_BYTE *)(v5 + 64) = *(_BYTE *)(v6 + 64);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 65 + v5) & ~v12;
  v14 = (v12 + 65 + v6) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v15(v13, v14, v10);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 16))((*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

unint64_t assignWithCopy for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(v5 + 24) = *(_BYTE *)(v6 + 24);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 40);
  v9 = *(_BYTE *)(v6 + 48);
  outlined copy of Text.Storage(v7, v8, v9);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v12 = *(_BYTE *)(v5 + 48);
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  *(_BYTE *)(v5 + 48) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v5 + 64) = *(_BYTE *)(v6 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 65 + v5) & ~v14;
  v16 = (v14 + 65 + v6) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

unint64_t initializeWithTake for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v5 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v5 + 8) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 64) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 65 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v11 = (v9 + 65 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

unint64_t assignWithTake for ConfirmationDialogModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  swift_release();
  *(_BYTE *)(v5 + 24) = *(_BYTE *)(v6 + 24);
  v7 = *(_BYTE *)(v6 + 48);
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(_BYTE *)(v5 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(_BYTE *)(v5 + 48) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v5 + 64) = *(_BYTE *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 65 + v5) & ~v12;
  v14 = (v12 + 65 + v6) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationDialogModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 65) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      v18 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        v20 = (v18 + v8 + 65) & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v20, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v20 + v9 + v10) & ~v10);
      }
      else
      {
        v19 = *(_QWORD *)(v18 + 16);
        if (v19 >= 0xFFFFFFFF)
          LODWORD(v19) = -1;
        return (v19 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 65) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872688F4 + 4 * byte_187C1A070[v17 - 1]))();
}

void storeEnumTagSinglePayload for ConfirmationDialogModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void sub_187268BEC()
{
  type metadata accessor for ConfirmationDialogModifier();
}

void sub_187268C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>, MEMORY[0x1E0CE5C30], MEMORY[0x1E0CE5C20], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v19 = type metadata accessor for ModifiedContent();
  a16 = lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>();
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, &a15);
  a17 = v19;
  a19 = v20;
  type metadata accessor for ConfirmationDialogModifierCore();
}

void sub_187268CB8()
{
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  type metadata accessor for StaticIf();
}

uint64_t sub_187268CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[16];

  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2);
  v10[0] = &protocol witness table for ConfirmationDialogModifierCore<A, B>;
  v10[1] = MEMORY[0x1E0CE1E88];
  v9[0] = v6;
  v9[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v10);
  v8[0] = MEMORY[0x18D75FFDC](v1, v4, v9);
  v8[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v1, v5, v8);
}

_UNKNOWN **base witness table accessor for ViewModifier in ConfirmationDialogModifierCore<A, B>()
{
  return &protocol witness table for ConfirmationDialogModifierCore<A, B>;
}

void static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v15 = a2[2];
  v16 = *((_DWORD *)a2 + 6);
  v17 = *((_DWORD *)a2 + 7);
  v18 = *((_DWORD *)a2 + 8);
  v19 = *((_DWORD *)a2 + 9);
  v21 = a2[5];
  v20 = a2[6];
  v22 = *((_DWORD *)a2 + 14);
  v23 = *((_DWORD *)a2 + 15);
  v24 = *((_DWORD *)a2 + 16);
  v25 = *((_DWORD *)a2 + 17);
  v26 = *((_DWORD *)a2 + 18);
  v27 = *((_DWORD *)a2 + 19);
  v28 = *((_DWORD *)a2 + 20);
  v31 = v13;
  LODWORD(v32) = v14;
  v33 = v15;
  v34 = __PAIR64__(v17, v16);
  v35 = v18;
  v36 = v19;
  v37 = v21;
  v38 = v20;
  v39 = v22;
  v40 = v23;
  v41 = v24;
  v42 = v25;
  v43 = v26;
  v44 = v27;
  v45 = v28;
  a3(&v29);
  v30 = v12;
  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = a8;
  type metadata accessor for ConfirmationDialogModifierCore();
}

void sub_187268EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int OffsetAttribute2;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  id v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;

  *(_QWORD *)(v9 + 88) = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v14 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  *(_QWORD *)(v9 + 104) = v11;
  if (v14)
    closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v16 = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v9 + 208) = *(_QWORD *)(v9 + 120);
  *(_DWORD *)(v9 + 216) = *(_DWORD *)(v9 + 164);
  *(_QWORD *)(v9 + 224) = v10;
  v17 = *(_DWORD *)(v9 + 180);
  *(_DWORD *)(v9 + 232) = *(_DWORD *)(v9 + 160);
  *(_DWORD *)(v9 + 236) = v17;
  v18 = *(_DWORD *)(v9 + 152);
  *(_DWORD *)(v9 + 240) = *(_DWORD *)(v9 + 156);
  *(_DWORD *)(v9 + 244) = v18;
  v19 = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 248) = v16;
  *(_QWORD *)(v9 + 256) = v19;
  *(_DWORD *)(v9 + 264) = *(_DWORD *)(v9 + 148);
  *(_DWORD *)(v9 + 268) = *(_DWORD *)(v9 + 144);
  *(_DWORD *)(v9 + 272) = *(_DWORD *)(v9 + 140);
  *(_DWORD *)(v9 + 276) = *(_DWORD *)(v9 + 136);
  *(_DWORD *)(v9 + 280) = *(_DWORD *)(v9 + 176);
  *(_DWORD *)(v9 + 284) = *(_DWORD *)(v9 + 172);
  *(_DWORD *)(v9 + 288) = *(_DWORD *)(v9 + 168);
  v20 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)(v9 + 208), 1, v9 + 480);
  *(_QWORD *)(v9 + 48) = &a9;
  v21 = *(_DWORD *)(v9 + 488);
  v22 = *(_QWORD *)(v9 + 496);
  v23 = *(_DWORD *)(v9 + 504);
  v24 = *(_QWORD *)(v9 + 512);
  v25 = *(_DWORD *)(v9 + 576);
  v26 = *(_BYTE *)(v9 + 580);
  *(_QWORD *)(v9 + 208) = *(_QWORD *)(v9 + 480);
  v27 = *(_DWORD *)(v9 + 584);
  *(_DWORD *)(v9 + 216) = v21;
  *(_QWORD *)(v9 + 224) = v22;
  *(_DWORD *)(v9 + 232) = v23;
  *(_QWORD *)(v9 + 240) = v24;
  *(_OWORD *)(v9 + 248) = *(_OWORD *)(v9 + 520);
  *(_OWORD *)(v9 + 264) = *(_OWORD *)(v9 + 536);
  *(_OWORD *)(v9 + 280) = *(_OWORD *)(v9 + 552);
  *(_QWORD *)(v9 + 296) = *(_QWORD *)(v9 + 568);
  *(_DWORD *)(v9 + 304) = v25;
  *(_BYTE *)(v9 + 308) = v26;
  *(_DWORD *)(v9 + 312) = v27;
  MEMORY[0x1E0C80A78](v20, v28);
  *(_QWORD *)(v9 + 368) = &type metadata for AllPlatformItemListFlags;
  *(_QWORD *)(v9 + 376) = v12;
  *(_QWORD *)(v9 + 72) = v12;
  *(_QWORD *)(v9 + 384) = &protocol witness table for AllPlatformItemListFlags;
  *(_QWORD *)(v9 + 392) = v13;
  type metadata accessor for PlatformItemListGenerator();
}

void sub_187269044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int OffsetAttribute2;
  uint64_t v25;
  id v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;

  *(_QWORD *)(v12 - 16) = a1;
  *(_QWORD *)(v12 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v17 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x1E0DEDCE8];
  v19 = MEMORY[0x1E0DEDD18];
  *(_QWORD *)(v9 + 32) = v17;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9 + 208, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v10, a1, v18, v17, v19, v20);
  *(_QWORD *)(v9 + 24) = 0;
  v21 = *(void **)(v9 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  *(_DWORD *)(v9 + 48) = *(_DWORD *)(v9 + 368);
  *(_DWORD *)(v9 + 480) = *(_DWORD *)(v9 + 100);
  _GraphValue.value.getter();
  v22 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  *(_QWORD *)(v9 + 56) = v13;
  if (v22)
    closure #2 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)();
  v23 = *(_QWORD *)(v9 + 104);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v25 = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v9 + 480) = *(_QWORD *)(v9 + 120);
  *(_DWORD *)(v9 + 488) = *(_DWORD *)(v9 + 164);
  *(_QWORD *)(v9 + 496) = v11;
  *(_DWORD *)(v9 + 504) = *(_DWORD *)(v9 + 160);
  *(_DWORD *)(v9 + 508) = *(_DWORD *)(v9 + 180);
  *(_DWORD *)(v9 + 512) = *(_DWORD *)(v9 + 156);
  *(_DWORD *)(v9 + 516) = *(_DWORD *)(v9 + 152);
  *(_QWORD *)(v9 + 520) = v25;
  *(_QWORD *)(v9 + 528) = *(_QWORD *)(v9 + 112);
  *(_DWORD *)(v9 + 536) = *(_DWORD *)(v9 + 148);
  *(_DWORD *)(v9 + 540) = *(_DWORD *)(v9 + 144);
  *(_DWORD *)(v9 + 544) = *(_DWORD *)(v9 + 140);
  *(_DWORD *)(v9 + 548) = *(_DWORD *)(v9 + 136);
  *(_DWORD *)(v9 + 552) = *(_DWORD *)(v9 + 176);
  *(_DWORD *)(v9 + 556) = *(_DWORD *)(v9 + 172);
  *(_DWORD *)(v9 + 560) = *(_DWORD *)(v9 + 168);
  v26 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)(v9 + 480), 1, v9 + 368);
  *(_QWORD *)(v9 + 16) = &a9;
  v27 = *(_DWORD *)(v9 + 376);
  v28 = *(_QWORD *)(v9 + 384);
  v29 = *(_DWORD *)(v9 + 392);
  v30 = *(_QWORD *)(v9 + 400);
  v31 = *(_DWORD *)(v9 + 464);
  v32 = *(_BYTE *)(v9 + 468);
  *(_QWORD *)(v9 + 480) = *(_QWORD *)(v9 + 368);
  v33 = *(_DWORD *)(v9 + 472);
  *(_DWORD *)(v9 + 488) = v27;
  *(_QWORD *)(v9 + 496) = v28;
  *(_DWORD *)(v9 + 504) = v29;
  *(_QWORD *)(v9 + 512) = v30;
  *(_OWORD *)(v9 + 520) = *(_OWORD *)(v9 + 408);
  *(_OWORD *)(v9 + 536) = *(_OWORD *)(v9 + 424);
  *(_OWORD *)(v9 + 552) = *(_OWORD *)(v9 + 440);
  *(_QWORD *)(v9 + 568) = *(_QWORD *)(v9 + 456);
  *(_DWORD *)(v9 + 576) = v31;
  *(_BYTE *)(v9 + 580) = v32;
  *(_DWORD *)(v9 + 584) = v33;
  MEMORY[0x1E0C80A78](v26, v34);
  *(_QWORD *)(v9 + 40) = v14;
  *(_QWORD *)(v9 + 208) = &type metadata for TextPlatformItemListFlags;
  *(_QWORD *)(v9 + 216) = v14;
  *(_QWORD *)(v9 + 224) = &protocol witness table for TextPlatformItemListFlags;
  *(_QWORD *)(v9 + 232) = v23;
  type metadata accessor for PlatformItemListGenerator();
}

_QWORD *sub_1872692E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *result;
  _QWORD *v46;
  _BYTE v47[96];

  *(_QWORD *)(v3 - 16) = a1;
  *(_QWORD *)(v3 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  swift_retain();
  *(_QWORD *)(v1 + 80) = v6;
  swift_retain();
  v9 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 480, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, v4, a1, MEMORY[0x1E0DEDCE8], *(_QWORD *)(v1 + 32), MEMORY[0x1E0DEDD18], v10);
  v11 = *(void **)(v1 + 480);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(v1 + 208);
  *(_QWORD *)(v1 + 480) = v5;
  v12 = *(_DWORD *)(v1 + 160);
  LODWORD(v11) = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v1 + 488) = (_DWORD)v11;
  *(_QWORD *)(v1 + 496) = v6;
  *(_DWORD *)(v1 + 504) = v12;
  v13 = *(_DWORD *)(v1 + 180);
  *(_DWORD *)(v1 + 508) = v13;
  v14 = *(_DWORD *)(v1 + 152);
  v15 = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v1 + 512) = v15;
  *(_DWORD *)(v1 + 516) = v14;
  *(_QWORD *)(v1 + 520) = v9;
  v16 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 528) = v16;
  v17 = *(_DWORD *)(v1 + 144);
  v18 = *(_DWORD *)(v1 + 148);
  *(_DWORD *)(v1 + 536) = v18;
  *(_DWORD *)(v1 + 540) = v17;
  *(_DWORD *)(v1 + 544) = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v1 + 548) = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v1 + 552) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 556) = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v1 + 560) = *(_DWORD *)(v1 + 168);
  *(_DWORD *)(v1 + 24) = _ViewInputs.environment.getter();
  *(_DWORD *)(v1 + 480) = *(_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 100) = _GraphValue.value.getter();
  *(_QWORD *)(v1 + 480) = *(_QWORD *)(v1 + 120);
  *(_DWORD *)(v1 + 488) = (_DWORD)v11;
  v19 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 496) = v19;
  *(_DWORD *)(v1 + 504) = v12;
  *(_DWORD *)(v1 + 508) = v13;
  *(_DWORD *)(v1 + 512) = v15;
  *(_DWORD *)(v1 + 516) = v14;
  v20 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 520) = v20;
  *(_QWORD *)(v1 + 528) = v16;
  *(_DWORD *)(v1 + 536) = v18;
  *(_DWORD *)(v1 + 540) = v17;
  v22 = *(_DWORD *)(v1 + 136);
  v21 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v1 + 544) = v21;
  *(_DWORD *)(v1 + 548) = v22;
  v23 = *(_DWORD *)(v1 + 172);
  LODWORD(v16) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 552) = v16;
  *(_DWORD *)(v1 + 556) = v23;
  v24 = *(_DWORD *)(v1 + 168);
  *(_DWORD *)(v1 + 560) = v24;
  *(_DWORD *)(v1 + 88) = _ViewInputs.viewPhase.getter();
  v25 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 480) = v25;
  *(_DWORD *)(v1 + 488) = *(_DWORD *)(v1 + 164);
  *(_QWORD *)(v1 + 496) = v19;
  *(_DWORD *)(v1 + 504) = *(_DWORD *)(v1 + 160);
  *(_DWORD *)(v1 + 508) = *(_DWORD *)(v1 + 180);
  *(_DWORD *)(v1 + 512) = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v1 + 516) = *(_DWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 520) = v20;
  *(_QWORD *)(v1 + 528) = *(_QWORD *)(v1 + 112);
  LODWORD(v20) = *(_DWORD *)(v1 + 144);
  *(_DWORD *)(v1 + 536) = *(_DWORD *)(v1 + 148);
  *(_DWORD *)(v1 + 540) = v20;
  *(_DWORD *)(v1 + 544) = v21;
  *(_DWORD *)(v1 + 548) = v22;
  *(_DWORD *)(v1 + 552) = v16;
  *(_DWORD *)(v1 + 556) = v23;
  *(_DWORD *)(v1 + 560) = v24;
  *(_DWORD *)(v1 + 16) = _ViewInputs.animatedPosition()();
  *(_QWORD *)(v1 + 480) = v25;
  v26 = *(_DWORD *)(v1 + 160);
  LODWORD(v25) = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v1 + 488) = v25;
  *(_QWORD *)(v1 + 496) = v19;
  *(_DWORD *)(v1 + 504) = v26;
  *(_DWORD *)(v1 + 508) = *(_DWORD *)(v1 + 180);
  v28 = *(_DWORD *)(v1 + 152);
  v27 = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v1 + 512) = v27;
  *(_DWORD *)(v1 + 516) = v28;
  *(_QWORD *)(v1 + 520) = *(_QWORD *)(v1 + 128);
  v29 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 528) = v29;
  LODWORD(v19) = *(_DWORD *)(v1 + 148);
  *(_DWORD *)(v1 + 536) = v19;
  *(_DWORD *)(v1 + 540) = v20;
  LODWORD(v20) = *(_DWORD *)(v1 + 136);
  LODWORD(v16) = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v1 + 544) = v16;
  *(_DWORD *)(v1 + 548) = v20;
  *(_DWORD *)(v1 + 552) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 556) = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v1 + 560) = *(_DWORD *)(v1 + 168);
  *(_DWORD *)(v1 + 12) = _ViewInputs.animatedCGSize()();
  *(_QWORD *)(v1 + 480) = *(_QWORD *)(v1 + 120);
  *(_DWORD *)(v1 + 488) = v25;
  *(_QWORD *)(v1 + 496) = *(_QWORD *)(v1 + 80);
  *(_DWORD *)(v1 + 504) = v26;
  *(_DWORD *)(v1 + 508) = *(_DWORD *)(v1 + 180);
  *(_DWORD *)(v1 + 512) = v27;
  *(_DWORD *)(v1 + 516) = v28;
  *(_QWORD *)(v1 + 520) = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 528) = v29;
  *(_DWORD *)(v1 + 536) = v19;
  *(_DWORD *)(v1 + 540) = *(_DWORD *)(v1 + 144);
  *(_DWORD *)(v1 + 544) = v16;
  *(_DWORD *)(v1 + 548) = v20;
  *(_DWORD *)(v1 + 552) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 556) = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v1 + 560) = *(_DWORD *)(v1 + 168);
  v30 = _ViewInputs.transform.getter();
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_BYTE *)(v7 - 112) = 0;
  v31 = *(_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 208) = *(_DWORD *)(v1 + 24);
  *(_DWORD *)(v1 + 212) = v31;
  v32 = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v1 + 216) = *(_DWORD *)(v1 + 48);
  *(_DWORD *)(v1 + 220) = v32;
  v33 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 224) = *(_DWORD *)(v1 + 88);
  *(_DWORD *)(v1 + 228) = v33;
  *(_DWORD *)(v1 + 232) = *(_DWORD *)(v1 + 12);
  *(_DWORD *)(v1 + 236) = v30;
  *(_QWORD *)(v1 + 240) = 0;
  type metadata accessor for PropertyList.Tracker();
  v34 = PropertyList.Tracker.__allocating_init()();
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 248) = v34;
  *(_BYTE *)(v1 + 272) = 2;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_WORD *)(v1 + 304) = 257;
  v35 = outlined init with take of DialogSuppressionConfiguration?(v7 - 160, v1 + 312);
  v36 = *(_OWORD *)(v1 + 320);
  v37 = *(_OWORD *)(v1 + 336);
  *(_OWORD *)(v1 + 576) = *(_OWORD *)(v1 + 304);
  *(_OWORD *)(v1 + 592) = v36;
  v38 = *(_OWORD *)(v1 + 345);
  *(_OWORD *)(v1 + 608) = v37;
  *(_OWORD *)(v1 + 617) = v38;
  v39 = *(_OWORD *)(v1 + 256);
  *(_OWORD *)(v1 + 512) = *(_OWORD *)(v1 + 240);
  *(_OWORD *)(v1 + 528) = v39;
  v40 = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(v1 + 544) = *(_OWORD *)(v1 + 272);
  *(_OWORD *)(v1 + 560) = v40;
  v41 = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(v1 + 480) = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(v1 + 496) = v41;
  *(_QWORD *)(v1 + 208) = v29;
  *(_DWORD *)(v1 + 216) = v19;
  MEMORY[0x1E0C80A78](v35, v42);
  v43 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)&v47[-48] = *(_QWORD *)(v1 + 72);
  *(_QWORD *)&v47[-40] = v43;
  v44 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)&v47[-32] = *(_QWORD *)(v1 + 56);
  *(_QWORD *)&v47[-24] = v44;
  *(_QWORD *)&v47[-16] = v1 + 480;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  result = outlined release of MakeConfirmationDialog<A, B>((_QWORD *)(v1 + 480));
  v46 = *(_QWORD **)(v1 + 64);
  *v46 = *(_QWORD *)(v1 + 192);
  v46[1] = *(_QWORD *)(v1 + 200);
  return result;
}

void closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

uint64_t sub_1872697A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 64);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void closure #2 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

uint64_t sub_187269840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 68);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void implicit closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)()
{
  type metadata accessor for MakeConfirmationDialog();
}

uint64_t sub_18726991C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  _QWORD v8[4];
  _OWORD v9[10];
  _OWORD v10[8];
  _BYTE v11[25];

  v8[2] = a1;
  v8[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeConfirmationDialog<A, B>, a1);
  outlined retain of MakeConfirmationDialog<A, B>(v1);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v8, a1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  v10[6] = v9[6];
  v10[7] = v9[7];
  *(_OWORD *)v11 = v9[8];
  *(_OWORD *)&v11[9] = *(_OWORD *)(v2 + 137);
  v10[2] = v9[2];
  v10[3] = v9[3];
  v10[4] = v9[4];
  v10[5] = v9[5];
  v10[0] = v9[0];
  v10[1] = v9[1];
  outlined release of MakeConfirmationDialog<A, B>(v10);
  return v7;
}

uint64_t MakeConfirmationDialog.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

void MakeConfirmationDialog.modifier.getter()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

uint64_t sub_187269A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ConfirmationDialogModifierCore<A, B>(int *a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4, uint64_t a5)
{
  static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ConfirmationDialogModifierCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConfirmationDialogModifierCore<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

void MakeConfirmationDialog.resolveTitle()()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

void sub_187269B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v3 + 32);
  v9 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 32) = v9;
  v10 = *(_OWORD *)(v3 + 112);
  v6[8] = *(_OWORD *)(v3 + 128);
  *(_OWORD *)((char *)v6 + 137) = *(_OWORD *)(v3 + 137);
  v11 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v2 + 80) = v11;
  v12 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v2 + 128) = v10;
  *(_OWORD *)(v2 + 96) = v12;
  PropertyList.Tracker.reset()();
  v13 = *(_OWORD *)(v4 + 16);
  v6[10] = *(_OWORD *)v4;
  v6[11] = v13;
  v14 = *(_OWORD *)(v4 + 112);
  v15 = *(_OWORD *)(v4 + 128);
  v16 = *(_OWORD *)(v4 + 80);
  v6[16] = *(_OWORD *)(v4 + 96);
  v6[17] = v14;
  v6[18] = v15;
  *(_OWORD *)((char *)v5 + 137) = *(_OWORD *)(v4 + 137);
  v17 = *(_OWORD *)(v4 + 64);
  v5[3] = *(_OWORD *)(v4 + 48);
  v5[4] = v17;
  *(_QWORD *)(v2 + 208) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v2 + 216) = v8;
  v5[5] = v16;
  MakeConfirmationDialog.environment.getter((_QWORD *)(v7 - 112));
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  *(_QWORD *)(v2 + 56) = v8;
  MakeConfirmationDialog.modifier.getter();
}

uint64_t sub_187269C50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_BYTE *)(v2 + 48);
  outlined copy of Text.Storage(v7, v8, v9);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v10(v2, v1);
  v0[22] = v4;
  v0[23] = v3;
  v0[2] = 0;
  v0[3] = 0;
  *(_QWORD *)(v6 - 112) = 0;
  v11 = Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v11;
}

unint64_t MakeConfirmationDialog.resolveTintColor()()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v1 = v0[1];
  v18 = *v0;
  v19 = v1;
  v2 = v0[8];
  v16 = v0[7];
  v17[0] = v2;
  *(_OWORD *)((char *)v17 + 9) = *(__int128 *)((char *)v0 + 137);
  v3 = v0[4];
  v12 = v0[3];
  v13 = v3;
  v4 = v0[6];
  v14 = v0[5];
  v15 = v4;
  v10 = v18;
  v20 = *((_QWORD *)v0 + 4);
  MakeConfirmationDialog.environment.getter(v11);
  if (v11[1])
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  swift_release();
  swift_release();
  if (!v10)
    return 0;
  PropertyList.Tracker.reset()();
  MakeConfirmationDialog.environment.getter(v11);
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  dispatch thunk of AnyColorBox.resolve(in:)();
  v6 = v5;
  v8 = v7;
  swift_release();
  swift_release();
  swift_release();
  return v6 | ((unint64_t)v8 << 32);
}

void MakeConfirmationDialog.updateValue()()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

uint64_t sub_18726A01C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OutputValue;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Value;
  char v36;
  char v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t result;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t Confirmation;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(_QWORD);
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  _BYTE v169[64];

  *(_QWORD *)(v2 + 200) = a1;
  *(_QWORD *)(v2 + 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v2 + 152) = &v169[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v2 + 96) = v7;
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v2 + 208) = &v169[-v10];
  *(_QWORD *)(v2 + 104) = type metadata accessor for (_:)();
  OutputValue = AGGraphGetOutputValue();
  *(_QWORD *)(v2 + 192) = v6;
  *(_QWORD *)(v2 + 144) = v3;
  if (!OutputValue)
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 68) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 240) = 0;
    *(_QWORD *)(v2 + 48) = 1;
LABEL_5:
    v27 = *v5;
    v26 = v5[1];
    *(_DWORD *)(v2 + 416) = v5[2];
    *(_DWORD *)(v2 + 304) = v5[3];
    *(_DWORD *)(v2 + 392) = v5[4];
    *(_DWORD *)(v2 + 404) = v5[5];
    *(_DWORD *)(v2 + 236) = v5[6];
    *(_DWORD *)(v2 + 408) = v5[7];
    v28 = v5[9];
    *(_DWORD *)(v2 + 424) = v5[8];
    *(_QWORD *)(v2 + 384) = *((_QWORD *)v5 + 5);
    v29 = *((_QWORD *)v5 + 7);
    *(_QWORD *)(v2 + 312) = *((_QWORD *)v5 + 6);
    *(_DWORD *)(v2 + 380) = *((unsigned __int8 *)v5 + 64);
    *(_DWORD *)(v2 + 456) = *(int *)((char *)v5 + 65);
    *(_DWORD *)(v2 + 459) = v5[17];
    v30 = *((_QWORD *)v5 + 9);
    *(_QWORD *)(v2 + 360) = *((_QWORD *)v5 + 10);
    *(_QWORD *)(v2 + 368) = v30;
    v31 = *((_QWORD *)v5 + 11);
    *(_DWORD *)(v2 + 296) = *((unsigned __int8 *)v5 + 96);
    *(_DWORD *)(v2 + 288) = *((unsigned __int8 *)v5 + 97);
    *(_WORD *)(v2 + 452) = *((_WORD *)v5 + 51);
    *(_DWORD *)(v2 + 448) = *(int *)((char *)v5 + 98);
    v32 = *((_QWORD *)v5 + 13);
    *(_QWORD *)(v2 + 344) = *((_QWORD *)v5 + 14);
    *(_QWORD *)(v2 + 352) = v31;
    v33 = *((_QWORD *)v5 + 15);
    *(_QWORD *)(v2 + 272) = *((_QWORD *)v5 + 16);
    *(_QWORD *)(v2 + 280) = v32;
    *(_QWORD *)(v2 + 328) = *((_QWORD *)v5 + 17);
    *(_QWORD *)(v2 + 336) = v33;
    *(_QWORD *)(v2 + 264) = *((_QWORD *)v5 + 18);
    *(_DWORD *)(v2 + 256) = *((unsigned __int8 *)v5 + 152);
    *(_DWORD *)(v2 + 248) = v26;
    v34 = *(_QWORD *)(v2 + 200);
    Value = AGGraphGetValue();
    v37 = v36;
    v38 = *(_QWORD *)(v2 + 208);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 216) + 16);
    *(_QWORD *)(v2 + 8) = v39;
    v39(v38, Value, v34);
    *(_DWORD *)(v2 + 324) = v27;
    *(_QWORD *)(v2 + 224) = v29;
    if (!v29 || (v37 & 1) != 0)
    {
      *(_DWORD *)(v2 + 552) = v27;
      *(_DWORD *)(v2 + 556) = *(_DWORD *)(v2 + 248);
      *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 416);
      *(_DWORD *)(v2 + 564) = *(_DWORD *)(v2 + 304);
      v64 = *(_DWORD *)(v2 + 404);
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
      *(_DWORD *)(v4 + 20) = v64;
      v65 = *(_DWORD *)(v2 + 408);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 236);
      *(_DWORD *)(v4 + 28) = v65;
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 424);
      *(_DWORD *)(v4 + 36) = v28;
      v66 = *(_QWORD *)(v2 + 312);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 384);
      *(_QWORD *)(v4 + 48) = v66;
      *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 224);
      *(_BYTE *)(v2 + 616) = *(_DWORD *)(v2 + 380);
      *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
      *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
      v67 = *(_QWORD *)(v2 + 360);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(v2 + 368);
      *(_QWORD *)(v4 + 80) = v67;
      *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 352);
      *(_BYTE *)(v2 + 648) = *(_DWORD *)(v2 + 296);
      *(_BYTE *)(v2 + 649) = *(_DWORD *)(v2 + 288);
      *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
      *(_DWORD *)(v4 + 98) = *(_DWORD *)(v2 + 448);
      v68 = *(_QWORD *)(v2 + 344);
      *(_QWORD *)(v4 + 104) = *(_QWORD *)(v2 + 280);
      *(_QWORD *)(v4 + 112) = v68;
      v69 = *(_QWORD *)(v2 + 272);
      *(_QWORD *)(v4 + 120) = *(_QWORD *)(v2 + 336);
      *(_QWORD *)(v4 + 128) = v69;
      v70 = *(_QWORD *)(v2 + 264);
      *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 328);
      *(_QWORD *)(v4 + 144) = v70;
      *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 256);
      MakeConfirmationDialog.resolveTitle()();
    }
    v40 = *(_QWORD *)(v2 + 224);
    swift_bridgeObjectRetain();
    v41 = *(_QWORD *)(v2 + 312);
    v42 = *(_DWORD *)(v2 + 236);
    v43 = *(_DWORD *)(v2 + 408);
    *(_QWORD *)(v2 + 240) = v41;
    *(_QWORD *)(v2 + 120) = v40;
    *(_DWORD *)(v2 + 552) = *(_DWORD *)(v2 + 324);
    v71 = *(_DWORD *)(v2 + 248);
    *(_DWORD *)(v2 + 556) = v71;
    *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 416);
    v72 = *(_DWORD *)(v2 + 304);
    *(_DWORD *)(v2 + 564) = v72;
    v73 = *(_DWORD *)(v2 + 404);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v4 + 20) = v73;
    *(_DWORD *)(v4 + 24) = v42;
    *(_DWORD *)(v4 + 28) = v43;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 424);
    *(_DWORD *)(v4 + 36) = v28;
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 384);
    *(_QWORD *)(v4 + 48) = v41;
    *(_QWORD *)(v4 + 56) = v40;
    *(_BYTE *)(v2 + 616) = *(_DWORD *)(v2 + 380);
    *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
    *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
    v74 = *(_QWORD *)(v2 + 360);
    *(_QWORD *)(v4 + 72) = *(_QWORD *)(v2 + 368);
    *(_QWORD *)(v4 + 80) = v74;
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 352);
    *(_BYTE *)(v2 + 648) = *(_DWORD *)(v2 + 296);
    *(_BYTE *)(v2 + 649) = *(_DWORD *)(v2 + 288);
    *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
    *(_DWORD *)(v4 + 98) = *(_DWORD *)(v2 + 448);
    v75 = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v4 + 104) = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v4 + 112) = v75;
    v76 = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v4 + 120) = *(_QWORD *)(v2 + 336);
    *(_QWORD *)(v4 + 128) = v76;
    v77 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 328);
    *(_QWORD *)(v4 + 144) = v77;
    *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 256);
    MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 496));
    if (*(_QWORD *)(v2 + 504))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      v71 = *(_DWORD *)(v2 + 248);
      v72 = *(_DWORD *)(v2 + 304);
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v78 = *(unsigned __int8 *)(v2 + 439);
    v79 = *(_DWORD *)(v2 + 236);
    v80 = *(_DWORD *)(v2 + 408);
    if (v78 == 2)
    {
      *(_DWORD *)(v2 + 552) = *(_DWORD *)(v2 + 324);
      *(_DWORD *)(v2 + 556) = v71;
      *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 416);
      *(_DWORD *)(v2 + 564) = v72;
      v81 = *(_DWORD *)(v2 + 404);
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
      *(_DWORD *)(v4 + 20) = v81;
      *(_DWORD *)(v4 + 24) = v79;
      *(_DWORD *)(v4 + 28) = v80;
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 424);
      *(_DWORD *)(v4 + 36) = v28;
      v82 = *(_QWORD *)(v2 + 312);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 384);
      *(_QWORD *)(v4 + 48) = v82;
      *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 224);
      *(_BYTE *)(v2 + 616) = *(_DWORD *)(v2 + 380);
      *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
      *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
      v83 = *(_QWORD *)(v2 + 360);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(v2 + 368);
      *(_QWORD *)(v4 + 80) = v83;
      *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 352);
      *(_BYTE *)(v2 + 648) = *(_DWORD *)(v2 + 296);
      *(_BYTE *)(v2 + 649) = *(_DWORD *)(v2 + 288);
      *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
      *(_DWORD *)(v4 + 98) = *(_DWORD *)(v2 + 448);
      v84 = *(_QWORD *)(v2 + 344);
      *(_QWORD *)(v4 + 104) = *(_QWORD *)(v2 + 280);
      *(_QWORD *)(v4 + 112) = v84;
      v85 = *(_QWORD *)(v2 + 272);
      *(_QWORD *)(v4 + 120) = *(_QWORD *)(v2 + 336);
      *(_QWORD *)(v4 + 128) = v85;
      v86 = *(_QWORD *)(v2 + 264);
      *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 328);
      *(_QWORD *)(v4 + 144) = v86;
      *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 256);
      MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 464));
      v87 = *(_QWORD *)(v2 + 472);
      *(_QWORD *)(v2 + 552) = *(_QWORD *)(v2 + 464);
      *(_QWORD *)(v2 + 560) = v87;
      EnvironmentValues.explicitPreferredColorScheme.getter();
      swift_release();
      v71 = *(_DWORD *)(v2 + 248);
      v72 = *(_DWORD *)(v2 + 304);
      swift_release();
      v78 = *(unsigned __int8 *)(v2 + 440);
    }
    *(_DWORD *)(v2 + 28) = v78;
    *(_DWORD *)(v2 + 552) = *(_DWORD *)(v2 + 324);
    *(_DWORD *)(v2 + 556) = v71;
    *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 416);
    *(_DWORD *)(v2 + 564) = v72;
    v88 = *(_DWORD *)(v2 + 404);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v4 + 20) = v88;
    *(_DWORD *)(v4 + 24) = v79;
    *(_DWORD *)(v4 + 28) = v80;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 424);
    *(_DWORD *)(v4 + 36) = v28;
    v89 = *(_QWORD *)(v2 + 312);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 384);
    *(_QWORD *)(v4 + 48) = v89;
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 224);
    *(_BYTE *)(v2 + 616) = *(_DWORD *)(v2 + 380);
    *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
    *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
    v90 = *(_QWORD *)(v2 + 360);
    *(_QWORD *)(v4 + 72) = *(_QWORD *)(v2 + 368);
    *(_QWORD *)(v4 + 80) = v90;
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 352);
    *(_BYTE *)(v2 + 648) = *(_DWORD *)(v2 + 296);
    *(_BYTE *)(v2 + 649) = *(_DWORD *)(v2 + 288);
    LODWORD(v90) = *(_DWORD *)(v2 + 448);
    *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
    *(_DWORD *)(v4 + 98) = v90;
    v91 = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v4 + 104) = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v4 + 112) = v91;
    v92 = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v4 + 120) = *(_QWORD *)(v2 + 336);
    *(_QWORD *)(v4 + 128) = v92;
    v93 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 328);
    *(_QWORD *)(v4 + 144) = v93;
    *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 256);
    MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 496));
    if (*(_QWORD *)(v2 + 504))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      v71 = *(_DWORD *)(v2 + 248);
      v72 = *(_DWORD *)(v2 + 304);
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    *(_DWORD *)(v2 + 232) = v28;
    swift_release_n();
    v94 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(v2 + 552);
    if ((_DWORD)v94)
    {
      *(_DWORD *)(v2 + 552) = *(_DWORD *)(v2 + 324);
      *(_DWORD *)(v2 + 556) = v71;
      *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 416);
      *(_DWORD *)(v2 + 564) = v72;
      v95 = *(_DWORD *)(v2 + 404);
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
      *(_DWORD *)(v4 + 20) = v95;
      v96 = *(_DWORD *)(v2 + 408);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 236);
      *(_DWORD *)(v4 + 28) = v96;
      v97 = *(_DWORD *)(v2 + 232);
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 424);
      *(_DWORD *)(v4 + 36) = v97;
      v98 = *(_QWORD *)(v2 + 312);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 384);
      *(_QWORD *)(v4 + 48) = v98;
      *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 224);
      *(_BYTE *)(v2 + 616) = *(_DWORD *)(v2 + 380);
      *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
      *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
      v99 = *(_QWORD *)(v2 + 360);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(v2 + 368);
      *(_QWORD *)(v4 + 80) = v99;
      *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 352);
      v100 = *(_DWORD *)(v2 + 296);
      *(_BYTE *)(v2 + 648) = v100;
      v101 = *(_DWORD *)(v2 + 288);
      *(_BYTE *)(v2 + 649) = v101;
      *(_DWORD *)(v2 + 650) = *(_DWORD *)(v2 + 448);
      *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
      v103 = *(_QWORD *)(v2 + 272);
      v102 = *(_QWORD *)(v2 + 280);
      v104 = *(_QWORD *)(v2 + 344);
      *(_QWORD *)(v2 + 656) = v102;
      *(_QWORD *)(v2 + 664) = v104;
      *(_QWORD *)(v2 + 672) = *(_QWORD *)(v2 + 336);
      *(_QWORD *)(v2 + 680) = v103;
      v105 = *(_QWORD *)(v2 + 264);
      *(_QWORD *)(v2 + 688) = *(_QWORD *)(v2 + 328);
      *(_QWORD *)(v2 + 696) = v105;
      v106 = *(_DWORD *)(v2 + 256);
      *(_BYTE *)(v2 + 704) = v106;
      Confirmation = MakeConfirmationDialog.resolveTintColor()();
      v108 = v103;
      LOBYTE(v109) = v101;
      LOBYTE(v110) = v100;
      v4 = v2 + 552;
      v111 = *(_QWORD *)(v2 + 384);
      v112 = *(_DWORD *)(v2 + 324);
      v113 = *(_DWORD *)(v2 + 380);
      v114 = *(_QWORD *)(v2 + 368);
      v115 = *(_DWORD *)(v2 + 392);
      v116 = v102;
      v117 = *(_DWORD *)(v2 + 232);
      v118 = *(_DWORD *)(v2 + 408);
      v119 = *(_DWORD *)(v2 + 404);
      v120 = *(_DWORD *)(v2 + 424);
      v121 = *(_QWORD *)(v2 + 312);
      *(_QWORD *)(v2 + 128) = v122;
      *(_QWORD *)(v2 + 136) = Confirmation;
      v124 = *(_QWORD *)(v2 + 352);
      v123 = *(_QWORD *)(v2 + 360);
      v125 = *(_QWORD *)(v2 + 328);
      v127 = v126 & 1;
      v129 = *(_QWORD *)(v2 + 336);
      v128 = *(_QWORD *)(v2 + 344);
      v71 = *(_DWORD *)(v2 + 248);
      *(_DWORD *)(v2 + 4) = v127;
      v130 = *(_DWORD *)(v2 + 416);
    }
    else
    {
      *(_DWORD *)(v2 + 4) = 0;
      v130 = *(_DWORD *)(v2 + 416);
      v120 = *(_DWORD *)(v2 + 424);
      v119 = *(_DWORD *)(v2 + 404);
      v118 = *(_DWORD *)(v2 + 408);
      v117 = *(_DWORD *)(v2 + 232);
      v115 = *(_DWORD *)(v2 + 392);
      v112 = *(_DWORD *)(v2 + 324);
      v111 = *(_QWORD *)(v2 + 384);
      v121 = *(_QWORD *)(v2 + 312);
      v113 = *(_DWORD *)(v2 + 380);
      v123 = *(_QWORD *)(v2 + 360);
      v114 = *(_QWORD *)(v2 + 368);
      v128 = *(_QWORD *)(v2 + 344);
      v124 = *(_QWORD *)(v2 + 352);
      v110 = *(_DWORD *)(v2 + 296);
      v109 = *(_DWORD *)(v2 + 288);
      v108 = *(_QWORD *)(v2 + 272);
      v116 = *(_QWORD *)(v2 + 280);
      v125 = *(_QWORD *)(v2 + 328);
      v129 = *(_QWORD *)(v2 + 336);
      v105 = *(_QWORD *)(v2 + 264);
      v106 = *(_DWORD *)(v2 + 256);
    }
    *(_DWORD *)(v2 + 552) = v112;
    *(_DWORD *)(v2 + 556) = v71;
    *(_DWORD *)(v2 + 560) = v130;
    *(_DWORD *)(v2 + 564) = v72;
    *(_DWORD *)(v4 + 16) = v115;
    *(_DWORD *)(v4 + 20) = v119;
    v131 = *(_DWORD *)(v2 + 236);
    *(_DWORD *)(v4 + 24) = v131;
    *(_DWORD *)(v4 + 28) = v118;
    *(_DWORD *)(v4 + 32) = v120;
    *(_DWORD *)(v4 + 36) = v117;
    *(_QWORD *)(v4 + 40) = v111;
    *(_QWORD *)(v4 + 48) = v121;
    v132 = *(_QWORD *)(v2 + 224);
    *(_QWORD *)(v4 + 56) = v132;
    *(_BYTE *)(v2 + 616) = v113;
    *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
    *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
    *(_QWORD *)(v4 + 72) = v114;
    *(_QWORD *)(v4 + 80) = v123;
    *(_QWORD *)(v4 + 88) = v124;
    *(_BYTE *)(v2 + 648) = v110;
    *(_BYTE *)(v2 + 649) = v109;
    *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
    *(_DWORD *)(v4 + 98) = *(_DWORD *)(v2 + 448);
    *(_QWORD *)(v4 + 104) = v116;
    *(_QWORD *)(v4 + 112) = v128;
    *(_QWORD *)(v4 + 120) = v129;
    *(_QWORD *)(v4 + 128) = v108;
    *(_QWORD *)(v4 + 136) = v125;
    *(_QWORD *)(v4 + 144) = v105;
    *(_BYTE *)(v2 + 704) = v106;
    MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 496));
    if (*(_QWORD *)(v2 + 504))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    *(_DWORD *)(v2 + 48) = *(unsigned __int8 *)(v2 + 552);
    *(_DWORD *)(v2 + 552) = *(_DWORD *)(v2 + 324);
    *(_DWORD *)(v2 + 556) = *(_DWORD *)(v2 + 248);
    *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 416);
    *(_DWORD *)(v2 + 564) = *(_DWORD *)(v2 + 304);
    v133 = *(_DWORD *)(v2 + 404);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v4 + 20) = v133;
    v134 = *(_DWORD *)(v2 + 408);
    *(_DWORD *)(v4 + 24) = v131;
    *(_DWORD *)(v4 + 28) = v134;
    v135 = *(_DWORD *)(v2 + 424);
    v136 = *(_DWORD *)(v2 + 232);
    *(_DWORD *)(v4 + 32) = v135;
    *(_DWORD *)(v4 + 36) = v136;
    v137 = *(_QWORD *)(v2 + 312);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 384);
    *(_QWORD *)(v4 + 48) = v137;
    *(_QWORD *)(v4 + 56) = v132;
    *(_BYTE *)(v2 + 616) = *(_DWORD *)(v2 + 380);
    *(_DWORD *)(v4 + 65) = *(_DWORD *)(v2 + 456);
    *(_DWORD *)(v4 + 68) = *(_DWORD *)(v2 + 459);
    v138 = *(_QWORD *)(v2 + 360);
    *(_QWORD *)(v4 + 72) = *(_QWORD *)(v2 + 368);
    *(_QWORD *)(v4 + 80) = v138;
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 352);
    *(_BYTE *)(v2 + 648) = *(_DWORD *)(v2 + 296);
    *(_BYTE *)(v2 + 649) = *(_DWORD *)(v2 + 288);
    LODWORD(v138) = *(_DWORD *)(v2 + 448);
    *(_WORD *)(v2 + 654) = *(_WORD *)(v2 + 452);
    *(_DWORD *)(v4 + 98) = v138;
    v139 = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v4 + 104) = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v4 + 112) = v139;
    v140 = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v4 + 120) = *(_QWORD *)(v2 + 336);
    *(_QWORD *)(v4 + 128) = v140;
    v141 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 328);
    *(_QWORD *)(v4 + 144) = v141;
    *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 256);
    MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 464));
    if (*(_QWORD *)(v2 + 472))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    v142 = *(void (**)(_QWORD))(v2 + 8);
    v143 = *(_QWORD *)(v2 + 96);
    swift_release_n();
    outlined init with take of DialogSuppressionConfiguration?(v2 + 496, v2 + 552);
    v144 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v144 != *(_DWORD *)(v2 + 232) || !v135)
    {
      v135 = static ViewIdentity.nextSeed;
      if ((static ViewIdentity.nextSeed + 1) > 1)
        v145 = static ViewIdentity.nextSeed + 1;
      else
        v145 = 1;
      static ViewIdentity.nextSeed = v145;
      v146 = *(_QWORD *)(v2 + 144);
      *(_DWORD *)(v146 + 32) = v135;
      *(_DWORD *)(v146 + 36) = v144;
    }
    *(_DWORD *)(v2 + 424) = v135;
    AnchorGeometry.init(position:size:transform:)();
    v147 = *(_DWORD *)(v2 + 504);
    v148 = *(_QWORD *)(v2 + 496);
    static UnitRect.one.getter();
    v149 = *(_OWORD *)(v2 + 512);
    *(_OWORD *)(v2 + 464) = *(_OWORD *)(v2 + 496);
    *(_OWORD *)(v2 + 480) = v149;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
    Anchor.Source.init<A>(anchor:)();
    *(_QWORD *)(v2 + 496) = v148;
    *(_DWORD *)(v2 + 504) = v147;
    *(_QWORD *)(v2 + 408) = Anchor.Source.prepare(geometry:)();
    swift_release();
    v150 = *(_QWORD *)(v2 + 200);
    *(_DWORD *)(v2 + 404) = *(unsigned __int8 *)(*(_QWORD *)(v2 + 208) + 64);
    v142(*(_QWORD *)(v2 + 152));
    v151 = *(_QWORD *)(v2 + 216);
    v152 = (*(unsigned __int8 *)(v151 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
    v153 = (v143 + v152 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v154 = (v153 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)(v2 + 384) = (v154 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v2 + 392) = (v154 + 35) & 0xFFFFFFFFFFFFFFF8;
    v155 = (v154 + 51) & 0xFFFFFFFFFFFFFFF8;
    v156 = (v155 + 11) & 0xFFFFFFFFFFFFFFF8;
    v157 = swift_allocObject();
    v158 = *(_QWORD *)(v2 + 176);
    *(_QWORD *)(v157 + 16) = *(_QWORD *)(v2 + 184);
    *(_QWORD *)(v157 + 24) = v158;
    v159 = *(_QWORD *)(v2 + 152);
    v160 = *(_QWORD *)(v2 + 160);
    *(_QWORD *)(v157 + 32) = *(_QWORD *)(v2 + 168);
    *(_QWORD *)(v157 + 40) = v160;
    *(_DWORD *)(v157 + 48) = *(_DWORD *)(v2 + 424);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v151 + 32))(v157 + v152, v159, v150);
    *(_DWORD *)(v157 + v153) = *(_DWORD *)(v2 + 416);
    *(_DWORD *)(v157 + v154) = *(_DWORD *)(v2 + 304);
    v161 = v157 + *(_QWORD *)(v2 + 384);
    v162 = *(_QWORD *)(v2 + 120);
    v163 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)v161 = *(_QWORD *)(v2 + 240);
    *(_QWORD *)(v161 + 8) = v162;
    *(_BYTE *)(v161 + 16) = *(_DWORD *)(v2 + 404);
    v164 = v157 + *(_QWORD *)(v2 + 392);
    *(_QWORD *)v164 = *(_QWORD *)(v2 + 408);
    LODWORD(v153) = *(_DWORD *)(v2 + 28);
    *(_BYTE *)(v164 + 8) = v153;
    v165 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v157 + v155) = v165;
    v166 = v157 + v156;
    v167 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)v166 = v167;
    *(_QWORD *)(v166 + 8) = v163;
    LODWORD(v150) = *(_DWORD *)(v2 + 4);
    *(_BYTE *)(v166 + 16) = v150;
    v168 = *(_DWORD *)(v2 + 48);
    *(_BYTE *)(v166 + 17) = v168;
    outlined init with take of DialogSuppressionConfiguration?(v2 + 552, v157 + ((v156 + 25) & 0xFFFFFFFFFFFFFFF8));
    *(_QWORD *)(v2 + 496) = partial apply for closure #2 in MakeConfirmationDialog.updateValue();
    *(_QWORD *)(v2 + 504) = v157;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of DialogSuppressionConfiguration?(v2 + 552, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of DialogSuppressionConfiguration?);
    AGGraphSetOutputValue();
    swift_release();
    $defer #1 <A, B>() in MakeConfirmationDialog.updateValue()(*(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 240), v162, v153, v165, v167, v163, v150, v168, v2 + 552);
    outlined retain of DialogSuppressionConfiguration?(v2 + 552, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of DialogSuppressionConfiguration?);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of DialogSuppressionConfiguration?(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 88));
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 216) + 8))(*(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 200));
  }
  v12 = *v5;
  *(_DWORD *)(v2 + 336) = v5[1];
  *(_DWORD *)(v2 + 408) = v5[2];
  *(_DWORD *)(v2 + 404) = v5[3];
  *(_DWORD *)(v2 + 392) = v5[4];
  *(_DWORD *)(v2 + 384) = v5[5];
  *(_DWORD *)(v2 + 380) = v5[6];
  *(_DWORD *)(v2 + 368) = v5[7];
  *(_DWORD *)(v2 + 360) = v5[8];
  *(_DWORD *)(v2 + 352) = v5[9];
  *(_QWORD *)(v2 + 344) = *((_QWORD *)v5 + 5);
  v13 = *((_QWORD *)v5 + 6);
  *(_QWORD *)(v2 + 416) = *((_QWORD *)v5 + 7);
  *(_QWORD *)(v2 + 424) = v13;
  v14 = *((unsigned __int8 *)v5 + 64);
  v15 = *((_QWORD *)v5 + 9);
  v16 = *((_QWORD *)v5 + 10);
  v17 = *((_QWORD *)v5 + 11);
  v18 = *((unsigned __int8 *)v5 + 96);
  v19 = *((unsigned __int8 *)v5 + 97);
  v20 = *((_QWORD *)v5 + 14);
  v21 = *((_QWORD *)v5 + 15);
  *(_QWORD *)(v2 + 288) = *((_QWORD *)v5 + 13);
  *(_QWORD *)(v2 + 296) = v21;
  *(_QWORD *)(v2 + 328) = *((_QWORD *)v5 + 16);
  v22 = *((_QWORD *)v5 + 17);
  v23 = *((_QWORD *)v5 + 18);
  *(_QWORD *)(v2 + 304) = v20;
  *(_QWORD *)(v2 + 312) = v22;
  *(_DWORD *)(v2 + 324) = *((unsigned __int8 *)v5 + 152);
  *(_DWORD *)(v2 + 552) = v12;
  v24 = AGGraphAnyInputsChanged();
  v25 = *(_DWORD *)(v2 + 552);
  *v5 = v25;
  if ((v24 & 1) != 0)
  {
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 1;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 68) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 240) = 0;
    goto LABEL_5;
  }
  *(_DWORD *)(v2 + 28) = v18;
  *(_BYTE *)(v2 + 440) = v18 & 1;
  *(_DWORD *)(v2 + 552) = v25;
  *(_DWORD *)(v2 + 556) = *(_DWORD *)(v2 + 336);
  *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 408);
  *(_DWORD *)(v2 + 564) = *(_DWORD *)(v2 + 404);
  v44 = *(_DWORD *)(v2 + 384);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
  *(_DWORD *)(v4 + 20) = v44;
  v45 = *(_DWORD *)(v2 + 368);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 380);
  *(_DWORD *)(v4 + 28) = v45;
  v46 = *(_DWORD *)(v2 + 352);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 360);
  *(_DWORD *)(v4 + 36) = v46;
  v47 = *(_QWORD *)(v2 + 424);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 344);
  *(_QWORD *)(v4 + 48) = v47;
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 416);
  *(_BYTE *)(v2 + 616) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  *(_QWORD *)(v4 + 80) = v16;
  *(_QWORD *)(v4 + 88) = v17;
  LODWORD(v47) = *(unsigned __int8 *)(v2 + 440);
  *(_DWORD *)(v2 + 224) = v47;
  *(_BYTE *)(v2 + 648) = v47;
  *(_BYTE *)(v2 + 649) = v19;
  v48 = *(_QWORD *)(v2 + 304);
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(v2 + 288);
  *(_QWORD *)(v4 + 112) = v48;
  v49 = *(_QWORD *)(v2 + 328);
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(v2 + 296);
  *(_QWORD *)(v4 + 128) = v49;
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 312);
  *(_QWORD *)(v4 + 144) = v23;
  *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 324);
  *(_QWORD *)(v2 + 248) = v23;
  *(_DWORD *)(v2 + 264) = v19;
  *(_QWORD *)(v2 + 272) = v17;
  *(_QWORD *)(v2 + 280) = v16;
  v50 = v25;
  MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 496));
  swift_release();
  v51 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
  result = swift_release();
  if ((v51 & 1) != 0)
  {
    *(_DWORD *)(v2 + 232) = v50;
    *(_DWORD *)(v2 + 236) = v14;
    *(_DWORD *)(v2 + 552) = v50;
    *(_DWORD *)(v2 + 556) = *(_DWORD *)(v2 + 336);
    *(_DWORD *)(v2 + 560) = *(_DWORD *)(v2 + 408);
    *(_DWORD *)(v2 + 564) = *(_DWORD *)(v2 + 404);
    v53 = *(_DWORD *)(v2 + 384);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v4 + 20) = v53;
    v54 = *(_DWORD *)(v2 + 368);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 380);
    *(_DWORD *)(v4 + 28) = v54;
    v55 = *(_DWORD *)(v2 + 352);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 360);
    *(_DWORD *)(v4 + 36) = v55;
    v56 = *(_QWORD *)(v2 + 416);
    v57 = *(_QWORD *)(v2 + 424);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v4 + 48) = v57;
    *(_QWORD *)(v4 + 56) = v56;
    *(_BYTE *)(v2 + 616) = v14;
    v58 = *(_QWORD *)(v2 + 280);
    v59 = *(_QWORD *)(v2 + 288);
    *(_QWORD *)(v4 + 72) = v15;
    *(_QWORD *)(v4 + 80) = v58;
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(v2 + 272);
    *(_BYTE *)(v2 + 648) = *(_DWORD *)(v2 + 224);
    *(_BYTE *)(v2 + 649) = *(_DWORD *)(v2 + 264);
    *(_QWORD *)(v2 + 256) = v15;
    v60 = *(_QWORD *)(v2 + 296);
    v61 = *(_QWORD *)(v2 + 304);
    *(_QWORD *)(v4 + 104) = v59;
    *(_QWORD *)(v4 + 112) = v61;
    v62 = *(_QWORD *)(v2 + 328);
    *(_QWORD *)(v4 + 120) = v60;
    *(_QWORD *)(v4 + 128) = v62;
    v63 = *(_QWORD *)(v2 + 248);
    *(_QWORD *)(v4 + 136) = *(_QWORD *)(v2 + 312);
    *(_QWORD *)(v4 + 144) = v63;
    *(_BYTE *)(v2 + 704) = *(_DWORD *)(v2 + 324);
    MakeConfirmationDialog.resolveTitle()();
  }
  return result;
}

uint64_t $defer #1 <A, B>() in MakeConfirmationDialog.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v15 = a1;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v15 + 64) = a4;
  *(_QWORD *)(v15 + 72) = a5;
  swift_retain();
  swift_release();
  v16 = *(_QWORD *)(v15 + 104);
  v15 += 104;
  *(_QWORD *)(v15 - 24) = a6;
  *(_QWORD *)(v15 - 16) = a7;
  *(_BYTE *)(v15 - 8) = a8 & 1;
  *(_BYTE *)(v15 - 7) = a9;
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = *(_QWORD *)(v15 + 24);
  v20 = *(_QWORD *)(v15 + 32);
  v21 = *(_QWORD *)(v15 + 40);
  outlined init with take of DialogSuppressionConfiguration?(a10, v15);
  outlined retain of DialogSuppressionConfiguration?(a10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of DialogSuppressionConfiguration?);
  return outlined consume of DialogSuppressionConfiguration?(v16, v17, v18, v19, v20, v21);
}

uint64_t closure #2 in MakeConfirmationDialog.updateValue()(uint64_t *a1, Swift::UInt32 a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, __int128 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v29[176];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[5];

  v18 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v20 & 1) != 0))
  {
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(v18 + 56) + 176 * v19, (uint64_t)&v30);
    outlined destroy of ConfirmationDialog?((uint64_t)&v30);
    MEMORY[0x18D75AC90](0xD000000000000084, 0x8000000187BDAD10);
  }
  else
  {
    v35 = 0u;
    memset(v36, 0, 57);
    v34 = 0u;
    v32 = 0u;
    memset(v33, 0, sizeof(v33));
    v30 = 0u;
    v31 = 0u;
    outlined destroy of ConfirmationDialog?((uint64_t)&v30);
  }
  v22 = *(_QWORD *)(a3 + 8);
  v21 = *(_QWORD *)(a3 + 16);
  v23 = *(_BYTE *)(a3 + 24);
  LOBYTE(v30) = *(_BYTE *)a3;
  *((_QWORD *)&v30 + 1) = v22;
  *(_QWORD *)&v31 = v21;
  BYTE8(v31) = v23;
  HIDWORD(v31) = a4;
  LODWORD(v32) = a5;
  *((_QWORD *)&v32 + 1) = a6;
  *(_QWORD *)&v33[0] = a7;
  BYTE8(v33[0]) = a8;
  *(_QWORD *)&v34 = a9;
  swift_unknownObjectWeakInit();
  LOBYTE(v35) = a10;
  *((_QWORD *)&v35 + 1) = a11;
  *(_OWORD *)((char *)v33 + 12) = a12;
  BYTE12(v33[1]) = a13 & 1;
  LOBYTE(v36[0]) = a14;
  outlined init with take of DialogSuppressionConfiguration?(a15, (uint64_t)v36 + 8);
  outlined init with copy of ConfirmationDialog((uint64_t)&v30, (uint64_t)v29);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of DialogSuppressionConfiguration?(a15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of DialogSuppressionConfiguration?);
  specialized Dictionary.subscript.setter((uint64_t)v29, a2);
  return outlined destroy of ConfirmationDialog((uint64_t)&v30);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *a1;
  result = outlined init with copy of ConfirmationDialog((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v3;
  return result;
}

{
  int v3;
  uint64_t result;

  v3 = *a1;
  result = outlined init with copy of InspectorStorage((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v3;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt32 v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  _BYTE v40[176];
  _BYTE v41[176];
  _BYTE v42[176];
  Swift::UInt32 v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v46 = a1;
  v47 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v48 = v8;
  v49 = 0;
  v50 = v11 & v9;
  v51 = a2;
  v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v43);
  if (!v45)
    goto LABEL_26;
  v12 = v43;
  outlined init with take of ConfirmationDialog((uint64_t)v44, (uint64_t)v42);
  v13 = *(_QWORD **)a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v22 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_DWORD *)(v22[6] + 4 * v15) = v12;
    outlined init with take of ConfirmationDialog((uint64_t)v42, v22[7] + 176 * v15);
    v23 = v22[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v22[2] = v25;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v43);
    while (v45)
    {
      v27 = v43;
      outlined init with take of ConfirmationDialog((uint64_t)v44, (uint64_t)v42);
      v28 = *(_QWORD **)a5;
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
      v31 = v28[2];
      v32 = (v30 & 1) == 0;
      v24 = __OFADD__(v31, v32);
      v33 = v31 + v32;
      if (v24)
        goto LABEL_27;
      v34 = v30;
      if (v28[3] < v33)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if ((v34 & 1) != (v35 & 1))
          goto LABEL_29;
      }
      if ((v34 & 1) != 0)
      {
        v26 = 176 * v29;
        outlined init with copy of ConfirmationDialog(*(_QWORD *)(*(_QWORD *)a5 + 56) + 176 * v29, (uint64_t)v40);
        outlined init with copy of ConfirmationDialog((uint64_t)v40, (uint64_t)v41);
        outlined destroy of ConfirmationDialog((uint64_t)v40);
        outlined destroy of ConfirmationDialog((uint64_t)v42);
        outlined assign with take of ConfirmationDialog((uint64_t)v41, *(_QWORD *)(*(_QWORD *)a5 + 56) + v26);
      }
      else
      {
        v36 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
        *(_DWORD *)(v36[6] + 4 * v29) = v27;
        outlined init with take of ConfirmationDialog((uint64_t)v42, v36[7] + 176 * v29);
        v37 = v36[2];
        v24 = __OFADD__(v37, 1);
        v38 = v37 + 1;
        if (v24)
          goto LABEL_28;
        v36[2] = v38;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v43);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(*(_QWORD *)a5 + 56) + 176 * v15, (uint64_t)v40);
    outlined init with copy of ConfirmationDialog((uint64_t)v40, (uint64_t)v41);
    outlined destroy of ConfirmationDialog((uint64_t)v40);
    outlined destroy of ConfirmationDialog((uint64_t)v42);
    outlined assign with take of ConfirmationDialog((uint64_t)v41, *(_QWORD *)(*(_QWORD *)a5 + 56) + 176 * v15);
    goto LABEL_16;
  }
LABEL_29:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[40];
  _BYTE v63[48];
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v82 = a5;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v75 = a1;
  v76 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v77 = v7;
  v78 = 0;
  v79 = v10 & v8;
  v80 = a2;
  v81 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
  v11 = v64;
  while (1)
  {
    if (v11 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return swift_release();
    }
    outlined init with take of ToolbarPlacement.Role((uint64_t)v63, (uint64_t)v62);
    v15 = v63[40];
    v58 = v64;
    v16 = v66;
    v17 = v67;
    v18 = v68;
    v53 = v69;
    v55 = v71;
    v57 = v70;
    v19 = v72;
    v60 = v73;
    v61 = v65;
    v59 = v74;
    v20 = *(_QWORD **)v82;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
    v23 = v20[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v20[3] >= v25)
    {
      if ((a4 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, a4 & 1);
      v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_35;
      v22 = v27;
    }
    v29 = *(_QWORD **)v82;
    if ((v26 & 1) != 0)
    {
      v49 = 80 * v22;
      v30 = v29[7] + 80 * v22;
      v32 = *(_QWORD *)(v30 + 8);
      v31 = *(_QWORD *)(v30 + 16);
      v33 = *(unsigned __int8 *)(v30 + 24);
      v52 = *(_QWORD *)(v30 + 32);
      v34 = *(_QWORD *)(v30 + 48);
      v35 = *(unsigned __int8 *)(v30 + 56);
      v36 = *(unsigned __int8 *)(v30 + 57);
      v50 = *(_BYTE *)(v30 + 58);
      v51 = *(_BYTE *)(v30 + 40);
      v37 = *(_QWORD *)(v30 + 64);
      v13 = *(unsigned __int8 *)(v30 + 72);
      if (*(_BYTE *)v30)
        v38 = *(_BYTE *)v30;
      else
        v38 = v15;
      v48 = v38;
      v39 = v31;
      if (!v31)
      {
        v39 = v61;
        swift_retain();
      }
      if (v33)
        v16 = v33;
      v40 = v53;
      if (!v35)
        v40 = v34;
      v54 = v40;
      v41 = v55;
      if (v36 != 2)
        v41 = v36;
      v56 = v41;
      v42 = v37;
      if (!v37)
      {
        v42 = v60;
        swift_retain();
      }
      v12 = v35 & v57;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      swift_release();
      if (!v13)
        LOBYTE(v13) = v59;
      outlined destroy of ToolbarPlacement.Role((uint64_t)v62);
      v14 = *(_QWORD *)(*(_QWORD *)v82 + 56) + v49;
      swift_release();
      swift_release();
      swift_release();
      *(_BYTE *)v14 = v48;
      *(_QWORD *)(v14 + 8) = v32;
      *(_QWORD *)(v14 + 16) = v39;
      *(_BYTE *)(v14 + 24) = v16;
      *(_QWORD *)(v14 + 32) = v52;
      *(_BYTE *)(v14 + 40) = v51;
      *(_QWORD *)(v14 + 48) = v54;
      *(_BYTE *)(v14 + 56) = v12;
      *(_BYTE *)(v14 + 57) = v56;
      *(_BYTE *)(v14 + 58) = v50;
      *(_QWORD *)(v14 + 64) = v42;
      *(_BYTE *)(v14 + 72) = v13;
    }
    else
    {
      v29[(v22 >> 6) + 8] |= 1 << v22;
      outlined init with take of ToolbarPlacement.Role((uint64_t)v62, v29[6] + 40 * v22);
      v43 = v29[7] + 80 * v22;
      *(_BYTE *)v43 = v15;
      *(_QWORD *)(v43 + 8) = v58;
      *(_QWORD *)(v43 + 16) = v61;
      *(_BYTE *)(v43 + 24) = v16;
      *(_QWORD *)(v43 + 32) = v17;
      *(_BYTE *)(v43 + 40) = v18;
      *(_QWORD *)(v43 + 48) = v53;
      *(_BYTE *)(v43 + 56) = v57;
      *(_BYTE *)(v43 + 57) = v55;
      *(_BYTE *)(v43 + 58) = v19;
      *(_QWORD *)(v43 + 64) = v60;
      *(_BYTE *)(v43 + 72) = v59;
      v44 = v29[2];
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
        goto LABEL_34;
      v29[2] = v46;
    }
    specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
    v11 = v64;
    a4 = 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v55 = a1;
  v56 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v57 = v8;
  v58 = 0;
  v59 = v11 & v9;
  v60 = a2;
  v61 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v51);
  if (!*((_QWORD *)&v52 + 1))
    goto LABEL_27;
  v48 = v51;
  v49 = v52;
  v12 = v54;
  v50 = v53;
  v13 = *(_QWORD **)a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v23 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v24 = v23[6] + 40 * v15;
    v25 = v48;
    v26 = v49;
    *(_QWORD *)(v24 + 32) = v50;
    *(_OWORD *)v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
    *(_QWORD *)(v23[7] + 8 * v15) = v12;
    v27 = v23[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v29;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v51);
    while (*((_QWORD *)&v52 + 1))
    {
      v48 = v51;
      v49 = v52;
      v31 = v54;
      v50 = v53;
      v32 = *(_QWORD **)a5;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_28;
      v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_30;
        v34 = v39;
      }
      if ((v38 & 1) != 0)
      {
        outlined destroy of AnyHashable((uint64_t)&v48);
        v30 = *(_QWORD *)(*(_QWORD *)a5 + 56);
        swift_release();
        *(_QWORD *)(v30 + 8 * v34) = v31;
      }
      else
      {
        v41 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = v41[6] + 40 * v34;
        v43 = v48;
        v44 = v49;
        *(_QWORD *)(v42 + 32) = v50;
        *(_OWORD *)v42 = v43;
        *(_OWORD *)(v42 + 16) = v44;
        *(_QWORD *)(v41[7] + 8 * v34) = v31;
        v45 = v41[2];
        v28 = __OFADD__(v45, 1);
        v46 = v45 + 1;
        if (v28)
          goto LABEL_29;
        v41[2] = v46;
      }
      specialized LazyMapSequence.Iterator.next()(&v51);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v48);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined destroy of AnyHashable((uint64_t)&v48);
    v22 = *(_QWORD *)(*(_QWORD *)a5 + 56);
    swift_release();
    *(_QWORD *)(v22 + 8 * v15) = v12;
    goto LABEL_16;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  _BYTE v40[96];
  _BYTE v41[96];
  uint64_t v42;
  _BYTE v43[88];
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v45 = a1;
  v46 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v47 = v8;
  v48 = 0;
  v49 = v11 & v9;
  v50 = a2;
  v51 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
  if (v44 == 255)
    goto LABEL_27;
  v12 = v42;
  outlined init with take of NavigationDestinationPresentation((uint64_t)v43, (uint64_t)v41);
  v13 = *(_QWORD **)a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v22 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v22[6] + 8 * v15) = v12;
    outlined init with take of NavigationDestinationPresentation((uint64_t)v41, v22[7] + 96 * v15);
    v23 = v22[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v22[2] = v25;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
    while (v44 != 255)
    {
      v26 = v42;
      outlined init with take of NavigationDestinationPresentation((uint64_t)v43, (uint64_t)v41);
      v27 = *(_QWORD **)a5;
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      v30 = v27[2];
      v31 = (v28 & 1) == 0;
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
        goto LABEL_28;
      v33 = v28;
      if (v27[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_30;
        v29 = v34;
      }
      if ((v33 & 1) != 0)
      {
        outlined init with copy of NavigationDestinationPresentation((uint64_t)v41, (uint64_t)v40);
        outlined destroy of NavigationDestinationPresentation((uint64_t)v41);
        outlined assign with take of NavigationDestinationPresentation((uint64_t)v40, *(_QWORD *)(*(_QWORD *)a5 + 56) + 96 * v29);
      }
      else
      {
        v36 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
        *(_QWORD *)(v36[6] + 8 * v29) = v26;
        outlined init with take of NavigationDestinationPresentation((uint64_t)v41, v36[7] + 96 * v29);
        v37 = v36[2];
        v24 = __OFADD__(v37, 1);
        v38 = v37 + 1;
        if (v24)
          goto LABEL_29;
        v36[2] = v38;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of NavigationDestinationPresentation((uint64_t)v41, (uint64_t)v40);
    outlined destroy of NavigationDestinationPresentation((uint64_t)v41);
    outlined assign with take of NavigationDestinationPresentation((uint64_t)v40, *(_QWORD *)(*(_QWORD *)a5 + 56) + 96 * v15);
    goto LABEL_16;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void partial apply for implicit closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)()
{
  implicit closure #1 in static ConfirmationDialogModifierCore._makeView(modifier:inputs:body:)();
}

_QWORD *outlined release of MakeConfirmationDialog<A, B>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[13];
  v3 = a1[14];
  v4 = a1[15];
  v5 = a1[16];
  v6 = a1[17];
  v7 = a1[18];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t outlined consume of DialogSuppressionConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    outlined consume of Text?(result, a2, a3, a4);
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for MakeConfirmationDialog()
{
  JUMPOUT(0x18D75FF28);
}

_QWORD *outlined retain of MakeConfirmationDialog<A, B>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[13];
  v3 = a1[14];
  v4 = a1[15];
  v5 = a1[16];
  v6 = a1[17];
  v7 = a1[18];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t outlined init with take of DialogSuppressionConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static ConfirmationDialog.PreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ConfirmationDialog(a2, a1);
  return a2;
}

uint64_t outlined destroy of ConfirmationDialog(uint64_t a1)
{
  destroy for ConfirmationDialog(a1);
  return a1;
}

uint64_t destroy for MakeConfirmationDialog(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (*(_QWORD *)(a1 + 144))
  {
    if (*(_QWORD *)(a1 + 128))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for MakeConfirmationDialog(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v8 = (_OWORD *)(a1 + 104);
  v9 = a2 + 104;
  v10 = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 128);
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 104);
      v13 = *(_QWORD *)(a2 + 112);
      v14 = *(_BYTE *)(a2 + 120);
      outlined copy of Text.Storage(v12, v13, v14);
      *(_QWORD *)(a1 + 104) = v12;
      *(_QWORD *)(a1 + 112) = v13;
      *(_BYTE *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      v16 = *(_OWORD *)(v9 + 16);
      *v8 = *(_OWORD *)v9;
      *(_OWORD *)(a1 + 120) = v16;
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v10;
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    swift_retain();
    swift_retain();
  }
  else
  {
    v15 = *(_OWORD *)(v9 + 16);
    *v8 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 120) = v15;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v9 + 32);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(v9 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for MakeConfirmationDialog(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v5 = (_OWORD *)(a1 + 104);
  v6 = (_OWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 128);
      if (*(_QWORD *)(a1 + 128))
      {
        if (v8)
        {
          v9 = *(_QWORD *)(a2 + 104);
          v10 = *(_QWORD *)(a2 + 112);
          v11 = *(_BYTE *)(a2 + 120);
          outlined copy of Text.Storage(v9, v10, v11);
          v12 = *(_QWORD *)(a1 + 104);
          v13 = *(_QWORD *)(a1 + 112);
          v14 = *(_BYTE *)(a1 + 120);
          *(_QWORD *)(a1 + 104) = v9;
          *(_QWORD *)(a1 + 112) = v10;
          *(_BYTE *)(a1 + 120) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 104);
          v27 = *(_OWORD *)(a2 + 120);
          *v5 = *v6;
          *(_OWORD *)(a1 + 120) = v27;
        }
      }
      else if (v8)
      {
        v21 = *(_QWORD *)(a2 + 104);
        v22 = *(_QWORD *)(a2 + 112);
        v23 = *(_BYTE *)(a2 + 120);
        outlined copy of Text.Storage(v21, v22, v23);
        *(_QWORD *)(a1 + 104) = v21;
        *(_QWORD *)(a1 + 112) = v22;
        *(_BYTE *)(a1 + 120) = v23;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 120);
        *v5 = *v6;
        *(_OWORD *)(a1 + 120) = v29;
      }
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 104);
      v19 = *(_OWORD *)(a2 + 120);
      v18 = *(_OWORD *)(a2 + 136);
      v20 = *v6;
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_OWORD *)(a1 + 120) = v19;
      *(_OWORD *)(a1 + 136) = v18;
      *v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(_QWORD *)(a2 + 128))
    {
      v15 = *(_QWORD *)(a2 + 104);
      v16 = *(_QWORD *)(a2 + 112);
      v17 = *(_BYTE *)(a2 + 120);
      outlined copy of Text.Storage(v15, v16, v17);
      *(_QWORD *)(a1 + 104) = v15;
      *(_QWORD *)(a1 + 112) = v16;
      *(_BYTE *)(a1 + 120) = v17;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 120);
      *v5 = *v6;
      *(_OWORD *)(a1 + 120) = v28;
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    swift_retain();
    swift_retain();
  }
  else
  {
    v24 = *v6;
    v25 = *(_OWORD *)(a2 + 120);
    v26 = *(_OWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v25;
    *(_OWORD *)(a1 + 136) = v26;
    *v5 = v24;
  }
  return a1;
}

uint64_t assignWithTake for MakeConfirmationDialog(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v6 = (_OWORD *)(a1 + 104);
  v7 = (_OWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 144))
  {
    v8 = *(_QWORD *)(a2 + 144);
    if (v8)
    {
      if (*(_QWORD *)(a1 + 128))
      {
        v9 = *(_QWORD *)(a2 + 128);
        if (v9)
        {
          v10 = *(_BYTE *)(a2 + 120);
          v11 = *(_QWORD *)(a1 + 104);
          v12 = *(_QWORD *)(a1 + 112);
          v13 = *(_BYTE *)(a1 + 120);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          *(_BYTE *)(a1 + 120) = v10;
          outlined consume of Text.Storage(v11, v12, v13);
          *(_QWORD *)(a1 + 128) = v9;
          swift_bridgeObjectRelease();
LABEL_10:
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          swift_release();
          *(_QWORD *)(a1 + 144) = v8;
          swift_release();
          *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
          return a1;
        }
        outlined destroy of Text(a1 + 104);
      }
      v15 = *(_OWORD *)(a2 + 120);
      *v6 = *v7;
      *(_OWORD *)(a1 + 120) = v15;
      goto LABEL_10;
    }
    outlined destroy of DialogSuppressionConfiguration(a1 + 104);
  }
  v14 = *(_OWORD *)(a2 + 120);
  *v6 = *v7;
  *(_OWORD *)(a1 + 120) = v14;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeConfirmationDialog(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeConfirmationDialog(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in MakeConfirmationDialog<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>, (uint64_t)&type metadata for DialogColorSchemeKey, (uint64_t)&protocol witness table for DialogColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, (uint64_t)&type metadata for EnvironmentValues.DialogSeverityKey, (uint64_t)&protocol witness table for EnvironmentValues.DialogSeverityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>, (uint64_t)&type metadata for DialogSuppressionConfiguration.Key, (uint64_t)&protocol witness table for DialogSuppressionConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void sub_18726CF18()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

uint64_t sub_18726CF60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (((((((((*(_QWORD *)(v4 + 64) + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 51) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 25) & 0xFFFFFFFFFFFFFFF8;
  v7 = v2 + v5;
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_BYTE *)(v7 + 48));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v7 + *(int *)(a1 + 64), v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7 + *(int *)(a1 + 68));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v8 = v2 + v6;
  if (*(_QWORD *)(v2 + v6 + 40))
  {
    if (*(_QWORD *)(v8 + 24))
    {
      outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

void partial apply for closure #2 in MakeConfirmationDialog.updateValue()()
{
  type metadata accessor for ConfirmationDialogModifierCore();
}

uint64_t sub_18726D0D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = (v6 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + 51) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)(v2 + v5);
  v10 = (v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in MakeConfirmationDialog.updateValue()(v1, *(_DWORD *)(v2 + 48), v2 + v4, v9, *(_DWORD *)(v2 + v6), *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_BYTE *)(v2 + v7 + 16), *(_QWORD *)(v2 + ((v6 + 35) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v2 + ((v6 + 35) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + v8), *(_OWORD *)(v2 + v10), *(_BYTE *)(v2 + v10 + 16), *(_BYTE *)(v2 + v10 + 17), v2 + ((v10 + 25) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t outlined retain of DialogSuppressionConfiguration?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t outlined destroy of ConfirmationDialog?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for TokenFieldStyle.Body : View in AutomaticTokenFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AutomaticTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)@<X0>(uint64_t *@<X8>);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  v3 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v32 = (uint64_t)&v30 - v13;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  v14 = &v10[*(int *)(v7 + 72)];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  v15 = &v6[*(int *)(v3 + 28)];
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  v19 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v10[*(int *)(v7 + 68)];
  *v19 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSItemProvider?);
  v19[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v18;
  v20 = (uint64_t *)&v6[*(int *)(v3 + 24)];
  v21 = *v20;
  v22 = v20[1];
  v24 = v20[2];
  v23 = v20[3];
  v26 = *(_QWORD *)v14;
  v25 = *((_QWORD *)v14 + 1);
  v27 = *((_QWORD *)v14 + 2);
  v30 = *((_QWORD *)v14 + 3);
  v31 = v25;
  swift_retain();
  outlined copy of Text?(v21, v22, v24, v23);
  outlined consume of Text?(v26, v31, v27, v30);
  *(_QWORD *)v14 = v21;
  *((_QWORD *)v14 + 1) = v22;
  *((_QWORD *)v14 + 2) = v24;
  *((_QWORD *)v14 + 3) = v23;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  v28 = v32;
  outlined init with take of TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>((uint64_t)v10, v32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, v33, (uint64_t (*)(_QWORD))type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>);
}

uint64_t type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>;
  if (!lazy cache variable for type metadata for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>)
  {
    lazy protocol witness table accessor for type AnyToken and conformance AnyToken();
    type metadata accessor for TokenField();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyToken and conformance AnyToken()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyToken and conformance AnyToken;
  if (!lazy protocol witness table cache variable for type AnyToken and conformance AnyToken)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyToken, &type metadata for AnyToken);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyToken and conformance AnyToken);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyToken and conformance AnyToken;
  if (!lazy protocol witness table cache variable for type AnyToken and conformance AnyToken)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyToken, &type metadata for AnyToken);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyToken and conformance AnyToken);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyToken and conformance AnyToken;
  if (!lazy protocol witness table cache variable for type AnyToken and conformance AnyToken)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyToken, &type metadata for AnyToken);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyToken and conformance AnyToken);
  }
  return result;
}

uint64_t sub_18726D56C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AutomaticTokenFieldStyle()
{
  return &type metadata for AutomaticTokenFieldStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>();
    v3[1] = &protocol witness table for TokenFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>)
  {
    type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
    type metadata accessor for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>, TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>>);
  }
}

void type metadata accessor for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>)
  {
    v2 = lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle();
    v4 = type metadata accessor for TokenFieldStyleModifier(a1, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle;
  if (!lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldConfigurationTokenFieldStyle, &type metadata for SearchFieldConfigurationTokenFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>;
  if (!lazy protocol witness table cache variable for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>)
  {
    v1 = type metadata accessor for TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenField<TokenFieldConfiguration.Label, AnyToken, AnyView> and conformance TokenField<A, B, C>);
  }
  return result;
}

uint64_t TabContent.customizationBehavior(_:for:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[8];
  uint64_t v6;

  v5[0] = *a1;
  v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for CustomizationBehaviorModifier, a4);
}

{
  _BYTE v5[8];
  uint64_t v6;

  v5[0] = *a1;
  v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for CustomizationBehaviorModifier, a4);
}

uint64_t TabContent.customizationID(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&unk_1E1AE0EE0, a4);
}

void static TabCustomizationBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static TabCustomizationBehavior.reorderable.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static TabCustomizationBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static TabCustomizationBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for TabCustomizationBehavior()
{
  return &type metadata for TabCustomizationBehavior;
}

uint64_t sub_18726D88C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for CustomizationBehaviorModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier, a4);
}

unint64_t lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier;
  if (!lazy protocol witness table cache variable for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomizationBehaviorModifier, &type metadata for CustomizationBehaviorModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
  }
  return result;
}

uint64_t sub_18726D8E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&unk_1E1AE0EE0, (uint64_t (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier, a4);
}

uint64_t get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = a1[1];
  v6 = type metadata accessor for ModifiedTabContent(255, *a1, a2, a4);
  v8[0] = v5;
  v8[1] = a3();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v6, v8);
}

unint64_t lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomizationIDModifier and conformance CustomizationIDModifier;
  if (!lazy protocol witness table cache variable for type CustomizationIDModifier and conformance CustomizationIDModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomizationIDModifier, &unk_1E1AE0EE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationIDModifier and conformance CustomizationIDModifier);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomizationBehaviorModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CustomizationBehaviorModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CustomizationBehaviorModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CustomizationBehaviorModifier()
{
  return &type metadata for CustomizationBehaviorModifier;
}

{
  return &type metadata for CustomizationBehaviorModifier;
}

uint64_t storeEnumTagSinglePayload for TabCustomizationBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18726DAA8 + 4 * byte_187C1A325[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18726DADC + 4 * asc_187C1A320[v4]))();
}

uint64_t sub_18726DADC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18726DAE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18726DAECLL);
  return result;
}

uint64_t sub_18726DAF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18726DB00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18726DB04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18726DB0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabCustomizationBehavior.Role()
{
  return &type metadata for TabCustomizationBehavior.Role;
}

void *type metadata accessor for CustomizationIDModifier()
{
  return &unk_1E1AE0EE0;
}

unint64_t lazy protocol witness table accessor for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role;
  if (!lazy protocol witness table cache variable for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabCustomizationBehavior.Role, &type metadata for TabCustomizationBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabCustomizationBehavior.Role and conformance TabCustomizationBehavior.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomizationIDModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in CustomizationBehaviorModifier.body(content:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = a3 + 32;
    while (*(_BYTE *)(v5 + v4) == 1)
    {
      if (v3 == ++v4)
        goto LABEL_7;
    }
    *(_BYTE *)(result + 26) = a2;
LABEL_7:
    for (i = 0; ; ++i)
    {
      v7 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (*(_BYTE *)(v5 + i))
      {
        *(_BYTE *)(result + 25) = a2;
        return result;
      }
      if (v7 == v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance CustomizationBehaviorModifier()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationBehaviorModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationBehaviorModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
  swift_bridgeObjectRetain();
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance CustomizationIDModifier()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  v1 = v0[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationIDModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationIDModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationIDModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier);
  swift_bridgeObjectRetain();
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CustomizationBehaviorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18726DDC0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomizationBehaviorModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CustomizationBehaviorModifier.body(content:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CustomizationIDModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  swift_bridgeObjectRetain();
  result = outlined consume of TabCustomizationID?(v5, v6, v7);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18726DEE0(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationBehaviorModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier, (uint64_t)&type metadata for CustomizationBehaviorModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t sub_18726DF04(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<CustomizationIDModifier>, (void (*)(void))lazy protocol witness table accessor for type CustomizationIDModifier and conformance CustomizationIDModifier, (uint64_t)&unk_1E1AE0EE0, &lazy protocol witness table cache variable for type _ViewModifier_Content<CustomizationIDModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4, unint64_t *a5)
{
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, a2, a3);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(a5, a2, a3);
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of ControlWidget.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ControlWidget.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t PageViewWrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v9[0] = static Alignment.bottom.getter();
  v9[1] = v5;
  closure #1 in PageViewWrapper.body.getter(v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v6, (uint64_t)&v10);
  PageViewWrapper.toolbarModifier.getter(a1, (uint64_t)&v11);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>);
  *(_QWORD *)(a2 + 496) = KeyPath;
  *(_BYTE *)(a2 + 504) = 4;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>);
}

uint64_t closure #1 in PageViewWrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[176];
  _BYTE v19[80];
  _OWORD v20[11];
  _QWORD v21[3];
  uint64_t v22;

  v9 = type metadata accessor for PageViewWrapper(0, a2, a3, a4);
  v11 = PageViewWrapper.selectedIndex.getter(v9, v10);
  v13 = v12;
  v15 = v14;
  outlined init with copy of _VariadicView_Children(a1 + 48, (uint64_t)&v22);
  v21[0] = v11;
  v21[1] = v13;
  v21[2] = v15;
  closure #1 in closure #1 in PageViewWrapper.body.getter(a1, a2, a3, v16, v20);
  outlined init with copy of UIKitPagingView((uint64_t)v21, (uint64_t)v19);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  outlined init with copy of UIKitPagingView((uint64_t)v19, a5);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, a5 + 80, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  outlined destroy of UIKitPagingView((uint64_t)v21);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
  return outlined destroy of UIKitPagingView((uint64_t)v19);
}

uint64_t PageViewWrapper.selectedIndex.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t KeyPath;
  __int128 v27;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  _QWORD v36[2];
  _BYTE v37[32];
  __int128 v38;
  uint64_t v39;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v8 + 16);
  type metadata accessor for Binding();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = &v29[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v11 + 16))(&v29[-v14], v3 + *(int *)(a1 + 40), v10, v13);
  v16 = *(_QWORD *)(a1 + 24);
  outlined init with copy of _VariadicView_Children(v3 + 48, (uint64_t)v37);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v9;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = *(_OWORD *)&v37[16];
  *(_OWORD *)(v17 + 32) = *(_OWORD *)v37;
  *(_OWORD *)(v17 + 48) = v18;
  *(_OWORD *)(v17 + 64) = v38;
  *(_QWORD *)(v17 + 80) = v39;
  v30 = v9;
  v31 = v16;
  v32 = partial apply for implicit closure #2 in implicit closure #1 in PageViewWrapper.selectedIndex.getter;
  v33 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>), (uint64_t)v29, MEMORY[0x1E0DEDCE8], v19, v20, (uint64_t)v36);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v15, v10);
  swift_release();
  v22 = v36[0];
  v21 = v36[1];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a1);
  if (!v21)
  {
    v23 = MEMORY[0x1E0DEC198];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    outlined init with copy of _VariadicView_Children((uint64_t)(v7 + 48), (uint64_t)v34);
    type metadata accessor for ChildIndexProjection();
    v24 = swift_allocObject();
    v25 = v34[1];
    *(_OWORD *)(v24 + 16) = v34[0];
    *(_OWORD *)(v24 + 32) = v25;
    *(_OWORD *)(v24 + 48) = v34[2];
    *(_QWORD *)(v24 + 64) = v35;
    v22 = specialized Binding.projecting<A>(_:)(v24);
    swift_release();
    outlined destroy of TableRowList?((uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for Binding<AnyHashable>, v23, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a1);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)&v34[0] = 0;
  swift_retain();
  swift_retain();
  BindingOperations.NilCoalescing.init(defaultValue:)();
  v27 = *(_OWORD *)v37;
  *(_QWORD *)v37 = KeyPath;
  *(_OWORD *)&v37[8] = v27;
  type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>, MEMORY[0x1E0CE41C8]);
  swift_retain();
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release_n();
  swift_release_n();
  return v22;
}

uint64_t closure #1 in closure #1 in PageViewWrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[26];
  _OWORD v23[8];
  __int128 v24;
  _BYTE v25[25];

  result = type metadata accessor for PageViewWrapper(0, a2, a3, a4);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) == 2)
  {
    *(_OWORD *)((char *)a5 + 153) = 0u;
    a5[8] = 0u;
    a5[9] = 0u;
    a5[6] = 0u;
    a5[7] = 0u;
    a5[4] = 0u;
    a5[5] = 0u;
    a5[2] = 0u;
    a5[3] = 0u;
    *a5 = 0u;
    a5[1] = 0u;
  }
  else
  {
    PageViewWrapper.indexView.getter(result, v8, (uint64_t)v22);
    EdgeInsets.init(_all:)();
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v22, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>);
    LOBYTE(v24) = 4;
    *((_QWORD *)&v24 + 1) = v10;
    *(_QWORD *)v25 = v12;
    *(_QWORD *)&v25[8] = v14;
    *(_QWORD *)&v25[16] = v16;
    v25[24] = 0;
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>);
    v17 = *(_OWORD *)v25;
    a5[8] = v24;
    a5[9] = v17;
    *(_OWORD *)((char *)a5 + 153) = *(_OWORD *)&v25[9];
    v18 = v23[5];
    a5[4] = v23[4];
    a5[5] = v18;
    v19 = v23[7];
    a5[6] = v23[6];
    a5[7] = v19;
    v20 = v23[1];
    *a5 = v23[0];
    a5[1] = v20;
    v21 = v23[3];
    a5[2] = v23[2];
    a5[3] = v21;
  }
  return result;
}

uint64_t PageViewWrapper.indexView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  char v12;
  _QWORD v14[11];
  char v15;
  _QWORD v16[3];
  _QWORD v17[10];
  char v18;

  v6 = PageViewWrapper.selectedIndex.getter(a1, a2);
  v8 = v7;
  v10 = v9;
  outlined init with copy of _VariadicView_Children(v3 + 48, (uint64_t)v17);
  v16[0] = v6;
  v16[1] = v8;
  v16[2] = v10;
  KeyPath = swift_getKeyPath();
  v12 = *(_BYTE *)(v3 + *(int *)(a1 + 44));
  outlined init with copy of IndexView((uint64_t)v16, (uint64_t)v14);
  v14[10] = KeyPath;
  v15 = v12;
  outlined destroy of IndexView((uint64_t)v16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
  v17[9] = -1;
  v18 = 4;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
  specialized View.accessibility<A>(_:_:isEnabled:)(0xBFF0000000000000, 0, 1, a3);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>);
}

uint64_t PageViewWrapper.toolbarModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v5[2];
  _BYTE v6[208];

  v5[0] = 0;
  v5[1] = 0;
  memset(&v6[184], 0, 24);
  closure #1 in PageViewWrapper.toolbarModifier.getter(v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)v6);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v5, a2, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>);
}

double closure #1 in PageViewWrapper.toolbarModifier.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[3];
  _OWORD v16[8];
  char v17;
  _BYTE v18[48];
  _BYTE v19[48];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  if (one-time initialization token for status != -1)
    swift_once();
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.status, (uint64_t)v19);
  outlined init with copy of ToolbarItemPlacement((uint64_t)v19, (uint64_t)v18);
  outlined init with copy of ToolbarItemPlacement((uint64_t)v18, (uint64_t)v15);
  v17 = 0;
  closure #1 in closure #1 in PageViewWrapper.toolbarModifier.getter(a1, a2, a3, v8, &v20);
  outlined destroy of ToolbarItemPlacement((uint64_t)v18);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?((uint64_t)&v20, (uint64_t)v16);
  v28 = v16[5];
  v29 = v16[6];
  v30 = v16[7];
  v31 = v17;
  v24 = v16[1];
  v25 = v16[2];
  v26 = v16[3];
  v27 = v16[4];
  v20 = v15[0];
  v21 = v15[1];
  v22 = v15[2];
  v23 = v16[0];
  outlined destroy of ToolbarItemPlacement((uint64_t)v19);
  v9 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v9;
  *(_OWORD *)(a4 + 160) = v30;
  *(_BYTE *)(a4 + 176) = v31;
  v10 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v10;
  v11 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v11;
  v12 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v12;
  result = *(double *)&v22;
  v14 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v14;
  return result;
}

uint64_t closure #1 in closure #1 in PageViewWrapper.toolbarModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for PageViewWrapper(0, a2, a3, a4);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) != 2)
    return PageViewWrapper.indexView.getter(result, v8, (uint64_t)a5);
  a5[6] = 0u;
  a5[7] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  return result;
}

uint64_t PageViewWrapper.init(children:selection:displayMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[40];

  v11 = *a3;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v18, a6);
  *(_QWORD *)(a6 + 40) = 0;
  outlined destroy of AnyHashable((uint64_t)v18);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a6 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(a6 + 64) = v12;
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a6 + 96) = *(_QWORD *)(a1 + 48);
  v14 = type metadata accessor for PageViewWrapper(0, a4, a5, v13);
  v15 = a6 + *(int *)(v14 + 40);
  type metadata accessor for Binding();
  v16 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a2, v16);
  *(_BYTE *)(a6 + *(int *)(v14 + 44)) = v11;
  return result;
}

id UIKitPagingView.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t ObjCClassFromMetadata;
  void *v8;
  void *v9;
  id v10;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PagingLayout()), sel_init);
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PagingCollectionView()), sel_initWithFrame_collectionViewLayout_, v2, 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v3, sel__setShouldSkipForcedLayoutBeforeBatchUpdates_, 1);
  v4 = (void *)objc_opt_self();
  v5 = v3;
  v6 = objc_msgSend(v4, sel_clearColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v6);

  objc_msgSend(v5, sel_setShowsHorizontalScrollIndicator_, 0);
  objc_msgSend(v5, sel_setDataSource_, v1);
  objc_msgSend(v5, sel_setDelegate_, v1);
  objc_msgSend(v5, sel_setPagingEnabled_, 1);
  type metadata accessor for UIKitPagingCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = (void *)MEMORY[0x18D75CC88](0xD00000000000001CLL, 0x8000000187BDB0A0);
  objc_msgSend(v5, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v8);

  v9 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView) = v5;
  v10 = v5;

  return v10;
}

void UIKitPagingView.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _QWORD v19[7];
  unsigned __int8 v20;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 **)(a2 + 40);
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    swift_retain();
    v8 = v7;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    v9 = v8;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);

  }
  else
  {
    v19[0] = *(_QWORD *)(a2 + 16);
    v19[1] = v6;
    v10 = v7;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 0);
  }
  EnvironmentValues.layoutDirection.getter();
  swift_release();
  swift_release();
  v11 = v20;
  v12 = v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection];
  v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection] = v20;
  if (v11 != v12)
  {
    v13 = &v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    *(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex] = -1;
  }
  outlined init with copy of _VariadicView_Children((uint64_t)(v2 + 3), (uint64_t)v19);
  v15 = (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children];
  swift_beginAccess();
  outlined assign with take of _VariadicView_Children((uint64_t)v19, v15);
  swift_endAccess();
  Coordinator.updateDataSourceIfNeeded(_:)();
  v16 = v3[1];
  v17 = v3[2];
  v18 = &v7[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex];
  *(_QWORD *)v18 = *v3;
  *((_QWORD *)v18 + 1) = v16;
  *((_QWORD *)v18 + 2) = v17;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_retain();
  LOBYTE(v16) = Transaction.isPageScrollAnimated.getter();
  swift_release();
  Coordinator.scroll(_:isAnimated:)(a1, v16 & 1);

}

void UIKitPagingView._identifiedViewTree(in:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int8x16_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  int8x16_t v28[10];
  char v29;
  __int128 v30;
  uint64_t v31;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *((_QWORD *)v2 + 2);
  v30 = *v2;
  v31 = v10;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v28);
  MEMORY[0x18D754BAC](v28[0].i64[0], 0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v12 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v12)
  {
    type metadata accessor for UIKitPagingCell();
    v13 = swift_dynamicCastClass();
    if (v13
      && (v17 = *(void **)(v13 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host)) != 0)
    {
      type metadata accessor for _UIHostingView<_ViewList_View>(0, v14, v15, v16);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
      v18 = v17;
      ViewRendererHost.preferenceValue<A>(_:)();
      outlined init with copy of _IdentifiedViewTree((uint64_t)&v30, (uint64_t)v28);
      if (v29 != 2
        || (v19 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v28[2], v28[6]), vorrq_s8(v28[4], v28[8])), vorrq_s8(vorrq_s8(v28[3], v28[7]), vorrq_s8(v28[5], v28[9]))), vorrq_s8(v28[0], v28[1])), *(_QWORD *)&vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v28);
        outlined init with copy of _IdentifiedViewTree((uint64_t)&v30, (uint64_t)v28);
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
        v22 = *((_QWORD *)v20 + 2);
        v21 = *((_QWORD *)v20 + 3);
        v23 = v22 + 1;
        if (v22 >= v21 >> 1)
        {
          v27 = v22 + 1;
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
          v23 = v27;
          v20 = v25;
        }
        *((_QWORD *)v20 + 2) = v23;
        outlined init with take of _IdentifiedViewTree((__int128 *)v28[0].i8, (uint64_t)&v20[168 * v22 + 32]);

        outlined destroy of _IdentifiedViewTree((uint64_t)&v30);
        if (!*((_QWORD *)v20 + 2))
          goto LABEL_9;
LABEL_12:
        v24 = 1;
        goto LABEL_13;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)&v30);

      outlined destroy of _IdentifiedViewTree((uint64_t)v28);
    }
    else
    {

    }
  }
  v20 = (char *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_12;
LABEL_9:
  swift_bridgeObjectRelease();
  v20 = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v24 = 2;
  *(_OWORD *)(a2 + 8) = 0u;
LABEL_13:
  *(_QWORD *)a2 = v20;
  *(_BYTE *)(a2 + 160) = v24;
}

void UIKitPagingView._overrideSizeThatFits(_:in:uiView:)(double *a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  double v19;

  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    v5 = UIKitPagingView.layoutTraitsHost(for:)(a3);
    if (v5)
    {
      v9 = v5;
      type metadata accessor for _UIHostingView<_ViewList_View>(0, v6, v7, v8);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
      ViewRendererHost.sizeThatFits(_:)();
      v11 = v10;
      v13 = v12;
      v14 = COERCE_DOUBLE(_ProposedSize.width.getter());
      if ((v15 & 1) != 0)
        v14 = 0.0;
      if (v11 > v14)
        v14 = v11;
      *a1 = v14;
      *(double *)&v16 = COERCE_DOUBLE(_ProposedSize.height.getter());
      v18 = v17;

      v19 = *(double *)&v16;
      if ((v18 & 1) != 0)
        v19 = 0.0;
      if (v13 > v19)
        v19 = v13;
      a1[1] = v19;
    }
  }
}

_QWORD *UIKitPagingView.layoutTraitsHost(for:)(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Class isa;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  id v18;
  _QWORD v21[11];
  __int128 v22;
  uint64_t v23;

  v3 = type metadata accessor for IndexPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *((_QWORD *)v1 + 2);
  v22 = *v1;
  v23 = v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v21);
  MEMORY[0x18D754BAC](v21[0], 0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v10 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v10)
  {
    type metadata accessor for UIKitPagingCell();
    v11 = swift_dynamicCastClass();
    if (v11)
    {
      v12 = *(_QWORD **)(v11 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host);
      v13 = v12;

      if (v12)
        return v12;
    }
    else
    {

    }
  }
  if (!_VariadicView_Children.endIndex.getter())
    return 0;
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _ViewList_View((uint64_t)&v22, (uint64_t)v21);
  type metadata accessor for _UIHostingView<_ViewList_View>(0, v14, v15, v16);
  v18 = objc_allocWithZone(v17);
  v12 = specialized _UIHostingView.init(rootView:)((uint64_t)v21);
  outlined destroy of _VariadicView_Children.Element((uint64_t)&v22);
  return v12;
}

void UIKitPagingView._overrideLayoutTraits(_:for:)(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    v3 = UIKitPagingView.layoutTraitsHost(for:)(a2);
    if (v3)
    {
      v7 = v3;
      static _ProposedSize.unspecified.getter();
      type metadata accessor for _UIHostingView<_ViewList_View>(0, v4, v5, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
      ViewRendererHost.sizeThatFits(_:)();
      _LayoutTraits.minSize.setter();
      _LayoutTraits.maxSize.setter();
      _LayoutTraits.idealSize.setter();

    }
  }
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitPagingView@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t result;
  char v9;
  _BYTE v10[56];

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  outlined init with copy of _VariadicView_Children((uint64_t)(v1 + 3), (uint64_t)v10);
  v9 = 0;
  v6 = objc_allocWithZone((Class)type metadata accessor for Coordinator());
  swift_retain();
  swift_retain();
  v7 = specialized Coordinator.init(selectedIndex:children:layoutDirection:)(v3, v4, v5, (uint64_t)v10, &v9);
  swift_release();
  result = swift_release();
  *a1 = v7;
  return result;
}

uint64_t PagingLayout.layoutAttributesForElements(in:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t i;
  objc_super v15;

  v15.receiver = v4;
  v15.super_class = (Class)swift_getObjectType();
  v9 = objc_msgSendSuper2(&v15, sel_layoutAttributesForElementsInRect_, a1, a2, a3, a4);
  if (!v9)
    return 0;
  v10 = v9;
  type metadata accessor for UICollectionViewLayoutAttributes();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v12)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v12 = result;
  if (!result)
    goto LABEL_11;
LABEL_4:
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
      {
        MEMORY[0x18D75E3BC](i, v11);
        swift_unknownObjectRelease();
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PagingLayout()
{
  return objc_opt_self();
}

uint64_t Coordinator.updateDataSourceIfNeeded(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9[7];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
  swift_beginAccess();
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)v9);
  v3 = _ViewList_Backing.ids.getter();
  outlined destroy of _ViewList_Backing((uint64_t)v9);
  v4 = OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs;
  v5 = swift_bridgeObjectRetain();
  v6 = specialized static Array<A>.== infix(_:_:)(v5, v3);
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    v7 = *(_QWORD *)(v1 + v4);
    v9[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized CollectionChanges.formChanges<A, B>(from:to:)(v7, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    PagingCollectionView.apply(changes:newIDs:)(v9[0], v3);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t Coordinator.updateContents(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  id v20;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v2 = type metadata accessor for IndexPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v22 - v11;
  v24 = a1;
  v13 = objc_msgSend(a1, sel_indexPathsForVisibleItems, v10);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = *(_QWORD *)(v14 + 16);
  v22 = v14;
  if (v15)
  {
    v16 = v14 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v17(v12, v16, v2);
    while (1)
    {
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v18(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v20 = objc_msgSend(v24, sel_cellForItemAtIndexPath_, isa, v22);

      if (v20)
      {
        Coordinator.configureCell(_:at:)(v20);

      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v16 += v23;
      if (!--v15)
        goto LABEL_9;
      v17(v12, v16, v2);
    }
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_9:
    v18(v12, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t Coordinator.scroll(_:isAnimated:)(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  Class isa;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  _QWORD *v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v3 = v2;
  v45 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v42 - v7;
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex);
  v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex + 8) == 1)
  {
    v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
    v46 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
    v47 = v16;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v15 = &v48;
    MEMORY[0x18D75B9C8](&v48);
  }
  MEMORY[0x18D754BAC](*v15, 0);
  v17 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v17(v8, v13, v9);
  v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  v44(v8, 0, 1, v9);
  v18 = (uint64_t)a1
      + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastScrolledIndexPath;
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v8, v18);
  swift_endAccess();
  v19 = v14;
  if (*((_BYTE *)v14 + 8) == 1)
  {
    v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
    v46 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
    v47 = v20;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v19 = &v48;
    MEMORY[0x18D75B9C8](&v48);
  }
  v21 = *v19;
  v43 = OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex;
  if (v21 != *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex))
  {
    if (*((_BYTE *)v14 + 8) == 1)
    {
      v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
      v46 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
      v47 = v22;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v14 = &v48;
      MEMORY[0x18D75B9C8](&v48);
    }
    v23 = *v14;
    v24 = v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex;
    *(_QWORD *)v24 = v23;
    *(_BYTE *)(v24 + 8) = 0;
    objc_msgSend(a1, sel_contentOffset);
    v26 = v25;
    v28 = v27;
    v29 = objc_msgSend(a1, sel_window);

    if (v29)
    {
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, isa, 16, v45 & 1);

    }
    else
    {
      v17(v8, v13, v9);
      v44(v8, 0, 1, v9);
      v31 = (uint64_t)a1
          + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_pendingIndexPath;
      swift_beginAccess();
      outlined assign with take of IndexPath?((uint64_t)v8, v31);
      swift_endAccess();
    }
    objc_msgSend(a1, sel_contentOffset);
    if (v33 == v26 && v32 == v28)
    {
      objc_msgSend(a1, sel_contentOffset);
      v35 = v34;
      v37 = v36;
      objc_msgSend(a1, sel_bounds);
      Coordinator.index(at:in:)(v35, v37, v38);
      if ((v40 & 1) == 0)
      {
        *(_QWORD *)(v3 + v43) = v39;
        if ((*(_BYTE *)(v24 + 8) & 1) == 0 && *(_QWORD **)v24 == v39)
        {
          *(_QWORD *)v24 = 0;
          *(_BYTE *)(v24 + 8) = 1;
        }
        Coordinator.updateSelectedIndex(newIndex:)(v39);
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void Coordinator.index(at:in:)(double a1, double a2, double a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[56];

  if (a3 > 0.0)
  {
    v4 = round(a1 / a3);
    if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
    {
      if (v4 > -9.22337204e18)
      {
        if (v4 < 9.22337204e18)
        {
          v5 = (uint64_t)v4;
          if (*(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection) != 1)
            return;
          v6 = v3 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
          swift_beginAccess();
          outlined init with copy of _VariadicView_Children(v6, (uint64_t)v9);
          v7 = _VariadicView_Children.endIndex.getter();
          if ((_VariadicView_Children.endIndex.getter() & 0x8000000000000000) == 0)
          {
            v8 = _VariadicView_Children.endIndex.getter();
            if ((v7 & 0x8000000000000000) == 0 && v8 >= v7)
            {
              outlined destroy of _VariadicView_Children((uint64_t)v9);
              if (!__OFSUB__(v7 - 1, v5))
                return;
LABEL_16:
              __break(1u);
              return;
            }
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t @objc Coordinator.collectionView(_:willDisplay:forItemAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v10 = type metadata accessor for IndexPath();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = a3;
  v16 = a4;
  v17 = a1;
  a6(v16, v14);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

void Coordinator.scrollViewDidScroll(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  CGRect v14;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView);
  if (v2)
  {
    v3 = v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize;
    if ((*(_BYTE *)(v3 + 16) & 1) == 0)
    {
      v5 = *(double *)v3;
      objc_msgSend(a1, sel_bounds);
      if (v5 == CGRectGetWidth(v14))
      {
        objc_msgSend(a1, sel_contentOffset);
        v7 = v6;
        v9 = v8;
        objc_msgSend(a1, sel_bounds);
        Coordinator.index(at:in:)(v7, v9, v10);
        if ((v12 & 1) == 0)
        {
          *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex) = v11;
          v13 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex;
          if ((*(_BYTE *)(v1
                         + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex
                         + 8) & 1) == 0
            && *(_QWORD **)v13 == v11)
          {
            *(_QWORD *)v13 = 0;
            *(_BYTE *)(v13 + 8) = 1;
          }
          Coordinator.updateSelectedIndex(newIndex:)(v11);
        }
      }
    }
  }
}

void Coordinator.configureCell(_:at:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  id v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  id v44;
  _WORD v45[44];
  _BYTE v46[96];
  _BYTE v47[88];

  type metadata accessor for UIKitPagingCell();
  v3 = swift_dynamicCastClass();
  if (!v3)
    return;
  v4 = (char *)v3;
  v5 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
  swift_beginAccess();
  outlined init with copy of _VariadicView_Children(v5, (uint64_t)v46);
  v6 = a1;
  v7 = _VariadicView_Children.endIndex.getter();
  if (_VariadicView_Children.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  v8 = _VariadicView_Children.endIndex.getter();
  if (v7 < 0 || v8 < v7)
    goto LABEL_16;
  outlined destroy of _VariadicView_Children((uint64_t)v46);
  v9 = IndexPath.item.getter();
  if ((v9 & 0x8000000000000000) != 0 || v9 >= v7)
  {

  }
  else
  {
    outlined init with copy of _VariadicView_Children(v5, (uint64_t)v45);
    IndexPath.item.getter();
    _VariadicView_Children.subscript.getter();
    outlined destroy of _VariadicView_Children((uint64_t)v45);
    outlined init with copy of _ViewList_View((uint64_t)v46, (uint64_t)v47);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v46);
    v10 = OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host;
    v11 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host];
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v4, sel_contentView);
      objc_msgSend(v13, sel_bounds);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;

      objc_msgSend(v12, sel_setFrame_, v15, v17, v19, v21);
      outlined init with copy of _ViewList_View((uint64_t)v47, (uint64_t)v46);
      outlined init with copy of _ViewList_View((uint64_t)v46, (uint64_t)v45);
      v22 = (uint64_t)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0x60);
      swift_beginAccess();
      outlined assign with take of _ViewList_View((uint64_t)v45, v22);
      swift_endAccess();
      v45[0] = 1;
      type metadata accessor for _UIHostingView<_ViewList_View>(0, v23, v24, v25);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of _ViewList_View((uint64_t)v46);

    }
    else
    {
      outlined init with copy of _ViewList_View((uint64_t)v47, (uint64_t)v46);
      type metadata accessor for _UIHostingView<_ViewList_View>(0, v26, v27, v28);
      v30 = objc_allocWithZone(v29);
      v31 = specialized _UIHostingView.init(rootView:)((uint64_t)v46);
      v32 = *(void **)&v4[v10];
      *(_QWORD *)&v4[v10] = v31;
      v33 = v31;

      v34 = *(_QWORD **)&v4[v10];
      if (v34)
      {
        *(_QWORD *)((char *)v34 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x240) + 8) = &protocol witness table for UIKitPagingCell;
        swift_unknownObjectWeakAssign();
      }
      v35 = objc_msgSend(v4, sel_contentView);
      objc_msgSend(v35, sel_bounds);
      v37 = v36;
      v39 = v38;
      v41 = v40;
      v43 = v42;

      objc_msgSend(v33, sel_setFrame_, v37, v39, v41, v43);
      objc_msgSend(v33, sel_setAutoresizingMask_, 18);
      v44 = objc_msgSend(v4, sel_contentView);
      objc_msgSend(v44, sel_addSubview_, v33);

    }
    outlined destroy of _ViewList_View((uint64_t)v47);
  }
}

_QWORD *Coordinator.updateSelectedIndex(newIndex:)(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex + 8) == 1)
  {
    v2 = result;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    result = MEMORY[0x18D75B9C8](&v4);
    if (v4 != v2)
    {
      v3 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex;
      if ((*(_BYTE *)(v1
                     + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex
                     + 8) & 1) != 0)
      {
        *(_QWORD *)v3 = v2;
        *(_BYTE *)(v3 + 8) = 0;
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        static Update.enqueueAction(_:)();
        return (_QWORD *)swift_release_n();
      }
      else if (*(_QWORD **)v3 != v2)
      {
        *(_QWORD *)v3 = v2;
        *(_BYTE *)(v3 + 8) = 0;
      }
    }
  }
  return result;
}

void closure #1 in Coordinator.updateSelectedIndex(newIndex:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  char v3;
  uint64_t v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_BYTE *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex + 8];

    if ((v3 & 1) == 0)
    {
      swift_beginAccess();
      v4 = MEMORY[0x18D760234](v1);
      if (v4)
      {
        v5 = (void *)v4;
        swift_retain();
        swift_retain();

        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
      }
    }
  }
  swift_beginAccess();
  v6 = (char *)MEMORY[0x18D760234](v1);
  if (v6)
  {
    v7 = &v6[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex];
    *(_QWORD *)v7 = 0;
    v7[8] = 1;

  }
}

id UIKitPagingCell.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for UIKitPagingCell);
}

uint64_t type metadata accessor for UIKitPagingCell()
{
  return objc_opt_self();
}

uint64_t PagingCollectionView.apply(changes:newIDs:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a2;
  v6[4] = a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in PagingCollectionView.apply(changes:newIDs:);
  *(_QWORD *)(v7 + 24) = v6;
  v18 = partial apply for thunk for @callee_guaranteed () -> ();
  v19 = v7;
  v8 = MEMORY[0x1E0C809B0];
  v14 = MEMORY[0x1E0C809B0];
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed () -> ();
  v17 = &block_descriptor_18;
  v9 = _Block_copy(&v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v18 = partial apply for closure #2 in PagingCollectionView.apply(changes:newIDs:);
  v19 = v10;
  v14 = v8;
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v17 = &block_descriptor_11;
  v11 = _Block_copy(&v14);
  swift_release();
  objc_msgSend(v2, sel_performBatchUpdates_completion_, v9, v11);
  _Block_release(v11);
  _Block_release(v9);
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in PagingCollectionView.apply(changes:newIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  Class isa;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  Class v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  Class v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v114 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v113 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v113 - v17;
  swift_beginAccess();
  v120 = a1 + 16;
  v19 = (void *)MEMORY[0x18D760234](a1 + 16);
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, sel_dataSource);

    if (v21)
    {
      type metadata accessor for Coordinator();
      v22 = swift_dynamicCastClass();
      if (v22)
      {
        *(_QWORD *)(v22 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs) = a2;
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  v116 = v14;
  v122 = v7;
  v26 = specialized CollectionChanges.Projection.init(kind:changes:)(0, a3);
  v27 = v23;
  v113 = a3;
  if (v24 != v25)
  {
    v3 = v24;
    v40 = v25;
    LODWORD(v121) = v26;
    v119 = v23 + 32;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v28 = MEMORY[0x1E0DEE9E8];
    v115 = v27 + 104;
    v117 = v40;
    v118 = v27;
    while (1)
    {
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_123;
      v41 = *(_QWORD *)(v27 + 16);
      if (v3 >= v41)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      v42 = v119 + 40 * v3;
      if (*(unsigned __int8 *)(v42 + 32) >= 2u)
        goto LABEL_137;
      v43 = *(_QWORD *)v42;
      v44 = *(_QWORD *)(v42 + 8);
      v45 = v40;
      if ((uint64_t)(v3 + 1) < v40)
        break;
LABEL_29:
      if (v43 != v44)
      {
        if (v44 < v43)
          goto LABEL_131;
        v51 = v43;
        if (v43 >= v44)
          goto LABEL_132;
        do
        {
          v53 = v28 + 56;
          while (1)
          {
            v3 = v51++;
            v54 = static Hasher._hash(seed:_:)();
            v55 = -1 << *(_BYTE *)(v28 + 32);
            v56 = v54 & ~v55;
            if (((*(_QWORD *)(v53 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
              break;
            v57 = *(_QWORD *)(v28 + 48);
            if (*(_QWORD *)(v57 + 8 * v56) != v3)
            {
              v58 = ~v55;
              do
              {
                v56 = (v56 + 1) & v58;
                if (((*(_QWORD *)(v53 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
                  goto LABEL_43;
              }
              while (*(_QWORD *)(v57 + 8 * v56) != v3);
            }
            if (v51 == v44)
              goto LABEL_30;
          }
LABEL_43:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v126 = v28;
          specialized _NativeSet.insertNew(_:at:isUnique:)(v3, v56, isUniquelyReferenced_nonNull_native);
          v28 = v126;
          swift_bridgeObjectRelease();
        }
        while (v51 != v44);
      }
LABEL_30:
      v47 = v44 - v43;
      if (__OFSUB__(v44, v43))
        goto LABEL_125;
      if (v47)
      {
        v126 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 & ~(v47 >> 63), 0);
        v3 = v122;
        if (v44 >= v43 && (v47 & 0x8000000000000000) == 0)
        {
          v48 = v126;
          while (1)
          {
            MEMORY[0x18D754B94](v43, 0);
            v126 = v48;
            v50 = *(_QWORD *)(v48 + 16);
            v49 = *(_QWORD *)(v48 + 24);
            if (v50 >= v49 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
              v48 = v126;
            }
            *(_QWORD *)(v48 + 16) = v50 + 1;
            (*(void (**)(unint64_t, char *, unint64_t))(v8 + 32))(v48+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v50, v18, v3);
            if (v44 == v43)
              break;
            if (v44 == ++v43)
              goto LABEL_52;
          }
          __break(1u);
LABEL_118:
          __break(1u);
          goto LABEL_119;
        }
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        v126 = 0;
        v127 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v126 = 0xD000000000000015;
        v127 = 0x8000000187BDB080;
        v123 = v3;
        v109._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v109);
        swift_bridgeObjectRelease();
        goto LABEL_136;
      }
LABEL_52:
      v59 = MEMORY[0x18D760234](v120);
      if (v59)
      {
        v60 = (void *)v59;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v60, sel_deleteItemsAtIndexPaths_, isa);

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v3 = v45;
      v40 = v117;
      v27 = v118;
      if (v45 == v117)
        goto LABEL_8;
    }
    if (v3 + 1 != v41)
    {
      v46 = (_BYTE *)(v115 + 40 * v3);
      v45 = v3 + 1;
      while (v45 < (uint64_t)v41)
      {
        if (*v46)
        {
          if (*v46 == 1)
          {
            if (v121 == 1)
              goto LABEL_29;
          }
          else if (v121 == 2)
          {
            goto LABEL_29;
          }
        }
        else if (!(_BYTE)v121)
        {
          goto LABEL_29;
        }
        ++v45;
        v46 += 40;
        if (v41 == v45)
          goto LABEL_134;
      }
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    goto LABEL_134;
  }
  swift_bridgeObjectRetain();
  v28 = MEMORY[0x1E0DEE9E8];
LABEL_8:
  v121 = v28;
  swift_bridgeObjectRelease();
  v29 = specialized CollectionChanges.Projection.init(kind:changes:)(1, v113);
  v33 = v30;
  if (v31 != v32)
  {
    v62 = v29;
    v3 = v31;
    v63 = v32;
    v119 = v30 + 32;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v117 = v33 + 104;
    v118 = v63;
    while (1)
    {
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_126;
      v64 = *(_QWORD *)(v33 + 16);
      if (v3 >= v64)
        goto LABEL_127;
      v65 = v119 + 40 * v3;
      if (*(unsigned __int8 *)(v65 + 32) >= 2u)
        break;
      v67 = *(_QWORD *)v65;
      v66 = *(_QWORD *)(v65 + 8);
      v68 = v63;
      if ((uint64_t)(v3 + 1) < v63)
      {
        if (v3 + 1 != v64)
        {
          v69 = (_BYTE *)(v117 + 40 * v3);
          v68 = v3 + 1;
          while (v68 < (uint64_t)v64)
          {
            if (*v69)
            {
              if (*v69 == 1)
              {
                if (v62 == 1)
                  goto LABEL_71;
              }
              else if (v62 == 2)
              {
                goto LABEL_71;
              }
            }
            else if (!v62)
            {
              goto LABEL_71;
            }
            ++v68;
            v69 += 40;
            if (v64 == v68)
              goto LABEL_135;
          }
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
LABEL_135:
        v123 = 0;
        v124 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v123 = 0xD000000000000015;
        v124 = 0x8000000187BDB080;
        v125 = v3;
        v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v110);
        swift_bridgeObjectRelease();
        while (1)
        {
LABEL_136:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_137:
          v126 = 0;
          v127 = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          v126 = 0x2064696C61766E69;
          v127 = 0xEF203A7865646E69;
          v123 = v3;
          v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v111);
          swift_bridgeObjectRelease();
        }
      }
LABEL_71:
      v70 = v66 - v67;
      if (__OFSUB__(v66, v67))
        goto LABEL_128;
      if (v70)
      {
        v123 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70 & ~(v70 >> 63), 0);
        if (v66 < v67 || v70 < 0)
          goto LABEL_130;
        v71 = v33;
        v72 = v123;
        v73 = v116;
        do
        {
          MEMORY[0x18D754B94](v67, 0);
          v123 = v72;
          v75 = *(_QWORD *)(v72 + 16);
          v74 = *(_QWORD *)(v72 + 24);
          v3 = v75 + 1;
          if (v75 >= v74 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
            v72 = v123;
          }
          *(_QWORD *)(v72 + 16) = v3;
          (*(void (**)(unint64_t, char *, unint64_t))(v8 + 32))(v72+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v75, v73, v122);
          if (v66 == v67)
            goto LABEL_118;
          ++v67;
        }
        while (v66 != v67);
        v33 = v71;
        v63 = v118;
      }
      v76 = MEMORY[0x18D760234](v120);
      if (v76)
      {
        v77 = (void *)v76;
        v78 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v77, sel_insertItemsAtIndexPaths_, v78);

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v3 = v68;
      if (v68 == v63)
        goto LABEL_10;
    }
    v123 = 0;
    v124 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v123 = 0x2064696C61766E69;
    v124 = 0xEF203A7865646E69;
    v125 = v3;
    v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    goto LABEL_136;
  }
  swift_bridgeObjectRetain();
LABEL_10:
  swift_bridgeObjectRelease();
  LODWORD(v116) = specialized CollectionChanges.Projection.init(kind:changes:)(2, v113);
  v118 = v34;
  v36 = v35;
  v38 = v37;
  swift_bridgeObjectRetain();
  v117 = v36;
  if (v36 != v38)
  {
    swift_beginAccess();
    v79 = v121 + 56;
    v80 = v117;
    v115 = v38;
    do
    {
      v81 = (char)v116;
      v83 = v117;
      v82 = v118;
      v84 = specialized CollectionChanges.Projection.subscript.getter(v80, v116, v118);
      v86 = v85;
      swift_bridgeObjectRetain();
      v119 = specialized CollectionChanges.Projection.index(after:)(v80, v81, v82, v83, v38);
      swift_bridgeObjectRelease();
      v87 = MEMORY[0x1E0DEE9D8];
      v88 = v121;
      if (v84 != v86)
      {
        v95 = v84;
        if (v86 < v84)
          goto LABEL_133;
        do
        {
          v96 = v84;
          if (v86 <= v84)
            v97 = v84;
          else
            v97 = v86;
          v3 = v84;
          while (1)
          {
            if (v96 < v95)
              goto LABEL_121;
            if (v3 == v97)
              goto LABEL_122;
            v84 = v3 + 1;
            if (!*(_QWORD *)(v88 + 16))
              goto LABEL_108;
            v98 = static Hasher._hash(seed:_:)();
            v88 = v121;
            v99 = -1 << *(_BYTE *)(v121 + 32);
            v100 = v98 & ~v99;
            if (((*(_QWORD *)(v79 + ((v100 >> 3) & 0xFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
              goto LABEL_108;
            v101 = *(_QWORD *)(v121 + 48);
            if (*(_QWORD *)(v101 + 8 * v100) != v3)
              break;
LABEL_98:
            ++v3;
            if (v84 == v86)
              goto LABEL_87;
          }
          v102 = ~v99;
          while (1)
          {
            v100 = (v100 + 1) & v102;
            if (((*(_QWORD *)(v79 + ((v100 >> 3) & 0xFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
              break;
            if (*(_QWORD *)(v101 + 8 * v100) == v3)
              goto LABEL_98;
          }
LABEL_108:
          v103 = swift_isUniquelyReferenced_nonNull_native();
          v125 = v87;
          if ((v103 & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v87 + 16) + 1, 1);
            v87 = v125;
          }
          v105 = *(_QWORD *)(v87 + 16);
          v104 = *(_QWORD *)(v87 + 24);
          v88 = v121;
          if (v105 >= v104 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v104 > 1), v105 + 1, 1);
            v88 = v121;
            v87 = v125;
          }
          *(_QWORD *)(v87 + 16) = v105 + 1;
          *(_QWORD *)(v87 + 8 * v105 + 32) = v3;
        }
        while (v84 != v86);
      }
LABEL_87:
      v89 = *(_QWORD *)(v87 + 16);
      if (v89)
      {
        v125 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89, 0);
        v90 = 0;
        v91 = v125;
        v3 = v122;
        v92 = v114;
        do
        {
          MEMORY[0x18D754B94](*(_QWORD *)(v87 + 8 * v90 + 32), 0);
          v125 = v91;
          v94 = *(_QWORD *)(v91 + 16);
          v93 = *(_QWORD *)(v91 + 24);
          if (v94 >= v93 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v93 > 1, v94 + 1, 1);
            v91 = v125;
          }
          ++v90;
          *(_QWORD *)(v91 + 16) = v94 + 1;
          (*(void (**)(unint64_t, char *, unint64_t))(v8 + 32))(v91+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v94, v92, v3);
        }
        while (v89 != v90);
        swift_release();
      }
      else
      {
        swift_release();
        v3 = v122;
      }
      v106 = MEMORY[0x18D760234](v120);
      if (v106)
      {
        v107 = (void *)v106;
        v108 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v107, sel_reloadItemsAtIndexPaths_, v108);

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v38 = v115;
      v80 = v119;
    }
    while (v119 != v115);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void closure #2 in PagingCollectionView.apply(changes:newIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = v3;
    if (objc_msgSend(v3, sel_dataSource))
    {
      type metadata accessor for Coordinator();
      if (swift_dynamicCastClass())
        Coordinator.updateContents(_:)(v4);
      swift_unknownObjectRelease();
    }

  }
}

uint64_t PagingCollectionView.layoutSubviews()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char *v23;
  double v24;
  double v25;
  char v26;
  double v27;
  double v28;
  BOOL v29;
  id v30;
  objc_class *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  Class v36;
  char *v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  Class isa;
  uint64_t v43;
  char *v44;
  objc_super v45;

  v1 = v0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v43 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v43 - v12;
  v14 = type metadata accessor for IndexPath();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v44 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v43 - v21;
  v23 = &v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize];
  v24 = *(double *)&v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize];
  v25 = *(double *)&v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize
                     + 8];
  v26 = v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize + 16];
  objc_msgSend(v1, sel_bounds, v20);
  if ((v26 & 1) != 0 || (v24 == v27 ? (v29 = v25 == v28) : (v29 = 0), !v29))
  {
    v30 = objc_msgSend(v1, sel_collectionViewLayout);
    objc_msgSend(v30, sel_invalidateLayout);

  }
  v31 = (objc_class *)type metadata accessor for PagingCollectionView();
  v45.receiver = v1;
  v45.super_class = v31;
  objc_msgSendSuper2(&v45, sel_layoutSubviews);
  v32 = (uint64_t)v1
      + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_pendingIndexPath;
  swift_beginAccess();
  outlined init with copy of IndexPath?(v32, (uint64_t)v13);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v33(v13, 1, v14) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v34 = (uint64_t)v1
        + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastScrolledIndexPath;
    swift_beginAccess();
    outlined init with copy of IndexPath?(v34, (uint64_t)v5);
    if (v33(v5, 1, v14) == 1)
    {
      return outlined destroy of TableRowList?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    else
    {
      v37 = v44;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v44, v5, v14);
      objc_msgSend(v1, sel_bounds);
      if ((v23[16] & 1) != 0 || v38 != *(double *)v23 || v39 != *((double *)v23 + 1))
      {
        objc_msgSend(v1, sel_bounds);
        *(_QWORD *)v23 = v40;
        *((_QWORD *)v23 + 1) = v41;
        v23[16] = 0;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, isa, 16, 0);

      }
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v37, v14);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v13, v14);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v9, 1, 1, v14);
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v9, v32);
    swift_endAccess();
    v36 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, v36, 16, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, v14);
  }
}

id PagingCollectionView.scrollToItem(at:at:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  objc_class *v22;
  uint64_t v23;
  objc_super v24;

  v4 = v3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v23 - v11;
  result = objc_msgSend(v4, sel_dataSource, v10);
  if (result)
  {
    type metadata accessor for Coordinator();
    v14 = swift_dynamicCastClass();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      v16 = *(_QWORD *)(v15 + 16);
      result = (id)swift_bridgeObjectRelease();
      if (v16)
      {
        v17 = type metadata accessor for IndexPath();
        v18 = *(_QWORD *)(v17 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v12, a1, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
        v19 = (uint64_t)v4
            + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastScrolledIndexPath;
        swift_beginAccess();
        outlined assign with take of IndexPath?((uint64_t)v12, v19);
        swift_endAccess();
        v20 = a3 & 1;
        objc_msgSend(v4, sel_setPagingEnabled_, v20);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v22 = (objc_class *)type metadata accessor for PagingCollectionView();
        v24.receiver = v4;
        v24.super_class = v22;
        objc_msgSendSuper2(&v24, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, isa, a2, v20);

        return objc_msgSend(v4, sel_setPagingEnabled_, 1);
      }
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id PagingCollectionView.__deallocating_deinit()
{
  return NSSwiftAttributedString.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for PagingCollectionView);
}

uint64_t ObjC metadata update function for PagingCollectionView()
{
  return type metadata accessor for PagingCollectionView();
}

uint64_t type metadata accessor for PagingCollectionView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PagingCollectionView;
  if (!type metadata singleton initialization cache for PagingCollectionView)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for PagingCollectionView()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for PageViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageViewWrapper);
}

uint64_t sub_1872727B4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1872727D8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PagingCollectionView.apply(changes:newIDs:)()
{
  uint64_t *v0;

  return closure #1 in PagingCollectionView.apply(changes:newIDs:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_187272818()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in PagingCollectionView.apply(changes:newIDs:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PagingCollectionView.apply(changes:newIDs:)(a1, v1);
}

uint64_t outlined assign with take of IndexPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in Coordinator.updateSelectedIndex(newIndex:)()
{
  uint64_t v0;

  closure #1 in Coordinator.updateSelectedIndex(newIndex:)(v0);
}

void type metadata accessor for _UIHostingView<_ViewList_View>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _UIHostingView<_ViewList_View>)
  {
    v4 = type metadata accessor for _UIHostingView(0, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>);
  }
}

uint64_t outlined assign with take of _ViewList_View(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE0A40] - 8) + 40))(a2, a1);
  return a2;
}

uint64_t outlined destroy of _ViewList_Backing(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE4120] - 8) + 8))();
  return a1;
}

id specialized Coordinator.init(selectedIndex:children:layoutDirection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  char *v5;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  objc_super v20;
  _QWORD v21[7];
  uint64_t v22;

  v10 = *a5;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView] = 0;
  v11 = &v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  outlined init with copy of _VariadicView_Children(a4, (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children]);
  v13 = &v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex];
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  *((_QWORD *)v13 + 2) = a3;
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v15 = v14;
  v16 = v5;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v22, v15);
  *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex] = v22;
  outlined init with copy of _VariadicView_Children(a4, (uint64_t)v21);
  v17 = _ViewList_Backing.ids.getter();
  outlined destroy of _ViewList_Backing((uint64_t)v21);
  *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs] = v17;
  v16[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection] = v10;

  v20.receiver = v16;
  v20.super_class = (Class)type metadata accessor for Coordinator();
  v18 = objc_msgSendSuper2(&v20, sel_init);
  outlined destroy of _VariadicView_Children(a4);
  return v18;
}

void specialized Coordinator.collectionView(_:willDisplay:forItemAt:)(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  id v5;
  _QWORD *v6;

  type metadata accessor for UIKitPagingCell();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host);
    if (v3)
    {
      v4 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0xF8);
      swift_beginAccess();
      if (*v4 == 1)
      {
        *v4 = 0;
        v5 = a1;
        v6 = v3;
        specialized _UIHostingView.updateRemovedState()();

      }
    }
  }
}

void specialized Coordinator.collectionView(_:didEndDisplaying:forItemAt:)(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  id v5;
  _QWORD *v6;

  type metadata accessor for UIKitPagingCell();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host);
    if (v3)
    {
      v4 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0xF8);
      swift_beginAccess();
      if ((*v4 & 1) == 0)
      {
        *v4 = 1;
        v5 = a1;
        v6 = v3;
        specialized _UIHostingView.updateRemovedState()();

      }
    }
  }
}

uint64_t specialized Coordinator.collectionView(_:targetContentOffsetForProposedContentOffset:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  __int128 v8;
  uint64_t v9;
  CGRect v10;
  CGRect v11;

  objc_msgSend(a1, sel_bounds);
  CGRectGetWidth(v10);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
  v8 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
  v9 = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  result = (uint64_t)MEMORY[0x18D75B9C8](v7);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection) == 1)
  {
    objc_msgSend(a1, sel_bounds);
    CGRectGetWidth(v11);
    v5 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
    swift_beginAccess();
    outlined init with copy of _VariadicView_Children(v5, (uint64_t)&v8);
    v6 = _VariadicView_Children.endIndex.getter();
    result = _VariadicView_Children.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      result = _VariadicView_Children.endIndex.getter();
      if ((v6 & 0x8000000000000000) == 0 && result >= v6)
        return outlined destroy of _VariadicView_Children((uint64_t)&v8);
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for PageViewWrapper()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PageViewWrapper(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD *, uint64_t);
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  int v34;

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = v7 & 0x100000;
  if (v8 <= 7 && v11 == 0 && v10 + (v9 & (v8 + 104)) + 1 <= 0x18)
  {
    v34 = *(_DWORD *)(v6 + 84);
    v15 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
    v4[5] = a2[5];
    v16 = (_QWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
    v18 = v17[3];
    v16[3] = v18;
    v16[4] = v17[4];
    v19 = **(void (***)(_QWORD *, _QWORD *, uint64_t))(v18 - 8);
    swift_retain();
    v19(v16, v17, v18);
    v20 = (void *)v17[5];
    v16[5] = v20;
    v16[6] = v17[6];
    v21 = (_QWORD *)(v9 & ((unint64_t)v16 + 63));
    v22 = (_QWORD *)(v9 & ((unint64_t)v17 + 63));
    v23 = (uint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = v20;
    swift_bridgeObjectRetain();
    if (v34 < 0)
    {
      v27 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v23 + v8 + 8) & ~v8);
      v26 = ~v8;
      if (v27)
      {
LABEL_14:
        memcpy(v21, v22, v10);
LABEL_17:
        *((_BYTE *)v21 + v10) = *((_BYTE *)v22 + v10);
        return v4;
      }
    }
    else
    {
      v25 = *v23;
      if ((unint64_t)*v23 >= 0xFFFFFFFF)
        LODWORD(v25) = -1;
      v26 = ~v8;
      if ((_DWORD)v25 != -1)
        goto LABEL_14;
    }
    *v21 = *v22;
    v28 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v28 = *v23;
    v29 = v8 + 8;
    v30 = ((unint64_t)v28 + v8 + 8) & v26;
    v31 = ((unint64_t)v23 + v29) & v26;
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v32(v30, v31, v5);
    goto LABEL_17;
  }
  v14 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v14 + (v9 & (v8 + 16)));
  swift_retain();
  return v4;
}

uint64_t destroy for PageViewWrapper(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  v4 = (a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);

  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7) + 56) & ~(v7 | 7);
  v9 = ~v7;
  v10 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v9);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v10 + v7 + 8) & v9, v5);
  }
  v11 = *v10;
  if ((unint64_t)*v10 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  result = (v11 + 1);
  if ((_DWORD)v11 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for PageViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD *, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);
  uint64_t v30;
  _QWORD *__dst;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = (_QWORD *)((a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[3];
  v7[3] = v9;
  v7[4] = v8[4];
  v10 = **(void (***)(_QWORD *, _QWORD *, uint64_t))(v9 - 8);
  swift_retain();
  v10(v7, v8, v9);
  v11 = (void *)v8[5];
  v7[5] = v11;
  v7[6] = v8[6];
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (_QWORD *)(((unint64_t)v7 + v15 + 56) & v16);
  v17 = (_QWORD *)(((unint64_t)v8 + v15 + 56) & v16);
  v18 = ~v15;
  v19 = ((v15 + 16) & ~v15) + *(_QWORD *)(v13 + 64);
  v20 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = v11;
  swift_bridgeObjectRetain();
  if ((v14 & 0x80000000) == 0)
  {
    v22 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    if ((_DWORD)v22 != -1)
      goto LABEL_5;
LABEL_7:
    v23 = __dst;
    *__dst = *v17;
    v24 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = v12;
    *v24 = *v20;
    v25 = v15 + 8;
    v26 = ((unint64_t)v24 + v15 + 8) & v18;
    v27 = ((unint64_t)v20 + v25) & v18;
    v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    v28(v26, v27, v30);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(((unint64_t)v20 + v15 + 8) & v18, v14, v12))goto LABEL_7;
LABEL_5:
  v23 = __dst;
  memcpy(__dst, v17, v19);
LABEL_8:
  *((_BYTE *)v23 + v19) = *((_BYTE *)v17 + v19);
  return a1;
}

uint64_t *assignWithCopy for PageViewWrapper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t (*v24)(unint64_t, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  uint64_t v33;
  int v35;
  size_t v36;
  uint64_t v37;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  v6 = (uint64_t *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  v7 = (uint64_t *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v6, v7);
  v8 = (void *)v7[5];
  v9 = (void *)v6[5];
  v6[5] = (uint64_t)v8;
  v10 = v8;

  v6[6] = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)(((unint64_t)v6 + v14 + 56) & v15);
  v17 = (_QWORD *)(((unint64_t)v7 + v14 + 56) & v15);
  v18 = *(_QWORD *)(v12 + 64);
  v19 = ((v14 + 16) & ~v14) + v18;
  v20 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v37 = ~v14;
  if ((v13 & 0x80000000) != 0)
  {
    v36 = ((v14 + 16) & ~v14) + v18;
    v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    v35 = v24(((unint64_t)v20 + v14 + 8) & ~v14, v13, v11);
    v21 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = v24(((unint64_t)v21 + v14 + 8) & ~v14, v13, v11);
    v19 = v36;
    if (!v35)
    {
LABEL_5:
      if (!v23)
      {
        *v16 = *v17;
        swift_retain();
        swift_release();
        *v20 = *v21;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 24))(((unint64_t)v20 + v14 + 8) & v37, ((unint64_t)v21 + v14 + 8) & v37, v11);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)v20 + v14 + 8) & v37, v11);
      goto LABEL_9;
    }
  }
  else
  {
    v21 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = *v21;
    if (*v21 >= 0xFFFFFFFFuLL)
      LODWORD(v22) = -1;
    v23 = v22 + 1;
    if (*v20 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v23)
  {
    *v16 = *v17;
    *v20 = *v21;
    v25 = ((unint64_t)v20 + v14 + 8) & v37;
    v26 = (unint64_t)v21 + v14 + 8;
    v27 = v16;
    v28 = v17;
    v29 = v11;
    v30 = v26 & v37;
    v31 = v19;
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v33 = v29;
    v17 = v28;
    v16 = v27;
    v32(v25, v30, v33);
    v19 = v31;
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v16, v17, v19);
LABEL_12:
  *((_BYTE *)v16 + v19) = *((_BYTE *)v17 + v19);
  return a1;
}

_OWORD *initializeWithTake for PageViewWrapper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_OWORD *)v6;
  v8 = *(_OWORD *)(v6 + 16);
  v9 = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(_OWORD *)v5 = v7;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)((v12 + 56 + v5) & v13);
  v15 = (_QWORD *)((v12 + 56 + v6) & v13);
  v16 = ~v12;
  v17 = ((v12 + 16) & ~v12) + *(_QWORD *)(v11 + 64);
  v18 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) == 0)
  {
    v19 = *v18;
    if ((unint64_t)*v18 >= 0xFFFFFFFF)
      LODWORD(v19) = -1;
    if ((_DWORD)v19 != -1)
      goto LABEL_5;
LABEL_7:
    *v14 = *v15;
    v20 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(((unint64_t)v20 + v12 + 8) & v16, ((unint64_t)v18 + v12 + 8) & v16, v10);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(unint64_t))(v11 + 48))(((unint64_t)v18 + v12 + 8) & v16))
    goto LABEL_7;
LABEL_5:
  memcpy(v14, v15, v17);
LABEL_8:
  *((_BYTE *)v14 + v17) = *((_BYTE *)v15 + v17);
  return a1;
}

uint64_t assignWithTake for PageViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t (*v26)(unint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t (*v28)(unint64_t, uint64_t, uint64_t);
  int v30;
  size_t v31;
  uint64_t v32;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_release();
  v8 = (a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v8);
  v10 = *(_OWORD *)v9;
  v11 = *(_OWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_OWORD *)v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  v12 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);

  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = (_QWORD *)((v16 + 56 + v8) & v17);
  v19 = (_QWORD *)((v16 + 56 + v9) & v17);
  v20 = *(_QWORD *)(v14 + 64);
  v21 = ((v16 + 16) & ~v16) + v20;
  v22 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 = ~v16;
  if ((v15 & 0x80000000) != 0)
  {
    v31 = ((v16 + 16) & ~v16) + v20;
    v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48);
    v27 = v26(((unint64_t)v22 + v16 + 8) & ~v16, v15, v13);
    v28 = v26;
    v30 = v27;
    v23 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = v28(((unint64_t)v23 + v16 + 8) & ~v16, v15, v13);
    v21 = v31;
    if (!v30)
    {
LABEL_5:
      if (!v25)
      {
        *v18 = *v19;
        swift_release();
        *v22 = *v23;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))(((unint64_t)v22 + v16 + 8) & v32, ((unint64_t)v23 + v16 + 8) & v32, v13);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(((unint64_t)v22 + v16 + 8) & v32, v13);
      goto LABEL_9;
    }
  }
  else
  {
    v23 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = *v23;
    if (*v23 >= 0xFFFFFFFFuLL)
      LODWORD(v24) = -1;
    v25 = v24 + 1;
    if (*v22 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v25)
  {
    *v18 = *v19;
    *v22 = *v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v22 + v16 + 8) & v32, ((unint64_t)v23 + v16 + 8) & v32, v13);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v18, v19, v21);
LABEL_12:
  *((_BYTE *)v18 + v21) = *((_BYTE *)v19 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageViewWrapper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = v6 - 1;
  if ((v6 - 1) <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v6 - 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v12 = *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9) + ((v9 + 104) & ~v10) + 1;
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_25:
      if (v7 < 0)
      {
        v19 = (unint64_t *)((((((a1 + 55) & 0xFFFFFFFFFFFFFFF8) + v10 + 56) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v19 + v9 + 8) & ~v9);
        }
        else
        {
          v20 = *v19;
          if (v20 >= 0xFFFFFFFF)
            LODWORD(v20) = -1;
          v21 = v20 + 1;
        }
        if (v21 >= 2)
          return v21 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 24);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_25;
LABEL_18:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X12 }
  }
  return v8 + v17 + 1;
}

void storeEnumTagSinglePayload for PageViewWrapper(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if ((v6 - 1) <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 104) & ~(v8 | 7)) + 1;
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((((_DWORD)v8 + 16) & ~(_DWORD)v8) + *(_DWORD *)(v5 + 64) + (((_DWORD)v8 + 104) & ~(v8 | 7)) != -1)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 104) & ~(v8 | 7)) + 1);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 104) & ~(v8 | 7)) + 1);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

uint64_t associated type witness table accessor for View.Body : View in PageViewWrapper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>)
  {
    type metadata accessor for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>();
    type metadata accessor for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>);
  }
}

void type metadata accessor for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>)
  {
    type metadata accessor for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>);
  }
}

void type metadata accessor for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>))
  {
    type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>));
  }
}

uint64_t type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>;
  if (!lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
}

void type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PageIndexDisplayMode>, (uint64_t)&type metadata for PageIndexDisplayMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
  }
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewPlacementModifier.IsAutomaticPredicate, &type metadata for IndexViewPlacementModifier.IsAutomaticPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>)
  {
    type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>(255);
    lazy protocol witness table accessor for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for TupleToolbarContent);
    v3 = type metadata accessor for ToolbarModifier(a1, MEMORY[0x1E0DEE9C0] + 8, v2, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>);
  }
}

void type metadata accessor for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?();
    v6 = type metadata accessor for ToolbarItemGroup(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexView and conformance IndexView, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>);
    v3[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexView and conformance IndexView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexView and conformance IndexView;
  if (!lazy protocol witness table cache variable for type IndexView and conformance IndexView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexView, &type metadata for IndexView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexView and conformance IndexView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PageIndexDisplayMode>, (uint64_t)&type metadata for PageIndexDisplayMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewPlacementModifier.IsToolbarPredicate, &type metadata for IndexViewPlacementModifier.IsToolbarPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of IndexView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IndexViewStyleConfiguration(a2, a1);
  return a2;
}

uint64_t outlined destroy of IndexView(uint64_t a1)
{
  destroy for _IndexViewStyleConfiguration(a1);
  return a1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>)(*(uint64_t (**)(void))(v1 + 32), a1);
}

void type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>)
  {
    type metadata accessor for WritableKeyPath<Int?, Int?>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for BindingOperations.NilCoalescing<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0CE3790]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WritableKeyPath<Int?, Int?>, MEMORY[0x1E0CE83C8]);
    lazy protocol witness table accessor for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>();
    v0 = type metadata accessor for ComposedProjection();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>);
  }
}

void type metadata accessor for WritableKeyPath<Int?, Int?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WritableKeyPath<Int?, Int?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for WritableKeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<Int?, Int?>);
  }
}

unint64_t lazy protocol witness table accessor for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>;
  if (!lazy protocol witness table cache variable for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for BindingOperations.NilCoalescing<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0CE3790]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3798], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BindingOperations.NilCoalescing<Int> and conformance BindingOperations.NilCoalescing<A>);
  }
  return result;
}

uint64_t sub_1872747CC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PageViewWrapper.selectedIndex.getter()
{
  return _VariadicView_Children.tagIndex<A>(_:)();
}

uint64_t outlined init with copy of UIKitPagingView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IndexViewStyleConfiguration(a2, a1);
  return a2;
}

uint64_t outlined destroy of UIKitPagingView(uint64_t a1)
{
  destroy for _IndexViewStyleConfiguration(a1);
  return a1;
}

ValueMetadata *type metadata accessor for UIKitPagingView()
{
  return &type metadata for UIKitPagingView;
}

uint64_t sub_187274898()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>, lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>, &lazy cache variable for type metadata for TabBarPlacement?, (uint64_t)&type metadata for TabBarPlacement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, lazy protocol witness table accessor for type ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>> and conformance ZStack<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>> and conformance ZStack<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, MEMORY[0x1E0CE74D8]);
}

unint64_t lazy protocol witness table accessor for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsToolbar;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    IsToolbar = type metadata accessor for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>();
    v2[0] = &protocol witness table for ToolbarModifier<A, B>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsToolbar, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>, &lazy cache variable for type metadata for TabBarPlacement?, (uint64_t)&type metadata for TabBarPlacement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t outlined assign with take of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE5600] - 8) + 40))(a2, a1);
  return a2;
}

uint64_t LeadingAlignedDisclosureGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance LeadingAlignedDisclosureGroupStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in StyledView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)();
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  _BYTE v71[7];
  int v72;
  char v73;
  char v74;
  _BYTE v75[7];
  char v76;
  _BYTE v77[7];
  char v78;
  int v79;
  __int16 v80;
  _QWORD v81[2];

  v65 = a4;
  type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (_WORD *)((char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v63 = (uint64_t)&v58 - v15;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
  MEMORY[0x1E0C80A78](v16, v17);
  v62 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  v64 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v61 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v60 = (char *)&v58 - v24;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = a2;
  *(_BYTE *)(v25 + 32) = a3;
  *v11 = 256;
  v26 = (uint64_t (**)())((char *)v11 + *(int *)(v8 + 36));
  *v26 = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter;
  v26[1] = (uint64_t (*)())v25;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v27 = (char *)v11 + *(int *)(v8 + 40);
  swift_retain();
  v28 = a2;
  swift_retain();
  swift_retain();
  v58 = static VerticalAlignment.center.getter();
  v67 = a1;
  v68 = a2;
  v59 = a1;
  LOBYTE(a2) = a3;
  v69 = a3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v30 = v29;
  MEMORY[0x18D75B9C8](v81);
  v31 = v81[0];
  v32 = static VerticalAlignment.center.getter();
  v67 = a1;
  v68 = v28;
  v33 = v28;
  v69 = a2;
  LOBYTE(v28) = a2;
  MEMORY[0x18D75B9C8](v81, v30);
  LOBYTE(a2) = v81[0];
  LOBYTE(v8) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v42 = (uint64_t)v60;
  swift_release();
  HIBYTE(v81[0]) = 0;
  v78 = 1;
  v76 = 1;
  v74 = 1;
  v70 = 0;
  *(_QWORD *)v27 = v58;
  *((_QWORD *)v27 + 1) = 0x4010000000000000;
  v27[16] = 0;
  *(_DWORD *)(v27 + 17) = v81[0];
  *((_DWORD *)v27 + 5) = *(_DWORD *)((char *)v81 + 3);
  v27[24] = 0;
  v27[25] = v31;
  *(_DWORD *)(v27 + 26) = v79;
  *((_WORD *)v27 + 15) = v80;
  *((_QWORD *)v27 + 4) = 0;
  v27[40] = v78;
  *(_DWORD *)(v27 + 41) = *(_DWORD *)v77;
  *((_DWORD *)v27 + 11) = *(_DWORD *)&v77[3];
  *((_QWORD *)v27 + 6) = v32;
  *((_QWORD *)v27 + 7) = 0;
  v27[64] = v76;
  *(_DWORD *)(v27 + 65) = *(_DWORD *)v75;
  *((_DWORD *)v27 + 17) = *(_DWORD *)&v75[3];
  *((_QWORD *)v27 + 9) = 0;
  v27[80] = v74;
  v27[81] = 1;
  v27[82] = a2;
  v27[87] = v73;
  *(_DWORD *)(v27 + 83) = v72;
  v27[88] = v8;
  *((_DWORD *)v27 + 23) = *(_DWORD *)&v71[3];
  *(_DWORD *)(v27 + 89) = *(_DWORD *)v71;
  *((_QWORD *)v27 + 12) = v35;
  *((_QWORD *)v27 + 13) = v37;
  *((_QWORD *)v27 + 14) = v39;
  *((_QWORD *)v27 + 15) = v41;
  v27[128] = v70;
  v43 = v59;
  v67 = v59;
  v68 = v33;
  v69 = v28;
  MEMORY[0x18D75B9C8](&v66, v30);
  v44 = v63;
  specialized AccessibilityDisclosureModifier.body(content:)(v66, v63);
  v45 = (uint64_t)v11;
  v46 = (uint64_t)v61;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  v47 = v62;
  outlined init with copy of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(v44, v62);
  outlined destroy of TableRowList?(v44, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (uint64_t)type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
  KeyPath = swift_getKeyPath();
  v49 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  v50 = v46 + *(int *)(v64 + 36);
  *(_QWORD *)v50 = KeyPath;
  *(_BYTE *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = v49;
  *(_BYTE *)(v50 + 24) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v46, v42);
  v67 = v43;
  v68 = v33;
  v69 = v28;
  MEMORY[0x18D75B9C8](&v66, v30);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v66 == 1)
  {
    v51 = static HorizontalAlignment.center.getter();
    lazy protocol witness table accessor for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition();
    v53 = AnyTransition.init<A>(_:)();
    v52 = 1;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42, v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  v54 = v65;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, v65, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)();
  v56 = (uint64_t *)(v54 + *(int *)(v55 + 48));
  *v56 = v51;
  v56[1] = 0;
  v56[2] = v52;
  v56[3] = v53;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter()
{
  swift_retain();
  swift_retain();
  specialized static RotatingDisclosureIndicator.toggle(_:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance StyledView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>();
  return closure #1 in StyledView.body.getter(v3, v4, v5, a1 + *(int *)(v6 + 44));
}

uint64_t one-time initialization function for verticalDisclosure()
{
  uint64_t result;

  lazy protocol witness table accessor for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition();
  result = AnyTransition.init<A>(_:)();
  static AnyTransition.verticalDisclosure = result;
  return result;
}

uint64_t static AnyTransition.verticalDisclosure.getter()
{
  if (one-time initialization token for verticalDisclosure != -1)
    swift_once();
  return swift_retain();
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in LeadingAlignedDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LeadingAlignedDisclosureGroupStyle()
{
  return &type metadata for LeadingAlignedDisclosureGroupStyle;
}

unint64_t lazy protocol witness table accessor for type StyledView and conformance StyledView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StyledView and conformance StyledView;
  if (!lazy protocol witness table cache variable for type StyledView and conformance StyledView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyledView, &unk_1E1AAE1D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledView and conformance StyledView);
  }
  return result;
}

void *type metadata accessor for StyledView()
{
  return &unk_1E1AAE1D0;
}

uint64_t associated type witness table accessor for View.Body : View in StyledView()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>);
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>)
  {
    type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>, MEMORY[0x1E0CE2BC0]);
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  }
}

void type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>);
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>(255);
    type metadata accessor for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>(255);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>, &lazy protocol witness table cache variable for type TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)> and conformance TupleView<A>);
}

void type metadata accessor for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>)
  {
    type metadata accessor for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)(255, &lazy cache variable for type metadata for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer));
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>);
  }
}

void type metadata accessor for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>, &lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)> and conformance TupleView<A>);
}

void type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>)
  {
    type metadata accessor for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)(255, &lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator));
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>);
  }
}

void type metadata accessor for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v4)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>();
    v2 = MEMORY[0x1E0CE73D0];
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>, v2);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for VStack<DisclosureGroupStyleConfiguration.Content>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, (uint64_t)&protocol witness table for DisclosureGroupStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

uint64_t sub_187275894()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter()
{
  return implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter();
}

double protocol witness for Transition.body(content:phase:) in conformance VerticalDisclosureTransition@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_WORD *)a1 = 256;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 40) = v7;
  *(_WORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance VerticalDisclosureTransition(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)result == 3)
  {
    v1 = result;
    result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(result + 24), *(_BYTE *)(result + 32));
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t specialized AccessibilityDisclosureModifier.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[48];
  _BYTE v10[48];

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v9[-v6];
  v9[0] = a1;
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v10, (uint64_t)v9);
  specialized View.accessibility<A>(_:_:isEnabled:)((uint64_t)v9, 1, (uint64_t)v7);
  outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined destroy of AccessibilityValueStorage((uint64_t)v10);
  return outlined init with take of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>((uint64_t)v7, a2);
}

uint64_t outlined init with copy of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition;
  if (!lazy protocol witness table cache variable for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VerticalDisclosureTransition, &unk_1E1AF8C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE62F8], MEMORY[0x1E0CE62E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE62F0], MEMORY[0x1E0CE62E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE62E0], MEMORY[0x1E0CE62E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for VerticalDisclosureTransition()
{
  return &unk_1E1AF8C90;
}

uint64_t sub_187275CE4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in VerticalDisclosureTransition()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE1A80]);
    v3[1] = lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>);
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for PlaceholderContentView<VerticalDisclosureTransition>, (uint64_t)&unk_1E1AF8C90, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE5470]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>, MEMORY[0x1E0CE35C0]);
}

unint64_t lazy protocol witness table accessor for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>;
  if (!lazy protocol witness table cache variable for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for PlaceholderContentView<VerticalDisclosureTransition>, (uint64_t)&unk_1E1AF8C90, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE5470]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5480], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>);
  }
  return result;
}

void Group.init<A, B>(subviews:transform:)()
{
  Group.init<A, B>(subviews:transform:)();
}

{
  type metadata accessor for GroupElementsOfContent();
}

void Group.init<A, B>(elementsOf:transform:)()
{
  Group.init<A, B>(subviews:transform:)();
}

{
  type metadata accessor for GroupElementsOfContent();
}

void GroupElementsOfContent.init(subviews:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16, v14);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
    v17 = v23;
    v27 = v23;
    v19 = v21;
    v18 = v22;
    v25 = v21;
    v26 = v22;
    v24 = v20;
    *(_OWORD *)a7 = v20;
    *(_OWORD *)(a7 + 16) = v19;
    *(_OWORD *)(a7 + 32) = v18;
    *(_QWORD *)(a7 + 48) = v17;
    *(_QWORD *)&v20 = a3;
    *((_QWORD *)&v20 + 1) = a4;
    *(_QWORD *)&v21 = a5;
    *((_QWORD *)&v21 + 1) = a6;
    type metadata accessor for GroupElementsOfContent.Storage();
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  outlined destroy of SubviewsCollection?((uint64_t)&v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(a7, a1, a3);
  *(_QWORD *)&v24 = a3;
  *((_QWORD *)&v24 + 1) = a4;
  *(_QWORD *)&v25 = a5;
  *((_QWORD *)&v25 + 1) = a6;
  type metadata accessor for GroupElementsOfContent.Storage();
}

void sub_1872761D4()
{
  JUMPOUT(0x1872761E0);
}

uint64_t sub_1872761F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 52));
  *v4 = v2;
  v4[1] = v1;
  return result;
}

void Group.init<A, B>(subviewsOf:transform:)()
{
  Group.init<A, B>(subviews:transform:)();
}

uint64_t sub_187276280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, a1);
  Group<A>.init(content:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v2, v1);
}

void closure #1 in Group.init<A, B>(elementsOf:transform:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for GroupElementsOfContent();
}

{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for GroupElementsOfContent();
}

void sub_187276358(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v5 + 16))(v6, *(_QWORD *)(v7 - 136), v4, v12);
  swift_retain();
  GroupElementsOfContent.init(subviews:content:)(v6, *(_QWORD *)(v7 - 128), v4, v3, v2, *(_QWORD *)(v7 - 144), (uint64_t)v9);
}

void type metadata accessor for GroupElementsOfContent()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in Group.init<A, B>(subviews:transform:)()
{
  uint64_t v0;

  closure #1 in Group.init<A, B>(elementsOf:transform:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void GroupElementsOfContent.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[30];

  v21[12] = a3;
  v4 = a1[3];
  v5 = a1[5];
  v6 = type metadata accessor for SubviewsRoot(255, v4, v5, a2);
  v7 = a1[2];
  v21[10] = v6;
  v8 = type metadata accessor for _VariadicView.Tree();
  v21[2] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v21[3] = (char *)v21 - v12;
  v21[6] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v21[5] = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v20 = a1[4];
  v21[16] = v7;
  v21[17] = v4;
  v21[9] = v20;
  v21[18] = v20;
  v21[19] = v5;
  v21[11] = v5;
  type metadata accessor for GroupElementsOfContent.Storage();
}

uint64_t sub_187276600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  __int128 v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[96];

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = &v37[-v12];
  v14 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v9 - 256) = v14;
  *(_QWORD *)(v9 - 264) = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v9 - 216) = &v37[-v17];
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v11 + 16);
  v19 = *(_QWORD *)(v9 - 288);
  v18(v13, v19, a1, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = *(_QWORD *)(v9 - 280);
    (*(void (**)(void))(*(_QWORD *)(v9 - 272) + 32))();
    v21 = (_QWORD *)(v19 + *(int *)(v8 + 52));
    v22 = v21[1];
    *(_QWORD *)(v9 - 192) = *v21;
    *(_QWORD *)(v9 - 184) = v22;
    MEMORY[0x1E0C80A78](v22, v23);
    *(_QWORD *)&v37[-48] = v3;
    *(_QWORD *)&v37[-40] = v6;
    v24 = *(_QWORD *)(v9 - 248);
    v25 = *(_QWORD *)(v9 - 232);
    *(_QWORD *)&v37[-32] = v24;
    *(_QWORD *)&v37[-24] = v25;
    *(_QWORD *)&v37[-16] = v20;
    swift_retain();
    v26 = *(_QWORD *)(v9 - 240);
    _VariadicView.Tree.init(_:content:)();
    *(_QWORD *)(v9 - 104) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>, v26);
    *(_QWORD *)(v9 - 96) = v24;
    v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 104);
    v28 = *(_QWORD *)(v9 - 296);
    static ViewBuilder.buildExpression<A>(_:)(v7, v5, v27);
    v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 304) + 8);
    v29(v7, v5);
    static ViewBuilder.buildBlock<A>(_:)(v28, v5, v7);
    static ViewBuilder.buildEither<A, B>(second:)(v7, v6, v5);
    v29(v7, v5);
    v29(v28, v5);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v9 - 272) + 8))(*(_QWORD *)(v9 - 280), v3);
  }
  else
  {
    v30 = *((_OWORD *)v13 + 1);
    *(_OWORD *)(v9 - 192) = *(_OWORD *)v13;
    *(_OWORD *)(v9 - 176) = v30;
    *(_OWORD *)(v9 - 160) = *((_OWORD *)v13 + 2);
    *(_QWORD *)(v9 - 144) = *((_QWORD *)v13 + 6);
    (*(void (**)(uint64_t))(v19 + *(int *)(v8 + 52)))(v9 - 192);
    v25 = *(_QWORD *)(v9 - 232);
    static ViewBuilder.buildExpression<A>(_:)(v4, v6, v25);
    v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 312) + 8);
    v31(v4, v6);
    static ViewBuilder.buildBlock<A>(_:)(v2, v6, v4);
    v26 = *(_QWORD *)(v9 - 240);
    v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>, v26);
    v24 = *(_QWORD *)(v9 - 248);
    *(_QWORD *)(v9 - 208) = v32;
    *(_QWORD *)(v9 - 200) = v24;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 208);
    static ViewBuilder.buildEither<A, B>(first:)(v4, v6);
    v31(v4, v6);
    v31(v2, v6);
    outlined destroy of SubviewsCollection(v9 - 192);
  }
  *(_QWORD *)(v9 - 120) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>, v26);
  *(_QWORD *)(v9 - 112) = v24;
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 120);
  *(_QWORD *)(v9 - 136) = v25;
  *(_QWORD *)(v9 - 128) = v33;
  v34 = *(_QWORD *)(v9 - 256);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v34, v9 - 136);
  v35 = *(_QWORD *)(v9 - 216);
  static ViewBuilder.buildBlock<A>(_:)(v35, v34, *(_QWORD *)(v9 - 224));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 264) + 8))(v35, v34);
}

uint64_t type metadata accessor for SubviewsRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubviewsRoot);
}

void type metadata accessor for GroupElementsOfContent.Storage()
{
  JUMPOUT(0x18D75FF28);
}

Swift::Int __swiftcall SubviewsCollection.index(before:)(Swift::Int before)
{
  Swift::Int v1;

  v1 = before - 1;
  if (__OFSUB__(before, 1))
  {
    __break(1u);
  }
  else
  {
    before = _VariadicView_Children.endIndex.getter();
    if ((v1 & 0x8000000000000000) == 0 && v1 < before)
      return v1;
  }
  __break(1u);
  return before;
}

Swift::Int __swiftcall SubviewsCollection.index(after:)(Swift::Int after)
{
  Swift::Int result;

  result = _VariadicView_Children.endIndex.getter();
  if ((after & 0x8000000000000000) == 0 && result > after)
    return after + 1;
  __break(1u);
  return result;
}

uint64_t SubviewsCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = outlined init with copy of SubviewsCollection(v3, (uint64_t)(a3 + 2));
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t SubviewsCollection.startIndex.getter()
{
  return 0;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance SubviewsCollection@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)_VariadicView_Children.endIndex.getter();
    if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)result)
    {
      *a2 = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SubviewsCollection(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (uint64_t *)_VariadicView_Children.endIndex.getter();
    if ((v1 & 0x8000000000000000) == 0 && v1 < (uint64_t)result)
    {
      *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SubviewsCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _VariadicView_Children.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SubviewsCollection(void **a1))(uint64_t *a1)
{
  *a1 = malloc(0x60uLL);
  _VariadicView_Children.subscript.getter();
  return protocol witness for Collection.subscript.read in conformance SubviewsCollection;
}

void protocol witness for Collection.subscript.read in conformance SubviewsCollection(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of Subview(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance SubviewsCollection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  result = outlined init with copy of SubviewsCollection(v2, (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance SubviewsCollection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SubviewsCollection()
{
  return _VariadicView_Children.endIndex.getter() == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance SubviewsCollection@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)_VariadicView_Children.endIndex.getter();
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
    {
      *a3 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SubviewsCollection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance SubviewsCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = _VariadicView_Children.endIndex.getter();
  if (v2 < 0 || result < v2)
  {
    __break(1u);
  }
  else
  {
    result = _VariadicView_Children.endIndex.getter();
    if ((v3 & 0x8000000000000000) == 0 && result >= v3)
      return v3 - v2;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance SubviewsCollection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = _VariadicView_Children.endIndex.getter();
  if (v3 < 0 || v3 >= result)
    __break(1u);
  else
    *a2 = v3 + 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance SubviewsCollection(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = _VariadicView_Children.endIndex.getter();
  if (v2 < 0 || v2 >= result)
    __break(1u);
  else
    *a1 = v2 + 1;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance SubviewsCollection@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance SubviewsCollection()
{
  uint64_t v0;
  uint64_t result;

  v0 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = _VariadicView_Children.endIndex.getter();
    if ((v0 & 0x8000000000000000) == 0 && result >= v0)
      return v0;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SubviewsCollection()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of SubviewsCollection(v0);
  return v1;
}

uint64_t static SubviewsCollection._makeViewList(view:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<SubviewsCollection>, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.subscript.getter();
  return static _VariadicView_Children._makeViewList(view:inputs:)();
}

uint64_t static SubviewsCollection._viewListCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SubviewsCollection()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<SubviewsCollection>, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.subscript.getter();
  return static _VariadicView_Children._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance SubviewsCollection()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SubviewsCollectionSlice.subscript.getter(uint64_t result)
{
  uint64_t *v1;

  if (*v1 <= result && v1[1] > result)
    return _VariadicView_Children.subscript.getter();
  __break(1u);
  return result;
}

uint64_t SubviewsCollectionSlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = outlined init with copy of SubviewsCollection(v3 + 16, (uint64_t)(a3 + 2));
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t SubviewsCollectionSlice.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SubviewsCollectionSlice.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance SubviewsCollectionSlice@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 >= *v2 && v3 < v2[1])
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SubviewsCollectionSlice(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >= *v1 && v2 < v1[1])
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance SubviewsCollectionSlice(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance SubviewsCollectionSlice(void **a1, uint64_t (**a2)()))()
{
  _QWORD *v2;
  uint64_t (*result)();

  *a1 = malloc(0x60uLL);
  result = *a2;
  if ((uint64_t)*a2 >= *v2 && (uint64_t)result < v2[1])
  {
    _VariadicView_Children.subscript.getter();
    return protocol witness for Collection.subscript.read in conformance SubviewsCollectionSlice;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SubviewsCollectionSlice@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  result = outlined init with copy of SubviewsCollection(v2 + 16, (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v5;
  return result;
}

void protocol witness for Collection.indices.getter in conformance SubviewsCollectionSlice(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  if (v2 < *v1)
  {
    __break(1u);
  }
  else
  {
    *a1 = *v1;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SubviewsCollectionSlice()
{
  _QWORD *v0;

  return *v0 == v0[1];
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance SubviewsCollectionSlice@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 >= *v3 && v3[1] >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SubviewsCollectionSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance SubviewsCollectionSlice(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *result;
  v4 = *a2;
  v5 = *v2;
  v6 = v2[1];
  if (v6 < *a2 || v4 < v5 || v3 < v5 || v6 < v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t *)(v4 - v3);
  if (__OFSUB__(v4, v3))
LABEL_14:
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance SubviewsCollectionSlice@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  v3 = *result;
  v4 = v2[1];
  if (*result >= *v2)
  {
    v6 = __OFSUB__(v3, v4);
    v5 = v3 - v4 < 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v5 != v6)
    *a2 = v3 + 1;
  else
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance SubviewsCollectionSlice(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = v1[1];
  if (*result >= *v1)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 != v5)
    *result = v2 + 1;
  else
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SubviewsCollectionSlice@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  outlined init with copy of SubviewsCollectionSlice((uint64_t)v1, a1);
  v3 = *v1;
  result = outlined destroy of SubviewsCollectionSlice((uint64_t)v1);
  *(_QWORD *)(a1 + 72) = v3;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance SubviewsCollectionSlice()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  result = v1 - *v0;
  if (v1 < *v0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v1, *v0))
LABEL_5:
    __break(1u);
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance SubviewsCollectionSlice()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of SubviewsCollectionSlice((uint64_t)v0);
  return v1;
}

uint64_t static SubviewsCollectionSlice._makeViewList(view:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Slice<SubviewsCollection>>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
  lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  return static ForEach<>._makeViewList(view:inputs:)();
}

void type metadata accessor for _GraphValue<Slice<SubviewsCollection>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Slice<SubviewsCollection>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Slice<SubviewsCollection>>);
  }
}

uint64_t static SubviewsCollectionSlice._viewListCount(inputs:)()
{
  return 0;
}

uint64_t closure #1 in SubviewsCollectionSlice.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Subview(a1, a2);
}

double protocol witness for static Rule.initialValue.getter in conformance SubviewsCollectionSlice.Child@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SubviewsCollectionSlice.Child()
{
  uint64_t Value;
  _BYTE v2[72];

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  Value = AGGraphGetValue();
  outlined init with copy of Slice<SubviewsCollection>(Value, (uint64_t)v2);
  lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  return ForEach<>.init(_:content:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SubviewsCollectionSlice.Child()
{
  lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SubviewsCollection()
{
  return static View.makeImplicitRoot(view:inputs:)();
}

void protocol witness for View.body.getter in conformance SubviewsCollectionSlice()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SubviewsRoot.body(children:)@<X0>(uint64_t a1@<X0>, void (*a2)(_BYTE *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  _BYTE v20[56];

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v20[-v14 - 8];
  outlined init with copy of _VariadicView_Children(v16, (uint64_t)v20);
  a2(v20);
  outlined destroy of SubviewsCollection((uint64_t)v20);
  static ViewBuilder.buildExpression<A>(_:)(v11, a3, a4);
  v17 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v17(v11, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v15, a3);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance SubviewsRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>, a5);
  return static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance SubviewsRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>, a4);
  return static _VariadicView_MultiViewRoot._viewListCount(inputs:body:)();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance SubviewsRoot<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (**v3)(_BYTE *);

  return SubviewsRoot.body(children:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
  }
}

unint64_t lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<SubviewsCollection> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<SubviewsCollection> and conformance <> Slice<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<SubviewsCollection> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollectionSlice.Child, &unk_1E1AE3450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsCollectionSlice.Child, &unk_1E1AE3450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GroupElementsOfContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SubviewsCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection);
}

_UNKNOWN **base witness table accessor for View in SubviewsCollection()
{
  return &protocol witness table for SubviewsCollection;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SubviewsCollectionSlice()
{
  return lazy protocol witness table accessor for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>((unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<SubviewsCollectionSlice> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollectionSlice>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice, (uint64_t)&type metadata for SubviewsCollectionSlice);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC908], v6);
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in SubviewsCollectionSlice()
{
  return &protocol witness table for SubviewsCollectionSlice;
}

void type metadata completion function for GroupElementsOfContent()
{
  type metadata accessor for GroupElementsOfContent.Storage();
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupElementsOfContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = (uint64_t *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x38uLL)
    v6 = 56;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) != 0 && (v6 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    v12 = v6 + 1;
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t *))(v5 + 16))(a1, a2);
      v13 = 1;
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t *))(v14 - 8))(a1, a2);
      v15 = (void *)a2[5];
      v16 = a2[6];
      v4[5] = (uint64_t)v15;
      v4[6] = v16;
      v17 = v15;
      swift_bridgeObjectRetain();
      v13 = 0;
    }
    *((_BYTE *)v4 + v6) = v13;
    v18 = (_QWORD *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    v20 = (_QWORD *)(((unint64_t)v4 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v18;
    v20[1] = v19;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for GroupElementsOfContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_QWORD *)(v3 + 64) <= 0x38uLL)
    v4 = 56;
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X13 }
  }
  if (v5 == 1)
  {
    (*(void (**)(uint64_t))(v3 + 8))(a1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);

    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for GroupElementsOfContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x38uLL)
    v6 = 56;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, a2);
    v9 = 1;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    v11 = *(void **)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    v13 = v11;
    swift_bridgeObjectRetain();
    v9 = 0;
  }
  *(_BYTE *)(a1 + v6) = v9;
  v14 = (uint64_t *)((v6 + 8 + a2) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v14;
  v15 = v14[1];
  v17 = (_QWORD *)((v6 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  *v17 = v16;
  v17[1] = v15;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GroupElementsOfContent(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x38uLL)
    v7 = 56;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if ((_QWORD *)a1 != a2)
  {
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);

      swift_bridgeObjectRelease();
    }
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *(_BYTE *)(a1 + v7) = 1;
    }
    else
    {
      v12 = a2[3];
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, _QWORD *))(v12 - 8))(a1, a2);
      v13 = (void *)a2[5];
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + v7) = 0;
      v14 = v13;
      swift_bridgeObjectRetain();
    }
  }
  v15 = (_QWORD *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)a2 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for GroupElementsOfContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x38uLL)
    v6 = 56;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a1, a2);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + v6) = v9;
  *(_OWORD *)((v6 + 8 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v6 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for GroupElementsOfContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x38uLL)
    v7 = 56;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);

      swift_bridgeObjectRelease();
    }
    v10 = *(unsigned __int8 *)(a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(a1 + v7) = v12;
  }
  *(_OWORD *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v7 + 8 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupElementsOfContent(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x38)
    v3 = 56;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  v7 = v6 & 0xFFFFFFF8;
  v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 4)
  {
    v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else if (v10 == 2)
  {
    v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else
  {
    v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      v4 = *(_QWORD *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF)
        LODWORD(v4) = -1;
      return (v4 + 1);
    }
  }
  v12 = v11 - 1;
  if (v7)
  {
    v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void storeEnumTagSinglePayload for GroupElementsOfContent(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x38)
    v5 = 56;
  if (a3 < 0)
  {
    v7 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFE8)
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v6 = 1;
    else
      v6 = v8;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X11 }
  }
  else
  {
    v6 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v9 = a2 ^ 0x80000000;
    bzero(a1, (v5 & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v9;
  }
  __asm { BR              X10 }
}

void sub_187278894(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x187278880);
  JUMPOUT(0x18727886CLL);
}

void sub_1872788A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187278880);
}

void sub_1872788A8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187278880);
}

ValueMetadata *type metadata accessor for SubviewsCollection()
{
  return &type metadata for SubviewsCollection;
}

uint64_t destroy for SubviewsCollectionSlice(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
  v5 = *(void **)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SubviewsCollectionSlice(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  v4 = (void *)a2[7];
  v5 = (void *)a1[7];
  a1[7] = v4;
  v6 = v4;

  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SubviewsCollectionSlice(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubviewsCollectionSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubviewsCollectionSlice()
{
  return &type metadata for SubviewsCollectionSlice;
}

uint64_t sub_187278AC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v5 = a1[2];
  v4 = a1[3];
  v6 = type metadata accessor for SubviewsRoot(255, a1[1], v4, a4);
  v7 = type metadata accessor for _VariadicView.Tree();
  v8 = type metadata accessor for _ConditionalContent();
  v11[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>, v6);
  v11[1] = v5;
  v10[0] = v4;
  v10[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v7, v11);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v8, v10);
}

void *type metadata accessor for SubviewsCollectionSlice.Child()
{
  return &unk_1E1AE3450;
}

uint64_t type metadata completion function for GroupElementsOfContent.Storage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupElementsOfContent.Storage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  id v14;

  v4 = (uint64_t *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x38uLL)
    v6 = 56;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v6 + 1) > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
      v10 = *(_DWORD *)a2 + 2;
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t *))(v5 + 16))(a1, a2);
      *((_BYTE *)v4 + v6) = 1;
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v11;
      (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1, a2);
      v12 = (void *)a2[5];
      v13 = a2[6];
      v4[5] = (uint64_t)v12;
      v4[6] = v13;
      *((_BYTE *)v4 + v6) = 0;
      v14 = v12;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for GroupElementsOfContent.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x38)
    v4 = 56;
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X14 }
  }
  if (v5 == 1)
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(a1);
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupElementsOfContent.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  id v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x38uLL)
    v6 = 56;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, a2);
    v9 = 1;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    v11 = *(void **)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    v13 = v11;
    swift_bridgeObjectRetain();
    v9 = 0;
  }
  *(_BYTE *)(a1 + v6) = v9;
  return a1;
}

uint64_t assignWithCopy for GroupElementsOfContent.Storage(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  if ((_QWORD *)a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x38uLL)
      v7 = 56;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);

      swift_bridgeObjectRelease();
    }
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *(_BYTE *)(a1 + v7) = 1;
    }
    else
    {
      v12 = a2[3];
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, _QWORD *))(v12 - 8))(a1, a2);
      v13 = (void *)a2[5];
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + v7) = 0;
      v14 = v13;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for GroupElementsOfContent.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x38uLL)
    v5 = 56;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(uint64_t))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t assignWithTake for GroupElementsOfContent.Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x38uLL)
      v7 = 56;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);

      swift_bridgeObjectRelease();
    }
    v10 = *(unsigned __int8 *)(a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupElementsOfContent.Storage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 56;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x38uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187279400 + 4 * byte_187C1A7C5[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for GroupElementsOfContent.Storage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x38)
    v5 = 56;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for GroupElementsOfContent.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 56;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x38uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18727963C + 4 * byte_187C1A7D3[v3]))();
}

void destructiveInjectEnumTag for GroupElementsOfContent.Storage(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x38uLL)
    v4 = 56;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t instantiation function for generic protocol witness table for SubviewsRoot<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubviewsRoot<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in SubviewsRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of Slice<SubviewsCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Subview and conformance Subview()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Subview and conformance Subview;
  if (!lazy protocol witness table cache variable for type Subview and conformance Subview)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Subview, &type metadata for Subview);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview and conformance Subview);
  }
  return result;
}

uint64_t outlined destroy of SubviewsCollection?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SubviewsCollection?, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1872798F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.layoutDirection.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187279934()
{
  return EnvironmentValues.layoutDirection.setter();
}

void type metadata accessor for _GraphValue<_LayoutDirectionBehaviorEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_LayoutDirectionBehaviorEffect>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_LayoutDirectionBehaviorEffect>);
  }
}

_BYTE *_LayoutDirectionBehaviorEffect.init(behavior:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t View.layoutDirectionBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = *a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _LayoutDirectionBehaviorEffect, a3);
}

void _LayoutDirectionBehaviorEffect.behavior.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_LayoutDirectionBehaviorEffect.behavior.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_LayoutDirectionBehaviorEffect.behavior.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for ViewModifier.body(content:) in conformance _LayoutDirectionBehaviorEffect()
{
  specialized ViewModifier.bodyError()();
}

uint64_t protocol witness for Rule.value.getter in conformance FlipForRTLEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return FlipForRTLEnvironment.value.getter(a1);
}

double protocol witness for static Rule.initialValue.getter in conformance FlipForRTLTransform@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void protocol witness for Rule.value.getter in conformance FlipForRTLTransform(uint64_t a1@<X8>)
{
  FlipForRTLTransform.value.getter(a1);
}

_BYTE *protocol witness for Rule.value.getter in conformance FlipForRTLFrame@<X0>(_QWORD *a1@<X8>)
{
  return FlipForRTLFrame.value.getter(a1);
}

__n128 protocol witness for Rule.value.getter in conformance FlipForRTLContainerPosition@<Q0>(__n128 *a1@<X8>)
{
  int v2;
  __n128 result;
  __n128 *Value;

  v2 = *(unsigned __int8 *)AGGraphGetValue();
  if (v2 == 2 || ((v2 & 1) == 0) == *(_BYTE *)AGGraphGetValue())
  {
    Value = (__n128 *)AGGraphGetValue();
    result = *Value;
    *a1 = *Value;
  }
  else
  {
    ViewOrigin.init()();
  }
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance FlipForRTLDisplayList(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 8) = 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in _LayoutDirectionBehaviorEffect()
{
  return &protocol witness table for _LayoutDirectionBehaviorEffect;
}

uint64_t storeEnumTagSinglePayload for _LayoutDirectionBehaviorEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187279B7C + 4 * byte_187C1AE85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187279BB0 + 4 * byte_187C1AE80[v4]))();
}

uint64_t sub_187279BB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187279BB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187279BC0);
  return result;
}

uint64_t sub_187279BCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187279BD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187279BD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187279BE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _LayoutDirectionBehaviorEffect()
{
  return &type metadata for _LayoutDirectionBehaviorEffect;
}

uint64_t sub_187279BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _LayoutDirectionBehaviorEffect;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for FlipForRTLDisplayList()
{
  return &unk_1E1B19DF0;
}

void *type metadata accessor for FlipForRTLContainerPosition()
{
  return &unk_1E1AF2EE0;
}

void *type metadata accessor for FlipForRTLFrame()
{
  return &unk_1E1ABB298;
}

void *type metadata accessor for FlipForRTLTransform()
{
  return &unk_1E1ACDD80;
}

void *type metadata accessor for FlipForRTLEnvironment()
{
  return &unk_1E1AD7170;
}

uint64_t sub_187279E08()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ArchivesInteractiveControlsEffect()
{
  return &type metadata for ArchivesInteractiveControlsEffect;
}

_UNKNOWN **base witness table accessor for ViewModifier in ArchivesInteractiveControlsEffect()
{
  return &protocol witness table for ArchivesInteractiveControlsEffect;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance ArchivesInteractiveControlsEffect(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 2;
}

void protocol witness for _RendererEffect.scrapeableContent.getter in conformance ArchivesInteractiveControlsEffect(_QWORD *a1@<X8>)
{
  *a1 = 0xF000000000000007;
}

unint64_t lazy protocol witness table accessor for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivesInteractiveControlsEffect, &type metadata for ArchivesInteractiveControlsEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivesInteractiveControlsEffect, &type metadata for ArchivesInteractiveControlsEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivesInteractiveControlsEffect, &type metadata for ArchivesInteractiveControlsEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivesInteractiveControlsEffect, &type metadata for ArchivesInteractiveControlsEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivesInteractiveControlsEffect, &type metadata for ArchivesInteractiveControlsEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivesInteractiveControlsEffect()
{
  lazy protocol witness table accessor for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect();
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance ArchivesInteractiveControlsEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id SwiftUISearchController._searchBar.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar);
  }
  else
  {
    v4 = closure #1 in SwiftUISearchController._searchBar.getter(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id closure #1 in SwiftUISearchController._searchBar.getter(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  type metadata accessor for UIKitSearchBar();
  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v3 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator);
  swift_unknownObjectWeakAssign();
  v4 = v3;
  objc_msgSend(v2, sel_setDelegate_, v4);
  v5 = objc_msgSend(v2, sel_searchTextField);
  objc_msgSend(v5, sel_setDelegate_, v4);

  v6 = objc_msgSend(v2, sel_searchTextField);
  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v4, sel_primaryActionTriggered_, 0x2000);

  return v2;
}

void SwiftUISearchController.customAccessoryRecoveryGesture.didset(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = v1;
  v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture;
  v4 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture];
  if (!a1)
  {
    if (!v4)
      return;
LABEL_7:
    v11 = v4;
    v12 = objc_msgSend(v2, sel_searchBar);
    v13 = objc_msgSend(v12, sel_searchTextField);

    objc_msgSend(v13, sel_addGestureRecognizer_, v11);
    return;
  }
  v5 = a1;
  if (!v4
    || (type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITapGestureRecognizer),
        v6 = v4,
        v5 = v5,
        v7 = static NSObject.== infix(_:_:)(),
        v5,
        v6,
        (v7 & 1) == 0))
  {
    v8 = v5;
    v9 = objc_msgSend(v2, sel_searchBar);
    v10 = objc_msgSend(v9, sel_searchTextField);

    objc_msgSend(v10, sel_removeGestureRecognizer_, v8);
    v4 = *(void **)&v2[v3];
    if (v4)
      goto LABEL_7;
  }
}

char *SwiftUISearchController.init()()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v1 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem];
  v2 = type metadata accessor for ToolbarStorage.SearchItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive] = 2;
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated] = 2;
  v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator;
  v4 = objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0));
  v5 = v0;
  *(_QWORD *)&v0[v3] = objc_msgSend(v4, sel_init);
  v6 = &v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  *(_QWORD *)v6 = 0;
  v6[8] = -1;
  v7 = &v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture] = 0;
  v9 = &v5[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_QWORD *)v9 + 10) = 0;

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  v10 = (char *)objc_msgSendSuper2(&v13, sel_initWithSearchResultsController_, 0);
  *(_QWORD *)(*(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator]
            + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_delegate
            + 8) = &protocol witness table for UISearchController;
  swift_unknownObjectWeakAssign();
  v11 = v10;
  objc_msgSend(v11, sel_setObscuresBackgroundDuringPresentation_, 0);
  objc_msgSend(v11, sel_setDelegate_, v11);
  objc_msgSend(v11, sel_setSearchResultsUpdater_, v11);

  return v11;
}

uint64_t SwiftUISearchController.update(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  unsigned __int8 *v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  char v80;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93[12];

  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v90 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v87 = (uint64_t)&v82 - v7;
  v8 = MEMORY[0x1E0CE75A0];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v89 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v82 - v11;
  v13 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v85 = *((_QWORD *)v13 - 1);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v91 = (uint64_t)&v82 - v19;
  v20 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  LODWORD(v88) = *(unsigned __int8 *)(a1 + v20[12]);
  outlined init with copy of TableRowList?(a1, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)v8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v83 = v20;
  v21 = v20[5];
  v84 = a1;
  v22 = *(_QWORD *)(a1 + v21);
  v23 = a1 + v20[8];
  v25 = *(_QWORD *)v23;
  v24 = *(_QWORD *)(v23 + 8);
  v26 = *(_BYTE *)(v23 + 16);
  v27 = *(_QWORD *)(v23 + 24);
  v28 = &v16[v13[6]];
  *(_QWORD *)v28 = 0;
  v28[8] = -1;
  v29 = v13[7];
  v16[v29] = 1;
  outlined init with copy of TableRowList?((uint64_t)v12, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (v22)
    v30 = 1;
  else
    v30 = -1;
  LODWORD(v82) = v30;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v25, v24, v26);
  swift_bridgeObjectRetain();
  outlined destroy of TableRowList?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined consume of PlatformItemCollection?(*(_QWORD *)v28, v28[8]);
  *(_QWORD *)v28 = v22;
  v28[8] = v82;
  v16[v29] = 1;
  v31 = &v16[v13[8]];
  *(_QWORD *)v31 = v25;
  *((_QWORD *)v31 + 1) = v24;
  v31[16] = v26;
  *((_QWORD *)v31 + 3) = v27;
  v32 = v91;
  outlined init with take of TableCellFormula((uint64_t)v16, v91, type metadata accessor for SearchFieldConfiguration);
  v33 = v87;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, v87, type metadata accessor for SearchFieldConfiguration);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v85 + 56))(v33, 0, 1, v13);
  v34 = v86;
  v35 = (uint64_t)&v86[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  swift_beginAccess();
  outlined assign with take of SearchFieldConfiguration?(v33, v35);
  swift_endAccess();
  v36 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator;
  v37 = *(id *)&v34[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator];
  v38 = (unsigned __int8 *)SwiftUISearchController._searchBar.getter();
  v39 = v83;
  v40 = v84;
  v41 = (uint64_t *)(v84 + v83[9]);
  v42 = v41[1];
  v93[0] = *v41;
  v43 = v93[0];
  v93[1] = v42;
  v87 = v42;
  swift_retain();
  v85 = v43;
  swift_retain();
  UIKitSearchBarCoordinator.updateSearchBar(_:to:in:)(v38, v91, v93);
  swift_release();
  swift_release();

  v44 = *(id *)&v34[v36];
  v45 = SwiftUISearchController._searchBar.getter();
  v46 = v40 + v39[6];
  v82 = *(_QWORD *)v46;
  LODWORD(v43) = *(unsigned __int8 *)(v46 + 8);
  v47 = *(id *)&v34[v36];
  UIKitSearchBarCoordinator.resolvedTokenScopes.getter();
  v49 = v48;
  LOBYTE(v36) = v50;

  outlined init with take of Binding<SearchFieldState>(v40 + v39[11], (uint64_t)v93, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v51 = v34;
  outlined retain of BoundInputsView?(v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of BoundInputsView?);
  specialized UIKitSearchScopeCoordinating<>.updateScopes(_:newScopes:newTokenScopes:customScopeBar:customScopeBarUpdate:)(v45, v82, v43, v49, v36, (uint64_t)v93, (uint64_t)v44, (uint64_t)v51, v88);

  outlined consume of PlatformItemCollection?(v49, v36);
  outlined retain of BoundInputsView?(v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of BoundInputsView?);
  v52 = v40 + v39[7];
  v53 = *(_QWORD *)v52;
  v54 = &v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  v55 = *(_QWORD *)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  v56 = *(_BYTE *)(v52 + 8);
  *(_QWORD *)v54 = *(_QWORD *)v52;
  LOBYTE(v47) = v54[8];
  v54[8] = v56;
  outlined copy of PlatformItemCollection?(v53, v56);
  outlined consume of PlatformItemCollection?(v55, v47);
  SwiftUISearchController.updateSuggestions()();
  v57 = v40 + v39[13];
  v58 = *(void **)v57;
  v59 = *(_QWORD *)(v57 + 8);
  v60 = *(_QWORD *)(v57 + 16);
  v61 = *(_QWORD *)(v57 + 24);
  v62 = *(void **)(v57 + 32);
  v63 = *(_QWORD *)(v57 + 40);
  v64 = *(_QWORD *)(v57 + 48);
  v65 = *(_QWORD *)(v57 + 56);
  v66 = *(_QWORD *)(v57 + 64);
  v67 = *(_QWORD *)(v57 + 72);
  v68 = *(_QWORD *)(v57 + 80);
  v69 = &v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  v70 = *(_QWORD *)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  v71 = *(_QWORD *)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 8];
  v72 = *(_QWORD *)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 16];
  v73 = *(_QWORD *)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 24];
  v74 = *(void **)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 32];
  v88 = *(_OWORD *)&v51[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent + 64];
  *(_QWORD *)v69 = v58;
  *((_QWORD *)v69 + 1) = v59;
  *((_QWORD *)v69 + 2) = v60;
  *((_QWORD *)v69 + 3) = v61;
  *((_QWORD *)v69 + 4) = v62;
  *((_QWORD *)v69 + 5) = v63;
  *((_QWORD *)v69 + 6) = v64;
  *((_QWORD *)v69 + 7) = v65;
  *((_QWORD *)v69 + 8) = v66;
  *((_QWORD *)v69 + 9) = v67;
  *((_QWORD *)v69 + 10) = v68;
  outlined copy of BoundInputsView?(v58, v59, v60, v61, v62);
  v75 = v74;
  v76 = v87;
  outlined consume of BoundInputsView?(v70, v71, v72, v73, v75);
  SwiftUISearchController.updateCustomAccessory()();
  SwiftUISearchController.updateCustomAccessoryRecoveryGesture()();
  SwiftUISearchController.updateSuggestions()();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey);
  swift_retain();
  if (v76)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    SwiftUISearchController.updateScopesActivation(to:)(v92);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
    swift_release_n();
    SwiftUISearchController.updateScopesActivation(to:)(v92);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchPresentationToolbarBehaviorKey);
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  v77 = v92;
  if (v77 == objc_msgSend(v51, sel_hidesNavigationBarDuringPresentation))
    objc_msgSend(v51, sel_setHidesNavigationBarDuringPresentation_, v77 ^ 1u);
  v78 = v90;
  v79 = v91;
  MEMORY[0x18D75B9C8](v89);
  v80 = *v78 != 2;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  SwiftUISearchController.enqueueIsActiveUpdate(_:)(v80);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, type metadata accessor for SearchFieldConfiguration);
}

void closure #1 in SwiftUISearchController.update(to:)(__int128 *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t (*v4)();
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t (*v13)();
  _BYTE *v14;
  _BOOL4 v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  int v31;
  id v32;
  __int128 aBlock;
  void *v34;
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v29 = (void *)*((unsigned int *)a1 + 4);
  v31 = a3;
  v5 = (void *)*((_QWORD *)a1 + 3);
  v4 = (uint64_t (*)())*((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 5);
  v7 = *((unsigned int *)a1 + 12);
  v9 = *((_QWORD *)a1 + 7);
  v8 = *((_QWORD *)a1 + 8);
  v11 = *((_QWORD *)a1 + 9);
  v10 = *((_QWORD *)a1 + 10);
  v12 = SwiftUISearchController._searchBar.getter();
  aBlock = *a1;
  v34 = v29;
  v35 = v5;
  v36 = v4;
  v37 = v6;
  v38 = v7;
  v39 = v9;
  v40 = v8;
  v41 = v11;
  v42 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = v4;
  UIKitSearchBar.updateCustomScopeBarView(_:)((uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  v14 = SwiftUISearchController._searchBar.getter();
  v15 = v14[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] != 1;
  v14[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] = a3;
  if ((v31 == 1) == v15 && (v16 = *(void **)&v14[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost]) != 0)
  {
    v17 = a3 == 1;
    v32 = v14;
    v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_BYTE *)(v19 + 24) = v17;
    *(_QWORD *)(v19 + 32) = v16;
    v20 = v16;
    objc_msgSend(v20, sel_setHidden_, 0);
    v21 = (void *)objc_opt_self();
    v22 = swift_allocObject();
    *(_BYTE *)(v22 + 16) = v17;
    *(_QWORD *)(v22 + 24) = v20;
    *(_QWORD *)(v22 + 32) = closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)partial apply;
    *(_QWORD *)(v22 + 40) = v19;
    v36 = closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)partial apply;
    v37 = v22;
    v23 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v34 = thunk for @escaping @callee_guaranteed () -> ();
    v35 = &block_descriptor_33;
    v24 = _Block_copy(&aBlock);
    v25 = v20;
    swift_retain();
    swift_release();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v25;
    *(_BYTE *)(v26 + 24) = v17;
    v36 = closure #3 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)partial apply;
    v37 = v26;
    *(_QWORD *)&aBlock = v23;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v34 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v35 = &block_descriptor_40;
    v27 = _Block_copy(&aBlock);
    v28 = v25;
    swift_release();
    objc_msgSend(v21, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 0, v24, v27, 0.35, 0.0);
    swift_release();

    _Block_release(v27);
    _Block_release(v24);

  }
  else
  {

  }
}

void @objc SwiftUISearchController.viewDidAppear(_:)(void *a1, uint64_t a2, uint64_t a3, const char **a4, void (*a5)(id))
{
  const char *v8;
  id v9;
  id v10;
  objc_super v11;

  v11.receiver = a1;
  v11.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  v8 = *a4;
  v9 = v11.receiver;
  v10 = objc_msgSendSuper2(&v11, v8, a3);
  a5(v10);

}

void SwiftUISearchController.updateCustomAccessory()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  Class v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  Class isa;
  _QWORD v71[3];
  char *v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v1 = v0;
  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)v71 - v15;
  v17 = objc_msgSend(v1, sel_viewIfLoaded, v14);
  v18 = objc_msgSend(v17, sel_window);

  v19 = &v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  v20 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  if (!v20)
    goto LABEL_7;
  v22 = *((_QWORD *)v19 + 1);
  v21 = *((_QWORD *)v19 + 2);
  v24 = *((_QWORD *)v19 + 3);
  v23 = (void *)*((_QWORD *)v19 + 4);
  v26 = *((_QWORD *)v19 + 5);
  v25 = *((_QWORD *)v19 + 6);
  v27 = *((_QWORD *)v19 + 7);
  v28 = *((_QWORD *)v19 + 8);
  v30 = *((_QWORD *)v19 + 9);
  v29 = *((_QWORD *)v19 + 10);
  *(_QWORD *)&v87 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  *((_QWORD *)&v87 + 1) = v22;
  LODWORD(v88) = v21;
  *((_QWORD *)&v88 + 1) = v24;
  *(_QWORD *)&v89 = v23;
  *((_QWORD *)&v89 + 1) = v26;
  LODWORD(v90) = v25;
  *((_QWORD *)&v90 + 1) = v27;
  *(_QWORD *)&v91 = v28;
  *((_QWORD *)&v91 + 1) = v30;
  v92 = v29;
  if (!v18)
  {
LABEL_7:
    v34 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost;
    v35 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost];
    if (v35)
    {
      objc_msgSend(v35, sel_dismissViewControllerAnimated_completion_, 1, 0);
      v36 = *(char **)&v1[v34];
    }
    else
    {
      v36 = 0;
    }
    *(_QWORD *)&v1[v34] = 0;
    goto LABEL_11;
  }
  v82 = v29;
  v81 = v28;
  v78 = v22;
  v79 = v21;
  v83 = v23;
  v84 = v26;
  v80 = v25;
  v85 = v27;
  v31 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  swift_beginAccess();
  outlined init with copy of TableRowList?(v31, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6))
  {
    outlined destroy of TableRowList?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    goto LABEL_7;
  }
  v76 = v30;
  v77 = v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v32 = v83;
  v75 = v83;
  outlined destroy of TableRowList?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
  v33 = *v5;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if ((v33 & 1) == 0)
  {
    outlined consume of BoundInputsView?((uint64_t)v20, v78, v79, v77, v32);
    goto LABEL_7;
  }
  v37 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost;
  v38 = *(char **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost];
  if (v38)
  {
    v72 = *(char **)&v38[direct field offset for UIHostingController.host];
    v39 = *(_QWORD *)v72;
    v75 = v38;
    v40 = &v72[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & v39) + 0x60)];
    swift_beginAccess();
    v73 = (id)*((_QWORD *)v40 + 4);
    v74 = *((_QWORD *)v40 + 5);
    v71[2] = *((_QWORD *)v40 + 7);
    v71[1] = *((_QWORD *)v40 + 10);
    v41 = v90;
    *((_OWORD *)v40 + 2) = v89;
    *((_OWORD *)v40 + 3) = v41;
    *((_OWORD *)v40 + 4) = v91;
    *((_QWORD *)v40 + 10) = v92;
    v42 = v88;
    *(_OWORD *)v40 = v87;
    *((_OWORD *)v40 + 1) = v42;
    v43 = v78;
    v44 = v79;
    v45 = v77;
    v46 = v83;
    outlined copy of BoundInputsView?(v20, v78, v79, v77, v83);
    outlined copy of BoundInputsView?(v20, v43, v44, v45, v46);
    v75 = v75;
    v72 = v72;
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    LOWORD(v86) = 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>(v47, v48, v49, v50);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    v51 = v78;
    v52 = v79;
    v53 = v77;
    v54 = v83;
    outlined consume of BoundInputsView?((uint64_t)v20, v78, v79, v77, v83);
    outlined consume of BoundInputsView?((uint64_t)v20, v51, v52, v53, v54);

    v36 = v72;
LABEL_11:

    return;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v56 = objc_allocWithZone(v55);
  v57 = v75;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v58 = specialized UIHostingController.init(rootView:)((uint64_t)&v87);
  v59 = v77;
  outlined consume of BoundInputsView?((uint64_t)v20, v78, v79, v77, v83);
  v60 = *(void **)&v1[v37];
  *(_QWORD *)&v1[v37] = v58;
  v61 = v58;

  v62 = (_QWORD *)((char *)v61 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  v63 = *v62;
  *v62 = 1;
  v86 = v63;
  (*(void (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x398))(&v86);
  objc_msgSend(v61, sel_setModalPresentationStyle_, 7);
  v64 = objc_msgSend(v61, sel_popoverPresentationController);
  v65 = v64;
  if (v64)
  {
    v66 = v64;
    v67 = objc_msgSend(v1, sel_searchBar);
    objc_msgSend(v66, sel_setSourceView_, v67);

    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = xmmword_187BFF9C0;
    v69 = v66;
    *(_QWORD *)(v68 + 32) = objc_msgSend(v1, sel_searchBar);
    v86 = v68;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v69, sel_setPassthroughViews_, isa);

    objc_msgSend(v69, sel_setDelegate_, v1);
  }
  objc_msgSend(v1, sel_presentViewController_animated_completion_, v61, 1, 0);
  outlined consume of BoundInputsView?((uint64_t)v20, v78, v79, v59, v83);

}

id SwiftUISearchController.updateCustomAccessoryRecoveryGesture()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  id result;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (unsigned __int8 *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v25 - v14;
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent);
  v17 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture;
  v18 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture);
  if ((v16 != 0) == (v18 == 0))
  {
    if (v16)
    {
      v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v0, sel_handleCustomAccessoryRecoveryGesture);
      v20 = *(void **)(v0 + v17);
      *(_QWORD *)(v0 + v17) = v19;
      v18 = v19;
      SwiftUISearchController.customAccessoryRecoveryGesture.didset(v20);

    }
    else
    {
      *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture) = 0;
      SwiftUISearchController.customAccessoryRecoveryGesture.didset(v18);
    }

  }
  v21 = v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration;
  swift_beginAccess();
  outlined init with copy of TableRowList?(v21, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    outlined destroy of TableRowList?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    goto LABEL_9;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
  outlined destroy of TableRowList?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for SearchFieldConfiguration);
  v22 = *v5;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v22 == 2)
  {
LABEL_9:
    v23 = 0;
    result = *(id *)(v1 + v17);
    if (!result)
      return result;
    return objc_msgSend(result, sel_setEnabled_, v23);
  }
  v23 = (v22 & 1) == 0;
  result = *(id *)(v1 + v17);
  if (!result)
    return result;
  return objc_msgSend(result, sel_setEnabled_, v23);
}

Swift::Void __swiftcall SwiftUISearchController.handleCustomAccessoryRecoveryGesture()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v1 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v24 - v7;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v24 - v13;
  v15 = MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v24 - v18;
  v20 = v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  outlined init with copy of TableRowList?(v20, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)v15, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v21 = type metadata accessor for ToolbarStorage.SearchItem(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v19, 1, v21) != 1)
  {
    outlined init with copy of TableRowList?((uint64_t)v19, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    MEMORY[0x18D75B9C8](v11);
    if (*v8 != 2)
    {
      v22 = v8[2];
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v22 == 2)
      {
        v23 = v4[3];
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        if (v23 == 2 || (v23 & 1) == 0)
          goto LABEL_7;
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        if ((v22 & 1) == 0)
          goto LABEL_7;
      }
      *v8 = 1;
    }
LABEL_7:
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    outlined destroy of TableRowList?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, type metadata accessor for ToolbarStorage.SearchItem);
    return;
  }
  __break(1u);
}

void SwiftUISearchController.updateSuggestions()()
{
  uint64_t (*v0)();
  uint64_t (*v1)();
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Class v20;
  uint64_t WeakValue;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  objc_class *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t (*v33)();
  char *v34;
  uint64_t v35;
  Class isa;
  objc_super v37;
  unint64_t v38;

  v1 = v0;
  v2 = type metadata accessor for PlatformItemList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (void **)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (objc_class *)((char *)&v32 - v9);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v32 - v14;
  if (*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent))
  {
    type metadata accessor for UISearchSuggestion();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_setSearchSuggestions_, isa);

    return;
  }
  v35 = v2;
  isa = v10;
  v16 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions + 8);
  v17 = MEMORY[0x1E0DEE9D8];
  if (v16 != 255)
  {
    v33 = v1;
    v18 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions);
    v38 = MEMORY[0x1E0DEE9D8];
    if ((v16 & 1) != 0)
    {
      outlined copy of PlatformItemCollection.Storage(v18, 1);
      swift_bridgeObjectRetain();
    }
    v19 = 0;
    v20 = isa;
    v34 = v15;
    while (1)
    {
      if ((v16 & 1) != 0)
      {
        outlined copy of PlatformItemCollection?(v18, v16);
        v22 = *(_QWORD *)(v18 + 16);
        swift_bridgeObjectRelease();
        if (v19 == v22)
          goto LABEL_26;
        outlined copy of PlatformItemCollection?(v18, v16);
        v23 = v18;
      }
      else
      {
        WeakValue = AGGraphGetWeakValue();
        if (WeakValue)
        {
          if (v19 == *(_QWORD *)(*(_QWORD *)WeakValue + 16))
            goto LABEL_26;
        }
        else
        {
          v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          swift_bridgeObjectRelease();
          if (v19 == v24)
          {
LABEL_26:
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v35);
            outlined consume of PlatformItemCollection?(v18, v16);
            v17 = v38;
            outlined consume of PlatformItemCollection?(v18, v16);
            v1 = v33;
            goto LABEL_27;
          }
        }
        v25 = (uint64_t *)AGGraphGetWeakValue();
        if (v25)
        {
          v23 = *v25;
          swift_bridgeObjectRetain();
        }
        else
        {
          v23 = MEMORY[0x1E0DEE9D8];
        }
      }
      if (v19 >= *(_QWORD *)(v23 + 16))
      {
        __break(1u);
LABEL_31:
        type metadata accessor for UISearchSuggestion();
        swift_bridgeObjectRetain();
        _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v19, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v35);
      outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v26 = (objc_class *)type metadata accessor for UIKitSearchSuggestion(0);
      v27 = objc_allocWithZone(v26);
      v28 = *v6;
      if (!*v6)
        goto LABEL_8;
      v29 = v27;

      if ((unint64_t)v6[51] < 2)
        break;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v29 + OBJC_IVAR____TtC7SwiftUI21UIKitSearchSuggestion_platformItem, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);

      v37.receiver = v29;
      v37.super_class = v26;
      objc_msgSendSuper2(&v37, sel_init);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v20 = isa;
      v30 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)isa, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      MEMORY[0x18D75CF58](v30);
      v1 = *(uint64_t (**)())((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v1 >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v15 = v34;
LABEL_9:
      ++v19;
    }

LABEL_8:
    v1 = type metadata accessor for PlatformItemList.Item;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    swift_deallocPartialClassInstance();
    v20 = isa;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)isa, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    goto LABEL_9;
  }
LABEL_27:
  if (v17 >> 62)
    goto LABEL_31;
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  type metadata accessor for UISearchSuggestion();
LABEL_29:
  swift_bridgeObjectRelease();
  type metadata accessor for UISearchSuggestion();
  v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setSearchSuggestions_, v31);

}

void SwiftUISearchController.updateScopesActivation(to:)(char a1)
{
  void *v1;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unsigned int v7;
  id v8;

  v3 = a1 - 2;
  if ((a1 - 2) > 2u)
    v4 = 1;
  else
    v4 = qword_187C1B588[(char)v3];
  if ((id)v4 != objc_msgSend(v1, sel_scopeBarActivation))
    objc_msgSend(v1, sel_setScopeBarActivation_, v4);
  if (v3 >= 3u)
  {
    v5 = a1 & 1;
    v6 = objc_msgSend(v1, sel_searchBar);
    v7 = objc_msgSend(v6, sel_showsScopeBar);

    if ((_DWORD)v5 != v7)
    {
      v8 = objc_msgSend(v1, sel_searchBar);
      objc_msgSend(v8, sel_setShowsScopeBar_, v5);

    }
  }
}

void SwiftUISearchController.enqueueIsActiveUpdate(_:)(char a1)
{
  _BYTE *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[6];

  v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive] = a1;
  v2 = (void *)MEMORY[0x18D760234](&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_targetController]);
  if (v2
    && (v3 = v2,
        v4 = objc_msgSend(v2, sel_transitionCoordinator),
        v3,
        v4))
  {
    v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v9[4] = partial apply for closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:);
    v9[5] = v5;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v9[3] = &block_descriptor_21;
    v6 = _Block_copy(v9);
    swift_release();
    objc_msgSend(v4, sel_animateAlongsideTransition_completion_, 0, v6);
    _Block_release(v6);
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = objc_msgSend(v1, sel_searchBar);
    v8 = objc_msgSend(v7, sel_window);

    if (v8)
    {

      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release_n();
    }
  }
}

void closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = (void *)v3;
    SwiftUISearchController.flushPendingIsActive()();

  }
}

void closure #2 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    SwiftUISearchController.flushPendingIsActive()();

  }
}

void SwiftUISearchController.flushPendingIsActive()()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  id v7;
  _BYTE *v8;
  int v9;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_isActive);
  v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive;
  v4 = v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive];
  v5 = v4 & 1;
  if (v4 != 2 && v2 != (_DWORD)v5)
  {
    objc_msgSend(v0, sel_setActive_, v5);
    v7 = *(id *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator];
    v8 = SwiftUISearchController._searchBar.getter();
    v9 = v8[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive];
    v8[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = v5;
    if (((_DWORD)v5 != 0) != v9)
      UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(v5, 0);
    UIKitSearchBar.enqueueFirstResponderUpdate(_:)(v5);

  }
  v1[v3] = 2;
}

void SwiftUISearchController.flushPendingIsActiveAnimated()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char *v3;
  void *v4;
  char v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;

  v1 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated);
  if (v2 != 2)
  {
    v3 = (char *)SwiftUISearchController._searchBar.getter();
    v4 = v3;
    v5 = v2 ^ v3[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive];
    v3[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = v2 & 1;
    if ((v5 & 1) != 0)
    {
      v6 = *(void **)&v3[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost];
      if (v6)
      {
        v7 = (v2 & 1) != 0 && v3[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarVisibility] != 2;
        v8 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v9 = swift_allocObject();
        *(_QWORD *)(v9 + 16) = v8;
        *(_BYTE *)(v9 + 24) = v7;
        *(_QWORD *)(v9 + 32) = v6;
        v10 = v6;
        objc_msgSend(v10, sel_setHidden_, 0);
        v11 = (void *)objc_opt_self();
        v12 = swift_allocObject();
        *(_BYTE *)(v12 + 16) = v7;
        *(_QWORD *)(v12 + 24) = v10;
        *(_QWORD *)(v12 + 32) = partial apply for closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
        *(_QWORD *)(v12 + 40) = v9;
        v23 = partial apply for closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:);
        v24 = v12;
        v13 = MEMORY[0x1E0C809B0];
        v19 = MEMORY[0x1E0C809B0];
        v20 = 1107296256;
        v21 = thunk for @escaping @callee_guaranteed () -> ();
        v22 = &block_descriptor_19;
        v14 = _Block_copy(&v19);
        v15 = v10;
        swift_retain();
        swift_release();
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = v15;
        *(_BYTE *)(v16 + 24) = v7;
        v23 = _s7SwiftUI14UIKitSearchBarC017updateCustomScopeE8IsActive33_DD1B478EFBEC48643453E85892C2D0E2LL_10isAnimatedySb_SbtFySbcfU1_TA_0;
        v24 = v16;
        v19 = v13;
        v20 = 1107296256;
        v21 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
        v22 = &block_descriptor_14_0;
        v17 = _Block_copy(&v19);
        v18 = v15;
        swift_release();
        objc_msgSend(v11, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 0, v14, v17, 0.35, 0.0);
        swift_release();

        _Block_release(v17);
        _Block_release(v14);
      }
    }

  }
  *(_BYTE *)(v0 + v1) = 2;
}

uint64_t closure #1 in SwiftUISearchController.searchController(_:willChangeTo:)(uint64_t a1, char a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = a2 & 1;
  v3 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v6[1] = v2;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
}

id SwiftUISearchController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL protocol witness for UIKitSearchBarCoordinatorDelegate.coordinatorIsAnimating(_:) in conformance UISearchController()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_transitionCoordinator);
  if (v1)
    swift_unknownObjectRelease();
  return v1 != 0;
}

uint64_t ObjC metadata update function for SwiftUISearchController()
{
  return type metadata accessor for SwiftUISearchController(0);
}

uint64_t type metadata accessor for SwiftUISearchController(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SwiftUISearchController);
}

void type metadata completion function for SwiftUISearchController()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

Swift::Void __swiftcall SwiftUISearchController.presentationControllerWillDismiss(_:)(UIPresentationController a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  objc_class *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost);
  if (v14)
  {
    v15 = objc_msgSend(v14, sel_popoverPresentationController, v11);
    if (v15)
    {
      v16 = v15;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPresentationController);
      v17 = a1.super.isa;
      v23 = v16;
      v18 = static NSObject.== infix(_:_:)();

      if ((v18 & 1) != 0)
      {
        v19 = v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration;
        swift_beginAccess();
        outlined init with copy of TableRowList?(v19, (uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
        {

          outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        }
        else
        {
          v20 = outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v13, type metadata accessor for SearchFieldConfiguration);
          MEMORY[0x1E0C80A78](v20, v21);
          *(&v22 - 2) = (uint64_t)v13;
          static Animation.default.getter();
          withAnimation<A>(_:_:)();

          swift_release();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for SearchFieldConfiguration);
        }
      }
      else
      {

      }
    }
  }
}

uint64_t closure #1 in SwiftUISearchController.presentationControllerWillDismiss(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;

  v0 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (unsigned __int8 *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (unsigned __int8 *)&v9 - v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (*v3 != 2)
    *v3 = 0;
  if ((specialized static SearchFieldState.== infix(_:_:)(v7, v3) & 1) == 0)
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
}

uint64_t UIKitSearchSuggestion.iconImage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  id v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;
  __int16 v29;
  _BYTE v30[184];
  id v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  __int16 v42;
  uint64_t v43;

  v1 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v17 - v7;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitSearchSuggestion_platformItem, (uint64_t)&v17 - v7, v9);
  v10 = MEMORY[0x1E0CE7280];
  v11 = MEMORY[0x1E0DEB940];
  outlined init with take of Binding<SearchFieldState>((uint64_t)(v8 + 64), (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v30, (uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Image.Resolved?, v10, (uint64_t)v11, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v12 = 0;
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v31) != 1)
  {
    if (v43)
    {
      outlined retain of Image.Resolved?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      objc_opt_self();
      v12 = swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v12)
      {
        outlined retain of Image.Resolved?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
LABEL_7:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        goto LABEL_8;
      }
    }
    else
    {
      outlined init with take of Binding<SearchFieldState>((uint64_t)v30, (uint64_t)&v18, (uint64_t)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined retain of Image.Resolved((uint64_t)&v18);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    }
    v13 = v31;
    v14 = v32;
    v18 = v31;
    v19 = v32;
    v20 = v33;
    v21 = v34;
    v22 = v35;
    v23 = v36;
    v24 = v37;
    v25 = v38;
    v26 = v39;
    v27 = v40;
    v28 = v41;
    v29 = v42;
    v15 = *((_QWORD *)v4 + 6);
    outlined copy of GraphicsImage.Contents?(v31, v32);
    v12 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v15);
    outlined retain of Image.Resolved?((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v13, v14);
    goto LABEL_7;
  }
LABEL_8:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return v12;
}

uint64_t ObjC metadata update function for UIKitSearchSuggestion()
{
  return type metadata accessor for UIKitSearchSuggestion(0);
}

uint64_t type metadata accessor for UIKitSearchSuggestion(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for UIKitSearchSuggestion);
}

uint64_t type metadata completion function for UIKitSearchSuggestion()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t outlined assign with copy of ToolbarStorage.SearchItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in SwiftUISearchController.presentationControllerWillDismiss(_:)()
{
  return closure #1 in SwiftUISearchController.presentationControllerWillDismiss(_:)();
}

uint64_t sub_18727DB78()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18727DBA4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id _s7SwiftUI14UIKitSearchBarC017updateCustomScopeE8IsActive33_DD1B478EFBEC48643453E85892C2D0E2LL_10isAnimatedySb_SbtFySbcfU1_TA_0(int a1)
{
  uint64_t v1;

  return closure #3 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(a1, *(id *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void partial apply for closure #2 in SwiftUISearchController.enqueueIsActiveUpdate(_:)()
{
  uint64_t v0;

  closure #2 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(v0);
}

void partial apply for closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(a1, v1);
}

unint64_t type metadata accessor for UISearchSuggestion()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UISearchSuggestion;
  if (!lazy cache variable for type metadata for UISearchSuggestion)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISearchSuggestion);
  }
  return result;
}

uint64_t outlined copy of PlatformItemCollection?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of PlatformItemCollection.Storage(result, a2 & 1);
  return result;
}

uint64_t specialized SwiftUISearchController.searchController(_:willChangeTo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v4 = v3;
  v33 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v33 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v34 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v33 - v9;
  v11 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v33 - v21;
  result = static SemanticFeature.isEnabled.getter();
  if ((result & 1) == 0)
  {
LABEL_4:
    v35 = 1;
    goto LABEL_5;
  }
  if (a1 != 1)
  {
    if (a1 != 2)
      return result;
    goto LABEL_4;
  }
  v35 = 0;
LABEL_5:
  v24 = v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  outlined init with copy of TableRowList?(v24, (uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v25 = type metadata accessor for ToolbarStorage.SearchItem(0);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
  result = v26(v22, 1, v25);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  MEMORY[0x18D75B9C8](v4);
  v27 = v14[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for ToolbarStorage.SearchItem);
  if (v35 == v27)
    return result;
  outlined init with copy of TableRowList?(v24, (uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  result = v26(v18, 1, v25);
  if ((_DWORD)result == 1)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v28 = MEMORY[0x1E0CE75A0];
  outlined init with copy of TableRowList?((uint64_t)v18, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, type metadata accessor for ToolbarStorage.SearchItem);
  v29 = v34;
  outlined init with copy of TableRowList?((uint64_t)v10, v34, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)v28, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v30 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v31 = v30 + v5;
  v32 = swift_allocObject();
  outlined init with take of Binding<SearchFieldState>(v29, v32 + v30, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)v28, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  *(_BYTE *)(v32 + v31) = v35;
  static Update.enqueueAction(_:)();
  swift_release();
  return outlined destroy of TableRowList?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
}

void specialized SwiftUISearchController.willDismissSearchController(_:)()
{
  _BYTE *v0;
  char v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t aBlock;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)();
  uint64_t v20;

  v0 = SwiftUISearchController._searchBar.getter();
  v1 = v0[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive];
  v0[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = 0;
  if ((v1 & 1) != 0 && (v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_customScopeBarHost]) != 0)
  {
    v14 = v0;
    v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v3;
    *(_BYTE *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = v2;
    v5 = v2;
    objc_msgSend(v5, sel_setHidden_, 0);
    v6 = (void *)objc_opt_self();
    v7 = swift_allocObject();
    *(_BYTE *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = v5;
    *(_QWORD *)(v7 + 32) = closure #1 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)partial apply;
    *(_QWORD *)(v7 + 40) = v4;
    v19 = closure #2 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)partial apply;
    v20 = v7;
    v8 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v16 = 1107296256;
    v17 = thunk for @escaping @callee_guaranteed () -> ();
    v18 = &block_descriptor_52;
    v9 = _Block_copy(&aBlock);
    v10 = v5;
    swift_retain();
    swift_release();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    *(_BYTE *)(v11 + 24) = 0;
    v19 = closure #3 in UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)partial apply;
    v20 = v11;
    aBlock = v8;
    v16 = 1107296256;
    v17 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v18 = &block_descriptor_59;
    v12 = _Block_copy(&aBlock);
    v13 = v10;
    swift_release();
    objc_msgSend(v6, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 0, v9, v12, 0.35, 0.0);
    swift_release();

    _Block_release(v12);
    _Block_release(v9);

  }
  else
  {

  }
}

void specialized SwiftUISearchController.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v1 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem];
  v2 = type metadata accessor for ToolbarStorage.SearchItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive] = 2;
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated] = 2;
  v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0)), sel_init);
  v4 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  *(_QWORD *)v4 = 0;
  v4[8] = -1;
  v5 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture] = 0;
  v7 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_QWORD *)v7 + 10) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t objectdestroy_4Tm_0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_7Tm_0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18727E3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v2 = v1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v4 = v0 + ((v3 + 16) & ~v3);
  swift_release();
  swift_release();
  v5 = *(int *)(v2 + 32);
  v6 = v4 + v5 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SwiftUISearchController.searchController(_:willChangeTo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return closure #1 in SwiftUISearchController.searchController(_:willChangeTo:)(v0 + v3, *(_BYTE *)(v0 + v3 + *(_QWORD *)(v2 + 64)));
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrack<A>.VectorPath);
}

uint64_t AnimatedValueTrack<A>.VectorPath.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a1, a2, a4);
  return static Array._allocateUninitialized(_:)();
}

uint64_t AnimatedValueTrack<A>.VectorPath.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(255, a2, a3, a4);
  v4 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v4);
  return Collection.isEmpty.getter() & 1;
}

uint64_t AnimatedValueTrack<A>.VectorPath.arcLength.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int EnumCaseMultiPayload;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for Curve(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v76 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v75 = (uint64_t)&v65 - v11;
  v13 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, a2, a3, v12);
  v79 = *(_QWORD *)(v13 - 8);
  v80 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v74 = (char *)&v65 - v15;
  v17 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a2, a3, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v65 - v20;
  v82 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v73 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v72 = (char *)&v65 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v71 = (char *)&v65 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v70 = (char *)&v65 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v78 = AssociatedConformanceWitness;
  v83 = (char *)&v65 - v36;
  v37 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  v38 = swift_bridgeObjectRetain();
  if (MEMORY[0x18D75D06C](v38, v17))
  {
    v39 = 0;
    v81 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v40 = 0.0;
    v68 = v18;
    v69 = a1;
    v66 = v17;
    v67 = v21;
    while (1)
    {
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      v44 = v39 + 1;
      if (__OFADD__(v39, 1))
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v81 + *(_QWORD *)(v18 + 72) * v39, v17);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v46 = v74;
          v47 = v80;
          (*(void (**)(char *, char *))(v79 + 32))(v74, v21);
          v48 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
          v49 = (uint64_t)v70;
          v48(v70, v83, v37);
          v50 = v71;
          v48(v71, v46, v37);
          v51 = (uint64_t)v72;
          v48(v72, &v46[*(int *)(v47 + 36)], v37);
          v52 = (uint64_t)v73;
          v48(v73, &v46[*(int *)(v47 + 40)], v37);
          v53 = v75;
          v54 = (uint64_t)v50;
          v17 = v66;
          Curve.init(start:end:startTangent:endTangent:)(v49, v54, v51, v52, v37, v78, v75);
          v55 = v77;
          Curve.arcLength(at:)(v77, v56, 1.0);
          v58 = v57;
          v59 = v53;
          v60 = v37;
          v61 = v82;
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v59, v55);
          v62 = v83;
          (*(void (**)(char *, uint64_t))(v61 + 8))(v83, v60);
          v40 = v40 + v58;
          v63 = v62;
          v37 = v60;
          v48(v63, v46, v60);
          v64 = v46;
          v18 = v68;
          a1 = v69;
          v21 = v67;
          (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v80);
        }
      }
      else
      {
        v42 = v82;
        v41 = v83;
        (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v37);
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v21, v37);
      }
      ++v39;
      if (v44 == MEMORY[0x18D75D06C](a1, v17))
        goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v83, v37);
  }
  return result;
}

uint64_t Curve.init(start:end:startTangent:endTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int *v14;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32);
  v16(a7, a1, a5);
  v14 = (int *)type metadata accessor for Curve(0, a5, a6, v13);
  v16(a7 + v14[9], a2, a5);
  v16(a7 + v14[10], a3, a5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(a7 + v14[11], a4, a5);
}

uint64_t AnimatedValueTrack<A>.VectorPath.value(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  int EnumCaseMultiPayload;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for Curve(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v85 = *(_QWORD *)(v14 - 8);
  v86 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v78 - v16;
  v93 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, a2, a3, v18);
  v95 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v19);
  v91 = (char *)&v78 - v20;
  v22 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a2, a3, v21);
  v92 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v98 = (char *)&v78 - v24;
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v90 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v89 = (char *)&v78 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v88 = (char *)&v78 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v87 = (char *)&v78 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v78 - v40;
  if ((AnimatedValueTrack<A>.VectorPath.isEmpty.getter(v11, a2, a3, v42) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(a4, 1, 1, AssociatedTypeWitness);
  v79 = a2;
  v80 = a3;
  v81 = a4;
  v84 = AssociatedConformanceWitness;
  v97 = v41;
  dispatch thunk of IteratorProtocol.next()();
  v44 = swift_bridgeObjectRetain();
  v45 = MEMORY[0x18D75D06C](v44, v22);
  v46 = v11;
  v47 = v25;
  v49 = v92;
  v48 = v93;
  if (v45)
  {
    v50 = v22;
    v51 = 0;
    v96 = v11 + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
    v94 = v50;
    v82 = v47;
    v83 = v11;
    while (1)
    {
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      v54 = v51 + 1;
      if (__OFADD__(v51, 1))
        break;
      v55 = v98;
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v98, v96 + *(_QWORD *)(v49 + 72) * v51, v50);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v57 = v91;
          (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v91, v98, v48);
          v58 = v48;
          v59 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
          v60 = (uint64_t)v87;
          v59(v87, v97, AssociatedTypeWitness);
          v61 = (uint64_t)v88;
          v59(v88, v57, AssociatedTypeWitness);
          v62 = v89;
          v59(v89, &v57[*(int *)(v58 + 36)], AssociatedTypeWitness);
          v63 = &v57[*(int *)(v58 + 40)];
          v64 = (uint64_t)v90;
          v59(v90, v63, AssociatedTypeWitness);
          v65 = (uint64_t)v62;
          v66 = v86;
          Curve.init(start:end:startTangent:endTangent:)(v60, v61, v65, v64, AssociatedTypeWitness, v84, (uint64_t)v17);
          Curve.arcLength(at:)(v66, v67, 1.0);
          if (v68 >= a5)
          {
            swift_bridgeObjectRelease();
            v74 = Curve.parametricTime(forArcLength:)(v66, v73, a5);
            v75 = v81;
            Curve.value(at:)(v66, v76, v81, v74);
            (*(void (**)(char *, uint64_t))(v85 + 8))(v17, v66);
            (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v93);
            v77 = v82;
            (*(void (**)(char *, uint64_t))(v82 + 8))(v97, AssociatedTypeWitness);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v75, 0, 1, AssociatedTypeWitness);
          }
          v69 = v68;
          (*(void (**)(char *, uint64_t))(v85 + 8))(v17, v66);
          v70 = v82;
          v71 = v97;
          (*(void (**)(char *, uint64_t))(v82 + 8))(v97, AssociatedTypeWitness);
          a5 = a5 - v69;
          v59(v71, v57, AssociatedTypeWitness);
          v48 = v93;
          (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v93);
          v46 = v83;
          v47 = v70;
          v49 = v92;
          v50 = v94;
        }
      }
      else
      {
        v52 = v97;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v97, AssociatedTypeWitness);
        v53 = v52;
        v50 = v94;
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v53, v55, AssociatedTypeWitness);
      }
      ++v51;
      if (v54 == MEMORY[0x18D75D06C](v46, v50))
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v72 = v81;
    AnimatedValueTrack<A>.VectorPath.endValue.getter(v46, v79, v80);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v97, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v72, 0, 1, AssociatedTypeWitness);
  }
  return result;
}

__n128 specialized AnimatedValueTrack<A>.VectorPath.endValue.getter(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  __n128 result;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_BYTE *)(a1 + 121);
    result = 0uLL;
    do
    {
      if (!*v2 || *v2 == 1)
        result = *(__n128 *)(v2 - 89);
      v2 += 96;
      --v1;
    }
    while (v1);
  }
  else
  {
    return (__n128)0;
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.endValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = &v14[-v9];
  v17 = a1;
  swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  dispatch thunk of IteratorProtocol.next()();
  v15 = a2;
  v16 = a3;
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(255, a2, a3, v11);
  v12 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v12);
  Sequence.reduce<A>(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t AnimatedValueTrack<A>.VectorPath.unitVelocityTangent(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  int EnumCaseMultiPayload;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v86 = type metadata accessor for Curve(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v13);
  v91 = (uint64_t)&v75 - v14;
  v85 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, a2, a3, v15);
  v92 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v16);
  v90 = (char *)&v75 - v17;
  v19 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a2, a3, v18);
  v94 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v95 = (char *)&v75 - v21;
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v89 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v88 = (char *)&v75 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v87 = (char *)&v75 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v93 = (uint64_t)&v75 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v75 - v37;
  if ((AnimatedValueTrack<A>.VectorPath.isEmpty.getter(a1, a2, a3, v39) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a4, 1, 1, AssociatedTypeWitness);
  v75 = a2;
  v76 = a3;
  v77 = a4;
  v83 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v41 = a1;
  v42 = swift_bridgeObjectRetain();
  v43 = v19;
  v44 = MEMORY[0x18D75D06C](v42, v19);
  v45 = v22;
  v46 = v92;
  if (v44)
  {
    v47 = 0;
    v48 = a1 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    v81 = v38;
    v82 = v41;
    v78 = v48;
    v79 = v43;
    v80 = v22;
    while (1)
    {
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      v49 = v47 + 1;
      if (__OFADD__(v47, 1))
        break;
      v50 = v95;
      (*(void (**)(char *, unint64_t, uint64_t))(v94 + 16))(v95, v48 + *(_QWORD *)(v94 + 72) * v47, v43);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v52 = v38;
          v53 = v90;
          v54 = v85;
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v90, v95, v85);
          v55 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 16);
          v55(v93, v52, AssociatedTypeWitness);
          v56 = (uint64_t)v87;
          v55((uint64_t)v87, v53, AssociatedTypeWitness);
          v57 = (uint64_t)v88;
          v55((uint64_t)v88, &v53[*(int *)(v54 + 36)], AssociatedTypeWitness);
          v58 = (uint64_t)v89;
          v55((uint64_t)v89, &v53[*(int *)(v54 + 40)], AssociatedTypeWitness);
          v59 = v91;
          Curve.init(start:end:startTangent:endTangent:)(v93, v56, v57, v58, AssociatedTypeWitness, v83, v91);
          v60 = v86;
          v46 = v92;
          Curve.arcLength(at:)(v86, v61, 1.0);
          if (v62 >= a5)
          {
            swift_bridgeObjectRelease();
            v68 = Curve.parametricTime(forArcLength:)(v60, v67, a5);
            v69 = v93;
            Curve.velocity(at:)(v60, v70, v93, v68);
            v71 = v83;
            v72 = (*(double (**)(uint64_t, uint64_t))(v83 + 24))(AssociatedTypeWitness, v83);
            (*(void (**)(uint64_t, uint64_t, double))(v71 + 16))(AssociatedTypeWitness, v71, 1.0 / sqrt(v72));
            (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v59, v60);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v54);
            v73 = v80;
            (*(void (**)(char *, uint64_t))(v80 + 8))(v81, AssociatedTypeWitness);
            v74 = v77;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v77, v69, AssociatedTypeWitness);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, AssociatedTypeWitness);
          }
          v63 = v62;
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v59, v60);
          v45 = v80;
          v64 = v81;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v81, AssociatedTypeWitness);
          a5 = a5 - v63;
          v55((uint64_t)v64, v53, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v54);
          v41 = v82;
          v38 = v64;
          v48 = v78;
          v43 = v79;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v38, AssociatedTypeWitness);
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v38, v50, AssociatedTypeWitness);
      }
      ++v47;
      if (v49 == MEMORY[0x18D75D06C](v41, v43))
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v65 = v41;
    v66 = v77;
    AnimatedValueTrack<A>.VectorPath.endValue.getter(v65, v75, v76);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v38, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v66, 0, 1, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v24 - v11;
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, v4, a2, v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v17, v8);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v12, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    else
    {
      v23 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a4, a1, v23);
    }
  }
  else
  {
    v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a4, v17, v22);
  }
}

uint64_t AnimatedValueTrack<A>.VectorPath.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v41 = a5;
  v10 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a2, a3, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v40 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v40 - v22;
  if ((AnimatedValueTrack<A>.VectorPath.isEmpty.getter(a1, a2, a3, v24) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v41, 1, 1, AssociatedTypeWitness);
  v43 = v16;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v26 = swift_bridgeObjectRetain();
  if (MEMORY[0x18D75D06C](v26, v10))
  {
    v27 = 0;
    v42 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    while (1)
    {
      result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      v28 = v27 + 1;
      if (__OFADD__(v27, 1))
        break;
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, v42 + *(_QWORD *)(v11 + 72) * v27, v10);
      if (a6 < AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v10, v29, v30, v31))
      {
        swift_bridgeObjectRelease();
        v38 = v41;
        AnimatedValueTrack<A>.VectorPath.Element.value(at:previousValue:)(v23, v10, v41, a6);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        v39 = v43;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v23, AssociatedTypeWitness);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v38, 0, 1, AssociatedTypeWitness);
      }
      a6 = a6 - AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v10, v32, v33, v34);
      AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)((uint64_t)v23, v10, v35, (uint64_t)v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v36 = v43;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v23, AssociatedTypeWitness);
      v37 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v37(v23, v19, AssociatedTypeWitness);
      ++v27;
      if (v28 == MEMORY[0x18D75D06C](a1, v10))
      {
        swift_bridgeObjectRelease();
        v38 = v41;
        v39 = v43;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v39 = v43;
    v37 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v38 = v41;
LABEL_10:
    v37((char *)v38, v23, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v38, 0, 1, AssociatedTypeWitness);
  }
  return result;
}

double AnimatedValueTrack<A>.VectorPath.Element.duration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  double v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;

  v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v21 - v9;
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (uint64_t *)((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a1, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 32))(v10, v15, v6);
      v18 = *(double *)&v10[*(int *)(v6 + 44)];
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {
      return *(double *)v15;
    }
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v15, AssociatedTypeWitness);
    return 0.0;
  }
  return v18;
}

uint64_t AnimatedValueTrack<A>.VectorPath.Element.value(at:previousValue:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  __int128 v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  char v66;

  v62 = a1;
  v63 = a3;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v60 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v58 = (char *)&v56 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v56 = (char *)&v56 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v61 = (uint64_t)&v56 - v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v59 = type metadata accessor for Curve(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v24);
  v26 = (char *)&v56 - v25;
  v28 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, v8, v7, v27);
  v29 = *((_QWORD *)v28 - 1);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v56 - v31;
  v35 = MEMORY[0x1E0C80A78](v33, v34);
  v37 = (char *)&v56 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v38 + 16))(v37, v4, a2, v35);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v63, v37, AssociatedTypeWitness);
  if (EnumCaseMultiPayload != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 16))(v63, v62, AssociatedTypeWitness);
  (*(void (**)(char *, char *, int *))(v29 + 32))(v32, v37, v28);
  v43 = AnimatedValueTrack<A>.VectorPath.Element.duration.getter(a2, v40, v41, v42);
  v44 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  if (v43 <= 0.0)
  {
    v44(v63, v32, AssociatedTypeWitness);
  }
  else
  {
    v44(v61, v62, AssociatedTypeWitness);
    v45 = (uint64_t)v56;
    v44((uint64_t)v56, v32, AssociatedTypeWitness);
    v46 = (uint64_t)v58;
    v44((uint64_t)v58, &v32[v28[9]], AssociatedTypeWitness);
    v47 = (uint64_t)v60;
    v44((uint64_t)v60, &v32[v28[10]], AssociatedTypeWitness);
    Curve.init(start:end:startTangent:endTangent:)(v61, v45, v46, v47, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v26);
    v48 = v28[11];
    v49 = &v32[v28[12]];
    v50 = v49[32];
    v51 = *((_OWORD *)v49 + 1);
    v64 = *(_OWORD *)v49;
    v65 = v51;
    v66 = v50;
    v52 = UnitCurve.value(at:)(a4 / *(double *)&v32[v48]);
    v53 = v59;
    Curve.value(at:)(v59, v54, v63, v52);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v26, v53);
  }
  return (*(uint64_t (**)(char *, int *))(v29 + 8))(v32, v28);
}

uint64_t AnimatedValueTrack<A>.VectorPath.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v45 = a5;
  v10 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a2, a3, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v44 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v44 - v22;
  if ((AnimatedValueTrack<A>.VectorPath.isEmpty.getter(a1, a2, a3, v24) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v45, 1, 1, AssociatedTypeWitness);
  v47 = v16;
  v26 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  dispatch thunk of IteratorProtocol.next()();
  if (a6 >= 0.0)
  {
    v44 = v26;
    v29 = swift_bridgeObjectRetain();
    v30 = MEMORY[0x18D75D06C](v29, v10);
    v31 = v47;
    if (v30)
    {
      v32 = 0;
      v46 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      while (1)
      {
        result = Array._checkSubscript(_:wasNativeTypeChecked:)();
        v33 = v32 + 1;
        if (__OFADD__(v32, 1))
          break;
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, v46 + *(_QWORD *)(v11 + 72) * v32, v10);
        if (a6 < AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v10, v34, v35, v36))
        {
          swift_bridgeObjectRelease();
          v42 = v45;
          AnimatedValueTrack<A>.VectorPath.Element.velocity(at:previousValue:)(v23, v10, v45, a6);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
          v43 = v47;
          (*(void (**)(char *, uint64_t))(v47 + 8))(v23, AssociatedTypeWitness);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v42, 0, 1, AssociatedTypeWitness);
        }
        a6 = a6 - AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v10, v37, v38, v39);
        AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)((uint64_t)v23, v10, v40, (uint64_t)v19);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        v31 = v47;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v23, AssociatedTypeWitness);
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v23, v19, AssociatedTypeWitness);
        ++v32;
        if (v33 == MEMORY[0x18D75D06C](a1, v10))
          goto LABEL_10;
      }
      __break(1u);
    }
    else
    {
LABEL_10:
      swift_bridgeObjectRelease();
      v41 = v45;
      dispatch thunk of IteratorProtocol.next()();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v23, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v41, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    v27 = v45;
    dispatch thunk of IteratorProtocol.next()();
    v28 = v47;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v23, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v27, 0, 1, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.Element.velocity(at:previousValue:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  double v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  __int128 v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t AssociatedConformanceWitness;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  char v70;

  v66 = a3;
  v60 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for Curve(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v61 = (uint64_t)&v58 - v12;
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v58 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v58 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v58 - v27;
  MEMORY[0x1E0C80A78](v29, v30);
  v59 = (uint64_t)&v58 - v31;
  v33 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, v7, v6, v32);
  v34 = *((_QWORD *)v33 - 1);
  MEMORY[0x1E0C80A78](v33, v35);
  v37 = (char *)&v58 - v36;
  v40 = MEMORY[0x1E0C80A78](v38, v39);
  v42 = (char *)&v58 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v43 + 16))(v42, v67, a2, v40);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, int *))(v34 + 32))(v37, v42, v33);
      v45 = *(double *)&v37[v33[11]];
      v46 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 16);
      if (v45 <= 0.0)
      {
        v46(v66, v37, AssociatedTypeWitness);
      }
      else
      {
        v67 = v33[11];
        v46((uint64_t)v28, v60, AssociatedTypeWitness);
        v46((uint64_t)v24, v37, AssociatedTypeWitness);
        v46((uint64_t)v20, &v37[v33[9]], AssociatedTypeWitness);
        v46((uint64_t)v16, &v37[v33[10]], AssociatedTypeWitness);
        v47 = v61;
        v48 = (uint64_t)v28;
        v49 = AssociatedConformanceWitness;
        Curve.init(start:end:startTangent:endTangent:)(v48, (uint64_t)v24, (uint64_t)v20, (uint64_t)v16, AssociatedTypeWitness, AssociatedConformanceWitness, v61);
        v50 = &v37[v33[12]];
        v51 = v50[32];
        v52 = *((_OWORD *)v50 + 1);
        v68 = *(_OWORD *)v50;
        v69 = v52;
        v70 = v51;
        v53 = UnitCurve.value(at:)(a4 / v45);
        v54 = v59;
        v55 = v63;
        Curve.velocity(at:)(v63, v56, v59, v53);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v47, v55);
        VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v49, v66, 1.0 / *(double *)&v37[v67]);
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v54, AssociatedTypeWitness);
      }
      return (*(uint64_t (**)(char *, int *))(v34 + 8))(v37, v33);
    }
    else
    {
      return dispatch thunk of IteratorProtocol.next()();
    }
  }
  else
  {
    dispatch thunk of IteratorProtocol.next()();
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v42, AssociatedTypeWitness);
  }
}

uint64_t AnimatedValueTrack<A>.VectorPath.move(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  v5 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v11 - v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v8, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t AnimatedValueTrack<A>.VectorPath.addCurve(to:startTangent:endTangent:duration:timingCurve:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  char v41;

  v37 = a3;
  v35 = a1;
  v36 = a2;
  v9 = *(_QWORD *)(a5 + 16);
  v33 = *(_QWORD *)(a5 + 24);
  v8 = v33;
  v34 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v32 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v32 - v21;
  v24 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, v9, v8, v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v32 - v26;
  v32 = *a4;
  v28 = a4[1].n128_u64[0];
  v29 = a4[1].n128_u64[1];
  LOBYTE(a4) = a4[2].n128_u8[0];
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v30(v22, v35, AssociatedTypeWitness);
  v30(v18, v36, AssociatedTypeWitness);
  v30(v14, v37, AssociatedTypeWitness);
  v38 = v32;
  v39 = v28;
  v40 = v29;
  v41 = (char)a4;
  AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.init(to:startTangent:endTangent:duration:timingCurve:)((uint64_t)v22, (uint64_t)v18, (uint64_t)v14, &v38, v34, v33, (uint64_t)v27, a6);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  return Array.append(_:)();
}

__n128 AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.init(to:startTangent:endTangent:duration:timingCurve:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t AssociatedTypeWitness;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int *v20;
  __n128 *v21;
  __n128 result;
  unint64_t v23;
  __n128 v24;

  v24 = *a4;
  v15 = a4[1].n128_u64[1];
  v23 = a4[1].n128_u64[0];
  v16 = a4[2].n128_u8[0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v18(a7, a1, AssociatedTypeWitness);
  v20 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, a5, a6, v19);
  v18(a7 + v20[9], a2, AssociatedTypeWitness);
  v18(a7 + v20[10], a3, AssociatedTypeWitness);
  *(double *)(a7 + v20[11]) = a8;
  v21 = (__n128 *)(a7 + v20[12]);
  result = v24;
  *v21 = v24;
  v21[1].n128_u64[0] = v23;
  v21[1].n128_u64[1] = v15;
  v21[2].n128_u8[0] = v16;
  return result;
}

double specialized AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)(uint64_t *a1, double a2, double a3, double a4)
{
  uint64_t *v4;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  double result;
  uint64_t v21;

  v9 = *v4;
  *(_QWORD *)&v10 = specialized AnimatedValueTrack<A>.VectorPath.endValue.getter(*v4).n128_u64[0];
  v12 = v11;
  v13 = *a1;
  v14 = a1[1];
  v15 = a1[2];
  v16 = a1[3];
  v17 = *((_BYTE *)a1 + 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
  v19 = *(_QWORD *)(v9 + 16);
  v18 = *(_QWORD *)(v9 + 24);
  if (v19 >= v18 >> 1)
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, (char *)v9);
  result = a3 - v12;
  *(_QWORD *)(v9 + 16) = v19 + 1;
  v21 = v9 + 96 * v19;
  *(double *)(v21 + 32) = a2;
  *(double *)(v21 + 40) = a3;
  *(double *)(v21 + 48) = a2 - v10;
  *(double *)(v21 + 56) = a3 - v12;
  *(double *)(v21 + 64) = a2 - v10;
  *(double *)(v21 + 72) = a3 - v12;
  *(double *)(v21 + 80) = a4;
  *(_QWORD *)(v21 + 88) = v13;
  *(_QWORD *)(v21 + 96) = v14;
  *(_QWORD *)(v21 + 104) = v15;
  *(_QWORD *)(v21 + 112) = v16;
  *(_BYTE *)(v21 + 120) = v17;
  *(_BYTE *)(v21 + 121) = 1;
  *v4 = v9;
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)(uint64_t a1, __n128 *a2, uint64_t a3, double a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  _BYTE v27[12];
  int v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  char v36;

  v5 = v4;
  v11 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v27[-v18];
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v27[-v22];
  v31 = *a2;
  v24 = a2[1].n128_u64[0];
  v29 = a2[1].n128_u64[1];
  v30 = v24;
  v28 = a2[2].n128_u8[0];
  AnimatedValueTrack<A>.VectorPath.endValue.getter(*v5, v11, v10);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v33 = v31;
  v34 = v30;
  v35 = v29;
  v36 = v28;
  AnimatedValueTrack<A>.VectorPath.addCurve(to:startTangent:endTangent:duration:timingCurve:)(a1, (uint64_t)v19, (uint64_t)v15, &v33, a3, a4);
  v25 = *(void (**)(_BYTE *, uint64_t))(v32 + 8);
  v25(v15, AssociatedTypeWitness);
  v25(v19, AssociatedTypeWitness);
  return ((uint64_t (*)(_BYTE *, uint64_t))v25)(v23, AssociatedTypeWitness);
}

uint64_t AnimatedValueTrack<A>.VectorPath.hold(for:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a5);
  MEMORY[0x1E0C80A78](v6, v7);
  *(double *)((char *)&v10 - v8) = a2;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t static AnimatedValueTrack<A>.VectorPath.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a3, a4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath.Element, v4);
  return static Array<A>.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.VectorPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static AnimatedValueTrack<A>.VectorPath.== infix(_:_:)(*a1, *a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t AnimatedValueTrack<A>.VectorPath.update(value:mix:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, double), double a6, double a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  void (*v40)(_BYTE *, _QWORD);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v46;
  _BYTE v47[32];

  v44 = a2;
  v45 = a5;
  v46 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v41 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v41 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v43 = (uint64_t)&v41 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v41 - v31;
  v33 = v44;
  v44 = a3;
  v45(v33, a3, a4, a7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v35 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v42 = v32;
  v35(v32, v16, AssociatedTypeWitness);
  v36 = v44;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(v44, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v17 + 8);
  v38(v21, AssociatedTypeWitness);
  v39 = v43;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v43, a6);
  v38(v25, AssociatedTypeWitness);
  v40 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 40))(v47, v36, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v38((char *)v39, AssociatedTypeWitness);
  v40(v47, 0);
  return ((uint64_t (*)(char *, uint64_t))v38)(v42, AssociatedTypeWitness);
}

uint64_t AnimatedValueTrack<A>.VectorPath.duration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a2, a3, a4);
  v6 = swift_bridgeObjectRetain();
  if (!MEMORY[0x18D75D06C](v6, v5))
    return swift_bridgeObjectRelease();
  v7 = 0;
  v8 = 0.0;
  while (1)
  {
    result = Array._checkSubscript(_:wasNativeTypeChecked:)();
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    v8 = v8 + AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v5, v10, v11, v12);
    ++v7;
    if (v13 == MEMORY[0x18D75D06C](a1, v5))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (v9 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, a3, a4, v8),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && *(double *)(a1 + *(int *)(v9 + 44)) == *(double *)(a2 + *(int *)(v9 + 44)))
  {
    v10 = static UnitCurve.== infix(_:_:)();
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t protocol witness for AnimatedValueTrackSource.update(value:mix:at:) in conformance AnimatedValueTrack<A><A>.VectorPath(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t *v4;

  return AnimatedValueTrack<A>.VectorPath.update(value:mix:at:)(a1, *v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), (void (*)(uint64_t, uint64_t, uint64_t, double))AnimatedValueTrack<A>.VectorPath.value(at:), a3, a4);
}

uint64_t protocol witness for AnimatedValueTrackSource.update(velocity:mix:at:) in conformance AnimatedValueTrack<A><A>.VectorPath(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t *v4;

  return AnimatedValueTrack<A>.VectorPath.update(value:mix:at:)(a1, *v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), (void (*)(uint64_t, uint64_t, uint64_t, double))AnimatedValueTrack<A>.VectorPath.velocity(at:), a3, a4);
}

uint64_t protocol witness for AnimatedValueTrackSource.duration.getter in conformance AnimatedValueTrack<A><A>.VectorPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return AnimatedValueTrack<A>.VectorPath.duration.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t instantiation function for generic protocol witness table for AnimatedValueTrack<A><A>.VectorPath(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Curve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Curve);
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment);
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrack<A>.VectorPath.Element);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Curve.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v5 = v4;
  v56 = a3;
  v8 = *(_QWORD *)(a1 + 16);
  v52 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v51 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v51 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v55 = (char *)&v51 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v51 - v24;
  v54 = (char *)&v51 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v51 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v51 - v32;
  v36 = MEMORY[0x1E0C80A78](v34, v35);
  v51 = (char *)&v51 - v37;
  v38 = v36 * v36;
  v39 = v36 * v36 * v36;
  v41 = *(void (**)(void))(v40 + 16);
  v41();
  ((void (*)(char *, uint64_t, uint64_t))v41)(v33, v5 + *(int *)(a1 + 40), v8);
  v42 = v5 + *(int *)(a1 + 36);
  v53 = v29;
  ((void (*)(char *, uint64_t, uint64_t))v41)(v29, v42, v8);
  ((void (*)(char *, uint64_t, uint64_t))v41)(v25, v5 + *(int *)(a1 + 44), v8);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = v51;
  VectorArithmetic.scaled(by:)(v8, v43, (uint64_t)v14, v39 + v39 - v38 * 3.0 + 1.0);
  VectorArithmetic.scaled(by:)(v8, v43, (uint64_t)v10, v38 * 3.0 - (v39 + v39));
  v45 = *(_QWORD *)(v43 + 8);
  MEMORY[0x18D75E5FC](v14, v10, v8, v45);
  v46 = *(void (**)(char *, uint64_t))(v52 + 8);
  v46(v10, v8);
  v46(v14, v8);
  VectorArithmetic.scaled(by:)(v8, v43, (uint64_t)v14, v39 - (v38 + v38) + a4);
  v47 = v55;
  MEMORY[0x18D75E5FC](v18, v14, v8, v45);
  v46(v14, v8);
  v46(v18, v8);
  v48 = v43;
  v49 = v54;
  VectorArithmetic.scaled(by:)(v8, v48, (uint64_t)v18, v39 - v38);
  MEMORY[0x18D75E5FC](v47, v18, v8, v45);
  v46(v18, v8);
  v46(v47, v8);
  v46(v49, v8);
  v46(v53, v8);
  v46(v33, v8);
  return ((uint64_t (*)(char *, uint64_t))v46)(v44, v8);
}

uint64_t Curve.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;

  v5 = v4;
  v60 = a3;
  v8 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v55 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v55 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v59 = (char *)&v55 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v55 - v24;
  v58 = (char *)&v55 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v55 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v55 - v32;
  v36 = MEMORY[0x1E0C80A78](v34, v35);
  v55 = (char *)&v55 - v37;
  v38 = v36 * v36;
  v40 = *(void (**)(void))(v39 + 16);
  v40();
  ((void (*)(char *, uint64_t, uint64_t))v40)(v33, v5 + *(int *)(a1 + 40), v8);
  v41 = v5 + *(int *)(a1 + 36);
  v57 = v29;
  ((void (*)(char *, uint64_t, uint64_t))v40)(v29, v41, v8);
  ((void (*)(char *, uint64_t, uint64_t))v40)(v25, v5 + *(int *)(a1 + 44), v8);
  v42 = v38 * 6.0 - a4 * 6.0;
  v43 = a4 * 6.0 - v38 * 6.0;
  v44 = v38 * 3.0;
  v45 = v38 * 3.0 + a4 * -4.0 + 1.0;
  v46 = v44 - (a4 + a4);
  v47 = *(_QWORD *)(a1 + 24);
  v48 = v55;
  VectorArithmetic.scaled(by:)(v8, v47, (uint64_t)v14, v42);
  VectorArithmetic.scaled(by:)(v8, v47, (uint64_t)v10, v43);
  v49 = *(_QWORD *)(v47 + 8);
  MEMORY[0x18D75E5FC](v14, v10, v8, v49);
  v50 = *(void (**)(char *, uint64_t))(v56 + 8);
  v50(v10, v8);
  v50(v14, v8);
  VectorArithmetic.scaled(by:)(v8, v47, (uint64_t)v14, v45);
  v51 = v59;
  MEMORY[0x18D75E5FC](v18, v14, v8, v49);
  v50(v14, v8);
  v50(v18, v8);
  v52 = v47;
  v53 = v58;
  VectorArithmetic.scaled(by:)(v8, v52, (uint64_t)v18, v46);
  MEMORY[0x18D75E5FC](v51, v18, v8, v49);
  v50(v18, v8);
  v50(v51, v8);
  v50(v53, v8);
  v50(v57, v8);
  v50(v33, v8);
  return ((uint64_t (*)(char *, uint64_t))v50)(v48, v8);
}

uint64_t static AnimatedValueTrack<A>.VectorPath.Element.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  double *v33;
  void (*v34)(char *, uint64_t, uint64_t, double);
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = a2;
  v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(0, a3, a4, a4);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v47 = (char *)&v47 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v52 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v47 - v11;
  v48 = a4;
  v14 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a3, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (double *)((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v47 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v47 - v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v54 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v29 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v28);
  v31 = (char *)&v47 - v30;
  v33 = (double *)((char *)&v47 + *(int *)(v32 + 48) - v30);
  v53 = v15;
  v34 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v34((char *)&v47 - v30, v55, v14, v29);
  ((void (*)(double *, uint64_t, uint64_t))v34)(v33, v56, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(char *, char *, uint64_t))v34)(v22, v31, v14);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v37 = v49;
        v36 = v50;
        v38 = (uint64_t)v47;
        (*(void (**)(char *, double *, uint64_t))(v49 + 32))(v47, v33, v50);
        v39 = static AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.== infix(_:_:)((uint64_t)v22, v38, a3, v48);
        v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
        v40(v38, v36);
        v40((uint64_t)v22, v36);
LABEL_13:
        v43 = v53;
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v50);
    }
    else
    {
      ((void (*)(double *, char *, uint64_t))v34)(v18, v31, v14);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v39 = *v18 == *v33;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v42 = v51;
    v41 = v52;
    ((void (*)(char *, char *, uint64_t))v34)(v26, v31, v14);
    if (!swift_getEnumCaseMultiPayload())
    {
      v44 = v12;
      (*(void (**)(char *, double *, uint64_t))(v42 + 32))(v12, v33, v41);
      swift_getAssociatedConformanceWitness();
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v45 = *(void (**)(char *, uint64_t))(v42 + 8);
      v45(v44, v41);
      v45(v26, v41);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v41);
  }
  v39 = 0;
  v43 = v54;
  v14 = TupleTypeMetadata2;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v14);
  return v39 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.VectorPath.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AnimatedValueTrack<A>.VectorPath.Element.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void closure #1 in AnimatedValueTrack<A>.VectorPath<>.init(path:)(uint64_t a1)
{
  _BYTE v1[112];

  outlined init with take of Path.Element(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_187281EB8()
{
  _QWORD *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *v2 = v9;
  v2[1] = v10;
  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
    v3 = result;
    *v1 = result;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v7 = v6 + 1;
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    v7 = v6 + 1;
    v3 = result;
  }
  *(_QWORD *)(v3 + 16) = v7;
  v8 = v3 + 96 * v6;
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 106) = 0u;
  *v1 = v3;
  *v0 = v9;
  v0[1] = v10;
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[10];
  uint64_t v21;
  uint64_t v22;

  v6 = *a2;
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a3, a4, a4);
  v22 = static Array._allocateUninitialized(_:)();
  v20[6] = a3;
  v20[7] = a4;
  type metadata accessor for AnimatedValueKeyframe(255, a3, v7, v8);
  v9 = type metadata accessor for Dictionary();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA0D0], v9);
  v10 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  v21 = v10;
  v20[2] = a3;
  v20[3] = a4;
  swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for Array();
  v13 = (char *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, a3, a4, v12);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v11);
  v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:), (uint64_t)v20, v11, v13, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  swift_bridgeObjectRelease();
  LOBYTE(v21) = v6;
  v18 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a3, a4, v17);
  AnimatedValueTrack<A>.VectorPath.addKeyframes(_:interpolation:)(v16, (unsigned __int8 *)&v21, v18);
  swift_bridgeObjectRelease();
  return v22;
}

double closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *);
  void (*v36)(char *, uint64_t);
  char *v37;
  double *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  __n128 *v44;
  unint64_t v45;
  unint64_t v46;
  double result;
  uint64_t v48;
  char *v49;
  double *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;

  v56 = a3;
  v55 = a5;
  v7 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a2, a3, a4);
  v53 = *(_QWORD *)(v7 - 8);
  v54.n128_u64[0] = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v52 = (char *)&v48 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v61 = (uint64_t)&v48 - v12;
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AnimatedValueKeyframe(255, a2, v18, v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v22);
  v51 = (uint64_t *)((char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (uint64_t *)((char *)&v48 - v26);
  MEMORY[0x1E0C80A78](v28, v29);
  v32 = *(int *)(v31 + 48);
  v33 = (char *)&v48 + v32 - v30;
  v49 = (char *)a1 + v32;
  v50 = a1;
  *(uint64_t *)((char *)&v48 - v30) = *(_QWORD *)a1;
  v34 = *(_QWORD *)(v20 - 8);
  v35 = *(void (**)(char *))(v34 + 16);
  v35(v33);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v33, a2);
  v36 = *(void (**)(char *, uint64_t))(v34 + 8);
  v36(v33, v20);
  (*(void (**)(uint64_t))(v56 + 24))(a2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a2);
  v37 = (char *)v27 + *(int *)(TupleTypeMetadata2 + 48);
  v38 = v50;
  *v27 = *(_QWORD *)v50;
  v39 = v49;
  ((void (*)(char *, char *, uint64_t))v35)(v37, v49, v20);
  v40 = (uint64_t)v52;
  (*(void (**)(char *, char *, unint64_t))(v53 + 16))(v52, &v37[*(int *)(v20 + 28)], v54.n128_u64[0]);
  v36(v37, v20);
  v41 = *(int *)(TupleTypeMetadata2 + 48);
  v42 = v51;
  v43 = (char *)v51 + v41;
  *v51 = *(_QWORD *)v38;
  ((void (*)(char *, char *, uint64_t))v35)((char *)v42 + v41, v39, v20);
  v44 = (__n128 *)&v43[*(int *)(v20 + 32)];
  v54 = *v44;
  v45 = v44[1].n128_u64[0];
  v46 = v44[1].n128_u64[1];
  LOBYTE(v35) = v44[2].n128_u8[0];
  v36(v43, v20);
  v57 = v54;
  v58 = v45;
  v59 = v46;
  v60 = (char)v35;
  *(_QWORD *)&result = AnimatedValueTrack<A>.VectorPath.TimedKeyframe.init(value:interpolation:timingCurve:time:)(v61, v40, &v57, a2, v56, v55, *v38).n128_u64[0];
  return result;
}

__n128 AnimatedValueTrack<A>.VectorPath.TimedKeyframe.init(value:interpolation:timingCurve:time:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v23;
  __n128 result;
  __n128 v25;

  v25 = *a3;
  v13 = a3[1].n128_u64[0];
  v14 = a3[1].n128_u64[1];
  v15 = a3[2].n128_u8[0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v18 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, a4, a5, v17);
  v19 = a6 + v18[9];
  v22 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a4, v20, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, a2, v22);
  v23 = (__n128 *)(a6 + v18[10]);
  result = v25;
  *v23 = v25;
  v23[1].n128_u64[0] = v13;
  v23[1].n128_u64[1] = v14;
  v23[2].n128_u8[0] = v15;
  *(double *)(a6 + v18[11]) = a7;
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.addKeyframes(_:interpolation:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  int v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t AssociatedTypeWitness;
  _QWORD v103[3];
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  __int128 v108;
  char v109;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v94 = a3;
  v100 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v93 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v98 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v101 = (uint64_t)&v85 - v11;
  v95 = v5;
  v13 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, v6, v5, v12);
  v92 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v99 = (uint64_t)&v85 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v91 = (char *)&v85 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v90 = (char *)&v85 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v85 - v28;
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v34 = (char *)&v85 - v33;
  v89 = *a2;
  result = MEMORY[0x18D75D024](a1, v13, v32);
  v88 = result;
  if (result >= 2)
  {
    Array.subscript.getter();
    v96 = a1;
    v97 = v16;
    v36 = v93;
    v37 = *(void (**)(uint64_t, char *, uint64_t))(v93 + 16);
    v85 = v13;
    v39 = v101;
    v38 = AssociatedTypeWitness;
    v37(v101, v34, AssociatedTypeWitness);
    v40 = *(void (**)(char *, uint64_t))(v92 + 8);
    v40(v34, v85);
    v41 = v94;
    AnimatedValueTrack<A>.VectorPath.move(to:)(v39, v94, v42, v43);
    v44 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v44(v39, v38);
    Array.subscript.getter();
    v37(v39, v34, v38);
    v40(v34, v85);
    Array.subscript.getter();
    v45 = *(double *)&v29[*(int *)(v85 + 44)];
    v87 = (void (*)(uint64_t, uint64_t))v40;
    v40(v29, v85);
    v107 = 0u;
    v108 = 0u;
    v109 = 1;
    AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)(v39, &v107, v41, v45);
    v46 = v39;
    v47 = v85;
    v44(v46, v38);
    v105 = v96;
    v48 = type metadata accessor for Array();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v48);
    v49 = MEMORY[0x1E0DEB458];
    RandomAccessCollection<>.indices.getter();
    v104 = v107;
    v103[2] = 1;
    v50 = (uint64_t)v97;
    type metadata accessor for Range<Int>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DEB848]);
    v52 = v51;
    type metadata accessor for Range<Int>(0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DEC910]);
    v54 = v53;
    v55 = lazy protocol witness table accessor for type Int and conformance Int();
    v103[0] = v49;
    v103[1] = v55;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB8C0], v52, v103);
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC928], v54);
    result = Collection.subscript.getter();
    v56 = v105;
    if (v105 != v106)
    {
      if (v106 >= v105)
      {
        if (v105 >= v106)
        {
LABEL_17:
          __break(1u);
          return result;
        }
        v86 = (char *)v106;
        v57 = (uint64_t)v90;
        v58 = (uint64_t)v91;
        while (1)
        {
          result = v56 - 1;
          if (__OFSUB__(v56, 1))
            break;
          Array.subscript.getter();
          Array.subscript.getter();
          if (v56 >= 2)
          {
            Array.subscript.getter();
          }
          else
          {
            v78 = v99;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v99, v57, v47);
            *(double *)(v78 + *(int *)(v47 + 44)) = *(double *)(v57 + *(int *)(v47 + 44))
                                                  - (*(double *)(v58 + *(int *)(v47 + 44))
                                                   - *(double *)(v57 + *(int *)(v47 + 44)));
            v79 = AssociatedTypeWitness;
            swift_getAssociatedConformanceWitness();
            v80 = v44;
            v81 = v98;
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            v82 = v101;
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            v83 = v81;
            v44 = v80;
            v80(v83, v79);
            v84 = v82;
            v47 = v85;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 40))(v78, v84, v79);
          }
          v97 = (char *)(v56 + 1);
          if (v56 + 1 >= v88)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v50, v58, v47);
            *(double *)(v50 + *(int *)(v47 + 44)) = *(double *)(v58 + *(int *)(v47 + 44))
                                                  + *(double *)(v58 + *(int *)(v47 + 44))
                                                  - *(double *)(v57 + *(int *)(v47 + 44));
            v59 = v44;
            v60 = v98;
            v62 = v101;
            v61 = AssociatedTypeWitness;
            v63 = v50;
            v64 = v95;
            v65 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            MEMORY[0x18D75E5FC](v58, v60, v61, v65);
            v66 = v93;
            v59(v60, v61);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 40))(v63, v62, v61);
          }
          else
          {
            Array.subscript.getter();
            v63 = v50;
            v64 = v95;
            v59 = v44;
          }
          v67 = v89;
          v107.n128_u8[0] = v89;
          v68 = v100;
          v69 = v101;
          v70 = v99;
          static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)(v99, v57, v58, v100, v64, v101);
          v107.n128_u8[0] = v67;
          v71 = v98;
          static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)(v57, v58, v63, v68, v64, v98);
          v72 = *(double *)(v58 + *(int *)(v47 + 44)) - *(double *)(v57 + *(int *)(v47 + 44));
          v73 = v58 + *(int *)(v47 + 40);
          v74 = *(_BYTE *)(v73 + 32);
          v75 = *(_OWORD *)(v73 + 16);
          v107 = *(__n128 *)v73;
          v108 = v75;
          v109 = v74;
          AnimatedValueTrack<A>.VectorPath.addCurve(to:startTangent:endTangent:duration:timingCurve:)(v58, v69, v71, &v107, v94, v72);
          v76 = AssociatedTypeWitness;
          v59(v71, AssociatedTypeWitness);
          v59(v69, v76);
          v77 = v87;
          v87(v58, v47);
          v77(v57, v47);
          v77(v63, v47);
          result = ((uint64_t (*)(uint64_t, uint64_t))v77)(v70, v47);
          v56 = (uint64_t)v97;
          v50 = v63;
          v44 = v59;
          if (v86 == v97)
            return result;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t result;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  _BYTE *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;

  v10 = type metadata accessor for AnimatedValueKeyframe(255, a3, a3, a4);
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v49[-v13];
  v15 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v49[-v18];
  v20 = *a2;
  v54 = a1;
  *(_QWORD *)&v60 = a1;
  v21 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v21);
  if ((Collection.isEmpty.getter() & 1) != 0 || a5 <= 0.0)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, a3, a4, v38);
    return static Array._allocateUninitialized(_:)();
  }
  v50 = v20;
  v59 = v54;
  *(_QWORD *)&v60 = v54;
  *(_QWORD *)&v57 = 1;
  swift_bridgeObjectRetain();
  Collection.suffix(from:)();
  v53 = v55;
  v57 = v55;
  v58 = v56[0];
  v22 = type metadata accessor for ArraySlice();
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v21);
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEBF78], v22);
  zip<A, B>(_:_:)();
  v25 = swift_unknownObjectRelease();
  v52 = v49;
  v55 = v60;
  *(_QWORD *)&v56[0] = v61;
  *(_OWORD *)((char *)v56 + 8) = v62;
  MEMORY[0x1E0C80A78](v25, v26);
  *(_QWORD *)&v49[-16] = a3;
  *(_QWORD *)&v49[-8] = a4;
  MEMORY[0x1E0C80A78](v27, v28);
  v51 = a3;
  *(_QWORD *)&v49[-32] = a3;
  *(_QWORD *)&v49[-24] = a4;
  *(_QWORD *)&v53 = a4;
  *(_QWORD *)&v49[-16] = partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:);
  *(_QWORD *)&v49[-8] = v29;
  *(_QWORD *)&v57 = v21;
  *((_QWORD *)&v57 + 1) = v22;
  *(_QWORD *)&v58 = v23;
  *((_QWORD *)&v58 + 1) = v24;
  v30 = type metadata accessor for Zip2Sequence();
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC3A0], v30);
  v33 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed AnimatedValueKeyframe<A>, @in_guaranteed AnimatedValueKeyframe<A>) -> (@unowned Double), (uint64_t)&v49[-48], v30, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEDCE8], v31, MEMORY[0x1E0DEDD18], v32);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v34 = *(_QWORD *)(v33 + 16);
  if (!v34)
  {
    v37 = 0.0;
    v35 = v53;
    goto LABEL_13;
  }
  v35 = v53;
  if (v34 == 1)
  {
    v36 = 0;
    v37 = 0.0;
LABEL_11:
    v42 = v34 - v36;
    v43 = (double *)(v33 + 8 * v36 + 32);
    do
    {
      v44 = *v43++;
      v37 = v37 + v44;
      --v42;
    }
    while (v42);
    goto LABEL_13;
  }
  v36 = v34 & 0x7FFFFFFFFFFFFFFELL;
  v40 = (double *)(v33 + 40);
  v37 = 0.0;
  v41 = v34 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v37 = v37 + *(v40 - 1) + *v40;
    v40 += 2;
    v41 -= 2;
  }
  while (v41);
  if (v34 != v36)
    goto LABEL_11;
LABEL_13:
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(_QWORD *)&v55 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)&v57 = v54;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v21);
  result = RandomAccessCollection<>.indices.getter();
  v45 = *((_QWORD *)&v60 + 1);
  v46 = v60;
  if ((_QWORD)v60 == *((_QWORD *)&v60 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    LOBYTE(v60) = v50;
    return AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(v55, (char *)&v60, v51, v35);
  }
  else
  {
    if (*((uint64_t *)&v60 + 1) < (uint64_t)v60)
      goto LABEL_27;
    if ((uint64_t)v60 < *((uint64_t *)&v60 + 1))
    {
      v47 = *(_QWORD *)(v33 + 16);
      v48 = 0.0;
      while (1)
      {
        Array.subscript.getter();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v14, v19, v10);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v10);
        *(double *)&v60 = v48;
        type metadata accessor for Dictionary();
        result = Dictionary.subscript.setter();
        if ((uint64_t)v46 < v47)
        {
          if ((v46 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            break;
          }
          if (v46 >= *(_QWORD *)(v33 + 16))
            goto LABEL_26;
          v48 = v48 + *(double *)(v33 + 8 * v46 + 32) / v37 * a5;
        }
        ++v46;
        (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v19, v10);
        if (v45 == v46)
        {
          swift_bridgeObjectRelease();
          v35 = v53;
          goto LABEL_24;
        }
      }
    }
    __break(1u);
  }
  return result;
}

double closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, uint64_t, double);
  uint64_t AssociatedConformanceWitness;
  void (*v22)(char *, uint64_t);
  double v23;
  uint64_t v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v25 - v13;
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v25 - v18;
  v20 = *(void (**)(uint64_t, uint64_t, double))(a4 + 24);
  v20(a3, a4, v17);
  ((void (*)(uint64_t, uint64_t))v20)(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v10, AssociatedTypeWitness);
  v22(v14, AssociatedTypeWitness);
  v23 = sqrt((*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness));
  v22(v19, AssociatedTypeWitness);
  return v23;
}

void static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[8];

  v30[5] = a3;
  v30[3] = a1;
  v30[7] = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30[2] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v30[1] = (char *)v30 - v13;
  v30[4] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v18 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a4, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v30 - v21;
  v24 = *(int *)(type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, a4, a5, v23) + 36);
  v30[6] = a2;
  v25 = a2 + v24;
  v28 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a4, v26, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v25 + *(int *)(v28 + 28), v18);
  v29 = (char *)sub_18728367C + 4 * byte_187C1B5A5[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18728367C()
{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  uint64_t v3;

  return solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)(*(_QWORD *)(v3 - 96), *(_QWORD *)(v3 - 120), *(_QWORD *)(v3 - 104), v0, v1, *(_QWORD *)(v3 - 88), *v2, v2[1], v2[2]);
}

void static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[8];

  v26[3] = a3;
  v26[5] = a1;
  v26[7] = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26[2] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v26[1] = (char *)v26 - v13;
  v26[4] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v18 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode(0, a4, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v26 - v21;
  v24 = *(int *)(type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, a4, a5, v23) + 36);
  v26[6] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a2 + v24, v18);
  v25 = (char *)sub_187283974 + 4 * byte_187C1B5AA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_187283974()
{
  uint64_t v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;

  return solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)(*(_QWORD *)(v3 - 96), *(_QWORD *)(v3 - 104), *(_QWORD *)(v3 - 120), v0, v2, *(_QWORD *)(v3 - 88), *v1, v1[1], v1[2]);
}

uint64_t solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a1;
  v41 = a2;
  v44 = a6;
  v42 = a4;
  v43 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v39 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v39 - v24;
  v26 = 1.0 - a7;
  v27 = (1.0 - a7) * (a8 + 1.0) * (a9 + 1.0) * 0.5;
  v28 = v26 * (1.0 - a8) * (1.0 - a9) * 0.5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v30 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v31 = v40;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v25, v27);
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v21, AssociatedTypeWitness);
  v39 = a3;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v21, v28);
  v32(v17, AssociatedTypeWitness);
  MEMORY[0x18D75E5FC](v25, v21, AssociatedTypeWitness, v30);
  v32(v21, AssociatedTypeWitness);
  v32(v25, AssociatedTypeWitness);
  result = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, v42, v43, v33);
  v35 = *(int *)(result + 44);
  v36 = *(double *)(v31 + v35);
  v37 = v36 - *(double *)(v41 + v35);
  if (v37 > 0.0)
  {
    v38 = *(double *)(v39 + v35) - v36;
    if (v38 > 0.0)
      return (*(uint64_t (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, (v38 + v38) / (v37 + v38));
  }
  return result;
}

uint64_t solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a1;
  v41 = a2;
  v44 = a6;
  v42 = a4;
  v43 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v39 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v39 - v24;
  v26 = 1.0 - a7;
  v27 = (1.0 - a7) * (1.0 - a8) * (a9 + 1.0) * 0.5;
  v28 = v26 * (a8 + 1.0) * (1.0 - a9) * 0.5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v30 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v31 = v40;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v25, v27);
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v21, AssociatedTypeWitness);
  v39 = a3;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v21, v28);
  v32(v17, AssociatedTypeWitness);
  MEMORY[0x18D75E5FC](v25, v21, AssociatedTypeWitness, v30);
  v32(v21, AssociatedTypeWitness);
  v32(v25, AssociatedTypeWitness);
  result = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(0, v42, v43, v33);
  v35 = *(int *)(result + 44);
  v36 = *(double *)(v31 + v35);
  v37 = v36 - *(double *)(v41 + v35);
  if (v37 > 0.0)
  {
    v38 = *(double *)(v39 + v35) - v36;
    if (v38 > 0.0)
      return (*(uint64_t (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, (v37 + v37) / (v37 + v38));
  }
  return result;
}

double Curve.parametricTime(forArcLength:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Curve.arcLength(at:)(v9, v10, 1.0);
  if (v12 <= 0.0)
    return 0.0;
  v13 = a3 / v12;
  Curve.arcLength(at:)(a1, v11, a3 / v12);
  if (vabdd_f64(v15, a3) >= 0.1)
  {
    v16 = v15 - a3;
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(double (**)(uint64_t, uint64_t))(v17 + 24);
    v19 = 10;
    do
    {
      Curve.velocity(at:)(a1, v14, (uint64_t)v8, v13);
      v13 = v13 - v16 / sqrt(v18(v5, v17));
      if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        if (!--v19)
          return v13;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
          return 0.0;
        if (!--v19)
          return v13;
      }
      Curve.arcLength(at:)(a1, v20, v13);
      v16 = v21 - a3;
    }
    while (vabdd_f64(v21, a3) >= 0.1);
  }
  return v13;
}

void Curve.arcLength(at:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v31 - v13;
  v15 = type metadata accessor for Quadrature.Integrator();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for Quadrature();
  v24.n128_f64[0] = MEMORY[0x1E0C80A78](v20, v21);
  v26 = (char *)&v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 < 0.0)
  {
    if (a3 <= 0.0)
      goto LABEL_5;
    __break(1u);
  }
  if (a3 < 0.0)
  {
    __break(1u);
    return;
  }
LABEL_5:
  v34 = v23;
  v35 = v22;
  *v19 = 8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, *MEMORY[0x1E0DE9528], v15, v24);
  v27 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
  MEMORY[0x1E0C80A78](v27, v28);
  v29 = *(_QWORD *)(a1 + 24);
  *(&v31 - 4) = v5;
  *(&v31 - 3) = v29;
  *(&v31 - 2) = v36;
  Quadrature.integrate(over:integrand:)();
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30 = v32;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v29 + 24))(v5, v29);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v5);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v10);
  }
  else
  {
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
  }
}

double closure #1 in Curve.arcLength(at:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Curve(0, v10, v11, v12);
  Curve.velocity(at:)(v13, v14, (uint64_t)v9, a4);
  v15 = (*(double (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  return sqrt(v15);
}

void type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>)
  {
    type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)();
    type metadata accessor for Quadrature.Error();
    lazy protocol witness table accessor for type Quadrature.Error and conformance Quadrature.Error();
    v0 = type metadata accessor for Result();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
  }
}

void type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double));
  }
}

unint64_t lazy protocol witness table accessor for type Quadrature.Error and conformance Quadrature.Error()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error;
  if (!lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error)
  {
    v1 = type metadata accessor for Quadrature.Error();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DE9548], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error);
  }
  return result;
}

double partial apply for closure #1 in Curve.arcLength(at:)(double a1)
{
  uint64_t *v1;

  return closure #1 in Curve.arcLength(at:)(v1[4], v1[2], v1[3], a1);
}

uint64_t outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.endValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element(0, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2);
  return AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)(a1, v6, v7, a3);
}

BOOL partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double partial apply for closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe);
}

double partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void partial apply for thunk for @callee_guaranteed (@in_guaranteed AnimatedValueKeyframe<A>, @in_guaranteed AnimatedValueKeyframe<A>) -> (@unowned Double)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  uint64_t v4;
  double (*v7)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v7 = *(double (**)(uint64_t, uint64_t))(v4 + 32);
  type metadata accessor for AnimatedValueKeyframe(255, *(_QWORD *)(v4 + 16), a2, a3);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a4 = v7(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t type metadata completion function for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(319, v1, v3, v4);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 & 0xF8 | 7;
  v11 = ~v10;
  v12 = *(_QWORD *)(v7 + 64) + v10;
  if (*(_QWORD *)(v8 + 64) <= 0x18uLL)
    v13 = 24;
  else
    v13 = *(_QWORD *)(v8 + 64);
  v14 = 1;
  if (v13 > 3)
  {
    v15 = 1;
    goto LABEL_13;
  }
  v16 = ((1 << (8 * v13)) + 1) >> (8 * v13);
  if (v16 > 0xFFFC)
  {
    v14 = 4;
  }
  else
  {
    if (v16 < 0xFD)
    {
      v14 = 1;
      v15 = 1;
      goto LABEL_13;
    }
    v14 = 2;
  }
  v18 = v16 > 0xFFFC;
  v15 = 2;
  if (v18)
    v15 = 4;
LABEL_13:
  v17 = v9 | *(_DWORD *)(v7 + 80);
  v18 = (v17 & 0x1000F8) != 0
     || ((v13 + (v12 & ~v10) + ((v13 + v14 + v10) & v11) + v15 + 47) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18;
  if (!v18)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    v20 = (unint64_t)a1 + v12;
    v21 = (unint64_t)a2 + v12;
    v22 = ((unint64_t)a2 + v12) & v11;
    if (v13 > 3)
      goto LABEL_22;
    v23 = ((1 << (8 * v13)) + 1) >> (8 * v13);
    if (v23 > 0xFFFC)
    {
      v24 = *(_DWORD *)(v22 + v13);
    }
    else
    {
      if (v23 <= 0xFC)
      {
LABEL_22:
        v24 = *(unsigned __int8 *)(v22 + v13);
        goto LABEL_25;
      }
      v24 = *(unsigned __int16 *)(v22 + v13);
    }
LABEL_25:
    v25 = (_OWORD *)(v20 & v11);
    if (v24 >= 3)
    {
      if (v13 <= 3)
        v26 = v13;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    if (v24 != 2)
    {
      if (v24 != 1)
      {
        v27 = *(_OWORD *)v22;
        *(_QWORD *)((v20 & v11) + 0x10) = *(_QWORD *)(v22 + 16);
        *v25 = v27;
        if (v13 > 3)
          goto LABEL_33;
        v28 = ((1 << (8 * v13)) + 1) >> (8 * v13);
        if (v28 > 0xFFFC)
        {
          *(_DWORD *)((char *)v25 + v13) = 0;
        }
        else
        {
          if (v28 <= 0xFC)
          {
LABEL_33:
            *((_BYTE *)v25 + v13) = 0;
            if (v13 > 3)
              goto LABEL_47;
LABEL_44:
            v31 = ((1 << (8 * v13)) + 1) >> (8 * v13);
            v32 = 2;
            if (v31 > 0xFFFC)
              v32 = 4;
            if (v31 <= 0xFC)
              goto LABEL_47;
LABEL_58:
            v33 = v32 + v13;
            v34 = (v20 | v10) + v33;
            v35 = ((v21 | v10) + v33) & v11;
            if (v13 <= 3)
            {
              v36 = ((1 << (8 * v13)) + 1) >> (8 * v13);
              if (v36 > 0xFFFC)
              {
                v37 = *(_DWORD *)(v35 + v13);
              }
              else
              {
                if (v36 <= 0xFC)
                  goto LABEL_61;
                v37 = *(unsigned __int16 *)(v35 + v13);
              }
LABEL_64:
              v38 = (_OWORD *)(v34 & v11);
              if (v37 >= 3)
              {
                if (v13 <= 3)
                  v39 = v13;
                else
                  v39 = 4;
                __asm { BR              X12 }
              }
              if (v37 != 2)
              {
                if (v37 != 1)
                {
                  v40 = *(_OWORD *)v35;
                  *(_QWORD *)((v34 & v11) + 0x10) = *(_QWORD *)(v35 + 16);
                  *v38 = v40;
                  if (v13 <= 3)
                  {
                    v41 = ((1 << (8 * v13)) + 1) >> (8 * v13);
                    if (v41 > 0xFFFC)
                    {
                      *(_DWORD *)((char *)v38 + v13) = 0;
                      v43 = 4;
                      goto LABEL_96;
                    }
                    if (v41 > 0xFC)
                    {
                      *(_WORD *)((char *)v38 + v13) = 0;
LABEL_95:
                      v43 = 2;
LABEL_96:
                      v18 = v41 > 0xFFFC;
                      v44 = 2;
                      if (v18)
                        v44 = 4;
                      goto LABEL_98;
                    }
                  }
                  *((_BYTE *)v38 + v13) = 0;
LABEL_81:
                  v43 = 1;
                  if (v13 > 3)
                  {
                    v44 = 1;
LABEL_98:
                    v45 = ((v13 + v43 + v10) & v11) + v13 + v44;
                    v46 = (char *)v25 + v45;
                    v47 = v45 + v22;
                    v48 = (unint64_t)(v46 + 7) & 0xFFFFFFFFFFFFFFF8;
                    v49 = (v47 + 7) & 0xFFFFFFFFFFFFFFF8;
                    v50 = *(_OWORD *)v49;
                    v51 = *(_OWORD *)(v49 + 16);
                    *(_BYTE *)(v48 + 32) = *(_BYTE *)(v49 + 32);
                    *(_OWORD *)v48 = v50;
                    *(_OWORD *)(v48 + 16) = v51;
                    *(_QWORD *)((unint64_t)(v46 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v47 + 47) & 0xFFFFFFFFFFFFF8);
                    return a1;
                  }
                  v41 = ((1 << (8 * v13)) + 1) >> (8 * v13);
                  if (v41 > 0xFFFC)
                  {
                    v43 = 4;
                    goto LABEL_96;
                  }
                  if (v41 < 0xFD)
                  {
                    v43 = 1;
                    v44 = 1;
                    goto LABEL_98;
                  }
                  goto LABEL_95;
                }
                (*(void (**)(_OWORD *))(v8 + 16))(v38);
                if (v13 > 3)
                {
LABEL_80:
                  *((_BYTE *)v38 + v13) = 1;
                  goto LABEL_81;
                }
                v42 = 1;
                v41 = ((1 << (8 * v13)) + 1) >> (8 * v13);
                if (v41 <= 0xFFFC)
                {
                  if (v41 > 0xFC)
                  {
                    *(_WORD *)((char *)v38 + v13) = 1;
                    goto LABEL_95;
                  }
                  goto LABEL_80;
                }
LABEL_91:
                *(_DWORD *)((char *)v38 + v13) = v42;
                v43 = 4;
                goto LABEL_96;
              }
              (*(void (**)(_OWORD *))(v8 + 16))(v38);
              if (v13 <= 3)
              {
                v41 = ((1 << (8 * v13)) + 1) >> (8 * v13);
                if (v41 > 0xFFFC)
                {
                  v42 = 2;
                  goto LABEL_91;
                }
                if (v41 > 0xFC)
                {
                  v43 = 2;
                  *(_WORD *)((char *)v38 + v13) = 2;
                  goto LABEL_96;
                }
              }
              *((_BYTE *)v38 + v13) = 2;
              goto LABEL_81;
            }
LABEL_61:
            v37 = *(unsigned __int8 *)(v35 + v13);
            goto LABEL_64;
          }
          *(_WORD *)((char *)v25 + v13) = 0;
        }
LABEL_56:
        v18 = v28 > 0xFFFC;
        v32 = 2;
        if (v18)
          v32 = 4;
        goto LABEL_58;
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v20 & v11, v22, v5);
      if (v13 > 3)
        goto LABEL_42;
      v30 = 1;
      v28 = ((1 << (8 * v13)) + 1) >> (8 * v13);
      if (v28 <= 0xFFFC)
      {
        if (v28 <= 0xFC)
        {
LABEL_42:
          v29 = 1;
LABEL_43:
          *((_BYTE *)v25 + v13) = v29;
          if (v13 > 3)
          {
LABEL_47:
            v32 = 1;
            goto LABEL_58;
          }
          goto LABEL_44;
        }
LABEL_55:
        *(_WORD *)((char *)v25 + v13) = v30;
        goto LABEL_56;
      }
LABEL_52:
      *(_DWORD *)((char *)v25 + v13) = v30;
      goto LABEL_56;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v20 & v11, v22, v5);
    if (v13 <= 3)
    {
      v28 = ((1 << (8 * v13)) + 1) >> (8 * v13);
      if (v28 > 0xFFFC)
      {
        v30 = 2;
        goto LABEL_52;
      }
      if (v28 > 0xFC)
      {
        LOWORD(v30) = 2;
        goto LABEL_55;
      }
    }
    v29 = 2;
    goto LABEL_43;
  }
  v19 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v19 + (((v17 & 0xF8 | 7u) + 16) & ~(unint64_t)(v17 & 0xF8 | 7u)));
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  v7 = *(_QWORD *)(v3 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v9 = (v6 + v8) & ~v8;
  if (*(_QWORD *)(v7 + 64) <= 0x18uLL)
    v10 = 24;
  else
    v10 = *(_QWORD *)(v7 + 64);
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_5;
  v13 = ((1 << v11) + 1) >> v11;
  if (v13 > 0xFFFC)
  {
    v12 = *(_DWORD *)(v9 + v10);
  }
  else
  {
    if (v13 <= 0xFC)
    {
LABEL_5:
      v12 = *(unsigned __int8 *)(v9 + v10);
      goto LABEL_10;
    }
    v12 = *(unsigned __int16 *)(v9 + v10);
  }
LABEL_10:
  if (v12 >= 3)
  {
    if (v10 <= 3)
      v14 = v10;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v12 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v3);
  v15 = ~v8;
  if (v10 > 3)
  {
    v16 = v10 + v8;
LABEL_19:
    result = (v16 + v9 + 1) & v15;
    v18 = *(unsigned __int8 *)(result + v10);
    goto LABEL_24;
  }
  v19 = ((1 << v11) + 1) >> v11;
  if (v19 > 0xFFFC)
  {
    result = (v10 + v8 + v9 + 4) & v15;
    v18 = *(_DWORD *)(result + v10);
  }
  else
  {
    v16 = v10 + v8;
    if (v19 < 0xFD)
      goto LABEL_19;
    result = (v16 + v9 + 2) & v15;
    v18 = *(unsigned __int16 *)(result + v10);
  }
LABEL_24:
  if (v18 >= 3)
  {
    if (v10 <= 3)
      v20 = v10;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  if (v18 - 1 <= 1)
    return (*(uint64_t (**)(void))(v7 + 8))();
  return result;
}

__n128 initializeWithCopy for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 result;
  __int128 v50;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = *(_QWORD *)(v7 + 64) + v9;
  v11 = v10 + a1;
  v12 = v10 + a2;
  v13 = (v10 + a2) & ~v9;
  if (*(_QWORD *)(v8 + 64) <= 0x18uLL)
    v14 = 24;
  else
    v14 = *(_QWORD *)(v8 + 64);
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_7;
  v16 = ((1 << v15) + 1) >> v15;
  if (v16 > 0xFFFC)
  {
    v17 = *(_DWORD *)(v13 + v14);
  }
  else
  {
    if (v16 <= 0xFC)
    {
LABEL_7:
      v17 = *(unsigned __int8 *)(v13 + v14);
      goto LABEL_10;
    }
    v17 = *(unsigned __int16 *)(v13 + v14);
  }
LABEL_10:
  v18 = (_OWORD *)(v11 & ~v9);
  if (v17 >= 3)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  v20 = ~v9;
  if (v17 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11 & ~v9, v13, v5);
    if (v14 <= 3)
    {
      v22 = ((1 << v15) + 1) >> v15;
      if (v22 > 0xFFFC)
      {
        v24 = 2;
        goto LABEL_37;
      }
      if (v22 > 0xFC)
      {
        LOWORD(v24) = 2;
        goto LABEL_40;
      }
    }
    v23 = 2;
    goto LABEL_28;
  }
  if (v17 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11 & ~v9, v13, v5);
    if (v14 > 3)
    {
LABEL_27:
      v23 = 1;
LABEL_28:
      *((_BYTE *)v18 + v14) = v23;
      if (v14 > 3)
      {
LABEL_32:
        v26 = 1;
        goto LABEL_43;
      }
      goto LABEL_29;
    }
    v24 = 1;
    v22 = ((1 << v15) + 1) >> v15;
    if (v22 <= 0xFFFC)
    {
      if (v22 <= 0xFC)
        goto LABEL_27;
LABEL_40:
      *(_WORD *)((char *)v18 + v14) = v24;
LABEL_41:
      v27 = v22 > 0xFFFC;
      v26 = 2;
      if (v27)
        v26 = 4;
      goto LABEL_43;
    }
LABEL_37:
    *(_DWORD *)((char *)v18 + v14) = v24;
    goto LABEL_41;
  }
  v21 = *(_OWORD *)v13;
  *(_QWORD *)((v11 & ~v9) + 0x10) = *(_QWORD *)(v13 + 16);
  *v18 = v21;
  if (v14 > 3)
    goto LABEL_18;
  v22 = ((1 << v15) + 1) >> v15;
  if (v22 > 0xFFFC)
  {
    *(_DWORD *)((char *)v18 + v14) = 0;
    goto LABEL_41;
  }
  if (v22 > 0xFC)
  {
    *(_WORD *)((char *)v18 + v14) = 0;
    goto LABEL_41;
  }
LABEL_18:
  *((_BYTE *)v18 + v14) = 0;
  if (v14 > 3)
    goto LABEL_32;
LABEL_29:
  v25 = ((1 << v15) + 1) >> v15;
  v26 = 2;
  if (v25 > 0xFFFC)
    v26 = 4;
  if (v25 <= 0xFC)
    goto LABEL_32;
LABEL_43:
  v28 = v26 + v14;
  v29 = (v11 | v9) + v28;
  v30 = ((v12 | v9) + v28) & v20;
  if (v14 > 3)
  {
LABEL_46:
    v32 = *(unsigned __int8 *)(v30 + v14);
    goto LABEL_49;
  }
  v31 = ((1 << v15) + 1) >> v15;
  if (v31 > 0xFFFC)
  {
    v32 = *(_DWORD *)(v30 + v14);
  }
  else
  {
    if (v31 <= 0xFC)
      goto LABEL_46;
    v32 = *(unsigned __int16 *)(v30 + v14);
  }
LABEL_49:
  v33 = (_OWORD *)(v29 & v20);
  if (v32 >= 3)
  {
    if (v14 <= 3)
      v34 = v14;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  if (v32 == 2)
  {
    (*(void (**)(_OWORD *))(v8 + 16))(v33);
    if (v14 <= 3)
    {
      v36 = ((1 << v15) + 1) >> v15;
      if (v36 > 0xFFFC)
      {
        v37 = 2;
        goto LABEL_76;
      }
      if (v36 > 0xFC)
      {
        LOWORD(v37) = 2;
        goto LABEL_79;
      }
    }
    *((_BYTE *)v33 + v14) = 2;
    goto LABEL_66;
  }
  if (v32 == 1)
  {
    (*(void (**)(_OWORD *))(v8 + 16))(v33);
    if (v14 > 3)
    {
LABEL_65:
      *((_BYTE *)v33 + v14) = 1;
      goto LABEL_66;
    }
    v37 = 1;
    v36 = ((1 << v15) + 1) >> v15;
    if (v36 <= 0xFFFC)
    {
      if (v36 <= 0xFC)
        goto LABEL_65;
LABEL_79:
      *(_WORD *)((char *)v33 + v14) = v37;
      goto LABEL_80;
    }
LABEL_76:
    *(_DWORD *)((char *)v33 + v14) = v37;
    goto LABEL_80;
  }
  v35 = *(_OWORD *)v30;
  *(_QWORD *)((v29 & v20) + 0x10) = *(_QWORD *)(v30 + 16);
  *v33 = v35;
  if (v14 <= 3)
  {
    v36 = ((1 << v15) + 1) >> v15;
    if (v36 > 0xFFFC)
    {
      *(_DWORD *)((char *)v33 + v14) = 0;
    }
    else
    {
      if (v36 <= 0xFC)
        goto LABEL_57;
      *(_WORD *)((char *)v33 + v14) = 0;
    }
LABEL_80:
    v38 = v36 + 3;
    v27 = v36 > 0xFFFC;
    v40 = 2;
    if (v27)
      v40 = 4;
    goto LABEL_82;
  }
LABEL_57:
  *((_BYTE *)v33 + v14) = 0;
LABEL_66:
  if (v14 > 3)
  {
    v38 = 4;
LABEL_71:
    v40 = 1;
    goto LABEL_82;
  }
  v39 = ((1 << v15) + 1) >> v15;
  v38 = v39 + 3;
  v40 = 2;
  if (v39 > 0xFFFC)
    v40 = 4;
  if (v39 <= 0xFC)
    goto LABEL_71;
LABEL_82:
  v41 = (v14 + v9 + v40) & v20;
  v42 = 4;
  if (v38 < 0x10000)
    v42 = 2;
  if (v38 < 0x100)
    v43 = 1;
  else
    v43 = v42;
  v44 = v43 + v14 + v41;
  v45 = (char *)v18 + v44;
  v46 = v44 + v13;
  v47 = (unint64_t)(v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v48;
  v50 = *(_OWORD *)(v48 + 16);
  *(_BYTE *)(v47 + 32) = *(_BYTE *)(v48 + 32);
  *(__n128 *)v47 = result;
  *(_OWORD *)(v47 + 16) = v50;
  *(_QWORD *)((unint64_t)(v45 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v46 + 47) & 0xFFFFFFFFFFFFF8);
  return result;
}

double assignWithCopy for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  double *v60;
  double result;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = *(_QWORD *)(v7 + 64) + v9;
  v11 = v10 + a1;
  v12 = ~v9;
  v13 = (v10 + a1) & ~v9;
  v14 = v10 + a2;
  v15 = (v10 + a2) & ~v9;
  if (*(_QWORD *)(v8 + 64) <= 0x18uLL)
    v16 = 24;
  else
    v16 = *(_QWORD *)(v8 + 64);
  if (v13 == v15)
  {
LABEL_45:
    if (v16 <= 3)
      goto LABEL_55;
    goto LABEL_46;
  }
  v17 = 8 * v16;
  if (v16 > 3)
    goto LABEL_8;
  v18 = ((1 << v17) + 1) >> v17;
  if (v18 <= 0xFFFC)
  {
    if (v18 > 0xFC)
    {
      v19 = *(unsigned __int16 *)(v13 + v16);
      if (v19 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v19 = *(unsigned __int8 *)(v13 + v16);
    if (v19 < 3)
      goto LABEL_17;
LABEL_13:
    if (v16 <= 3)
      v20 = v16;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  v19 = *(_DWORD *)(v13 + v16);
  if (v19 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v19 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v5);
  if (v16 > 3)
    goto LABEL_22;
  v21 = ((1 << v17) + 1) >> v17;
  if (v21 <= 0xFFFC)
  {
    if (v21 > 0xFC)
    {
      v22 = *(unsigned __int16 *)(v15 + v16);
      if (v22 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v22 = *(unsigned __int8 *)(v15 + v16);
    if (v22 < 3)
      goto LABEL_31;
LABEL_27:
    if (v16 <= 3)
      v23 = v16;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  v22 = *(_DWORD *)(v15 + v16);
  if (v22 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v22 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v13, v15, v5);
    if (v16 <= 3)
    {
      v25 = ((1 << v17) + 1) >> v17;
      if (v25 > 0xFFFC)
      {
        v26 = 2;
        goto LABEL_51;
      }
      if (v25 > 0xFC)
      {
        LOWORD(v26) = 2;
        goto LABEL_54;
      }
    }
    *(_BYTE *)(v13 + v16) = 2;
    if (v16 <= 3)
      goto LABEL_55;
LABEL_46:
    v28 = 1;
LABEL_58:
    v31 = 1;
    goto LABEL_59;
  }
  if (v22 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v13, v15, v5);
    if (v16 > 3)
    {
LABEL_44:
      *(_BYTE *)(v13 + v16) = 1;
      goto LABEL_45;
    }
    v26 = 1;
    v27 = ((1 << v17) + 1) >> v17;
    if (v27 <= 0xFFFC)
    {
      if (v27 <= 0xFC)
        goto LABEL_44;
LABEL_54:
      *(_WORD *)(v13 + v16) = v26;
      goto LABEL_55;
    }
LABEL_51:
    *(_DWORD *)(v13 + v16) = v26;
    goto LABEL_55;
  }
  v24 = *(_OWORD *)v15;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)v13 = v24;
  if (v16 <= 3)
  {
    v29 = ((1 << v17) + 1) >> v17;
    if (v29 > 0xFFFC)
    {
      *(_DWORD *)(v13 + v16) = 0;
      goto LABEL_55;
    }
    if (v29 > 0xFC)
    {
      *(_WORD *)(v13 + v16) = 0;
      goto LABEL_55;
    }
  }
  *(_BYTE *)(v13 + v16) = 0;
  if (v16 > 3)
    goto LABEL_46;
LABEL_55:
  v28 = 0;
  v30 = ((1 << (8 * v16)) + 1) >> (8 * v16);
  v31 = 2;
  if (v30 > 0xFFFC)
    v31 = 4;
  if (v30 <= 0xFC)
    goto LABEL_58;
LABEL_59:
  v32 = v31 + v16;
  v33 = ((v11 | v9) + v32) & v12;
  v34 = ((v14 | v9) + v32) & v12;
  v35 = 8 * v16;
  if (v33 == v34)
    goto LABEL_100;
  if ((v28 & 1) != 0)
    goto LABEL_63;
  v36 = ((1 << v35) + 1) >> v35;
  if (v36 <= 0xFFFC)
  {
    if (v36 > 0xFC)
    {
      v37 = *(unsigned __int16 *)(v33 + v16);
      if (v37 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v37 = *(unsigned __int8 *)(v33 + v16);
    if (v37 < 3)
      goto LABEL_72;
LABEL_68:
    if (v28)
      v38 = 4;
    else
      v38 = v16;
    __asm { BR              X12 }
  }
  v37 = *(_DWORD *)(v33 + v16);
  if (v37 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v37 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v33, v5);
  if ((v28 & 1) != 0)
    goto LABEL_77;
  v39 = ((1 << v35) + 1) >> v35;
  if (v39 <= 0xFFFC)
  {
    if (v39 > 0xFC)
    {
      v40 = *(unsigned __int16 *)(v34 + v16);
      if (v40 < 3)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_77:
    v40 = *(unsigned __int8 *)(v34 + v16);
    if (v40 < 3)
      goto LABEL_86;
LABEL_82:
    if (v28)
      v41 = 4;
    else
      v41 = v16;
    __asm { BR              X12 }
  }
  v40 = *(_DWORD *)(v34 + v16);
  if (v40 >= 3)
    goto LABEL_82;
LABEL_86:
  if (v40 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v33, v34, v5);
    if ((v28 & 1) == 0)
    {
      v43 = ((1 << v35) + 1) >> v35;
      if (v43 > 0xFFFC)
      {
        v44 = 2;
        goto LABEL_111;
      }
      if (v43 > 0xFC)
      {
        LOWORD(v44) = 2;
        goto LABEL_114;
      }
    }
    *(_BYTE *)(v33 + v16) = 2;
    if ((v28 & 1) == 0)
    {
LABEL_102:
      v46 = ((1 << v35) + 1) >> v35;
      v45 = v46 + 3;
      v47 = 2;
      if (v46 > 0xFFFC)
        v47 = 4;
      if (v46 > 0xFC)
      {
        v48 = ~v9;
        goto LABEL_117;
      }
      goto LABEL_106;
    }
LABEL_101:
    v45 = 4;
LABEL_106:
    v48 = ~v9;
    v47 = 1;
    goto LABEL_117;
  }
  if (v40 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v33, v34, v5);
    if ((v28 & 1) != 0)
    {
LABEL_99:
      *(_BYTE *)(v33 + v16) = 1;
LABEL_100:
      if ((v28 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    v44 = 1;
    v43 = ((1 << v35) + 1) >> v35;
    if (v43 <= 0xFFFC)
    {
      if (v43 <= 0xFC)
        goto LABEL_99;
LABEL_114:
      *(_WORD *)(v33 + v16) = v44;
      goto LABEL_115;
    }
LABEL_111:
    *(_DWORD *)(v33 + v16) = v44;
    goto LABEL_115;
  }
  v42 = *(_OWORD *)v34;
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  *(_OWORD *)v33 = v42;
  if ((v28 & 1) != 0)
    goto LABEL_89;
  v43 = ((1 << v35) + 1) >> v35;
  if (v43 > 0xFFFC)
  {
    *(_DWORD *)(v33 + v16) = 0;
  }
  else
  {
    if (v43 <= 0xFC)
    {
LABEL_89:
      *(_BYTE *)(v33 + v16) = 0;
      if ((v28 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    *(_WORD *)(v33 + v16) = 0;
  }
LABEL_115:
  v48 = ~v9;
  v45 = v43 + 3;
  v49 = v43 > 0xFFFC;
  v47 = 2;
  if (v49)
    v47 = 4;
LABEL_117:
  v50 = (v16 + v9 + v47) & v48;
  v51 = 4;
  if (v45 < 0x10000)
    v51 = 2;
  if (v45 < 0x100)
    v52 = 1;
  else
    v52 = v51;
  v53 = v52 + v16 + v50;
  v54 = v53 + v13;
  v55 = v53 + v15;
  v56 = (v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = *(_OWORD *)v57;
  v59 = *(_OWORD *)(v57 + 16);
  *(_BYTE *)(v56 + 32) = *(_BYTE *)(v57 + 32);
  *(_OWORD *)v56 = v58;
  *(_OWORD *)(v56 + 16) = v59;
  v60 = (double *)((v55 + 47) & 0xFFFFFFFFFFFFF8);
  result = *v60;
  *(double *)((v54 + 47) & 0xFFFFFFFFFFFFF8) = *v60;
  return result;
}

__n128 initializeWithTake for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 result;
  __int128 v50;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = *(_QWORD *)(v7 + 64) + v9;
  v11 = v10 + a1;
  v12 = v10 + a2;
  v13 = (v10 + a2) & ~v9;
  if (*(_QWORD *)(v8 + 64) <= 0x18uLL)
    v14 = 24;
  else
    v14 = *(_QWORD *)(v8 + 64);
  v15 = 8 * v14;
  if (v14 > 3)
    goto LABEL_7;
  v16 = ((1 << v15) + 1) >> v15;
  if (v16 > 0xFFFC)
  {
    v17 = *(_DWORD *)(v13 + v14);
  }
  else
  {
    if (v16 <= 0xFC)
    {
LABEL_7:
      v17 = *(unsigned __int8 *)(v13 + v14);
      goto LABEL_10;
    }
    v17 = *(unsigned __int16 *)(v13 + v14);
  }
LABEL_10:
  v18 = (_OWORD *)(v11 & ~v9);
  if (v17 >= 3)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  v20 = ~v9;
  if (v17 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11 & ~v9, v13, v5);
    if (v14 <= 3)
    {
      v22 = ((1 << v15) + 1) >> v15;
      if (v22 > 0xFFFC)
      {
        v24 = 2;
        goto LABEL_37;
      }
      if (v22 > 0xFC)
      {
        LOWORD(v24) = 2;
        goto LABEL_40;
      }
    }
    v23 = 2;
    goto LABEL_28;
  }
  if (v17 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11 & ~v9, v13, v5);
    if (v14 > 3)
    {
LABEL_27:
      v23 = 1;
LABEL_28:
      *((_BYTE *)v18 + v14) = v23;
      if (v14 > 3)
      {
LABEL_32:
        v26 = 1;
        goto LABEL_43;
      }
      goto LABEL_29;
    }
    v24 = 1;
    v22 = ((1 << v15) + 1) >> v15;
    if (v22 <= 0xFFFC)
    {
      if (v22 <= 0xFC)
        goto LABEL_27;
LABEL_40:
      *(_WORD *)((char *)v18 + v14) = v24;
LABEL_41:
      v27 = v22 > 0xFFFC;
      v26 = 2;
      if (v27)
        v26 = 4;
      goto LABEL_43;
    }
LABEL_37:
    *(_DWORD *)((char *)v18 + v14) = v24;
    goto LABEL_41;
  }
  v21 = *(_OWORD *)v13;
  *(_QWORD *)((v11 & ~v9) + 0x10) = *(_QWORD *)(v13 + 16);
  *v18 = v21;
  if (v14 > 3)
    goto LABEL_18;
  v22 = ((1 << v15) + 1) >> v15;
  if (v22 > 0xFFFC)
  {
    *(_DWORD *)((char *)v18 + v14) = 0;
    goto LABEL_41;
  }
  if (v22 > 0xFC)
  {
    *(_WORD *)((char *)v18 + v14) = 0;
    goto LABEL_41;
  }
LABEL_18:
  *((_BYTE *)v18 + v14) = 0;
  if (v14 > 3)
    goto LABEL_32;
LABEL_29:
  v25 = ((1 << v15) + 1) >> v15;
  v26 = 2;
  if (v25 > 0xFFFC)
    v26 = 4;
  if (v25 <= 0xFC)
    goto LABEL_32;
LABEL_43:
  v28 = v26 + v14;
  v29 = (v11 | v9) + v28;
  v30 = ((v12 | v9) + v28) & v20;
  if (v14 > 3)
  {
LABEL_46:
    v32 = *(unsigned __int8 *)(v30 + v14);
    goto LABEL_49;
  }
  v31 = ((1 << v15) + 1) >> v15;
  if (v31 > 0xFFFC)
  {
    v32 = *(_DWORD *)(v30 + v14);
  }
  else
  {
    if (v31 <= 0xFC)
      goto LABEL_46;
    v32 = *(unsigned __int16 *)(v30 + v14);
  }
LABEL_49:
  v33 = (_OWORD *)(v29 & v20);
  if (v32 >= 3)
  {
    if (v14 <= 3)
      v34 = v14;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  if (v32 == 2)
  {
    (*(void (**)(_OWORD *))(v8 + 32))(v33);
    if (v14 <= 3)
    {
      v36 = ((1 << v15) + 1) >> v15;
      if (v36 > 0xFFFC)
      {
        v37 = 2;
        goto LABEL_76;
      }
      if (v36 > 0xFC)
      {
        LOWORD(v37) = 2;
        goto LABEL_79;
      }
    }
    *((_BYTE *)v33 + v14) = 2;
    goto LABEL_66;
  }
  if (v32 == 1)
  {
    (*(void (**)(_OWORD *))(v8 + 32))(v33);
    if (v14 > 3)
    {
LABEL_65:
      *((_BYTE *)v33 + v14) = 1;
      goto LABEL_66;
    }
    v37 = 1;
    v36 = ((1 << v15) + 1) >> v15;
    if (v36 <= 0xFFFC)
    {
      if (v36 <= 0xFC)
        goto LABEL_65;
LABEL_79:
      *(_WORD *)((char *)v33 + v14) = v37;
      goto LABEL_80;
    }
LABEL_76:
    *(_DWORD *)((char *)v33 + v14) = v37;
    goto LABEL_80;
  }
  v35 = *(_OWORD *)v30;
  *(_QWORD *)((v29 & v20) + 0x10) = *(_QWORD *)(v30 + 16);
  *v33 = v35;
  if (v14 <= 3)
  {
    v36 = ((1 << v15) + 1) >> v15;
    if (v36 > 0xFFFC)
    {
      *(_DWORD *)((char *)v33 + v14) = 0;
    }
    else
    {
      if (v36 <= 0xFC)
        goto LABEL_57;
      *(_WORD *)((char *)v33 + v14) = 0;
    }
LABEL_80:
    v38 = v36 + 3;
    v27 = v36 > 0xFFFC;
    v40 = 2;
    if (v27)
      v40 = 4;
    goto LABEL_82;
  }
LABEL_57:
  *((_BYTE *)v33 + v14) = 0;
LABEL_66:
  if (v14 > 3)
  {
    v38 = 4;
LABEL_71:
    v40 = 1;
    goto LABEL_82;
  }
  v39 = ((1 << v15) + 1) >> v15;
  v38 = v39 + 3;
  v40 = 2;
  if (v39 > 0xFFFC)
    v40 = 4;
  if (v39 <= 0xFC)
    goto LABEL_71;
LABEL_82:
  v41 = (v14 + v9 + v40) & v20;
  v42 = 4;
  if (v38 < 0x10000)
    v42 = 2;
  if (v38 < 0x100)
    v43 = 1;
  else
    v43 = v42;
  v44 = v43 + v14 + v41;
  v45 = (char *)v18 + v44;
  v46 = v44 + v13;
  v47 = (unint64_t)(v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v48;
  v50 = *(_OWORD *)(v48 + 16);
  *(_BYTE *)(v47 + 32) = *(_BYTE *)(v48 + 32);
  *(__n128 *)v47 = result;
  *(_OWORD *)(v47 + 16) = v50;
  *(_QWORD *)((unint64_t)(v45 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v46 + 47) & 0xFFFFFFFFFFFFF8);
  return result;
}

double assignWithTake for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  double *v60;
  double result;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = *(_QWORD *)(v7 + 64) + v9;
  v11 = v10 + a1;
  v12 = ~v9;
  v13 = (v10 + a1) & ~v9;
  v14 = v10 + a2;
  v15 = (v10 + a2) & ~v9;
  if (*(_QWORD *)(v8 + 64) <= 0x18uLL)
    v16 = 24;
  else
    v16 = *(_QWORD *)(v8 + 64);
  if (v13 == v15)
  {
LABEL_45:
    if (v16 <= 3)
      goto LABEL_55;
    goto LABEL_46;
  }
  v17 = 8 * v16;
  if (v16 > 3)
    goto LABEL_8;
  v18 = ((1 << v17) + 1) >> v17;
  if (v18 <= 0xFFFC)
  {
    if (v18 > 0xFC)
    {
      v19 = *(unsigned __int16 *)(v13 + v16);
      if (v19 < 3)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v19 = *(unsigned __int8 *)(v13 + v16);
    if (v19 < 3)
      goto LABEL_17;
LABEL_13:
    if (v16 <= 3)
      v20 = v16;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  v19 = *(_DWORD *)(v13 + v16);
  if (v19 >= 3)
    goto LABEL_13;
LABEL_17:
  if (v19 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v5);
  if (v16 > 3)
    goto LABEL_22;
  v21 = ((1 << v17) + 1) >> v17;
  if (v21 <= 0xFFFC)
  {
    if (v21 > 0xFC)
    {
      v22 = *(unsigned __int16 *)(v15 + v16);
      if (v22 < 3)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v22 = *(unsigned __int8 *)(v15 + v16);
    if (v22 < 3)
      goto LABEL_31;
LABEL_27:
    if (v16 <= 3)
      v23 = v16;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  v22 = *(_DWORD *)(v15 + v16);
  if (v22 >= 3)
    goto LABEL_27;
LABEL_31:
  if (v22 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13, v15, v5);
    if (v16 <= 3)
    {
      v25 = ((1 << v17) + 1) >> v17;
      if (v25 > 0xFFFC)
      {
        v26 = 2;
        goto LABEL_51;
      }
      if (v25 > 0xFC)
      {
        LOWORD(v26) = 2;
        goto LABEL_54;
      }
    }
    *(_BYTE *)(v13 + v16) = 2;
    if (v16 <= 3)
      goto LABEL_55;
LABEL_46:
    v28 = 1;
LABEL_58:
    v31 = 1;
    goto LABEL_59;
  }
  if (v22 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13, v15, v5);
    if (v16 > 3)
    {
LABEL_44:
      *(_BYTE *)(v13 + v16) = 1;
      goto LABEL_45;
    }
    v26 = 1;
    v27 = ((1 << v17) + 1) >> v17;
    if (v27 <= 0xFFFC)
    {
      if (v27 <= 0xFC)
        goto LABEL_44;
LABEL_54:
      *(_WORD *)(v13 + v16) = v26;
      goto LABEL_55;
    }
LABEL_51:
    *(_DWORD *)(v13 + v16) = v26;
    goto LABEL_55;
  }
  v24 = *(_OWORD *)v15;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)v13 = v24;
  if (v16 <= 3)
  {
    v29 = ((1 << v17) + 1) >> v17;
    if (v29 > 0xFFFC)
    {
      *(_DWORD *)(v13 + v16) = 0;
      goto LABEL_55;
    }
    if (v29 > 0xFC)
    {
      *(_WORD *)(v13 + v16) = 0;
      goto LABEL_55;
    }
  }
  *(_BYTE *)(v13 + v16) = 0;
  if (v16 > 3)
    goto LABEL_46;
LABEL_55:
  v28 = 0;
  v30 = ((1 << (8 * v16)) + 1) >> (8 * v16);
  v31 = 2;
  if (v30 > 0xFFFC)
    v31 = 4;
  if (v30 <= 0xFC)
    goto LABEL_58;
LABEL_59:
  v32 = v31 + v16;
  v33 = ((v11 | v9) + v32) & v12;
  v34 = ((v14 | v9) + v32) & v12;
  v35 = 8 * v16;
  if (v33 == v34)
    goto LABEL_100;
  if ((v28 & 1) != 0)
    goto LABEL_63;
  v36 = ((1 << v35) + 1) >> v35;
  if (v36 <= 0xFFFC)
  {
    if (v36 > 0xFC)
    {
      v37 = *(unsigned __int16 *)(v33 + v16);
      if (v37 < 3)
        goto LABEL_72;
      goto LABEL_68;
    }
LABEL_63:
    v37 = *(unsigned __int8 *)(v33 + v16);
    if (v37 < 3)
      goto LABEL_72;
LABEL_68:
    if (v28)
      v38 = 4;
    else
      v38 = v16;
    __asm { BR              X12 }
  }
  v37 = *(_DWORD *)(v33 + v16);
  if (v37 >= 3)
    goto LABEL_68;
LABEL_72:
  if (v37 - 1 <= 1)
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v33, v5);
  if ((v28 & 1) != 0)
    goto LABEL_77;
  v39 = ((1 << v35) + 1) >> v35;
  if (v39 <= 0xFFFC)
  {
    if (v39 > 0xFC)
    {
      v40 = *(unsigned __int16 *)(v34 + v16);
      if (v40 < 3)
        goto LABEL_86;
      goto LABEL_82;
    }
LABEL_77:
    v40 = *(unsigned __int8 *)(v34 + v16);
    if (v40 < 3)
      goto LABEL_86;
LABEL_82:
    if (v28)
      v41 = 4;
    else
      v41 = v16;
    __asm { BR              X12 }
  }
  v40 = *(_DWORD *)(v34 + v16);
  if (v40 >= 3)
    goto LABEL_82;
LABEL_86:
  if (v40 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v33, v34, v5);
    if ((v28 & 1) == 0)
    {
      v43 = ((1 << v35) + 1) >> v35;
      if (v43 > 0xFFFC)
      {
        v44 = 2;
        goto LABEL_111;
      }
      if (v43 > 0xFC)
      {
        LOWORD(v44) = 2;
        goto LABEL_114;
      }
    }
    *(_BYTE *)(v33 + v16) = 2;
    if ((v28 & 1) == 0)
    {
LABEL_102:
      v46 = ((1 << v35) + 1) >> v35;
      v45 = v46 + 3;
      v47 = 2;
      if (v46 > 0xFFFC)
        v47 = 4;
      if (v46 > 0xFC)
      {
        v48 = ~v9;
        goto LABEL_117;
      }
      goto LABEL_106;
    }
LABEL_101:
    v45 = 4;
LABEL_106:
    v48 = ~v9;
    v47 = 1;
    goto LABEL_117;
  }
  if (v40 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v33, v34, v5);
    if ((v28 & 1) != 0)
    {
LABEL_99:
      *(_BYTE *)(v33 + v16) = 1;
LABEL_100:
      if ((v28 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    v44 = 1;
    v43 = ((1 << v35) + 1) >> v35;
    if (v43 <= 0xFFFC)
    {
      if (v43 <= 0xFC)
        goto LABEL_99;
LABEL_114:
      *(_WORD *)(v33 + v16) = v44;
      goto LABEL_115;
    }
LABEL_111:
    *(_DWORD *)(v33 + v16) = v44;
    goto LABEL_115;
  }
  v42 = *(_OWORD *)v34;
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  *(_OWORD *)v33 = v42;
  if ((v28 & 1) != 0)
    goto LABEL_89;
  v43 = ((1 << v35) + 1) >> v35;
  if (v43 > 0xFFFC)
  {
    *(_DWORD *)(v33 + v16) = 0;
  }
  else
  {
    if (v43 <= 0xFC)
    {
LABEL_89:
      *(_BYTE *)(v33 + v16) = 0;
      if ((v28 & 1) == 0)
        goto LABEL_102;
      goto LABEL_101;
    }
    *(_WORD *)(v33 + v16) = 0;
  }
LABEL_115:
  v48 = ~v9;
  v45 = v43 + 3;
  v49 = v43 > 0xFFFC;
  v47 = 2;
  if (v49)
    v47 = 4;
LABEL_117:
  v50 = (v16 + v9 + v47) & v48;
  v51 = 4;
  if (v45 < 0x10000)
    v51 = 2;
  if (v45 < 0x100)
    v52 = 1;
  else
    v52 = v51;
  v53 = v52 + v16 + v50;
  v54 = v53 + v13;
  v55 = v53 + v15;
  v56 = (v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = *(_OWORD *)v57;
  v59 = *(_OWORD *)(v57 + 16);
  *(_BYTE *)(v56 + 32) = *(_BYTE *)(v57 + 32);
  *(_OWORD *)v56 = v58;
  *(_OWORD *)(v56 + 16) = v59;
  v60 = (double *)((v55 + 47) & 0xFFFFFFFFFFFFF8);
  result = *v60;
  *(double *)((v54 + 47) & 0xFFFFFFFFFFFFF8) = *v60;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  char v31;
  unsigned int v32;
  int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  char v40;
  unsigned int v41;
  unsigned int v43;
  uint64_t v44;
  int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  unsigned int v62;
  int v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  BOOL v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  char v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  char v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= 0x18)
    v9 = 24;
  v10 = 8 * v9;
  if (v9 > 3)
  {
    v11 = 4;
LABEL_5:
    v12 = 8;
    goto LABEL_6;
  }
  v17 = ((1 << v10) + 1) >> v10;
  if (v17 > 0xFFFC)
  {
LABEL_15:
    v13 = 0x7FFFFFFF;
    if (v9 > 3)
      goto LABEL_8;
    goto LABEL_16;
  }
  v11 = v17 + 3;
  if (v17 <= 0xFC)
    goto LABEL_5;
  v12 = 16;
LABEL_6:
  v13 = (1 << v12) - v11;
  if ((v13 & 0x80000000) != 0)
    goto LABEL_15;
  if (v9 > 3)
  {
LABEL_8:
    v14 = 4;
    goto LABEL_9;
  }
LABEL_16:
  v18 = ((1 << v10) + 1) >> v10;
  if (v18 <= 0xFFFC)
  {
    v14 = v18 + 3;
    if (v18 > 0xFC)
    {
      v15 = 16;
LABEL_10:
      v16 = (1 << v15) - v14;
      if ((v16 & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_9:
    v15 = 8;
    goto LABEL_10;
  }
LABEL_19:
  v16 = 0x7FFFFFFF;
LABEL_20:
  if (v16 > v13)
    v13 = v16;
  if (v13 <= v7)
    v19 = *(_DWORD *)(v6 + 84);
  else
    v19 = v13;
  v20 = *(_DWORD *)(v8 + 80);
  v21 = 1;
  if (v9 <= 3)
  {
    v23 = ((1 << v10) + 1) >> v10;
    if (v23 > 0xFFFC)
    {
      v21 = 4;
    }
    else
    {
      if (v23 < 0xFD)
      {
        v21 = 1;
        v22 = 1;
        if (!a2)
          return 0;
        goto LABEL_37;
      }
      v21 = 2;
    }
    v22 = 4;
    if (v23 <= 0xFFFC)
      v22 = 2;
    if (!a2)
      return 0;
    goto LABEL_37;
  }
  v22 = 1;
  if (!a2)
    return 0;
LABEL_37:
  v24 = v20 & 0xF8 | 7;
  v25 = *(_QWORD *)(v6 + 64) + v24;
  v26 = ~v24;
  if (v19 < a2)
  {
    if (((((v9 + (v25 & ~v24) + ((v9 + v21 + v24) & v26) + v22 + 47) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v27 = 2;
    else
      v27 = a2 - v19 + 1;
    if (v27 >= 0x10000)
      v28 = 4;
    else
      v28 = 2;
    if (v27 < 0x100)
      v28 = 1;
    if (v27 >= 2)
      v29 = v28;
    else
      v29 = 0;
    __asm { BR              X3 }
  }
  if (!v19)
    return 0;
  if (v9 > 3)
  {
    v30 = 4;
LABEL_53:
    v31 = 8;
    goto LABEL_54;
  }
  v36 = ((1 << v10) + 1) >> v10;
  if (v36 > 0xFFFC)
  {
LABEL_63:
    v32 = 0x7FFFFFFF;
    if (v9 > 3)
      goto LABEL_56;
    goto LABEL_64;
  }
  v30 = v36 + 3;
  if (v36 <= 0xFC)
    goto LABEL_53;
  v31 = 16;
LABEL_54:
  v32 = (1 << v31) - v30;
  if ((v32 & 0x80000000) != 0)
    goto LABEL_63;
  if (v9 > 3)
  {
LABEL_56:
    v33 = 4;
    goto LABEL_57;
  }
LABEL_64:
  v37 = ((1 << v10) + 1) >> v10;
  if (v37 <= 0xFFFC)
  {
    v33 = v37 + 3;
    if (v37 > 0xFC)
    {
      v34 = 16;
LABEL_58:
      v35 = (1 << v34) - v33;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_67;
    }
LABEL_57:
    v34 = 8;
    goto LABEL_58;
  }
LABEL_67:
  v35 = 0x7FFFFFFF;
LABEL_68:
  if (v35 <= v32)
    v35 = v32;
  if (v35 <= v7)
    v38 = *(_DWORD *)(v6 + 84);
  else
    v38 = v35;
  if (v7 >= v35)
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(a1);
  if (v9 > 3)
  {
    v39 = 4;
    goto LABEL_76;
  }
  v43 = ((1 << v10) + 1) >> v10;
  if (v43 <= 0xFFFC)
  {
    v39 = v43 + 3;
    if (v43 > 0xFC)
    {
      v40 = 16;
LABEL_77:
      v41 = (1 << v40) - v39;
      if ((v41 & 0x80000000) == 0)
        goto LABEL_84;
      goto LABEL_83;
    }
LABEL_76:
    v40 = 8;
    goto LABEL_77;
  }
LABEL_83:
  v41 = 0x7FFFFFFF;
LABEL_84:
  v44 = v25 + a1;
  if (v9 > 3)
  {
    v45 = 4;
    goto LABEL_86;
  }
  v48 = ((1 << v10) + 1) >> v10;
  if (v48 <= 0xFFFC)
  {
    v45 = v48 + 3;
    if (v48 > 0xFC)
    {
      v46 = 16;
LABEL_87:
      v47 = (1 << v46) - v45;
      if ((v47 & 0x80000000) == 0)
        goto LABEL_93;
      goto LABEL_92;
    }
LABEL_86:
    v46 = 8;
    goto LABEL_87;
  }
LABEL_92:
  v47 = 0x7FFFFFFF;
LABEL_93:
  v49 = v44 & v26;
  if (v47 > v41)
    v41 = v47;
  v50 = 1;
  if (v9 > 3)
  {
    v51 = 1;
    goto LABEL_104;
  }
  v52 = ((1 << v10) + 1) >> v10;
  if (v52 > 0xFFFC)
  {
    v50 = 4;
  }
  else
  {
    if (v52 < 0xFD)
    {
      v50 = 1;
      v51 = 1;
      goto LABEL_104;
    }
    v50 = 2;
  }
  v51 = 4;
  if (v52 <= 0xFFFC)
    v51 = 2;
LABEL_104:
  v53 = v38 - v41;
  if (v38 <= v41)
    goto LABEL_121;
  v54 = ((v9 + v50 + v24) & v26) + v9 + v51;
  v55 = 8 * v54;
  if (v54 > 3)
  {
LABEL_106:
    v56 = *(unsigned __int8 *)(v49 + v54);
    goto LABEL_113;
  }
  v57 = ((v53 + ~(-1 << v55)) >> v55) + 1;
  if (HIWORD(v57))
  {
    v56 = *(_DWORD *)(v49 + v54);
  }
  else
  {
    if (v57 <= 0xFF)
    {
      if (v57 < 2)
        goto LABEL_121;
      goto LABEL_106;
    }
    v56 = *(unsigned __int16 *)(v49 + v54);
  }
LABEL_113:
  if (v56)
  {
    v58 = (v56 - 1) << v55;
    if (v54 > 3)
      v58 = 0;
    if ((_DWORD)v54)
    {
      if (v54 <= 3)
        v59 = v54;
      else
        v59 = 4;
      __asm { BR              X11 }
    }
    v86 = v41 + v58;
    return v86 + 1;
  }
LABEL_121:
  if (!v41)
    return 0;
  if (v9 > 3)
  {
    v60 = 4;
LABEL_124:
    v61 = 8;
    goto LABEL_125;
  }
  v66 = ((1 << v10) + 1) >> v10;
  if (v66 > 0xFFFC)
  {
LABEL_134:
    v62 = 0x7FFFFFFF;
    if (v9 > 3)
      goto LABEL_127;
    goto LABEL_135;
  }
  v60 = v66 + 3;
  if (v66 <= 0xFC)
    goto LABEL_124;
  v61 = 16;
LABEL_125:
  v62 = (1 << v61) - v60;
  if ((v62 & 0x80000000) != 0)
    goto LABEL_134;
  if (v9 > 3)
  {
LABEL_127:
    v63 = 4;
    goto LABEL_128;
  }
LABEL_135:
  v67 = ((1 << v10) + 1) >> v10;
  if (v67 <= 0xFFFC)
  {
    v63 = v67 + 3;
    if (v67 > 0xFC)
    {
      v64 = 16;
LABEL_129:
      v65 = (1 << v64) - v63;
      if ((v65 & 0x80000000) == 0)
        goto LABEL_139;
      goto LABEL_138;
    }
LABEL_128:
    v64 = 8;
    goto LABEL_129;
  }
LABEL_138:
  v65 = 0x7FFFFFFF;
LABEL_139:
  if (v65 > v62)
    v62 = v65;
  if (v9 > 3)
  {
    v68 = 4;
LABEL_143:
    v69 = 8;
    goto LABEL_144;
  }
  v72 = ((1 << v10) + 1) >> v10;
  if (v72 > 0xFFFC)
    goto LABEL_151;
  v68 = v72 + 3;
  if (v72 <= 0xFC)
    goto LABEL_143;
  v69 = 16;
LABEL_144:
  v70 = (1 << v69) - v68;
  if ((v70 & 0x80000000) == 0)
  {
    if (v70 == v62)
      goto LABEL_146;
    goto LABEL_152;
  }
LABEL_151:
  if (v62 == 0x7FFFFFFF)
  {
LABEL_146:
    if (v9 <= 3)
    {
      v74 = ((1 << v10) + 1) >> v10;
      if (v74 > 0xFFFC)
        goto LABEL_158;
      v71 = v74 + 3;
      if (v74 > 0xFC)
      {
        v75 = 16;
LABEL_157:
        v76 = (1 << v75) - v71;
        if ((v76 & 0x80000000) == 0)
        {
LABEL_159:
          if (v9 > 3)
            goto LABEL_163;
          v77 = ((1 << v10) + 1) >> v10;
          v78 = 2;
          if (v77 > 0xFFFC)
            v78 = 4;
          if (v77 <= 0xFC)
LABEL_163:
            v78 = 1;
          if (!v62)
            return 0;
          v79 = v62 >= v76;
          v80 = v62 - v76;
          if (v80 == 0 || !v79)
            goto LABEL_214;
          v81 = v78 + v9;
          v82 = 8 * v81;
          if (v81 > 3)
            goto LABEL_168;
          v87 = ((v80 + ~(-1 << v82)) >> v82) + 1;
          if (HIWORD(v87))
          {
            v83 = *(_DWORD *)(v49 + v81);
          }
          else
          {
            if (v87 <= 0xFF)
            {
              if (v87 < 2)
                goto LABEL_214;
LABEL_168:
              v83 = *(unsigned __int8 *)(v49 + v81);
              goto LABEL_206;
            }
            v83 = *(unsigned __int16 *)(v49 + v81);
          }
LABEL_206:
          if (v83)
          {
            v100 = (v83 - 1) << v82;
            if (v81 > 3)
              v100 = 0;
            if ((_DWORD)v81)
            {
              if (v81 <= 3)
                v101 = v81;
              else
                v101 = 4;
              __asm { BR              X13 }
            }
            v86 = v76 + v100;
            return v86 + 1;
          }
LABEL_214:
          if (v76)
          {
            if (v9 > 3)
            {
              v102 = *(unsigned __int8 *)(v49 + v9);
              v103 = v102 | 0xFFFFFF00;
              v104 = v102 ^ 0xFF;
              v105 = 8;
              v106 = 4;
              goto LABEL_242;
            }
            v107 = ((1 << v10) + 1) >> v10;
            if (v107 <= 0xFFFC)
            {
              v106 = v107 + 3;
              if (v107 > 0xFC)
              {
                v116 = *(unsigned __int16 *)(v49 + v9);
                v103 = v116 | 0xFFFF0000;
                v104 = v116 ^ 0xFFFF;
                v105 = 16;
              }
              else
              {
                v108 = *(unsigned __int8 *)(v49 + v9);
                v103 = v108 | 0xFFFFFF00;
                v104 = v108 ^ 0xFF;
                v105 = 8;
              }
LABEL_242:
              v117 = (1 << v105) - v106;
              if ((v117 & 0x80000000) == 0)
                goto LABEL_244;
              goto LABEL_243;
            }
            v103 = *(_DWORD *)(v49 + v9);
            goto LABEL_239;
          }
          return 0;
        }
LABEL_158:
        v76 = 0x7FFFFFFF;
        goto LABEL_159;
      }
    }
    else
    {
      v71 = 4;
    }
    v75 = 8;
    goto LABEL_157;
  }
LABEL_152:
  if (v9 <= 3)
  {
    v84 = ((1 << v10) + 1) >> v10;
    v85 = v9 + (v44 | v24);
    if (v84 > 0xFFFC)
    {
      v73 = v85 + 4;
    }
    else if (v84 > 0xFC)
    {
      v73 = v85 + 2;
    }
    else
    {
      v73 = v85 + 1;
    }
  }
  else
  {
    v73 = v9 + v24 + v49 + 1;
  }
  v88 = v73 & v26;
  if (v9 > 3)
  {
    v89 = 4;
LABEL_185:
    v91 = 8;
    goto LABEL_186;
  }
  v90 = ((1 << v10) + 1) >> v10;
  if (v90 > 0xFFFC)
  {
LABEL_187:
    v92 = 0x7FFFFFFF;
    goto LABEL_188;
  }
  v89 = v90 + 3;
  if (v90 <= 0xFC)
    goto LABEL_185;
  v91 = 16;
LABEL_186:
  v92 = (1 << v91) - v89;
  if ((v92 & 0x80000000) != 0)
    goto LABEL_187;
LABEL_188:
  if (v9 > 3)
    goto LABEL_192;
  v93 = ((1 << v10) + 1) >> v10;
  v94 = 2;
  if (v93 > 0xFFFC)
    v94 = 4;
  if (v93 <= 0xFC)
LABEL_192:
    v94 = 1;
  if (!v62)
    return 0;
  v79 = v62 >= v92;
  v95 = v62 - v92;
  if (v95 == 0 || !v79)
    goto LABEL_231;
  v96 = v94 + v9;
  v97 = 8 * v96;
  if (v96 > 3)
    goto LABEL_197;
  v99 = ((v95 + ~(-1 << v97)) >> v97) + 1;
  if (HIWORD(v99))
  {
    v98 = *(_DWORD *)(v88 + v96);
  }
  else
  {
    if (v99 <= 0xFF)
    {
      if (v99 < 2)
        goto LABEL_231;
LABEL_197:
      v98 = *(unsigned __int8 *)(v88 + v96);
      goto LABEL_223;
    }
    v98 = *(unsigned __int16 *)(v88 + v96);
  }
LABEL_223:
  if (v98)
  {
    v109 = (v98 - 1) << v97;
    if (v96 > 3)
      v109 = 0;
    if ((_DWORD)v96)
    {
      if (v96 <= 3)
        v110 = v96;
      else
        v110 = 4;
      __asm { BR              X13 }
    }
    v86 = v92 + v109;
    return v86 + 1;
  }
LABEL_231:
  if (!v92)
    return 0;
  if (v9 <= 3)
  {
    v114 = ((1 << v10) + 1) >> v10;
    if (v114 > 0xFFFC)
    {
      v103 = *(_DWORD *)(v88 + v9);
LABEL_239:
      v104 = ~v103;
LABEL_243:
      v117 = 0x7FFFFFFF;
      goto LABEL_244;
    }
    v113 = v114 + 3;
    if (v114 > 0xFC)
    {
      v118 = *(unsigned __int16 *)(v88 + v9);
      v103 = v118 | 0xFFFF0000;
      v104 = v118 ^ 0xFFFF;
      v112 = 16;
    }
    else
    {
      v115 = *(unsigned __int8 *)(v88 + v9);
      v103 = v115 | 0xFFFFFF00;
      v104 = v115 ^ 0xFF;
      v112 = 8;
    }
  }
  else
  {
    v111 = *(unsigned __int8 *)(v88 + v9);
    v103 = v111 | 0xFFFFFF00;
    v104 = v111 ^ 0xFF;
    v112 = 8;
    v113 = 4;
  }
  v117 = (1 << v112) - v113;
  if ((v117 & 0x80000000) != 0)
    goto LABEL_243;
LABEL_244:
  if (v117 > v104)
    return -v103;
  else
    return 0;
}

void storeEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  size_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= 0x18)
    v10 = 24;
  if (v10 <= 3)
  {
    v17 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    if (v17 > 0xFFFC)
      goto LABEL_15;
    v11 = v17 + 3;
    if (v17 > 0xFC)
    {
      v12 = 16;
LABEL_6:
      v13 = (1 << v12) - v11;
      if ((v13 & 0x80000000) == 0)
      {
        if (v10 > 3)
        {
LABEL_8:
          v14 = 4;
          goto LABEL_9;
        }
LABEL_16:
        v18 = ((1 << (8 * v10)) + 1) >> (8 * v10);
        if (v18 > 0xFFFC)
        {
LABEL_19:
          v16 = 0x7FFFFFFF;
LABEL_20:
          if (v16 > v13)
            v13 = v16;
          if (v13 <= *(_DWORD *)(v8 + 84))
            v19 = *(_DWORD *)(v8 + 84);
          else
            v19 = v13;
          v21 = 1;
          if (v10 > 3)
          {
            v22 = 1;
            goto LABEL_34;
          }
          v23 = ((1 << (8 * v10)) + 1) >> (8 * v10);
          if (v23 > 0xFFFC)
          {
            v21 = 4;
          }
          else
          {
            if (v23 < 0xFD)
            {
              v21 = 1;
              v22 = 1;
              goto LABEL_34;
            }
            v21 = 2;
          }
          v24 = v23 > 0xFFFC;
          v22 = 2;
          if (v24)
            v22 = 4;
LABEL_34:
          v20 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
          v25 = ((v10 + ((*(_QWORD *)(v8 + 64) + v20) & ~v20) + ((v10 + v21 + v20) & ~v20) + v22 + 47) & 0xFFFFFFFFFFFFFFF8)
              + 8;
          if (v19 >= a3)
          {
            v28 = 0;
            if (a2 <= v19)
              goto LABEL_47;
          }
          else
          {
            if ((((_DWORD)v10
                 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v20) & ~(_DWORD)v20)
                 + (((_DWORD)v10 + (_DWORD)v21 + (_DWORD)v20) & ~(_DWORD)v20)
                 + (_DWORD)v22
                 + 47) & 0xFFFFFFF8) == 0xFFFFFFF8)
              v26 = a3 - v19 + 1;
            else
              v26 = 2;
            if (v26 >= 0x10000)
              v27 = 4;
            else
              v27 = 2;
            if (v26 < 0x100)
              v27 = 1;
            if (v26 >= 2)
              v28 = v27;
            else
              v28 = 0;
            if (a2 <= v19)
LABEL_47:
              __asm { BR              X15 }
          }
          if ((_DWORD)v25)
          {
            v29 = ~v19 + a2;
            bzero(a1, v25);
            *a1 = v29;
          }
          __asm { BR              X10 }
        }
        v14 = v18 + 3;
        if (v18 > 0xFC)
        {
          v15 = 16;
LABEL_10:
          v16 = (1 << v15) - v14;
          if ((v16 & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_19;
        }
LABEL_9:
        v15 = 8;
        goto LABEL_10;
      }
LABEL_15:
      v13 = 0x7FFFFFFF;
      if (v10 > 3)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 4;
  }
  v12 = 8;
  goto LABEL_6;
}

void sub_187287B60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187287B68()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187287B70);
}

void sub_187287D00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187287D08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_187287D10@<X0>(unsigned int a1@<W2>, unsigned int a2@<W8>)
{
  int v2;
  char v3;
  unsigned int v4;
  int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(v13 + v14) = 0;
  if (!(_DWORD)v12)
    return result;
  if (a2 > 3)
  {
    v2 = 4;
LABEL_4:
    v3 = 8;
    goto LABEL_5;
  }
  v8 = ((1 << (8 * a2)) + 1) >> (8 * a2);
  if (v8 > 0xFFFC)
  {
LABEL_14:
    v4 = 0x7FFFFFFF;
    if (a2 > 3)
      goto LABEL_7;
    goto LABEL_15;
  }
  v2 = v8 + 3;
  if (v8 <= 0xFC)
    goto LABEL_4;
  v3 = 16;
LABEL_5:
  v4 = (1 << v3) - v2;
  if ((v4 & 0x80000000) != 0)
    goto LABEL_14;
  if (a2 > 3)
  {
LABEL_7:
    v5 = 4;
LABEL_8:
    v6 = 8;
    goto LABEL_9;
  }
LABEL_15:
  v9 = ((1 << (8 * a2)) + 1) >> (8 * a2);
  if (v9 > 0xFFFC)
  {
LABEL_18:
    v7 = 0x7FFFFFFF;
    goto LABEL_19;
  }
  v5 = v9 + 3;
  if (v9 <= 0xFC)
    goto LABEL_8;
  v6 = 16;
LABEL_9:
  v7 = (1 << v6) - v5;
  if ((v7 & 0x80000000) != 0)
    goto LABEL_18;
LABEL_19:
  if (v7 <= v4)
    v7 = v4;
  if (a1 < v7)
  {
    if (a2 > 3)
      JUMPOUT(0x187287D94);
    JUMPOUT(0x187287D1CLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v13, v12);
}

uint64_t sub_187287E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v32;
  int v33;
  _BYTE *v34;
  int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  size_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;

  v5[v6] = 0;
  if (a1 > 3)
  {
    v7 = 4;
LABEL_3:
    v8 = 8;
    goto LABEL_4;
  }
  v13 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v13 > 0xFFFC)
  {
LABEL_13:
    v9 = 0x7FFFFFFF;
    if (a1 > 3)
      goto LABEL_6;
    goto LABEL_14;
  }
  v7 = v13 + 3;
  if (v13 <= 0xFC)
    goto LABEL_3;
  v8 = 16;
LABEL_4:
  v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) != 0)
    goto LABEL_13;
  if (a1 > 3)
  {
LABEL_6:
    v10 = 4;
    goto LABEL_7;
  }
LABEL_14:
  v14 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v14 <= 0xFFFC)
  {
    v10 = v14 + 3;
    if (v14 > 0xFC)
    {
      v11 = 16;
LABEL_8:
      v12 = (1 << v11) - v10;
      if ((v12 & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_7:
    v11 = 8;
    goto LABEL_8;
  }
LABEL_17:
  v12 = 0x7FFFFFFF;
LABEL_18:
  if (v12 > v9)
    v9 = v12;
  if (a1 > 3)
  {
    v15 = 4;
LABEL_22:
    v16 = 8;
    goto LABEL_23;
  }
  v21 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v21 > 0xFFFC)
    goto LABEL_33;
  v15 = v21 + 3;
  if (v21 <= 0xFC)
    goto LABEL_22;
  v16 = 16;
LABEL_23:
  v17 = (1 << v16) - v15;
  if ((v17 & 0x80000000) == 0)
  {
    if (v17 == v9)
      goto LABEL_25;
    goto LABEL_34;
  }
LABEL_33:
  if (v9 == 0x7FFFFFFF)
  {
LABEL_25:
    if (a1 <= 3)
    {
      v23 = ((1 << (8 * a1)) + 1) >> (8 * a1);
      if (v23 > 0xFFFC)
      {
LABEL_39:
        v20 = 0x7FFFFFFF;
LABEL_40:
        if (a1 > 3)
          goto LABEL_44;
        v24 = ((1 << (8 * a1)) + 1) >> (8 * a1);
        v25 = 2;
        if (v24 > 0xFFFC)
          v25 = 4;
        if (v24 <= 0xFC)
LABEL_44:
          v25 = 1;
        v26 = v25 + a1;
        if (v9 <= v20)
        {
          v27 = 0u;
        }
        else if (v26 <= 3)
        {
          v32 = ((v9 - v20 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
          if (HIWORD(v32))
          {
            v27 = 4u;
          }
          else if (v32 >= 0x100)
          {
            v27 = 2;
          }
          else
          {
            v27 = v32 > 1;
          }
        }
        else
        {
          v27 = 1u;
        }
        if (v20 >= v4)
          return ((uint64_t (*)(void))((char *)&loc_187288360 + 4 * byte_187C1B634[v27]))();
        v30 = ~v20 + v4;
        if (v26 < 4)
        {
          if ((_DWORD)v26)
          {
            v33 = v30 & ~(-1 << (8 * v26));
            bzero(v5, v26);
            if ((_DWORD)v26 == 3)
            {
              *(_WORD *)v5 = v33;
              v5[2] = BYTE2(v33);
            }
            else if ((_DWORD)v26 == 2)
            {
              *(_WORD *)v5 = v33;
            }
            else
            {
              *v5 = v33;
            }
          }
        }
        else
        {
          bzero(v5, v26);
          *(_DWORD *)v5 = v30;
        }
        return ((uint64_t (*)(void))((char *)sub_18728824C + 4 * byte_187C1B639[v27]))();
      }
      v18 = v23 + 3;
      if (v23 > 0xFC)
      {
        v19 = 16;
LABEL_28:
        v20 = (1 << v19) - v18;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_40;
        goto LABEL_39;
      }
    }
    else
    {
      v18 = 4;
    }
    v19 = 8;
    goto LABEL_28;
  }
LABEL_34:
  if (a1 <= 3)
  {
    v28 = ((1 << (8 * a1)) + 1) >> (8 * a1);
    v29 = a1 + (v3 | v2);
    if (v28 > 0xFFFC)
    {
      v22 = v29 + 4;
    }
    else if (v28 > 0xFC)
    {
      v22 = v29 + 2;
    }
    else
    {
      v22 = v29 + 1;
    }
  }
  else
  {
    v22 = (uint64_t)&v5[a1 + 1 + v2];
  }
  v34 = (_BYTE *)(v22 & v1);
  if (a1 > 3)
  {
    v35 = 4;
    goto LABEL_68;
  }
  v38 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v38 <= 0xFFFC)
  {
    v35 = v38 + 3;
    if (v38 > 0xFC)
    {
      v36 = 16;
LABEL_69:
      v37 = (1 << v36) - v35;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_75;
      goto LABEL_74;
    }
LABEL_68:
    v36 = 8;
    goto LABEL_69;
  }
LABEL_74:
  v37 = 0x7FFFFFFF;
LABEL_75:
  if (a1 > 3)
    goto LABEL_79;
  v39 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  v40 = 2;
  if (v39 > 0xFFFC)
    v40 = 4;
  if (v39 <= 0xFC)
LABEL_79:
    v40 = 1;
  v41 = v40 + a1;
  if (v9 <= v37)
  {
    v42 = 0u;
  }
  else if (v41 <= 3)
  {
    v44 = ((v9 - v37 + ~(-1 << (8 * v41))) >> (8 * v41)) + 1;
    if (HIWORD(v44))
    {
      v42 = 4u;
    }
    else if (v44 >= 0x100)
    {
      v42 = 2;
    }
    else
    {
      v42 = v44 > 1;
    }
  }
  else
  {
    v42 = 1u;
  }
  if (v37 >= v4)
    return ((uint64_t (*)(void))((char *)&loc_187288360 + 4 * byte_187C1B62A[v42]))();
  v43 = ~v37 + v4;
  if (v41 < 4)
  {
    if ((_DWORD)v41)
    {
      v45 = v43 & ~(-1 << (8 * v41));
      bzero(v34, v41);
      if ((_DWORD)v41 == 3)
      {
        *(_WORD *)v34 = v45;
        v34[2] = BYTE2(v45);
      }
      else if ((_DWORD)v41 == 2)
      {
        *(_WORD *)v34 = v45;
      }
      else
      {
        *v34 = v45;
      }
    }
  }
  else
  {
    bzero(v34, v41);
    *(_DWORD *)v34 = v43;
  }
  return ((uint64_t (*)(void))((char *)sub_18728824C + 4 * byte_187C1B62F[v42]))();
}

uint64_t sub_187287F04@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  _WORD *v2;
  uint64_t v3;
  int v4;
  char v5;
  unsigned int v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char v13;
  int v14;
  int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v27;
  int v28;

  *(_DWORD *)((char *)v2 + v3) = 0;
  if (a1 > 3)
  {
    v4 = 4;
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v10 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v10 > 0xFFFC)
  {
LABEL_13:
    v6 = 0x7FFFFFFF;
    if (a1 > 3)
      goto LABEL_6;
    goto LABEL_14;
  }
  v4 = v10 + 3;
  if (v10 <= 0xFC)
    goto LABEL_3;
  v5 = 16;
LABEL_4:
  v6 = (1 << v5) - v4;
  if ((v6 & 0x80000000) != 0)
    goto LABEL_13;
  if (a1 > 3)
  {
LABEL_6:
    v7 = 4;
    goto LABEL_7;
  }
LABEL_14:
  v11 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v11 <= 0xFFFC)
  {
    v7 = v11 + 3;
    if (v11 > 0xFC)
    {
      v8 = 16;
LABEL_8:
      v9 = (1 << v8) - v7;
      if ((v9 & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_7:
    v8 = 8;
    goto LABEL_8;
  }
LABEL_17:
  v9 = 0x7FFFFFFF;
LABEL_18:
  if (v9 > v6)
    v6 = v9;
  if (a1 > 3)
  {
    v12 = 4;
LABEL_22:
    v13 = 8;
    goto LABEL_23;
  }
  v18 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v18 > 0xFFFC)
    goto LABEL_33;
  v12 = v18 + 3;
  if (v18 <= 0xFC)
    goto LABEL_22;
  v13 = 16;
LABEL_23:
  v14 = (1 << v13) - v12;
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 == v6)
      goto LABEL_25;
LABEL_34:
    if (a1 > 3 || (v24 = ((1 << (8 * a1)) + 1) >> (8 * a1), v24 > 0xFFFC) || v24 <= 0xFC)
      JUMPOUT(0x187288258);
    JUMPOUT(0x187288254);
  }
LABEL_33:
  if (v6 != 0x7FFFFFFF)
    goto LABEL_34;
LABEL_25:
  if (a1 > 3)
  {
    v15 = 4;
LABEL_27:
    v16 = 8;
    goto LABEL_28;
  }
  v19 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v19 > 0xFFFC)
  {
LABEL_39:
    v17 = 0x7FFFFFFF;
    goto LABEL_40;
  }
  v15 = v19 + 3;
  if (v19 <= 0xFC)
    goto LABEL_27;
  v16 = 16;
LABEL_28:
  v17 = (1 << v16) - v15;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_39;
LABEL_40:
  if (a1 > 3)
    goto LABEL_44;
  v20 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  v21 = 2;
  if (v20 > 0xFFFC)
    v21 = 4;
  if (v20 <= 0xFC)
LABEL_44:
    v21 = 1;
  v22 = v21 + a1;
  if (v6 <= v17)
  {
    v23 = 0u;
  }
  else if (v22 <= 3)
  {
    v27 = ((v6 - v17 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
    if (HIWORD(v27))
      JUMPOUT(0x187288434);
    if (v27 >= 0x100)
      v23 = 2;
    else
      v23 = v27 > 1;
  }
  else
  {
    v23 = 1u;
  }
  if (v17 < v1)
  {
    v25 = ~v17 + v1;
    if (v22 < 4)
    {
      if ((_DWORD)v22)
      {
        v28 = v25 & ~(-1 << (8 * v22));
        bzero(v2, v22);
        if ((_DWORD)v22 == 3)
          JUMPOUT(0x18728844CLL);
        if ((_DWORD)v22 != 2)
          JUMPOUT(0x18728845CLL);
        *v2 = v28;
      }
    }
    else
    {
      bzero(v2, v22);
      *(_DWORD *)v2 = v25;
    }
    JUMPOUT(0x187288460);
  }
  return ((uint64_t (*)(void))((char *)&loc_187288360 + 4 * byte_187C1B634[v23]))();
}

void sub_18728824C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_1872883E4(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;

  *(_WORD *)(v2 + v3) = 0;
  v4 = -v1;
  if (a1 > 3)
    goto LABEL_4;
  v5 = ((1 << (8 * a1)) + 1) >> (8 * a1);
  if (v5 > 0xFFFC)
  {
    *(_DWORD *)(v2 + a1) = v4;
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_4:
      *(_BYTE *)(v2 + a1) = v4;
      goto LABEL_7;
    }
    *(_WORD *)(v2 + a1) = v4;
  }
LABEL_7:
  JUMPOUT(0x1872884B8);
}

void sub_1872884AC()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

uint64_t type metadata completion function for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + 7;
  v10 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = AssociatedTypeWitness;
    v15 = ~v7;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v16(a1, a2, AssociatedTypeWitness);
    v17 = ((unint64_t)a2 + v8) & v15;
    v16((uint64_t *)(((unint64_t)a1 + v8) & v15), (uint64_t *)v17, v14);
    v18 = (v8 + v17) & v15;
    v16((uint64_t *)((v8 + (((unint64_t)a1 + v8) & v15)) & v15), (uint64_t *)v18, v14);
    v19 = (_QWORD *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v15)) & v15)) & 0xFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v9 + v18) & 0xFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_OWORD *)v22;
    v23 = *(_OWORD *)(v22 + 16);
    *(_BYTE *)(v21 + 32) = *(_BYTE *)(v22 + 32);
    *(_OWORD *)v21 = v24;
    *(_OWORD *)(v21 + 16) = v23;
  }
  return a1;
}

uint64_t destroy for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = v4 + v5;
  v7 = (v4 + v5 + a1) & ~v5;
  v9(v7, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v6 + v7) & ~v5, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + v9) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + ((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFF8);
  *v12 = *v11;
  v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v14;
  v15 = *(_OWORD *)(v14 + 16);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_OWORD *)v13 = v16;
  *(_OWORD *)(v13 + 16) = v15;
  return a1;
}

uint64_t assignWithCopy for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + v9) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + ((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFF8);
  *v12 = *v11;
  v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v14;
  v15 = *(_OWORD *)(v14 + 16);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_OWORD *)v13 = v16;
  *(_OWORD *)(v13 + 16) = v15;
  return a1;
}

uint64_t initializeWithTake for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + v9) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + ((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFF8);
  *v12 = *v11;
  v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v14;
  v15 = *(_OWORD *)(v14 + 16);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_OWORD *)v13 = v16;
  *(_OWORD *)(v13 + 16) = v15;
  return a1;
}

uint64_t assignWithTake for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v7 + v8 + a2) & ~v8;
  v6((v7 + v8 + a1) & ~v8, v9, AssociatedTypeWitness);
  v10 = (v7 + v8 + v9) & ~v8;
  v6((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8, v10, AssociatedTypeWitness);
  v11 = (_QWORD *)((v7 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v7 + 7 + ((v7 + v8 + ((v7 + v8 + a1) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFF8);
  *v12 = *v11;
  v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v14;
  v15 = *(_OWORD *)(v14 + 16);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_OWORD *)v13 = v16;
  *(_OWORD *)(v13 + 16) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 < a2)
  {
    v7 = ((((*(_QWORD *)(v5 + 64)
           + ((*(_QWORD *)(v5 + 64)
             + *(unsigned __int8 *)(v5 + 80)
             + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 33;
    if (v7 < 4)
      v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X13 }
  }
  if ((_DWORD)v6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
  else
    return 0;
}

void storeEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((*(_QWORD *)(v6 + 64)
         + ((*(_QWORD *)(v6 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_187288DC0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_187288DC8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x187288DD0);
}

void sub_187288DF0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_187288DF8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

uint64_t sub_187288E00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v2 + v4) = 0;
  if (!(_DWORD)v3)
    JUMPOUT(0x187288E08);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(v2, v3);
}

uint64_t type metadata completion function for Curve()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Curve(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v16;
  unint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    v17 = (v10 + v16) & v9;
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v17, v5);
    v15((uint64_t *)((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9), (uint64_t *)((v10 + v17) & v9), v5);
  }
  return v4;
}

uint64_t destroy for Curve(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v11(v8, v3);
  v9 = (v7 + v8) & ~v6;
  v11(v9, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)((v7 + v9) & ~v6, v3);
}

uint64_t initializeWithCopy for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Curve(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7) & ~v7)) & ~v7)) & ~v7)
     + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872893D4 + 4 * byte_187C1B65D[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for Curve(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8 + ((*(_QWORD *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for AnimatedValueTrack<A>.VectorPath.Element(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  result = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(319, v2, v1, v4);
    if (v6 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnimatedValueTrack<A>.VectorPath.Element(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7;
  v9 = v6 + v7;
  v10 = v6 + 7;
  if (((((v6 + 7 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6)
    v6 = ((((v6
           + 7
           + ((v6 + v7 + ((v6 + v7) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 33;
  if (v6 <= 8)
    v11 = 8;
  else
    v11 = v6;
  v12 = v7 <= 7u && (v7 & 0x100000) == 0;
  if (v12 && (unint64_t)(v11 + 1) <= 0x18)
  {
    v13 = AssociatedTypeWitness;
    v14 = *((unsigned __int8 *)a2 + v11);
    if (v14 >= 3)
    {
      if (v11 <= 3)
        v15 = v11;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v27 = 2;
      goto LABEL_23;
    }
    if (v14 == 1)
    {
      v17 = ~v8;
      v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
      v18(a1, a2, AssociatedTypeWitness);
      v19 = ((unint64_t)a2 + v9) & v17;
      v18((_QWORD *)(((unint64_t)a1 + v9) & v17), (_QWORD *)v19, v13);
      v20 = (v9 + v19) & v17;
      v18((_QWORD *)((v9 + (((unint64_t)a1 + v9) & v17)) & v17), (_QWORD *)v20, v13);
      v21 = (_QWORD *)((v10 + ((v9 + (((unint64_t)a1 + v9) & v17)) & v17)) & 0xFFFFFFFFFFFFF8);
      v22 = (_QWORD *)((v10 + v20) & 0xFFFFFFFFFFFFF8);
      *v21 = *v22;
      v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
      v26 = *(_OWORD *)v24;
      v25 = *(_OWORD *)(v24 + 16);
      *(_BYTE *)(v23 + 32) = *(_BYTE *)(v24 + 32);
      *(_OWORD *)v23 = v26;
      *(_OWORD *)(v23 + 16) = v25;
      v27 = 1;
LABEL_23:
      *((_BYTE *)a1 + v11) = v27;
      return a1;
    }
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v11) = 0;
  }
  else
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AnimatedValueTrack<A>.VectorPath.Element(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);

  result = swift_getAssociatedTypeWitness();
  v3 = result;
  v4 = *(_QWORD *)(result - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  if (((((v5 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v5)
    v5 = ((((v5 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v5 <= 8)
    v5 = 8;
  v8 = *(unsigned __int8 *)(a1 + v5);
  if (v8 >= 3)
  {
    if (v5 <= 3)
      v9 = v5;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      v10 = ~v6;
      v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v15(a1, result);
      v11 = (v7 + a1) & v10;
      v15(v11, v3);
      v12 = (v7 + v11) & v10;
      v13 = v3;
      v14 = (uint64_t (*)(uint64_t, uint64_t))v15;
    }
    else
    {
      v14 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
      v12 = a1;
      v13 = v3;
    }
    return v14(v12, v13);
  }
  return result;
}

_QWORD *initializeWithCopy for AnimatedValueTrack<A>.VectorPath.Element(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + 7;
  if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6)
    v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v6 <= 8)
    v10 = 8;
  else
    v10 = v6;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v23 = 2;
  }
  else if (v11 == 1)
  {
    v13 = ~v7;
    v14 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
    v14(a1, a2, AssociatedTypeWitness);
    v15 = ((unint64_t)a2 + v8) & v13;
    v14((_QWORD *)(((unint64_t)a1 + v8) & v13), (_QWORD *)v15, AssociatedTypeWitness);
    v16 = (v8 + v15) & v13;
    v14((_QWORD *)((v8 + (((unint64_t)a1 + v8) & v13)) & v13), (_QWORD *)v16, AssociatedTypeWitness);
    v17 = (_QWORD *)((v9 + v16) & 0xFFFFFFFFFFFFF8);
    v18 = (_QWORD *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v13)) & v13)) & 0xFFFFFFFFFFFFF8);
    *v18 = *v17;
    v19 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_OWORD *)v20;
    v21 = *(_OWORD *)(v20 + 16);
    *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
    *(_OWORD *)v19 = v22;
    *(_OWORD *)(v19 + 16) = v21;
    v23 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v23 = 0;
  }
  *((_BYTE *)a1 + v10) = v23;
  return a1;
}

_QWORD *assignWithCopy for AnimatedValueTrack<A>.VectorPath.Element(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    v9 = v6 + 7;
    if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6)
      v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 33;
    if (v6 <= 8)
      v10 = 8;
    else
      v10 = v6;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v7;
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        v14 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
        v14(a1, AssociatedTypeWitness);
        v14((_QWORD *)(((unint64_t)a1 + v8) & v13), AssociatedTypeWitness);
        v14((_QWORD *)((v8 + (((unint64_t)a1 + v8) & v13)) & v13), AssociatedTypeWitness);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      }
    }
    v15 = *((unsigned __int8 *)a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *a1 = *a2;
      v26 = 2;
    }
    else if (v15 == 1)
    {
      v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
      v17(a1, a2, AssociatedTypeWitness);
      v18 = ((unint64_t)a2 + v8) & v13;
      v17((_QWORD *)(((unint64_t)a1 + v8) & v13), (_QWORD *)v18, AssociatedTypeWitness);
      v19 = (v8 + v18) & v13;
      v17((_QWORD *)((v8 + (((unint64_t)a1 + v8) & v13)) & v13), (_QWORD *)v19, AssociatedTypeWitness);
      v20 = (_QWORD *)((v9 + v19) & 0xFFFFFFFFFFFFF8);
      v21 = (_QWORD *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v13)) & v13)) & 0xFFFFFFFFFFFFF8);
      *v21 = *v20;
      v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      v25 = *(_OWORD *)v23;
      v24 = *(_OWORD *)(v23 + 16);
      *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
      *(_OWORD *)v22 = v25;
      *(_OWORD *)(v22 + 16) = v24;
      v26 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v26 = 0;
    }
    *((_BYTE *)a1 + v10) = v26;
  }
  return a1;
}

_QWORD *initializeWithTake for AnimatedValueTrack<A>.VectorPath.Element(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = v6 + 7;
  if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6)
    v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v6 <= 8)
    v10 = 8;
  else
    v10 = v6;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v23 = 2;
  }
  else if (v11 == 1)
  {
    v13 = ~v7;
    v14 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
    v14(a1, a2, AssociatedTypeWitness);
    v15 = ((unint64_t)a2 + v8) & v13;
    v14((_QWORD *)(((unint64_t)a1 + v8) & v13), (_QWORD *)v15, AssociatedTypeWitness);
    v16 = (v8 + v15) & v13;
    v14((_QWORD *)((v8 + (((unint64_t)a1 + v8) & v13)) & v13), (_QWORD *)v16, AssociatedTypeWitness);
    v17 = (_QWORD *)((v9 + v16) & 0xFFFFFFFFFFFFF8);
    v18 = (_QWORD *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v13)) & v13)) & 0xFFFFFFFFFFFFF8);
    *v18 = *v17;
    v19 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_OWORD *)v20;
    v21 = *(_OWORD *)(v20 + 16);
    *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
    *(_OWORD *)v19 = v22;
    *(_OWORD *)(v19 + 16) = v21;
    v23 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v23 = 0;
  }
  *((_BYTE *)a1 + v10) = v23;
  return a1;
}

_QWORD *assignWithTake for AnimatedValueTrack<A>.VectorPath.Element(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    v9 = v6 + 7;
    if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6)
      v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 33;
    if (v6 <= 8)
      v10 = 8;
    else
      v10 = v6;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X13 }
    }
    v13 = ~v7;
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        v14 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
        v14(a1, AssociatedTypeWitness);
        v14((_QWORD *)(((unint64_t)a1 + v8) & v13), AssociatedTypeWitness);
        v14((_QWORD *)((v8 + (((unint64_t)a1 + v8) & v13)) & v13), AssociatedTypeWitness);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      }
    }
    v15 = *((unsigned __int8 *)a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *a1 = *a2;
      v26 = 2;
    }
    else if (v15 == 1)
    {
      v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
      v17(a1, a2, AssociatedTypeWitness);
      v18 = ((unint64_t)a2 + v8) & v13;
      v17((_QWORD *)(((unint64_t)a1 + v8) & v13), (_QWORD *)v18, AssociatedTypeWitness);
      v19 = (v8 + v18) & v13;
      v17((_QWORD *)((v8 + (((unint64_t)a1 + v8) & v13)) & v13), (_QWORD *)v19, AssociatedTypeWitness);
      v20 = (_QWORD *)((v9 + v19) & 0xFFFFFFFFFFFFF8);
      v21 = (_QWORD *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v13)) & v13)) & 0xFFFFFFFFFFFFF8);
      *v21 = *v20;
      v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
      v25 = *(_OWORD *)v23;
      v24 = *(_OWORD *)(v23 + 16);
      *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
      *(_OWORD *)v22 = v25;
      *(_OWORD *)(v22 + 16) = v24;
      v26 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v26 = 0;
    }
    *((_BYTE *)a1 + v10) = v26;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((((v5
         + ((v5
           + *(unsigned __int8 *)(v4 + 80)
           + ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v6 <= v5)
    v6 = v5;
  v7 = 8;
  if (v6 > 8)
    v7 = v6;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v12 < 2)
    {
LABEL_23:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_23;
LABEL_16:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 254);
}

void storeEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = ((((v7
         + ((v7
           + *(unsigned __int8 *)(v6 + 80)
           + ((v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v8 <= v7)
    v8 = v7;
  if (v8 <= 8)
    v8 = 8;
  v9 = v8 + 1;
  if (a3 < 0xFE)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v11 = a2 - 254;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for AnimatedValueTrack<A>.VectorPath.Element(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((((v3
         + ((v3
           + *(unsigned __int8 *)(v2 + 80)
           + ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v4 <= v3)
    v4 = v3;
  if (v4 <= 8)
    v4 = 8;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 3)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void destructiveInjectEnumTag for AnimatedValueTrack<A>.VectorPath.Element(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((((v5
         + 7
         + ((v5
           + *(unsigned __int8 *)(v4 + 80)
           + ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (a2 > 2)
  {
    if (v6 > v5)
      v5 = v6;
    if (v5 <= 8)
      v7 = 8;
    else
      v7 = v5;
    v8 = a2 - 3;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5)
      v5 = v6;
    if (v5 <= 8)
      v5 = 8;
    a1[v5] = a2;
  }
}

uint64_t ScrollTargetVisibilityChangeModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  char v36[8];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];

  v3 = v2;
  v64[0] = *(_OWORD *)(v2 + 3);
  v56 = *(_OWORD *)(v2 + 3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  LOBYTE(v56) = v47;
  *((_QWORD *)&v56 + 1) = v5;
  *(_QWORD *)&v57 = v6;
  *((_QWORD *)&v57 + 1) = v7;
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTargetVisibilityChangeModifier<A>, a1);
  v10 = type metadata accessor for _ViewModifier_Content();
  v12 = type metadata accessor for PrimitiveTargetVisibilityModifier(0, v8, v9, v11);
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v10);
  MEMORY[0x18D75B4AC](&v47, &v56, v10, v12, v13);
  swift_release();
  v36[0] = v47;
  v37 = v48;
  v38 = v49;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v9;
  v15 = *((_OWORD *)v3 + 1);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v14 + 48) = v15;
  *(_QWORD *)(v14 + 64) = v3[4];
  swift_retain();
  outlined retain of State<Bool>((uint64_t)v64);
  v16 = type metadata accessor for ModifiedContent();
  v46[0] = v13;
  v46[1] = &protocol witness table for PrimitiveTargetVisibilityModifier<A>;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v46);
  View.onAppear(perform:)();
  swift_release();
  swift_release();
  v36[0] = v56;
  v37 = *((_QWORD *)&v56 + 1);
  v38 = v57;
  v39 = v58;
  v40 = v59;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v8;
  *(_QWORD *)(v19 + 24) = v9;
  v20 = *((_OWORD *)v3 + 1);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v19 + 48) = v20;
  *(_QWORD *)(v19 + 64) = v3[4];
  swift_retain();
  outlined retain of State<Bool>((uint64_t)v64);
  v21 = type metadata accessor for ModifiedContent();
  v45[0] = v18;
  v45[1] = MEMORY[0x1E0CE5EF8];
  v32 = MEMORY[0x18D75FFDC](v17, v21, v45);
  View.onDisappear(perform:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v39);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v40);
  v22 = v50;
  v23 = v51;
  v24 = v52;
  v31 = v54;
  v36[0] = v47;
  v37 = v48;
  v38 = v49;
  v39 = v50;
  v40 = v51;
  v41 = v52;
  v42 = v53;
  v43 = v54;
  v44 = v55;
  v25 = type metadata accessor for ModifiedContent();
  v35[0] = v32;
  v35[1] = MEMORY[0x1E0CE5EF8];
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v25, v35);
  static ViewBuilder.buildExpression<A>(_:)(v36, v25, v33);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v24);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v31);
  v26 = v58;
  v27 = v59;
  v28 = v60;
  v29 = v62;
  LOBYTE(v47) = v56;
  v48 = *((_QWORD *)&v56 + 1);
  v49 = v57;
  v50 = v58;
  v51 = v59;
  v52 = v60;
  v53 = v61;
  v54 = v62;
  v55 = v63;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v47, v25, a2);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
}

uint64_t closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)(uint64_t result)
{
  __int128 v1;

  v1 = *(_OWORD *)(result + 24);
  if (*((_QWORD *)&v1 + 1))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of AnyDynamicChild<A, B>((uint64_t)&v1);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollTargetVisibilityChangeModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ScrollTargetVisibilityChangeModifier.body(content:)(a1, a2);
}

double static PrimitiveTargetVisibilityModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _BYTE v41[12];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v34 = a5;
  v33 = a4;
  v36 = a6;
  v57 = *MEMORY[0x1E0C80C00];
  v32 = *a1;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_DWORD *)(a2 + 80);
  v48 = *(_QWORD *)a2;
  v49 = v7;
  v51 = *(_OWORD *)(a2 + 24);
  v50 = v8;
  v52 = v9;
  v53 = v10;
  v54 = *(_OWORD *)(a2 + 56);
  v55 = *(_QWORD *)(a2 + 72);
  v56 = v11;
  type metadata accessor for _AnyPreferenceKey<ScrollTargetRole.Key>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollTargetRole.Key> and conformance _AnyPreferenceKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnyPreferenceKey<ScrollTargetRole.Key>, MEMORY[0x1E0CE4078]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v39 = v48;
  v40 = v49;
  *(_QWORD *)&v41[4] = v8;
  v42 = v51;
  v43 = v9;
  v44 = v10;
  v45 = v54;
  v46 = v55;
  v47 = v56;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  a3(&v37, v12, &v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v37;
  *(_QWORD *)&v14 = v38;
  v39 = v37;
  v35 = v14;
  v40 = v38;
  v15 = PreferencesOutputs.subscript.getter();
  if ((v15 & 0x100000000) == 0)
  {
    v17 = v15;
    LODWORD(v39) = v32;
    type metadata accessor for PrimitiveTargetVisibilityModifier(255, v33, v34, v16);
    type metadata accessor for _GraphValue();
    v18 = _GraphValue.value.getter();
    UpdateCycleDetector.init()();
    v19 = v40;
    v20 = v41[0];
    v21 = static Array._allocateUninitialized(_:)();
    v22 = v39;
    v39 = __PAIR64__(v17, v18);
    LOBYTE(v40) = 0;
    *(_QWORD *)v41 = v22;
    *(_DWORD *)&v41[8] = v19;
    LOBYTE(v42) = v20;
    DWORD1(v42) = -1;
    *((_QWORD *)&v42 + 1) = v21;
    MEMORY[0x1E0C80A78](v21, v23);
    v30 = type metadata accessor for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(0, v33, v34, v24);
    v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveTargetVisibilityModifier<A>.VisibilityActionDispatcher, v30);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v39, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v29, v30, MEMORY[0x1E0DEDCE8], v25, MEMORY[0x1E0DEDD18], v26);
    swift_bridgeObjectRelease();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v27 = v36;
  *v36 = v13;
  result = *(double *)&v35;
  v27[1] = v35;
  return result;
}

uint64_t PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v14 = *(unsigned __int8 *)(v4 + 8);
  result = specialized PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.modifier.getter(a1, a2, a3, a4);
  if ((result & 1) != 0)
  {
    result = PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(a1);
    if (result)
    {
      v7 = result;
      if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(v7, a1, v8, v9);
        swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
    }
    v10 = 1;
  }
  else
  {
    if (v14)
    {
      v11 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v4 + 32) = v11;
      swift_bridgeObjectRetain();
      PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(v11, a1, v12, v13);
      result = swift_bridgeObjectRelease();
    }
    v10 = 0;
  }
  *(_BYTE *)(v4 + 8) = v10;
  return result;
}

uint64_t PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PrimitiveTargetVisibilityModifier(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = static Array._allocateUninitialized(_:)();
  v3 = *v1;
  v4 = v1[1];
  v5 = *((_BYTE *)v1 + 8);
  v6 = v1[5];
  v7 = *((_BYTE *)v1 + 24);
  v8 = v1[7];
  v9 = *((_QWORD *)v1 + 4);
  type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
  v10 = *(_QWORD *)AGGraphGetValue();
  v39 = __PAIR64__(v4, v3);
  v40 = v5;
  v34 = v1;
  v41 = *(_QWORD *)(v1 + 3);
  v42 = v6;
  LOBYTE(v43) = v7;
  v11 = v10;
  HIDWORD(v43) = v8;
  v44 = v9;
  specialized PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.modifier.getter(a1, v12, v13, v14);
  v35 = v11 + 64;
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v11 + 64);
  v37 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v19 = 0;
  v36 = v11;
  while (v17)
  {
    v20 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v21 = v20 | (v19 << 6);
LABEL_22:
    result = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v21);
    v25 = *(_QWORD *)(result + 16);
    if (v25)
    {
      v38 = v19;
      v26 = result + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TableColumnList(v26, (uint64_t)&v39);
        v27 = v44;
        v28 = __swift_project_boxed_opaque_existential_1(&v39, v43);
        v30 = MEMORY[0x1E0C80A78](v28, v29);
        (*(void (**)(uint64_t (*)(unsigned int *, uint64_t), double))(v27 + 24))(partial apply for closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs(), v30);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
        v26 += 40;
        --v25;
      }
      while (v25);
      result = swift_bridgeObjectRelease();
      v11 = v36;
      v19 = v38;
    }
  }
  v22 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  if (v22 >= v37)
    goto LABEL_26;
  v23 = *(_QWORD *)(v35 + 8 * v22);
  ++v19;
  if (v23)
    goto LABEL_21;
  v19 = v22 + 1;
  if (v22 + 1 >= v37)
    goto LABEL_26;
  v23 = *(_QWORD *)(v35 + 8 * v19);
  if (v23)
    goto LABEL_21;
  v19 = v22 + 2;
  if (v22 + 2 >= v37)
    goto LABEL_26;
  v23 = *(_QWORD *)(v35 + 8 * v19);
  if (v23)
    goto LABEL_21;
  v19 = v22 + 3;
  if (v22 + 3 >= v37)
    goto LABEL_26;
  v23 = *(_QWORD *)(v35 + 8 * v19);
  if (v23)
  {
LABEL_21:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_22;
  }
  v24 = v22 + 4;
  if (v24 < v37)
  {
    v23 = *(_QWORD *)(v35 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        v19 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_31;
        if (v19 >= v37)
          goto LABEL_26;
        v23 = *(_QWORD *)(v35 + 8 * v19);
        ++v24;
        if (v23)
          goto LABEL_21;
      }
    }
    v19 = v24;
    goto LABEL_21;
  }
LABEL_26:
  swift_release();
  v31 = v45;
  swift_bridgeObjectRetain();
  v32 = static Array<A>.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
    v33 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v33 = v31;
  }
  *((_QWORD *)v34 + 4) = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v33;
}

unint64_t implicit closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updateValue()()
{
  return 0xD00000000000001CLL;
}

uint64_t closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(unsigned int *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  double Width;
  double v43;
  CGFloat x;
  CGFloat y;
  CGFloat v46;
  CGFloat height;
  double v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CGRect v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  v51 = a4;
  v53 = a2;
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v49 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v50 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v49 - v17;
  v20 = *a1;
  v19 = a1[1];
  v21 = *((_QWORD *)a1 + 1);
  v22 = *((_QWORD *)a1 + 2);
  v23 = *((_QWORD *)a1 + 3);
  v24 = *((_QWORD *)a1 + 4);
  v25 = *((_QWORD *)a1 + 5);
  v52 = *((_QWORD *)a1 + 6);
  v26 = *((_QWORD *)a1 + 7);
  v27 = *((_QWORD *)a1 + 8);
  v29 = *((_QWORD *)a1 + 9);
  v28 = *((_QWORD *)a1 + 10);
  *(_QWORD *)&v60 = __PAIR64__(v19, v20);
  *((_QWORD *)&v60 + 1) = v21;
  v31 = v30;
  _ViewList_ID.explicitID<A>(for:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v11, 1, a5) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v18, v11, a5);
  *(_QWORD *)&v60 = __PAIR64__(v19, v20);
  *((_QWORD *)&v60 + 1) = v21;
  *(_QWORD *)&v61 = v22;
  *((_QWORD *)&v61 + 1) = v23;
  v62 = v24;
  v63 = v25;
  v33 = v52;
  v64 = v52;
  v65 = v26;
  v66 = v27;
  v67 = v29;
  v68 = v28;
  ScrollableCollectionSubview.frame.getter();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v59.origin.x = v34;
  v59.origin.y = v36;
  v59.size.width = v38;
  v59.size.height = v40;
  v62 = 0;
  v60 = 0u;
  v61 = 0u;
  LOBYTE(v63) = 2;
  v54 = v33;
  v55 = v26;
  v56 = v27;
  v57 = v29;
  v58 = v28;
  CGRect.whileClippingToScrollViewsConvert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v60);
  v69.origin.x = v35;
  v69.origin.y = v37;
  v69.size.width = v39;
  v69.size.height = v41;
  Width = CGRectGetWidth(v69);
  v70.origin.x = v35;
  v70.origin.y = v37;
  v70.size.width = v39;
  v70.size.height = v41;
  v43 = Width * CGRectGetHeight(v70);
  x = v59.origin.x;
  y = v59.origin.y;
  v46 = v59.size.width;
  height = v59.size.height;
  v48 = CGRectGetWidth(v59);
  v71.origin.x = x;
  v71.origin.y = y;
  v71.size.width = v46;
  v71.size.height = height;
  if (v48 * CGRectGetHeight(v71) / v43 >= v53)
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v50, v18, a5);
    type metadata accessor for Array();
    Array.append(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v18, a5);
}

